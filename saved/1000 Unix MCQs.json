[
    {
        "id": 1,
        "Question": "What is UNIX?",
        "Options": [
            "a) an operating system",
            "b) a text editor",
            "c) programming language",
            "d) software program"
        ],
        "Answer": "Answer: a\nExplanation: UNIX is an operating system developed in the early 1970’s at Bell Labs by Dennis Ritchie, Ken Thompson, and others. It is a multiuser, multitasking and timesharing operating system. The power of UNIX is derived from its commands and their multiple options.  "
    },
    {
        "id": 2,
        "Question": "In which language UNIX is written?",
        "Options": [
            "a) JAVA",
            "b) Python",
            "c) C++",
            "d) C"
        ],
        "Answer": "Answer: d\nExplanation: UNIX was originally written in Assembly language but Dennis Ritchie and Ken Thompson wanted an operating system which could run on more than one type of hardware. So in 1973, they rewrote the whole operating system in C language due to which one of the strongest features i.e. portability was added to the operating system. "
    },
    {
        "id": 3,
        "Question": "Which of the following is not a feature of UNIX?",
        "Options": [
            "a) multitasking",
            "b) multiuser",
            "c) portability",
            "d) easy to use"
        ],
        "Answer": "Answer: d\nExplanation: UNIX is a multitasking operating system i.e. a user can run multiple tasks concurrently. Similarly, it is a multiuser system because it permits working with multiple users on a single operating system. But a major disadvantage of UNIX lies in the fact that the richness provided by its commands requires a special type of commitment to understand the subject. i.e. the user must be well aware of commands he is using and the functions performed by them. "
    },
    {
        "id": 4,
        "Question": "Which of the following is not a part of all the versions of UNIX?",
        "Options": [
            "a) Kernel and Shell",
            "b) Commands and utilities",
            "c) Graphical user interface",
            "d) System Calls"
        ],
        "Answer": "Answer: c\nExplanation: The kernel is the heart of the operating system while the shell is the utility which processes our requests. While system calls are a handful of functions which are used to interact with the kernel and make available the services provided by the operating system. A Graphical user interface (GUI) is available in UNIX, but the traditional UNIX interface is the command line only. "
    },
    {
        "id": 5,
        "Question": "Which of the following is not true about UNIX?",
        "Options": [
            "a) Many people can use a UNIX based computer at the same time; hence UNIX is called as a multiuser system",
            "b) A user can run multiple programs at the same time; hence UNIX is called a multitasking environment",
            "c) UNIX was not written in ‘C’ language",
            "d) Linux is also known as a version of UNIX"
        ],
        "Answer": "Answer: c\nExplanation: One of the most attractive features of UNIX is that it supports multi-user and multitasking environment which makes it so popular among its users. There are many UNIX variants available in the market. Solaris Unix, AIX, HP Unix, BSD are some of the examples. Linux is also a flavor of UNIX which is freely available. Unix was developed in 1969 by AT&T employees Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna at Bell Labs and was written in ‘C’. "
    },
    {
        "id": 6,
        "Question": " Which part of the UNIX operating system interacts with the hardware?",
        "Options": [
            "a) Kernel",
            "b) Shell",
            "c) vi editor",
            "d) application program"
        ],
        "Answer": "Answer: a\nExplanation: POSIX- Portable Operating System Interface for Computer Environment is basically a set of standards specified by IEEE for establishing compatibility between operating systems, especially which are UNIX based. For example, if we write a program relying on POSIX standards, we can easily port it among a large family of Unix derivatives (including Linux). "
    },
    {
        "id": 7,
        "Question": "What is a superuser?",
        "Options": [
            "a) system manager",
            "b) normal user",
            "c) administrator",
            "d) a user with special rights"
        ],
        "Answer": "Answer: a\nExplanation: Computers don’t have any capability of translating commands into actions. To do so we require shell-a command interpreter which translates our commands into actions. It is actually the interface between the user and kernel. There could be multiple shells in action on a single system. "
    },
    {
        "id": 8,
        "Question": "What is the windowing system of UNIX known as?",
        "Options": [
            "a) X Window system",
            "b) LINUX",
            "c) Red Hat",
            "d) DOS"
        ],
        "Answer": "Answer: a\nExplanation: The kernel is the core of the operating system. It is a collection of routines written in C which directly communicates with the hardware. User programs that need to interact with the hardware access the services of the kernel. There is only one kernel running on a system, unlike shells which can be multiple. "
    },
    {
        "id": 9,
        "Question": "What are Commands?",
        "Options": [
            "a) specific instructions for performing a particular task",
            "b) part of the operating system",
            "c) part of the shell",
            "d) special instructions"
        ],
        "Answer": "Answer: a\nExplanation: Commands are basically specific instructions which are given by the users to perform a particular piece of a task. In UNIX, commands are entered by the user through a command line interface which further is processed by the command interpreter i.e. Shell."
    },
    {
        "id": 10,
        "Question": "In how many categories, commands of UNIX operating system classified?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) Many",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: There are two broad categories in which the classification of commands is based on UNIX. They are namely—external commands and internal commands. External commands are those commands that have an independent existence in the /bin directory i.e. these are the executables which are present in separate files while Internal commands are built-in commands which are built into the shell. Example, ‘ls’ is an external command while ‘echo’ is an internal command."
    },
    {
        "id": 11,
        "Question": "Which command is used for extracting the details of the operating system?",
        "Options": [
            "a) cd",
            "b) echo",
            "c) uname",
            "d) wc"
        ],
        "Answer": "Answer: c\nExplanation: uname command is used for extracting the details like name, version of the operating system running on the machine. the cd command is used for changing directories and echo command is used for displaying the contents of a string on to the output stream. wc command is used for counting words and other details in a file.  "
    },
    {
        "id": 12,
        "Question": "Which of the following is not a valid option of uname?",
        "Options": [
            "a) -a",
            "b) -s",
            "c) -v",
            "d) -z"
        ],
        "Answer": "Answer: a\nExplanation: When we specify a command, the shell searches for that command in the list of directories specified in the PATH variable and then executes it after locating the command successfully."
    },
    {
        "id": 13,
        "Question": "How can we specify more than one command in the command line at the same time?",
        "Options": [
            "a) using ;",
            "b) using >",
            "c) using ==",
            "d) not possible"
        ],
        "Answer": "Answer: a\nExplanation: Arguments are parameters which are specified along with commands so that the command can perform an operation or take input from that parameter while options are also arguments but they are predetermined i.e. they perform a particular task. For example, echo hello. In this command hello is an argument while in ls  – l, -l is an option."
    },
    {
        "id": 14,
        "Question": "Which command is used to display the documentation of commands in UNIX?",
        "Options": [
            "a) help",
            "b) search",
            "c) whatis",
            "d) man"
        ],
        "Answer": "Answer: d\nExplanation: uname command is used for printing the information about the current system.  -a is used for printing all the information including version name, kernel name, kernel release, machine hardware name etc. -s is used for printing only the kernel name while -v is used for printing the kernel version."
    },
    {
        "id": 15,
        "Question": "Which command is used for displaying date and calendar in UNIX?",
        "Options": [
            "a) date and cal",
            "b) DATE and CAL",
            "c) date and calendar",
            "d) dt and cl"
        ],
        "Answer": "Answer: a\nExplanation: UNIX allows us to specify more than one command at the same time in the command line. To do so, we have to separate each command from each other using (;). For example, wc file1 ;     ls  -l file1 . The > symbol allows us to redirects the output of the command(s). For example, wc file1 > file2. Now, file2 will contain the output produced by the wc file1 command. Both ; and > are called metacharacters."
    },
    {
        "id": 16,
        "Question": "What is the output of who command?",
        "Options": [
            "a) display information about users who are currently logged in.",
            "b) display file hierarchy",
            "c) display administrator information",
            "d) display processes"
        ],
        "Answer": "Answer: d\nExplanation: UNIX provides us with a facility of man command, which is used for getting documentation of any command. For example, to seek help on wc command simply type man wc. This will simply display all the possible operations, options, description, synopsis of wc command. The POSIX specification requires only one available option with man command i.e.  -k, which prints a one-line description of the command. whatis command is also available on many UNIX systems which also displays a one-line description of the command. man -f emulates the behavior of whatis command."
    },
    {
        "id": 17,
        "Question": "What are meta-characters?",
        "Options": [
            "a) special characters having predefined meaning to the shell",
            "b) special symbols",
            "c) shell symbols",
            "d) command symbols"
        ],
        "Answer": "Answer: a\nExplanation: date command is used for displaying the current system date and time while cal command is used to see the calendar of any specific month/year."
    },
    {
        "id": 18,
        "Question": "Which command is used for displaying date in the format dd/mm/yyyy ?",
        "Options": [
            "a) date  +%m",
            "b) date +%h",
            "c) date  +”%d/%m/%Y”",
            "d) date +”%h %m”"
        ],
        "Answer": "Answer: a\nExplanation: who command output the details of the users who are currently logged in to the system. The output includes username, terminal name (on which they are logged in), date and time of their login etc."
    },
    {
        "id": 19,
        "Question": "echo command is used for _________",
        "Options": [
            "a) displaying errors",
            "b) displaying operating system details",
            "c) displaying diagnostic messages",
            "d) displaying date and time"
        ],
        "Answer": "Answer: c\nExplanation: echo command is generally used for displaying diagnostic messages on to the terminal or to issue prompt for reading the user input. All shells now have echo built in i.e. it is an internal command.\n\n\n\t\n\n$ echo hello\nhello\n\n\n "
    },
    {
        "id": 20,
        "Question": "What are escape sequences?",
        "Options": [
            "a) special characters beginning with a \\ (backslash)",
            "b) special commands",
            "c) special utilities",
            "d) a sequence of characters"
        ],
        "Answer": "Answer: a\nExplanation: An escape sequence is generally a two character string which begins with a \\. The role of escape sequences is that they change the state of computer or the peripheral devices attached to it, For example, \\n is an escape sequence which implies a new line character."
    },
    {
        "id": 21,
        "Question": "Which of the following is not a valid escape sequence in UNIX?",
        "Options": [
            "a) \\n",
            "b) \\t",
            "c) \\v",
            "d) \\d"
        ],
        "Answer": "Answer: d\nExplanation:\n\n\n        \n\n\\n denotes a new line character\n\\t denotes a space tab while \n\\v denotes a vertical tab.\n\n\n"
    },
    {
        "id": 22,
        "Question": "Which command is used as an alternative to echo command?",
        "Options": [
            "a) ls",
            "b) printf",
            "c) wc",
            "d) ps"
        ],
        "Answer": "Answer: b\nExplanation: printf command is available on most UNIX systems and it behaves much like a substitution for echo command. It supports many of the formats which are used by C’s printf function. printf is also an external command. "
    },
    {
        "id": 23,
        "Question": "For what purpose bc command is used?",
        "Options": [
            "a) as a calculator",
            "b) as an editor",
            "c) as a process table viewer",
            "d) for copying files"
        ],
        "Answer": "Answer: a\nExplanation: bc command is used for invoking calculator on UNIX system. It comes with a wide library for performing calculations. The power of this tool can be derived from the fact, that it can perform calculations up to and above 900 digits!"
    },
    {
        "id": 24,
        "Question": "script command is used for___________",
        "Options": [
            "a) recording history",
            "b) recording our session",
            "c) recording passwords",
            "d) recording scripts"
        ],
        "Answer": "Answer: b\nExplanation: script command is basically used for recording our login session in a file. All the keystrokes, output, error messages that are encountered while our session will be stored in a file which we can view later. The name of the file in which the session is stored is typescript."
    },
    {
        "id": 25,
        "Question": "Which of the following is a valid option with script command?",
        "Options": [
            "a) -b",
            "b) -a",
            "c) -d",
            "d) -x"
        ],
        "Answer": "Answer: b\nExplanation: script command overwrites any previous typescript that may exist. -a option allows us to append our session to the existing typescript file without overwriting to it.\n For example,  script  -a\n We can also record our session to a different log file by using the following command.\n\n\nscript   file_one\n\n\n    "
    },
    {
        "id": 26,
        "Question": "Which of the following function cannot be performed by mailx command?",
        "Options": [
            "a) sending and receiving emails",
            "b) reply to the sender",
            "c) forward, delete and print mails",
            "d) un-send mails"
        ],
        "Answer": "Answer: a\nExplanation: Since UNIX is a multiuser system, so communication between systems seems to be natural and important. For this purpose mailx command is used. Through mailx command, we can send and receive emails to different users on same host network or different network. The addressing scheme uses a combination of username and machine name. For example,\n\n\nmailx  bob  (bob is on same host)\nmailx  [email protected]  (bob is on networked host saturn)\n\n\n "
    },
    {
        "id": 27,
        "Question": "Which of the following is not an internal command used by mailx?",
        "Options": [
            "a) N",
            "b) d",
            "c) q",
            "d) a"
        ],
        "Answer": "Answer: d\nExplanation: mailx command can perform various functions apart from sending and receiving emails such as replying to the sender and all recipients, forward it to others, save it to a different folder, delete it, print it. To view received emails, simply type mailx command and hit enter.  "
    },
    {
        "id": 28,
        "Question": " -h option is used with who command for what purpose?",
        "Options": [
            "a) display output with header information",
            "b) display output with a more detailed version",
            "c) display output with trailer information",
            "d) display output in columnar form"
        ],
        "Answer": "Answer: d\nExplanation: There are various internal commands used by mailx each of which performs a specified task.\n\n\nN , prints the message numbered N\nd , deletes the current message( if N is not specified along with it)\nq , quits the mailx  program\n\n\n"
    },
    {
        "id": 29,
        "Question": "Which command is used by the user to change their login password in UNIX?",
        "Options": [
            "a) man",
            "b) reset",
            "c) passwd",
            "d) cp"
        ],
        "Answer": "Answer: a\nExplanation: History command displays the list of recently used commands by the user which means whatever commands are used by the user in the current session will be displayed on the terminal using history command."
    },
    {
        "id": 30,
        "Question": "Which command handles a character stream by duplicating its input?",
        "Options": [
            "a) tree",
            "b) tee",
            "c) tty",
            "d) ls"
        ],
        "Answer": "Answer: c\nExplanation: Since UNIX is a multiuser system, it requires a password from every user who wants to log in to the system to help ensure that all the data and files of the user are secure from hackers and errant users. A user can simply change his/her login password by using the passwd command. Simply type this command on the terminal and then enter the old password, which after successful verification would allow the user to input a new password for his login. "
    },
    {
        "id": 31,
        "Question": "When backspace doesn’t work to erase characters, we can use _____",
        "Options": [
            "a) ctrl-f",
            "b) ctrl-h",
            "c) ctrl-c",
            "d) ctrl-u"
        ],
        "Answer": "Answer: b\nExplanation: tee is an external command which handles a stream of characters by duplicating its input. It saves one copy in a file and writes the other to standard output. tee command can be placed anywhere in a pipeline.\n\n\n\t\n\n        \n\n$ who  |  tee  user.txt\n\n\nThe above command displays the output of who command on the terminal and also saves this output in a file named user.txt."
    },
    {
        "id": 32,
        "Question": "For interrupting a command, we can use _____",
        "Options": [
            "a) ctrl-f",
            "b) esc",
            "c) ctrl-h",
            "d) ctrl-c"
        ],
        "Answer": "Answer: a\nExplanation: Since man is also a UNIX command, it is necessary to know how man itself is used. For this purpose, use the same command to view its own documentation:\n\n\n$ man man\t// viewing man pages with man\n\n\n "
    },
    {
        "id": 33,
        "Question": "Ctrl-S stops scrolling of screen output and ________",
        "Options": [
            "a) locks terminal",
            "b) delete a character",
            "c) locks keyboard",
            "d) delete a line"
        ],
        "Answer": "Answer: b\nExplanation: Sometimes it may happen that backspace doesn’t work and whenever it is pressed, ^H is displayed on the terminal. To resolve this problem, we can use control key i.e. ctrl-H. Ctrl-u is used for killing a line altogether without executing it and Ctrl-c interrupts the program and bring back the prompt."
    },
    {
        "id": 34,
        "Question": "Which control unlocks the keyboard?",
        "Options": [
            "a) ctrl-u",
            "b) ctrl-c",
            "c) ctrl-z",
            "d) ctrl-q"
        ],
        "Answer": "Answer: d\nExplanation: Sometimes, a program goes on running on for an hour and does not seem to complete. To interrupt that command we can use the control key, ctrl-c. Ctrl-h is used to erase character by character when backspace doesn’t work."
    },
    {
        "id": 35,
        "Question": "Which command is used for killing a line?",
        "Options": [
            "a) ctrl-k",
            "b) del",
            "c) esc",
            "d) ctrl-u"
        ],
        "Answer": "Answer: c\nExplanation: There are various keyboard commands to try when things go wrong. One of these commands is Ctrl-s which stops scrolling of screen output and locks the keyboard."
    },
    {
        "id": 36,
        "Question": "In how many broad categories, files are divided into UNIX?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 5",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: We can define a file as a stream of characters or a container for storing information. While working in a UNIX environment, we came across three categories of files which are classified as- ordinary file, directory file and device file."
    },
    {
        "id": 37,
        "Question": " The most common file type is ___",
        "Options": [
            "a) ordinary file",
            "b) directory file",
            "c) device file",
            "d) ordinary file and directory file"
        ],
        "Answer": "Answer: d\nExplanation: Files are divided into three major categories i.e. ordinary file, directory file and device file. The characteristics of these three categories of files differ from each other and each category has a predefined use."
    },
    {
        "id": 38,
        "Question": "What is a directory file?",
        "Options": [
            "a) a directory containing data",
            "b) a directory containing details of the files and subdirectories it contains",
            "c) a directory contains files",
            "d) a directory containing data and files"
        ],
        "Answer": "Answer: b\nExplanation: A UNIX file’s size is not stored in the file, nor its name. All this information is stored separately in a separate area of hard disk which is not directly accessible to humans, but only to the kernel."
    },
    {
        "id": 39,
        "Question": "Each entry of directory file has component(s) namely _____",
        "Options": [
            "a) filename",
            "b) inode number",
            "c) filename and inode number",
            "d) file size"
        ],
        "Answer": "Answer: a\nExplanation: The most common file type is an ordinary file or a regular file. It contains data as a stream of characters. Ordinary files are also of two types, text file and binary file."
    },
    {
        "id": 40,
        "Question": " When we log in, the UNIX places us in a directory, called ______ directory",
        "Options": [
            "a) home",
            "b) main",
            "c) parent",
            "d) current"
        ],
        "Answer": "Answer: b\nExplanation: A directory file contains no data but some details of the subdirectories and files that it contains. Directory files contain an entry for every file and subdirectory in it and each entry has some necessary information regarding files and subdirectories."
    },
    {
        "id": 41,
        "Question": " The root directory is represented by ___",
        "Options": [
            "a)  \\",
            "b)  /",
            "c) *",
            "d) $"
        ],
        "Answer": "Answer: c\nExplanation: Every entry of the directory file contains information about files and subdirectories and each entry has two components:\n->   Filename\n->    A unique identification number (called inode number). "
    },
    {
        "id": 42,
        "Question": "_____ and _____ cannot be used in a filename.",
        "Options": [
            "a) /, NULL",
            "b) $,^",
            "c) ., %",
            "d) NULL, $"
        ],
        "Answer": "Answer: a\nExplanation: Device files are nothing but special files which does not contain a stream of characters but some attributes related to the devices which govern the operation of a device. The kernel reads this file for the attributes to perform operations on any device."
    },
    {
        "id": 43,
        "Question": "Which command is used for printing the current working directory?",
        "Options": [
            "a) HOME",
            "b) cd",
            "c) pwd",
            "d) dir"
        ],
        "Answer": "Answer: c\nExplanation: pwd command is used for checking our current directory. Current directory is the directory in which we are currently working. pwd displays the absolute pathname i.e. with respect to the root directory.\n\n\n\t\n\n$ pwd\n/home/user06/Abdullah\n\n\n "
    },
    {
        "id": 44,
        "Question": " Which command is used for changing the current directory?",
        "Options": [
            "a) cd",
            "b) cp",
            "c) pwd",
            "d) rm"
        ],
        "Answer": "Answer: a\nExplanation: cd (change directory) command is used for moving around the file system. cd command is usually invoked with a argument. After invocation, it changes the current directory to the directory specified as argument. Cp command is used for copying files while rm command is used for deleting files.\nFor example: our current directory is /bin/user06 and we want to change our directory to a directory named dir_one which is inside the user06 directory. To do so, type the following:\n\n\n$ cd dir_one\n$pwd\n/bin/user06/dir_one\n\n\n"
    },
    {
        "id": 45,
        "Question": "Which command is used for creating directories?",
        "Options": [
            "a) rmdir",
            "b) mkdir",
            "c) cd",
            "d) cp"
        ],
        "Answer": "Answer: b\nExplanation: cd command can be used without any arguments. When it used in such a way, then it changes our current directory to home directory."
    },
    {
        "id": 46,
        "Question": "6. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">    $ mkdir dir   dir/dir_01/dir_02</pre></div></div></div></div></div></div>",
        "Options": [
            "a) create dir, dir_01 and dir_02",
            "b) creates dir_02",
            "c) creates dir only",
            "d) throws an error"
        ],
        "Answer": "Answer: b\nExplanation: Directories in UNIX are created using mkdir command. The name of the directory to be created is specified as an argument to the mkdir command. For example, to create a dir named dir_01 in the current directory we can use the following command,\n\n\n\t\n\n$ mkdir dir_01\n\n\n"
    },
    {
        "id": 47,
        "Question": "Sometimes we are unable to create a directory because ______________",
        "Options": [
            "a) the directory may already exist in the current directory",
            "b) there may be an ordinary file by the same name in the current directory",
            "c) the permissions set for the current directory does not allow the creation",
            "d) the directory may exist, there may be an ordinary file, the permissions set for the current directory does not allow the creation"
        ],
        "Answer": "Answer: a\nExplanation: Multiple directories can be created by one mkdir command.\n\n\n\t\n\n$ mkdir dir_01  dir_02  dir_03\n\n\n"
    },
    {
        "id": 48,
        "Question": "Which command is used for removing an empty directory?",
        "Options": [
            "a) mkdir",
            "b) rmdir",
            "c) del",
            "d) remove"
        ],
        "Answer": "Answer: a\nExplanation: The above command first creates a directory named dir and after that it creates a subdirectory dir_01 under dir. At last, it creates another subdirectory dir_02 under dir_01. Thus a directory tree is formed in which directory dir is the parent directory and dir_01, dir_02 are subdirectories."
    },
    {
        "id": 49,
        "Question": "If rmdir dir001 fails, what could be the reason(s)?",
        "Options": [
            "a) dir001 doesn’t exist",
            "b) dir001 is not empty",
            "c) permissions of dir001 doesn’t allow to remove it",
            "d) dir001 doesn’t exist, dir001 is not empty and permissions of dir001 doesn’t allow to remove it"
        ],
        "Answer": "Answer: d\nExplanation: Sometimes we are not able to create directory because of multiple reasons as stated above. "
    },
    {
        "id": 50,
        "Question": " What is an absolute pathname?",
        "Options": [
            "a) pathname relative to a parent directory",
            "b) pathname relative to the root (/)",
            "c) pathname relative to parent and current directory",
            "d) pathname relative to the current directory"
        ],
        "Answer": "Answer: a\nExplanation: pathname is basically a sequence of symbols and filenames which indicates the location of our file in the hierarchical file system. pathname is of two types – absolute and relative pathnames. For example,\n\n\n\t\n\n$ pwd\n/users09/dir01/documents\t// pathname indicating our current directory\n\n\n"
    },
    {
        "id": 51,
        "Question": "What is a relative pathname?",
        "Options": [
            "a) pathname relative to parent directory",
            "b) pathname relative to root (/)",
            "c) pathname relative to parent and current directory",
            "d) pathname relative to current directory"
        ],
        "Answer": "Answer:  b\nExplanation: When a file’s pathname is determined with respect to the root(/), such a pathname is called absolute pathname. No two files in a UNIX system can have same absolute pathnames. Two files can be of same name but in different directories hence their pathname would be different from each other. For example, /bin/user06/dir_01  is an example of absolute pathname."
    },
    {
        "id": 52,
        "Question": "Which of the following cryptic symbols are used in relative pathname?",
        "Options": [
            "a) ( . )",
            "b) ( . . )",
            "c) $",
            "d) ( . ) and ( . . )"
        ],
        "Answer": "Answer: c\nExplanation: When a file uses its parent or current directory as a reference for navigation, such a pathname is called absolute pathname.\n\n\n$ pwd\n/user08/kumar/documents/directory001\t// absolute pathname\n\n\n"
    },
    {
        "id": 53,
        "Question": "$ cd  . .  is used to move ___ level up in the file hierarchy.",
        "Options": [
            "a) two",
            "b) one",
            "c) three",
            "d) zero"
        ],
        "Answer": "Answer: d\nExplanation: Relative pathname uses two cryptic symbols which are ( . ) and ( . . )\n(.)  a single dot represent the current directory.\n( . . ) two dots represent the parent directory."
    },
    {
        "id": 54,
        "Question": "$ cp file_01  .  copies the file named file_01 in ____ directory",
        "Options": [
            "a) current",
            "b) parent",
            "c) root",
            "d) user"
        ],
        "Answer": "Answer: b\nExplanation: ( . . ) two dots represent the parent directory. So cd . . will make us move one level up. For example,\n\n\n\t\n\n$ pwd\n/user08/docs/template\t         // current working directory\n$ cd . .\t\t        // one level up\n$ pwd\n/user08/docs\n\n\n\t"
    },
    {
        "id": 55,
        "Question": "9. The output of the following command is __________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ cp  abd/ .user_06</pre></div></div></div></div></div></div>",
        "Options": [
            "a) copies .user_06 file in current directory",
            "b) copies .user_06 file in parent directory of directory named abd",
            "c) undefined behaviour",
            "d) erroneous output"
        ],
        "Answer": "Answer: a\nExplanation: The ( . ) represents the current directory so the above command will create a copy of file_01 in the current working directory."
    },
    {
        "id": 56,
        "Question": "For moving two level up in the file hierarchy system using cd command once, we separates ( . . ) by which symbol?",
        "Options": [
            "a) ?",
            "b) $",
            "c) *",
            "d) /"
        ],
        "Answer": "Answer: b\nExplanation: Whenever the pathname is relative to the root it is an example of relative pathname. The above pathname is also relative to the root, so it is an example of relative pathname."
    },
    {
        "id": 57,
        "Question": "Which command is used for listing files in a directory?",
        "Options": [
            "a) ps",
            "b) list",
            "c) ls",
            "d) wc"
        ],
        "Answer": "Answer: c\nExplanation: ls command is one of the most powerful commands used in UNIX system. It comes available with a bunch of options for listing files available in the directory. There are a number of options like -l, -a which are used for listing files in different manners according to user’s need.\n\n\n\t\n\n$ ls\n001.sh        \nFILE2       \nabc.txt\ndir08\n\n\n"
    },
    {
        "id": 58,
        "Question": "Which option is used with ls command for long listing of files with seven attributes?",
        "Options": [
            "a) -a",
            "b) -l",
            "c) -x",
            "d) -i"
        ],
        "Answer": "Answer: b\nExplanation: -l is used with ls command for long listing of files in ASCII collating sequence. The attributes displayed are:\n->\tFile type and permissions\n->\tLinks\n->\tOwnership\n->\tGroup ownership\n->\tFile size\n->\tLast modification time\n->\tFilename\n\n\n\t\n\n        \n\n$ ls   -l\ndrwxr-xr-x     5 abd      users   4096   Aug 12  08:30 go\ndrwx------      3 mash    users   4096   Nov 28  10:49 irc\ndrwxr-xr-x    2 ryan      users   32768  July 25   09:15 logs\ndrwxr-xr-x    8 anki      users   4096    Oct  2   17:13 src\n\n\n "
    },
    {
        "id": 59,
        "Question": "Which option is used with ls to display attributes of the directory ?",
        "Options": [
            "a) -a",
            "b) -ld",
            "c) -d",
            "d) -o"
        ],
        "Answer": "Answer: c\nExplanation: ls command when used with directory name as an argument, lists all the files in the directory. To force ls to list the attributes of the directory we use the -ld option.\n\n\n$ ls  -ld \ndrwxr-xr-x     5 george   users   4096  Sep 25  08:30 go\ndrwx------      3 george   users   4096  Sep 27  10:49 irc\ndrwxr-xr-x    2 george   users   32768 Oct  4   09:15 logs\ndrwxr-xr-x    8 george   users   4096   Oct  2   17:13 src\n\n\n "
    },
    {
        "id": 60,
        "Question": "-a option is used with ls command for what purpose?",
        "Options": [
            "a) for showing hidden files",
            "b) for showing executables",
            "c) for showing directories",
            "d) for multi columnar output"
        ],
        "Answer": "Answer: a\nExplanation: -a option when used with ls command displays all the files including hidden files. Files beginning with a ( . ) are listed using -a option. There are certain files (filenames beginning with a  . ) These files are not listed without -a option.\n\n\n\t\n\n$ ls  -ax\n./\t. ./\tcalendar\n.file\t.rhost\tabc_001\n\n\n"
    },
    {
        "id": 61,
        "Question": "Which option is used with ls command to produce multi columnar output?",
        "Options": [
            "a) -x",
            "b) -F",
            "c) -a",
            "d) -v"
        ],
        "Answer": "Answer: a\nExplanation: If there are multiple files present in a directory for listing, it is better that we display these files in multiple columns. For this purpose -x is used. For example,\n\n\n$ ls  -x\nFile1        file2       abc.txt\nDir08       res.c       txt05\nDep.lst   emp.sh    udisk\n\n\n "
    },
    {
        "id": 62,
        "Question": "What is the collating sequence of ls command for listing files?",
        "Options": [
            "a) Numerals  >  Uppercase   > Lowercase",
            "b) Numerals   >  Lowercase   > Uppercase",
            "c) Lowercase   >  Uppercase   > Numerals",
            "d) Uppercase   > Numerals   > Lowercase"
        ],
        "Answer": "Answer: a\nExplanation: The output of ls commad is arranged in ASCII collating sequence which is, filenames starting with Numerals first, then Uppercase, then lowercase.\n\n\n$ ls \n001_dir                 //numeral first\n09_abc            \nABD.txt                //uppercase\nprog.sh\t\t      //lowercase\n\n\n"
    },
    {
        "id": 63,
        "Question": " How can we identify executables and directories from the output of ls command?",
        "Options": [
            "a) using -F option",
            "b) using  -x option",
            "c) using -a option",
            "d) using -i option"
        ],
        "Answer": "Answer: a\nExplanation: The output of the ls command simply displays filenames without indicating the file type. For identifying the file type we use -F option. The output of ls  -F displays filenames with two symbols * and /, which are type indicators. The filenames containing * are executables while those containing / are directories.\n\n\n$ ls  -Fx\n008abc.txt       TOX.sh*     calendar*\nDept.lst           helpdir/     progs/\n\n\n"
    },
    {
        "id": 64,
        "Question": "What does the -S option do in ls command?",
        "Options": [
            "a) sorts according to modification time",
            "b) sorts according to last access time",
            "c) sorts according to file size",
            "d) sorts according to inode number"
        ],
        "Answer": "Answer: a\nExplanation: The above command traverses the directory tree in a recursive manner until no subdirectories are left. In simple words, we can say that it produces a recursive listing of files. "
    },
    {
        "id": 65,
        "Question": " -u option sorts the files according to ____",
        "Options": [
            "a) last modification time",
            "b) last access time",
            "c) ASCII collating sequence",
            "d) file size"
        ],
        "Answer": "Answer: b\nExplanation: Both -r and -R are different options and performs different tasks. -r is used to sort the filenames in reverse order while sorting while -R is used for recursive listing of files."
    },
    {
        "id": 66,
        "Question": " -t option sorts the files according to ____",
        "Options": [
            "a) last modification time",
            "b) last access time",
            "c) ASCII collating sequence",
            "d) file size"
        ],
        "Answer": "Answer: c\nExplanation: ls -S sorts the filenames according to the file size with largest size first.\n\n\ndrwxr-xr-x     5 abd      users    78988  Aug 12  08:30 go\ndrwx------      3 mash    users   56899   Nov 28  10:49 irc\ndrwxr-xr-x    2 ryan      users   32768  July 25   09:15 logs\ndrwxr-xr-x    8 anki      users    4096    Oct  2   17:13 src\n\n\n"
    },
    {
        "id": 67,
        "Question": "The output of ls dir* is ___",
        "Options": [
            "a) all files in the current directory",
            "b) all files in the directory having a filename starting with dir",
            "c) no filename is displayed",
            "d) erroneous"
        ],
        "Answer": "Answer: a\nExplanation: Files are stored onto the disk in terms of block size. The block size allocated to the file can be displayed using -s option with ls command. "
    },
    {
        "id": 68,
        "Question": " Which command is used for displaying contents of a file?",
        "Options": [
            "a) cp",
            "b) rm",
            "c) cat",
            "d) mkdir"
        ],
        "Answer": "Answer: c\nExplanation: cat command is used to display the contents of a file. For displaying the contents, simply invoke the cat command with the filename (whose contents are to be displayed) as an argument. For example, if abd.txt file contains “HELLO WORLD” then,\n\n\n\t\n\n$ cat abd.txt\nHELLO WORLD\n\n\n "
    },
    {
        "id": 69,
        "Question": " Apart from displaying file contents, cat command is also used for _____ files.",
        "Options": [
            "a) displaying",
            "b) deleting",
            "c) copying",
            "d) creating"
        ],
        "Answer": "Answer: d\nExplanation: cat command is one of the most well-known commands of the UNIX system. It is generally used to display the contents of a file on the terminal but can also be used for creating files. Suppose to create a file abd.txt, type the following command\n\n\n$ cat  >  abd.txt\n\n\nNow the prompt vanishes. cat command now waits for the input to be entered by the user. After the input is entered, the user hits the ctrl-D button which marks the end of the file and thus the file and the contents entered by the user are saved."
    },
    {
        "id": 70,
        "Question": "Which symbol is used with cat command for creating files?",
        "Options": [
            "a) >",
            "b) <",
            "c) *",
            "d) /"
        ],
        "Answer": "Answer: a\nExplanation: cat, like several other UNIX commands can accept more than one filename as arguments. For example,\n\n\n\t\n\n$ cat   file1   file2\n\n\nAbove command shows the contents of the second file immediately after the contents of the first file without any header information i.e. it concatenates the contents of two files on the terminal."
    },
    {
        "id": 71,
        "Question": "If we create a file using cat command with the same filename which already exists in the current directory then,",
        "Options": [
            "a) existing file is deleted",
            "b) new file will be created separately",
            "c) existing file will be overwritten",
            "d) an error will be produced"
        ],
        "Answer": "Answer: a\nExplanation: > symbol acts as a redirection symbol and records the input entered by the user in the specified file. For example,\n\n\n$ cat  > file_01\nUNIX is a powerful operating system        // input entered by the user\n[CTRL-D]\n\n\n"
    },
    {
        "id": 72,
        "Question": " Which symbol is used to append an existing file?",
        "Options": [
            "a) >",
            "b) <",
            "c) >>",
            "d) $"
        ],
        "Answer": "Answer: c\nExplanation: As cat command is also used to create files, so if we want to create a file with the same filename which already exists in the directory then the existing file will be overwritten."
    },
    {
        "id": 73,
        "Question": "Which option is used with cat command for displaying non-printable characters?",
        "Options": [
            "a) -v",
            "b) -n",
            "c) -x",
            "d) -a"
        ],
        "Answer": "Answer: c\nExplanation: cat command overwrites the existing file if we try to create another file with a similar filename as an existing file. To avoid this we can use the >> operator. For example, if file01 already exists and we want to append it, then use the following command:\n\n\n$ cat  >> file01\n\n\n"
    },
    {
        "id": 74,
        "Question": "Which option is used with the cat command for displaying file with line numbers?",
        "Options": [
            "a) -n",
            "b) -v",
            "c) -a",
            "d) -x"
        ],
        "Answer": "Answer: a\nExplanation: If the file that we want to display contains nonprintable ASCII characters, then to display those characters we use -v option with the cat command. -n option is used for displaying the contents of the file along with line numbers."
    },
    {
        "id": 75,
        "Question": "Which of the following cannot be performed by cat command?",
        "Options": [
            "a) displaying files",
            "b) creating files",
            "c) appending files",
            "d) deleting files"
        ],
        "Answer": "Answer: a\nExplanation: cat command supports -n option which is used for displaying file contents along with line number while -v is used for displaying nonprintable ASCII characters in the file."
    },
    {
        "id": 76,
        "Question": "What does cat file01  file01  file01 display?",
        "Options": [
            "a) error",
            "b) blank terminal",
            "c) contents of file01 three times successively",
            "d) contents of file01 single time"
        ],
        "Answer": "Answer: d\nExplanation: cat command cannot delete files. It can only be used for viewing file contents, creating a file or appending to an existing file."
    },
    {
        "id": 77,
        "Question": "11. Which files will be displayed by the following command:<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">     cat  *file*</pre></div></div></div></div></div></div>",
        "Options": [
            "a) all files in the directory",
            "b) all files with filename containing ‘file’",
            "c) no files will be displayed",
            "d) a single file"
        ],
        "Answer": "Answer: c\nExplanation: When multiple filenames are specified as arguments with cat command, it concatenates the contents of all the files specified as arguments and displays the output on the terminal."
    },
    {
        "id": 78,
        "Question": "Which command is used to create empty files?",
        "Options": [
            "a) cp",
            "b) cat",
            "c) touch",
            "d) create"
        ],
        "Answer": "Answer: b\nExplanation: Since * is a meta-character, here it is being used for pattern matching. So above command will search all the files in the directory having ‘file’ as a part of their filename. After that it will concatenate the output of all the searched files and display them on the terminal. "
    },
    {
        "id": 79,
        "Question": "Which option is used with touch command which forces the command not to create file, if it does not exists.",
        "Options": [
            "a) -h",
            "b) -c",
            "c) -t",
            "d) -f"
        ],
        "Answer": "Answer: d\nExplanation: Touch command changes timestamps. It is also an easy way to create empty files.\nThe only argument required to be specified with touch command is the filename of the file to be created.\n\n\n$ touch file01\n\n\n"
    },
    {
        "id": 80,
        "Question": "Which one of the following commands is incorrect?",
        "Options": [
            "a) cat  file01",
            "b) cat > file01",
            "c) cat >> file1",
            "d) cat  -a file01"
        ],
        "Answer": "Answer: b\nExplanation: In case if there is a strict requirement that touch command should not create a new file, we can use the -c option with it. Else if the file already exists then it will do nothing.\n\n\n$ touch -c newfile001\n\n\n "
    },
    {
        "id": 81,
        "Question": "What is the function of cp command in UNIX?",
        "Options": [
            "a) list all the available files in the current directory",
            "b) delete a given file",
            "c) cp is a command used for copying files and directories",
            "d) change the directory"
        ],
        "Answer": "Answer: c\nExplanation:  cp command is basically used for creating a copy of source file or a group of files. The syntax of the command requires at least two filenames to be specified. If both the files specified are ordinary files, the first file will be copied to the second file. The syntax of cp command is cp source_filename   destination_filename. The contents of the source file will be copied to the destination file in the same directory.\n\n\n\t\n\n$ cp  file_01  file_02               // copies file_01 to file_02\n\n\n "
    },
    {
        "id": 82,
        "Question": " What happens if the destination file specified in cp command does not exist?",
        "Options": [
            "a) file will not be copied",
            "b) an error will be produced",
            "c) destination file will be automatically created",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation:  If the destination file does not exist, then cp command will automatically create a file with the same name and then it copies the contents of the source file to the file which is created.  If the destination file already exists, then it will be overwritten with the contents of the source file."
    },
    {
        "id": 83,
        "Question": "Which of the following is not an option of cp command?",
        "Options": [
            "a) -z",
            "b) -i",
            "c) -R",
            "d) -u"
        ],
        "Answer": "Answer: a\nExplanation:  cp command has many options available, each of which performs a unique task. (-i)  is used for interactive copying (i.e.) it warns the user before overwriting the destination file.  (-R) is used for copying the entire directory structure into another directory structure. (-u) copies only when the source file is newer than the destination file. "
    },
    {
        "id": 84,
        "Question": "What is the correct syntax for copying multiple files with a filename starting as ‘file’ into another file named as  ‘directory_one’?",
        "Options": [
            "a) cp -i file  directory_one",
            "b) cp -R file  directory/directory_one",
            "c) cp file*  directory_one",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation:  For copying multiple files with a common starting name such as (file, file001, file.txt, fileone.jpg, file-archive.zip) we use (“*”). An asterisk (“*”) is a wildcard – a special character which expands to match other characters.  For example,  cp file*  directory_one will copy all the files whose name will be starting with ‘file’  into  ‘directory_one’ file. "
    },
    {
        "id": 85,
        "Question": "How can we copy an entire directory under another directory?",
        "Options": [
            "a) using -R option",
            "b) using -a option",
            "c) using -u option",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation:  -R option is used to copy an entire directory structure into another one recursively. Here recursively means that the command can descend a directory and examine all the files in its subdirectories and then it will copy the entire structure. For example,  cp  -R prog_one  new_prog. It will create a copy of contents of entire directory prog_one to new_prog if new_prog does not exist. Otherwise, if new_prog exists as a directory,  then the whole structure of prog_one will be copied under new_prog as a subdirectory."
    },
    {
        "id": 86,
        "Question": "How can we copy a file into our current directory?",
        "Options": [
            "a) cp file1",
            "b) cp file1",
            "c) cp file*",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation:  For creating a copy of a file into our current working directory we use the shorthand notation (.). For example,  cp file1  .  will create a copy of file1 into our current working directory with the same name."
    },
    {
        "id": 87,
        "Question": "7. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">cp -u * dir_file</pre></div></div></div></div></div></div>",
        "Options": [
            "a) copy all files to directory dir_file",
            "b) update all files",
            "c) delete all files",
            "d) update all files in the current working directory and copy newer ones to directory dir_file"
        ],
        "Answer": "Answer: d\nExplanation:  (-u) option is used with cp command to update files and copy only when the source file is newer than destination file. So the above command will update all files in the current working directory and copy newer ones to directory dir_file."
    },
    {
        "id": 88,
        "Question": "What does -i option do?",
        "Options": [
            "a) interactive copying",
            "b) recursively copying",
            "c) updating",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Sometimes it may happen that we cannot copy a file because of the permissions associated with it. For example, If the permissions associated with a file are read-protected then we cannot copy the file."
    },
    {
        "id": 89,
        "Question": "-n option is used with cp command for what purpose?",
        "Options": [
            "a) existing file should not be overwritten",
            "b) to update file",
            "c) interactive copying",
            "d) recursive copying"
        ],
        "Answer": "Answer: a\nExplanation: (-i) option is used for interactive copying. It means that suppose if we invoke a command like cp file1  file2 and if file2 already exists then it will be overwritten which can be a nightmare for many users. To avoid this, we use -i option. It provides us with a warning before overwriting a file. It asks the user whether to overwrite the file or not. The syntax is cp  -i source_file  dest_file.\n\n\n$ cp  -i  file_01  fo_02\ncp: overwrites fo_02 (yes/no)?             // asks before overwriting\n\n\n"
    },
    {
        "id": 90,
        "Question": "Which option is used with cp command for linking files instead of copying?",
        "Options": [
            "a) -v",
            "b) -l",
            "c) -f",
            "d) -x"
        ],
        "Answer": "Answer: b\nExplanation:  We can copy multiple files using a single invocation of cp command. To do so, the last name specified should be a directory. For example,  cp file1  file2  file3  dir_one. It will copy all the three files to the directory named dir_one."
    },
    {
        "id": 91,
        "Question": "-v option is used with cp command for displaying _____",
        "Options": [
            "a) errors",
            "b) informative messages",
            "c) diagnostic messages",
            "d) file contents"
        ],
        "Answer": "Answer: a\nExplanation: -n option is used with cp command when we do not want to want to overwrite the existing file. It means that if the destination file already exists, then it should not be overwritten."
    },
    {
        "id": 92,
        "Question": "Which command is used for removing/deleting files in UNIX?",
        "Options": [
            "a) rmdir",
            "b) rm",
            "c) del",
            "d) mv"
        ],
        "Answer": "Answer: b\nExplanation: rm command is used in UNIX to remove one or more files. It operates silently and should be used with caution. The filename of the file to be deleted is provided as an argument to rm command. For example, following command deletes abd.txt file.\n\n\n\t\n\n$ rm  abd.txt\n\n\n "
    },
    {
        "id": 93,
        "Question": "To delete all files in a directory we use ______________",
        "Options": [
            "a) rmdir *",
            "b) mv *",
            "c) rm *",
            "d) del *"
        ],
        "Answer": "Answer: a\nExplanation: Multiple files can be deleted in a single go using rm command. All we need to do is, provides multiple filenames as arguments to the rm command.\n\n\n$ rm  file1  file2  file3\n\n\n "
    },
    {
        "id": 94,
        "Question": "Which option is used with rm command for interactive deletion?",
        "Options": [
            "a) -i",
            "b) -f",
            "c) -r",
            "d) -R"
        ],
        "Answer": "Answer: c\nExplanation: To delete all files in a directory, use (*) with rm command. It acts as a meta-character and delete all files without displaying any message on the terminal. So use this command cautiously."
    },
    {
        "id": 95,
        "Question": "Which option performs recursive deletion?",
        "Options": [
            "a) -r",
            "b) -R",
            "c) *",
            "d) -r and -R"
        ],
        "Answer": "Answer: a\nExplanation: Whether we are able to remove a file depends on the permissions associated with the file/directory. So sometime it may happen that permissions of a file won’t allow us to delete it."
    },
    {
        "id": 96,
        "Question": "Which one of the following command can delete a directory which is not empty?",
        "Options": [
            "a) rm  -r",
            "b) rmdir",
            "c) rm *",
            "d) del *"
        ],
        "Answer": "Answer: a\nExplanation: Like in cp command, -i option is also used with rm command for interactive deletion. The prompts asks the user for confirmation before deleting the files.\n\n\n\t\n\n$ rm  file1  file2  file3\nrm: remove file1 (yes/no)? ?y\nrm: remove file1 (yes/no)? ?n\nrm: remove file1 (yes/no)? [Enter]       // any other response other than y/n leaves the file undeleted\n\n\n "
    },
    {
        "id": 97,
        "Question": "If we wish to delete a remove a file forcefully, we can use ____ option with rm command.",
        "Options": [
            "a) -i",
            "b) -r",
            "c) -R",
            "d) -f"
        ],
        "Answer": "Answer: d\nExplanation: With -r or -R option, rm performs a recursive walk in the file hierarchy and searches for every subdirectories and file within this directory, At each stage, it keeps on deleting everything it finds. "
    },
    {
        "id": 98,
        "Question": "Which command is used for removing file named  -file.txt?",
        "Options": [
            "a) rm -file.txt",
            "b) rm file.txtrm",
            "c) rm — -file.txt",
            "d) rm -f file.txt"
        ],
        "Answer": "Answer: a\nExplanation: rm command normally does not remove directories but when it is used with -r option it does. So if we invoke a command like,\n\n\n$ rm  -r *\t\t// deletes all files in the current directory and all its subdirectories\n\n\n"
    },
    {
        "id": 99,
        "Question": "Which command is used for renaming files?",
        "Options": [
            "a) rename",
            "b) mv",
            "c) cp",
            "d) move"
        ],
        "Answer": "Answer: d\nExplanation: If a file is write-protected, we can remove it forcefully using -f option of rm command. For example,\n\n\n$ rm  -f  file.txt\t// removes file.txt forcefully\n\n\n "
    },
    {
        "id": 100,
        "Question": "What if the destination file specified in mv command already exists?",
        "Options": [
            "a) it will be deleted",
            "b) it will not be affected",
            "c) it will be overwritten",
            "d) an error will be produced"
        ],
        "Answer": "Answer: c\nExplanation: To delete a file with filename beginning with a ” – “, we have to use ( — ) i.e. double-dash. ” — ”  is used so that rm command does not misinterpret the filename as an option."
    },
    {
        "id": 101,
        "Question": "Apart from renaming files, mv command can also",
        "Options": [
            "a) move a file",
            "b) move a group of files",
            "c) rename a directory",
            "d) move a group of files  and rename a directory"
        ],
        "Answer": "Answer: b\nExplanation: mv command is used for renaming files. This command does not create a copy of the file, it simply renames it. To rename file1 to file2 simply type,\n\n\n$ mv  file1  file2\n\n\n"
    },
    {
        "id": 102,
        "Question": "Which option is used for backing up destination file in mv command?",
        "Options": [
            "a) -b",
            "b) -f",
            "c) -v",
            "d) -i"
        ],
        "Answer": "Answer: a\nExplanation: If the destination file specified in the mv command does not exists it will be simply created. For example, if in the command mv  file1  file2, if file2 does not exists then it will be created. Now file1 will be known as filename ‘file2’."
    },
    {
        "id": 103,
        "Question": "Which option is used with mv command so that the destination file does not get overwritten?",
        "Options": [
            "a) -n",
            "b) -f",
            "c) -b",
            "d) -i"
        ],
        "Answer": "Answer: c\nExplanation: If the destination file already exists, then the contents of this file will be overwritten with the contents of a source file. For example, mv  file01  dir01. If there already exists a file named dir01, then the contents of dir01 will be overwritten with the contents of file01."
    },
    {
        "id": 104,
        "Question": "Which command is used for comparing two files?",
        "Options": [
            "a) cmp",
            "b) comp",
            "c) diff",
            "d) comm"
        ],
        "Answer": "Answer: a\nExplanation: cmp command is used for comparing two files byte by byte. It displays the first mismatch and its location on the terminal. It does not bother about subsequent mismatches but displays only the first mismatch. As soon as the first difference is found, the command terminates and outputs the line and byte in which there is a difference. For example,\n\n\n\t\n\n$ cmp  file01  file02\nfile01  file02 differ: Byte 20, Line 2\n\n\ndiff command is used for converting one file into another in order to make them identical and comm is used for displaying the common elements in both the files."
    },
    {
        "id": 105,
        "Question": "What is the exit status of cmp command if both the files are identical?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) undefined"
        ],
        "Answer": "Answer: a\nExplanation: The exit status of cmp command is 0 if both the files are identical and 1 if both the files are different. The exit status is 2 if the program encounters a problem."
    },
    {
        "id": 106,
        "Question": "Which option is used with cmp command to display a detailed list of mismatches?",
        "Options": [
            "a) -a",
            "b) -b",
            "c) -f",
            "d) -l"
        ],
        "Answer": "Answer: d\nExplanation: cmp command by default only displays the first mismatch that occurs in both files. For a detailed list of all the mismatches, we use the -l option. It prints byte position and the byte value for all differing bytes."
    },
    {
        "id": 107,
        "Question": "Which option is used with cmp command to limit the number of bytes to be compared?",
        "Options": [
            "a) -n",
            "b) -l",
            "c) -f",
            "d) -b"
        ],
        "Answer": "Answer: a\nExplanation: We can limit the number of bytes to be compared by the cmp command by using -n option with it. For example, if we want to compare at most 50 bytes then the command will be written as:\n\n\n$ cmp  -n 50  file01  file02\n\n\n "
    },
    {
        "id": 108,
        "Question": "How can we skip some initial bytes from both the files to be compared?",
        "Options": [
            "a) using -b option",
            "b) using -n option",
            "c) using -l option",
            "d) using -i option"
        ],
        "Answer": "Answer: d\nExplanation: We can skip the number of initial bytes to be compared from both the files such that the cmp command will not consider that number of bytes while comparing both files. For this facility, we use -i option followed by the number of bytes to be skipped. For example, to skip the first 10 bytes use the following command,\n\n\n\t\n\ncmp  -i  10  file01  file02\n\n\n"
    },
    {
        "id": 109,
        "Question": "Which command compares two sorted files line by line?",
        "Options": [
            "a) cmp",
            "b) diff",
            "c) comm",
            "d) sort"
        ],
        "Answer": "Answer: a\nExplanation: -b option when used with cmp command print the byte number and the line number along with the differing bytes, where the first mismatch occur. For example,\n\n\n$ cmp -b  file01  file02\nfile01  file02 differ: Byte 20, Line 2 is 256 z 268 w\n\n\nIn the above output, the difference is in 17th byte, which is ‘z’ in file01 and ‘w’ in file02 respectively. The values 256 and 268 are the values for these bytes."
    },
    {
        "id": 110,
        "Question": "What will be the command if we want to suppress column 1 and column 2 in the output of comm Command?",
        "Options": [
            "a) comm  -12",
            "b) comm -1-2",
            "c) comm -3",
            "d) comm -1,-2"
        ],
        "Answer": "Answer: c\nExplanation: comm command is used for comparing two sorted files line by line. When there is no option specified with comm command it produces three column output. For example, if we want to compare two files namely file01 and file02 then the first column will contain those entries which are unique to file01 whereas the second column will contain those entries which are unique to file02. The third column will contain the actual information i.e. those entries which are common to both fil01 and file02.\n\n\n$ comm  file01  file02\nSanfoundry\n                             Project\n                Global        \nLearning\n                UNIX\n\n\nIn the above output, ‘Sanfoundry’ and ‘Learning’ are unique in file01 while ‘Global’ and ‘UNIX’ are unique in file02 whereas ‘Project’ is common to both the file."
    },
    {
        "id": 111,
        "Question": "Which command is used to display the differences between files?",
        "Options": [
            "a) comm",
            "b) diff",
            "c) cmp",
            "d) differ"
        ],
        "Answer": "Answer: a\nExplanation: comm command provides us with an option for suppressing the columns in the output. For this task, we have to provide the column number as an option in the comm command. For example, -1 for column 1, -2 for column 2 and -3 for column 3."
    },
    {
        "id": 112,
        "Question": "When two files are identical, what is the output of diff command?",
        "Options": [
            "a) Files are identical",
            "b) Returns prompt",
            "c) No output",
            "d) Throws an error"
        ],
        "Answer": "Answer: a\nExplanation: comm command only compares those files that are already sorted. If the files are not sorted it will throw an error message displaying “file not in sorted order”."
    },
    {
        "id": 113,
        "Question": "Which option is used to produce multi columnar output in diff command?",
        "Options": [
            "a) -y",
            "b) -v",
            "c) -s",
            "d) -e"
        ],
        "Answer": "Answer: b\nExplanation: diff command is used for comparing files and displaying the differences between them.\ndiff command uses certain symbols and instructions to indicate the changes that are required to make two files identical. For example,\na  – for appending\nc  – for changing\nd  – for deleting"
    },
    {
        "id": 114,
        "Question": "If we are interested in knowing that whether the two files are identical or not, we can use ___ command.",
        "Options": [
            "a) comm",
            "b) diff",
            "c) cmp",
            "d) differ"
        ],
        "Answer": "Answer: b\nExplanation:  When two files are identical, diff command does not produce any output. It simply returns the shell prompt $. However, we can use the -s option to display an informative message on the terminal if the files are identical."
    },
    {
        "id": 115,
        "Question": "Which command is used for counting words, lines and characters in a file?",
        "Options": [
            "a) diff",
            "b) count",
            "c) man",
            "d) wc"
        ],
        "Answer": "Answer: d\nExplanation: UNIX provides a universal word counting program that allows us to count the number of words, lines and characters in a file. It takes a filename as an argument as produces a 4 column output.\n\n\n\t\n\n$ wc file01\n3   9   45  file01\n\n\nAbove output indicates that file01 contains 3 lines, 9 words and 45 characters.  "
    },
    {
        "id": 116,
        "Question": "Which option is used for counting the number of lines in a file only.",
        "Options": [
            "a) -l",
            "b) -W",
            "c) -c",
            "d) -w"
        ],
        "Answer": "Answer: b\nExplanation: wc command can take multiple filenames as arguments. If multiple filenames are specified with wc command then it will produce a separate line of output for each file along with an additional line as a total count for all files specified. For example,\n\n\n$ wc  file01  file02  file03\n12    45      170    file01\n8     34      145    file02\n10    38      158    file03\n30    117     403    total\n\n\n"
    },
    {
        "id": 117,
        "Question": "Which option is used for counting the number of words in a file only?",
        "Options": [
            "a) -l",
            "b) -W",
            "c) -c",
            "d) -w"
        ],
        "Answer": "Answer: a\nExplanation: -l option when used with wc command display only the number of lines in the specified file.\n\n\n        \n\n$ wc  -l  file01\n3        // number of lines in file01\n\n\n"
    },
    {
        "id": 118,
        "Question": "Which option is used for counting the number of characters in a file only.",
        "Options": [
            "a) -l",
            "b) -W",
            "c) -c",
            "d) -w"
        ],
        "Answer": "Answer: d\nExplanation: -w option when used with wc command display only the number of words in the specified file.\n\n\n\t\n\n$ wc  -w  file01\n15        // number of words in file01\n\n\n"
    },
    {
        "id": 119,
        "Question": "7. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">     $ wc  sample.txt &gt;  newfile</pre></div></div></div></div></div></div>",
        "Options": [
            "a) reads word count from sample.txt",
            "b) reads word count from newfile",
            "c) reads word count from sample.txt and write it to newfile",
            "d) error is produced"
        ],
        "Answer": "Answer: c\nExplanation: -c option when used with wc command display only the number of characters in the specified file.\n\n\n\t\n\n$ wc  -c  file01\n45        // number of characters in file01\n\n\n"
    },
    {
        "id": 120,
        "Question": "Which command is used for printing a file?",
        "Options": [
            "a) lp",
            "b) pr",
            "c) pg",
            "d) more"
        ],
        "Answer": "Answer: a\nExplanation: wc command when invoked without any special symbol ( like < or | ) or an argument it reads the input from standard input. we have to provide the input from the keyboard and mark the end of input with Ctrl-D. For example,\n\n\n$ wc\nSanfoundry Global\nLearning project\nOffer internships to students\nCtrl-D\n3    8    65        // 3 lines, 8 words and 65 characters\n\n\n"
    },
    {
        "id": 121,
        "Question": "Which option is used with lp command if there are more than one printers in the system?",
        "Options": [
            "a) -t",
            "b) -d",
            "c) -i",
            "d) -p"
        ],
        "Answer": "Answer: c\nExplanation: > symbol can be used with wc command for redirecting output. For example, the following command will read the input from sample.txt and redirect its output to newfile.\n\n\n$  wc  sample.txt >  newfile\n\n\n"
    },
    {
        "id": 122,
        "Question": "Which option is used for printing multiple copies of a file using lp command?",
        "Options": [
            "a) -l",
            "b) -i",
            "c) -t",
            "d) -n"
        ],
        "Answer": "Answer: a\nExplanation: lp command is used for printing a single copy of the file specified as an argument to lp command. For example,\n\n\n$ lp  abd.txt\n\n\nRequest id id prl-890 (1 file )\nlp command notifies the request-id i.e. a combination of printer name(rpl) and job number (890). "
    },
    {
        "id": 123,
        "Question": "12. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">  cancel prl-320</pre></div></div></div></div></div></div>",
        "Options": [
            "a) cancel printing from printer ‘prl’",
            "b) cancel printing current job",
            "c) cancel printing job number 320 on printer name ‘prl’",
            "d) undefined behavior"
        ],
        "Answer": "Answer: b\nExplanation: lp command prints the file as a default printer has been already specified by the system administrator. In case if there is more than one printer in the system we have to use the -d option with the printer name to print the file. For example, if there is another printer named laser_001 then,\n\n\n$ lp  -dlaser_001  abd.txt\n\n\n"
    },
    {
        "id": 124,
        "Question": "Which command is used for knowing the file type?",
        "Options": [
            "a) file",
            "b) type",
            "c) filetype",
            "d) type of file"
        ],
        "Answer": "Answer: d\nExplanation: If we want to print multiple copies of a file, we can use the -n option followed by an integer i.e. the number of copies that we want to print. For example to print 5 copies of file abd.txt use the following command,\n\n\n$ lp  -n5  abd.txt\n\n\n"
    },
    {
        "id": 125,
        "Question": "UNIX offers a pager named ____ which has replaced the original pager of UNIX called ____",
        "Options": [
            "a) more, less",
            "b) less, more",
            "c) more, pg",
            "d) pg, more"
        ],
        "Answer": "Answer: a\nExplanation: To print a specific title on the first page, we use the -t option followed by the string which we want to print as a title. For example,\n\n\n$ lp  -t \"UNIX and Shell programming\"  abd.txt\n\n\n"
    },
    {
        "id": 126,
        "Question": "Which of the following is not an internal command for more?",
        "Options": [
            "a) q",
            "b) f",
            "c) b",
            "d) z"
        ],
        "Answer": "Answer: c\nExplanation: cancel command is used to cancel the jobs submitted by the user for printing. cancel command can cancel the job only when it is in print queue i.e. waiting to be assigned to a printer. If the printer has already started processing the job, cancel command will not work."
    },
    {
        "id": 127,
        "Question": "Which of the following is used to compress files?",
        "Options": [
            "a) cmp",
            "b) gzip",
            "c) gunzip",
            "d) comm"
        ],
        "Answer": "Answer: b\nExplanation: To conserve disk space we need to compress a file. gzip is a very popular program used with one or more filenames for compression.\n\n\n\t\n\n$ gzip  file01.txt\n\n\n"
    },
    {
        "id": 128,
        "Question": "Which one of the following extension is provided by gzip to the compressed filename?",
        "Options": [
            "a) .cm",
            "b) .gz",
            "c) .zip",
            "d) .zp"
        ],
        "Answer": "Answer: b\nExplanation: gzip adds an extension to the filename after compressing it and removes the original file. For example, if we compress a file named file01.txt using gzip then the new filename will be file01.txt.gz."
    },
    {
        "id": 129,
        "Question": "Which option is used with gzip command to check compression ratio for files?",
        "Options": [
            "a) -l",
            "b) -c",
            "c) -e",
            "d) -x"
        ],
        "Answer": "Answer: a\nExplanation: Compression ratio is the ratio of, size of the original file to the size of a compressed file. We can check how much compression ratio is achieved using -l option with gzip.\n\n\n$ gzip -l abd.txt.gz  file01.txt.gz\nCompressed    Uncompressed        Ratio    \tUncompressed name\n788096        3875302             79.6%    \t abd.txt\n128341        372267              65.5%    \t file01.txt\n916437        4247569             78.9%    \t (totals)\n\n\n"
    },
    {
        "id": 130,
        "Question": "Which option is used with gzip command for recursive compression?",
        "Options": [
            "a) -c",
            "b) -l",
            "c) -d",
            "d) -r"
        ],
        "Answer": "Answer: a\nExplanation: Specifying the .gz extension is an optional feature which may be neglected. The command will work properly even without the extension."
    },
    {
        "id": 131,
        "Question": "Which of the following is used for decompressing files?",
        "Options": [
            "a) GZIP",
            "b) gunzip",
            "c) uncmp",
            "d) cmp"
        ],
        "Answer": "Answer: d\nExplanation: Like many other UNIX commands, we can perform recursive compression. Through this process, we can compress all files in the directory. To perform this operation, -r option is used with gzip command.\n\n\n\t\n\n$ gzip  -r  dir_01        \t\t// compress all files  in dir_01\n\n\n "
    },
    {
        "id": 132,
        "Question": "Which of the following is a better agent than gzip?",
        "Options": [
            "a) bzip2",
            "b) bzip2 and bunzip2",
            "c) bunzip2",
            "d) allzip"
        ],
        "Answer": "Answer: b\nExplanation: To restore our original and uncompressed file we can use gunzip with filename as an argument.\n\n\n$ gunzip  file_01.txt.gz\n\n\n"
    },
    {
        "id": 133,
        "Question": "Which of the following is an archival program?",
        "Options": [
            "a) arch",
            "b) archive",
            "c) ar",
            "d) tar"
        ],
        "Answer": "Answer: b\nExplanation: gzip can also be used to uncompress files, all we have to do is to use -d option with gzip command.\n\n\n$ gzip -d file01.txt.gz\n\n\n"
    },
    {
        "id": 134,
        "Question": "Which of the following key options is used with tar to create an archive?",
        "Options": [
            "a) -c",
            "b) -x",
            "c) -t",
            "d) -f  archive name"
        ],
        "Answer": "Answer: a\nExplanation: The tar program uses these specified key options where each key option performs a specific function.\n\n\n\t\n\n  -c    creates an archive\n  -x    extract files from an archive\n  -t     display files in an archive\n  -f  arch   -- specifies the archive arch.\n\n\n"
    },
    {
        "id": 135,
        "Question": "To create an archive named abc.tar consisting of two files,  file01 and file02, which of the following command will be used?",
        "Options": [
            "a) tar -cvf  abc.tar  file01  file02",
            "b) tar -cvf  file01  file02  abc.tar",
            "c) tar -cv  abc.tar  file01  file02",
            "d) tar -c  abc.tar  file01  file02"
        ],
        "Answer": "Answer: b\nExplanation: To create an archive -c option is used, -v is used to display the progress while tar works while -f is used to specify the name of the archive. All these options can be combined together as (-cvf)."
    },
    {
        "id": 136,
        "Question": " Which command will be used for extracting files from an archive named abc.tar?",
        "Options": [
            "a) tar -xvf   abc.tar",
            "b) tar -cvf   abc.tar",
            "c) tar  -tvf    abc.tar",
            "d) tar  -t       abc.tar"
        ],
        "Answer": "Answer: a\nExplanation: To extract files from an archive, we can use -x option along with -v and -f. Above command will extract all the files which are present in the archive named abc.tar."
    },
    {
        "id": 137,
        "Question": "Which of the following command is used for viewing the attributes of contents of an archive?",
        "Options": [
            "a) tar -tvf   abc.tar",
            "b) tar -cvf   abc.tar",
            "c) tar  -xvf    abc.tar",
            "d) tar  -t       abc.tar"
        ],
        "Answer": "Answer: a\nExplanation: -t option is used with tar for viewing the contents of the archive in a table manner. It does not extract files rather it simply shows their attributes in a suitable form containing file permissions, file size and file name.\n\n\n        \n\n$ tar  -tvf  abc.tar\n\n\n"
    },
    {
        "id": 138,
        "Question": "Which option is used by tar to append files to the end of an archive?",
        "Options": [
            "a) -t",
            "b) -c",
            "c) -x",
            "d) -r"
        ],
        "Answer": "Answer: d\nExplanation: We can append files to an archive which is created already using -r option with tar.\n\n\n\t\n\n$ tar  -rvf  file03  file04  abc.tar       // file03 and file04 will be added to abc.tar\n\n\n "
    },
    {
        "id": 139,
        "Question": " Which command is used for compressing and archiving files together?",
        "Options": [
            "a) gzip and tar",
            "b) gzip",
            "c) bzip2",
            "d) zip"
        ],
        "Answer": "Answer: d\nExplanation: zip command combines the work of both gzip and tar i.e. it can compress and archive files together. The compression ratio using zip is lower as compared to bzip2 or gzip. "
    },
    {
        "id": 140,
        "Question": "Which command is used for unzipping files which are compressed using zip command?",
        "Options": [
            "a) gunzip",
            "b) gzip",
            "c) unzip",
            "d) guzip"
        ],
        "Answer": "Answer: a\nExplanation: For using zip command, the first argument should be a compressed filename, the remaining arguments are interpreted as files and directories to be compressed.\n\n\n$ zip  abc.zip  file01  file02\n\n\n"
    },
    {
        "id": 141,
        "Question": "Which option is used with unzip command to view the contents of a compressed archive?",
        "Options": [
            "a) -v",
            "b) -t",
            "c) -c",
            "d) -x"
        ],
        "Answer": "Answer: a\nExplanation: Just like other UNIX commands, zip command can also perform recursive compression. In recursive compression, it will compress all the subdirectories and files that will be encountered while tracing the tree structure."
    },
    {
        "id": 142,
        "Question": "Which command is used to list the attributes of a file?",
        "Options": [
            "a) cp",
            "b) list",
            "c) ls",
            "d) attr"
        ],
        "Answer": "Answer: a\nExplanation: An attribute defines the property of an object. In UNIX, every file has a set of attributes which defines the specification of the file."
    },
    {
        "id": 143,
        "Question": "Which one of the following is not an attribute displayed by ls command?",
        "Options": [
            "a) file permissions",
            "b) file ownership",
            "c) links",
            "d) word count of file"
        ],
        "Answer": "Answer: c\nExplanation: ls command is used for listing the attributes of a file or directory. ls command when used with -l displays all the seven attributes of a file."
    },
    {
        "id": 144,
        "Question": "What are links referred to as in file attributes?",
        "Options": [
            "a) number of filenames of a single file that are maintained by the system",
            "b) number of duplicates of a single file",
            "c) number of copies of a single file",
            "d) number of files present in a directory"
        ],
        "Answer": "Answer: d\nExplanation: When -l option is used with ls command it simply displays seven attributes of a file which are file type and permissions, links, ownership, group ownership, file size, last modification time, filename."
    },
    {
        "id": 145,
        "Question": "In how many categories are links divided?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 4",
            "d) 0"
        ],
        "Answer": "Answer: a\nExplanation: Links are defined as the number of filenames of a single file that are maintained by the system. This file can be accessed through as many filenames as there is a number of links to that file."
    },
    {
        "id": 146,
        "Question": "Which option is used with ls command to list the directory attributes rather than its contents?",
        "Options": [
            "a) -b",
            "b) -a",
            "c) -l",
            "d) -d"
        ],
        "Answer": "Answer: b\nExplanation: There are basically two types of links; hard link and soft links."
    },
    {
        "id": 147,
        "Question": "A file contains 1026 bytes. How many bytes of disk space will it consume if size of a disk block is 1024 bytes?",
        "Options": [
            "a) 1026",
            "b) 1024",
            "c) 2048",
            "d) 4096"
        ],
        "Answer": "Answer: a\nExplanation: Hard linked files are provided with the same inode number as the original file so they refer to the same physical location of the file."
    },
    {
        "id": 148,
        "Question": "A file can be recognized as an ordinary file or directory by ____ symbol.",
        "Options": [
            "a) $",
            "b) –",
            "c) *",
            "d) /"
        ],
        "Answer": "Answer: b\nExplanation: When ls command is used with -l option its displays attributes of a file in the multi-columnar form. The first column defines the file types and permissions associated with a file. If the permissions are preceded by a (-), then it is an ordinary file otherwise it is a directory."
    },
    {
        "id": 149,
        "Question": "How many types of permissions a file has in UNIX?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: In UNIX system, a file can have three types of permissions -read, write and execute. Read permission means that the file is readable. Write permission means that the file can be edited while executing permission (for a directory) means that we can “pass through” the directory file for searching subdirectories."
    },
    {
        "id": 150,
        "Question": "Permissions of a file are represented by which of the following characters?",
        "Options": [
            "a) r,w,x",
            "b) e,w,x",
            "c) x,w,e",
            "d) e,x,w"
        ],
        "Answer": "Answer: a\nExplanation: A file can have three types of permissions; read, write and execute which is represented by characters r, w and x respectively."
    },
    {
        "id": 151,
        "Question": "Which of the following symbol is used to indicate the absence of a permission of a file?",
        "Options": [
            "a) $",
            "b) &",
            "c) +",
            "d) –"
        ],
        "Answer": "Answer: a\nExplanation: UNIX provides a three tired file protection system that determines the file access rights i.e. the permissions are dived into three groups as\n\n\n        \n\nr w x     r w x     r w x\n\n\nThe first group has all the three permissions i.e. file is readable, writable and executable by the file owner.\nThe second group also has all the three permissions i.e. file is readable, writable and executable by the group owner.\nThe third group also has all the three permissions i.e. file is readable, writable and executable by others who are neither a part of the group nor they are an owner of the file.\nNormally this set of permissions is too dangerous!"
    },
    {
        "id": 152,
        "Question": "What is group ownership?",
        "Options": [
            "a) group of users who can access the file",
            "b) group of users who can create the file",
            "c) group of users who can edit the file",
            "d) group of users who can delete the file"
        ],
        "Answer": "Answer: d\nExplanation: ( – ) is used to indicate the absence of a single or set of permissions of a file. For example, if a file has all the three permissions for owner but is only readable by group members and others, then the set of permissions would be,\n\n\n\t\n\nrwx  r--  r--\n\n\n"
    },
    {
        "id": 153,
        "Question": "The write permission for a directory determines that ____________",
        "Options": [
            "a) we can write to a directory file",
            "b) we can read the directory file",
            "c) we can execute the directory file",
            "d) we can add or remove files to it"
        ],
        "Answer": "Answer: a\nExplanation: In most cases, the user which creates the file is regarded as owner of the file. The owner of the file can create, delete or edit the file or he can change the permissions associated with it."
    },
    {
        "id": 154,
        "Question": "What is execute permission?",
        "Options": [
            "a) permission to execute the file",
            "b) permission to delete the file",
            "c) permission to rename the file",
            "d) permission to search or navigate through the directory"
        ],
        "Answer": "Answer: a\nExplanation: When the system administrator creates a user account, he assigns the user two parameters; UID (user ID) and GID (group ID). Group id denotes the group to which the user belongs.\nIn simple words, group ownership defines the group to which the file is accessible. "
    },
    {
        "id": 155,
        "Question": "Which of the following is default permission set for ordinary files?",
        "Options": [
            "a) rw-rw-rw-",
            "b) rwxrwxrwx",
            "c) r–r–r–",
            "d) rw-rw-rwx"
        ],
        "Answer": "Answer: a\nExplanation: Since the second and third group of permissions of a file are r–  and — respectively. So the file is only readable and that too, only by the members of the group to which the file belongs. "
    },
    {
        "id": 156,
        "Question": "Which of the following is default permission set for directories?",
        "Options": [
            "a) rw-rw-rw-",
            "b) rwxrwxrwx",
            "c) r–r–r–",
            "d) rw-rw-rwx"
        ],
        "Answer": "Answer: b\nExplanation: If a file is not readable then it is obvious that we cannot write anything to the file. To write anything to a file it should be readable first. But if a file is writable then we can read the file easily but the reverse is not true."
    },
    {
        "id": 157,
        "Question": "A file owner does not have a permission to edit the file but the group to which the file owner belong do have the permission to edit it. Can owner edit the file?",
        "Options": [
            "a) Yes",
            "b) No",
            "c) Cannot be defined",
            "d) Error will be encountered"
        ],
        "Answer": "Answer: d\nExplanation: The write permission of a directory does not imply that we can write to the directory. Only kernel is allowed to do that. It simply means that we can create or remove files from the directory."
    },
    {
        "id": 158,
        "Question": "Which command is used to change the permissions of a file?",
        "Options": [
            "a) chmod",
            "b) ch",
            "c) chown",
            "d) chgrp"
        ],
        "Answer": "Answer: a\nExplanation: The chmod (change mode) command is used to change the permissions of files. This command can only be run by the owner of the file or by the super user."
    },
    {
        "id": 159,
        "Question": " chmod command can be used in ____ ways.",
        "Options": [
            "a) 3",
            "b) 2",
            "c) 5",
            "d) 0"
        ],
        "Answer": "Answer: a\nExplanation: We can change permissions of multiple files by using chmod command once. To change permissions of multiple files simultaneously just use the chmod command with multiple filenames as arguments."
    },
    {
        "id": 160,
        "Question": "The expression used with chmod command to change permissions in a relative manner contains ____ components.",
        "Options": [
            "a) 5",
            "b) 2",
            "c) 4",
            "d) 3"
        ],
        "Answer": "Answer: b\nExplanation: chmod command can be used in two manners i.e. relative (changes are specified to the current permissions) and absolute (final permissions are specified)."
    },
    {
        "id": 161,
        "Question": "Which of the following characters specify the user and group category?",
        "Options": [
            "a) ‘u’ and ‘g’",
            "b) ‘g’ and ‘o’",
            "c) ‘us’ and ‘gr’",
            "d) ‘u’ and ‘o’"
        ],
        "Answer": "Answer: d\nExplanation: chmod command takes an expression as its arguments which comprises of some letters and symbols. The expression comprises three components:-\n->    User category (user, group, others)\n->    The operation to be performed (assign or remove a permission)\n->    Type of permission (read, write, execute). "
    },
    {
        "id": 162,
        "Question": "Which of the following symbol is used with chmod to assign permission to a file?",
        "Options": [
            "a) –",
            "b) /",
            "c) +",
            "d) *"
        ],
        "Answer": "Answer: a\nExplanation: Each character specifies a particular category of users as follows:\n‘u’ stands for a user,\n‘g’ for ‘group’\n‘o’ for ‘others’. "
    },
    {
        "id": 163,
        "Question": "To assign execute permission to the user (owner) for a file named file01.txt, which of the following command will be used?",
        "Options": [
            "a)  chmod u+r file01.txt",
            "b) chmod u+w file01.txt",
            "c) chmod  u-x file01.txt",
            "d) chmod u+x file01.txt"
        ],
        "Answer": "Answer: c\nExplanation: To assign and remove permissions from a file, (+) and (-) symbols are used respectively.\n‘+’ symbol will assign a permission\n‘-‘ symbol will remove a permission "
    },
    {
        "id": 164,
        "Question": "8. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">     $ chmod ugo +w  file01.txt</pre></div></div></div></div></div></div>",
        "Options": [
            "a) assign write permission to users, group and others",
            "b) assign write permission to the user (owner) only",
            "c) assign write permission to group and others",
            "d) command not executable"
        ],
        "Answer": "Answer: d\nExplanation: To assign execute permission to the user, above command is stated as follows:\n\n\n\t\n\n u    -  for specifying the category of user.\n +    - for assigning permission.\n x    - to specify execute permission.\n\n\n "
    },
    {
        "id": 165,
        "Question": "Which character is used to replace ‘ugo’ string in chmod command?",
        "Options": [
            "a) a",
            "b) v",
            "c) x",
            "d) o"
        ],
        "Answer": "Answer: a\nExplanation: The string ugo combines all the three categories –user, group and others while (+) is used to assign the permission. ‘w’ specifies the write operation."
    },
    {
        "id": 166,
        "Question": "To remove write permission from group and others, which one of the following commands will be used?",
        "Options": [
            "a) chmod  go+w file01",
            "b) chmod  go-w file01",
            "c) chmod  ug-w file01",
            "d) chmod a-w file01"
        ],
        "Answer": "Answer: a\nExplanation: UNIX offers a shorthand symbol ‘a’ (all) that acts as a synonym for the ‘ugo’ string which represents all the categories of users.\n\n\n$ chmod a+w  file01\t\t// assign write permission to user, group and others.\n\n\n"
    },
    {
        "id": 167,
        "Question": "2. What are the permission of file01 after executing this command?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">   chmod  777  file01</pre></div></div></div></div></div></div>",
        "Options": [
            "a) rwxrwxrwx",
            "b) rw-rw-rw",
            "c) r–r–r–",
            "d) r–r—-"
        ],
        "Answer": "Answer: a\nExplanation: The expression used by chmod in an absolute manner is a string of three octal numbers (base 8).  A set of 3 bits represent a single octal digit.\n->    Read permission –4 (100 in octal)\n->    Write permission –2(010 in octal)\n->   Execute permission –1(001 in octal)\nFor each category, we add up these numbers. For example, if we have to set read and write permission then an octal number will be 110 (4+2)."
    },
    {
        "id": 168,
        "Question": "A file named file01 should be readable, writable and executable only by the user(owner). Which one of the following set of command will be used?",
        "Options": [
            "a) chmod 700 file01",
            "b) chmod 000 file01",
            "c) chmod  477 file01",
            "d) chmod  777 file01"
        ],
        "Answer": "Answer: a\nExplanation: Since the octal number for the above command is 777 and we know that 7(111) represents all the three sets of permissions (read, write and execute) for a category of user. As we have 777, the file is readable, writable and executable by anyone."
    },
    {
        "id": 169,
        "Question": "Which command is used to change the ownership of a file?",
        "Options": [
            "a) chmod",
            "b) change",
            "c) ch",
            "d) chown"
        ],
        "Answer": "Answer: a\nExplanation: Since 7(111) represents read, write, execute permission. So 700 will represent read, write, execute permission only for the user (owner)."
    },
    {
        "id": 170,
        "Question": "Which option is used for the recursive functioning of chmod command?",
        "Options": [
            "a) -R",
            "b) -r",
            "c) -l",
            "d) -i"
        ],
        "Answer": "Answer: a\nExplanation: The file having permission set as 000 is useless i.e. it is not readable, writable or executable. But we can delete the file using directory permissions. If the directory has write permission, we can easily add or remove a file from it."
    },
    {
        "id": 171,
        "Question": "Which command is used to change the group owner of the file?",
        "Options": [
            "a) chown",
            "b) ch",
            "c) chgrp",
            "d) chmod"
        ],
        "Answer": "Answer: b\nExplanation: Since we have only read permissions for the directory and the directory permissions do not allow us to add or remove a file from it we cannot delete a file no matter what is the permission set of that file."
    },
    {
        "id": 172,
        "Question": "Like chmod, chown and chgrp can also use ___ option.",
        "Options": [
            "a) -R",
            "b) -r",
            "c) -x",
            "d) -i"
        ],
        "Answer": "Answer: d\nExplanation: For changing the file ownership, we use the chown command. chown transfer the ownership of a file to another user. The command requires the user-ID (UID) of the recipient. To change the ownership of a file from user01 to user02, use the following commands:\n\n\n1. Change your status to a super user.\n2. # chown mash  file01            // # indicates another shell \n3. exit\n\n\n "
    },
    {
        "id": 173,
        "Question": "Which symbol is used to change permissions for hidden files?",
        "Options": [
            "a) .",
            "b) &",
            "c) $",
            "d) *"
        ],
        "Answer": "Answer: a\nExplanation: Like other UNIX commands, chmod can also descend a directory hierarchy and apply the expression to every file and subdirectories it finds. This is done using -R option. For example,\n\n\nchmod -R a+w  dir01\n\n\nThis command will make all files and subdirectories found in the tree walk executable by all users. "
    },
    {
        "id": 174,
        "Question": "Which editor is used by the UNIX system to edit files?",
        "Options": [
            "a) vi",
            "b) notepad",
            "c) word",
            "d) notepad++"
        ],
        "Answer": "Answer: a\nExplanation: It doesn’t matter what kind of work we are doing on a UNIX system, we always need an editor to edit some system files or ordinary files. For this purpose, vi editor is used in UNIX. Currently, vim (vi improved) is an improved version which is supported by LINUX systems."
    },
    {
        "id": 175,
        "Question": "2. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">    $ vi  file001</pre></div></div></div></div></div></div>",
        "Options": [
            "a) open file named file001",
            "b) edit file named file001",
            "c) delete a file named file001",
            "d) open file if it exists else creates a new file"
        ],
        "Answer": "Answer: d\nExplanation: vi editor can be used for creating and editing files. In the above command, if file001 already exists, then the contents of the file will be displayed. Otherwise, an empty file named file001 will be created."
    },
    {
        "id": 176,
        "Question": "Which option is used by vi editor to open a file in read mode only?",
        "Options": [
            "a) -r",
            "b) -R",
            "c) -d",
            "d) -f"
        ],
        "Answer": "Answer: b\nExplanation: To open an existing file in read-mode only, -R is used with the filename (as an argument). For example,\n\n\n        \n\n$ vi  -R  file001       // open file in read mode only\n\n\n"
    },
    {
        "id": 177,
        "Question": "How many types of modes are used by vi editor?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 3",
            "d) 1"
        ],
        "Answer": "Answer: c\nExplanation: Before working with vi editor, it is necessary to be familiar with the modes in which vi editor works. There are three different kinds of modes, namely command mode, input mode and ex mode each of which is used for a specific purpose."
    },
    {
        "id": 178,
        "Question": "What is the default mode of vi editor?",
        "Options": [
            "a) Command mode",
            "b) Input mode",
            "c) Ex mode",
            "d) Insert mode"
        ],
        "Answer": "Answer: a\nExplanation: The default mode of vi editor is command mode, where every key which is pressed is interpreted as a command to run on the text. To perform operations on text like deleting, copying, the first step you’ll have to follow is to be in the command mode so that you can run commands according to your suitability."
    },
    {
        "id": 179,
        "Question": "To insert text into a file, _____ mode is used.",
        "Options": [
            "a) Command mode",
            "b) Input mode",
            "c) Ex mode",
            "d) def mode"
        ],
        "Answer": "Answer: b\nExplanation: Input mode provides us with a feature of inputting text in files. Every key pressed in this mode is recorded in the file."
    },
    {
        "id": 180,
        "Question": "ex mode is used for what purpose?",
        "Options": [
            "a) file handling",
            "b) substitution",
            "c) file handling and substitution",
            "d) Inputting text in files"
        ],
        "Answer": "Answer: c\nExplanation: ex mode performs various file handling and substitution operations like saving the file, quitting the editor, search and replace operations etc."
    },
    {
        "id": 181,
        "Question": "Which one of the following key is used to switch from command mode to input mode?",
        "Options": [
            "a) i",
            "b) :",
            "c) esc",
            "d) ;"
        ],
        "Answer": "Answer: a\nExplanation: To switch from command mode to input mode press the ‘i’ key."
    },
    {
        "id": 182,
        "Question": "____ key is used for switching to command mode from input mode.",
        "Options": [
            "a) i",
            "b) A",
            "c) :",
            "d) esc"
        ],
        "Answer": "Answer: d\nExplanation: Command mode allows us to enter commands for performing operations on the text entered. To switch from the input mode to command mode press the ‘esc’ key. This operation will not be displayed on the screen but changes our mode to command mode. "
    },
    {
        "id": 183,
        "Question": "Which of the following key is used to enter in ex-mode?",
        "Options": [
            "a) ESC",
            "b) i",
            "c) :",
            "d) ;"
        ],
        "Answer": "Answer: c\nExplanation: To enter into ex-mode press the ‘:’ key. After that, we can press any ex-mode command followed by [Enter] to perform suitable operations. "
    },
    {
        "id": 184,
        "Question": "To clear the screen in vi editor, _____ is used.",
        "Options": [
            "a) ctrl-h",
            "b) ctrl-l",
            "c) ctrl-p",
            "d) ctrl-v"
        ],
        "Answer": "Answer: a\nExplanation: One of the major functions performed in ex-mode is, saving our work. For example, to save our file invoke the following command :\n\n\n\t\n\n:w [Enter]\n\"file001\", 10 lines, 456 characters\n\n\n "
    },
    {
        "id": 185,
        "Question": "While entering text in input mode the data is saved in _____",
        "Options": [
            "a) buffer",
            "b) disk",
            "c) RAM",
            "d) cache"
        ],
        "Answer": "Answer: a\nExplanation: Command mode is the mode in which we can pass commands to act on text, using most of the keys of the keyboard. Pressing a key doesn’t show it on screen but may perform a function like moving the cursor to the next line, deleting a line etc."
    },
    {
        "id": 186,
        "Question": "To quit vi editor without saving the buffer we can use",
        "Options": [
            "a) :q",
            "b) :c",
            "c) :w",
            "d) :q!"
        ],
        "Answer": "Answer: b\nExplanation: If the screen gets garbled due to some reasons, we can use ctrl-l in command mode to wipe out. It will simply clear your terminal."
    },
    {
        "id": 187,
        "Question": " The first UNIX editor was ____",
        "Options": [
            "a) emacs",
            "b) ex",
            "c) ed",
            "d) vi"
        ],
        "Answer": "Answer: b\nExplanation: vi commands are case-sensitive. For example, ‘a’ and ‘A’ are different commands."
    },
    {
        "id": 188,
        "Question": "One of the most important features of vi editor is _______",
        "Options": [
            "a) available mostly across all UNIX platforms",
            "b) easy to learn",
            "c) latest editor",
            "d) powerful than other editors"
        ],
        "Answer": "Answer: a\nExplanation: If the file has not been saved yet then whatever we are inputting in it is stored in a temporary storage called buffer. To save the data entered in the buffer, we have to switch to ex-mode."
    },
    {
        "id": 189,
        "Question": "Input mode is used for ____________",
        "Options": [
            "a) editing text in files",
            "b) invoking commands on files",
            "c) saving files",
            "d) performing substitution"
        ],
        "Answer": "Answer: a\nExplanation: To enter text in a file, we have to first switch to input mode. To enter into input mode, press ‘i’ once. Any key pressed after that will appear on the screen as text input."
    },
    {
        "id": 190,
        "Question": "Which command is used to insert text before the current cursor location?",
        "Options": [
            "a) a",
            "b) A",
            "c) I",
            "d) i"
        ],
        "Answer": "Answer: d\nExplanation: If the ‘i’ command is invoked with the cursor positioned on the existing text, text on the right of the cursor will be shifted further right without getting overwritten. "
    },
    {
        "id": 191,
        "Question": "Which command will be used to insert text at the beginning of the line?",
        "Options": [
            "a) i",
            "b) I",
            "c) a",
            "d) A"
        ],
        "Answer": "Answer: b\nExplanation: ‘I’ command is used to insert text at the beginning of current line irrespective of the cursor position in the current line. "
    },
    {
        "id": 192,
        "Question": "To append text after the current cursor location, we can use ____ command",
        "Options": [
            "a) A",
            "b) a",
            "c) i",
            "d) I"
        ],
        "Answer": "Answer: b\nExplanation: To append text after the current cursor location, use the ‘a’ command. If there is already existing text after the cursor location then it will be simply shifted towards the right."
    },
    {
        "id": 193,
        "Question": "Which command appends text at the end of the current line?",
        "Options": [
            "a) A",
            "b) a",
            "c) i",
            "d) I"
        ],
        "Answer": "Answer: a\nExplanation: To append text at end of current line use ‘A’ command. It appends the text at line extreme."
    },
    {
        "id": 194,
        "Question": "To replace a single character, we use ____ command",
        "Options": [
            "a) r",
            "b) R",
            "c) s",
            "d) i"
        ],
        "Answer": "Answer: a\nExplanation: To replace a single character based on cursor location, ‘r’ command is used. To replace a single character, type ‘r’ followed by the character that replaces it. It replaces a single character under the cursor."
    },
    {
        "id": 195,
        "Question": "To replace all text on the right of the cursor position, we use ____ command.",
        "Options": [
            "a) r",
            "b) R",
            "c) s",
            "d) I"
        ],
        "Answer": "Answer: a\nExplanation: When ‘r’ is pressed, vi momentarily switches from command mode to input mode and returns to command mode automatically after the new character is entered."
    },
    {
        "id": 196,
        "Question": "Which one of the following command is used to replace a single character with many?",
        "Options": [
            "a) s",
            "b) r",
            "c) R",
            "d) S"
        ],
        "Answer": "Answer: b\nExplanation: The only difference between ‘r’ and ‘R’ is that ‘R’ can replace all text on the right of the cursor position while ‘r’ only replaces a single character."
    },
    {
        "id": 197,
        "Question": "To replace 5 characters with new characters, which one of the following will be used?",
        "Options": [
            "a) s",
            "b) 5S",
            "c) 5s",
            "d) S"
        ],
        "Answer": "Answer: a\nExplanation: ‘s’ is used to replace a single character with many characters. It replaces a single character based on the current cursor position with a group of characters."
    },
    {
        "id": 198,
        "Question": "To replace the entire line irrespective of cursor position, we can use ____ command",
        "Options": [
            "a) s",
            "b) 10s",
            "c) S",
            "d) 10s"
        ],
        "Answer": "Answer: c\nExplanation: To replace multiple characters, we can use the repeat factor. 5s replaces five characters with new text whatever will be entered."
    },
    {
        "id": 199,
        "Question": "Which command creates a space for entering a new line of text below the current cursor location?",
        "Options": [
            "a) o",
            "b) O",
            "c) a",
            "d) S"
        ],
        "Answer": "Answer: c\nExplanation: ‘S’ replaces the entire line with a stream of characters entered irrespective of the current cursor position. The current line is deleted while using ‘S’ command."
    },
    {
        "id": 200,
        "Question": "Which of the following command is not used for entering or replacing text?",
        "Options": [
            "a) ‘a’ and ‘A’",
            "b) ‘s’ and ‘S’",
            "c) ‘r’ and ‘R’",
            "d) :q"
        ],
        "Answer": "Answer: a\nExplanation: After replacing text with ‘s’ or ‘S’ we are automatically left in insert mode."
    },
    {
        "id": 201,
        "Question": "To save the editing performed on a file, we have to switch to ______ mode",
        "Options": [
            "a) command",
            "b) input",
            "c) ex",
            "d) insert"
        ],
        "Answer": "Answer: c\nExplanation: ex-mode allows us a feature in which we can save the editing that we have performed on a file. ex-mode also provides us features like quitting vi editor, substitution etc."
    },
    {
        "id": 202,
        "Question": "Pressing ‘:’ in command mode invokes which mode of vi editor?",
        "Options": [
            "a) ex-mode",
            "b) insert mode",
            "c) command mode",
            "d) input mode"
        ],
        "Answer": "Answer: a\nExplanation: To invoke ex-mode we’ve to press the ‘:’ key in command mode. After pressing : , we are in ex-mode. Now simply type any command of ex-mode to perform a suitable function."
    },
    {
        "id": 203,
        "Question": "To save a file and return to shell prompt, which one of the following command will be used in ex-mode?",
        "Options": [
            "a) :w",
            "b) ‘:x’",
            "c) :a",
            "d) :f"
        ],
        "Answer": "Answer: b\nExplanation: Pressing ‘:x’ in ex-mode will save the file on the disk and returns the shell prompt."
    },
    {
        "id": 204,
        "Question": "To save a file and remain in vi editor, which one of the following command will be used?",
        "Options": [
            "a) :w",
            "b) ‘:x’",
            "c) :q",
            "d) :a"
        ],
        "Answer": "Answer: a\nExplanation: For saving a file and to remain in editor we can use ‘:w’ command in ex-mode. It is generally considered a good practice to save the contents of buffer regularly while working with files using ‘:w’."
    },
    {
        "id": 205,
        "Question": "Which command is used for saving and quitting the editor simultaneously?",
        "Options": [
            "a) :q",
            "b) :w",
            "c) ‘:x’",
            "d) :f"
        ],
        "Answer": "Answer: a\nExplanation: Pressing ‘:w’ doesn’t quit the editor but simply saves the editing we’ve done so far in the specified file."
    },
    {
        "id": 206,
        "Question": "Which of the following command is a substitute for ‘:x’ command?",
        "Options": [
            "a) ‘:x’",
            "b) :wq",
            "c) :q",
            "d) :w"
        ],
        "Answer": "Answer: a\nExplanation: To save our editing to a different file, we can specify the name of the file in which we want to save the work. To do this, simply provide the filename as an argument with ‘:w’ command. For example, to save the contents to file named ‘file002’, use the following command:\n\n\n:w  file002 [Enter]\n\n\n "
    },
    {
        "id": 207,
        "Question": "Which one of the following is the best way of saving and quitting the editor?",
        "Options": [
            "a) ZZ",
            "b) :wq",
            "c) :w",
            "d) ‘:x’"
        ],
        "Answer": "Answer: c\nExplanation: ‘:x’ command saves our content and quits the editor simultaneously. This command is invoked in ex-mode."
    },
    {
        "id": 208,
        "Question": "Which command is used to abort the editing and quit the editing mode?",
        "Options": [
            "a) :w",
            "b) :wq",
            "c) :q",
            "d) ‘:x’"
        ],
        "Answer": "Answer: b\nExplanation: We can also use the ‘:wq’ command to save and quit editor but it requires an additional keystroke and it is not recommended for use. "
    },
    {
        "id": 209,
        "Question": "Which of the following command will be used if we want to abort editing and quit the editor even if the buffer has been changed and not saved?",
        "Options": [
            "a) :q",
            "b) :b",
            "c) :q!",
            "d) :w"
        ],
        "Answer": "Answer: a\nExplanation: Quit command has a safety mechanism that prevents us from aborting if the contents of the buffer are modified but not saved."
    },
    {
        "id": 210,
        "Question": "In ex-mode, current line is represented by ___",
        "Options": [
            "a) :",
            "b) $",
            "c) >",
            "d) ."
        ],
        "Answer": "Answer: c\nExplanation: If the buffer has been changed and we still want to abandon the changes, then ‘:q!’ is used. It simply ignores all the changes made and quits without displaying any warning questions."
    },
    {
        "id": 211,
        "Question": "In ex-mode, last line is represented by ___",
        "Options": [
            "a) :",
            "b) $",
            "c) >",
            "d) ."
        ],
        "Answer": "Answer: d\nExplanation: In ex-mode, the current line is represented by a (.) while : is used to invoke the ex-mode commands. The > is a redirection symbol used for redirecting output to a specified file."
    },
    {
        "id": 212,
        "Question": "Which of the following command will be used to write the 4th line to file named file002?",
        "Options": [
            "a) : 1,40w file002",
            "b) : 1,$w file002",
            "c) : 4w file002",
            "d) : 1,4w file002"
        ],
        "Answer": "Answer: b\nExplanation: To represent the last line in ex-mode, ‘$’ is used."
    },
    {
        "id": 213,
        "Question": "Which of the following is not a valid command?",
        "Options": [
            "a) : .,$w file002",
            "b) :w 1,$ file002",
            "c) : .w file002",
            "d) : $w file002"
        ],
        "Answer": "Answer: a\nExplanation: Apart from saving our editing, we can use ‘:w’ command for writing selected lines. For example,\n\n\n        \n\n: 1,40w file002        //writes  line number 1 - number 40 to another file named file002.\n: 1,$w file002        // writes line number 1 - last line to another file named file002.\n\n\n"
    },
    {
        "id": 214,
        "Question": "How can we escape to the UNIX shell without quitting vi editor?",
        "Options": [
            "a) using ‘:sh’ command",
            "b) using ctrl-Z",
            "c) using ctrl-D",
            "d) using ‘:sh’ command and using ctrl-Z"
        ],
        "Answer": "Answer: c\nExplanation: To write selected line(s) to another file, we can use ex-mode command ‘:w’ along with the line number and filename."
    },
    {
        "id": 215,
        "Question": "To return back to the editor from shell prompt we use _____ command.",
        "Options": [
            "a) fg",
            "b) exit",
            "c) back",
            "d) fg and exit"
        ],
        "Answer": "Answer: b\nExplanation: First command will save from current line to the last line, the third command will save current line while the fourth command will save the last line in the file named file002."
    },
    {
        "id": 216,
        "Question": "To recover from a crash, we can use ____ command.",
        "Options": [
            "a) :recover",
            "b) -r",
            "c) : x",
            "d) :recover and -r"
        ],
        "Answer": "Answer: d\nExplanation: We can escape to the shell without quitting the editor using ‘:sh’ command or ctrl-Z. Sometimes it is necessary to return to shell prompt to execute a UNIX command or compile our program. For this purpose, we use these commands."
    },
    {
        "id": 217,
        "Question": "For navigation purposes, the mode should be _____ mode.",
        "Options": [
            "a) command",
            "b) input",
            "c) insert",
            "d) ex"
        ],
        "Answer": "Answer: a\nExplanation: To execute navigation commands, the user should be in command mode of vi editor. "
    },
    {
        "id": 218,
        "Question": "Which of the following keys are used to moving the cursor up and down?",
        "Options": [
            "a) k",
            "b) h",
            "c) l",
            "d) k and j"
        ],
        "Answer": "Answer: d\nExplanation: For moving the cursor up and down, we can use ‘k’ and ‘j’ keys respectively.\nk   – moves the cursor up\nj    – moves the cursor down"
    },
    {
        "id": 219,
        "Question": "Which of the following keys is used to moving cursor leftwards along a line?",
        "Options": [
            "a) k",
            "b) h",
            "c) l",
            "d) j"
        ],
        "Answer": "Answer: b\nExplanation: For moving the cursor towards left, we can use ‘h’ key."
    },
    {
        "id": 220,
        "Question": "Which one of the following keys are used to moving cursor rightwards along a line?",
        "Options": [
            "a) k",
            "b) h",
            "c) l",
            "d) j"
        ],
        "Answer": "Answer: c\nExplanation: For moving the cursor towards the right, we can use ‘l’ key."
    },
    {
        "id": 221,
        "Question": "Which one of the following command is invalid?",
        "Options": [
            "a) 20h",
            "b) 5l",
            "c) 4k",
            "d) 3d"
        ],
        "Answer": "Answer: a\nExplanation: The repeat factor can be used as a command prefix with all these four commands. For example, to move 20 characters to the right, we can use ’20l’."
    },
    {
        "id": 222,
        "Question": "Using ‘b’ command  we can _____________",
        "Options": [
            "a) move back to the beginning of the word",
            "b) move forward to the end of  the word",
            "c) move forward to the beginning of  the word",
            "d) move back to the end of  the word"
        ],
        "Answer": "Answer: d\nExplanation: All the above commands except 3d are navigation commands with prefixed repeat factor."
    },
    {
        "id": 223,
        "Question": "Using ‘e’ command  we can _____________",
        "Options": [
            "a) move back to the beginning of the word",
            "b) move forward to the end of the word",
            "c) move forward to the beginning of the word",
            "d) move back to the end of the word"
        ],
        "Answer": "Answer: a\nExplanation: Moving character by character is not always enough so we can perform navigation word by word by using word navigation commands (b, e and w)."
    },
    {
        "id": 224,
        "Question": "Using ‘w’ command we can _____________",
        "Options": [
            "a) move back to the beginning of the word",
            "b) move forward to the end of the word",
            "c) move forward to the beginning of the word",
            "d) move back to the end of the word"
        ],
        "Answer": "Answer: a\nExplanation: We can use ‘b’ command to move back to the beginning of the word. To do so, simply press ‘b’ once for performing navigation a single time."
    },
    {
        "id": 225,
        "Question": "Which command is used for moving the cursor to the line extreme?",
        "Options": [
            "a) |, 0",
            "b) &",
            "c) %",
            "d) L"
        ],
        "Answer": "Answer: a\nExplanation: We can prefix repeat factor with word navigation commands for ease of navigation. For example, 5w takes the cursor 5 words forward while 5b takes the cursor 5 words backwards."
    },
    {
        "id": 226,
        "Question": "____ command moves the cursor to the end of next line.",
        "Options": [
            "a) 0",
            "b) |",
            "c) %",
            "d) $"
        ],
        "Answer": "Answer: a\nExplanation:  For moving the cursor to the beginning or end of the line we can use line extreme navigation commands (0,| and $). ‘|’ or ‘0’ moves the cursor to the first character of a line. "
    },
    {
        "id": 227,
        "Question": "Which of the following commands will move the cursor to the end of line number 30 if the current position of the cursor is line number 01?",
        "Options": [
            "a) 30$",
            "b) 30|",
            "c) 30b",
            "d) 30%"
        ],
        "Answer": "Answer: d\nExplanation: ‘$’ command is used to navigate the cursor to the end of next line. This symbol is also used in ex-mode to represent the last line."
    },
    {
        "id": 228,
        "Question": "Which of the following control keys will be used for scrolling one page forward?",
        "Options": [
            "a) ctrl-f",
            "b) ctrl-b",
            "c) ctrl-z",
            "d) ctrl-v"
        ],
        "Answer": "Answer: a\nExplanation: We can prefix the repeat factor while working with line extreme navigation commands."
    },
    {
        "id": 229,
        "Question": "To navigate 20 pages forward, we can use ______ command.",
        "Options": [
            "a) 20 ctrl-b",
            "b) 20 ctrl-d",
            "c) 20 ctrl-u",
            "d) 20 ctrl-f"
        ],
        "Answer": "Answer: a\nExplanation: Faster navigation can be achieved in vi using control keys for scrolling text in the window page by page. Ctrl-b scrolls one page backwards."
    },
    {
        "id": 230,
        "Question": "Which command is used to know the current line number?",
        "Options": [
            "a) ctrl-f",
            "b) ctrl-b",
            "c) ctrl-z",
            "d) ctrl-g"
        ],
        "Answer": "Answer: a\nExplanation: To scroll half a page we can use control keys like ctrl-d and ctrl-u.\n\n\nCtrl-d  - scrolls half page forward\nCtrl-u  - scrolls Half page backwards\n\n\n"
    },
    {
        "id": 231,
        "Question": "Which key is used for absolute movement?",
        "Options": [
            "a) f",
            "b) G",
            "c) M",
            "d) ctrl-g"
        ],
        "Answer": "Answer: d\nExplanation: To navigate through 20 pages simultaneously we can prefix the repeat factor with control keys."
    },
    {
        "id": 232,
        "Question": "Which of the following commands of ex-mode is equivalent to ‘G’ command in command mode?",
        "Options": [
            "a) : .",
            "b) : $",
            "c) : %",
            "d) :w"
        ],
        "Answer": "Answer: d\nExplanation: At any time, to know the current line number we can use ctrl-g."
    },
    {
        "id": 233,
        "Question": "Which key is used for deleting text?",
        "Options": [
            "a) d",
            "b) y",
            "c) k",
            "d) f"
        ],
        "Answer": "Answer: a\nExplanation: Copying text or characters is known as yanking in vi editor."
    },
    {
        "id": 234,
        "Question": "Which command is used for deleting a single character?",
        "Options": [
            "a) d",
            "b) dd",
            "c) x",
            "d) w"
        ],
        "Answer": "Answer: a\nExplanation: ‘d’ is not a command but is used as ‘dd’ to delete entire lines. For example, to a delete a line invoke the command mode and press dd and the entire line will be deleted."
    },
    {
        "id": 235,
        "Question": "Which command is used for deleting the character on the left of the cursor?",
        "Options": [
            "a) x",
            "b) X",
            "c) dd",
            "d) d"
        ],
        "Answer": "Answer: c\nExplanation: The simplest text deletion is achieved using ‘x’ command. This command deletes the character under the cursor and then the text on the right shifts towards the left to fill up space. "
    },
    {
        "id": 236,
        "Question": "Which of the following command is used to delete a single line?",
        "Options": [
            "a) dd",
            "b) x",
            "c) X",
            "d) d"
        ],
        "Answer": "Answer: b\nExplanation: For deleting a single character, we can use ‘X’ command. It deletes a single character but to the left of the cursor."
    },
    {
        "id": 237,
        "Question": "Which of the following commands will be used to delete 6 lines from the current cursor location?",
        "Options": [
            "a) 6d",
            "b) 6X",
            "c) 6dd",
            "d) 6x"
        ],
        "Answer": "Answer: a\nExplanation: We can delete entire lines with ‘dd’ command. Just move the cursor anywhere on the line and press ‘dd’ and the entire line will be deleted."
    },
    {
        "id": 238,
        "Question": "Which command is used for putting deleted lines or part of lines at a different location?",
        "Options": [
            "a) p and P",
            "b) x",
            "c) dd",
            "d) y"
        ],
        "Answer": "Answer: c\nExplanation: ‘dd’ command can be used with repeat factor to delete multiple lines at a single time. 6dd will delete the current line and 5 lines below."
    },
    {
        "id": 239,
        "Question": "To copy (yank) lines in vi editor, we use ______ command.",
        "Options": [
            "a) dd",
            "b) x",
            "c) p",
            "d) yy"
        ],
        "Answer": "Answer: a\nExplanation: Using ‘p’ and ‘P’ command we can put deleted text at a different location. For example, if we’d deleted a single character using ‘x’ then we can put that character at another location by placing the cursor at that location and pressing ‘p’ or ‘P’."
    },
    {
        "id": 240,
        "Question": "To copy 10 lines from the current cursor location, we can use _____",
        "Options": [
            "a) 10y",
            "b) 10yy",
            "c) yy10",
            "d) 10x"
        ],
        "Answer": "Answer: a\nExplanation: If we’d deleted a part of a line, then ‘p’ will put it to the right of the cursor and ‘P’ will put it to the left of the cursor. Similarly, if we’d deleted the entire line then ‘p’ will put it below the current cursor and ‘P’ will put it above the cursor. "
    },
    {
        "id": 241,
        "Question": "Which command is used for joining lines?",
        "Options": [
            "a) J",
            "b) j",
            "c) yy",
            "d) jn"
        ],
        "Answer": "Answer: a\nExplanation: We can copy lines using ‘yy’ command and paste it at another location using ‘p’ or ‘P’ command."
    },
    {
        "id": 242,
        "Question": "Which command will be used to join 4 lines with the current line?",
        "Options": [
            "a) 5J",
            "b) 4J",
            "c) 6J",
            "d) 4j"
        ],
        "Answer": "Answer: a\nExplanation: To join current line with the line(s) following it, we can use join (J) command. It just pulls up the following line by terminating the new line character between the current line and following line."
    },
    {
        "id": 243,
        "Question": "Which of the following undo a most recent single editing change?",
        "Options": [
            "a) u",
            "b) U",
            "c) uu",
            "d) yy"
        ],
        "Answer": "Answer: a\nExplanation: Join command joins the current line with the following number of lines. For example,\n\n\n\t\n\n        \n\n5J    // joins current line with following four lines\n\n\n"
    },
    {
        "id": 244,
        "Question": "___ command allows us to undo a number of changes that have been made to a single line before moving away from that line.",
        "Options": [
            "a) u",
            "b) U",
            "c) dd",
            "d) yy"
        ],
        "Answer": "Answer: a\nExplanation: To reverse the last change you made to the buffer press the ‘u’ key. This will restore the state of the buffer by undoing the most recent action taken."
    },
    {
        "id": 245,
        "Question": "Which command is used to redo the changes made by the undo command?",
        "Options": [
            "a) ctrl-l",
            "b) ctrl-r",
            "c) ctrl-g",
            "d) ctrl-f"
        ],
        "Answer": "Answer: b\nExplanation: When a number of changes have to be made to a single line, vi allows us to discard all changes before you move away from the line. If the cursor has been moved to another line before invoking ‘U’, this command will not work."
    },
    {
        "id": 246,
        "Question": "Which symbol is used for repeating the last command?",
        "Options": [
            "a) $",
            "b) *",
            "c).",
            "d) _"
        ],
        "Answer": "Answer: b\nExplanation: We can use the control key (ctrl-r) to redo the changes which are made by the undo command."
    },
    {
        "id": 247,
        "Question": " Which of the following symbols are used for searching a pattern in vi?",
        "Options": [
            "a) /",
            "b) ?",
            "c) %",
            "d) / and ?"
        ],
        "Answer": "Answer: d\nExplanation: vi is extremely strong in searching for a pattern. Searching can be made both in forward and in reverse directions using / and ? respectively."
    },
    {
        "id": 248,
        "Question": "____ searches for a first instance of a pattern in forwarding direction.",
        "Options": [
            "a) /",
            "b) %",
            "c) &",
            "d) ?"
        ],
        "Answer": "Answer: a\nExplanation: We can use / symbol in command mode for searching a particular pattern in forwarding direction.  The search begins forward to position the cursor on the first instance of the word. For example, if we are looking for the string “print” then we can use the following command:\n\n\n/print  [Enter]        // searches forward\n\n\n"
    },
    {
        "id": 249,
        "Question": " ____ searches for a first instance of a pattern in the backward direction.",
        "Options": [
            "a) /",
            "b) %",
            "c) &",
            "d) ?"
        ],
        "Answer": "Answer: d\nExplanation: We can use ? symbol in command mode for searching a particular pattern in the backward direction.  The search begins backwards to position the cursor on the first instance of the word. For example, if we are looking for the string “print” then we use the following command:\n\n\n\t\n\n        \n\n?print  [Enter]        // searches backward\n\n\n"
    },
    {
        "id": 250,
        "Question": "Which command is used for repeating the search in the same direction?",
        "Options": [
            "a) n",
            "b) N",
            "c) nn",
            "d) NN"
        ],
        "Answer": "Answer: a\nExplanation: For repeating a search in the same direction in which the previous search was made with either / or ? we can use ‘n’ command. In this way, we can press ‘n’ repeatedly to scan all instances of the pattern. "
    },
    {
        "id": 251,
        "Question": "Which command is used to reverse the direction of repeating the search?",
        "Options": [
            "a) n",
            "b) N",
            "c) nn",
            "d) NN"
        ],
        "Answer": "Answer: b\nExplanation: ‘N’ reverses the direction pursued by ‘n’, which means that we can use it to retrace our search path. "
    },
    {
        "id": 252,
        "Question": "Which of the following symbol is used for substitution command?",
        "Options": [
            "a) n",
            "b) N",
            "c) s",
            "d) S"
        ],
        "Answer": "Answer: a\nExplanation: vi offers a powerful feature, that is of substitution, which is achieved with the ex-mode substitute (s) command. It lets us replace a pattern in a file with some other pattern. "
    },
    {
        "id": 253,
        "Question": "Which of the following is a correct syntax for performing substitution on a file?",
        "Options": [
            "a) :address/source_pattern/target_pattern/flag",
            "b) :address/target_pattern source_pattern/flag",
            "c) :address/flag",
            "d) :address"
        ],
        "Answer": "Answer: c\nExplanation: For replacing a pattern with another pattern we use substitution command which is represented by ‘s’."
    },
    {
        "id": 254,
        "Question": "Which of the following commands can be used to replace ‘professor’ with ‘director’ throughout the whole file?",
        "Options": [
            "a) 1,$s/professor/director/g",
            "b) %s/professor/director/g",
            "c) 1,$s/professor/director",
            "d) 1,$s/professor/director/g and %s/professor/director/g"
        ],
        "Answer": "Answer: a\nExplanation: For performing substitution, the correct syntax is:\n:address/source_pattern/target_pattern/flag\nFor example, if we want to perform substitution on line number 1 to 50, source pattern is ‘directory’ and target pattern is ‘member’ then,\n\n\n:1,$s/directory/member/g\n\n\n"
    },
    {
        "id": 255,
        "Question": "Which of the following flag will be used for interactive substitution?",
        "Options": [
            "a) g",
            "b) G",
            "c) gc",
            "d) cg"
        ],
        "Answer": "Answer: b\nExplanation: There are many flags like ‘g’, ‘gc’ which are used as flags. For example, when we left the flag field empty in the following command:\n\n\n:1,$s/directory/member\n\n\nThen substitution will only be carried out for the first occurrence in each addressed line.    "
    },
    {
        "id": 256,
        "Question": "Which one of the following commands will be used to delete all the instances of string ‘manager’ in file003?",
        "Options": [
            "a) 1,$s/manager/ /g",
            "b) %s/manager/director/g",
            "c) 1,$s/professor/director",
            "d) %s/manager/ /"
        ],
        "Answer": "Answer: a\nExplanation: The target pattern specified is optional while performing the substitution. If the target pattern is left out, then instances of the source pattern in all addressed lines are deleted.\n\n\n:1,$s/directory/ /g        // every instance of ‘directory’ will be deleted from each line.\n\n\n"
    },
    {
        "id": 257,
        "Question": "Which one of the following command is invalid?",
        "Options": [
            "a) /printf",
            "b) ?scanf",
            "c) :%/abd/mash/wc",
            "d) :1,%/file01/file02/g"
        ],
        "Answer": "Answer: d\nExplanation: We can replace 1,$ with %. It will work same as 1,$. ‘g’ flag is used for global replacement."
    },
    {
        "id": 258,
        "Question": "On a UNIX system, there can be ____ shells running simultaneously.",
        "Options": [
            "a) 1",
            "b) 2",
            "c) many",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: Shell provides us with an interface to communicate with the UNIX operating system. It is also called command interpreter because it gathers our input and executes commands accordingly. In simple words, it is actually the interface between the user and the kernel and has the capability of translating commands into actions."
    },
    {
        "id": 259,
        "Question": "The prompt issued by the shell is called ______",
        "Options": [
            "a) prompt",
            "b) command translator",
            "c) command prompt",
            "d) command executor"
        ],
        "Answer": "Answer: c\nExplanation: Even though there is only one kernel running on our system, there can be multiple shells running in action –one for each user who is logged in. As we know that computers don’t have any inherent capability of translating commands into actions, this piece of a task is performed by the command interpreter –known as the shell."
    },
    {
        "id": 260,
        "Question": "In UNIX there are ___ major types of shells.",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) many"
        ],
        "Answer": "Answer: b\nExplanation: There cannot be multiple kernels running on a single UNIX system, however, there can be multiple shells in action –each for a user who is logged in. There is only and only one kernel with which every shell interact in a UNIX system."
    },
    {
        "id": 261,
        "Question": "What is the default symbol for command prompt in Bourne shell?",
        "Options": [
            "a) $",
            "b) %",
            "c) #",
            "d) @"
        ],
        "Answer": "Answer: c\nExplanation: The prompt issued by the shell is called a command prompt which is represented by $. However, the symbol for the command prompt differs according to the shell on which we are working. When the command prompt is displayed, we can type any command followed by an Enter for performing our task."
    },
    {
        "id": 262,
        "Question": "What is the default symbol for command prompt in C shell?",
        "Options": [
            "a) $",
            "b) %",
            "c) #",
            "d) @"
        ],
        "Answer": "Answer: a\nExplanation: In UNIX, there are two major types of shells.\n•    Bourne shell\n•    C shell\nThese two categories are further divided into subcategories.\nBourne shell has the following subcategories:-\n•     Bourne shell (sh)\n•     Korn shell (ksh)\n•     Bourne Again shell (bash)\n•     POSIX shell (sh)\nC shell has the following subcategories:-\n•    C shell (csh)\n•    TENEX/TOPS C shell (tcsh)"
    },
    {
        "id": 263,
        "Question": "Which one of the following command will display the name of the shell we are working on?",
        "Options": [
            "a) echo shell",
            "b) echo $",
            "c) echo $SHELL",
            "d) echo $$"
        ],
        "Answer": "Answer: a\nExplanation: If we are using bourne shell on our system, then the default prompt will be represented by $."
    },
    {
        "id": 264,
        "Question": "Which shell is the most common and best to use?",
        "Options": [
            "a) Korn shell",
            "b) POSIX shell",
            "c) C shell",
            "d) Bash shell"
        ],
        "Answer": "Answer: b\nExplanation: If we are using C shell on our system, then the default prompt will be represented by %."
    },
    {
        "id": 265,
        "Question": "Which command does not terminates unless we log out of the system?",
        "Options": [
            "a) history",
            "b) shell",
            "c) echo",
            "d) login"
        ],
        "Answer": "Answer: c\nExplanation: When we run the command echo $SHELL, it will display the current shell on which we are working. The output of the command is the absolute pathname of the shell’s command file. If $SHELL evaluates to/bin/bash, our login shell is bash."
    },
    {
        "id": 266,
        "Question": "In Shell’s interpretive cycle, the shell first scans for ____ in the entered command.",
        "Options": [
            "a) characters",
            "b) priority",
            "c) meta-characters",
            "d) wildcards"
        ],
        "Answer": "Answer: d\nExplanation: Bash is near POSIX-compliant and probably the best shell to use. It is the most common shell used in UNIX systems. Bash is an acronym which stands for –“Bourne Again SHell”. It was first released in 1989 and was distributed widely as the default login shell for most Linux distributions."
    },
    {
        "id": 267,
        "Question": "Which of the following expression is a correct wildcard pattern if we want an expression in which the last character is not numeric?",
        "Options": [
            "a) *[!0]              ",
            "b) *[0-9]              ",
            "c) [0-9]              ",
            "d) *[!0-9]"
        ],
        "Answer": "Answer: b\nExplanation: When we log on to a UNIX system, we first see a prompt. This prompt remains there until we key in something. Even when we think the system is idling, a UNIX command is always running at the terminal. This command is known as the shell. The shell is with us all the time and doesn’t terminates unless we log out."
    },
    {
        "id": 268,
        "Question": "Which of the following is/are true about Shell?",
        "Options": [
            "a) Shell is a multi-faceted program",
            "b) Shell is a command interpreter",
            "c) Shell provides us with an environment to work in",
            "d) Shell is a multi-faceted, command interpreter and provides an environment to work in"
        ],
        "Answer": "Answer: c\nExplanation: In Shell’s interpretive cycle, the shell first issues a prompt and waits for the user to enter the command. After the command is entered, the shell scans the command line for meta-characters and expands the abbreviations (like the * in rm*) to recreate a simplified command line."
    },
    {
        "id": 269,
        "Question": "To change the login shell in some system (like Linux) we can use ____ command.",
        "Options": [
            "a) chshell",
            "b) chshl",
            "c) chsh",
            "d) ch"
        ],
        "Answer": "Answer: d\nExplanation: Wildcards are used for pattern matching. The command *[!0-9] will match all expression containing any characters except that the last character entered is not numeric. Here ‘!’ is used for NOT.\n\n\n *[!0]        // last characters should not be 0 in the expression\n *[0-9]          // any expression where the last character is a numeric\n [0-9]        // expression should only contains digits\n *[!0-9]            // the last character should not be numeric in the expression\n\n\n"
    },
    {
        "id": 270,
        "Question": "Which of the following is not a wild-card?",
        "Options": [
            "a) *",
            "b) ?",
            "c) $",
            "d) %"
        ],
        "Answer": "Answer: a\nExplanation: A wildcard is a special character which can be used as a substitute for any of a class of characters, which increases the flexibility and efficiency of searching and replacing. For example, to remove all the files with a filename starting with ‘chap’ prefix, we can use the command rm chap*. Here * is used as a wildcard for matching all filenames starting with ‘chap’."
    },
    {
        "id": 271,
        "Question": "3. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ echo *</pre></div></div></div></div></div></div>",
        "Options": [
            "a) error",
            "b) undefined behavior",
            "c) displays “*”",
            "d) lists all filenames in the current directory"
        ],
        "Answer": "Answer: c\nExplanation: The ‘$’ sign represents the shell prompt while all the other characters belong to a category of shell wildcards.\n\n\n‘*’     // matches any number of characters\n‘?’    // matches a single character\n\n\n"
    },
    {
        "id": 272,
        "Question": "4. Which command would be most suitable to remove the following files?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">dirx  diry  dirz  dirzw</pre></div></div></div></div></div></div>",
        "Options": [
            "a) rm dir?",
            "b) rm dirx  diry  dirz  dirzw",
            "c) rm *",
            "d) rm dir*"
        ],
        "Answer": "Answer: d\nExplanation: When we use echo command with only * as the argument we simply see a list of file. All the filenames in the current directory are displayed on the terminal. Since we know that * is a wildcard that can match any number of character. Here it is used as solitary to match all filenames."
    },
    {
        "id": 273,
        "Question": "Which of the following files will not be deleted using “rm chap??” ?",
        "Options": [
            "a) chap01",
            "b) chap02",
            "c) chaptd",
            "d) chactd"
        ],
        "Answer": "Answer: a\nExplanation: Since we know that ? can be used to match a single character. In the above scenario, all the filenames are same except that the last character in all filenames is different. So we can use the ? meta-character."
    },
    {
        "id": 274,
        "Question": "Which of the following command will list all the hidden filenames in our directory having at least three characters after the dot (.)?",
        "Options": [
            "a) ls",
            "b) ls -a",
            "c) ls  .???*",
            "d) ls *"
        ],
        "Answer": "Answer: d\nExplanation: Since ? is used to match a single character, ?? can match two characters. So the above command will remove all files with a filename starting with a prefix ‘chap’, followed by any two characters."
    },
    {
        "id": 275,
        "Question": " * and ? cannot match ____",
        "Options": [
            "a) /",
            "b) $",
            "c) .",
            "d) / and ."
        ],
        "Answer": "Answer: c\nExplanation: The * doesn’t match all files beginning with a (.) dot. So if we need to lists all the hidden filenames in our directory having at least three characters after the dot (.) we can use the following command,\n\n\n$ ls  .???*\n.bash_pro    .chap01        .netspak    .profile        //list of hidden files\n\n\n"
    },
    {
        "id": 276,
        "Question": "9.  Which of the following files will not be listed using the following command?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">ls chap0[1-4]</pre></div></div></div></div></div></div>",
        "Options": [
            "a) chap02",
            "b) chap05",
            "c) chap01",
            "d) chap04"
        ],
        "Answer": "Answer: d\nExplanation: There are two things which * and ? cannot match. First is, they cannot match filenames starting with a dot (.). Second is, they cannot match / in the pathname. For example, we cannot use cd  /usr?local  to switch to /usr/local. It will generate an error."
    },
    {
        "id": 277,
        "Question": "Which of the following symbol is used for negating the character class?",
        "Options": [
            "a) .",
            "b) *",
            "c) !",
            "d) %"
        ],
        "Answer": "Answer: a\nExplanation: We can frame restrictive patterns with the character class. The character class comprises a set of characters enclosed by the rectangular brackets, [ and ], but it matches a single character in the class. For example, the pattern [abcd] is a character class that can match a single character – an a, b, c or d. Similarly, we can combine the character class with any string or any other wildcard expression. Hence, the command rm chap0[1234] will delete chap01 chap02 chap03 chap04."
    },
    {
        "id": 278,
        "Question": "Which of the following shell doesn’t support ! symbol for negating the character class?",
        "Options": [
            "a) bash",
            "b) bash",
            "c) POSIX",
            "d) C"
        ],
        "Answer": "Answer: b\nExplanation: Range specification is also possible inside the class using a hyphen (-). The two characters on either side of it form the range of characters to be matched. So the command ls  chap0[1-4] can match chap01, chap02, chap03, chap04. But chap05 cannot be matched because the range inside the character class is from 1 to 4."
    },
    {
        "id": 279,
        "Question": "Providing a backslash (\\) before the wild card to remove its special meaning is called _____",
        "Options": [
            "a) escaping",
            "b) quoting",
            "c) listing",
            "d) pattern matching"
        ],
        "Answer": "Answer: a\nExplanation: We know that shell uses some special characters to match filenames or perform other search and replace operations. But if the filename itself contains those special characters, then it could be a great nuisance. For dealing with such files we use escaping and quoting.\nEscaping means providing a backslash (\\) before the wild card so that its special meaning could be removed. For example, if we want to remove a file named chap*, then using the command rm chap* will delete all the file beginning with a prefix ’chap’. In this situation, we can use the following command,\n\n\n\t\n\n$  rm chap\\*\n\n\n"
    },
    {
        "id": 280,
        "Question": "Enclosing the wild card or the entire pattern within quotes is called ___",
        "Options": [
            "a) escaping",
            "b) quoting",
            "c) listing",
            "d) pattern matching"
        ],
        "Answer": "Answer: b\nExplanation: There is another way to turn off the meaning of the metacharacter. When a command argument is enclosed in quotes, the meaning of all special characters is turned off. This method is called quoting. For example,\n\n\n\t\n\n        \n\n$ echo ‘\\’        //displays a \\\n\n\n"
    },
    {
        "id": 281,
        "Question": "To remove the file named my document.txt, which one of the following commands will be used?",
        "Options": [
            "a) rm my\\ document.txt",
            "b) rm my document.txt",
            "c) rm *",
            "d) rm my_document.txt"
        ],
        "Answer": "Answer: a\nExplanation: Apart from metacharacters, there are other characters that are special like the space character. The shell uses it to delimit command line arguments. So to remove the file my document.txt we can use escaping. The backslash will make the shell to ignore the space. Hence file will be removed easily."
    },
    {
        "id": 282,
        "Question": " For escaping the newline character we can use ____",
        "Options": [
            "a) /",
            "b) \\",
            "c) ?",
            "d) \\n"
        ],
        "Answer": "Answer: a\nExplanation: Sometimes we may need to interpret the \\ itself literally. To do so we need another \\ before it. For example,\n\n\n$ echo \\\\        // displays \\\n\n\n"
    },
    {
        "id": 283,
        "Question": "6. The output of the following command is ______________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ echo ‘The special character $ echo hello and | ls chap*’</pre></div></div></div></div></div></div>",
        "Options": [
            "a) undefined output",
            "b) erroneous",
            "c) hello",
            "d) The special character $ echo hello and | ls chap*"
        ],
        "Answer": "Answer: b\nExplanation: The newline character is also special, it marks the end of the command line. Some command lines that uses several arguments can be long enough to overflow to the next line. To split the wrapped line into two lines, make sure you input a \\ before pressing [Enter]."
    },
    {
        "id": 284,
        "Question": "Which of the following command will remove the file named * ?",
        "Options": [
            "a) rm *",
            "b) rm ‘*’",
            "c) rm \\*",
            "d) rm ‘*’ and rm \\*"
        ],
        "Answer": "Answer: d\nExplanation: Quoting is another way to turn off the meaning of a meta-character. When a command argument is enclosed in quotes, the meanings of all enclosed special characters are turned off."
    },
    {
        "id": 285,
        "Question": "How many files are used for representing different standard streams?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 4",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: Redirection is a process in which switching of the standard stream of data is performed so that it comes from a source other than its default source or so that it goes to some destination other than its default destination."
    },
    {
        "id": 286,
        "Question": "Which stream is connected to the display?",
        "Options": [
            "a) standard input",
            "b) standard output",
            "c) standard error",
            "d) error"
        ],
        "Answer": "Answer: d\nExplanation: The shell associates three files with the terminal –two for display and one for the keyboard. These special files are actually streams of characters which many commands see as input and output. Each stream is associated with a default device –which is terminal. These three files are:\n•    Standard Input\n•    Standard output\n•    Standard error"
    },
    {
        "id": 287,
        "Question": "Which stream is used for representing error messages?",
        "Options": [
            "a) standard input",
            "b) standard output",
            "c) standard error",
            "d) error"
        ],
        "Answer": "Answer: b\nExplanation:  Standard output is the file (or stream)  which is used for representing output, and is connected to the display. Each command which uses the display for its output will find this file always open and available. The file will be automatically closed after the command has completed its execution."
    },
    {
        "id": 288,
        "Question": "Which symbol is used for taking input from standard input?",
        "Options": [
            "a) &",
            "b) %",
            "c) –",
            "d) $"
        ],
        "Answer": "Answer: c\nExplanation: The standard error (or stream) is used for representing error messages that emanate from the command or shell. This stream is also connected to the display as error messages are displayed on the terminal."
    },
    {
        "id": 289,
        "Question": "Which of the following symbol(s) can be used to redirect the output to a file or another program?",
        "Options": [
            "a) |",
            "b) >",
            "c) >>",
            "d) |, > and >>"
        ],
        "Answer": "Answer: a\nExplanation: When wc is used without any arguments it will read the data from the default source which is a keyboard. In the above command, redirection symbol < is present. The following steps are performed:\n1. On seeing the <, the shell opens the disk file, sample.txt for reading.\n2. wc performs its execution and displays the output."
    },
    {
        "id": 290,
        "Question": "Which file descriptor is used to represent standard error stream?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: When a command takes input from multiple sources –say a file and standard input, the – symbol is used to indicate the sequence of taking input. For example,\n\n\n// first take input from standard input and then foo\n$ cat  -  foo\n \n// first take input from foo then from standard input and after that from bar\n$ cat  foo  -  bar\n\n\n"
    },
    {
        "id": 291,
        "Question": "We can redirect the error message to file named newfile using __________ command.",
        "Options": [
            "a) cat  foo  errorfile",
            "b) cat  foo >errorfile",
            "c) cat errorfile>foo",
            "d) cat foo 2>errorfile"
        ],
        "Answer": "Answer: d\nExplanation: All commands displaying output on the terminal actually write to the standard output file as a stream of characters and not directly to the terminal as such. The symbol > will replace the default destination (terminal) with any file by using the > operator, followed by the filename while the symbol >> is used to append to a file. | is used to give input to another program."
    },
    {
        "id": 292,
        "Question": "The category of commands which uses both standard input and standard output are called ____",
        "Options": [
            "a) directory oriented commands",
            "b) standard input commands",
            "c) filters",
            "d) standard output commands"
        ],
        "Answer": "Answer: c\nExplanation: UNIX commands can be grouped into four categories:\nDirectory-oriented (mkdir,rmdir)\nCommands like ls, pwd that write to standard output\nCommands like lp that read from standard input\nFilters – commands which use both standard input and standard output (like bc)"
    },
    {
        "id": 293,
        "Question": "What will be the contents of result.txt?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">bc  &lt; file001 &gt; result.txt</pre></div></div></div></div></div></div>",
        "Options": [
            "a) undefined",
            "b) erroneous",
            "c) 429467296, 1250",
            "d) 1650"
        ],
        "Answer": "Answer: c\nExplanation: We can redirect bc’s standard input to come from file001 and save the output in another file named result.txt. bc obtained the expressions from the redirected standard input, processed them and sent out the results to a redirected output stream. Here bc command is used as a filter."
    },
    {
        "id": 294,
        "Question": "Which of the following files are known as special files in UNIX?",
        "Options": [
            "a) sample.txt",
            "b) /dev/null",
            "c) /dev/tty",
            "d) /dev/null and /dev/tty"
        ],
        "Answer": "Answer: d\nExplanation: There are two special files named /dev/null and /dev/tty which is used in UNIX for special purposes. For example, if we want to check whether the program runs successfully without seeing its output on the screen or may not want to save output in a file either. For this purpose, a special file /dev/null is used. It accepts any stream without growing in size. The second file /dev/tty is the one used for indicating one’s terminal."
    },
    {
        "id": 295,
        "Question": "Which symbol is used to redirect error messages to /dev/null?",
        "Options": [
            "a) %",
            "b) $",
            "c) >",
            "d) <"
        ],
        "Answer": "Answer: a\nExplanation: UNIX has a special file that simply accepts any stream without growing in size. This file is /dev/null. This file is used for redirecting error messages away from the terminal so that they don’t appear on the screen. This file is pseudo-device because like other device files, it’s not associated with any physical device."
    },
    {
        "id": 296,
        "Question": "Which file is used for indicating terminals?",
        "Options": [
            "a) /dev/tty",
            "b) /dev/null",
            "c) terminal file",
            "d) device file"
        ],
        "Answer": "Answer: c\nExplanation: As we redirect our output using > symbol to other files in simple commands, this technique can also be used to redirect error messages to /dev/null file. For example,\n\n\n\t\n\n$ cmp  file01  file02 >  /dev/null\n\n\n"
    },
    {
        "id": 297,
        "Question": "Which symbol is used to connect different streams?",
        "Options": [
            "a) |",
            "b) >",
            "c) <",
            "d) ~"
        ],
        "Answer": "Answer: a\nExplanation: /dev/tty is another special file which is used for representing one’s terminal. Consider user1 is working on terminal /dev/pts/1 and user 2 is working on /dev/pts/2. Then, both the users can refer to their own terminals with the same filename. For example, if user 1 issues the command\n\n\n$ who > /dev/tty\n\n\nThen, the list of users is sent to the terminal he is currently using — dev/pts/1. Similarly, user 2 can also issue the same command to see the output on his terminal, /dev/pts/2.\n/dev/tty can be accessed by multiple users without conflict. "
    },
    {
        "id": 298,
        "Question": "9. What is the output of the following command?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ wc  -c  *.c</pre></div></div></div></div></div></div>",
        "Options": [
            "a) total size of .c files",
            "b) size of each .c file",
            "c) undefined",
            "d) erroneous"
        ],
        "Answer": "Answer: a\nExplanation: The shell can connect different streams using a special operator called pipe (|) and avoid creation of disk file. We can connect two commands using this operator so that one command can take the output of other as its input. For example,\n\n\n$ who | wc -l        // count number of lines in the output of who command.\n\n\n"
    },
    {
        "id": 299,
        "Question": "Which command saves one copy of character stream in a file and store the other to standard output?",
        "Options": [
            "a) who",
            "b) ls",
            "c) tee",
            "d) wc"
        ],
        "Answer": "Answer: a\nExplanation: There is no restriction on the number of commands we can use in a pipeline except that we should know the behavioral properties of these commands to place there. For example, consider this command:\n\n\n$ ls  | wc  -l  > output.txt    \n// number of lines counted by wc command from the output of ls //are stored in a file named output.txt.\n\n\n"
    },
    {
        "id": 300,
        "Question": "Which of the following is not true about tee command?",
        "Options": [
            "a) it is a feature of the shell",
            "b) it is an external command",
            "c) tee command duplicates its input",
            "d) tee is an internal command"
        ],
        "Answer": "Answer: a\nExplanation: We can make the command ignorant of its source using the pipeline. Above command is also an example of the same. It will simply display the total size of those files having a .c extension in the current directory."
    },
    {
        "id": 301,
        "Question": "Shell enables one or more arguments to be obtained from the standard output of another command. This feature is called _________",
        "Options": [
            "a) command substitution",
            "b) argument substitution",
            "c) shell substitution",
            "d) korn"
        ],
        "Answer": "Answer: a\nExplanation: Apart from a pipeline, shell enables connecting of two commands in another way. Shell enables one or more arguments to be obtained from the standard output of another command. This feature is called command substitution. For example, to display output like:\n\n\n\t\n\nToday’s date is Sat  Jan 05 17:25:41  IST 2002\nWe can use the following command\n$ echo “Today’s date is `date`”        // date is an argument to echo command\n\n\n"
    },
    {
        "id": 302,
        "Question": "Which of the following meta-character is used in command substitution?",
        "Options": [
            "a) `",
            "b) ‘",
            "c) “",
            "d) >"
        ],
        "Answer": "Answer: a\nExplanation: When scanning the command line, the shell looks for another metacharacter i.e. ` (the backquote) usually placed on the top-left of our keyboard, and it should not be confused with a single quote (‘). "
    },
    {
        "id": 303,
        "Question": "POSIX recommends the use of ____ instead of archaic `command ` for command substitution.",
        "Options": [
            "a) |",
            "b) #",
            "c) %",
            "d) $"
        ],
        "Answer": "Answer: b\nExplanation: Command substitution is enabled only when we use double quotes. If we use single quotes, it will not work. For example,\n\n\n$ echo ‘today’s date is `date` ‘\nOutput will be: today’s date is `date\n$ echo “today’s date is `date` “\nOutput will be: today’s date is  Sat  Jan 05 17:25:41  IST 2017\n\n\n "
    },
    {
        "id": 304,
        "Question": "Which of the following shell doesn’t support the command substitution using $ recommended by POSIX?",
        "Options": [
            "a) Korn",
            "b) bash",
            "c) C",
            "d) bourne"
        ],
        "Answer": "Answer: d\nExplanation: POSIX recommends the use of the form $(command) instead of archaic `command` for command substitution. For example, to display the date using command substitution use the following command:\n\n\n\t\n\n$ echo The date is $(date)\nOutput: The date is  Sat  Jan 05 17:25:41  IST 2017\n\n\n "
    },
    {
        "id": 305,
        "Question": "Which symbol is used for assigning a value to variables?",
        "Options": [
            "a) $",
            "b) &",
            "c) =",
            "d) @"
        ],
        "Answer": "Answer: d\nExplanation: Whether or not we use POSIX notation for command substitution is something up to the user. But we should make sure that we do not have to run our shell scripts with the Bourne shell because $(command) is not supported by Bourne shell. "
    },
    {
        "id": 306,
        "Question": " Which symbol is used for evaluation of variables?",
        "Options": [
            "a) $",
            "b) &",
            "c) =",
            "d) @"
        ],
        "Answer": "Answer: c\nExplanation: The shell supports variables that are useful both in the command line and shell scripts. These variables are called shell variables like pwd.  A variable assignment is of the form variable=value(no spaces around =). For example,\n\n\n$ count=10        // a variable named count is assigned a value of 10\n\n\n "
    },
    {
        "id": 307,
        "Question": "Which of the following is a correct initialization of variables to null strings?",
        "Options": [
            "a) x=",
            "b) x=’ ‘",
            "c) x=” “",
            "d) x=, x=’ ‘, x=” “"
        ],
        "Answer": "Answer: a\nExplanation: The shell supports variables that are useful both in the command line and shell scripts. These variables are called shell variables like TERM and SHELL.  A variable assignment is of the form variable=value(no spaces around =), but its evaluation requires the $ as a prefix to the variable name. For example,\n\n\n$ count=10\n$ echo $count        // output will be 10\n\n\n"
    },
    {
        "id": 308,
        "Question": "A variable can be removed using _____",
        "Options": [
            "a) unset",
            "b) readonly",
            "c) del",
            "d) bash"
        ],
        "Answer": "Answer: d\nExplanation: All shell variables are initialized to null strings by a string. While explicit assignment of null strings can be performed with x=’ ‘ or x=” “ or x= "
    },
    {
        "id": 309,
        "Question": "C shell uses which command for assigning values to variables?",
        "Options": [
            "a) =",
            "b) set",
            "c) unset",
            "d) $"
        ],
        "Answer": "Answer: a\nExplanation: A variable can be removed using the unset command. unset in an internal command. For example, if we want to undefine a variable x then,\n\n\n$ unset  x\n\n\n"
    },
    {
        "id": 310,
        "Question": "13. What will the result when we evaluate this statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ directory=’pwd’=`pwd`</pre></div></div></div></div></div></div>",
        "Options": [
            "a) output of pwd command along with string pwd=",
            "b) undefined output",
            "c) erroneous",
            "d) directory variable will hold string pwd"
        ],
        "Answer": "Answer: a\nExplanation: A variable can be protected from reassignment by readonly command. unset is also an internal command. For example, to protect a variable x from reassignment use the following command,\n\n\n$ readonly  x            // x can’t be reassigned now\n\n\n "
    },
    {
        "id": 311,
        "Question": "Which of the following is not a system defined variable?",
        "Options": [
            "a) $PATH",
            "b) $HOME",
            "c) $SHELL",
            "d) $cd"
        ],
        "Answer": "Answer: b\nExplanation: The C shell uses the set statement to set variables. There is a restriction that there either has to be whitespace on both sides of = or none at all. For example, for assigning a value to a variable named count, use the following command:\n\n\n$ set count=1 \nOr \n$ set count=1\n\n\n "
    },
    {
        "id": 312,
        "Question": "Which of the following is an invalid variable?",
        "Options": [
            "a) _user",
            "b) us01",
            "c) -txtfile",
            "d) txt123"
        ],
        "Answer": "Answer: b\nExplanation: If we are using any other shell other than C shell, the assignment in the form x = 10 will produce an error because the shell will interpret x as a command and =,10 as its arguments. "
    },
    {
        "id": 313,
        "Question": "Command substitution requires the command to use ________",
        "Options": [
            "a) standard input",
            "b) standard output",
            "c) standard error",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In the above statement, the string pwd, = and the output of pwd command are concatenated and saved in the directory variable. So the above statement will evaluate the current working directory as:\n\n\npwd=/home/usr10/doc\n\n\n        "
    },
    {
        "id": 314,
        "Question": "A process is an instance of  _______ program.",
        "Options": [
            "a) waiting",
            "b) executing",
            "c) terminated",
            "d) halted"
        ],
        "Answer": "Answer: b\nExplanation: A process is simply an instance of a running program. A process passes through many states throughout its life cycle i.e. when it is born until it is executed. After the process has completed it is said to be terminated."
    },
    {
        "id": 315,
        "Question": "A process is said to be ____ when it starts its execution.",
        "Options": [
            "a) born",
            "b) die",
            "c) waiting",
            "d) terminated"
        ],
        "Answer": "Answer: a\nExplanation: A process is said to be born when it starts its execution. It is the initial state of a process. The process is assigned to CPU for its execution further."
    },
    {
        "id": 316,
        "Question": "When the process has completed its execution it is called ______",
        "Options": [
            "a) born",
            "b) terminated",
            "c) waiting",
            "d) exit"
        ],
        "Answer": "Answer: d\nExplanation: A process is said to be died or terminated when it has completed its execution either normally or abnormally. As long as the process is running it is in an active state but as soon as the process has completed its execution, the process is said to die."
    },
    {
        "id": 317,
        "Question": "Which data structure is used to store information about a process?",
        "Options": [
            "a) process control block (pcb)",
            "b) array",
            "c) queue",
            "d) program control block"
        ],
        "Answer": "Answer: b\nExplanation:  Program should not be confused with the process. Both differ from each other but very slightly. The process is only an instance of a running program. Until a program hasn’t started its execution it is referred to a program only but as soon it is in execution state it is called as a process."
    },
    {
        "id": 318,
        "Question": "Some attributes of every process are maintained by the kernel in memory in a separate structure called the ______",
        "Options": [
            "a) pcb",
            "b) task control block",
            "c) process table",
            "d) task table"
        ],
        "Answer": "Answer: a\nExplanation: A process control block is a data structure which is used for storing information about a process. It is also known as task control block and is maintained by the kernel for maintenance of a process. Each process has its own pcb. "
    },
    {
        "id": 319,
        "Question": "Each process is identified by a unique integer called ______",
        "Options": [
            "a) PID",
            "b) PPID",
            "c) TID",
            "d) PTID"
        ],
        "Answer": "Answer: c\nExplanation: As every process has some attributes. Some of these attributes are maintained by the kernel in memory in a separate structure called the process table. A process table is simply an array of many pcb’s. Process table contains two major attributes of a process i.e. processed and parent process ID."
    },
    {
        "id": 320,
        "Question": "The parent id of a child is called ______",
        "Options": [
            "a) PID",
            "b) PPID",
            "c) TID",
            "d) PTID"
        ],
        "Answer": "Answer: b\nExplanation: Both pcb and process table store attributes and information about processes. But the major difference between both is, pcb contains all the information about the process and is used in context switching while process table contains very few attributes of a process like registers, pid, parent pid."
    },
    {
        "id": 321,
        "Question": "Which process is immediately set up by the kernel when we log on to a UNIX system?",
        "Options": [
            "a) shell",
            "b) parent",
            "c) shell",
            "d) bash"
        ],
        "Answer": "Answer: a\nExplanation: Each process is uniquely identified by a unique integer called as the Process ID (PID) which is allotted by the kernel when the process is born. This PID is used for controlling the process of killing it."
    },
    {
        "id": 322,
        "Question": "To know the PID of your current shell, which command will be used?",
        "Options": [
            "a) echo $$",
            "b) echo $",
            "c) $SHELL",
            "d) $PATH"
        ],
        "Answer": "Answer: a\nExplanation: Just like a file has a parent, every process also has the same.  The parent is also a process and the process born from it is called child process. For example, when we run the cat command a process representing the cat command is started by the shell process. The process started by the shell is called child process and the shell (which could be sh, ksh or any other) is the parent process."
    },
    {
        "id": 323,
        "Question": "What is the PID of the first process that is set up when the system is booted?",
        "Options": [
            "a) 1",
            "b) 0",
            "c) any",
            "d) 2"
        ],
        "Answer": "Answer: b\nExplanation: The parent ID of a child process is called  PPID (parent process ID) and is available as a process attribute. It is common that several processes have the same parent. When several processes have the same parent, it often makes sense to kill the parent process rather than killing each child separately."
    },
    {
        "id": 324,
        "Question": "Which of the following command doesn’t create a process?",
        "Options": [
            "a) pwd",
            "b) fork",
            "c) cd",
            "d) pwd and cd"
        ],
        "Answer": "Answer: a\nExplanation: As we log on to a UNIX system, a process is immediately set up by the kernel. This process represents a UNIX command which may sh (Bourne shell), ksh (Korn shell), csh (C shell) or bash (Bash). This process remains alive until we log out when it is killed by the kernel."
    },
    {
        "id": 325,
        "Question": " Which command shows some attributes of a process?",
        "Options": [
            "a) pid",
            "b) $$",
            "c) ps",
            "d) HOME"
        ],
        "Answer": "Answer: c\nExplanation: ps command is used to show some attributes of a process. This command reads through the kernel’s data structures and process tables to fetch the characteristics of a process. By default, ps command displays the processes owned by the user running the command."
    },
    {
        "id": 326,
        "Question": "Which of the following attribute is not shown by ps command?",
        "Options": [
            "a) PID",
            "b) PPID",
            "c) tty",
            "d) size"
        ],
        "Answer": "Answer: d\nExplanation: ps command displays the processes owned by the user running the command. If we execute the command immediately after logging in, it may produce an output like this:\n\n\n$ ps\nPID    TTY        TIME    CMD\n291    console     0:00     bash        // login shell of this user\n\n\n"
    },
    {
        "id": 327,
        "Question": "Which option is used by ps command to get a detailed listing of process attributes?",
        "Options": [
            "a) -u",
            "b) -f",
            "c) -l",
            "d) -x"
        ],
        "Answer": "Answer: b\nExplanation: ps is a highly variant command; its actual output varies across different flavours. To get a detailed listing of process attributes along with PPID and owner (UID), we have to use the -f option with ps command. For example,\n\n\n\t\n\n        \n\n$ ps  -f\nUID    PID    PPID    C    STIME        TTY        TIME    CMD\nAbd    367    291    0    12:35:16    console      0:00     vi create_user.sh\nRyan    291    1    0    10:24:58     console      0:00    -bash\n\n\n"
    },
    {
        "id": 328,
        "Question": "Which option is used by the system administrator for displaying processes of a user?",
        "Options": [
            "a) -f",
            "b) -u",
            "c) -a",
            "d) -e"
        ],
        "Answer": "Answer: b\nExplanation: The system administrator needs to use the -u (user) option to know the activities of a user. For example,\n\n\n        \n\n$ ps  -u\nPID    TTY    TIME    CMD\n378?    0:05      Xsession\n339    pts/3    0:00    bash\n460    pts/5    0:00    dtsession\n478    pts/5    0:00    vi\n\n\n"
    },
    {
        "id": 329,
        "Question": "Which option is used with ps command to list system processes?",
        "Options": [
            "a) -A",
            "b) -a",
            "c) -e",
            "d) –A and -e"
        ],
        "Answer": "Answer: a\nExplanation: The -a (all) option lists processes of all users but doesn’t display the system processes. For example,\n\n\n\t\n\nPID     TTY      TIME     CMD\n339     pts/3    0:00    bash\n460     pts/5    0:00    dtsession\n478     pts/5    0:00    vi\n1005    pts/1    0:00    ksh\n1058    pts/2    0:00    bash\n\n\n"
    },
    {
        "id": 330,
        "Question": "7. What will the output of the following command?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ ps  -t  dev/console</pre></div></div></div></div></div></div>",
        "Options": [
            "a) processes running on terminal named console",
            "b) undefined output",
            "c) erroneous",
            "d) processes running on the current terminal"
        ],
        "Answer": "Answer: d\nExplanation: Apart from processes a user generates, a number of system processes keep running all the time. Most of them are not associated with any terminal. To list all process on our machine, we can use either -A or -e option with ps command. But beware, this list could be very long on a busy system."
    },
    {
        "id": 331,
        "Question": "There are ___ distinct phases of a process.",
        "Options": [
            "a) 2",
            "b) 5",
            "c) 4",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: -t is used with ps command along with the terminal name for displaying processes running on the terminal defined in the command."
    },
    {
        "id": 332,
        "Question": "Which of the following system call is used for creating a new process?",
        "Options": [
            "a) read",
            "b) fork",
            "c) wait",
            "d) new"
        ],
        "Answer": "Answer: d\nExplanation: There are three distinct phases of a process which uses three different system calls or functions. A process can be in its initial state when it is created, after that, the process is in execution state when the instructions of a process are being executed. The third phase of a process is waiting for state when the process is waiting for some action to be taken."
    },
    {
        "id": 333,
        "Question": "What is the value returned by fork system call, when the creation of child process is unsuccessful?",
        "Options": [
            "a) positive integer",
            "b) negative integer",
            "c) zero",
            "d) fractional value"
        ],
        "Answer": "Answer: a\nExplanation: A system call often referred to as kernel call, is a request from a computer program for the services of the operating system. Basically, to access the resources or to utilize the services of the operating system, system calls are used by computer programs."
    },
    {
        "id": 334,
        "Question": "Which system call is used to run a new program?",
        "Options": [
            "a) fork",
            "b) wait",
            "c) exec",
            "d) exit"
        ],
        "Answer": "Answer: b\nExplanation: A process in UNIX is created using fork() system call. It creates an exact copy of the process that invokes it. Now there will be two processes, one parent process and one child process. The process which invokes the fork system call is called parent process and the new process created is called child process."
    },
    {
        "id": 335,
        "Question": "Which system call is used by the parent process to wait for the child process to complete?",
        "Options": [
            "a) wait",
            "b) exec",
            "c) fork",
            "d) exit"
        ],
        "Answer": "Answer: a\nExplanation: The process created using fork is practically identical to that of calling process except for a few parameters like PID. When a process is forked in this manner, the child process gets a new PID."
    },
    {
        "id": 336,
        "Question": "Shell ___ operator is used for running jobs in the background.",
        "Options": [
            "a) $",
            "b) #",
            "c) |",
            "d) &"
        ],
        "Answer": "Answer: a\nExplanation: Since UNIX is a multitasking system, it allows the user to do more than one job at a time. But there can be only one process in the foreground and the rest of jobs have to run in the background."
    },
    {
        "id": 337,
        "Question": "Which command is used for running jobs in the background?",
        "Options": [
            "a) nice",
            "b) ps",
            "c) nohup",
            "d) exec"
        ],
        "Answer": "Answer: d\nExplanation: The & is the shell operator used to run a process in the background. All we have to do is to terminate the command line with a & symbol, the command will automatically run in the background. For example,\n\n\n$ sort  -o  emp.lst  &        // emp.lst will be sorted but the command will run in background\n\n\n"
    },
    {
        "id": 338,
        "Question": "Which of the following shell(s) allows the user to run jobs in the background even when the user has logged out (without using nohup command)?",
        "Options": [
            "a) C",
            "b) bash",
            "c) Korn",
            "d) C and bash"
        ],
        "Answer": "Answer: c\nExplanation: The nohup command when prefixed to a command allows execution of the process even after the user has logged out of the system. Background jobs cease to run when a user logs out of the system. This happens because the shell is killed. To avoid this condition, the nohup command can be used. For example,\n\n\n\t\n\n        \n\n$ nohup  sort  emp.lst  &\n\n\n "
    },
    {
        "id": 339,
        "Question": "When nohup command is used, shells returns the _____",
        "Options": [
            "a) PID",
            "b) PPID",
            "c) tty",
            "d) TTy"
        ],
        "Answer": "Answer: a\nExplanation: nohup command allows running jobs in the background even when the user logs out of the system. But it is necessary to terminate the command line with & when using nohup command."
    },
    {
        "id": 340,
        "Question": "What is the PID of the process who takes the parentage of the process run with nohup command?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) Infinite"
        ],
        "Answer": "Answer: d\nExplanation: Background jobs are terminated automatically when the user logs out. But in C shell and bash shell jobs are not terminated even after the user logs out. While this is not the case with Bourne and Korn shells. In these shells, jobs are aborted as soon as the user logs out."
    },
    {
        "id": 341,
        "Question": "Which command is used for executing jobs according to their priority?",
        "Options": [
            "a) nohup",
            "b) $",
            "c) &",
            "d) nice"
        ],
        "Answer": "Answer: a\nExplanation: When the nohup command is used, the shell returns the PID and some shells also display a message. For example,\n\n\n\t\n\n$ nohup sort  emp.lts &\n859                             // PID returned by the shell\nSending output to nohup.out    //message displayed\n\n\n"
    },
    {
        "id": 342,
        "Question": "nice command is a ______ command in C shell.",
        "Options": [
            "a) internal",
            "b) external",
            "c) built-in",
            "d) directory"
        ],
        "Answer": "Answer: c\nExplanation: nice is a built-in command in the C shell. nice values are system-dependent and typically range from 1 to 19. A higher nice value implies a lower priority. nice reduces the priority of any process."
    },
    {
        "id": 343,
        "Question": "Which option can be used explicitly to reduce the priority of any process.",
        "Options": [
            "a) -a",
            "b) -n",
            "c) -o",
            "d) -q"
        ],
        "Answer": "Answer: b\nExplanation: nice values are system-dependent and typically range from 1 to 19. We can also specify the nice value explicitly with the -n option but a non-privileged user cannot increase the priority of a process. For example, to increase the priority by 8 times use the following command:\n\n\n$ nice  -n  5  wc  -l emp.lst &\n\n\n"
    },
    {
        "id": 344,
        "Question": "Which command is used for premature termination of a process?",
        "Options": [
            "a) signal",
            "b) nice",
            "c) kill",
            "d) nohup"
        ],
        "Answer": "Answer: c\nExplanation: The kill command is used for premature termination of a process. It usually sends a signal with the intention of killing one or more processes. kill is an internal command in most shells. Kill command uses one or more PID’s as its arguments. For example,\n\n\n\t\n\n        \n\n$ kill 105        // terminates the job having PID 105\n\n\n"
    },
    {
        "id": 345,
        "Question": "Which one of the following command is used for killing the last background job?",
        "Options": [
            "a) kill $",
            "b) kill $$",
            "c) kill $!",
            "d) kill !"
        ],
        "Answer": "Answer: c\nExplanation: For most shells, the system variable $! Stores the PID of the last background job. So we can kill any process by using kill command. The PID of the job can be seen when & is affixed to a command. For example,\n\n\n        \n\n$ sort  -o  emp.lst &        \n467\n$ kill $!             // kills the sort command\n\n\n"
    },
    {
        "id": 346,
        "Question": "Which signal is used with kill command to terminate the process when they ignore the SIGTERM signal (15)?",
        "Options": [
            "a) SIGTERM (16)",
            "b) SIGTERM(0)",
            "c) SIGKILL(9)",
            "d) -d"
        ],
        "Answer": "Answer: a\nExplanation: UNIX often requires to communicate the occurrence of events to process. This is done by sending a signal. The SIGTERM signal (15) is the default signal used by the kill command to terminate processes. "
    },
    {
        "id": 347,
        "Question": "Which option is preferred while killing a process using SIGKILL signal (9)?",
        "Options": [
            "a) -p",
            "b) -s",
            "c) -h",
            "d) -d"
        ],
        "Answer": "Answer: c\nExplanation: By default, the SIGTERM signal (15) is used by the kill command to terminate processes. But sometimes it may happen that some programs ignore it and continue their execution normally. In such a case, the process can be killed by using SIGKILL signal (9). For example, to kill a job with PID 134 use the following command:\n\n\n\t\n\n$ kill -9  134\n\n\n"
    },
    {
        "id": 348,
        "Question": "Which of the followings command(s) is used to kill the login shell?",
        "Options": [
            "a) kill 0",
            "b) kill  -9  $$",
            "c) kill  -s  KILL 0",
            "d) kill  -9  $$ and kill  -s  KILL 0"
        ],
        "Answer": "Answer: b\nExplanation: Sometimes it may happen that some programs ignore the SIGTERM signal (15) and continue their execution normally. In such a case, the process can be killed by using SIGKILL signal (9). This signal can’t be generated at the press of a key, so we have to use KILL  with the signal name preceded with -s option. For example, to kill a job with PID 184 use the following command:\n\n\n$ kill -s  KILL 184\n\n\n "
    },
    {
        "id": 349,
        "Question": "What is a job?",
        "Options": [
            "a) group of tasks",
            "b) group of commands",
            "c) group of processes",
            "d) group of signals"
        ],
        "Answer": "Answer: c\nExplanation: A job is a name given to a group of processes. The easiest way of creating a job is to run a pipeline of two or more commands. If we are using C, Korn or Bash shell we can use the job control commands to manipulate jobs."
    },
    {
        "id": 350,
        "Question": "Which of the following command is used to suspend a job?",
        "Options": [
            "a) ctrl-Z",
            "b) ctrl-Q",
            "c) bg",
            "d) $"
        ],
        "Answer": "Answer: a\nExplanation: Suppose we invoke a command and the prompt hasn’t returned even after a long time then we can suspend that job by pressing Ctrl-Z. The point needed to be focused here is, the job hasn’t terminated yet; it’s only suspended or stopped."
    },
    {
        "id": 351,
        "Question": "Which command will push the current foreground job to the background?",
        "Options": [
            "a) bg",
            "b) fg",
            "c) ctrl-Z",
            "d) kill"
        ],
        "Answer": "Answer: a\nExplanation: If we’d suspended a job using ctrl-Z then after that we can use the bg command to push the current foreground job to the background. For example,\n\n\n\t\n\n        \n\n$ bg\n[1]     sort  abd.index  >  mash.index &   // this job has been sent to the background. [1] \n// indicates job number 1.\n\n\n"
    },
    {
        "id": 352,
        "Question": "____ command will bring the background jobs to the foreground.",
        "Options": [
            "a) bg",
            "b) fg",
            "c) ctrl-Z",
            "d) kill"
        ],
        "Answer": "Answer: b\nExplanation: We can use the fg command to bring any of the background jobs to the foreground. To bring the most recent background job to the foreground we can use the following command:\n\n\n        \n\n$ fg\n\n\n"
    },
    {
        "id": 353,
        "Question": "7. What does the following command do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ kill %2</pre></div></div></div></div></div></div>",
        "Options": [
            "a) kills job number 2",
            "b) kills the second background job",
            "c) invalid command",
            "d) kill all foreground & background jobs"
        ],
        "Answer": "Answer: a\nExplanation: fg command can be used with the job number, job name or a string as arguments prefixed with the % symbol. For example,\n\n\n\t\n\n$ fg  %3            // brings the third job to foreground\n\n\n "
    },
    {
        "id": 354,
        "Question": "Which of the following is not a part of job control facilities?",
        "Options": [
            "a) relate a job to the background",
            "b) bring it back to the foreground",
            "c) kill a job",
            "d) create a new job"
        ],
        "Answer": "Answer: a\nExplanation: bg command can also be used with the job number, job name or a string as arguments prefixed with the % symbol. For example, if we’ve suspended two jobs but now we want  to send the second job to the background, use the following command:\n\n\n$ bg  %2\n\n\n"
    },
    {
        "id": 355,
        "Question": "Which command is used to list the status of jobs?",
        "Options": [
            "a) fg",
            "b) JOBS",
            "c) jobs",
            "d) fg"
        ],
        "Answer": "Answer: b\nExplanation: We can use the identifiers like job number, job name or a string of arguments with kill command to terminate a job. Thus kill %2 will kill the second background job."
    },
    {
        "id": 356,
        "Question": "We can schedule a job to run at a specified time of day using _______ command.",
        "Options": [
            "a) batch",
            "b) at",
            "c) cron",
            "d) jobs"
        ],
        "Answer": "Answer: d\nExplanation: If we are using the C, Korn or Bash shell then we can use their job control facilities to manipulate jobs. Job control in these shells means that we can :\n•    Relate a job to the background (bg)\n•    bring it back to the foreground (fg)\n•    kill a job (kill)\n•    list the active jobs (jobs)\n•    suspend a foreground job (ctrl-Z) "
    },
    {
        "id": 357,
        "Question": "We can use the _____ symbol with at command to redirect our output to a specified file.",
        "Options": [
            "a) >",
            "b) <",
            "c) >>",
            "d) %"
        ],
        "Answer": "Answer: b\nExplanation: If we are using the C, Korn or Bash shell then we can use their job control facilities to manipulate jobs like killing a job, pushing to background or foreground, suspending a foreground job. We cannot use these job control commands in any other shell except the above mentioned. "
    },
    {
        "id": 358,
        "Question": "Which of the following keyword is not supported by at command?",
        "Options": [
            "a) now",
            "b) noon",
            "c) tomorrow",
            "d) evening"
        ],
        "Answer": "Answer: c\nExplanation: We can use the jobs command to list the status of the jobs. This command tells the state of the job along with job number. For example,\n\n\n$ jobs\n[3] Running wc -l fitr?? > word_count  &\n[2]    Running    sort  abd.index  >  mash.index &\n\n\n"
    },
    {
        "id": 359,
        "Question": "Which one of the following forms used with at command is invalid?",
        "Options": [
            "a) at noon",
            "b) at now +2 years",
            "c) at  3:07 + 1 day",
            "d) at morning"
        ],
        "Answer": "Answer: b\nExplanation: UNIX provides sophisticated facilities to schedule a job to run at a specified time of day using at command. at command takes as its arguments the time the job is to be executed and displays the > prompt. The input then has to be supplied from standard input. For example,\n\n\n$ at  19:07\nat> file02.sh\n[Ctrl-D] \nCommands will be executed using usr/bin/bash \nJob 1016171818.a  at Sun Jan 15  19:07:00  2018\nIn the above command the script file named file02.sh goes to the queue and it will be executed at the specified time.\n\n\n"
    },
    {
        "id": 360,
        "Question": "We can list the jobs queued using at command by using ____ option.",
        "Options": [
            "a) -p",
            "b) -v",
            "c) -l",
            "d) -r"
        ],
        "Answer": "Answer: c\nExplanation: Jobs scheduled using at command are sent to a queue for later execution. To list the jobs in this queue we can use the -l option with at command. This command will list each of the scheduled jobs in the queue in this format.\n\n\n\t\n\n1        Thur  Jan 17  12:08:00 2018-01-20\n\n\n"
    },
    {
        "id": 361,
        "Question": "To remove a job from the queue, which option is used with at command?",
        "Options": [
            "a) -r",
            "b) -l",
            "c) -e",
            "d) -t"
        ],
        "Answer": "Answer: a\nExplanation: Jobs can be listed using -l option with at command and can be removed using -r option. All we have to do is to provide the job number (of the job which we want to remove from the queue) as an argument to at command along with -r option. For example,\n\n\n\t\n\n        \n\n$ at  -r  1        // removes job 1 from the queue.\n\n\n"
    },
    {
        "id": 362,
        "Question": "Which command permits to schedule jobs for later execution, as soon as the system load permits?",
        "Options": [
            "a) at",
            "b) %",
            "c) batch",
            "d) cron"
        ],
        "Answer": "Answer: a\nExplanation: Unfortunately, the major drawback in at command is that we cannot find out the name of the program scheduled to be executed. This may create a problem when we are unable to recall whether a specific job has actually been scheduled for later execution."
    },
    {
        "id": 363,
        "Question": "Jobs scheduled using batch command can be removed using ___ option.",
        "Options": [
            "a) -a",
            "b) -d",
            "c) -f",
            "d) -r"
        ],
        "Answer": "Answer: c\nExplanation: The batch command also allows us to schedule jobs for later execution but unlike at command, it executes the jobs as soon as the system load permits. For example,\n\n\n$ batch <  emp.sh\n\n\nCommands will be executed using usr/bin/bash\nJob 1016171818.a  at Sun Jan 15  16:07:00  2018\nThis command doesn’t take any arguments but uses an internal algorithm to determine the execution time."
    },
    {
        "id": 364,
        "Question": "What is a daemon?",
        "Options": [
            "a) process whose parent has died",
            "b) process who has completed its execution but still has an entry in the process table",
            "c) process which is running infinitely",
            "d) process which runs automatically without any user interaction"
        ],
        "Answer": "Answer: a\nExplanation: The batch command also allows us to schedule jobs for later execution but unlike at command, it executes the jobs as soon as the system load permits. Any job scheduled using batch goes to a special at queue."
    },
    {
        "id": 365,
        "Question": "What is cron?",
        "Options": [
            "a) a simple process",
            "b) an orphan process",
            "c) a daemon",
            "d) a zombie process"
        ],
        "Answer": "Answer: d\nExplanation: Any job scheduled using batch goes to a special at queue. To remove a job from this queue we can use the -r option with at command. For example,\n\n\n$ at  -r  1        // removes job 1 from the queue.\n\n\n"
    },
    {
        "id": 366,
        "Question": "Which of the following command will remove the current crontab?",
        "Options": [
            "a) crontab -p",
            "b) crontab -l",
            "c) crontab -e",
            "d) crontab -r"
        ],
        "Answer": "Answer: d\nExplanation: Daemons are processes which run automatically without requiring any user interaction. These are designed to help the user by performing tasks which are commonly done. For example, checking for an e-mail."
    },
    {
        "id": 367,
        "Question": "To find out how efficiently a program a used the system resources, which command is used?",
        "Options": [
            "a) sys",
            "b) time",
            "c) crontab",
            "d) daemon"
        ],
        "Answer": "Answer: c\nExplanation: cron is a daemon which runs on UNIX systems. It executes programs at regular intervals. It lets us to schedule jobs so that they can be scheduled repeatedly. It executes cron jobs created by the crontab. For example, a cron job can be scheduled for processing logs every evening."
    },
    {
        "id": 368,
        "Question": "The UNIX shell is both _______ and _______ language.",
        "Options": [
            "a) interactive, responsive",
            "b) interpreter, executing",
            "c) scripting, interpreter",
            "d) high level, low level"
        ],
        "Answer": "Answer: c\nExplanation: The UNIX shell is both an interpreter and scripting language. We can also say that shell can be interactive or non-interactive. When we log in to our system, interactive shell presents a prompt and wait for our requests while a non-interactive shell is managed by an interactive shell while executing a shell script."
    },
    {
        "id": 369,
        "Question": "Which of the following function(s) are performed by an interactive shell?",
        "Options": [
            "a) job control",
            "b) history",
            "c) aliases",
            "d) job control, history, aliases"
        ],
        "Answer": "Answer: d\nExplanation: When we log in to our system, an interactive shell presents a prompt and waits for our requests. This type of shell supports functions like job control, history, aliases etc."
    },
    {
        "id": 370,
        "Question": "Which one of the following is arguably the best shell to use?",
        "Options": [
            "a) Bash",
            "b) Korn",
            "c) C",
            "d) Bourne"
        ],
        "Answer": "Answer: b\nExplanation: An interactive shell runs a non-interactive shell while executing a shell script. Every feature used in a shell script can also be used in an interactive shell but the reverse is not true. Job control and history have no meaning in a shell script."
    },
    {
        "id": 371,
        "Question": "Which one of the following command is used to create a child shell?",
        "Options": [
            "a) fork",
            "b) wait",
            "c) sh",
            "d) env"
        ],
        "Answer": "Answer: a\nExplanation: Bash was developed by GNU as a bourne again shell. It was a grand superset in that that contains the features of both C and Korn shells. Bash was developed to ultimately conform to the POSIX shell specification and is arguably the best shell to use."
    },
    {
        "id": 372,
        "Question": "Shell variables are of ____ types.",
        "Options": [
            "a) 1",
            "b) 3",
            "c) 2",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: To create a child shell we can use the sh command. sh is basically the command name of Bourne shell. sh is a command language interpreter that executes commands read from a command line string. To create a child shell, simply invoke sh command without any argument."
    },
    {
        "id": 373,
        "Question": "____ command is used to display the environment variables only.",
        "Options": [
            "a) set",
            "b) env",
            "c) sh",
            "d) var"
        ],
        "Answer": "Answer: c\nExplanation: Shell variables are of two types –local and environment. For example, PATH, HOME and SHELL are environment variables. They are called so because they are available in the user’s total environment whereas local variables are more restricted in scope."
    },
    {
        "id": 374,
        "Question": "____ command displays all the variables available in the current shell.",
        "Options": [
            "a) env",
            "b) set",
            "c) var",
            "d) sh"
        ],
        "Answer": "Answer: b\nExplanation: Since ABD_DIR is a local variable and local variables are more restricted to the scope so it will not be accessible to the child process. For example,\n\n\n\t\n\n$ ABD_DIR=/home/users/abd/doc       // local variable in parent process\n$echo ABD_DIR\nhome/users/abd/doc\n$ sh                              // create a child shell\n$echo ABD_DIR\n_                                // variable not available in child shell\n\n\n"
    },
    {
        "id": 375,
        "Question": "The shell has ____ prompts.",
        "Options": [
            "a) 1",
            "b) 4",
            "c) many",
            "d) 2"
        ],
        "Answer": "Answer: b\nExplanation: env command is used to display environment variables only in the current shell. For example, invocation of env command will produce an output in the following form:\n\n\n\t\n\n$ env\nHOME=/home/abd\nLOGNAME=abd\nMAIL=/var/mail/kumar\nSHELL=/usr/bin/bash\nTERM=xterm\n\n\n"
    },
    {
        "id": 376,
        "Question": "Which one of the following command will change our primary prompt from $ to C>?",
        "Options": [
            "a) PS1=”C> “",
            "b) PS2=”C>”",
            "c) PS1=”>C”",
            "d) PS2=”<C”"
        ],
        "Answer": "Answer: b\nExplanation: set command is used to display all the variables available in the current shell. set is a built-in command. env is an external command and runs in a child process. It thus displays only those variables that are inherited from its parent, the shell."
    },
    {
        "id": 377,
        "Question": "Which environment variable is used to display our username?",
        "Options": [
            "a) PATH",
            "b) MAIL",
            "c) LOGNAME",
            "d) HOME"
        ],
        "Answer": "Answer: b\nExplanation: We’ve seen that environment variables are generally defined in uppercase only. But there is nothing which can prevent us from using a different scheme."
    },
    {
        "id": 378,
        "Question": "Which one of the following is not an environment variable?",
        "Options": [
            "a) HOME",
            "b) PATH",
            "c) USER",
            "d) env"
        ],
        "Answer": "Answer: a\nExplanation: Environment variables control the behavior of the system. They determine the environment in which we work. If they are not set properly, we may not be able to use some of the commands without a pathname."
    },
    {
        "id": 379,
        "Question": "Which symbol is used for setting the PS1 prompt to show the current event number?",
        "Options": [
            "a) ^",
            "b) !",
            "c) &",
            "d) |"
        ],
        "Answer": "Answer: b\nExplanation: Bash and Korn shell also supports history facility that treats a previous command as an event and associates it with a number. Thus we can recall and execute previous commands by their event numbers. Using the !, we can set the PS1 prompt to show the current event number. For example,\n\n\n\t\n\n$ PS1=’ [!] ’        //bash requires \\ before !\n[42] _              // number associated \nEvery time a command is executed, the event number is incremented.\n\n\n"
    },
    {
        "id": 380,
        "Question": "Which escape sequence is used with PS1 to show the hostname of our computer?",
        "Options": [
            "a) \\n",
            "b) \\c",
            "c) \\h",
            "d) \\e"
        ],
        "Answer": "Answer: c\nExplanation: Bash uses a number of escape sequences to make our prompt as much information as possible. For example, the \\h string will show the hostname of our computer.\n\n\n\t\n\n        \n\n$ PS1=”\\h ”\nSaturn> _        //Saturn is the machine’s name\n\n\n"
    },
    {
        "id": 381,
        "Question": "Which of the following shells support the use of aliases?",
        "Options": [
            "a) bourne",
            "b) Korn",
            "c) bash",
            "d) Korn and bash"
        ],
        "Answer": "Answer: d\nExplanation: Bash and Korn shell supports the use of aliases which lets us assign shorthand names to frequently used commands. For example,\n\n\n        \n\n$ alias  a1=’ls  -l’    // quoting necessary for multiple words\n$ a1                   // a1 will now execute the ls  -l command\n\n\n"
    },
    {
        "id": 382,
        "Question": "Which command is used in bash and Korn shells to display the previously used commands?",
        "Options": [
            "a) his",
            "b) history",
            "c) sh",
            "d) ps"
        ],
        "Answer": "Answer: a\nExplanation: Aliases lets us assign shorthand names to frequently used commands. We can display an alias definition using an alias with the name. For example,\n\n\n\t\n\n$ alias  a1\na1=’ls  -l’\n\n\n"
    },
    {
        "id": 383,
        "Question": "To display the last five used commands, which one of the following commands is used (in bash shell)?",
        "Options": [
            "a) history  5",
            "b) history -5",
            "c) history",
            "d) history  5-"
        ],
        "Answer": "Answer: b\nExplanation: Bash and Korn support a versatile history feature that treats a previous command as an event and associates it with an event number. The history command displays the history list showing the event number of every previously executed command."
    },
    {
        "id": 384,
        "Question": "Which of the following symbols are used for accessing previous commands by event numbers?",
        "Options": [
            "a) !",
            "b) r",
            "c) $",
            "d) ! and r"
        ],
        "Answer": "Answer: a\nExplanation: While bash displays the complete history list using history command. Korn lists the 16 commands recently used. But we can easily find out the last five commands by using a numeric argument:\n\n\n$ history  5        // in bash\n$ history -5        // in Korn\n\n\n"
    },
    {
        "id": 385,
        "Question": "Which symbol is used as a shorthand for using the last argument to the previous command?",
        "Options": [
            "a) %",
            "b) _",
            "c) |",
            "d) $"
        ],
        "Answer": "Answer: d\nExplanation: The ! symbol (r in Korn) is used to repeat previous commands. For repeating the last command we have to use !! in bash and r in Korn. We can repeat other commands also, but with the event number as an argument. For example, following commands will repeat the command with event number 38,\n\n\n$ !38      // in bash \n$ r 38     // in Korn\n\n\n"
    },
    {
        "id": 386,
        "Question": "Which one of the following keyword is used with the set command to avoid overwrite existing file?",
        "Options": [
            "a) nooverwrite",
            "b) ignore",
            "c) clobber",
            "d) noclobber"
        ],
        "Answer": "Answer: a\nExplanation: The set statement by default displays the variables in the current shell, but in bash and Korn shell, it can make several environment settings with -o option."
    },
    {
        "id": 387,
        "Question": "To prevent accident logging out, we can use ____ as a keyword with the set command.",
        "Options": [
            "a) noclobber",
            "b) log out",
            "c) ignoreeof",
            "d) ignore"
        ],
        "Answer": "Answer: d\nExplanation:  The shell’s > symbol overwrites (clobber) an existing file, and to prevent such accidental overwriting, e have to use noclobber argument in the following way:\n\n\n$ set  -o  noclobber        // no more overwriting file with >\n\n\n "
    },
    {
        "id": 388,
        "Question": "To reverse any setting updated by set command we can use ____ symbol.",
        "Options": [
            "a) –",
            "b) /",
            "c) +",
            "d) $"
        ],
        "Answer": "Answer: c\nExplanation: It may happen that sometimes when we press the Ctrl-d with intent to terminate standard input, but end up logging out of the system. The ignoreeof keyword offers protection from accidental logging out.\n\n\n        \n\n$ set  -o  ignoreeof        //no more logging out using ctrl-d\n\n\n"
    },
    {
        "id": 389,
        "Question": "The ____ acts as a shorthand representation of the home directory.",
        "Options": [
            "a) $",
            "b) ~",
            "c) “”",
            "d) %"
        ],
        "Answer": "Answer: c\nExplanation: A set option is turned off with set +o keyword. For example, to reverse the noclobber feature use the following command:\n\n\n\t\n\n$ set +o noclobber.\n\n\n"
    },
    {
        "id": 390,
        "Question": "Which file is executed every time a second shell is called up?",
        "Options": [
            "a) .profile",
            "b) rc file",
            "c) .script",
            "d) env.file"
        ],
        "Answer": "Answer: b\nExplanation: The ~ acts as a shorthand representation of the home directory. When the ~ (tidle) is followed by a login name, the shell understands the entire argument as the absolute pathname of the login directory. Thus when the shell encounters the following command line, it switches the Sharma’s home directory.\n\n\n\t\n\n$ cd ~ sharma         //effectively becomes $HOME/sharma\n\n\n"
    },
    {
        "id": 391,
        "Question": "Which of the following are history variables?",
        "Options": [
            "a) HISTISIZE",
            "b) HISTFILESIZE",
            "c) HISTORY",
            "d) HISTISIZE and HISTFILESIZE"
        ],
        "Answer": "Answer: a\nExplanation: Every shell uses at least one startup script in the user’s home directory. This script is executed when the user logs in. Some shells also make use of a separate file that is run before logging out. We can look for these files in our home directory.\n\n\n.profile (Bourne shell)\n.profile and .kshrc (Korn shell)\n.bash_profile or .bashrc (bash shell)\n\n\n"
    },
    {
        "id": 392,
        "Question": "Which one of the following command will search history list for the previous command having the last occurrence of string cvf?",
        "Options": [
            "a) /cvf",
            "b) /cvf [enter] ",
            "c) /bkw",
            "d) !cvf"
        ],
        "Answer": "Answer: b\nExplanation: There is no rc file in Bourne, but bash and Korn shell use one. This file is defined by an environment variable (BASH_ENV in bash and ENV in Korn). This rc file is executed every time a second shell is called up (when running a shell script, for instance)."
    },
    {
        "id": 393,
        "Question": "Every file system has a directory structure headed by ____",
        "Options": [
            "a) parent",
            "b) child",
            "c) root",
            "d) kernel"
        ],
        "Answer": "Answer: c\nExplanation: Every file system comprises of a file hierarchy which consists of files and directories held together. Every file system has a directory structure headed by root. "
    },
    {
        "id": 394,
        "Question": "Every file is associated with a table which contains all possible information about a file, that table is called as _________",
        "Options": [
            "a) info table",
            "b) file table",
            "c) inode",
            "d) ps table"
        ],
        "Answer": "Answer: c\nExplanation: Every file is associated with a table that contains all the necessary possible information we need to know about a file. This table is called the inode ( shorthand from index node) and this table is accessible using an inode number."
    },
    {
        "id": 395,
        "Question": "Which of the following is not a content of inode?",
        "Options": [
            "a) file type",
            "b) file permission",
            "c) file size and links",
            "d) file name"
        ],
        "Answer": "Answer: d\nExplanation: Every file is associated with a table that contains all the necessary possible information we need to know about a file. This table contains the following attributes of a file:\n•    file type\n•    file permissions\n•    an array of pointers that keeps track of all disk blocks used by the file\n•    file size and links\n•    The UID of owner and GID of a group owner\n•    Date and time of:\no    Last access\no    Last modification\no    Last change of inode"
    },
    {
        "id": 396,
        "Question": "Which of the following is not stored in inode?",
        "Options": [
            "a) file name",
            "b) inode number",
            "c) file size",
            "d) file name and inode number"
        ],
        "Answer": "Answer: d\nExplanation: Neither the name of the file nor the inode number associated with it is stored in the inode. It is the directory which stores the inode number along with the filename."
    },
    {
        "id": 397,
        "Question": "Which option is used with ls command for knowing the inode number of the file?",
        "Options": [
            "a) -l",
            "b) -i",
            "c) -a",
            "d) -o"
        ],
        "Answer": "Answer: b\nExplanation: The ls command reads the inode to fetch a file’s attributes. One option i.e. -i tells us the inode number of a file. For example,\n\n\n        \n\n$ ls  -il  abd.txt\n9059  -rw-r--r--    1  kumar   metallone   52626  Jan 21  11:54  abd.txt\n\n\n "
    },
    {
        "id": 398,
        "Question": "When we can access a file with multiple filenames, it is said that the file has multiple _____",
        "Options": [
            "a) names",
            "b) inode number",
            "c) links",
            "d) uid"
        ],
        "Answer": "Answer: b\nExplanation: No two files in the same file system can have the same inode number unless one of the file is removed. When that happens, the kernel will allocate this inode number to a new file."
    },
    {
        "id": 399,
        "Question": "Which command is used to link a file with multiple filenames?",
        "Options": [
            "a) ln",
            "b) link",
            "c) hl",
            "d) sl"
        ],
        "Answer": "Answer: c\nExplanation: A filename is not stored in the inode because a file can have multiple filenames. When this happens, we say that the file has more than one link, which means that we can access this file using multiple filenames. The number of links associated with a file can be viewed using ls command."
    },
    {
        "id": 400,
        "Question": "Which option is used with ln command to create a soft link?",
        "Options": [
            "a) -a",
            "b) -l",
            "c) -s",
            "d) -e"
        ],
        "Answer": "Answer: a\nExplanation: A file is linked with the ln (link) command, which takes two filenames as arguments. The command can create both hard and soft links. The syntax for creating a hard link is as follows:\n\n\n$ ln original_filename  link_name    \n$ ln  emp.lst  employee        //employee must not exist\n\n\n "
    },
    {
        "id": 401,
        "Question": " The default permissions for a regular file are ____ and for directories are ____",
        "Options": [
            "a) 777, 666",
            "b) 666, 777",
            "c) 000, 000",
            "d) 777, 777"
        ],
        "Answer": "Answer: c\nExplanation: We can also create soft links using ln command. All we have to do is to use -s option along with ln command. For example,\n\n\n$ ln  -s  original_filename  link_name\n$ ln  -s emp.lst  employee\n\n\n   "
    },
    {
        "id": 402,
        "Question": "We can change the default permission set for files and directories using ______",
        "Options": [
            "a) umask",
            "b) um",
            "c) perm",
            "d) touch"
        ],
        "Answer": "Answer: a\nExplanation: Each hard linked file is assigned the same inode number as the original one, hence they refer to the same physical location. Hard links are more flexible as compared to soft links, as they remain linked even after the original file is removed."
    },
    {
        "id": 403,
        "Question": "Which command is used to change timestamps associated with a file?",
        "Options": [
            "a) touch",
            "b) time",
            "c) umask",
            "d) ls"
        ],
        "Answer": "Answer: a\nExplanation: A symbolic link or soft link is same as a shortcut feature in Windows OS. Each soft linked file contains a separate inode number which points to the original file. Soft links are used when we want to link files across the file systems. Soft Link contains the path for original file and not the contents of the file. "
    },
    {
        "id": 404,
        "Question": "Which option is used with touch command to change the time of last file modification?",
        "Options": [
            "a) -a",
            "b) -m",
            "c) -r",
            "d) -i"
        ],
        "Answer": "Answer: b\nExplanation: When we create a file or a directory, the permissions assigned to them depend on the system’s default settings. The default permissions for regular files in UNIX system are 666 (in octal) or rw-rw-rw- and for directories are 777 (in octal) or rwxrwxrwx."
    },
    {
        "id": 405,
        "Question": "When touch command is used without any option but with an expression, which of the following timestamps are changed?",
        "Options": [
            "a) modification time",
            "b) last access time",
            "c) last inode modification",
            "d) modification time and last access time"
        ],
        "Answer": "Answer: a\nExplanation: The permissions of a file/ directory are managed at the time when we create these. The permissions are transformed by subtracting the user mask from it to remove one or more permissions. For example,\n\n\n$ umask\n022\n\n\nThis is an octal number which is subtracted from the system default to obtain the actual default. Hence it will become 644 for ordinary files and 755 for directories. Now if we create any file or directory, the permissions associated will be 644 and 755 respectively. "
    },
    {
        "id": 406,
        "Question": "Which command is used for locating files?",
        "Options": [
            "a) search",
            "b) find",
            "c) loc",
            "d) type"
        ],
        "Answer": "Answer: b\nExplanation: find is one of the most powerful tools of the UNIX system. It recursively examines a directory tree to look for file matching based on some criteria and then takes some action on the selected files."
    },
    {
        "id": 407,
        "Question": "The syntax of the find command is ____________",
        "Options": [
            "a) find  path_list  selection_criteria  action",
            "b) find action path_list  selection_criteria",
            "c) find  selection_criteria  action  path",
            "d) find path  action"
        ],
        "Answer": "Answer: a\nExplanation: find command has a very difficult command line, however, find is easily tamed if we break up its arguments into three components. The syntax for using find command is,\n\n\n$ find  path_list  selection_criteria  action\n\n\n "
    },
    {
        "id": 408,
        "Question": "Which symbol is used with find command for specifying arguments?",
        "Options": [
            "a) +",
            "b) –",
            "c) + and –",
            "d) |"
        ],
        "Answer": "Answer: c\nExplanation: find command searches for a given file according to the arguments specified in the command line. Each argument is preceded by a – (hyphen). For example, to display all files in the current directory having .c extension, use the following command:\n\n\n        \n\n$ find .  -name “*.c” -print\n\n\n"
    },
    {
        "id": 409,
        "Question": "4. What will be the output of the following command?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ find /  -name  a.out  -print</pre></div></div></div></div></div></div>",
        "Options": [
            "a) all files having filename as a.out",
            "b) all files in the root directory",
            "c) undefined output",
            "d) erroneous"
        ],
        "Answer": "Answer: a\nExplanation: The path list (/) indicates that the search will begin from the root directory. Each file in the list is then matched against the selection criteria (a.out). The third section -print is the action taken on the files; i.e. t display matched files on the terminal."
    },
    {
        "id": 410,
        "Question": "Which one of the following option is used for locating the files by inode number?",
        "Options": [
            "a) -name",
            "b) -inum",
            "c) -inode",
            "d) -ind"
        ],
        "Answer": "Answer: a\nExplanation: find command allows us to specify the relative pathname in the path list. For example, the following command will display all the .txt files in the current directory.\n\n\n$ find .  -name “*.txt” -print        // single quotes can also work\n\n\n"
    },
    {
        "id": 411,
        "Question": "Which option is used with find command for specifying the file type?",
        "Options": [
            "a) -perm",
            "b) -inum",
            "c) -name",
            "d) -type"
        ],
        "Answer": "Answer: b\nExplanation: find command allows us to locate files by their inode number. To do so, we’ve to use the -inum option to find all the filenames having the same inode number. For example,\n\n\n$ find  /  -inum  13857  -print        // display all the files linked (having same inode number)\n\n\n "
    },
    {
        "id": 412,
        "Question": "To specify permissions while using find command we have to use _____ option.",
        "Options": [
            "a) -perm",
            "b) -inum",
            "c) -name",
            "d) -type"
        ],
        "Answer": "Answer: d\nExplanation: The -type option followed by letter f, d, or l selects files of the ordinary, directory and symbolic link type. For example,\n\n\n$ find .  -type d  -print        // display all the directory files in the current directory\n\n\n "
    },
    {
        "id": 413,
        "Question": "Which option is used to find command to search for files based on access time?",
        "Options": [
            "a) -atime",
            "b) -mtime",
            "c) -time",
            "d) -type"
        ],
        "Answer": "Answer: a\nExplanation: The -perm option specifies the permissions to match. For example, -perm 666 selects those files which are having read and write permissions for all categories of users. For example,\n\n\n$ find $HOME  -perm 666 -type d  -print        // select directories in the home directory having                                                                 666 (in octal) permissions.\n\n\n"
    },
    {
        "id": 414,
        "Question": "Which of the following command will be used to locate those files that have not been modified for more than a year?",
        "Options": [
            "a) find .  -mtime 1",
            "b) find  . -mtime 1 year -print",
            "c) find . -mtime  +365 -print",
            "d) find . -mtime -365 -print"
        ],
        "Answer": "Answer: a\nExplanation: find command offers an option which can be used to select files based on access time. For this purpose, we have to use -atime option with the find command. For example,\n\n\n$ find . -atime -2  -print              //display those files which have been last accessed in less than 2 days\n\n\n"
    },
    {
        "id": 415,
        "Question": "Which of the following operator is used with find command for performing the negate function?",
        "Options": [
            "a) -a",
            "b) -o",
            "c) &&",
            "d) !"
        ],
        "Answer": "Answer: c\nExplanation: To select files those file that have not been modified for more than a year, a positive value has to be used with -mtime. Here +365 means more than 365 days whereas -365 is used for less than 365 days. "
    },
    {
        "id": 416,
        "Question": "Which operator is used to specify the AND condition in find command?",
        "Options": [
            "a) !",
            "b) &&",
            "c) -A",
            "d) -a"
        ],
        "Answer": "Answer: d\nExplanation: There are three operators that are commonly used with the find command. The ! operator is used before an option to negate its meaning. For example,\n\n\n$ find . ! -name “*.c” -print        // select all files but not the C program files.\n\n\n"
    },
    {
        "id": 417,
        "Question": "Which of the following option is used with find command for taking action on selected files?",
        "Options": [
            "a) -exec",
            "b) -atime",
            "c) -mtime",
            "d) -a"
        ],
        "Answer": "Answer: d\nExplanation: The -a operator when used with find command represents the AND condition and is implied by default when two selection criteria are placed together. For example,\n\n\n$ find . \\(-type f  -a -mtime  +2)\\  -print            // -a \n can also be omitted ( it is automatically implied by  //  default)\n\n\n"
    },
    {
        "id": 418,
        "Question": "Which command is used for preparing a file for printing?",
        "Options": [
            "a) cd",
            "b) cat",
            "c) print",
            "d) pr"
        ],
        "Answer": "Answer: a\nExplanation: Filters are defined as a category of commands that takes the advantage of shell’s redirection features. A filter is capable of reading standard input and writing to standard output. The piping mechanism is an example of a filter which lets the standard output of one filter to serve as standard input to another."
    },
    {
        "id": 419,
        "Question": "pr command adds ____ lines of margin at the top and bottom.",
        "Options": [
            "a) 5",
            "b) 4",
            "c) 2",
            "d) 1"
        ],
        "Answer": "Answer: d\nExplanation: The pr command is used for preparing a file by adding suitable headers, footers and formatted text. This command is used with a filename as an argument. For example,\n\n\n$ pr  dept.lst\nMay  06  10:38  1998  dept.lst  Page 1\n01:accounts:6213\n02:admin:5423\n03:marketing:6521\n04:personnel:2365\n \n.....blank lines.......\n\n\n"
    },
    {
        "id": 420,
        "Question": "Which option is used with pr command for printing multi-columnar output?",
        "Options": [
            "a) -p",
            "b) -k",
            "c) -d",
            "d) -pr"
        ],
        "Answer": "Answer: a\nExplanation: pr command is used for preparing a file for printing by adding suitable headers, footers and formatted text. It adds five lines of margin at the top and five at the bottom. The header shows the date and time of last modification of the file along with filename and page number."
    },
    {
        "id": 421,
        "Question": "Which option is used with pr command to suppress the header and footers?",
        "Options": [
            "a) -p",
            "b) -k",
            "c) -t",
            "d) -n"
        ],
        "Answer": "Answer: b\nExplanation: -k option is used with pr command (where k is an integer) for printing in k columns. For example, if a file contains a series of 12 numbers then we can divide the output into 3 columns in this way:\n\n\n        \n\n$ dept.lst | pr -3\nMay  06  10:38  1998  dept.lst  Page 1\n \n1    5    9\n2    6    10\n3    7    11\n4    8    12\n\n\n "
    },
    {
        "id": 422,
        "Question": " Which option is used with pr command to display output along with line numbers?",
        "Options": [
            "a) -d",
            "b) -n",
            "c) -o n",
            "d) -t"
        ],
        "Answer": "Answer: c\nExplanation: We can use the -t option with pr command if we want to suppress the headers and associated which are displayed with the output of pr command. For example,\n\n\n$ dept.lst | pr -t  -5        // no headers and footers; multi-columnar output\n1    5    9\n2    6    10\n3    7    11\n4    8    12\n\n\n "
    },
    {
        "id": 423,
        "Question": "___ operator is used with pr command to start printing from a specific page.",
        "Options": [
            "a) –",
            "b) #",
            "c) +",
            "d) &"
        ],
        "Answer": "Answer: b\nExplanation: pr command offers many options which are used for producing the output in just the format we need. For example,\n-d    double spaces input\n-n    numbers lines, helps in debugging code\n-o n    offsets lines by n spaces, increases left margin of the page\n\n\n$ pr  -t  -n  -d  -o  10  dept.lst\n    1    01:accounts:6213\n    2    02:admin:5423\n    3    03:marketing:6521\n    4    04:personnel:2365\n\n\n "
    },
    {
        "id": 424,
        "Question": "Which command is used for displaying the beginning of a file?",
        "Options": [
            "a) pr",
            "b) head",
            "c) begin",
            "d) lp"
        ],
        "Answer": "Answer: a\nExplanation: If we are not using the -t option with pr command then we can use the -h option to add a header of our choice. This option is followed by the header string. For example,\n\n\n$ pr  -h “Department List”  dept.lst\n\n\n "
    },
    {
        "id": 425,
        "Question": "By default, how many lines are displayed using the head command?",
        "Options": [
            "a) 5",
            "b) 10",
            "c) 4",
            "d) 20"
        ],
        "Answer": "Answer: c\nExplanation: There’s an option available with pr command which lets the user to print from a specific page number. This function is performed by prefixing a + with the page number. For example, to print from page number 5, use the following command:\n\n\n$ pr +5  dept.lst\n\n\n"
    },
    {
        "id": 426,
        "Question": "Which option is used with the head command to specify line count to display?",
        "Options": [
            "a) -a",
            "b) -h",
            "c) -n",
            "d) -o"
        ],
        "Answer": "Answer: b\nExplanation: The head command is used for displaying the top of the file. As the name suggests, it displays the beginning of the file which is specified as an argument to the command. For example,\n\n\n$ head emp.lst\n\n\n"
    },
    {
        "id": 427,
        "Question": "___ command is used for displaying the end of the file.",
        "Options": [
            "a) head",
            "b) tail",
            "c) lp",
            "d) pr"
        ],
        "Answer": "Answer: b\nExplanation: The head command, as the name suggests displays the top of the file. When this command is used without any option, it displays the first ten lines of the file. "
    },
    {
        "id": 428,
        "Question": "Which symbol is used with the tail command to print the file from the selected line?",
        "Options": [
            "a) +",
            "b) –",
            "c) %%",
            "d) ^"
        ],
        "Answer": "Answer: c\nExplanation: We can use the -n option with the head command to specify a line count and display a specific number of lines of the file. -n option is followed by an integer value which donates the number of lines to be displayed. For example,\n\n\n$ head -n  3 emp.lst            // displays first 3 lines of emp.lst\n\n\n "
    },
    {
        "id": 429,
        "Question": "Which of the following command is incorrect?",
        "Options": [
            "a) pr dept.lst",
            "b) head -n 5 emp.lst",
            "c) tail -o  +5 emp.lst",
            "d) tail -3 emp.lst"
        ],
        "Answer": "Answer: b\nExplanation: Complementing the head command, the tail command is used to display the end of the file. It provides an additional feature of addressing lines. By default, it displays the last ten lines of the file.  "
    },
    {
        "id": 430,
        "Question": "Which option is used with the tail command for extracting bytes instead of lines?",
        "Options": [
            "a) -f",
            "b) -n",
            "c) -c",
            "d) -a"
        ],
        "Answer": "Answer: c\nExplanation: tail command supports the -c option followed by a positive integer or just an integer depending on whether the extraction is performed relative to the beginning or end of the file. For example,\n\n\n\t\n\n$ tail -c   511 foo   // extracts last 511 bytes from foo\n$ tail -c  +512 foo   // extracts everything after skipping the first 511 bytes\n\n\n"
    },
    {
        "id": 431,
        "Question": "To extract specific columns from a file, ____ command is used.",
        "Options": [
            "a) tail",
            "b) head",
            "c) pr",
            "d) cut"
        ],
        "Answer": "Answer: d\nExplanation: To extract specific columns from a file, we can use cut command followed by -c option and list of column numbers, delimited by a comma. For example,\n\n\n\t\n\n        \n\n$ cut  -c  6-22,24-32  emp.lst\n\n\n"
    },
    {
        "id": 432,
        "Question": "3.The expression  cut -c -3 emp.lst will cut columns number _____",
        "Options": [
            "a) 3",
            "b) 1",
            "c) 1-3",
            "d) 0"
        ],
        "Answer": "Answer: c\nExplanation: cut command is used for cutting specific columns. Cut command uses a special feature for selecting a column from the beginning and up to end of a line. For example,\n\n\n        \n\n$ cut -c -3 emp.lst            // extracts column 1-3\n$ cut -c  10-  emp.lst        // extracts from column number 10 to end of line\n\n\n"
    },
    {
        "id": 433,
        "Question": "____ option is used with the cut command for cutting fields.",
        "Options": [
            "a) -c",
            "b) -n",
            "c) -f",
            "d) -a"
        ],
        "Answer": "Answer: c\nExplanation: Sometimes we need to extract specific fields from a file instead of columns. For this purpose, -f option is used with cut command followed by an integer number representing the field. For example,\n\n\n\t\n\n$ cut  -f   2,3  emp.lst        // cut field number 2 and 3 from emp.lst\n\n\n"
    },
    {
        "id": 434,
        "Question": "What is the default delimiter used by the cut command for cutting fields?",
        "Options": [
            "a) space",
            "b) tab",
            "c) double tab",
            "d) underscore"
        ],
        "Answer": "Answer: b\nExplanation: To extract useful data from a file, we use the cut command to cut fields rather than columns. The cut command uses tab as the default delimiter to cut fields. "
    },
    {
        "id": 435,
        "Question": "Which option is used with the cut command for cutting field base on the value of our specified delimiter?",
        "Options": [
            "a) -a",
            "b) -f",
            "c) -d",
            "d) -e"
        ],
        "Answer": "Answer: c\nExplanation: By default, the cut command uses tab as the default delimiter but we can specify our own delimiter using -d option. For example,\n\n\n$ cut  -d “ “ -f 1  emp.lst        // space is the delimiter\nRoot\nKumar\nSharma\nProject\n\n\n"
    },
    {
        "id": 436,
        "Question": "Which one of the following commands is incorrect?",
        "Options": [
            "a) $ cut -d “|”  -f  1,4  emp.lst",
            "b) $ cut -c -3 emp.lst",
            "c) $ tail -c 511 foo",
            "d) $ tail -c foo"
        ],
        "Answer": "Answer: a\nExplanation: Before using cut command, we have to keep in mind that it is necessary to specify that whether we want to cut fields or columns. This can be specified using -f and -c option respectively."
    },
    {
        "id": 437,
        "Question": "Which command is used for pasting files?",
        "Options": [
            "a) cut",
            "b) paste",
            "c) tail",
            "d) head"
        ],
        "Answer": "Answer: b\nExplanation: Since cut uses the tab as the default field delimiter but we can also work with a different delimiter. Above command uses | (pipe) as the delimiter but we have to escape | in “ ” to prevent the shell from interpreting it as a pipeline character."
    },
    {
        "id": 438,
        "Question": "_____ option is used with paste command if we want to specify our own delimiter.",
        "Options": [
            "a) -d",
            "b) -c",
            "c) -a",
            "d) -e"
        ],
        "Answer": "Answer: d\nExplanation: tail(1) command is used for extracting bytes instead of lines while cut(1) command is used for extracting columns and fields. But if we are using tail(1) command, we have to specify an integer value after the -c option, otherwise, the command will fail."
    },
    {
        "id": 439,
        "Question": "Which option is used with paste command for joining lines?",
        "Options": [
            "a) -s",
            "b) -c",
            "c) -a",
            "d) -e"
        ],
        "Answer": "Answer: b\nExplanation: Whatever we’ve cut using cut command can be pasted back using paste command. This command is useful when we want to view files side by side by pasting them together. For example,\n\n\n$ paste file01  file02            // contents of both files will be pasted together\nAbd    01    98%\nMash    03    76%\nRyan    10    65%\n\n\n"
    },
    {
        "id": 440,
        "Question": "____ command is used for sorting a file on specified fields.",
        "Options": [
            "a) cut",
            "b) sort",
            "c) pr",
            "d) tail"
        ],
        "Answer": "Answer: b\nExplanation: Sorting is the ordering of data in ascending or descending order. The sort command is used for ordering a file. Like cut command, sort also identifies fields and perform sorting on specified fields. To sort any file, just provide the name of the file as an argument with sort command.\n\n\n\t\n\n$ sort emp.lst\n\n\n"
    },
    {
        "id": 441,
        "Question": "Sort command uses ____ as default field delimiter.",
        "Options": [
            "a) tab",
            "b) single space",
            "c) double tab",
            "d) one or more continuous spaces"
        ],
        "Answer": "Answer: a\nExplanation: By default, sort reorders lines in ASCII collating sequence i.e. whitespaces first, then numerals, uppercase letters and at last lowercase letters. But we can change this default sorting sequence using a certain sequence."
    },
    {
        "id": 442,
        "Question": "Which option is used with sort command to specify the field delimiter?",
        "Options": [
            "a) -a",
            "b) -t",
            "c) -k",
            "d) -n"
        ],
        "Answer": "Answer: d\nExplanation: Unlike cut and paste command which uses tab as the default field delimiter, sort command uses one or more contiguous spaces as the default field separator. "
    },
    {
        "id": 443,
        "Question": "Which option is used for sorting a file according to primary key?",
        "Options": [
            "a) -t",
            "b) -k",
            "c) -n",
            "d) -n"
        ],
        "Answer": "Answer: b\nExplanation: sort command uses one or more contiguous spaces as the default field separator but we can specify our own field delimiter using the option -t. For example, to perform sorting using | as the delimiter, use the following command:\n\n\n        \n\n$ sort -t “|” file01\n1243|Abd    |01 |98%\n2345|Ryan |03 |76%\n2390|Mash  |10 |65%\n\n\n "
    },
    {
        "id": 444,
        "Question": "The sort order can be reversed using ___ option.",
        "Options": [
            "a) -t",
            "b) -k",
            "c) -r",
            "d) -n"
        ],
        "Answer": "Answer: b\nExplanation: sort command provides an option for sorting file according to our specified field. For this purpose, we have to use -k along with the field number (based on which we want to perform sorting). For example, to perform sorting on second field (name):\n\n\n$ sort -t “|” -k 2  file01\n1243|Abd    |01 |98%\n2345|Mash |10 |65%\n2390|Ryan  |03 |76%\n\n\n"
    },
    {
        "id": 445,
        "Question": "Which option is used when we’ve to sort files containing only numbers?",
        "Options": [
            "a) -n",
            "b) -a",
            "c) -d",
            "d) -u"
        ],
        "Answer": "Answer: c\nExplanation: The sort order can be reversed using -r option. For example, the following sequence reverse the order,\n\n\n\t\n\n$ sort -t “|” -k 2r  file01\n2390|Ryan  |03 |76%\n2345|Mash |10 |65% \n1243|Abd    |01 |98%\n\n\n"
    },
    {
        "id": 446,
        "Question": "_____ option is used with sort command for removing repeated lines.",
        "Options": [
            "a) -n",
            "b) -u",
            "c) -t",
            "d) -a"
        ],
        "Answer": "Answer: a\nExplanation: We can sort on more than one fields i.e. we can provide a secondary key to sort. For example, if the primary key is the third field and the secondary key is the second field, then we have to specify for every -k option, where the sort ends. This is done in the following manner:\n\n\n$ sort -t “|” -k 3,3  -k 2,2   shortlist\n\n\nThis command will sort the file according to the second and third field. 3,3 indicates that sorting starts and end on the third field. "
    },
    {
        "id": 447,
        "Question": "Which option is used by the sort command to redirect the output to a specified file?",
        "Options": [
            "a) -n",
            "b) -t",
            "c) -o",
            "d) -u"
        ],
        "Answer": "Answer: b\nExplanation: We can also specify a character position within a field to the beginning of sort. For example, if we have to sort salary field then we can specify in the form -k m,n where n is the character position in mth field.\n\n\n$ sort -t “|”  -k  6.1,6.2 shortlist        // sort according to the first two digits of salary.\n\n\n// here salary is the 6th field. "
    },
    {
        "id": 448,
        "Question": "To check whether the file has actually been stored in the default order, we can use ____ option.",
        "Options": [
            "a) -n",
            "b) -a",
            "c) -d",
            "d) -c"
        ],
        "Answer": "Answer: a\nExplanation: When sort command acts on a numeral, strange things can happen if a file contains only numerals. So we have to use the -n option with sort command. For example,\n\n\n$ sort  numfile                // without using -n\n10\n2\n27\n4\n$ sort  -n numfile            // using -n\n2\n4\n10\n27\n\n\n"
    },
    {
        "id": 449,
        "Question": "Which option is used with sort command to sort multiple files collectively?",
        "Options": [
            "a) -m",
            "b) -n",
            "c) -c",
            "d) -o"
        ],
        "Answer": "Answer: b\nExplanation: sort provides an option i.e. -u (unique) which lets us remove repeated lines from a file. We can use this option with sort command to find unique occurrences in the file. For example,\n\n\n$ cut -d “|” -f3 emp.lst | sort  -u | tee design.lst\nAbove command will cut out the designation field from emp.lst, after that the output will be piped to sort command to find out the unique designations in the file. The output produced will be like:\nChairman\nd.g.m\ndirector\nexecutive\ng.m. \nmanager\n\n\n "
    },
    {
        "id": 450,
        "Question": "Which command is used for locating repeated and non-repeated lines?",
        "Options": [
            "a) sort",
            "b) uniq",
            "c) cut",
            "d) paste"
        ],
        "Answer": "Answer: b\nExplanation:  When we concatenate or merge files, we can encounter the problem of duplicate entries creeping in. UNIX offers a special command (uniq) which can be used to handle these duplicate entries. We can also use the sort -u command for doing the same piece of work."
    },
    {
        "id": 451,
        "Question": "Which option is used with uniq command for selecting non-repeated lines?",
        "Options": [
            "a) -i",
            "b) -c",
            "c) -u",
            "d) -a"
        ],
        "Answer": "Answer: a\nExplanation: uniq command is used for locating repeated and non-repeated entries. But the most important requirement for using uniq command is, the file should be sorted. For example,\n\n\n$ sort dept.lst |  uniq  -  uniqlist        // output in uniqlist\n\n\n"
    },
    {
        "id": 452,
        "Question": "Which option is used for selecting repeated entries?",
        "Options": [
            "a) -d",
            "b) -c",
            "c) -u",
            "d) -a"
        ],
        "Answer": "Answer: c\nExplanation: To select unique lines, we can use the sort -u command. But uniq also offers an option (-u)  which is used for selecting non-repeating entries in a field. For example,\n\n\n\t\n\n        \n\n$ cut  -d  “|” -f3 emp.lst | sort  |uniq -u   \n // cut 3rd field from emp.lst, sort it and find unique entries\n\n\n"
    },
    {
        "id": 453,
        "Question": "______ option is used for counting frequency of occurrence.",
        "Options": [
            "a) -d",
            "b) -c",
            "c) -u",
            "d) -a"
        ],
        "Answer": "Answer: a\nExplanation: The -d option when used with uniq command lets us select only one copy of duplicate entries. For example,\n\n\n        \n\n$ cut  -d  “|” -f3 emp.lst | sort  |uniq -d\nd.g.m                    // only single copy of all duplicate entries\ndirector\nexecutive\ng.m. \nmanager\n\n\n"
    },
    {
        "id": 454,
        "Question": "6. The output of the following command will be:<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">$ uniq  foo1 foo2</pre></div></div></div></div></div></div>",
        "Options": [
            "a) erroneous",
            "b) output stored in foo2",
            "c) concatenates both files",
            "d) process foo1 and output is stored in foo2"
        ],
        "Answer": "Answer: b\nExplanation: We can use the -c option with uniq command to count the frequency of occurrence of all lines along with the lines. For example,\n\n\n\t\n\n$ cut  -d  “|” -f3 emp.lst | sort  |uniq -c\n1 d.g.m                    \n2 director\n4 executive\n4 g.m. \n2 manager\n\n\n "
    },
    {
        "id": 455,
        "Question": "Which command is used for translating characters?",
        "Options": [
            "a) sort",
            "b) trans",
            "c) tr",
            "d) paste"
        ],
        "Answer": "Answer: d\nExplanation: Like sort command, uniq command also accepts the output filename as an argument, but without using -o option. If we use the above command, it will simply process fo1 and overwrites foo2 with its output. "
    },
    {
        "id": 456,
        "Question": "To replace | with ~, which one of the following commands will be used?",
        "Options": [
            "a) tr ‘|\\’  ‘~-‘",
            "b) tr ‘|\\’  ‘~-‘ > emp.lst",
            "c) tr |  ~ emp.lst",
            "d) !"
        ],
        "Answer": "Answer: c\nExplanation: The translate (tr) filter is used for manipulating individual characters in a line. Usually, tr command translates characters using one or two compact expressions. The syntax for using tr command is,\n\n\n$ tr  options  expression1  expression2  standard input\n\n\n "
    },
    {
        "id": 457,
        "Question": "Which option is used with tr command for deleting characters?",
        "Options": [
            "a) -d",
            "b) -c",
            "c) -n",
            "d) -a"
        ],
        "Answer": "Answer: b\nExplanation: The translate (tr) filter is used for manipulating individual characters in a line. It replaces the first character in the first expression with the first character in the second expression. "
    },
    {
        "id": 458,
        "Question": "______ option is used for compressing multiple consecutive characters.",
        "Options": [
            "a) -d",
            "b) -c",
            "c) -n",
            "d) -s"
        ],
        "Answer": "Answer: a\nExplanation: Since we know that tr command doesn’t accept the filename as an argument, the input has to be redirected from a file or a pipe. Above command will change the case of first three lines of emp.lst from lowercase to uppercase. "
    },
    {
        "id": 459,
        "Question": "Which one of the following command is used for searching for a pattern in one or more file(s)?",
        "Options": [
            "a) cd",
            "b) cp",
            "c) paste",
            "d) grep"
        ],
        "Answer": "Answer: d\nExplanation: UNIX has a special family of commands for handling search requirements, and the principal member of this family is the grep command. This command scans its input for a pattern and displays the lines containing the pattern, the line numbers or filenames containing the pattern."
    },
    {
        "id": 460,
        "Question": "Which one of the following is the correct syntax for grep command?",
        "Options": [
            "a) grep options filename(s)",
            "b) grep options pattern",
            "c) grep pattern filename",
            "d) grep options pattern filename(s)"
        ],
        "Answer": "Answer: d\nExplanation: grep command is used to search a file for a pattern and display both matching and non-matching lines. The syntax for using grep command is:\n\n\ngrep  options  pattern  filename(s)\n\n\n "
    },
    {
        "id": 461,
        "Question": "Which one of the following command will be used for searching “director” in emp.lst?",
        "Options": [
            "a) grep  “director”",
            "b) grep -v “director”  emp.lst",
            "c) grep  -director emp.lst",
            "d) grep  “director” emp.lst"
        ],
        "Answer": "Answer: d\nExplanation: Because grep command is also a filter, it can search it’s standard input for the pattern. For example, the command grep  “director” emp.lst will search the file emp.lst for the pattern “director” and will display the lines containing this pattern."
    },
    {
        "id": 462,
        "Question": "If there are special characters in a pattern, then we’ve to enclose them in ______",
        "Options": [
            "a) single quotes",
            "b) double quotes",
            "c) without any quotes",
            "d) all quotes"
        ],
        "Answer": "Answer: a\nExplanation: grep command is also used as a filter for searching a pattern in a file. When the pattern is not found in the file, this command silently returns the prompt without displaying any diagnostic messages. For example,\n\n\n$ grep “executive” emp.lst    \n$ _                        // executive not found\n\n\n "
    },
    {
        "id": 463,
        "Question": "Which option is used with grep command for ignoring the case in pattern searching?",
        "Options": [
            "a) -a",
            "b) -v",
            "c) -i",
            "d) -e"
        ],
        "Answer": "Answer: a\nExplanation: When we use grep command with multiple filenames, it displays the filename along with the output. For example, when we search “director” in emp1.lst  emp2.lst then the following result will be displayed,\n\n\n\t\n\n$ grep  “director” emp1.lst  emp2.lst\nemp1.lst:1006| chanchal singhal | director | sales | 03/09/98 | 6700\nemp2.lst:6521| lalit chaudhary | director | marketing | 04/05/87 | 8200\nemp1.lst:4358 | barun sengupta | director | production | 09/09/78 | 7600\n\n\n "
    },
    {
        "id": 464,
        "Question": "Which option is used with grep command for deleting lines?",
        "Options": [
            "a) -v",
            "b) -e",
            "c) -a",
            "d) -i"
        ],
        "Answer": "Answer: b\nExplanation: We’ve to quote the pattern in double quotes when it contains multiple words or special characters else they will be interpreted in some other way by the shell. If the pattern doesn’t contain multiple words, then there is no need for quoting the patter in any quotes. If the pattern contains only multiple words, then we can quote the pattern in single quotes also. "
    },
    {
        "id": 465,
        "Question": "Which option is used for displaying the line numbers containing the pattern along with lines?",
        "Options": [
            "a) -v",
            "b) -i",
            "c) -e",
            "d) -n"
        ],
        "Answer": "Answer: c\nExplanation: When we want to search a pattern using grep command and we want to ignore the case or we are not sure of the case, we’ve to use the -i option. This option ignores the case the pattern matching.\n\n\n$ grep  -i  ‘agarwal’  emp.lst\n3564| sudhir Agarwal | executive |personal | 06/07/47 |7500\n\n\n"
    },
    {
        "id": 466,
        "Question": "______ option counts the number of lines containing the pattern?",
        "Options": [
            "a) -c",
            "b) -i",
            "c) -e",
            "d) -n"
        ],
        "Answer": "Answer: a\nExplanation: grep can play an inverse role;  the -v (inverse) option selects all lines except those containing the pattern. For example, the following command. "
    },
    {
        "id": 467,
        "Question": "Which option displays only the filename containing the pattern?",
        "Options": [
            "a) -i",
            "b) -n",
            "c) -e",
            "d) -l"
        ],
        "Answer": "Answer: d\nExplanation: The -n (number) option displays the line numbers containing the pattern, along with the lines. For example,\n\n\n$ grep  ‘director’ emp1.lst \n3:1006| chanchal singhal | director | sales | 03/09/98 | 6700\n5:6521| lalit chaudhary | director | marketing | 04/05/87 | 8200\n9:4358 | barun sengupta | director | production | 09/09/78 | 7600\n\n\n "
    },
    {
        "id": 468,
        "Question": "_____ option is used when we need to match multiple patterns in a single invocation of grep command?",
        "Options": [
            "a) -a",
            "b) -e",
            "c) -n",
            "d) -i"
        ],
        "Answer": "Answer: a\nExplanation: The -c option when used with grep command, counts the number of lines containing the pattern (which is not same as the number of occurrences of the pattern). For example,\n\n\n$ grep  -c  ‘director’  emp.lst\n4                // 4 lines contain the pattern ‘director’\n\n\n"
    },
    {
        "id": 469,
        "Question": "POSIX identifies regular expressions as belonging to ____ categories.",
        "Options": [
            "a) 3",
            "b) 2",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: The -l (list) option displays only the names of files containing the pattern. For example, the following command will display the filenames having an extension .lst and containing the pattern ‘director’:\n\n\n$ grep  -l  ‘director’ *.lst\nDesign.lst\nEmp.lst\nEmp1.lst\n\n\n "
    },
    {
        "id": 470,
        "Question": "Which of the following is not a subset of BRE (basic regular expression) character subset?",
        "Options": [
            "a) *",
            "b) .*",
            "c) ^$",
            "d) ch+"
        ],
        "Answer": "Answer: d\nExplanation: The basic regular expression character subset doesn’t contain ch+, as it is a part of the extended regular expression.\n\n\n\t\n\nSymbols    Matches\n*          - matches zero or more occurrences of the previous character.\n.*         - nothing or any number of characters\n^$         - lines containing nothing\n\n\n"
    },
    {
        "id": 471,
        "Question": "Character class is used for matching a group of characters enclosed within a pair of _____",
        "Options": [
            "a) ( )",
            "b) “ “",
            "c) [ ]           ",
            "d) { }"
        ],
        "Answer": "Answer: c\nExplanation: A regular expression lets us specify a group of characters enclosed within a pair of rectangular brackets, [ ]. For example, [ra] matches either r or a. "
    },
    {
        "id": 472,
        "Question": " Which of the following symbol is used for matching the immediately preceding character?",
        "Options": [
            "a) *",
            "b) $",
            "c) [ ]          ",
            "d) %"
        ],
        "Answer": "Answer: a\nExplanation: The metacharacters [ and ] are used here to match all three agarwals. The character class [aA] matches the letter ‘a’ in both lowercase and uppercase. The model [ar][ar] matches any of the ‘aa’, ‘ar’,’ra’,’rr’. "
    },
    {
        "id": 473,
        "Question": "Which symbol is used for matching a single character?",
        "Options": [
            "a) *",
            "b) .",
            "c) &",
            "d) %"
        ],
        "Answer": "Answer: a\nExplanation: The asterisk (*) refers to the immediately preceding character. It can match the previous character which can occur any number of times or not at all. For example, g* can match a null string along with g, gg, ggg, gggg and so on."
    },
    {
        "id": 474,
        "Question": "Which of the following symbols are used for matching a pattern at specified locations?",
        "Options": [
            "a) *",
            "b) ^",
            "c) $",
            "d) ^ and $"
        ],
        "Answer": "Answer: b\nExplanation: A (.) matches a single character. The shell uses ? character to indicate that. The pattern g . . . will match a four character string beginning a ‘g’. The shell’s equivalent pattern is g???"
    },
    {
        "id": 475,
        "Question": "Which of the following symbols are a set of  ERE (extended regular expressions)?",
        "Options": [
            "a) +",
            "b) –",
            "c) ?",
            "d) + and –"
        ],
        "Answer": "Answer: d\nExplanation: Most of the regular expression character are used for matching patterns, but there are two symbols that are used for matching pattern at beginning or end of a line. These symbols are ^ and $.\n\n\n\t\n\n^     - for matching at the beginning of a line\n$     - for matching at the end of line\n\n\n"
    },
    {
        "id": 476,
        "Question": "Which option is used when we want to use an ERE with grep command?",
        "Options": [
            "a) -e",
            "b) -i",
            "c) -E",
            "d) -i"
        ],
        "Answer": "Answer: a\nExplanation: The ^ is used for matching at the beginning of the line. So the above command will match the following lines:\n\n\n2200| chanchal singhal | director | sales | 03/09/98 | 6700\n2456| lalit chaudhary | director | marketing | 04/05/87 | 8200\n2000 | barun sengupta | director | production | 09/09/78 | 7600\n\n\n"
    },
    {
        "id": 477,
        "Question": "Which of the following symbols are used for matching multiple patterns?",
        "Options": [
            "a) |",
            "b) &",
            "c) ( and )",
            "d)  | and ( and )"
        ],
        "Answer": "Answer: d\nExplanation: The ERE set includes two special characters, + and ? which are used in place of * to restrict the matching scope. They signify the following,\n\n\n+     - matches one or more occurrences of the previous character\n?    - matches zero or one occurrence of the previous character\n\n\n"
    },
    {
        "id": 478,
        "Question": "Which of the following commands is known as stream editor?",
        "Options": [
            "a) sed",
            "b) grep",
            "c) grep",
            "d) tr"
        ],
        "Answer": "Answer: a\nExplanation: sed is a multipurpose tool which performs the function of several filters together. This filter is derived from the ed (original UNIX editor). It performs non-interactive operations on a data stream.  It uses instructions to act on a text for selecting lines, with an action to be taken."
    },
    {
        "id": 479,
        "Question": "What is the correct syntax for using sed?",
        "Options": [
            "a) sed options file(s)",
            "b) sed options ‘action’",
            "c) sed options ‘address action’ file(s)",
            "d) sed ‘action’ file(s)"
        ],
        "Answer": "Answer: c\nExplanation: sed is a multipurpose tool which performs the function of several filters together. It can even manipulate characters in the file. The syntax for using this tool is:\nsed options ‘address action’ file(s) "
    },
    {
        "id": 480,
        "Question": "Which one of the following command will be used for quitting after selecting 3 lines from file emp.lst?",
        "Options": [
            "a) sed -n 3 emp.lst",
            "b) sed -i 1-3 emp.lst",
            "c) sed ‘3q’ emp.lst",
            "d) sed -n"
        ],
        "Answer": "Answer: c\nExplanation: We can use line addressing feature of sed command by using ‘q’ along with the line number. For example, 3q will quit after selecting 3 lines from the file. Here ‘q’ is used for quitting. "
    },
    {
        "id": 481,
        "Question": "Which of the following command is used with sed for outputting as well as printing the selected lines?",
        "Options": [
            "a) q",
            "b) n",
            "c) p",
            "d) i"
        ],
        "Answer": "Answer: c\nExplanation: Generally, ‘p’ is used for printing lines. However, this command behaves in a strange manner i.e. it both displays and prints the selected lines.  So the selected lines will appear twice. "
    },
    {
        "id": 482,
        "Question": "To suppress the behavior of ‘p’ command of sed, we use ____ option.",
        "Options": [
            "a) -q",
            "b) -n",
            "c) -i",
            "d) -v"
        ],
        "Answer": "Answer: b\nExplanation: When we use ‘p’, it behaves in a strange manner i.e. it both displays and prints the selected lines.  So the selected lines will appear twice. To suppress this behavior, we use the -n option whenever we use the p command. For example,\n\n\n        \n\n//selects line number 1-3 from emp.lst\n$ sed -n ‘1,3p’  emp.lst\n\n\n "
    },
    {
        "id": 483,
        "Question": "Which option is used with sed for using multiple instructions?",
        "Options": [
            "a) -f",
            "b) -n",
            "c) -e",
            "d) –f and -e"
        ],
        "Answer": "Answer: a\nExplanation: If we want to select the last line of the file, we can either provide the line number of the file or it is more convenient to use $ symbol. "
    },
    {
        "id": 484,
        "Question": "____ option is used for taking instructions from a file.",
        "Options": [
            "a) -f",
            "b) -e",
            "c) -i",
            "d) -n"
        ],
        "Answer": "Answer: a\nExplanation: We can also use the negate (!) symbol, which can be used for negating any action. For instance, selecting the first two lines is same as not selecting lines 3 through the end. "
    },
    {
        "id": 485,
        "Question": "To perform context addressing, we have to enclose the pattern in ____",
        "Options": [
            "a) double quotes",
            "b) single quotes",
            "c) /  /",
            "d) $  $"
        ],
        "Answer": "Answer: d\nExplanation: Both -e and -f allows us to use multiple instructions with sed. For example, -e allows us to enter as many instructions as we want, each preceded by the option.\n\n\n$ sed -n -e ‘1,2p’  -e ‘7,9p’ emp.lst\n\n\n "
    },
    {
        "id": 486,
        "Question": "To select lines containing gupta and agarwal, which command will be used?",
        "Options": [
            "a) sed -n ‘/gupta/,/agarwal/p’  emp.lst",
            "b) sed -n ‘/gupta/agarwal/p’  emp.lst",
            "c) sed ‘/gupta | agarwal’p’ emp.lst",
            "d) sed -n"
        ],
        "Answer": "Answer: a\nExplanation: sed command is quite liberal and it provides a great freedom in using and repeating options. We can use the -f option to direct sed to take its instructions from the file.\n\n\n$ sed -n -f  instruct.txt  emp.lst\n\n\n "
    },
    {
        "id": 487,
        "Question": " To write selected lines, ____ is used with sed.",
        "Options": [
            "a) i",
            "b) n",
            "c) w",
            "d) p"
        ],
        "Answer": "Answer: c\nExplanation: The second form of addressing apart from relative addressing is context addressing. It allows us to specify one or two patterns to locate lines. The pattern must be bounded by a / on either side. "
    },
    {
        "id": 488,
        "Question": "Which one of the following is the correct syntax for performing substitution using sed?",
        "Options": [
            "a) sed [address]s  /expr1/ expr2",
            "b) sed [address]s  /expr1 expr2",
            "c) sed [address]s  /expr1/ expr2/ flags",
            "d) sed [address]s"
        ],
        "Answer": "Answer: a\nExplanation: Substitution is one of the most important features of sed as it allows us to replace a pattern in its input with some other pattern. For this purpose, regular expressions are used for enhancing pattern matching capabilities."
    },
    {
        "id": 489,
        "Question": "Which one of the following command is used for replacing | with : globally?",
        "Options": [
            "a) sed  ‘s/|/:/’ emp.lst",
            "b) sed ‘/|/:/’ emp.lst",
            "c) sed  ‘s/|/:/g’ emp.lst",
            "d) sed ‘s/"
        ],
        "Answer": "Answer: c\nExplanation: Substitution is one of the most important features of sed as it allows us to replace a pattern in its input with some other pattern. The correct syntax for performing substitution is :\n\n\nsed [address]s  /expr1/ expr2/ flags\n\n\nwhere address represents the line numbers where we want to perform the substitution.\nexpr 1 and expr2 are expressions in which expr1 is replaced with expr2\nflags are used for implementing the global or local replacement policy "
    },
    {
        "id": 490,
        "Question": "To replace the string ‘director’ in the first five lines of file emp.lst with ‘manager’ we can use _____",
        "Options": [
            "a) sed  ‘s/director/manager/’ emp.lst",
            "b) sed ‘1-5s/director/manager/’ emp.lst",
            "c) sed ‘1,5s/director/manager/’ emp.lst",
            "d) sed ‘15s"
        ],
        "Answer": "Answer: c\nExplanation: sed can perform substitution i.e. it allows us to replace a pattern in its input with some other pattern. The flag g is used for performing substitution globally. "
    },
    {
        "id": 491,
        "Question": "Which of the following characters are used with sed as anchoring characters?",
        "Options": [
            "a) $",
            "b) ^",
            "c) %",
            "d) $ and ^"
        ],
        "Answer": "Answer: c\nExplanation: Performing substitution using sed is not only limited to a single character; it can be any string. Above command will replace the string ‘director’ with ‘manager’ in the first five lines of file emp.lst. "
    },
    {
        "id": 492,
        "Question": "Basic regular expressions are divided into ______ categories.",
        "Options": [
            "a) 1",
            "b) 3",
            "c) 2",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: We can use the anchoring characters, ^ and & with the same meaning. They are used as sole characters in the source pattern to replace the target pattern at that location. For example,\n\n\n\t\n\n$ sed ‘s/^/2/’  emp.lst          //add first character with a prefix ‘2’\n$ sed ‘s/$/.00/’ emp.lst        // add the last character with a suffix ‘.00’\n\n\n "
    },
    {
        "id": 493,
        "Question": "The interval regular expression uses the character _______",
        "Options": [
            "a) {",
            "b) }",
            "c) { and }",
            "d) ( and )"
        ],
        "Answer": "Answer: c\nExplanation: We can delete the trailing spaces from a file using sed. For this purpose the metacharacter (*) is used."
    },
    {
        "id": 494,
        "Question": "Which one of the following command will be used for adding two spaces before every line in emp.lst?",
        "Options": [
            "a) sed ‘s/^/    /’ emp.lst",
            "b) sed ‘s / /    /’emp.lst",
            "c) sed ‘s /$/   /’emp.lst",
            "d) sed ‘s/$/"
        ],
        "Answer": "Answer: b\nExplanation: Basic regular expressions are divided into three categories namely –repeated pattern, Interval regular expressions and tagged regular expressions. "
    },
    {
        "id": 495,
        "Question": "Which shortcut does sed offer to replace the string Linux with Red hat Linux?",
        "Options": [
            "a) { }",
            "b) ( )",
            "c) ^^",
            "d) &"
        ],
        "Answer": "Answer: c\nExplanation: Interval regular expression uses { and } with a single or pair of numbers between them. For example,\n\n\n$ grep  ‘[0-9]\\{10\\}’  emp.lst\n\n\nAbove command selects only those users who have a mobile phone. Here we used IRE to indicate that a numeral can occur 10 times (as phone numbers are of 10 digits)."
    },
    {
        "id": 496,
        "Question": "Which command will be used for selecting lines 3 to 10 from emp.lst?",
        "Options": [
            "a) sed 3,10  emp.lst",
            "b) sed -n ‘3,10p’ emp.lst",
            "c) sed -n ‘^,10p’ emp.lst",
            "d) sed -n, 10p"
        ],
        "Answer": "Answer: a\nExplanation: The ^ symbol is used for prefixing some value at the beginning of any line in the file. "
    },
    {
        "id": 497,
        "Question": "What is a shell script?",
        "Options": [
            "a) group of commands",
            "b) a file containing special symbols",
            "c) a file containing a series of commands",
            "d) group of functions"
        ],
        "Answer": "Answer: c\nExplanation: When we have to execute a series of commands altogether, we store them in a file which is itself executed as a shell script. A shell script is basically a computer program designed to be run by the UNIX shell."
    },
    {
        "id": 498,
        "Question": "The first line in any shell script begins with a _____",
        "Options": [
            "a) &",
            "b) !",
            "c) $",
            "d) #"
        ],
        "Answer": "Answer: b\nExplanation: It’s not mandatory to save script files with .sh extension but we do so for our own convention as it makes it easy to match them with wildcards."
    },
    {
        "id": 499,
        "Question": "To run the script, we should make it executable first by using _____",
        "Options": [
            "a) chmod +x",
            "b) chmod +r",
            "c) chmod +w",
            "d) chmod +rwx"
        ],
        "Answer": "Answer: a\nExplanation: Shell scripts are executed in a separate child process, and this sub-shell need not be of the same type as our login shell. In other words, even if our login shell is bourne, we can use a Korn sub-shell to run our script."
    },
    {
        "id": 500,
        "Question": "To spawn a child of our own choice for running the script, we can use ___ command.",
        "Options": [
            "a) ps",
            "b) pr",
            "c) sh",
            "d) $$"
        ],
        "Answer": "Answer: d\nExplanation: When the comment character (#) is placed anywhere in a line; the shell ignores all characters on its right. However, this rule doesn’t apply to the first line which is the interpreter line. It always begins with #! and followed by the pathname of the shell to be used for running the script.\n\n\n#!/bin/sh                   // first line defining the pathname\n# script.sh                // name of the script\n\n\n"
    },
    {
        "id": 501,
        "Question": "Which command is used for making the scripts interactive?",
        "Options": [
            "a) ip",
            "b) input",
            "c) read",
            "d) write"
        ],
        "Answer": "Answer: a\nExplanation: Before we run the script, it is essential to make the script executable first. After that invoke the script name to run the script. For making the script executable, we have to use chmod +x script_name."
    },
    {
        "id": 502,
        "Question": "What are positional parameters?",
        "Options": [
            "a) special variables for assigning arguments from the command line",
            "b) pattern matching parameters",
            "c) special variables for reading user input",
            "d) special variables and patterns"
        ],
        "Answer": "Answer: c\nExplanation: We know that shell scripts are executed by a child shell. But we can also explicitly spawn a child of our own choice by using the sh command along with script name as an argument. When used in this way, the interpreter line is ignored by the shell."
    },
    {
        "id": 503,
        "Question": "The first argument is read by the shell into the parameter ___",
        "Options": [
            "a) 1$",
            "b) $3",
            "c) $$",
            "d) $1"
        ],
        "Answer": "Answer: c\nExplanation: read command is used for making scripts interactive. It is used for taking input from the user. Input supplied from the keyboard is entered into the variable used with the read command. For example,\n\n\n#!/bin/sh                \n# emp.sh\necho ”enter your name”\nread Uname                  //read input from the user\necho $Uname                // display input entered by the user\n\n\n "
    },
    {
        "id": 504,
        "Question": "The complete set of positional parameters is stored in ______ as a single string.",
        "Options": [
            "a) $n",
            "b) $#",
            "c) $*",
            "d) $$"
        ],
        "Answer": "Answer: a\nExplanation: read command is the shell’s internal tool for taking input from the user i.e. it makes the scripts interactive."
    },
    {
        "id": 505,
        "Question": "Which of the following is used for storing the number of positional parameters?",
        "Options": [
            "a) $n",
            "b) $#",
            "c) $*",
            "d) $2"
        ],
        "Answer": "Answer: a\nExplanation: A single read statement can be used with one or more variables to let us enter multiple arguments. For example,\nread FirstName  LastName "
    },
    {
        "id": 506,
        "Question": "Which of the following operators are used for logical execution?",
        "Options": [
            "a) ||",
            "b) &&",
            "c) %%",
            "d) && and ||"
        ],
        "Answer": "Answer: d\nExplanation: The operators && and || are used for logical execution i.e. they act as AND, OR condition respectively. The syntax for using these operators is:\n\n\n\t\n\ncommand1 && command2\ncommand1 || command2\n\n\n "
    },
    {
        "id": 507,
        "Question": "The syntax for using && is ______________",
        "Options": [
            "a) cmd1 && cmd2",
            "b) cmd1 cmd2 &&",
            "c) cmd1 & cmd2&",
            "d) cmd1"
        ],
        "Answer": "Answer: a\nExplanation: The shell provides two operators that allow conditional execution, one of which is &&. It delimits two commands; the second command is executed only when the first command succeeds. "
    },
    {
        "id": 508,
        "Question": "To perform decision depending on the fulfillment of certain criteria, ____ is used.",
        "Options": [
            "a) if",
            "b) else",
            "c) for",
            "d) if and else"
        ],
        "Answer": "Answer: b\nExplanation: || is an operator used by the shell for conditional execution. It plays an inverse role in which the second command is executed only when the first fails. "
    },
    {
        "id": 509,
        "Question": " Every if is closed with a corresponding ____",
        "Options": [
            "a) else",
            "b) fi",
            "c) if",
            "d) else if"
        ],
        "Answer": "Answer: a\nExplanation: The shell provides two operators that allow conditional execution –the && and ||. The syntax for using these operators is:\n\n\ncmd1 && cmd2\ncmd1 || cmd2\n\n\n"
    },
    {
        "id": 510,
        "Question": "To check more than two conditions, ___ is used with if-else statements.",
        "Options": [
            "a) while",
            "b) for",
            "c) elif",
            "d) for"
        ],
        "Answer": "Answer: d\nExplanation: The if and else statement makes two-way decisions depending on the fulfillment of certain criteria. These statements are used in UNIX as they are used in other programming languages. For example,\n\n\n\t\n\nIf command is successful\nThen\n    Execute command\nElse\n    Execute command\nFi\n\n\n"
    },
    {
        "id": 511,
        "Question": "The name of the script is stored in which special parameter?",
        "Options": [
            "a) $1",
            "b) $0",
            "c) $#",
            "d) $*"
        ],
        "Answer": "Answer: b\nExplanation: if and else statements are used for making two-way decisions. Every if is closed with the corresponding fi. If we don’t do this we’ll encounter an error. "
    },
    {
        "id": 512,
        "Question": "Which of the following is not a special parameter used by the shell?",
        "Options": [
            "a) $$",
            "b) $*",
            "c) $?",
            "d) $-"
        ],
        "Answer": "Answer: c\nExplanation: if-else statements makes two-way decisions depending on the fulfillment of certain conditions. But if we want to check more than two conditions we can use elif statement. For example,\n\n\nIf command is successful\nThen\n    Execute command\nElif  command is successful\n    Then\n    Execute command\nElse. . .    \nFi\n\n\n"
    },
    {
        "id": 513,
        "Question": "To know the exit status of a command, we can use ____",
        "Options": [
            "a) $$",
            "b) $*",
            "c) $?",
            "d) $-"
        ],
        "Answer": "Answer: b\nExplanation: There are some special parameters used by the shell. One of which is $0 which stores the name of the program."
    },
    {
        "id": 514,
        "Question": "test command can be used to check which of the following?",
        "Options": [
            "a) Compare two numbers",
            "b) Compare two strings",
            "c) Check attributes of a file",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: When we use if to evaluate expressions, we need the test statement because the true or false values returned by expressions can’t be directly handled by if. The test uses certain operators to evaluate the condition on its right and returns either true or false exit status. test works in three ways:\n•    compares two numbers\n•    compare two strings or a single one for a null value\n•    check a file’s attributes "
    },
    {
        "id": 515,
        "Question": "Which of the following operators is used with test for comparison of numeric values?",
        "Options": [
            "a) -eq",
            "b) -ne",
            "c) -gg",
            "d) –eq and -ne"
        ],
        "Answer": "Answer: d\nExplanation: There are some comparison operators which are used by test. For example,\n\n\n-eq    -    equal to\n-ne    -    not equal to\n\n\n "
    },
    {
        "id": 516,
        "Question": "___ implies greater than and ____ implies less than.",
        "Options": [
            "a) gt, le",
            "b) gt, lt",
            "c) ge,le",
            "d) ge,lt"
        ],
        "Answer": "Answer: b\nExplanation: Every numerical comparison operator used by the test begin a hyphen, followed by a two letter string and enclosed by a whitespace on either side. "
    },
    {
        "id": 517,
        "Question": "Which of the following operator is used as a shorthand for test?",
        "Options": [
            "a) % %             ",
            "b) [ ]             ",
            "c) & &",
            "d) ( )"
        ],
        "Answer": "Answer: b\nExplanation: There are some comparison operators which are used by test. For example,\ngt implies greater than, lt implies less than, le implies less than or equal to, ge implies greater than or equal to."
    },
    {
        "id": 518,
        "Question": "Which one of the following option is used for AND operation in test command?",
        "Options": [
            "a) -o",
            "b) -a",
            "c) -e",
            "d) -an"
        ],
        "Answer": "Answer: b\nExplanation: UNIX provides a shorthand for test i.e. [ ]. We can use this pair of rectangular brackets enclosing the expression. Thus the following two are equal,\n\n\n\t\n\ntest $x  -eq  $y\n[ $x  -eq  $y ]\n\n\n "
    },
    {
        "id": 519,
        "Question": "Which one of the following option is used for OR operation in test command?",
        "Options": [
            "a) -o",
            "b) -a",
            "c) -e",
            "d) -an"
        ],
        "Answer": "Answer: a\nExplanation: We must provide whitespaces around the operators (like -eq), their operands (like $x) and inside the [ and ]. "
    },
    {
        "id": 520,
        "Question": "Which one of the following option is used for checking that the string is not null?",
        "Options": [
            "a) -a",
            "b) -o",
            "c) -z",
            "d) -n"
        ],
        "Answer": "Answer: a\nExplanation: test can be used to compare strings with another set of operators (like = for equality of strings and != for inequality). For example, [ ! -z  $string ] negates [ -z  $string ]. "
    },
    {
        "id": 521,
        "Question": "Which one of the following option is used for checking that the string is NULL string?",
        "Options": [
            "a) -a",
            "b) -o",
            "c) -z",
            "d) -n"
        ],
        "Answer": "Answer: c\nExplanation: test can be used to compare strings with another set of operators. -z is used for checking if the string is null. For example,\n\n\n\t\n\nIf [ -z “$fname ] ;\nthen\necho “NULL string”\n\n\n"
    },
    {
        "id": 522,
        "Question": "Which option is used for checking if the file exists or not?",
        "Options": [
            "a) -e",
            "b) -a",
            "c) -n",
            "d) -f"
        ],
        "Answer": "Answer: a\nExplanation: test can also be used to test the various file attributes like its type (ordinary, regular or symbolic link) or its permissions (read, write, execute, etc). "
    },
    {
        "id": 523,
        "Question": "Which of the following option is used for checking if the file is readable or not?",
        "Options": [
            "a) -r",
            "b) -f",
            "c) -n",
            "d) -z"
        ],
        "Answer": "Answer: a\nExplanation: test can also be used to test the various file attributes like its type (ordinary, regular or symbolic link). To check whether the file exists or not, we can use the -e option. For example,\n\n\nIf [ -e $1 ]; then\n     echo “ file exists”\n\n\n"
    },
    {
        "id": 524,
        "Question": "Which of the following option is used for checking if the file is writable or not?",
        "Options": [
            "a) -e",
            "b) -f",
            "c) -n",
            "d) -w"
        ],
        "Answer": "Answer: a\nExplanation: To check if the file exists and is readable we can use -r option. The syntax is -r filename."
    },
    {
        "id": 525,
        "Question": "To check if the file exists and is executable we have to use ___ option with test.",
        "Options": [
            "a) -e",
            "b) -f",
            "c) -x",
            "d) -w"
        ],
        "Answer": "Answer: d\nExplanation: To check if the file exists and is writable we can use -w option. The syntax is -w filename. "
    },
    {
        "id": 526,
        "Question": "____ option is used for checking whether a particular file is older than a specified file.",
        "Options": [
            "a) -ef",
            "b) -old",
            "c) -nt",
            "d) -ot"
        ],
        "Answer": "Answer: c\nExplanation: If we want to check whether the file exists and is executable we have to use the -x option. The syntax is -x filename."
    },
    {
        "id": 527,
        "Question": "____ statement matches an expression for more than one alternative.",
        "Options": [
            "a) for",
            "b) while",
            "c) elif",
            "d) case"
        ],
        "Answer": "Answer: d\nExplanation: The case statement is the second conditional offered by the shell. This statement matches an expression for more than one alternative. case statements are used in menu-driven programs. The syntax of the case statement is:\ncase expression in\n\n\n\t\n\n   pattern1) commands1 ;;\n   pattern2) commands2 ;;\n   . . . . .\nesac\n\n\n "
    },
    {
        "id": 528,
        "Question": "Every pattern in case statement in terminated with a _____",
        "Options": [
            "a) ;",
            "b) :",
            "c) ;;",
            "d) //"
        ],
        "Answer": "Answer: c\nExplanation: case statement matches an expression for more than one alternative. Every pattern in the case statement is terminated with a ;; .\n\n\ncase expression in\n   pattern1) commands1 ;;\n   pattern2) commands2 ;;\n   . . . . .\nesac\n\n\n"
    },
    {
        "id": 529,
        "Question": "The ___ option in case statement matches any option not matched by the previous options.",
        "Options": [
            "a) ^",
            "b) $",
            "c) *",
            "d) //"
        ],
        "Answer": "Answer: a\nExplanation: Alike every if statement is closed with a fi, case statement should also be closed with a corresponding esac. Without it, we’ll encounter an error."
    },
    {
        "id": 530,
        "Question": "Which command is used for computation and string handling?",
        "Options": [
            "a) expr",
            "b) case",
            "c) if",
            "d) read"
        ],
        "Answer": "Answer: c\nExplanation: The last option (*) or the default option is used for matching any option which is not matched by any of the previously specified options. For example,\n\n\n\t\n\ncase “$choice” in\n   1)  ls  -l ;;\n   2)  ps -f ;;\n   3) who\n   *) echo “invalid option” \nesac\n\n\n"
    },
    {
        "id": 531,
        "Question": "expr can perform ____ arithmetic operations.",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 5",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: case statement can also specify the same action for more than one pattern. Suppose, a programmer wants to develop a logic for both Y or y (or N or n), then he/she can make use of the case statement in the following manner:\n\n\n\t\n\necho “do you wish to continue? (y/n) : ”\nread answer\ncase  “$answer” in\n    y|Y) ;;            //NULL statement, no action to be performed \n    n|N) exit ;;\n\n\n "
    },
    {
        "id": 532,
        "Question": "Which of the following is performed by expr string handling’s function?",
        "Options": [
            "a) determine the length of string",
            "b) extract a substring",
            "c) locate the position of a character in a string",
            "d) determine the length of string, extract and locate the position of the string"
        ],
        "Answer": "Answer: a\nExplanation: case statement has superb string matching feature that uses wildcards. It uses the filename matching meta-characters *, ? and the character class for matching strings."
    },
    {
        "id": 533,
        "Question": "Which symbol is used for finding the length of the string?",
        "Options": [
            "a) .",
            "b) *",
            "c) .*",
            "d) .*."
        ],
        "Answer": "Answer: a\nExplanation: The bourne shell can check whether an integer is greater than another or not, but it doesn’t have any computing features at all. It has to rely totally on expr command for that purpose. This command performs two functions:\n•    Performs arithmetic operations on integers\n•    Manipulates strings"
    },
    {
        "id": 534,
        "Question": "Which of the following pattern is used for extracting a substring using expr?",
        "Options": [
            "a) /( )",
            "b) \\(. .\\)",
            "c) . .\\)",
            "d) \\\\("
        ],
        "Answer": "Answer: c\nExplanation: expr command can perform four basic arithmetic operations as well as the modulus function. For example,\n\n\n$ x=5  y=10\n$ expr $x + $y\n$ expr $x - $y\n$ expr $x /* $y        // asterisk has to escaped\n$ expr $y / $x\n$ expr $y % $x\n\n\n   "
    },
    {
        "id": 535,
        "Question": "expr is a _____ command",
        "Options": [
            "a) internal",
            "b) external",
            "c) shell",
            "d) derived"
        ],
        "Answer": "Answer: d\nExplanation: Though expr’s string handling features are not that elegant, bourne shell users hardly have any choice. For evaluating strings expr uses two expressions separated by a colon. "
    },
    {
        "id": 536,
        "Question": "Which of the following commands let us perform a set of instructions repeatedly?",
        "Options": [
            "a) for",
            "b) while",
            "c) until",
            "d) for, while, until"
        ],
        "Answer": "Answer: d\nExplanation: For repeatedly performing a set of instructions, we have to use loops. Shell features three types of loops —while, for and until. All of them repeat the instruction set enclosed by certain keywords."
    },
    {
        "id": 537,
        "Question": "Which of the following keywords are used in while loop?",
        "Options": [
            "a) do",
            "b) done",
            "c) then",
            "d) do and done"
        ],
        "Answer": "Answer: d\nExplanation: while loop repeatedly performs a set of instructions until the control command returns a true exit status. The general syntax for while loop is:\n\n\nwhile  condition is true\ndo\n   commands\ndone\n\n\n "
    },
    {
        "id": 538,
        "Question": "Which one of the following is used for looping with a list?",
        "Options": [
            "a) while",
            "b) until",
            "c) case",
            "d) for"
        ],
        "Answer": "Answer: a\nExplanation: Shell also offers an until statement which operates with a reverse logic used in while. With until the loop body is executed as long as the condition remains false. "
    },
    {
        "id": 539,
        "Question": "Which of the following loop statements uses do and done keyword?",
        "Options": [
            "a) for",
            "b) while",
            "c) case",
            "d)  for and while"
        ],
        "Answer": "Answer: d\nExplanation: The shell’s for loop differs in structure as used in C. for loop doesn’t test a condition but it uses a list instead. The syntax for using for loop is:\n\n\nfor variable in list\ndo\n    commands\ndone\n\n\n"
    },
    {
        "id": 540,
        "Question": "Which command is used for changing filename extensions?",
        "Options": [
            "a) chown",
            "b) rename",
            "c) basename",
            "d) rm"
        ],
        "Answer": "Answer: d\nExplanation: Like while loop, for also uses the keywords do and done, but the additional parameters used in for are variables and list. "
    },
    {
        "id": 541,
        "Question": "Which command is used by the shell for manipulating positional parameters?",
        "Options": [
            "a) set",
            "b) cut",
            "c) case",
            "d) paste"
        ],
        "Answer": "Answer: c\nExplanation: basename command is used for changing the extensions of a group of filenames. It extracts the “base” filename from an absolute filename. For example,\n\n\n\t\n\n$ basename  file01.txt  txt\nfile01            // txt stripped off\n\n\n "
    },
    {
        "id": 542,
        "Question": "____ statement is used for shifting arguments left.",
        "Options": [
            "a) set",
            "b) shift",
            "c) cut",
            "d) paste"
        ],
        "Answer": "Answer: a\nExplanation: set statement is an internal command which assigns its arguments to positional parameters $1, $2 and so on. For example, the following command will assign the value 1345 to $1 and 5678 to $2,\n\n\n$ set 1345  5678\n$ _\n$ echo “\\$1 is $1, \\$2 is $2”\n$1 is 1345, $2 is 5678\n\n\n "
    },
    {
        "id": 543,
        "Question": "Which one of the following is an internal command?",
        "Options": [
            "a) cut",
            "b) expr",
            "c) set",
            "d) Is"
        ],
        "Answer": "Answer: b\nExplanation: shift statement transfers the content of a positional parameter to its immediate lower numbered one. This process continues as many times as shift is invoked. For example, when called once, $2 becomes $1 and $3 becomes $2 and so on.\n\n\n$ echo “[email protected]”\nWed Jan 8 09:48:44 IST 2017\n$ echo $1 $2 $3\nWed Jan 8\n$ shift\n$ echo $1 $2 $3\nJan 8 09:48:44        // parameters shifted\n\n\n "
    },
    {
        "id": 544,
        "Question": "Which symbol is used with the set command for command substitution?",
        "Options": [
            "a) –",
            "b) —",
            "c) ??",
            "d) _"
        ],
        "Answer": "Answer: c\nExplanation: set statement is an internal command which assigns its arguments to positional parameters $1, $2 and so on. While cut, Is and expr are external commands. "
    },
    {
        "id": 545,
        "Question": "The ____ allows us to read data from the same file containing the script.",
        "Options": [
            "a) >>",
            "b) <<",
            "c) !!",
            "d) —"
        ],
        "Answer": "Answer: b\nExplanation: set statement can also be used for command substitution. There can be a problem especially when the output of the command begins with a-.It may happen that set interprets it as an option. To avoid this condition, we have to use — (double hyphen) immediately after set. For example,\n\n\n$ set -- `ls -lfile01`        //first - now taken care of\n\n\n"
    },
    {
        "id": 546,
        "Question": "Which of the following command doesn’t accept a filename as an argument?",
        "Options": [
            "a) cut",
            "b) ls",
            "c) paste",
            "d) mailx"
        ],
        "Answer": "Answer: b\nExplanation: It may happen that the data our program wants to read is fixed and limited. The shell uses << symbol to read data from the same file containing the script. This is referred to as a here document, signifying that the data is here rather than in a separate file. "
    },
    {
        "id": 547,
        "Question": " ____ command is the appropriate way to interrupt a program.",
        "Options": [
            "a) kill",
            "b) SIGKILL",
            "c) INT",
            "d) trap"
        ],
        "Answer": "Answer: a\nExplanation: The shell uses >> symbol to read data from the same file containing the script. This is referred to as a here document. It allows any command (which uses standard input) to take input from it. "
    },
    {
        "id": 548,
        "Question": "Which of the following option is used with a set for debugging shell scripts?",
        "Options": [
            "a) -a",
            "b) -x",
            "c) -d",
            "d) -e"
        ],
        "Answer": "Answer: b\nExplanation: As we know that set command is used for assigning values to positional parameters, it also serves as debugging tool. For this purpose, we’ve to use -x option with it."
    },
    {
        "id": 549,
        "Question": "Suppose x =10, then what will be the value of x$x$?",
        "Options": [
            "a) undefined",
            "b) erroneous",
            "c) 100",
            "d) x10$"
        ],
        "Answer": "Answer: d\nExplanation: Since x contains the value 10, and $ symbol is used with any variable for displaying its value. So $x will display 10. Hence the output will be x10$."
    },
    {
        "id": 550,
        "Question": "A shell script stopped running when we change its name. Why?",
        "Options": [
            "a) location of the file changed",
            "b) we can’t change the name of the script",
            "c) $0 was used in the script",
            "d) many possible reasons"
        ],
        "Answer": "Answer: b\nExplanation: x$x$ will be equal to x10$ and $x$x will be equal to 1010. Hence they are not equal."
    },
    {
        "id": 551,
        "Question": "Where is the exit status of a command stored?",
        "Options": [
            "a) $0",
            "b) $>",
            "c) $1",
            "d) $?"
        ],
        "Answer": "Answer: c\nExplanation: A shell script will stop running when we change its name if we’d used the positional parameter $0 in it as $0 contains the name of the script file."
    },
    {
        "id": 552,
        "Question": "Which of the following is false?",
        "Options": [
            "a) here document provides standard input to any script non interactively",
            "b) read command is used for making scripts interactive",
            "c) $* stores the number of arguments specified",
            "d) && and || are logical operators"
        ],
        "Answer": "Answer: d\nExplanation: The exit status of a command is that particular value which is returned by the command to its parent. This value is stored in $?. "
    },
    {
        "id": 553,
        "Question": "test statement cannot ______",
        "Options": [
            "a) compare two numbers",
            "b) compare two strings",
            "c) compare two files",
            "d) check a file’s attributes"
        ],
        "Answer": "Answer: c\nExplanation: The shell uses << symbol to read data from the same file containing the script. This is referred to as a here document. read command allows us to take input from the user to make the script interactive. && and || are logical operators which allow conditional execution. $* stores the complete set of positional parameters as a single string."
    },
    {
        "id": 554,
        "Question": "____ option is used with a test for checking if the file exists and has the size greater than zero.",
        "Options": [
            "a) -f",
            "b) -r",
            "c) -e",
            "d) -s"
        ],
        "Answer": "Answer: c\nExplanation: test works in three ways:\n•    compare two numbers\n•     compare two strings\n•    check a file’s attributes"
    },
    {
        "id": 555,
        "Question": "The system administrator is also known as _____",
        "Options": [
            "a) master user",
            "b) superuser",
            "c) root user",
            "d) master and super user"
        ],
        "Answer": "Answer: d\nExplanation: The system administrator has access to huge powers. This entrusted person is also known as the root user or superuser."
    },
    {
        "id": 556,
        "Question": "Which of the following functionalities is carried by the root user?",
        "Options": [
            "a) managing disk space",
            "b) performing backup",
            "c) changing attributes of a file",
            "d) managing disk space, performing backup, changing attributes of a file"
        ],
        "Answer": "Answer: d\nExplanation: superuser or the root user has access to vast powers like he/she is responsible for managing the disk space, performing backups, changing attributes of files, maintaining user accounts etc."
    },
    {
        "id": 557,
        "Question": "What is the login name of system administrator?",
        "Options": [
            "a) root",
            "b) su",
            "c) master",
            "d) admin"
        ],
        "Answer": "Answer: a\nExplanation: UNIX provides a special login name for system administrator i.e. root. This account doesn’t need to be created separately but comes with every system. The password for the root user is set at the time of installation. "
    },
    {
        "id": 558,
        "Question": "What is the prompt for system administrator?",
        "Options": [
            "a) $",
            "b) %",
            "c) #",
            "d) &"
        ],
        "Answer": "Answer: c\nExplanation: The prompt of the root user is # whereas the prompt for normal users or non-privileged users is % or $."
    },
    {
        "id": 559,
        "Question": "When we log in as root user we are placed in ____",
        "Options": [
            "a) /bin",
            "b) /root",
            "c) /system",
            "d) /admin"
        ],
        "Answer": "Answer: b\nExplanation: When we log in to the system as root user we are normally placed in the root’s home directory. Depending on the system we are using this directory can be / or /root."
    },
    {
        "id": 560,
        "Question": "Which command is used for acquiring superuser status?",
        "Options": [
            "a) pu",
            "b) su",
            "c) admn",
            "d) super"
        ],
        "Answer": "Answer: a\nExplanation: Since we know that the superuser has to constantly navigate through the file system, it may happen that he/she unintentionally execute the scripts or programs written by other users. That’s why the PATH for a superuser doesn’t include the current directory."
    },
    {
        "id": 561,
        "Question": "Which of the following is used for creating user’s environment?",
        "Options": [
            "a) su",
            "b) su –",
            "c) -su",
            "d) su – –"
        ],
        "Answer": "Answer: b\nExplanation: Any user can acquire the status of superuser by using the su command. The only condition that needs to be fulfilled here is, he/she must be aware of the root password. For example,\n\n\n\t\n\n$ su\nPassword: *****        //root’s password\n#pwd\n/home/abd             //prompt changes ( super user mode)\n\n\n"
    },
    {
        "id": 562,
        "Question": "User’s environment mode created using su – is terminated using ____",
        "Options": [
            "a) ctrl-v",
            "b) ctrl-q",
            "c) ctrl-d",
            "d) ctrl-f"
        ],
        "Answer": "Answer: b\nExplanation: The administrator can create a simulated environment using su – for any user. This command creates the user’s environment without taking the login-password route. For example,\n\n\n\t\n\n$ su - abd\n\n\nAbove command will execute abd’s .profile and creates a temporary abd’s environment. "
    },
    {
        "id": 563,
        "Question": "Which command is used by the system administrator to set the date of the system?",
        "Options": [
            "a) dt",
            "b) su",
            "c) date",
            "d) chdt"
        ],
        "Answer": "Answer: c\nExplanation: The administrator can create a simulated environment using su – for any user. This mode runs a separate sub-shell and is terminated using ctrl-d or exit."
    },
    {
        "id": 564,
        "Question": "____ command allows superuser to communicate with users.",
        "Options": [
            "a) comm",
            "b) cron",
            "c) date",
            "d) wall"
        ],
        "Answer": "Answer: c\nExplanation: date command is used by users for displaying the system date. Same command is used by the system administrator to change/set the system date. The argument is an eight-character string of the form MMDDhhmm. For example,\n\n\n# date 08122134\nSun Aug  12 21:34:00 IST 2018\n\n\n"
    },
    {
        "id": 565,
        "Question": "____ command is used for setting limits on file size.",
        "Options": [
            "a) limit",
            "b) flimit",
            "c) ulimit",
            "d) flim"
        ],
        "Answer": "Answer: d\nExplanation: The wall command can be used by the administrator to address all users simultaneously. For example,\n\n\n# wall\nKindly everyone shut down the system before leaving the lab.\n[ctrl-d]\nAll the users currently logged in will receive this message on their terminal.\n\n\n "
    },
    {
        "id": 566,
        "Question": "The access to the use of at and batch is restricted and controlled by ___ and ____",
        "Options": [
            "a) at.allow, batch.allow",
            "b) at.allow, at.deny",
            "c) at.allow , batch.deny",
            "d) batch. deny, batch.allow"
        ],
        "Answer": "Answer: c\nExplanation: The ulimit command is used for imposing a restriction on the maximum size of the file that a user is permitted to create on the system.  For example,\n\n\n# ulimit  209788        // measured in 512-byte locks\n\n\n"
    },
    {
        "id": 567,
        "Question": "____ command is used by the superuser for changing root’s password.",
        "Options": [
            "a) pd",
            "b) password",
            "c) pswd",
            "d) pwd"
        ],
        "Answer": "Answer: b\nExplanation: The access to the use of at and batch is restricted and controlled by the files at.allow and at.deny. If at.allow is present, only those users which are listed in this file can use at and batch. If this file is not present then the system checks at.deny for users who are blocked from using these commands. "
    },
    {
        "id": 568,
        "Question": "The SUID for any file can be set by the administrator using ____",
        "Options": [
            "a) chmod",
            "b) chmod u+s filename",
            "c) chmod s filename",
            "d) chmod us filename"
        ],
        "Answer": "Answer: b\nExplanation: The SUID (set-user-ID) lets a process have the privileges of the owner of the file during the instance of the program. The SUID for any file can be set by the administrator using chmod command. For example,\n\n\n\t\n\n# chod u+s  filename.\n\n\n"
    },
    {
        "id": 569,
        "Question": "Which of the following commands are used for the maintenance of user accounts?",
        "Options": [
            "a) useradd",
            "b) usermod",
            "c) userdel",
            "d) useradd, usermod, userdel"
        ],
        "Answer": "Answer: a\nExplanation: The sticky bit (also called the saved text bit) when applied to a regular file ensures that the text image of the program with the bit set is permanently kept in the swap area. The sticky bit also comes with a security feature when applied to directories. To apply the sticky bit to a directory superuser can use 1 as the additional bit with chmod in the following manner:\n\n\n\t\n\n        \n\n# chmod  1775  dirone\n# ls  -l  a.txt\ndrwxrwxr-t  2     abd     dialin     2048   Apr 23  09:04   Dirone\n\n\n"
    },
    {
        "id": 570,
        "Question": "_____ command is used for creating a new group.",
        "Options": [
            "a) chgrp",
            "b) chown",
            "c) addgrp",
            "d) groupadd"
        ],
        "Answer": "Answer: d\nExplanation: For the creation and maintenance of user accounts, UNIX provides to the superuser three commands —useradd, usermod and userdel. "
    },
    {
        "id": 571,
        "Question": " For adding a new user to the system, we have to use ____ command.",
        "Options": [
            "a) grpadd",
            "b) useradd",
            "c) uadd",
            "d) adduser"
        ],
        "Answer": "Answer: d\nExplanation: groupadd command allows us to create a new group. For example, to create a group named OFFICEMANAG with a GID (group ID) of 398, use the following command:\n\n\ngroupadd -g 398  OFFICEMANAG\n\n\n "
    },
    {
        "id": 572,
        "Question": "All the user information is stored in _____",
        "Options": [
            "a) etc/passwd",
            "b) bin/passwd",
            "c) bin/users/passwd",
            "d) etc/shadow"
        ],
        "Answer": "Answer: b\nExplanation: The useradd command is used to add new users to the system. Before using this command the super user should provide all the parameters related to the user in the command line itself. For example,\n\n\n\t\n\n# useradd  -u  134  -g  OFFICEMANAG  -c  “The RDMS”  -d  /home/group   -s   /bin/bash   -m group\n\n\n"
    },
    {
        "id": 573,
        "Question": "Which of the following is not a field stored in /etc/passwd?",
        "Options": [
            "a) username",
            "b) password",
            "c) UID, GID",
            "d) encrypted password"
        ],
        "Answer": "Answer: a\nExplanation: All the user information except the password encryption is stored in /etc/passwd. The encryption itself is stored in /etc/shadow. There are seven fields in /etc/passwd. "
    },
    {
        "id": 574,
        "Question": " Which command is used by the administrator to modify some parameters of existing users?",
        "Options": [
            "a) userdel",
            "b) userchange",
            "c) useradd",
            "d) usermod"
        ],
        "Answer": "Answer: d\nExplanation: The password encryption itself is stored in /etc/shadow while there are seven fields in /etc/passwd namely:\n•    Username\n•    Password\n•    UID\n•    GID\n•    GCOS\n•    HOME directory\n•    Login shell "
    },
    {
        "id": 575,
        "Question": "Which option is used with shutdown command to override the default waiting time?",
        "Options": [
            "a) -g",
            "b) -e",
            "c) -s",
            "d) -i"
        ],
        "Answer": "Answer: d\nExplanation: usermod command is used for modifying some parameters set with useradd. For example, sometimes users need to change their login shell, to do so root user will invoke the following command:\n\n\n# usermod  -s  /bin/bash   oracle        //sets bash as the login shell for user oracle\n\n\n "
    },
    {
        "id": 576,
        "Question": "Which one of the following command will shutdown and reboot the system?",
        "Options": [
            "a) shutdown  -g2",
            "b) shutdown  -g2  i6",
            "c) shutdown  -g2  -g0",
            "d) shutdown -y -g0 -i6"
        ],
        "Answer": "Answer: a\nExplanation: We can remove users from the system using the userdel command. To remove a particular user from the system, use the following command:\n\n\n# userdel  oracle    // remove user amed oracle from system but doesn’t delete his files\n\n\n "
    },
    {
        "id": 577,
        "Question": "Which command is used for reporting free space on the disk?",
        "Options": [
            "a) fd",
            "b) df",
            "c) du",
            "d) sg"
        ],
        "Answer": "Answer: a\nExplanation: The system administrator is also responsible for shutting down the system. For this purpose, shutdown command is used. This command performs various activities before shutting the system.  "
    },
    {
        "id": 578,
        "Question": "___ option is used with df command for displaying the total amount of disk space in the file system.",
        "Options": [
            "a) -a",
            "b) -d",
            "c) -t",
            "d) -e"
        ],
        "Answer": "Answer: a\nExplanation: -g option is used with shutdown command to override the default waiting time (one minute). For example,\n\n\nshutdown  -g2            // shut down the machine after 2 minutes\n\n\n"
    },
    {
        "id": 579,
        "Question": " ___ option is used with df command for displaying the total amount of disk space in the file system in terms of Kilobytes.",
        "Options": [
            "a) -a",
            "b) -d",
            "c) -t",
            "d) -k"
        ],
        "Answer": "Answer: d\nExplanation: -y option is used with shutdown command for shutting the system immediately. Similarly, we can use the shutdown command to turn the machine off in various ways. To shut down and reboot the system, use the following command:\n\n\nshutdown -y -g0 -i6.\n\n\n"
    },
    {
        "id": 580,
        "Question": "Which command is used to find out the consumption of a specific directory?",
        "Options": [
            "a) du",
            "b) df",
            "c) mem",
            "d) dv"
        ],
        "Answer": "Answer: a\nExplanation: Sometimes, we may need to find out the consumption of a specific directory rather than an entire file system. For this purpose, du command is used. This command reports usage by recursive examination of the directory structure."
    },
    {
        "id": 581,
        "Question": "Which option is used with du command for finding only the summary of disk usage by a specific directory?",
        "Options": [
            "a) -e",
            "b) -f",
            "c) -e",
            "d) -s"
        ],
        "Answer": "Answer: d\nExplanation: If we use the du command, then by default it displays the usage of each subdirectory of its argument along with a summary at the end. If we want to display the only summary then we can use -s option with du command. For example,\n\n\n# du  -s  /home/user10/doc\n78954    /home/user10/doc\n\n\n "
    },
    {
        "id": 582,
        "Question": "All the device files are stored in _____",
        "Options": [
            "a) kernel",
            "b) /home/usr",
            "c) /dev",
            "d) /home"
        ],
        "Answer": "Answer: a\nExplanation: Most of the dynamic space in the system is consumed by users, their directories and files. We can use the following command if we want to know the disk space consumed by each user.\n\n\n        \n\n# du  -s  /home/*\n\n\n"
    },
    {
        "id": 583,
        "Question": "The set of routines needed to operate a specific device is known as ________",
        "Options": [
            "a) device file",
            "b) device program",
            "c) device driver",
            "d) device software"
        ],
        "Answer": "Answer: a\nExplanation: A device file is a file which is built into the kernel for each and every device of the system. Whenever we open a device, read or write to it, all these functions are performed using device files. "
    },
    {
        "id": 584,
        "Question": "For formatting diskettes, we can use the _______ command.",
        "Options": [
            "a) format",
            "b) fdformat",
            "c) frmt",
            "d) format and fdformat"
        ],
        "Answer": "Answer: c\nExplanation: A device file is a file which is built into the kernel for each and every device of the system. All the device files are stored in /dev or in its subdirectories. To view the list of device files on your system, use the following command:\n\n\n# ls  -l  /dev\n\n\n"
    },
    {
        "id": 585,
        "Question": "___ command performs copying of diskettes.",
        "Options": [
            "a) pp",
            "b) df",
            "c) du",
            "d) dd"
        ],
        "Answer": "Answer: c\nExplanation: The set of routines needed to operate a specific device is known as a device driver. Whenever a particular device is accessed, the kernel calls the correct device driver and passes some parameters to it. "
    },
    {
        "id": 586,
        "Question": "Which of the following is a backup program?",
        "Options": [
            "a) bckup",
            "b) trap",
            "c) ciop",
            "d) cpio"
        ],
        "Answer": "Answer: d\nExplanation: Before backing up data to a floppy, we may need to format it. For this purpose, either format or fdformat command is used (whichever is supported by your system)."
    },
    {
        "id": 587,
        "Question": "Which of the following options are used with the cpio program?",
        "Options": [
            "a) -a",
            "b) -i",
            "c) -o",
            "d) -i and -o"
        ],
        "Answer": "Answer: d\nExplanation: dd (disk jump) command can be used in copying files systems, but is majorly used for copying media (floppies and tapes)."
    },
    {
        "id": 588,
        "Question": "tar command uses ___ option for backing up files.",
        "Options": [
            "a) -a",
            "b) -c",
            "c) -d",
            "d) -f"
        ],
        "Answer": "Answer: d\nExplanation: As a system administrator, you are responsible for creating a backup of the data which resides on your system. For this purpose, there are mainly two backup programs which are extensively used i.e. cpio and tar. The cpio command copies files to and from a backup device."
    },
    {
        "id": 589,
        "Question": "For restoring files using tar, ____ option is used.",
        "Options": [
            "a) -a",
            "b) -c",
            "c) -v",
            "d) -x"
        ],
        "Answer": "Answer: a\nExplanation: The cpio command copies files to and from a backup device. It uses the standard input for taking the list of filenames and then copies them with their content and header to standard output which can also be redirected to a file or a device. Hence, cpio can be used with redirection and piping."
    },
    {
        "id": 590,
        "Question": "Which filter apart from perl, is the most powerful?",
        "Options": [
            "a) sed",
            "b) awk",
            "c) grep",
            "d) cut"
        ],
        "Answer": "Answer: b\nExplanation: The awk command made a later entry in the UNIX system. Like sed, it combines features of several filters. It is one of the most powerful filter after perl."
    },
    {
        "id": 591,
        "Question": "Which of the following will be used to print lines containing ‘manager’ in emp.lst?",
        "Options": [
            "a) awk ‘/manager/ { print }’ emp.lst",
            "b) awk ‘/manager { print }’ emp.lst",
            "c) awk ‘/manager/ { print } emp.lst",
            "d) awk ‘manager { print }’ emp.lst"
        ],
        "Answer": "Answer: a\nExplanation: awk filter can do several things, it operates on field level and can easily access, transform and format individual fields in a line."
    },
    {
        "id": 592,
        "Question": "The default action if selection_criteria is missing is ____",
        "Options": [
            "a) print",
            "b) split",
            "c) print and split",
            "d) no default action"
        ],
        "Answer": "Answer: a\nExplanation: The syntax for using awk is:\n\n\n\t\n\n        \n\nawk  options  ‘selection_criteria { action }’ file(s)\n\n\n "
    },
    {
        "id": 593,
        "Question": "For pattern-matching, awk uses regular expressions in ____ style.",
        "Options": [
            "a) sed",
            "b) grep",
            "c) perl",
            "d) print"
        ],
        "Answer": "Answer: a\nExplanation: If the selection_criteria is missing in awk command statement then the default action i.e. print is applied."
    },
    {
        "id": 594,
        "Question": "awk uses ______ for splitting a line into fields.",
        "Options": [
            "a) special parameters",
            "b) shell variables",
            "c) env variables",
            "d) command arguments"
        ],
        "Answer": "Answer: a\nExplanation: For pattern-matching, awk uses regular expressions in sed-style. For example,\n\n\n\t\n\n$ awk -F “|” ‘/sa[kx]s*ena/’  emp.lst\n\n\n  "
    },
    {
        "id": 595,
        "Question": " Which built-in variable is used by the awk to specify the line numbers?",
        "Options": [
            "a) AR",
            "b) NR",
            "c) $$",
            "d) $?"
        ],
        "Answer": "Answer: a\nExplanation: awk uses the special parameter $0 to indicate the entire line. It also uses $1, $2, $3 …. to identify fields. For example,\n\n\n$ awk -F “|” ‘/sales/ { print $2, $4, $6 }’  emp.lst         \n // prints 2nd, 4th and 6th field where pattern is matched\n\n\n"
    },
    {
        "id": 596,
        "Question": "What is the default delimiter used by awk?",
        "Options": [
            "a) tab",
            "b) whitespace",
            "c) double space",
            "d) |"
        ],
        "Answer": "Answer: b\nExplanation: awk uses the built-in variable NR to specify line numbers. For example, to select lines 3 to 6 use the following command:\n\n\n$ awk  -F “|” ‘NR == 3, NR == 6 { print NR, $2, $4 }’ emp.lst\n\n\n"
    },
    {
        "id": 597,
        "Question": "The printf function uses ___ for string data and ___ for numeric.",
        "Options": [
            "a) %f, %l",
            "b) %s, %f",
            "c) %s, %d",
            "d) %s, %s"
        ],
        "Answer": "Answer: b\nExplanation: awk is the only filter which uses whitespace as the default delimiter instead of a single space or tab. "
    },
    {
        "id": 598,
        "Question": "A user-defined variable is initialized to ____",
        "Options": [
            "a) zero",
            "b) zero or null string",
            "c) null",
            "d) operator"
        ],
        "Answer": "Answer: c\nExplanation: awk filter supports most of the formats used by the printf function in ‘C’ language. Here, %s format will be used for string and %d format for numeric. "
    },
    {
        "id": 599,
        "Question": "awk uses ___ operator for concatenating strings.",
        "Options": [
            "a) >",
            "b) |",
            "c) *",
            "d) no operator available"
        ],
        "Answer": "Answer: a\nExplanation: awk allows the use of user-defined variables but without declaring them. awk doesn’t use $ either in evaluation or in the assignment of a variable.\n\n\nX=”5”\nprint X            // prints 5\n\n\n "
    },
    {
        "id": 600,
        "Question": "awk uses __ and __ as comparison operators.",
        "Options": [
            "a) $$, ^^",
            "b) ||, &&",
            "c) %%, ##",
            "d) ||, @@"
        ],
        "Answer": "Answer: b\nExplanation: A user-defined variable needs no initialization. It is implicitly initialized to zero or null string and awk has a mechanism of identifying the type and initial value of a variable."
    },
    {
        "id": 601,
        "Question": "Which option is used for reading an awk program from a file?",
        "Options": [
            "a) -e",
            "b) -f",
            "c) -i",
            "d) -F"
        ],
        "Answer": "Answer: d\nExplanation: awk provides no operator for string concatenation. To do so, we have to simply put two strings side by side:\n\n\nx=”sanf” ; y=”com”\nprint x y        // prints sanfcom\n\n\n"
    },
    {
        "id": 602,
        "Question": "____ section can be used if we’ve to print something before processing the first line.",
        "Options": [
            "a) end",
            "b) begin",
            "c) start",
            "d) first"
        ],
        "Answer": "Answer: b\nExplanation: awk statements are usually applied to all the lines selected by the address. But if we want to print something before processing the first line, for example, a heading, then the BEGIN section can be used. The syntax is:\n\n\n\t\n\nBEGIN \n{ \n   action \n}\n\n\n"
    },
    {
        "id": 603,
        "Question": "____ section can be used if we’ve to print something after processing the last line.",
        "Options": [
            "a) end",
            "b) begin",
            "c) start",
            "d) first"
        ],
        "Answer": "Answer: b\nExplanation: awk statements are usually applied to all the lines selected by the address. But if we want to print something after processing the first line, for example, a footer, then the END section can be used. The syntax is:\n\n\n\t\n\n        \n\nEND \n{ \n    action \n}\n\n\n "
    },
    {
        "id": 604,
        "Question": "awk uses ____ for providing comments.",
        "Options": [
            "a) %%",
            "b) //",
            "c) #",
            "d) $$"
        ],
        "Answer": "Answer: c\nExplanation: Like shell, awk also used the # symbol for providing comments. For example,\n\n\nBEGIN \n{\n    printf “\\t\\t employee data\\n\\n”\n}              # demonstration of BEGIN section - (this is a comment line)\n\n\n"
    },
    {
        "id": 605,
        "Question": "Which of the following is a built-in variable for awk?",
        "Options": [
            "a) ps",
            "b) $0",
            "c) FS",
            "d) FN"
        ],
        "Answer": "Answer: c\nExplanation: awk has several built-in variables like FS, OFS, NF each of which serves a different purpose. "
    },
    {
        "id": 606,
        "Question": "Which built variable is used for defining the field delimiter in the output?",
        "Options": [
            "a) OFS",
            "b) FS",
            "c) NF",
            "d) ES"
        ],
        "Answer": "Answer: a\nExplanation: As we know that, awk uses a contiguous set of space as the default field delimiter. FS defines this field separator. For example,\n\n\n\t\n\nBEGIN { FS= “|” }         // | is the delimiter now\n\n\n"
    },
    {
        "id": 607,
        "Question": "The ____ variable stores the name of the file currently being processed.",
        "Options": [
            "a) OFS",
            "b) FILENAME",
            "c) NF",
            "d) ES"
        ],
        "Answer": "Answer: a\nExplanation: The OFS variable is used for specifying the field delimiter in the output. For example,\n\n\nBEGIN { OFS= “~” }    // output fields will be separated with a tidle.\n\n\n"
    },
    {
        "id": 608,
        "Question": "Which of the following is not a built-in variable used by awk?",
        "Options": [
            "a) ES",
            "b) FILENAME",
            "c) argv",
            "d) argc"
        ],
        "Answer": "Answer: b\nExplanation: awk supports another built-in variable named FILENAME which stores the name of the file, currently being processed. "
    },
    {
        "id": 609,
        "Question": "Which of the following is not true about awk arrays?",
        "Options": [
            "a) they are not expanded automatically",
            "b) they are initialized to zero or an empty string",
            "c) index can be a string also",
            "d) they are not formally defined"
        ],
        "Answer": "Answer: a\nExplanation: argv is used for storing the list of arguments while argc stores the number of arguments in the command line."
    },
    {
        "id": 610,
        "Question": "Which of the following is an associative array?",
        "Options": [
            "a) a[ ]             ",
            "b) arr[ ]            ",
            "c) envr [ ]            ",
            "d) ENVIRON[ ]"
        ],
        "Answer": "Answer: a\nExplanation: awk supports the use of arrays but awk arrays differ from those arrays used in another programming language. These arrays are accessed normally using an index."
    },
    {
        "id": 611,
        "Question": "____ function breaks up a string on the basis of delimiter.",
        "Options": [
            "a) length",
            "b) substr",
            "c) system",
            "d) split"
        ],
        "Answer": "Answer: d\nExplanation: The split function breaks a substr str on the basis of delimiter. The syntax is split (stg, arr, ch) where stg is the string to be broken, ch is delimeter and arr is the array which stores the fields. "
    },
    {
        "id": 612,
        "Question": "For running a UNIX command within awk, we’ve to use ____ function.",
        "Options": [
            "a) length",
            "b) substr",
            "c) system",
            "d) split"
        ],
        "Answer": "Answer: c\nExplanation: For running a UNIX command within awk, we’ve to use system function. For example,\n\n\nBEGIN \n{\n      system(“date”)   // prints the system date \n}\n\n\n "
    },
    {
        "id": 613,
        "Question": "Which of the following is supported by awk?",
        "Options": [
            "a) if",
            "b) while",
            "c) for",
            "d) if, while, for"
        ],
        "Answer": "Answer: b\nExplanation: The sqrt(x) function is used for returning the square root of x.  "
    },
    {
        "id": 614,
        "Question": "awk uses _____ dimensional arrays.",
        "Options": [
            "a) one",
            "b) two",
            "c) multi",
            "d) three"
        ],
        "Answer": "Answer: d\nExplanation: awk generally supports all the functions and features of a modern programming language. It provides if condition for control flow and while, for loop for repeatedly executing the instructions.   "
    },
    {
        "id": 615,
        "Question": "Which of the following is a built-in function for awk?",
        "Options": [
            "a) length",
            "b) index",
            "c) size",
            "d) length and index"
        ],
        "Answer": "Answer: b\nExplanation: print statement is not necessary for printing a line. If the selection criteria is specified, the specified line is automatically printed. "
    },
    {
        "id": 616,
        "Question": "The _____ function extracts a substring from a string.",
        "Options": [
            "a) length",
            "b) index",
            "c) size",
            "d) substr"
        ],
        "Answer": "Answer: a\nExplanation: awk supports one-dimensional arrays where the array subscript can be a string also. "
    },
    {
        "id": 617,
        "Question": "Which one of the following is the most powerful filter?",
        "Options": [
            "a) awk",
            "b) grep",
            "c) sed",
            "d) perl"
        ],
        "Answer": "Answer: d\nExplanation: A perl is the finest filter used on the UNIX system and is the finest of all (grep, sed, awk, tr). In fact, it combines the power of these. There is nothing can these filters can do and perl can’t."
    },
    {
        "id": 618,
        "Question": "To test whether perl is in your PATH, use ____",
        "Options": [
            "a) perl -e",
            "b) perl -i",
            "c) perl -el",
            "d) perl -ed"
        ],
        "Answer": "Answer: a\nExplanation: A perl program runs in a special interpretive mode; the entire script is first compiled internally before getting executed."
    },
    {
        "id": 619,
        "Question": "It is often more convenient to save perl program files with ____ extension.",
        "Options": [
            "a) .gp",
            "b) .sh",
            "c) .awk",
            "d) .pl"
        ],
        "Answer": "Answer: a\nExplanation: Unlike other filters, script errors are generated before the execution of perl script file. To check whether perl exist on our system or not use this simple command:\n\n\n\t\n\n        \n\n$ perl -e ‘print(“perl is present”) ;’\n\n\n"
    },
    {
        "id": 620,
        "Question": "___ function is used for removing the last character from the line.",
        "Options": [
            "a) cut",
            "b) chop",
            "c) erase",
            "d) split"
        ],
        "Answer": "Answer: d\nExplanation: perl programs are often very big, hence it is better to use .pl extension with perl program files."
    },
    {
        "id": 621,
        "Question": "When a string is used for numeral computations, perl converts it into ___",
        "Options": [
            "a) character",
            "b) floating point number",
            "c) number",
            "d) boolean value"
        ],
        "Answer": "Answer: b\nExplanation: In many conditions, we may need to chop the last character –especially when there is a newline character. For this purpose, chop function is used."
    },
    {
        "id": 622,
        "Question": "If a variable is undefined, its value is ____",
        "Options": [
            "a) 0",
            "b) 1",
            "c) NULL",
            "d) garbage"
        ],
        "Answer": "Answer: a\nExplanation: Perl variables have no type and no initialization. Both the strings and numbers can be as large as our machine permits."
    },
    {
        "id": 623,
        "Question": "Which of the following are concatenation operators?",
        "Options": [
            "a) /",
            "b) .",
            "c) _",
            "d) \\\\"
        ],
        "Answer": "Answer: c\nExplanation: There are some attributes which we should keep in mind while using perl. One of which is, when we use string for numerical comparison or computation, perl immediately converts it into a number."
    },
    {
        "id": 624,
        "Question": "To repeat a string, perl uses ___ operator.",
        "Options": [
            "a) /",
            "b) .",
            "c) x",
            "d) \\\\"
        ],
        "Answer": "Answer: a\nExplanation: When a variable is undefined, it is assumed to be a NULL string and NULL string is numerically zero."
    },
    {
        "id": 625,
        "Question": "Which function is used by perl for displaying the length of a string?",
        "Options": [
            "a) string",
            "b) len",
            "c) split",
            "d) length"
        ],
        "Answer": "Answer: b\nExplanation: Like in shell, concatenation is performed by placing two variables side by side. This case is not followed with perl. Rather perl uses . (dot) operator for concatenating two variables. For example,\n\n\n$ perl  -e  '$x=\"san\" ; $y=\"foundry\" ; print($x . $y);'\nsanfoundry\n\n\n"
    },
    {
        "id": 626,
        "Question": "___ function returns the first occurrence of a character in a string.",
        "Options": [
            "a) string",
            "b) index",
            "c) split",
            "d) length"
        ],
        "Answer": "Answer: c\nExplanation: perl uses the x operator to repeat a string. For example, the following command will print * 10 times;\n\n\n$ perl  -e  ‘print “*” x 10 ;’\n**********\n\n\n"
    },
    {
        "id": 627,
        "Question": "For extracting a substring, ____ function is used.",
        "Options": [
            "a) string",
            "b) index",
            "c) substr",
            "d) length"
        ],
        "Answer": "Answer: d\nExplanation: The length function is used by perl to return the length of any string. For example,\n\n\n$x= “Abdullah”;\nprint length($x);       // prints 8\n\n\n"
    },
    {
        "id": 628,
        "Question": "Which function is used by perl for reversing a string?",
        "Options": [
            "a) rev",
            "b) reverse",
            "c) split",
            "d) substr"
        ],
        "Answer": "Answer: b\nExplanation: The index function returns the first occurrence of a character in a string. For example,\n\n\n$x= “Abdullah”;\nprint index($x,u);     // prints 3\n\n\n "
    },
    {
        "id": 629,
        "Question": "Which function is used for handling substitutions in perl?",
        "Options": [
            "a) tr",
            "b) s",
            "c) str",
            "d) tr and s"
        ],
        "Answer": "Answer: c\nExplanation: The substr function extracts a particular substring from a string based on the value of specified indices. For example,\n\n\n$x= “abcdefghijklm”\n$y= substr( $x, -3,2);   // extracts two characters from the third position on the right side\nprint “$y”;             // prints kl\n\n\n"
    },
    {
        "id": 630,
        "Question": "Which escape character is used for identifying a word character?",
        "Options": [
            "a) \\s",
            "b) \\d",
            "c) \\w",
            "d) \\n"
        ],
        "Answer": "Answer: a\nExplanation: substr function works in a versatile way. It can also be used for altering an existing string i.e. we can edit an existing string. For example,\n\n\n$x= “abcdijklm”\nsubstr($x,4,0)= “efgh” ;    // stuff $x with efgh without replacing any charcaters\nprint “$x” ;               //$x is now abcdefghijklm\n\n\n "
    },
    {
        "id": 631,
        "Question": "Which of the following is referred to as default variable?",
        "Options": [
            "a) $0",
            "b) $1",
            "c) $!",
            "d) $_"
        ],
        "Answer": "Answer: a\nExplanation: perl provides specific functions to open a file and perform I/O operations on it. The <> (diamond) operator is used for reading lines from a file. For example,\n\n\n\t\n\n perl  -e ‘print while (<>)’  dept.lst        // file opening implied\n\n\n"
    },
    {
        "id": 632,
        "Question": "___ operator is used for selecting current line number.",
        "Options": [
            "a) $0",
            "b) $1",
            "c) $.",
            "d) $_"
        ],
        "Answer": "Answer: d\nExplanation: perl assigns the line read from input to a special variable $_; often called default variable. This is an extremely important variable, which can make our code compact."
    },
    {
        "id": 633,
        "Question": "___ is known as range operator.",
        "Options": [
            "a) . .",
            "b) $1",
            "c) $.",
            "d) $_"
        ],
        "Answer": "Answer: c\nExplanation: perl stores the current line number in a special variable $. ($ followed by a dot). We can use it to represent a line address and select lines from anywhere:\n\n\nperl  -ne  'print if {$.  < 4}' foo\n\n\n "
    },
    {
        "id": 634,
        "Question": "The ___ prefix to an array name signifies the last index of the array.",
        "Options": [
            "a) $0",
            "b) $#",
            "c) #$",
            "d) $_"
        ],
        "Answer": "Answer: a\nExplanation: perl . . (range operator) is a counterpart of awk’s NR variable. For example,\n\n\n\t\n\nthe following command prints 1,2,3,4,5\nfor each(1..5) \n{\n  print “$_”;\n}\n\n\n "
    },
    {
        "id": 635,
        "Question": "For deleting the elements from the left of the array ___  function is used.",
        "Options": [
            "a) pop",
            "b) push",
            "c) queue",
            "d) shift"
        ],
        "Answer": "Answer: a\nExplanation: Lists and arrays lie at the heart of perl. Perl has a large number of functions to manipulate them. For example, in the following we’ve assigned three values to array @month:\n\n\n@month =  {“jan”, “feb”, “march”} ;        //$month[1] is feb\n\n\n"
    },
    {
        "id": 636,
        "Question": "For deleting the elements from the right of the array ___  function is used.",
        "Options": [
            "a) pop",
            "b) push",
            "c) queue",
            "d) shift"
        ],
        "Answer": "Answer: b\nExplanation: The $# prefix to an array name signifies the last index of the array. It is always one less than the size of the array. For example,\n\n\n@month =  {“jan”, “feb”, “march”} ;\n$last_index = $#month;        //$last_index is “march”\n\n\n "
    },
    {
        "id": 637,
        "Question": "To add elements to the left side of the array ____ function is used.",
        "Options": [
            "a) pop",
            "b) push",
            "c) queue",
            "d) unshift"
        ],
        "Answer": "Answer: d\nExplanation: perl provides a handful of functions for manipulating the contents of an array. For example, perl uses shift function to delete the left-most element of an array.\n\n\n@list= (3. .5,9) ;    // this is 3,4,5,9\nshift(@list)         // now it is 4,5,9\n\n\n "
    },
    {
        "id": 638,
        "Question": "To add elements to the right side of the array ____ function is used.",
        "Options": [
            "a) pop",
            "b) push",
            "c) queue",
            "d) unshift"
        ],
        "Answer": "Answer: a\nExplanation: perl provides a handful of functions for manipulating the contents of any array. For example, perl uses the pop function to delete the right-most element of an array.\n\n\n@list= (3. .5,9) ;      // this is 3,4,5,9\npop(@list)             // now it is 3,4,5\n\n\n"
    },
    {
        "id": 639,
        "Question": "Which function can combine the functionalities of push, pop, unshift and shift?",
        "Options": [
            "a) splice",
            "b) add",
            "c) delete",
            "d) split"
        ],
        "Answer": "Answer: d\nExplanation: Ta add elements to the left side of the array, use the unshift function. For example,\n\n\n@list= (5,9) ;                // this is 5,9\nunshift( @list,1. .3) ;      // now it becomes 1,2,3,5,9\n\n\n"
    },
    {
        "id": 640,
        "Question": "For looping in a list, ____ is used.",
        "Options": [
            "a) for",
            "b) fordo",
            "c) foreach",
            "d) while"
        ],
        "Answer": "Answer: b\nExplanation: Ta add elements to the right side of the array, use the push function. For example,\n\n\n@list= (5,9) ;            // this is 5,9\nunshift( @list,13) ;     // now it becomes 5,9,13\n\n\n"
    },
    {
        "id": 641,
        "Question": "For splitting a line or expression into fields, __ is used.",
        "Options": [
            "a) foreach",
            "b) for",
            "c) split",
            "d) join"
        ],
        "Answer": "Answer: a\nExplanation: The splice function can perform all the four functions performed by these functions. It uses upto four arguments to add or remove elements at any location of the array. The second argument is the offset from where we’ve to perform insertion or deletion, the third argument represents the number of elements to be removed. If it is 0, elements are to be added. The fourth argument specifies the new replaced list. For example,\n\n\n@list= (1,2,3,4,5,9) ;\nsplice(@list, 5, 0, 6. . 8);        //adds at 6th location -1,2,3,4,5,6,7,8,9\n\n\n"
    },
    {
        "id": 642,
        "Question": "___ function is used for joining lists.",
        "Options": [
            "a) foreach",
            "b) for",
            "c) split",
            "d) join"
        ],
        "Answer": "Answer: c\nExplanation: perl provides an extremely useful foreach construct to loop through a list. The syntax is,\n\n\nforeach $var (@arr) \n{\n   statements\n}\n\n\n"
    },
    {
        "id": 643,
        "Question": "perl is ____ of grep, tr, sed and awk.",
        "Options": [
            "a) subset",
            "b) superset",
            "c) child",
            "d) parent"
        ],
        "Answer": "Answer: a\nExplanation: perl supports both foreach construct and for loop for looping purposes. For example,\n\n\nfor($i=0;$i<3;$i++){print(“hello”) ; }        //print “Hello” three times\n\n\n"
    },
    {
        "id": 644,
        "Question": "17. The following will display :<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">perl -e ‘print “UNIX” x 10 . “\\n” ;’</pre></div></div></div></div></div></div>",
        "Options": [
            "a) UNIX",
            "b) UNIX 10 times",
            "c) error message",
            "d) \\n"
        ],
        "Answer": "Answer: c\nExplanation: split breaks a particular line or expression into fields. These fields are assigned either to variables or an array. For example,\n\n\n($var1, $var2, $var3 . . . ) = split(/sep/,stg) ;\n@arr= split(/sep/,stg) ;      \n// splits string stg on sep (sep can be literal character or regular expression)\n\n\n"
    },
    {
        "id": 645,
        "Question": "For deleting the line form current cursor to the end of the line, we can use:",
        "Options": [
            "a) $",
            "b) d$",
            "c) dd",
            "d) $d"
        ],
        "Answer": "Answer: a\nExplanation: An operator alone cannot perform any function unless it is combined with a command or itself. For example, by using dd or yy we can delete or copy a line respectively."
    },
    {
        "id": 646,
        "Question": "dw will ________",
        "Options": [
            "a) deletes one line",
            "b) deletes one word",
            "c) deletes one character",
            "d) deletes one sentence"
        ],
        "Answer": "Answer: a\nExplanation: dd command is a combination of the d operator with itself. vi can perform complex deletion when this operator is combined with a command of the command mode. For example,\n\n\nd$        //delete entire line fro current cursor location to end of line\n\n\n "
    },
    {
        "id": 647,
        "Question": "For yanking text, ___ is used.",
        "Options": [
            "a) d",
            "b) y",
            "c) c",
            "d) G"
        ],
        "Answer": "Answer: b\nExplanation: dd command is a combination of the d operator with itself. vi can perform complex deletion when this operator is combined with a command of the command mode. For example,\n\n\n        \n\ndw            // deletes one word\n3dw           // deletes 3 words\n\n\n "
    },
    {
        "id": 648,
        "Question": "For pasting text, ____ is used.",
        "Options": [
            "a) p or P",
            "b) d or D",
            "c) C",
            "d) x or X"
        ],
        "Answer": "Answer: b\nExplanation: The y operator is used for yanking (copying) text. It is used in the same way as d operator is used i.e. it is also combined with itself or with another command. For example,\n\n\n5yy            // yanks five lines\n\n\n  "
    },
    {
        "id": 649,
        "Question": "To change entire lines, ____ is used.",
        "Options": [
            "a) cc",
            "b) CC",
            "c) dd",
            "d) c$"
        ],
        "Answer": "Answer: a\nExplanation: After yanking text with yy, we can paste it using either p or P. p paste the text below the current line while P paste the text above the current line. "
    },
    {
        "id": 650,
        "Question": "Which operator is used in vi to filter text?",
        "Options": [
            "a) %%",
            "b) &&",
            "c) $",
            "d) !"
        ],
        "Answer": "Answer: a\nExplanation: For changing text, c operator is used. This operator is also combined with a command to perform the replacement. If dw deletes a word, cw changes it. This operator works in input mode. For example, to change the text from the present cursor location up to the end of line, use\nc$ or C "
    },
    {
        "id": 651,
        "Question": "To delete from current cursor upto the first occurrence of }, which of the following will be used?",
        "Options": [
            "a) dd$}",
            "b) d /",
            "c) d / }",
            "d) }"
        ],
        "Answer": "Answer: a\nExplanation: For changing text, c operator is used. This operator is also combined with a command to perform the replacement. To change entire lines, use the cc command. "
    },
    {
        "id": 652,
        "Question": "The command df. will _____",
        "Options": [
            "a) deletes entire line",
            "b) deletes entire paragraph",
            "c) deletes from current cursor up to first occurrence of",
            "d) deletes zero lines"
        ],
        "Answer": "Answer: d\nExplanation: vi provides a marvellous feature of allowing UNIX filter to act on the text that’s displayed on the terminal. For filtering text screen,\n1. move to the beginning of the text to be acted upon and press !\n2. move to the other end of the text using navigation command like G\n3. Enter the command to act on the text. "
    },
    {
        "id": 653,
        "Question": "To yank from current cursor up to first occurrence of string str  in reverse direction, we can use:",
        "Options": [
            "a) y?str",
            "b) y!str",
            "c) yy str",
            "d) yy ! str"
        ],
        "Answer": "Answer: c\nExplanation: We can perform many functions using operator-command combinations. For example, d / } will deletes from the current cursor upto first occurrence of } . "
    },
    {
        "id": 654,
        "Question": "12. The following command will_________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">!! tr ‘[a-z]’  ‘[A-Z]’</pre></div></div></div></div></div></div>",
        "Options": [
            "a) throw an error",
            "b) undefined behavior",
            "c) changes the case of the current line from lower to uppercase",
            "d) changes the case of current line from upper to lowercase"
        ],
        "Answer": "Answer: c\nExplanation: The command df. is another example of operator-command combination. It deletes from cursor to first occurrence of a dot."
    },
    {
        "id": 655,
        "Question": "To sort all lines from current cursor to end of line, ____ can be used.",
        "Options": [
            "a) sort .,$",
            "b) sort !G",
            "c) sort !,G",
            "d) !Gsort"
        ],
        "Answer": "Answer: a\nExplanation: The command y?str is another example of operator-command combination. The operator ? is used with y operator for yanking a string in reverse direction."
    },
    {
        "id": 656,
        "Question": "Which of the following is not a valid operator-command combination?",
        "Options": [
            "a) 5dd",
            "b) yy5",
            "c) cc",
            "d) yG"
        ],
        "Answer": "Answer: c\nExplanation: The ! operator when doubled is used for operating on current line. For example, we can change the case of current line from lowercase to uppercase by using the above command."
    },
    {
        "id": 657,
        "Question": "Which of the following command is used for switching files?",
        "Options": [
            "a) :e",
            "b) e!",
            "c) !e",
            "d) !r"
        ],
        "Answer": "Answer: a\nExplanation: We can switch between multiple files without quitting the vi editor. For example, while working with one file, we can switch to another by using the following command,\n\n\n\t\n\n:e  file02        // switches to file02\n\n\n"
    },
    {
        "id": 658,
        "Question": "For returning back to the original file after switching we can use:",
        "Options": [
            "a) :e!",
            "b) ctrl-^",
            "c) :e#",
            "d) ctrl-^ and :e#"
        ],
        "Answer": "Answer: d\nExplanation: We can switch between multiple files without quitting the vi editor. For this purpose, :e command is used. For returning back to the original file, we can use one of the following commands:\n\n\n\t\n\n        \n\n[Ctrl-^]            //toggles between previous and current file\n:e# \t           //same\n\n\n"
    },
    {
        "id": 659,
        "Question": "When multiple filenames are used with vi, we can switch to next file using ___ command.",
        "Options": [
            "a) new",
            "b) :n",
            "c) :rew",
            "d) :prev"
        ],
        "Answer": "Answer: c\nExplanation: When vi editor is used with multiple filenames, it loads the first file. We can switch to next file using :n command.  "
    },
    {
        "id": 660,
        "Question": "We can move back to the previous file using ____ command.",
        "Options": [
            "a) new",
            "b) :n",
            "c) :rew",
            "d) :prev"
        ],
        "Answer": "Answer: c\nExplanation: When vi editor is used with multiple filenames, it loads the first file. We can switch to next file using :n command. In this manner, we can reach to the last file. At any stage, we can move back to the first file using :rew command. "
    },
    {
        "id": 661,
        "Question": "To split the screen into multiple windows, we can use ____ command.",
        "Options": [
            "a) :sp",
            "b) :new",
            "c) :n",
            "d) :r"
        ],
        "Answer": "Answer: a\nExplanation: We can also insert the output of any command in our file using :r command. "
    },
    {
        "id": 662,
        "Question": "To create a new window, ____ can be used.",
        "Options": [
            "a) :sp",
            "b) :new",
            "c) :n",
            "d) :r"
        ],
        "Answer": "Answer: a\nExplanation: We can also split our screen into multiple windows using :sp command. The window can be empty or it can contain a file, even a copy of the same file."
    },
    {
        "id": 663,
        "Question": "To remove all other windows except the current one, which of the following command is used?",
        "Options": [
            "a) :on",
            "b) :new",
            "c) :n",
            "d) :r"
        ],
        "Answer": "Answer: c\nExplanation: We can also create an empty window which will not be associated with any file. For this purpose, :new command is used. Now we can move between these windows using ctrl-w."
    },
    {
        "id": 664,
        "Question": "vi editor has ____ named buffers.",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 26",
            "d) 5"
        ],
        "Answer": "Answer: a\nExplanation: To make the current window the only window on the screen and close all other windows use :on command. We can also kill the current window using :q. "
    },
    {
        "id": 665,
        "Question": "For restoring the contents of numbered buffers efficiently, ___ command is used.",
        "Options": [
            "a) .",
            "b) $",
            "c) :nb",
            "d) :q"
        ],
        "Answer": "Answer: c\nExplanation: vi editor stores the deleted text in an unnamed buffer. But this suffers some limitations. i.e. we can use only one buffer at one time. So vi uses 26 special named buffers which are named after the letters of the alphabet. For example,\n\n\n“a4yy            // yanks 4 lines into buffer a\n\n\n "
    },
    {
        "id": 666,
        "Question": "vi used ___ to enter control characters.",
        "Options": [
            "a) ctrl-w",
            "b) ctrl-v",
            "c) ctrl-d",
            "d) esc"
        ],
        "Answer": "Answer: a\nExplanation: We often need to restore a number of recent deletions. Vi editor makes it possible to restore up to recent nine complete line deletions using its numbered buffers. For example,\n\n\n“1p            // restores most recent deletion\n\n\n "
    },
    {
        "id": 667,
        "Question": "To append contents of buffer to file01, we can use __________",
        "Options": [
            "a) : w >> file01",
            "b) :r > file01",
            "c) :w > file01",
            "d) :r >> file01"
        ],
        "Answer": "Answer: a\nExplanation: vi offers the dot command to restore the contents of any buffer efficiently. Every time this command is pressed, it steps through the buffer set to restore the contents of the next buffer. "
    },
    {
        "id": 668,
        "Question": "Which of the following is an invalid command?",
        "Options": [
            "a) :r file01",
            "b) :e file01",
            "c) :e#",
            "d) :w # file01"
        ],
        "Answer": "Answer: a\nExplanation: The technique of restoring line deletions from numbered buffers is applicable only to entire lines. For example, we can’t restore five words deleted with 5dw unless it was the last editing action performed. "
    },
    {
        "id": 669,
        "Question": "For searching a character, ___ and ___ are used.",
        "Options": [
            "a) f, t",
            "b) n, w",
            "c) e, d",
            "d) k, n"
        ],
        "Answer": "Answer: a\nExplanation: For searching a character, we can take the cursor near or to a specific character in the current line. This is done with f and t commands."
    },
    {
        "id": 670,
        "Question": "For moving the cursor forward to the first occurrence of a character, __ is used.",
        "Options": [
            "a) d",
            "b) t",
            "c) f",
            "d) n"
        ],
        "Answer": "Answer: c\nExplanation: For moving the cursor forward to the first occurrence of a character, f command is used followed by the character. For example,\n\n\nfch                // moves the cursor forward to the first occurrence of ch\n\n\n"
    },
    {
        "id": 671,
        "Question": "__ and __ commands works in a reverse manner as f and t.",
        "Options": [
            "a) F, T",
            "b) tf, ft",
            "c) z, x",
            "d) ff, tt"
        ],
        "Answer": "Answer: a\nExplanation: t command works in a similar manner as f except the fact that it positions the cursor a single character before the occurrence. "
    },
    {
        "id": 672,
        "Question": "For customizing vi, which of the following command is used?",
        "Options": [
            "a) set",
            "b) map",
            "c) abbr",
            "d) set, map, abbr"
        ],
        "Answer": "Answer: a\nExplanation: F and T perform the respective functions as f and t but in reverse direction. "
    },
    {
        "id": 673,
        "Question": "vi environment is determined by variable settings. These variables are controlled by ____ command.",
        "Options": [
            "a) :set",
            "b) :abbr",
            "c) :map",
            "d) autowrite"
        ],
        "Answer": "Answer: a\nExplanation: We can repeat the character search using the ; and , respectively. ; repeats the search in the same direction along which the previous search was made with f or t. Similarly (,) repeats the search in the opposite direction. "
    },
    {
        "id": 674,
        "Question": "For automatic indentation, ____ is used with : set command.",
        "Options": [
            "a) autowrite",
            "b) autoindent",
            "c) automode",
            "d) showmode"
        ],
        "Answer": "Answer: d\nExplanation: vi can be customized in the way we want. For this purpose, map, set and abbr commands are used. "
    },
    {
        "id": 675,
        "Question": "Which of the following is used with :set to customize vi to ignore case in pattern searches?",
        "Options": [
            "a) nomatch",
            "b) ignorecase",
            "c) nocase",
            "d) nomagic"
        ],
        "Answer": "Answer: a\nExplanation: vi environment is determined by variable settings. These variables are controlled by :set command. "
    },
    {
        "id": 676,
        "Question": "To change the default tab stop spaces in vi, ___ can be used with :set.",
        "Options": [
            "a) nomagic",
            "b) tabstop=n",
            "c) tab",
            "d) tabchange"
        ],
        "Answer": "Answer: b\nExplanation: To provide automatic indentation to or code, we can use the following statement:\n\n\n\t\n\n:set  autoindent\n\n\n       "
    },
    {
        "id": 677,
        "Question": "Which command is used for mapping keys of a keyboard?",
        "Options": [
            "a) set",
            "b) map",
            "c) abbr",
            "d) autowrite"
        ],
        "Answer": "Answer: b\nExplanation: To customize the vi to ignore case in pattern searches we can use the following statement:\n\n\n:set  ignorecase        // case-insensitive search\n\n\n"
    },
    {
        "id": 678,
        "Question": "For compiling a C program without leaving the editor, which command will be used?",
        "Options": [
            "a) cc %",
            "b) :! Cc",
            "c) :!cc %",
            "d) :!c"
        ],
        "Answer": "Answer: b\nExplanation: To change the default tab setting (8 spaces) to 4 spaces, :set tabstop=4 can be used."
    },
    {
        "id": 679,
        "Question": "Which of the following statement is not true?",
        "Options": [
            "a) f and t commands are used for searching a character",
            "b) y and yy are same",
            "c) vi has 26 named buffers",
            "d) :e# is used for toggling between files"
        ],
        "Answer": "Answer: b\nExplanation: The map command lets us assign the undefined keys or reassign the defined ones so that when such a key is pressed, it expands to a command sequence. "
    },
    {
        "id": 680,
        "Question": "When we execute a C program, CPU runs in ____ mode.",
        "Options": [
            "a) user",
            "b) kernel",
            "c) supervisory",
            "d) system"
        ],
        "Answer": "Answer: a\nExplanation: All UNIX systems offer around 200 special functions known as system calls. A system call is a routine built into the kernel and performs a very basic function that requires communication with the CPU, memory and devices."
    },
    {
        "id": 681,
        "Question": "In ____ mode, the kernel runs on behalf of the user.",
        "Options": [
            "a) user",
            "b) kernel",
            "c) real",
            "d) all"
        ],
        "Answer": "Answer: a\nExplanation: When we execute a C program, the CPU runs in user mode. It remains it this particular mode until a system call is invoked. "
    },
    {
        "id": 682,
        "Question": "All UNIX and LINUX systems have one thing in common which is ____",
        "Options": [
            "a) set of system calls",
            "b) set of commands",
            "c) set of instructions",
            "d) set of text editors"
        ],
        "Answer": "Answer: b\nExplanation: Whenever a process invokes a system call, the CPU switches from user mode to kernel mode which is a more privileged mode. The kernel mode is also called as supervisor mode. In this mode, the kernel runs on behalf of the user and has access to any memory location and can execute any machine instruction."
    },
    {
        "id": 683,
        "Question": "The chmod command invokes the ____ system call.",
        "Options": [
            "a) chmod",
            "b) ch",
            "c) read",
            "d) change"
        ],
        "Answer": "Answer: a\nExplanation: As we know that, all UNIX and LINUX systems have one thing in common; they use the same set of system calls."
    },
    {
        "id": 684,
        "Question": "For reading input, which of the following system call is used?",
        "Options": [
            "a) write",
            "b) rd",
            "c) read",
            "d) change"
        ],
        "Answer": "Answer: a\nExplanation: Many commands and system calls share the same names. For example, the chmod command invokes the chmod system call."
    },
    {
        "id": 685,
        "Question": "Which of the following system call is used for opening or creating a file?",
        "Options": [
            "a) read",
            "b) write",
            "c) open",
            "d) close"
        ],
        "Answer": "Answer: c\nExplanation: The standard C library offers a set of separate functions to read a block of data. For example, to read a block of data fread is used, for reading a line fgets is used and for reading a character fgetc is used. All these functions invoke the system call -read, which is available for reading input."
    },
    {
        "id": 686,
        "Question": "There are ___ modes of opening a file.",
        "Options": [
            "a) 4",
            "b) 3",
            "c) 2",
            "d) 1"
        ],
        "Answer": "Answer: c\nExplanation: To read or write to a file, we first need to open it. For this purpose, open system call is used. Open has two forms ; the first forms assumes that the file already exists and the second form creates the file if it doesn’t."
    },
    {
        "id": 687,
        "Question": "Which of the following mode is used for opening a file in both reading and writing?",
        "Options": [
            "a) O_RDONLY",
            "b) O_WRONLY",
            "c) O_RDWR",
            "d) O_WDR"
        ],
        "Answer": "Answer: b\nExplanation: There are three modes of opening a file, out of which only one mode is required to be specified while opening the file. The three modes are, O_RDONLY, O_WRONLY, O_RDWR."
    },
    {
        "id": 688,
        "Question": "open system call returns the file descriptor as ___",
        "Options": [
            "a) int",
            "b) float",
            "c) char",
            "d) double"
        ],
        "Answer": "Answer: c\nExplanation: There are three modes of opening a file namely:\n\n\n\t\n\n O_RDONLY    -    opens files for reading\n O_WRONLY    -    opens file for writing \n O_RDWR      -   opens file for reading and writing\n\n\n "
    },
    {
        "id": 689,
        "Question": "Which of the following system call is used for closing a file?",
        "Options": [
            "a) open",
            "b) lseek",
            "c) close",
            "d) write"
        ],
        "Answer": "Answer: c\nExplanation: A program automatically closes all open files before termination, but it’s a good practice to close them explicitly. The close system call is used for closing a file.\nint close (int fd) "
    },
    {
        "id": 690,
        "Question": "close system call returns ____",
        "Options": [
            "a) 0",
            "b) -1",
            "c) 1",
            "d) 0 and -1"
        ],
        "Answer": "Answer: d\nExplanation: The return type of close system call is an integer. It either returns 0 if the file is closed successfully or -1 otherwise."
    },
    {
        "id": 691,
        "Question": "____ system call is used for writing to a file.",
        "Options": [
            "a) read",
            "b) write",
            "c) close",
            "d) seek"
        ],
        "Answer": "Answer: b\nExplanation: write system call is required for writing to a file which has previously been opened with the open system call. write system call returns the number of characters written."
    },
    {
        "id": 692,
        "Question": "write system call returns -1 when ___________",
        "Options": [
            "a) if disk fills up while write is in progress",
            "b) when file doesn’t exist",
            "c) if the file size exceeds the system’s limit",
            "d) if disk fills up while write is in progress and if the file size exceeds"
        ],
        "Answer": "Answer: d\nExplanation: write system call returns the number of characters written. However, it will return -1 if if disk fills up while write is in progress or if the file size exceeds the system’s limit."
    },
    {
        "id": 693,
        "Question": "____ system call is used for positioning the offset pointer.",
        "Options": [
            "a) read",
            "b) write",
            "c) open",
            "d) lseek"
        ],
        "Answer": "Answer: d\nExplanation: The lseek system call moves the file offset pointer to a specified point. It doesn’t do any physical I/O rather it determines the position in the file where the next I/O operation will take place."
    },
    {
        "id": 694,
        "Question": "Which of the following offset is used with lseek system call to set the offset pointer to the end of the file?",
        "Options": [
            "a) SEEK_SET",
            "b) SEEK_END",
            "c) SEEK_CUR",
            "d) SEEK_CR"
        ],
        "Answer": "Answer: b\nExplanation: The offset signifies the position of the offset pointer which can take one of these three values:\n\n\n SEEK_SET    -    offset pointer set to the beginning of file\n SEEK_END    -    offset pointer set to the end of file\n SEEK_CUR    -    offset pointer remains at current location\n\n\n "
    },
    {
        "id": 695,
        "Question": " Which of the following system call is used for truncating a file?",
        "Options": [
            "a) truncate",
            "b) ftruncate",
            "c) trunk",
            "d) truncate and ftruncate"
        ],
        "Answer": "Answer: d\nExplanation: The truncate and ftruncate calls can truncate a file to any length. These calls are often used in combination with lseek to overwrite a certain segment of a file."
    },
    {
        "id": 696,
        "Question": "truncate needs the ___ of the file as an argument but ftruncate works with _______",
        "Options": [
            "a) pathname, file descriptor",
            "b) file descriptor, pathname",
            "c) pathname, pathname",
            "d) file descriptor, file descriptor"
        ],
        "Answer": "Answer: a\nExplanation: The truncate and ftruncate calls can truncate a file to any length. truncate needs the pathname of the file as an argument but ftruncate works with the file descriptor."
    },
    {
        "id": 697,
        "Question": "Which library function is used for printing error messages?",
        "Options": [
            "a) strerror",
            "b) stderror",
            "c) strer",
            "d) ptrerror"
        ],
        "Answer": "Answer: a\nExplanation: The library function strerror, uses the error number as argument and returns a pointer to the string representing the error."
    },
    {
        "id": 698,
        "Question": "What is the significance of errno 13?",
        "Options": [
            "a) not a super user",
            "b) no such file and directory",
            "c) permission denied",
            "d) no space left on device"
        ],
        "Answer": "Answer: b\nExplanation: There is another library function, perror which is used for printing the error messages. But perror doesn’t use the errno (error number) as an argument."
    },
    {
        "id": 699,
        "Question": "What is the symbolic constant for errno 2?",
        "Options": [
            "a) EPERM",
            "b) ENDENT",
            "c) EIO",
            "d) EEXIST"
        ],
        "Answer": "Answer: b\nExplanation: The errno 13 displays the message “permission denied”. The symbolic constant for this errno is EACCES."
    },
    {
        "id": 700,
        "Question": "Which of the following is not a valid symbolic constant?",
        "Options": [
            "a) EPERM",
            "b) ENDENT",
            "c) EIOR",
            "d) EEXIST"
        ],
        "Answer": "Answer: b\nExplanation: The symbolic constant for errno 2 is ENDENT. It displays the message “no such file and directory”."
    },
    {
        "id": 701,
        "Question": "How many data structures does the kernel maintain in memory that contain information about an open file?",
        "Options": [
            "a) 3",
            "b) 2",
            "c) 5",
            "d) 1"
        ],
        "Answer": "Answer: c\nExplanation: EPERM displays not a super user (errno 1), ENDENT displays no such file or directory (errno 2), EEXIST displays file exist (errno 17)."
    },
    {
        "id": 702,
        "Question": "The file table contains _________",
        "Options": [
            "a) mode of opening",
            "b) status flags",
            "c) offset pointer, reference count",
            "d) mode of opening, status flags, offset printer and reference count"
        ],
        "Answer": "Answer: a\nExplanation: The kernel maintains three data structures in memory that contain all information about an open file that a process needs to access. These data structures are:\nThe file descriptor table\nThe file table\nThe vnode table "
    },
    {
        "id": 703,
        "Question": "The vnode table is also called _____",
        "Options": [
            "a) inode table",
            "b) file table",
            "c) vtable",
            "d) vttable"
        ],
        "Answer": "Answer: a\nExplanation: The file descriptor table contains all allocated file descriptors for a process. Each entry points to the file table. The file descriptor is stored along with a flag in this table. "
    },
    {
        "id": 704,
        "Question": "Which of the following system calls performs the action of cd command?",
        "Options": [
            "a) chdir",
            "b) fchdir",
            "c) mkdir",
            "d) chdir and fchdir"
        ],
        "Answer": "Answer: d\nExplanation: Every entry in the file descriptor table points to a file table. This table contains all the data which is relevant to an opened file.  "
    },
    {
        "id": 705,
        "Question": "For creating and removing directories, which of the following system calls are used?",
        "Options": [
            "a) mkdir",
            "b) rmdir",
            "c) chdir",
            "d) mkdir and rmdir"
        ],
        "Answer": "Answer: a\nExplanation: The file table contains a pointer to the vnode table, which is the third table in the scheme. It is also called as inode table. This table contains all the information present in the inode except that this structure is maintained in memory."
    },
    {
        "id": 706,
        "Question": "A super user can use ___ call for creating a directory.",
        "Options": [
            "a) mknod",
            "b) mkdr",
            "c) rmdir",
            "d) chdir"
        ],
        "Answer": "Answer: d\nExplanation: There are two system calls that perform the action of cd command. They are chdir and fchdir which uses pathname and a file descriptor respectively as an argument."
    },
    {
        "id": 707,
        "Question": "For creating a hard and symbolic link, which system calls are used?",
        "Options": [
            "a) link, unlink",
            "b) link, symlink",
            "c) unlink, ulink",
            "d) hlink, slink"
        ],
        "Answer": "Answer: a\nExplanation: Directories are also files, and they can also be written, read and opened in the same way as regular files. We can use open, close and read system calls for performing these tasks."
    },
    {
        "id": 708,
        "Question": "For removing a link, ____ is used.",
        "Options": [
            "a) link",
            "b) symlink",
            "c) unlink",
            "d) delink"
        ],
        "Answer": "Answer: d\nExplanation: A non privileged user uses mkdir and rmdir calls for creating and removing directories respectively."
    },
    {
        "id": 709,
        "Question": "____ system call is used for renaming a file, directory or symbolic link.",
        "Options": [
            "a) renam",
            "b) rename",
            "c) ren",
            "d) change"
        ],
        "Answer": "Answer: b\nExplanation: The rename call is used for renaming any type of file. It can rename a file, a directory or a symbolic link. "
    },
    {
        "id": 710,
        "Question": "Which of the following macro returns true if the file type is a directory?",
        "Options": [
            "a) S_ISREG",
            "b) S_ISDIR",
            "c) S_ISCHR",
            "d) S_ISFIFO"
        ],
        "Answer": "Answer: a\nExplanation: All UNIX systems provide a set of macros beginning with S_IF (often called S_IFxxx macros) that provide us with a function of checking the file type. But modern UNIX system performs this task in a more simplified manner using S_ISxxx macros."
    },
    {
        "id": 711,
        "Question": "For checking a file access rights, ___ system call is used.",
        "Options": [
            "a) acc",
            "b) access",
            "c) axs",
            "d) filert"
        ],
        "Answer": "Answer: b\nExplanation: The S_ISDIR macro returns true if the file type is a directory. The S_ISREG returns true if the file type is regular."
    },
    {
        "id": 712,
        "Question": "Which of the following is used with access call for checking the owner’s permissions?",
        "Options": [
            "a) R_OK",
            "b) W_OK",
            "c) X_OK",
            "d) R_OK, W_OK, X_OK"
        ],
        "Answer": "Answer: b\nExplanation: By using the access system call, we can check the file’s access rights. It looks at the real UID and real GID of the user running the program and determines that whether the file is accessible by the real user."
    },
    {
        "id": 713,
        "Question": "Both the owner and group owner can be changed by ____ call.",
        "Options": [
            "a) chown",
            "b) chgrp",
            "c) chuser",
            "d) ch"
        ],
        "Answer": "Answer: d\nExplanation: By using the access system call, we can check the file’s access rights. We’ve to specify one of the following four values to define the permission which is needed to be tested.\n\n\n        \n\nR_OK    -    read permission OK\nW_OK    -    write permission OK\nX_OK    -     execution permission OK\nF_OK    -    file exists\n\n\n "
    },
    {
        "id": 714,
        "Question": "For changing the time stamps, _____ system call is invoked.",
        "Options": [
            "a) atime",
            "b) utime",
            "c) mtime",
            "d) ch"
        ],
        "Answer": "Answer: a\nExplanation: chmod and fchmod calls are used for changing the file permissions. Chmod uses pathname for identifying a file while fchmod uses the file descriptor."
    },
    {
        "id": 715,
        "Question": "Which of the following system call uses file descriptor as an argument?",
        "Options": [
            "a) read",
            "b) write",
            "c) close",
            "d) read, write, close"
        ],
        "Answer": "Answer: a\nExplanation: The chown system call is used to change both the owner and group owner. It has three states; chown, fchown, lchown."
    },
    {
        "id": 716,
        "Question": "The collection of memory locations that the process can access is called _______",
        "Options": [
            "a) process table",
            "b) process space",
            "c) virtual address space",
            "d) virtual space"
        ],
        "Answer": "Answer: a\nExplanation: UNIX supports preemptive multitasking, which means that the kernel pre-empts the process when its time period expires."
    },
    {
        "id": 717,
        "Question": "The virtual address space consists of ____ segments.",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 3",
            "d) 2"
        ],
        "Answer": "Answer: c\nExplanation: Processes have their origin in executable program files on disk. The collection of memory locations that a process can access is called virtual address space. It is organized into a number of segments."
    },
    {
        "id": 718,
        "Question": "The segment representing the constants, globals and static variables is called:",
        "Options": [
            "a) text segment",
            "b) data segment",
            "c) stack",
            "d) heap"
        ],
        "Answer": "Answer: b\nExplanation: The virtual address space consists of a number of segments which are:\n•    Text segment\n•    Data segment\n•    Stack\n•    Heap\n•    Command line arguments and environment variables. "
    },
    {
        "id": 719,
        "Question": "The stack stores the _______",
        "Options": [
            "a) arguments and local variables",
            "b) address to return to",
            "c) global variables",
            "d) arguments and local variables and address to return"
        ],
        "Answer": "Answer: b\nExplanation: The segment representing the constants, globals and static variables which are used in the program is called data segment."
    },
    {
        "id": 720,
        "Question": "The attributes of every process are stored in ____",
        "Options": [
            "a) data table",
            "b) inode table",
            "c) process table",
            "d) heap"
        ],
        "Answer": "Answer: d\nExplanation: The stack stores the arguments and the local variables of function as well as the address to return to. It grows and shrinks in size as functions are involved and complete execution."
    },
    {
        "id": 721,
        "Question": "The entire process life cycle is built around ___ system calls.",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 2",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: The attributes of a process are stored in a fairly large data structure that represents an entry in the process table."
    },
    {
        "id": 722,
        "Question": "Which of the following system call is used for replicating a process?",
        "Options": [
            "a) fork",
            "b) exec",
            "c) wait",
            "d) _exit"
        ],
        "Answer": "Answer: b\nExplanation: The entire process life cycle is built around four system calls – fork, exec (not actually a system call), wait and _exit."
    },
    {
        "id": 723,
        "Question": "Which of the following functions is used for handling environment variables of a process?",
        "Options": [
            "a) getenv",
            "b) setenv",
            "c) letenv",
            "d) getenv and setenv"
        ],
        "Answer": "Answer: a\nExplanation: The forking mechanism of process creation uses the fork system call to create a process. Each process is assigned a PID which is used for process handling purposes."
    },
    {
        "id": 724,
        "Question": "The parent process picks up the exit status of a child using ___ system call.",
        "Options": [
            "a) wait",
            "b) waitp",
            "c) exec",
            "d) kill"
        ],
        "Answer": "Answer: d\nExplanation: Forking mechanism also transmits the parent’s environment to the child since environment variables are constituents of parent’s address space. POSIX specifies two functions getenv and setenv for handlings environment variables."
    },
    {
        "id": 725,
        "Question": "Which of the following system call is more powerful (in waiting mechanism) than wait system call?",
        "Options": [
            "a) waitp",
            "b) waitpid",
            "c) kill",
            "d) run"
        ],
        "Answer": "Answer: a\nExplanation: If we place the exit or _exit system call anywhere in the program, the process will terminate as soon as that statement is executed."
    },
    {
        "id": 726,
        "Question": "If the child dies first but the entry of that child in the process table is still present, then that process is called ____",
        "Options": [
            "a) orphan",
            "b) zombie",
            "c) termin",
            "d) daemon"
        ],
        "Answer": "Answer: a\nExplanation: exit and _exit are one of the four basic system calls used in the process life cycle. They both share an identical syntax.\n\n\nvoid _exit (int status;)\nvoid exit (int status);\n\n\n     "
    },
    {
        "id": 727,
        "Question": "Which of the following system call is used for duplicating file descriptor?",
        "Options": [
            "a) dup",
            "b) decr",
            "c) exec",
            "d) execv"
        ],
        "Answer": "Answer: a\nExplanation: If we want to run a separate program in a forked process, it is done by exec. This operation replaces the entire address space with that of a new program. In other words, the fork is responsible for creating a process but it actually the exec that executes the program on a UNIX system."
    },
    {
        "id": 728,
        "Question": "We can also duplicate the file descriptor using ___",
        "Options": [
            "a) dup1",
            "b) dup2",
            "c) exevr",
            "d) exec"
        ],
        "Answer": "Answer: a\nExplanation: The dup system call supplicates the file descriptor fields and returns the lowest number available for allocation."
    },
    {
        "id": 729,
        "Question": "Which of the following system call is preferred over dup and dup2 for replicating file descriptor?",
        "Options": [
            "a) dup3",
            "b) fcn",
            "c) fcntl",
            "d) exec"
        ],
        "Answer": "Answer: b\nExplanation: Sometimes, dup call can fail in duplicating a file descriptor. In that case, the dup2 system call is used which provides a better way of replicating file descriptor."
    },
    {
        "id": 730,
        "Question": "Which of the following system call is used for inter-process communication?",
        "Options": [
            "a) fork",
            "b) pipe",
            "c) fcntl",
            "d) exec"
        ],
        "Answer": "Answer: c\nExplanation: POSIX calls dup and dup2 “redundant” functions and advocates the use of fcntl system call."
    },
    {
        "id": 731,
        "Question": "The action that a signal takes on receipt of a signal is called ____",
        "Options": [
            "a) reposition",
            "b) disposition",
            "c) composition",
            "d) event"
        ],
        "Answer": "Answer: b\nExplanation: UNIX has a very elaborative scheme for two processes to communicate with each other. Pipe is a system call which provides a half-duplex communication channel. Pipe takes an array of two integers as its only argument, which it populates with two file descriptors."
    },
    {
        "id": 732,
        "Question": "The sources from where the signals can be generated are:",
        "Options": [
            "a) keyboard",
            "b) hardware",
            "c) a C program",
            "d) keyboard, hardware, a C program"
        ],
        "Answer": "Answer: a\nExplanation: To make pipe work in tandem with fork, the usual procedure is to create the pipe before forking the process."
    },
    {
        "id": 733,
        "Question": "There are _____ signals that are generated from the keyboard.",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 1",
            "d) 5"
        ],
        "Answer": "Answer: b\nExplanation: A signal is represented by an integer and its symbolic name. A signal is a mechanism used by the kernel to communicate the occurrence of an event to a process. The action that a signal takes on receipt of a signal is called disposition."
    },
    {
        "id": 734,
        "Question": "Which of the following signals are generated from the hardware?",
        "Options": [
            "a) SIGFPE",
            "b) SIGILL",
            "c) SIGSEGV",
            "d) SIGPE, SIGILL, SIGSEGV"
        ],
        "Answer": "Answer: d\nExplanation: The event that generates the signal can take place in the hardware, in the OS or elsewhere. It can be generated from the keyboard eg; SIGINT signal or it can be generated from the hardware eg; SIGILL."
    },
    {
        "id": 735,
        "Question": "___ system call behaves in an identical manner to the kill command.",
        "Options": [
            "a) alarm",
            "b) kill",
            "c) pause",
            "d) signal"
        ],
        "Answer": "Answer: b\nExplanation: kill system call behaves in an identical manner to the kill command. kill sends a signal but doesn’t necessarily kill a process. "
    },
    {
        "id": 736,
        "Question": "Which library function uses kill to send any signal to the current process?",
        "Options": [
            "a) getc",
            "b) raise",
            "c) catch",
            "d) try"
        ],
        "Answer": "Answer: b\nExplanation: kill sends a signal but doesn’t necessarily kill a process. Kill system call is used by the library function raise to send any signal to the current process."
    },
    {
        "id": 737,
        "Question": "Which system call is used to set a timer that generates the SIGALARM signal?",
        "Options": [
            "a) pause",
            "b) alarm",
            "c) read",
            "d) signal"
        ],
        "Answer": "Answer: b\nExplanation: The alarm call is used to set a timer that generates the SIGALRM signal after the timeout period."
    },
    {
        "id": 738,
        "Question": "Which of the following system calls returns one or more file descriptors?",
        "Options": [
            "a) dup, dup2",
            "b) fcntl",
            "c) pipe",
            "d) dup, dup2, fcntl and pipe"
        ],
        "Answer": "Answer: b\nExplanation: If two users execute the same program then memory requirements are not doubled, the text segment in the virtual address space is shared."
    },
    {
        "id": 739,
        "Question": "The environment variables are available in _____",
        "Options": [
            "a) *environ[ ]          ",
            "b) env[ ]          ",
            "c) env          ",
            "d) pipe"
        ],
        "Answer": "Answer: a\nExplanation: We say that the address space of a process is virtual because the address specified in the executable doesn’t point to the actual memory location. The virtual addresses are translated into a physical address at runtime by memory management unit (MMU)."
    },
    {
        "id": 740,
        "Question": "Which of the following functions are used for obtaining and setting the value of environment variables?",
        "Options": [
            "a) getenv",
            "b) setenv",
            "c) env",
            "d) getenv and setenv"
        ],
        "Answer": "Answer: d\nExplanation: dup, dup2, fcntl and pipe are the system calls which returns one or more file descriptors when invoked."
    },
    {
        "id": 741,
        "Question": "Which of the following action can be taken by a process upon receiving a signal?",
        "Options": [
            "a) ignore the signal",
            "b) terminate the process",
            "c) suspend the process",
            "d) ignore the signal, terminate and suspend the process"
        ],
        "Answer": "Answer: a\nExplanation: The environment variables transmitted from parent process to child are available in environ[ ] variable."
    },
    {
        "id": 742,
        "Question": "What is the default disposition of most signals?",
        "Options": [
            "a) ignore the signal",
            "b) terminate the process",
            "c) suspend the process",
            "d) kill the signal"
        ],
        "Answer": "Answer: d\nExplanation: The environment variables transmitted from parent process to child are available in environ[ ] variable. POSIX specifies two functions, getenv and setenv to obtain and set these values."
    },
    {
        "id": 743,
        "Question": "Which of the following resources are required to be managed and monitored?",
        "Options": [
            "a) CPU time",
            "b) I/O time",
            "c) Disk space",
            "d) CPU time, I/O time, disk space"
        ],
        "Answer": "Answer: d\nExplanation: A typical UNIX system has some major resources that are required to be monitored. These resources include CPU time, I/O time, disk space, network time. There are many tools available which provides us with guidelines on how to diagnose and fix performance problems."
    },
    {
        "id": 744,
        "Question": "System time comprises ____ components.",
        "Options": [
            "a) 5",
            "b) 4",
            "c) 3",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: There are five major components which take up the system time. These are -User state CPU, system state CPU, I/O time and network time, virtual memory performance, application program."
    },
    {
        "id": 745,
        "Question": "Which command is used to display all the running and active real-time processes?",
        "Options": [
            "a) tp",
            "b) top",
            "c) vmstat",
            "d) lsof"
        ],
        "Answer": "Answer: b\nExplanation: top command is system monitoring program which is used to display all the running and active real-time process. It displays CPU usage, memory usage, swap memory, cache size, buffer size, process PID and much more."
    },
    {
        "id": 746,
        "Question": "____ command displays the list of all open files and processes.",
        "Options": [
            "a) top",
            "b) lsof",
            "c) vmstat",
            "d) pipe"
        ],
        "Answer": "Answer: b\nExplanation: lsof command is a system monitoring program which displays the list of all open files and processes. The open file includes pipe, devices, network sockets, disk files, processes."
    },
    {
        "id": 747,
        "Question": "____ is a simple tool that will collect and show system input and output storage device statistics.",
        "Options": [
            "a) top",
            "b) lsof",
            "c) vmstat",
            "d) Iostat"
        ],
        "Answer": "Answer: d\nExplanation: Iostat is a system monitoring tool which is used to display system input and output storage device statistics."
    },
    {
        "id": 748,
        "Question": "To override the default action and catch the signal ____ system call is used.",
        "Options": [
            "a) sig",
            "b) SIGKILL",
            "c) signal",
            "d) SIGINT"
        ],
        "Answer": "Answer: a\nExplanation: sar is a command line tool for collecting, viewing and recording performance data. Sar (system activity report) is used to report on various system loads, including system loads, CPU activity, memory/paging, device load, network."
    },
    {
        "id": 749,
        "Question": "Which of the following functions can be performed using signal system call?",
        "Options": [
            "a) ignore the signal",
            "b) restore the default",
            "c) invoke a signal handling function",
            "d) ignore the signal, restore the default and invoke a signal handling function"
        ],
        "Answer": "Answer: c\nExplanation: The default disposition of a signal is to terminate the process. However, we can override the default action and catch the signal using system call using the signal system call. Using signal system call."
    },
    {
        "id": 750,
        "Question": "Which of the following signals can neither be ignored nor catch?",
        "Options": [
            "a) SIGKILL",
            "b) SIGSTOP",
            "c) SIGKILL and SIGSTOP",
            "d) SIGALR"
        ],
        "Answer": "Answer: d\nExplanation: signal system call doesn’t generate any signal but only specifies its disposition. Using signal call we can either ignore the signal, restore the default (if it was changed earlier) or invoke a signal handling function."
    }
]