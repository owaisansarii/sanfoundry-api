[
    {
        "id": 1,
        "Question": "What is the full form of VHDL?",
        "Options": [
            "a) Verilog Hardware Description Language",
            "b) Very High speed Description Language",
            "c) Variable Hardware Description Language",
            "d) Very high speed Hardware Description Language"
        ],
        "Answer": "Answer: d\nExplanation: Most people confuse Verilog Hardware Description Language with VHDL but, VHDL means VHSIC Hardware Description Language where VHSIC is the acronym for Very High Speed Integrated Circuits."
    },
    {
        "id": 2,
        "Question": "What is the basic use of EDA tools?",
        "Options": [
            "a) Communication of Electronic devices",
            "b) Fabrication of Electronics hardware",
            "c) Electronic circuits simulation and synthesis",
            "d) Industrial automation"
        ],
        "Answer": "Answer: c\nExplanation: EDA expands to Electronic Design Automation and these tools are used for synthesis, implementation and simulation of Electronic circuits on the software itself."
    },
    {
        "id": 3,
        "Question": "After compiling VHDL code with any EDA tool, we get __________",
        "Options": [
            "a) Final device",
            "b) FPGA",
            "c) Optimized netlist",
            "d) Netlist"
        ],
        "Answer": "Answer: d\nExplanation: After entering the code into any EDA tool, we need to compile the code. When the compilation is complete, then we get the complete netlist of the system designed by using VHDL. After which optimization process is used to optimize the netlist and then by placement and routing we get final Physical device."
    },
    {
        "id": 4,
        "Question": "Which of the following is not an EDA tool?",
        "Options": [
            "a)  Visual C++",
            "b) Quartus II",
            "c) Xilinx ISE",
            "d) MaxPlus II"
        ],
        "Answer": "Answer: a\nExplanation: Quartus II EDA tool is used for Altera CPLD and FPGA devices. Similarly, Xilinx ISE is used for Xilinx CPLD/FPGA devices. MaxPlus is also an advanced EDA tool for Altera CPLDs. Visual C++ is the compiler for C and C++ languages."
    },
    {
        "id": 5,
        "Question": "The process of transforming a design entry information of the circuit into a set of logic equations in any EDA tool is known as _________",
        "Options": [
            "a) Simulation",
            "b) Synthesis",
            "c) Optimization",
            "d) Verification"
        ],
        "Answer": "Answer: b\nExplanation: Synthesis means to generate netlist, i.e. describing the circuit by the relation between inputs and outputs by using logic equations. Simulation is whereas to check the correctness of VHDL code and Optimization is to optimize the netlist; optimization is performed after the synthesis. Verification similarly uses different EDA tool to perform gate level verification."
    },
    {
        "id": 6,
        "Question": "An Antifuse programming technology is associated with _________",
        "Options": [
            "a) CPLDs",
            "b) FPGAs",
            "c) SPLDs",
            "d) ASICs"
        ],
        "Answer": "Answer: a\nExplanation: Place and Route tools are used to take the netlist and implement it on the target device by taking various factors into consideration like Timing constraints and some device information."
    },
    {
        "id": 7,
        "Question": "Which of the following is not a back end EDA tool?",
        "Options": [
            "a) Floor planning tools",
            "b) Placement tools",
            "c) Routing tools",
            "d) Simulators"
        ],
        "Answer": "Answer: b\nExplanation: Antifuse technology is used to burn the information, from place and route tools, into appropriate fuses in the FPGAs."
    },
    {
        "id": 8,
        "Question": "What are the differences between simulation tools and synthesis tool?",
        "Options": [
            "a) Simulators are used to check the performance of circuit and Synthesis tools are for the fabrication of circuits",
            "b) Simulators and Synthesis tools works exactly same",
            "c) Simulators are used just to check basic functionality of the circuit and Synthesis tools includes timing constraints and other factors along with simulation",
            "d) Simulation finds the error in the code and Synthesis tool corrects the code"
        ],
        "Answer": "Answer: d\nExplanation: Simulators are the tools which are used at the front end and all other tools are used at the back end."
    },
    {
        "id": 9,
        "Question": "What is the extension of the netlist file; input to the place and route EDA tools?",
        "Options": [
            "a) EIDF",
            "b) SDF",
            "c) TXT",
            "d) CPP"
        ],
        "Answer": "Answer: c\nExplanation: Simulators test basic logic and working of the circuit described in the code and Synthesis allows to take timing factor and other factors into consideration while simulation. "
    },
    {
        "id": 10,
        "Question": "In what aspect, HDLs differ from other computer programming languages?",
        "Options": [
            "a) No aspect; both are same",
            "b) HDLs describe hardware rather than executing a program on a computer",
            "c) HDLs describe software and not hardware",
            "d) Other computer programming languages have more complexity"
        ],
        "Answer": "Answer: b\nExplanation: HDLs (Hardware Description Languages) are used to describe hardware for any electronic circuit or system; whereas other computer programming languages execute a program on the computer itself."
    },
    {
        "id": 11,
        "Question": "Which of the following HDLs are IEEE standards?",
        "Options": [
            "a) VHDL and Verilog",
            "b) C and C++",
            "c) Altera and Xilinx",
            "d) Quartus II and MaxPlus II"
        ],
        "Answer": "Answer: a\nExplanation: VHDL and Verilog are the only two HDLs endorsed by IEEE. C andC++ are not HDLs. Altera and Xilinx are devices on which these HDLs can be used. Quartus II and MaxPlus II are the platforms for simulation of hardware described by HDLs."
    },
    {
        "id": 12,
        "Question": "Why we needed HDLs while having many traditional Programming languages?",
        "Options": [
            "a) Traditional programming languages are complex",
            "b) HDLs are complementary to traditional programming languages to complete the design process",
            "c) Some characteristics of digital hardware couldn’t be captured by traditional languages",
            "d) HDLs offer more complexity than traditional programming languages."
        ],
        "Answer": "Answer: c\nExplanation: Digital systems are very complex and this complexity is increasing day by day. Some characteristics like propagation delay, concurrent processing and interconnection of parts can’t be captured with traditional languages."
    },
    {
        "id": 13,
        "Question": "Why do we need concurrent processing for describing digital systems in HDLs?",
        "Options": [
            "a) Faster processing than conventional programming languages",
            "b) Concurrent processing is easier than sequential processing",
            "c) It allows taking timing constraints into consideration",
            "d) Complexity of digital systems needs concurrent processing"
        ],
        "Answer": "Answer: b\nExplanation: An HDL supports the hierarchical design process. It can describe the circuit or hardware at every possible level, whether it is gate level or switch level or RTL level."
    },
    {
        "id": 14,
        "Question": "VHDL is based on which of the following programming languages?",
        "Options": [
            "a) ADA programming language",
            "b) C",
            "c) Assembly",
            "d) PHP"
        ],
        "Answer": "Answer: d\nExplanation: Due to the complexity of digital circuits, we need to process all the instructions at the same time. For example, current can flow in the two branches at the same time which can affect the output of the system, if sequentially processed."
    },
    {
        "id": 15,
        "Question": "What is the advantage of using VHDL instead of any other HDL?",
        "Options": [
            "a) Week typing",
            "b) Based on ADA",
            "c) Portability",
            "d) Easy to code"
        ],
        "Answer": "Answer: b\nExplanation: By using HDL, we specify what we need. We can optimize the circuit by using HDLs. ASIC(Application Specific IC) is a very complex which may consist of millions of transistors. So, we need concurrent execution first of all. Apart from that, we need timing information and other complex features of the digital system too."
    },
    {
        "id": 16,
        "Question": "Which of the following is a characteristic of VHDL?",
        "Options": [
            "a) Case sensitive",
            "b) Use of simple data types",
            "c) Based on C programming language",
            "d) Strongly typed language"
        ],
        "Answer": "Answer: a\nExplanation: The syntax and whole structure of VHDL code is based upon ADA programming language whereas Verilog HDL finds its origin from C language."
    },
    {
        "id": 17,
        "Question": "Which of the following is a characteristic of Verilog HDL?",
        "Options": [
            "a) Strongly typed language",
            "b) Case sensitive",
            "c) Better library",
            "d) Not portable"
        ],
        "Answer": "Answer: c\nExplanation: A circuit specified in VHDL can be implemented in different chips and is compatible with CAD tools provided by all companies. Therefore, without any modification, we can use VHDL code anywhere. This is the biggest advantage because digital circuit technology changes rapidly."
    },
    {
        "id": 18,
        "Question": "Which of the following is the basic building block of a design?",
        "Options": [
            "a) Architecture",
            "b) Entity",
            "c) Process",
            "d) Package"
        ],
        "Answer": "Answer: b\nExplanation: Entity is the basic building block; all the information regarding input and output of the circuit to be designed is declared in Entity."
    },
    {
        "id": 19,
        "Question": "A package in VHDL consists of _________",
        "Options": [
            "a) Commonly used architectures",
            "b) Commonly used tools",
            "c) Commonly used data types and subroutines",
            "d) Commonly used syntax and variables"
        ],
        "Answer": "Answer: c\nExplanation: Package is a collection of all the commonly used data types and subroutines so that programmers can easily use them in their design without defining the same functions again and again."
    },
    {
        "id": 20,
        "Question": "Complete description of the circuit to be designed is given in _________",
        "Options": [
            "a) Architecture",
            "b) Entity",
            "c) Library",
            "d) Configurations"
        ],
        "Answer": "Answer: a\nExplanation: Architecture completely describes the circuit; while entity describes just the input and output of the design. Architecture may describe the behavior of the circuit or its structure."
    },
    {
        "id": 21,
        "Question": "What is the use of the Configuration statement?",
        "Options": [
            "a) To configure the components exactly in design",
            "b) To complete the design process by adding libraries",
            "c) To add more than one entities into a single architecture",
            "d) To add some component in any entity architecture pair"
        ],
        "Answer": "Answer: a\nExplanation: Yes, An entity can have more than one architecture. One may define its behaviour and other may define its structure or dataflow. But, the converse of this statement is not true i.e. One architecture can’t define more than one entities."
    },
    {
        "id": 22,
        "Question": "In VHDL, Bus is a type of ________",
        "Options": [
            "a) Signal",
            "b) Constant",
            "c) Variable",
            "d) Driver"
        ],
        "Answer": "Answer: d\nExplanation: Configuration statement is used to bind any component instance with entity architecture pair. It is used to describe the behavior, which is used in almost each entity. "
    },
    {
        "id": 23,
        "Question": "What is the use of Generics in VHDL?",
        "Options": [
            "a) To turn on and off the drivers",
            "b) To pass information to the entity",
            "c) To describe architecture",
            "d) To divide code into small processes"
        ],
        "Answer": "Answer: a\nExplanation: Bus is a special kind of signal. It may have its drivers turned off."
    },
    {
        "id": 24,
        "Question": "Driver can be seen as a _______ of the signal.",
        "Options": [
            "a) Part",
            "b) Type",
            "c) Final value",
            "d) Source"
        ],
        "Answer": "Answer: b\nExplanation: Generics are used to pass the information to entity through parameters. In short, Generics are parameters which passes information to entity. For example, entity has variables for rise time and fall time delay; then the values for both delays can be passed by using Generics. "
    },
    {
        "id": 25,
        "Question": "Predefined data for an VHDL object is called ________",
        "Options": [
            "a) Generic",
            "b) Constant",
            "c) Attribute",
            "d) Library"
        ],
        "Answer": "Answer: d\nExplanation: Driver is a source on the signal. All of the signals are driven by their Drivers. Any signal may have more than one driver too."
    },
    {
        "id": 26,
        "Question": "Which of the following describes the structure of VHDL code correctly?",
        "Options": [
            "a) Library Declaration; Entity Declaration; Architecture Declaration; Configurations",
            "b) Entity Declaration; Configuration; Library Declaration; Architecture Declaration",
            "c) Configuration; Library Declaration; Entity Declaration; Architecture Declaration",
            "d) Library Declaration; Configuration; Entity Declaration; Architecture Declaration"
        ],
        "Answer": "Answer: c\nExplanation: Attribute is the predefined datatype associated with any VHDL object. For example, operating temperature of any device will be its attribute."
    },
    {
        "id": 27,
        "Question": "Which of the following statement is true?",
        "Options": [
            "a) Package is a collection of Libraries",
            "b) Library is a collection of Packages",
            "c) Entity is a collection of Packages",
            "d) Architecture is a collection of Entities"
        ],
        "Answer": "Answer: a\nExplanation: All the operations in the VHDL description are divided into processes during simulation and therefore, Process is the basic unit of execution."
    },
    {
        "id": 28,
        "Question": "Which of the following is used at the end of a statement?",
        "Options": [
            "a) ; (Semicolon)",
            "b) — ( double hyphen)",
            "c) _ (underscore)",
            "d) No sign is used at the end of statement"
        ],
        "Answer": "Answer: a\nExplanation: In any VHDL code, first of all, we have to define libraries and packages we want to use. After Library Declaration part, Entities are declared. When Entities are created, then only we can describe its architecture. Last part in any VHDL code is Configuration."
    },
    {
        "id": 29,
        "Question": "Which of the following is not defined by the entity?",
        "Options": [
            "a) Direction of any signal",
            "b) Names of signal",
            "c) Different ports",
            "d) Behavior of the signals"
        ],
        "Answer": "Answer: d\nExplanation: Entity specifies the name of the entity, the ports of the entity and all the information related to that entity. All designs are created using one or more entities. Declaration of ports in an entity includes the name of signals and there directions."
    },
    {
        "id": 30,
        "Question": "Which of the following can be the name of an entity?",
        "Options": [
            "a) NAND",
            "b) Nand_gate",
            "c) Nand gate",
            "d) AND"
        ],
        "Answer": "Answer: b\nExplanation: The name of entity can be basically any name, except VHDL reserved words. NAND is reserved for nand operation and same applies for AND. The name of entity can’t contain any space character. Therefore, only option b is the only legal word."
    },
    {
        "id": 31,
        "Question": "4. Refer to the VHDL code given below, how many input-output pins are there in MUX entity?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> mux <span class=\"kw1\">IS</span>\n<span class=\"kw1\">Port</span> <span class=\"br0\">(</span> a,b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nY <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> mux<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 4",
            "c) 3",
            "d) 2"
        ],
        "Answer": "Answer: a\nExplanation: The correct syntax for declaring an entity block starts with reserve word ENTITY followed by name of entity and the next is reserve word IS. Name of entity can contain letters, numbers and underscore character. After this, PORT declaration is used. PORT declaration is used to declare the interface signals for the entity and to assign mode and type of data. The declaration is completed by using END operator and the entity name."
    },
    {
        "id": 32,
        "Question": "Which of the following mode of the signal is bidirectional?",
        "Options": [
            "a) IN",
            "b) OUT",
            "c) INOUT",
            "d) BUFFER"
        ],
        "Answer": "Answer: c\nExplanation: In the given declaration, entity has 3 I/O pins. The signals a and b are Input signals and y is the output signal. So, we can say that the declaration is for 2:1 MUX. In this way, we can find the number of I/O pins from the entity declaration."
    },
    {
        "id": 33,
        "Question": "In an assignment statement, OUT signal can be used only to the ___________",
        "Options": [
            "a) Left of <= operator",
            "b) Right of <= operator",
            "c) Any side of <= operator",
            "d) Right of := operator"
        ],
        "Answer": "Answer: a\nExplanation: VHDL is a strongly typed language which means that there are very strict rules regarding the data types. But, there is no difference between names of entity. VHDL is not case sensitive therefore, ‘xyz’ and ‘XYZ’ are same."
    },
    {
        "id": 34,
        "Question": "On which side of assignment operator, we can use the IN type signal?",
        "Options": [
            "a) Left",
            "b) Right",
            "c) Both",
            "d) Can’t be used"
        ],
        "Answer": "Answer: c\nExplanation: INOUT is the only bidirectional mode for any signal. IN, OUT and BUFFER are unidirectional mode since they specifies the type to be either input or output. INOUT can be used as both an input to an entity and as an output of the entity. We can read as well as assign the value for INOUT type signal."
    },
    {
        "id": 35,
        "Question": "What is the difference between OUT and BUFFER?",
        "Options": [
            "a) BUFFER can’t be used inside the entity for reading the value and OUT can be",
            "b) BUFFER can only be read whereas OUT can only be assigned a value",
            "c) BUFFER can be read as well as assigned a value but OUT can only be assigned",
            "d) Both are same"
        ],
        "Answer": "Answer: a\nExplanation: OUT signal is used to take an output from any entity. Therefore, we can assign it any value but can’t read any value from this type of signal. So, in an assignment statement, OUT type signal can be used on the left side of <= operator."
    },
    {
        "id": 36,
        "Question": "How to control the structure and timing of the entity can be changed?",
        "Options": [
            "a) By using TIME variable in the entity",
            "b) By changing the entity declaration from time to time",
            "c) By using some special code",
            "d) By using GENERICS"
        ],
        "Answer": "Answer: c\nExplanation: BUFFER is a unidirectional mode used as an output from the entity. But, the value of BUFFER can be used inside the entity i.e. it can appear on both sides of assignment operator whereas the value of OUT can’t be used inside the entity and can appear on the left side of assignment operator."
    },
    {
        "id": 37,
        "Question": "Which of the following can have more than one driver?",
        "Options": [
            "a) IN",
            "b) OUT",
            "c) INOUT",
            "d) BUFFER"
        ],
        "Answer": "Answer: b\nExplanation: The declaration of GENERICs is also done in the entity itself. It is used to declare the constants that can be used to control the structure of behavior of the entity. The Generics are declared before port declarations."
    },
    {
        "id": 38,
        "Question": "Which of the following is the default mode for a port variable?",
        "Options": [
            "a) IN",
            "b) OUT",
            "c) INOUT",
            "d) BUFFER"
        ],
        "Answer": "Answer: a\nExplanation: A full adder has three inputs and two outputs. Inputs are two bits to be added and some carry. Outputs are sum and carry. Therefore, option a shows the correct declaration of entity full_adder. In this, a and b are the bits to be added and c is the input carry whereas, s is the sum output and co is the carry output."
    },
    {
        "id": 39,
        "Question": "What does the architecture of an entity define?",
        "Options": [
            "a) External interface",
            "b) Internal functionality",
            "c) Ports of the entity",
            "d) Specifications"
        ],
        "Answer": "Answer: b\nExplanation: Basically, entity describes the interface to the VHDL model and its architecture describes the internal view of that entity. It describes the functionality and contains the statements which describe the behavior of entity."
    },
    {
        "id": 40,
        "Question": "What does the declarative part of architecture contain?",
        "Options": [
            "a) Declaration of another entity",
            "b) Declaration of libraries and packages",
            "c) Declaration of local signals, constants or subprograms",
            "d) Declaration of Architecture type"
        ],
        "Answer": "Answer: c\nExplanation: Declarative part is the optional part of architecture definition. In this section, the local signals, constants, variables or subprograms are declared which are needed in the architecture. The scope of variables declared in this region is limited to the architecture only."
    },
    {
        "id": 41,
        "Question": "The statements in between the keyword BEGIN and END are called _______",
        "Options": [
            "a) Concurrent statements",
            "b) Netlist",
            "c) Declaration statement",
            "d) Entity function"
        ],
        "Answer": "Answer: a\nExplanation: The proper word for the statements between BEGIN and END is Concurrent statements since they are executed concurrently. The code in between BEGIN and END describes the functionality or structure of the entity. BEGIN keyword specifies the starting of code."
    },
    {
        "id": 42,
        "Question": "Which of the following can be the name of an architecture?",
        "Options": [
            "a) arch 1",
            "b) 1arch",
            "c) arch_1",
            "d) architecture"
        ],
        "Answer": "Answer: c\nExplanation: The name of architecture is its identifier and hence, it will follow the same rule as that of identifiers. It may contain alphanumeric characters and underscore character starting with alphabet always. Also, name can’t be same as any of the reserved word of VHDL."
    },
    {
        "id": 43,
        "Question": "Which of the following can’t be declared in the declaration part of the architecture?",
        "Options": [
            "a) Signals",
            "b) Subprograms",
            "c) Components",
            "d) Libraries"
        ],
        "Answer": "Answer: b\nExplanation: It is false that an entity can’t have two or more architectures. An entity can be described by using more than one architecture. For an instance, one can define its behavior and another can explain its structure. However, the converse of the statement is not true, one architecture can describe only one entity."
    },
    {
        "id": 44,
        "Question": "Which of the following statements execute faster?",
        "Options": [
            "a) Sequential statements",
            "b) Concurrent statements",
            "c) Declaration statements",
            "d) Loop statements"
        ],
        "Answer": "Answer: d\nExplanation: In the declaration part of architecture, the local data objects and subprograms are defined which can be used in the architecture only. However, a library contains packages which are generally used in every VHDL model and they are declared globally at the starting of VHDL code."
    },
    {
        "id": 45,
        "Question": "SIGNED and UNSIGNED data types are defined in which package?",
        "Options": [
            "a) std_logic_1164 package",
            "b) std_logic package",
            "c) std_logic_arith package",
            "d) standard package"
        ],
        "Answer": "Answer: c\nExplanation: SIGNED and UNSIGNED data types are defined in the std_logic_arith package of the IEEE library. These data types are mainly intended for arithmetic operations. This is why they are defined in the arithmetic package."
    },
    {
        "id": 46,
        "Question": "What is the correct method to declare a SIGNED type signal ‘x’?",
        "Options": [
            "a) SIGNAL x : IN SIGNED",
            "b) SIGNAL x : IN SIGNED",
            "c) SIGNAL x : IN SIGNED (7 DOWNTO 0)",
            "d) SIGNAL x : IN SIGNED_VECTOR (7 DOWNTO 0)"
        ],
        "Answer": "Answer: c\nExplanation: Unlike BIT and STD_LOGIC types; SIGNED and UNSIGNED follow the syntax similar to BIT_VECTOR and STD_LOGIC_VECTOR. Also, IN and OUT are just to specify the direction of signal."
    },
    {
        "id": 47,
        "Question": "4. What will be the value of x in the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SIGNAL</span> x <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>\nx <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1101</span>”<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a)  12",
            "b) 5",
            "c) -5",
            "d) 14"
        ],
        "Answer": "Answer: a\nExplanation: In SIGNED and UNSIGNED, SIGN word refers to the positive or negative sign of any number. UNSIGNED data type has no sign and therefore, it is always positive. Therefore, an UNSIGNED number will be always greater than zero. "
    },
    {
        "id": 48,
        "Question": "5. What is the decimal equivalent of x in the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SIGNAL</span> x <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">SIGNED</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>\nx <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1101</span>”<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) -5",
            "b) 5",
            "c) -3",
            "d) -14"
        ],
        "Answer": "Answer: d\nExplanation: x is declared as an UNSIGNED data type. Therefore, all the 4 bits will be data bits and it will be positive. So, converting 1101 in decimal, we get 1101 equivalent to 14 in decimal number system. "
    },
    {
        "id": 49,
        "Question": "Which of the following option is completely legal, given that a and b are two UNSIGNED type signals?",
        "Options": [
            "a) x <= a + b; y <= a – b;",
            "b) x <= a OR b; y <= a AND b;",
            "c) x <= a + b; y <= a OR b;",
            "d) x <= a OR b; y <= a + b;"
        ],
        "Answer": "Answer: c\nExplanation: Signed numbers always have first bit representing the sign of the number which is one for the negative and zero for the positive. Also, signed number is represented in 2’s complement form. Therefore, the given number is -3."
    },
    {
        "id": 50,
        "Question": "If a and b are two STD_LOGIC_VECTOR input signals, then legal assignment for a and b is?",
        "Options": [
            "a) x <= a.b",
            "b) x <= a OR b",
            "c) x <= a + b",
            "d) x <= a && b"
        ],
        "Answer": "Answer: a\nExplanation: SIGNED and UNSIGNED data types are intended for arithmetic operations mainly and using logical operators with these data types is illegal. Therefore, only option x <= a + b; y <= a – b; is completely legal. In all other options there are logical operations so those can’t be considered as legal."
    },
    {
        "id": 51,
        "Question": "What do we call the data type used for representing distance, current, voltage, time, etc?",
        "Options": [
            "a) Integer",
            "b) Real",
            "c) Physical",
            "d) Imaginary"
        ],
        "Answer": "Answer: b\nExplanation: Unlike SIGNED and UNSIGNED, STD_LOGIC_VECTOR data type is used mainly for logical operations and we can’t use arithmetic operations with STD_LOGIC_VECTOR. Also, && is not the sign for any operation in VHDL, if you want to perform and operation, then you have to write AND not &&."
    },
    {
        "id": 52,
        "Question": "What is the meaning of the base unit?",
        "Options": [
            "a) Smallest possible unit of any physical literal",
            "b) SI unit of any physical literal",
            "c) CGS unit for any physical literal",
            "d) Fundamental building block of any design"
        ],
        "Answer": "Answer: c\nExplanation: Physical type is used for representing physical values such as time, voltage, etc. by using some base unit. Physical quantities are used in various digital systems and these are important for modelling such systems. Integer and Real are the data types for numbers and there is no data type called Imaginary."
    },
    {
        "id": 53,
        "Question": "Which of the following is only predefined physical literal in VHDL?",
        "Options": [
            "a) VOLTAGE",
            "b) TIME",
            "c) CURRENT",
            "d) DISTANCE"
        ],
        "Answer": "Answer: a\nExplanation: Base unit is the smallest possible unit for any physical literal by using which we can derive all other units of the same literal. For example, in case of TIME, the base unit is nanosecond. We can create any bigger unit by using nanoseconds. For example 1 microsecond = 1000 nanosecond. "
    },
    {
        "id": 54,
        "Question": "SIGNAL a : REAL; which of the following is illegal assignment for a?",
        "Options": [
            "a) a <= 1.8",
            "b) a <= 1.0 E10",
            "c) a <= 1.0 E-10",
            "d) a <=1.0 ns"
        ],
        "Answer": "Answer: b\nExplanation: TIME is the only predefined physical data type in VHDL. The base unit of TIME is nanosecond. TIME literal is defined in the standard package of std library. "
    },
    {
        "id": 55,
        "Question": "RECORD in VHDL is similar to________ in C.",
        "Options": [
            "a) Array",
            "b) File",
            "c) Structure",
            "d) Pointer"
        ],
        "Answer": "Answer: d\nExplanation: Units nanosecond (ns) written after the number shows that it is of type TIME and VHDL doesn’t allow TIME type to be assigned to a real Signal. So option d is illegal. "
    },
    {
        "id": 56,
        "Question": "What is the difference between SIGNAL and VARIABLE?",
        "Options": [
            "a) The value of SIGNAL never varies whereas VARIABLE can change its value",
            "b) SIGNAL can be used for input or output whereas VARIABLE acts as intermediate signals",
            "c) SIGNAL depends upon VARIABLE for various operations",
            "d) SIGNAL is global and VARIABLE is local to the process in which it is declared"
        ],
        "Answer": "Answer: a\nExplanation: Multidimensional arrays can be seen as array of arrays. For example, we need to implement ROM of 512×4 then we need to define a 2 dimensional array with 4 columns and 512 rows. So, memories can be defined by using 2D array. In which one dimension can show the size of memory and another can show the width of one word."
    },
    {
        "id": 57,
        "Question": "Access types are similar to _________ in traditional programming languages.",
        "Options": [
            "a) Pointers",
            "b) Arrays",
            "c) Structures",
            "d) Files"
        ],
        "Answer": "Answer: c\nExplanation: As in C, Structures are used to collect different data types under a common name. Similarly, RECORD type in VHDL is used for collecting different data types and objects in a single object."
    },
    {
        "id": 58,
        "Question": "How the keyword “TYPE” is used?",
        "Options": [
            "a) TYPE datatype_name IS type_from_predefined_datatypes;",
            "b) TYPE datatype_name IS datatype_range;",
            "c) TYPE datatype_range IS datatype_name;",
            "d) USE TYPE datatype_range IS datatype_name;"
        ],
        "Answer": "Answer: b\nExplanation: The keyword TYPE is used to define new data type if any user wants to define for its own. The syntax for keyword is- TYPE datatype_name IS datatype_range. So, the new data type can have the values defined in range section of the declaration."
    },
    {
        "id": 59,
        "Question": "Which of the following is a wrong declaration for a new data type?",
        "Options": [
            "a) TYPE my_logic IS RANGE 0 to 100;",
            "b) TYPE my_logic IS (‘0’, ‘1’, ‘2’);",
            "c) TYPE my_logic IS ARRAY (0 TO 3) OF BIT;",
            "d) TYPE my_logic IS  <0 TO 20 >"
        ],
        "Answer": "Answer: d\nExplanation: TYPE can be used in three forms as shown above. For defining range, there are two methods as illustrated in option TYPE my_logic IS RANGE 0 to 100; and option TYPE my_logic IS (‘0’, ‘1’, ‘2’);. If we want to define a user defined array then the sytanx like option TYPE my_logic IS ARRAY (0 TO 3) OF BIT; follows. But, we can’t define range by using <> sign."
    },
    {
        "id": 60,
        "Question": "A SUBTYPE can be defined as _________",
        "Options": [
            "a) A TYPE under a TYPE (nested)",
            "b) A type of INTEGER datatype",
            "c) A TYPE with some constraint",
            "d) A TYPE without any constraint"
        ],
        "Answer": "Answer: b\nExplanation: We can define an array without any constraints in VHDL. When there are no constraints in array then it can have any number of elements. For example, TYPE my_type IS ARRAY (RANGE <>) OF BIT; this declaration defines an array of BIT data type without any constraint on the number of elements in the array."
    },
    {
        "id": 61,
        "Question": "Which of the following is the correct syntax for declaring a SUBTYPE?",
        "Options": [
            "a) TYPE type_name IS type_range AND SUBTYPE subtype_name IS subtype_range",
            "b) SUBTYPE subtype_name IS subtype_range TYPE type_name",
            "c) SUBTYPE subtype_name TYPE type_name IS subtype_range",
            "d) SUBTYPE subtype_name IS TYPE subtype_range"
        ],
        "Answer": "Answer: c\nExplanation: A SUBTYPE is a TYPE with some constraints. TYPE can be predefined data type and it can also be any user defined data type. But if SUBTYPE is derived from user defined datatype, then we first have to declare the type along with its range and then subtype can be defined."
    },
    {
        "id": 62,
        "Question": "6. Which of the following can’t be the value of x? Refer to the VHDL code given below.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> color <span class=\"kw1\">IS</span> <span class=\"br0\">(</span>red, green, blue, black, white, gray<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SUBTYPE</span> primary <span class=\"kw1\">IS</span> color <span class=\"kw1\">RANGE</span> red <span class=\"kw1\">to</span> blue<span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> x<span class=\"sy0\">:</span> primary<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) White",
            "b) Red",
            "c) Green",
            "d) Blue"
        ],
        "Answer": "Answer: d\nExplanation: The correct way to define a SUBTYPE is the syntax shown in option d. For example, if we want to define a SUBTYPE of STD_LOGIC with 3 values only like X, 0 and 1. We can define it as SUBTYPE my _ subtype IS STD_LOGIC RANGE ‘X’ TO ‘1’."
    },
    {
        "id": 63,
        "Question": "How many total bits can be stored in these arrays?",
        "Options": [
            "a) 16",
            "b) 9",
            "c) 64",
            "d) 27"
        ],
        "Answer": "Answer: a\nExplanation: PRIMARY is a subtype of COLOR as declared in the code. The range of PRIMARY is declared “red” to “blue”. It means that an object of Primary type can have values red, green or blue. So White can’t be assigned to x."
    },
    {
        "id": 64,
        "Question": "8. Refer to the four declarations below, which of the following is not a 2 dimensional array?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> array1 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">TYPE</span> array2 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">TYPE</span> array3 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>  <span class=\"kw1\">OF</span> array2<span class=\"sy0\">;</span>\n<span class=\"kw1\">TYPE</span> array4 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) array4",
            "b) array3",
            "c) array2",
            "d) array1"
        ],
        "Answer": "Answer: c\nExplanation: First of all, array1 is array of BIT_VECTOR type that means it contains 4 BIT_VECTOR. One BIT_VECTOR is here declared to be consisting of 4 bits. Therefore, Array 1 can have 16 bits. Now, array2 is an array of 4 array1. Therefore, total bits are 4 × 16 = 64."
    },
    {
        "id": 65,
        "Question": "Which of the following is a SUBTYPE of INTEGER?",
        "Options": [
            "a) NATURAL",
            "b) REAL",
            "c) CHARACTER",
            "d) STD_LOGIC"
        ],
        "Answer": "Answer: b\nExplanation: Here, array1 is a 2-D array with 4 rows and 2 columns (3 DOWNTO 0 and 1 DOWNTO 0) of STD_LOGIC type. Though, array2 declaration looks like 1D array, but it is 2D array, since it is of type STD_LOGIC_VECTOR, which is already a 1D array, so array2 is a 2D array. Similarly array4 is 4 × 4 matrix. But, array3 is a 3D array. Because it is 1D array of 2D array named as array2."
    },
    {
        "id": 66,
        "Question": "1. Refer to the VHDL code given below, which of the following line has error?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw2\">Line</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">SUBTYPE</span> my_logic <span class=\"kw1\">IS</span> <span class=\"kw2\">STD_LOGIC</span> <span class=\"kw1\">RANGE</span> ‘<span class=\"nu0\">0</span>’ <span class=\"kw1\">TO</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\n<span class=\"kw2\">Line</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">SIGNAL</span> a<span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw2\">Line</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> <span class=\"kw1\">SIGNAL</span> b<span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n<span class=\"kw2\">Line</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span> <span class=\"kw1\">SIGNAL</span> c<span class=\"sy0\">:</span> my_logic<span class=\"sy0\">;</span>\n<span class=\"kw2\">Line</span> <span class=\"nu0\">5</span><span class=\"sy0\">:</span> b<span class=\"sy0\">&lt;=</span>a<span class=\"sy0\">;</span>\n<span class=\"kw2\">Line</span> <span class=\"nu0\">6</span><span class=\"sy0\">:</span> b<span class=\"sy0\">&lt;=</span>c<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Line 1",
            "b) Line 4",
            "c) Line 5",
            "d) Line 6"
        ],
        "Answer": "Answer: c\nExplanation: As a is a SIGNAL of BIT type and b is a SIGNAL of std_logic type; so we can’t perform direct operations on these data. For assigning the value of one data type to another data type, we need to use some type of data conversion. Without data conversion, it is illegal. However, line 6 is legal, because STD_LOGIC and my_logic both has same “base”, which means that my_logic is a subset of STD_LOGIC."
    },
    {
        "id": 67,
        "Question": "3. How to correctly assign the value of 2x+10 to y in the following VHDL code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> long <span class=\"kw1\">IS</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">RANGE</span> <span class=\"sy0\">-</span><span class=\"nu0\">1000</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">TYPE</span> short <span class=\"kw1\">IS</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">RANGE</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> x <span class=\"sy0\">:</span> short<span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> y <span class=\"sy0\">:</span> long<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) y <= 2*x + 10;",
            "b) long y <= long 2*x + 10;",
            "c) short y <= long (2*x + 10);",
            "d) y <= long (2*x + 10);"
        ],
        "Answer": "Answer: b\nExplanation: VHDL is a strongly typed language i.e. it has very strict rules about predefined and user defined data types. So, we can’t perform any operation between data of different types. Although, it is possible to perform operation between two data types with same base."
    },
    {
        "id": 68,
        "Question": "4. In the VHDL code given below, what will be the error at the time of compilation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> my_int <span class=\"kw1\">IS</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">RANGE</span> <span class=\"sy0\">-</span><span class=\"nu0\">32</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">TYPE</span> other_int <span class=\"kw1\">IS</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">RANGE</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> x <span class=\"sy0\">:</span> my_int<span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> y <span class=\"sy0\">:</span> other_int<span class=\"sy0\">;</span>\ny <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Type mismatch",
            "b) Syntax problem",
            "c) No declaration",
            "d) Can’t compile"
        ],
        "Answer": "Answer: d\nExplanation: For all the data types with same base, the conversion can be carried out at the time of operation itself. Therefore, if we want to assign a value of ‘short’ type to a variable of ‘long’ type; we may simply write ‘long’ just after the assignment operator. By doing so, user can convert one type into another. Note that, it is only possible if and only if both the types are having same base."
    },
    {
        "id": 69,
        "Question": "Which of the following package of IEEE contains most of the data conversion functions?",
        "Options": [
            "a) std_logic_1164",
            "b) std",
            "c) std_logic_arith",
            "d) std_logic"
        ],
        "Answer": "Answer: a\nExplanation: Here, we have two user defined data types which are my_int and other_int with the same base. But, we can’t directly perform any operation between the signals of these two different types. Such kind of error is called “Type Mismatch” error. First, user needs to convert my_int to other_int. so, the correct assignment statement will be:- y<= other_int (x + 2);"
    },
    {
        "id": 70,
        "Question": "If we are using conv_integer(p) function, then which of the following cannot be the type of parameter ‘p’?",
        "Options": [
            "a) STD_LOGIC VECTOR",
            "b) STD_ULOGIC",
            "c) INTEGER",
            "d) SIGNED"
        ],
        "Answer": "Answer: c\nExplanation: Most of the conversion functions are defined in the std_logic_arith package of IEEE library. When user need to convert one type of data into another type and both have different bases, then it is essential that he/she need to declare the std_logic_arith package in the library declaration part. However, when we need to convert the data types with same base, then the functions are defined in std_logic_1164 package."
    },
    {
        "id": 71,
        "Question": "In the function conv_unsigned(p, b), what does p and b refers to?",
        "Options": [
            "a) p is the data object to be converted and b is the base of that data object",
            "b) p is the data object to be converted amd b is the bits needed in converted variable",
            "c) p is the parameter to be converted and b is the bits of same parameter",
            "d) p is the type of data to be converted and b is the type of data into which p should be converted"
        ],
        "Answer": "Answer: a\nExplanation: The function conv_integer(p) is used to convert the parameter ‘p’ of any type excluding STD_LOGIC_VECTOR into the integer type. This function can covert INTEGER, SIGNED, UNSIGNED, STD_ULOGIC types into integer type. After converting only, we can use ‘p’ as INTEGER type."
    },
    {
        "id": 72,
        "Question": "Which of the following is the correct syntax to convert INTEGER ‘p’ into SIGNED number of ‘b’ bits?",
        "Options": [
            "a) conv_integer_signed(p,b);",
            "b) conv_signed_integer(p,b);",
            "c) conv_signed(p,b);",
            "d) conv_signed_p(b);"
        ],
        "Answer": "Answer: b\nExplanation: The function conv_unsigned is used to convert different data types in UNSIGNED type. Two arguments are used in this function which are p and b. p is the data object which we need to convert and b represents the no of bits in UNSIGNED type. So, conv_unsigned(p,b) converts the parameter ‘p’ of INTEGER, SIGNED, UNSIGNED, STD_ULGOIC into UNSIGNED type of size ‘b’ bits."
    },
    {
        "id": 73,
        "Question": "The function conv_std_logic_vector(p,b) is used for_______",
        "Options": [
            "a) Converting ‘p’ form STD_LOGIC_VECTOR to STD_LOGIC type",
            "b) Converting any data type ‘p’ into STD_LOGIC_VECTOR with ‘b’ bits",
            "c) Converting STD_LOGIC_VECTOR into ‘p’ type with ‘b’ bits",
            "d) Converting STD_LOGIC into STD_LOGIC_VECTOR"
        ],
        "Answer": "Answer: c\nExplanation: To convert INTEGER, SIGNED, UNSIGNED and STD_ULOGIC types into SIGNED type, the function conv_signed is used. The correct way to use this function is :- conv_signed(p,b) where p is the object to be converted and b is the number of bits in SIGNED type. "
    },
    {
        "id": 74,
        "Question": "10. What will be the value of y after the execution of the following VHDL code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">Library</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.std_logic_arith.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n…\n<span class=\"kw1\">SIGNAL</span> m <span class=\"sy0\">:</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> y <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">&lt;=</span>CONV_STD_LOGIC_VECTOR <span class=\"br0\">(</span><span class=\"br0\">(</span>m<span class=\"sy0\">+</span>n<span class=\"br0\">)</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 8- bit STD_LOGIC_VECTOR m+n",
            "b) 8- bit UNSIGNED m+n",
            "c) 4- bit STD_LOGIC m+n",
            "d) Error"
        ],
        "Answer": "Answer: b\nExplanation: This function is used to convert the parameter ‘p’ of type INTEGER, UNSIGNED, SIGNED or STD_LOGIC into STD_LOGIC_VECTOR. Note that the size of converted variable will be ‘b’ bits. So, b represents the number of bits in the converted object."
    },
    {
        "id": 75,
        "Question": "11. Refer to the VHDL code given below, what will be the output?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">Library</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.std_logic_arith.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n…\n<span class=\"kw1\">SIGNAL</span> a <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> y <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">&lt;&lt;=</span>CONV_STD_LOGIC_VECTOR <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 8- bit STD_LOGIC_VECTOR a+b",
            "b) 8- bit UNSIGNED a+b",
            "c) 4- bit STD_LOGIC_VECTOR a+b",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: Here, the conversion function is used to convert the data objects into STD_LOGIC_VECTOR type. The operation ‘m+n’ is completely legal since both are UNSIGNED type, after this operation the result is converted into STD_LOGIC_VECTOR with size ‘8’ bits. So, the values assigned to ‘y’ will be of STD_LOGIC_VECTOR type of 8 bits."
    },
    {
        "id": 76,
        "Question": "Which of the following is not an assignment operator?",
        "Options": [
            "a) <=",
            "b) :=",
            "c) =>",
            "d) ="
        ],
        "Answer": "Answer: d\nExplanation: Assignment operators are used to assign some value to a data object. <= operator is used to assign values to a SIGNAL. := operator is used to assign values to VARIABLE, CONSTANTS and GENERICS; this operator is also used for assigning initial values. Another assignment operator is =>, used to assign values to individual vector elements or others."
    },
    {
        "id": 77,
        "Question": "A VARIABLE y is declared of STD_LOGIC_VECTOR type of 4 bits, if you want to assign 1001 to y, then what is the write assignment statement?",
        "Options": [
            "a) y <= “1001”",
            "b) y := “1001”",
            "c) y <= ‘1’, ‘0’, ‘0’, ‘1’",
            "d) y => “1001”"
        ],
        "Answer": "Answer: b\nExplanation: To assign values to any variable, the := operator is used. Since, y is a VARIABLE STD_LOGIC_VECTOR type, we can only use := operator and not <= operator. => can be used, but while assigning individual elements of a vector."
    },
    {
        "id": 78,
        "Question": "3. Refer to the VHDL code given below, which is the legal assignment statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SIGNAL</span> x<span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> y<span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) y <= (1 => ‘1’, OTHERS => ’0’);",
            "b) y := “0100”;",
            "c) y => “0100”;",
            "d) y => x;"
        ],
        "Answer": "Answer: a\nExplanation: To assign a value to a SIGNAL, either <= or => can be used only. But, if we want to use =>, then values need to be assigned to individual elements. => is used with OTHERS. Y<= (1<=’1’, OTHERS =>’0’) means that the value assigned to y is 0100."
    },
    {
        "id": 79,
        "Question": "Which of the following logical operator has the highest precedence?",
        "Options": [
            "a) NAND",
            "b) NOR",
            "c) NOT",
            "d) EXOR"
        ],
        "Answer": "Answer: c\nExplanation: NOT is the logical operator which has highest precedence. If there are more than one logical operator in the same statement, then NOT will be given highest preference. If there is any () in the statement then first preference will be given to () and then to NOT operator."
    },
    {
        "id": 80,
        "Question": "5. In the following statements, y and z are equivalent to________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">y <span class=\"sy0\">&lt;=</span> <span class=\"kw3\">NOT</span> a <span class=\"kw3\">AND</span> b<span class=\"sy0\">;</span>\nz <span class=\"sy0\">&lt;=</span> <span class=\"kw3\">NOT</span> <span class=\"br0\">(</span>a <span class=\"kw3\">AND</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) y <= a’+b’ and z <= (a.b)’",
            "b) y <= (a+b)’ and z <= a’+b’",
            "c) y <= a’+b and z <= a’+b’",
            "d) y <= a+b’ and z <= a.b"
        ],
        "Answer": "Answer: c\nExplanation: As discussed above, NOT will be given highest preference. So, y becomes ((NOT a)AND b) which is a’+b. similarly, in z first of all () will be solved i.e.(a AND b)’ which is (a.b)’. By, De Morgan’s law, (a.b)’ = a’+b’. Therefore, y = a’+b and z = a’+b’."
    },
    {
        "id": 81,
        "Question": "Which of the following VHDL statement is equivalent to NAND operation, if y, a and b are SIGNALS?",
        "Options": [
            "a) y <= NOT a AND b",
            "b) y <= NOT a OR NOT b",
            "c) y <<= NOT a AND NOT b",
            "d) y <<= NOT (a OR b)"
        ],
        "Answer": "Answer: b\nExplanation: Logic NAND operation is (a.b)’ which is equivalent to a’ + b’ by using De Morgan’s law. NOT a AND b is equivalent to (a’.b). NOT a AND NOT b is equivalent to (a’.b’). Similarly, NOT (a OR b) is (a+b)’."
    },
    {
        "id": 82,
        "Question": "______ operator is unary as well as binary operator.",
        "Options": [
            "a) –",
            "b) *",
            "c) /",
            "d) **"
        ],
        "Answer": "Answer: a\nExplanation: Unary operator is the one which needs only one operand and Binary operator needs two operands. ‘–’ is the only operator which can be used with one as well as two operands. When used with single operand, the result is negative of the same number and similarly, when used with two operands then the result is difference of two operands."
    },
    {
        "id": 83,
        "Question": "The operator ‘&’ is called the_____ operator.",
        "Options": [
            "a) Logical AND operator",
            "b) Bitwise AND operator",
            "c) Arithmetic addition operator",
            "d) Concatenation operator"
        ],
        "Answer": "Answer: d\nExplanation: ‘&’ is called the concatenation operator and is a binary operator. It needs two operands and both of them must be arrays. It combines two arrays and produces one array of the size equal to the sum of sizes of two arrays."
    },
    {
        "id": 84,
        "Question": "What is the type of result of MOD operator?",
        "Options": [
            "a) Numeric",
            "b) Integer",
            "c) Array",
            "d) Bit"
        ],
        "Answer": "Answer: b\nExplanation: The MOD operator is called the modulo operator which gives the remainder of the division of two integers and hence the result is of integer type. For example, y <= a MOD b; will return the value of remainder when a is divided by b. suppose a= 12 and b= 5 then the value of y will be 2."
    },
    {
        "id": 85,
        "Question": "The operators like =, /=, <, >, >= are called _________",
        "Options": [
            "a) Arithmetic operators",
            "b) Concatenation operators",
            "c) Logical operators",
            "d) Relational operators"
        ],
        "Answer": "Answer: d\nExplanation: These operators are relational operators or Comparison operators since they are used to compare two operands. The = refers to equal to, /= refers to not equal to operator. Similarly,<, >, <=, >= are called less than, greater than, less than or equal to, greater than or equal to operators."
    },
    {
        "id": 86,
        "Question": "What is the type of result for comparison operators?",
        "Options": [
            "a) Boolean",
            "b) Integer",
            "c) Numeric",
            "d) Array"
        ],
        "Answer": "Answer: a\nExplanation: Comparison operators are used for the comparison of two operands and the result is of Boolean type i.e. true or false. For example, b:= “0010” < “0001”; In this statement, the value assigned to b will be FALSE, since this means 2 < 1, which is not true."
    },
    {
        "id": 87,
        "Question": "ABS operator is used to _________",
        "Options": [
            "a) Shift the operand",
            "b) Gives absolute value for the operand",
            "c) Give the result as nearest integer",
            "d) To synthesize the result"
        ],
        "Answer": "Answer: b\nExplanation: ABS operator is a unary operator which returns the absolute value. We can use this operator to increase the reliability of code. For example, we need to use π, then the value of the same is 22/7 or 3.14. In VHDL, if we use following statements: pi = 22/7; IF(pi = 3.14) THEN WAIT; Then we might not get the result as we want. It will be unreliable. If we use ABS operator along with it, then it will be better. Like, IF(abs(pi)=3.14) THEN WAIT; this will give the desired result. "
    },
    {
        "id": 88,
        "Question": "Which of the following is exponentiation operator?",
        "Options": [
            "a) ^",
            "b) *",
            "c) /=",
            "d) **"
        ],
        "Answer": "Answer: d\nExplanation: Exponentiation operator in VHDL is represented by two asterisk signs. So, ** is the exponentiation operator which comes under the category of arithmetic operators. In VHDL, a**b means a^b."
    },
    {
        "id": 89,
        "Question": "SIGNAL x : STD_LOGIC; In this statement x is ______",
        "Options": [
            "a) Variable",
            "b) Identifier",
            "c) Name",
            "d) Literal"
        ],
        "Answer": "Answer: b\nExplanation: Identifier is a simple name given to any constant, variable, signal, entity, port or a subprogram. A name must begin with alphabetic letter. It may contain alphanumeric characters and underscore sign. Reserved words of VHDL can’t be used as identifiers."
    },
    {
        "id": 90,
        "Question": "What is the use of shift operators?",
        "Options": [
            "a) To shift the data",
            "b) To shift the identifiers",
            "c) To shift the operators",
            "d) To shift the STD_LOGIC_VECTOR"
        ],
        "Answer": "Answer: a\nExplanation: Shift operators are used to shifting of data. These operators were introduced in the VHDL93. "
    },
    {
        "id": 91,
        "Question": "What is the “SLL” operator?",
        "Options": [
            "a) Shift Logic Left",
            "b) Shift Logically",
            "c) Shift Left Logical",
            "d) Shift Left"
        ],
        "Answer": "Answer: c\nExplanation: SLL is a shift operator used to shift bits of the operand to one left position and fills the rightmost position with zero. Shift Left Logical(SLL) operator will shift the bits logically. For example, we had data 0100 in the operand, then after applying SLL, we will get 1000."
    },
    {
        "id": 92,
        "Question": "The correct syntax for any logical shift operator like SLL and SRL is_____",
        "Options": [
            "a) bit_vector_operand <OPERATOR> integer_operand",
            "b) integer_operand <OPERATOR> bit_vector_operand",
            "c) std_logic_operand <OPERATOR> integer_operand",
            "d) integer_operand <OPERATOR> std_logic_operand"
        ],
        "Answer": "Answer:  a\nExplanation: SLL and SRL operators can shift the operands of vector type. It may be BIT_VECTOR type or STD_LOGIC_VECTOR type. The left operand is shifted towards left or right depending  on the operator with number of shifts represented by right operand which always must be an INTEGER type."
    },
    {
        "id": 93,
        "Question": "5. Refer to the VHDL code given below, what should be the output of the identifier ‘y’ and ‘z’?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">VARIABLE</span> x <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1010</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> y <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> 0000<span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> z <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> 0000<span class=\"sy0\">;</span>\n…\ny <span class=\"sy0\">:=</span> x <span class=\"kw3\">SRL</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\nz <span class=\"sy0\">:=</span> x <span class=\"kw3\">SLL</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) y = 0100 and z = 0100",
            "b) y = 0010 and z = 0100",
            "c) y = 0100 and z = 1000",
            "d) y = 0010 and z = 1000"
        ],
        "Answer": "Answer: d\nExplanation: SRL operator will shift the operand towards right and SLL will shift the same towards left. All the left bits will be filled with zero in SRL operation and in SLL right bits will be filled with zero. Therefore, y must be x shifted towards right with 2 positions."
    },
    {
        "id": 94,
        "Question": "6. In the following VHDL code, the values of y and z are _____<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">VARIABLE</span> x <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1001</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> y <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> 0000<span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> z <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> 0000<span class=\"sy0\">;</span>\n…\ny <span class=\"sy0\">:=</span> x <span class=\"kw3\">SRA</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\nz <span class=\"sy0\">:=</span> y <span class=\"kw3\">SLA</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) y = 0000 and z = 0000",
            "b) y = 1001 and z = 0000",
            "c) y = 1110 and z = 0111",
            "d) y = 0111 and z = 1110"
        ],
        "Answer": "Answer: c\nExplanation: SRA and SLA expands to Shift Right Arithmetically and Shift Left Arithmetically respectively. These operators shift the left operand towards right or left by number of bits specified by right operand. Unlike SLL and SRL, the empty bits are not filled with zero, but they are replaced with the MSB in case of SRA and with LSB in case of SLA. For example, in above code, if we shift the x towards right arithmetically then it will become 1100, i.e. the MSB is replicated instead of zero. Therefore, Shifting to two positions will give y = 1110 and z= 0111."
    },
    {
        "id": 95,
        "Question": "SLL operation is equivalent to which of the following operations?",
        "Options": [
            "a) Multiplication by any natural number",
            "b) Multiplication by 2",
            "c) Division by 2",
            "d) Exponential operation"
        ],
        "Answer": "Answer: b\nExplanation: Shift Left Logical shifts the bits towards left and Shift Right Logical shifts towards right. In binary number system, shifting left refers to multiplication with two and similarly, shifting right refers to division by two. For example, the number 0010 represents 2 in decimal number system. Now, if we shift it left by one position then it will become 0100 which is equivalent to 4 in decimal number system. Therefore, shifting left is equivalent to multiplication operation."
    },
    {
        "id": 96,
        "Question": "Which of the following is equivalent division by 2 operator?",
        "Options": [
            "a) SRL",
            "b) SLL",
            "c) SLA",
            "d) SRA"
        ],
        "Answer": "Answer: a\nExplanation: SRL operator shifts the given operand towards right. For, example, if we have a number 0010, equivalent to two, which is shifted right then it will become 0001 which is equivalent to 1. Therefore, this operation corresponds to division of any number by two."
    },
    {
        "id": 97,
        "Question": "9. In the VHDL code given below, what will be the values of y and z?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">VARIABLE</span> x <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1001</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> y <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> 0000<span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> z <span class=\"sy0\">:</span> <span class=\"kw2\">BIT_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> 0000<span class=\"sy0\">;</span>\n…\ny <span class=\"sy0\">:=</span> x <span class=\"kw3\">ROR</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\nz <span class=\"sy0\">:=</span> y <span class=\"kw3\">ROL</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) y = 0100 and z = 0000",
            "b) y = 0000 and z = 0000",
            "c) y = 0111 and z = 1110",
            "d) y = 0110 and z = 0110"
        ],
        "Answer": "Answer: d\nExplanation: ROR and ROL are Rotate Right and Rotate Left operators respectively. These operators’ wraps around the operand that means the bit shifted out will replace the vacant bit. Therefore, Rotating x two times towards right will give 0110 in y and when it is rotated left then it will be the same. "
    },
    {
        "id": 98,
        "Question": "In a statement containing two or more operators of same precedence, how the expression will be solved?",
        "Options": [
            "a) Left to right",
            "b) Right to left",
            "c) Alphabetically",
            "d) In a random manner"
        ],
        "Answer": "Answer: a\nExplanation: In VHDL, to solve any expression a simple rule is followed. The rule is “highest precedence first, left to right within same precedence”. However, we can use parenthesis to control the order of operations, but by default it will solve left to right. It may be noted that parenthesis is the operator with highest precedence."
    },
    {
        "id": 99,
        "Question": "11. What will be the values of the following variables after MOD operations?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">x <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"kw3\">MOD</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"kw3\">MOD</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>\nz <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"kw3\">MOD</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) x = 2, y = -2 and z = -2",
            "b) x = 2, y = 1 and z = -2",
            "c) x= 2, y = -2 and z = 2",
            "d) x = 2, y = -2 and z = 1"
        ],
        "Answer": "Answer: b\nExplanation: MOD takes the sign of divisor which is the second operand, but not of first operand. In the first operand, it will simply give the remainder which is 2. In the second statement, the modulo will not contain negative, it will simply divide and the result will be 1. This is done by adding 3*2 in -5, in that case 1 is left, therefore modulo is 1. But, in third statement, divisor is negative so it will be taken as -(5 MOD 3)."
    },
    {
        "id": 100,
        "Question": "12. What will be the values of following variables after REM operations?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">x <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"kw3\">REM</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"kw3\">REM</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>\nz <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"kw3\">REM</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) x= 2, y = 1 and z = -2",
            "b) x = 2, y = -2 and z = 1",
            "c) x = 2, y = -2 and z = 2",
            "d) x = 2, y = 1 and z = 1"
        ],
        "Answer": "Answer: c\nExplanation: Here, REM operator is used, which takes the sign of dividend instead of divisor unlike MOD operator. In case of negative divisor, the sign is ignored. Therefore, in first statement, the remainder is calculated normally, which is 2. In second statement, it will be considered as -(5 REM 3). In third statement, it is simply solved like first statement, ignoring the negative sign."
    },
    {
        "id": 101,
        "Question": "The most basic form of behavioral modeling in VHDL is _______",
        "Options": [
            "a) IF statements",
            "b) Assignment statements",
            "c) Loop statements",
            "d) WAIT statements"
        ],
        "Answer": "Answer: b\nExplanation: Assignment statements are used basically in the behavioral modeling. In behavioral modeling, one needs to describe the value of outputs for various combinations of inputs, so we need to assign different values to output variables. Therefore, the assignment is the most used statement in behavioral modeling."
    },
    {
        "id": 102,
        "Question": "For any concurrent assignment statement, which of the following is true?",
        "Options": [
            "a) The statement is executed once",
            "b) The statement is executed twice",
            "c) The value of left operand is assigned to right operand",
            "d) The statement is executed as many times as the value changes"
        ],
        "Answer": "Answer: d\nExplanation: A concurrent assignment statement assigns the value of right operand to left operand and this statement is executed many times. Whenever the value of right operand is changed, the assignment statement is executed."
    },
    {
        "id": 103,
        "Question": "4. Which of the circuit is described by following VHDL code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ENTITY</span> my_func <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>x, a, b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span>\nq <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">std_logic</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_func<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> behavior <span class=\"kw1\">OF</span> my_func <span class=\"kw1\">IS</span>\n<span class=\"kw1\">SIGNAL</span> s <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">WITH</span> s <span class=\"kw1\">SELECT</span>\nq <span class=\"sy0\">&lt;=</span> a <span class=\"kw1\">AFTER</span> <span class=\"nu0\">10</span> <span class=\"re0\">ns</span> <span class=\"kw1\">WHEN</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n         b <span class=\"kw1\">AFTER</span> <span class=\"nu0\">10</span> <span class=\"re0\">ns</span> <span class=\"kw1\">WHEN</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\ns <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">WHEN</span> x <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’ <span class=\"kw1\">ELSE</span>\n        <span class=\"nu0\">1</span> <span class=\"kw1\">WHEN</span> x <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> behavior<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) AND gate",
            "b) OR gate",
            "c) MUX 2:1",
            "d) DEMUX 1:2"
        ],
        "Answer": "Answer: a\nExplanation: The keyword ‘after’ is used for introducing delay in the assignment statement. Whenever the value of b is changed, the value of a is changed after 10ns. This 10ns is helpful while creating square waveform."
    },
    {
        "id": 104,
        "Question": "The main problem with behavioral modeling is ________",
        "Options": [
            "a) Asynchronous delays",
            "b) Simulation",
            "c) No delay",
            "d) Supports single driver only"
        ],
        "Answer": "Answer: c\nExplanation: In this code, the behavior of 2:1 MUX is explained. By using WITH statement, the output is selected by the use of select line. Here, s is used as select line and x is considered as the value of select line. Also, a and b are taken as two inputs and q as output."
    },
    {
        "id": 105,
        "Question": "What is the use of simulation deltas in VHDL code?",
        "Options": [
            "a) To create delays in simulation",
            "b) To assign values to signals",
            "c) To order some events",
            "d) Evaluate assignment statements"
        ],
        "Answer": "Answer: a\nExplanation: In behavioral modeling, there are different types of delays and this can create problem in functioning of system. Sometimes zero delay events are used to produce consistent results. If these are not properly ordered, results can be disparate between different simulations. "
    },
    {
        "id": 106,
        "Question": "Which function is used to create a single value for multiple driver signals?",
        "Options": [
            "a) Resolution function",
            "b) Package",
            "c) Concurrent assignments",
            "d) Sequential assignments"
        ],
        "Answer": "Answer: c\nExplanation: Simulation deltas are used to order some specific events to avoid complications in simulations. Especially, in zero delay events, they are properly ordered so as to produce consistent results. It is actually a complex delay model used for zero delay events."
    },
    {
        "id": 107,
        "Question": "9. Refer to the VHDL code given below, which of the following signal is driven by multiple drivers?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ENTITY</span> <span class=\"kw1\">function</span> <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>b, c <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\na, d <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">function</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> behavior <span class=\"kw1\">OF</span> my_func <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\na <span class=\"sy0\">&lt;=</span> b<span class=\"sy0\">;</span>\na <span class=\"sy0\">&lt;=</span> c<span class=\"sy0\">;</span>\nd <span class=\"sy0\">&lt;=</span> b<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> behavior<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) d",
            "b) c",
            "c) b",
            "d) a"
        ],
        "Answer": "Answer: b\nExplanation: A multiply driven signal is the one which has more than one driver. VHDL can handle these signals easily and in a unique way. These multiply driven signals are useful for modeling various data bus and bidirectional bus etc."
    },
    {
        "id": 108,
        "Question": "A signal is driven by two signals b and c. How the value of b and c will be resolved to calculate the value of a?",
        "Options": [
            "a) By short circuiting both driver",
            "b) By open circuiting one driver",
            "c) By AND operation between two drivers",
            "d) By NOT operation of both drivers"
        ],
        "Answer": "Answer: a\nExplanation: The values of all the drivers are resolved together to create a single value for the signal. The method of resolving all the drivers is through a resolution function which is a designer writer function. That function is called whenever any one of the driver changes its value."
    },
    {
        "id": 109,
        "Question": "Which of the following is default delay in VHDL?",
        "Options": [
            "a) Inertial delay",
            "b) Transport delay",
            "c) Delta delay",
            "d) Wire delay"
        ],
        "Answer": "Answer: a\nExplanation: In VHDL, inertial delay is the default delay in VHDL. If no delay type is specified then it will be used as inertial delay. The reason behind taking, inertial delay as default is that in most case it behaves similarly to the actual device to be designed."
    },
    {
        "id": 110,
        "Question": "What must be overcome by the output signal to change the value in case of inertial delay?",
        "Options": [
            "a) Time",
            "b) Error",
            "c) Inertia",
            "d) Pulse"
        ],
        "Answer": "Answer: c\nExplanation: In case of inertial delay model, the output signal has some inertia which must be overcome for the signal to change its value. If a signal value is maintained for a time longer than the delay through the device, the output signal value changes to a new state."
    },
    {
        "id": 111,
        "Question": "The inertia value in inertial delay model is equal to _________",
        "Options": [
            "a) Initial value",
            "b) Delay",
            "c) Input value at a specific time",
            "d) Output value at a specific time"
        ],
        "Answer": "Answer: b\nExplanation: The inertia value in inertial delay model is equal to the delay through the device. This value must be overcome first to change the signal state. If there is any impulsive change in between then the state of signal will not change after the specified delay."
    },
    {
        "id": 112,
        "Question": "Transport delay is a kind of __________",
        "Options": [
            "a) Synthesis delay",
            "b) Simulation delay",
            "c) Inertial delay",
            "d) Wire delay"
        ],
        "Answer": "Answer: d\nExplanation: Transport delay represents a wire delay in which any pulse is propagated to the output signal delayed by a specified delay value. Therefore, Transport delay is useful in modeling the delay line devices and path delays in ASICs."
    },
    {
        "id": 113,
        "Question": "A buffer with single input A and single output B has a delay of 20 nanosecond. If the value of input A changes after 10 ns from 0 to 1 and it changes again from 1 to 0 at 20 ns. At what time, the value of output B will be 1, if the inertial delay model is used?",
        "Options": [
            "a) 30 ns",
            "b) 40 ns",
            "c) 20 ns",
            "d) Output will remain zero"
        ],
        "Answer": "Answer: a\nExplanation: If there are any spikes or pulses in between the delay period then the output value doesn’t change accordingly. Because any pulse in between the delay period will be swallowed in case of inertial delay and the output state will not change."
    },
    {
        "id": 114,
        "Question": "The keyword TRANSPORT in any assignment statement specifies _______",
        "Options": [
            "a) Transport delay",
            "b) Transfer the right operand immediately to left operand",
            "c) Transporting the value of left operand to right operand",
            "d) Inertial delay"
        ],
        "Answer": "Answer: d\nExplanation: Inertial delay model swallows the pulses or spikes in between the delay time period. The buffer is executed at 0 ns for the delay of 20 ns and then the value of A changes at 10 ns, which again execute buffer and schedule the output to be 1 at 30 ns. But at 20 ns, the value of A again changes which executes the buffer again and schedule the output to be zero at 40 ns. Therefore, the output will not change. Inertial model doesn’t order events it will take into consideration only the last event. "
    },
    {
        "id": 115,
        "Question": "A buffer with single input A and single output B has a delay of 20 nanosecond. If the value of input A changes after 10 ns from 0 to 1 and it changes again from 1 to 0 at 20 ns. At what time, the value of output B will be 1, if the transport delay model is used?",
        "Options": [
            "a) 20 ns",
            "b) 30 ns",
            "c) 40 ns",
            "d) Output will remain zero"
        ],
        "Answer": "Answer: a\nExplanation: TRANSPORT is a keyword used for specifying the use of transport delay. The mechanism followed by the EDA tool will be the transport delay mechanism instead of the default delay type called inertial delay."
    },
    {
        "id": 116,
        "Question": "9. In the VHDL code given below, which delay model is used?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ENTITY</span> <span class=\"kw1\">buffer</span> <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nb <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">buffer</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> buf <span class=\"kw1\">OF</span> <span class=\"kw1\">buffer</span> <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\nb <span class=\"sy0\">&lt;=</span> a <span class=\"kw1\">AFTER</span> <span class=\"nu0\">20</span> <span class=\"re0\">ns</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> buf<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Simulation delta model",
            "b) Transport delay model",
            "c) Inertial delay model",
            "d) Multiple driver delay model"
        ],
        "Answer": "Answer: b\nExplanation: In case of transport delay model, all the spikes and pulses, no matter how small, are taken into consideration i.e. not swallowed down. Transport delay order the events rather than just scheduling the last event. Therefore, when the buffer is executed at 10 ns, it will schedule a 1 at B at 30 ns. After which, it is again executed at 20 ns and hence the output will be zero again at 40 ns."
    },
    {
        "id": 117,
        "Question": "For zero delay events, which of the following mechanism is used?",
        "Options": [
            "a) Transport delay mechanism",
            "b) Inertial delay mechanism",
            "c) Delta delay mechanism",
            "d) Preemption delay mechanism"
        ],
        "Answer": "Answer: c\nExplanation: The assignment statement b <= a AFTER 20 ns is a delay statement. As there is no delay type specified, consequently, it will be considered as inertial delay. If one wants to use transport delay model, then it needs to be specified unlike inertial delay. For example, b < TRANSPORT a AFTER 20 ns; this statement will introduce transport delay mechanism."
    },
    {
        "id": 118,
        "Question": "Which of the following delay model follows the principle of preemption?",
        "Options": [
            "a) Inertial delay",
            "b) Transport delay",
            "c) Delta delay",
            "d) Wire delay"
        ],
        "Answer": "Answer: d\nExplanation: W1 is transport since it doesn’t need to overcome the inertia and the events are scheduled sequentially after the specified delay time period. Whereas, in waveform W2, the output is concerned with the last value only. Therefore, waveform 2 is the illustration of inertial delay model."
    },
    {
        "id": 119,
        "Question": "Which of the following is not the application of inertial delay?",
        "Options": [
            "a) Buffer delay",
            "b) PC wire line delay",
            "c) Simple delay in OR gate",
            "d) Inverter delay"
        ],
        "Answer": "Answer: c\nExplanation: For zero delay events, The output can disparate between two different simulation runs. For example, in a complex circuit, if we are using a NAND gate then the output can be affected by the order of the events, like AND operation first and after that NOT operation can produce some different result whereas it opposite order can produce some different result. Therefore, to avoid this at the time of simulation, we use the simulation delta delay model."
    },
    {
        "id": 120,
        "Question": "The condition to implement the simulation delta delay is _______",
        "Options": [
            "a) All events must be synchronous",
            "b) The events must have at least one sequential circuit",
            "c) No condition",
            "d) All events must be zero delay event"
        ],
        "Answer": "Answer: a\nExplanation: Preemption technique means that only last event is taken into consideration whereas preceding events can be ignored. Same is the case with inertial delay model in which only last value of output is considered ignoring all the previous events or pulses or spikes etc."
    },
    {
        "id": 121,
        "Question": "In which part of the VHDL code, generics are declared?",
        "Options": [
            "a) Package declaration",
            "b) Entity",
            "c) Architecture",
            "d) Configurations"
        ],
        "Answer": "Answer: b\nExplanation: Generics are a general mechanisms used to pass information to an instance of any entity and are declared in the entity itself. These are of constant type and are declared before port declarations. The declaration of generics is followed by the keyword GENERIC."
    },
    {
        "id": 122,
        "Question": "Which of the following is correct declaration for a generic?",
        "Options": [
            "a) GENERIC (name : type := initial_value);",
            "b) GENERIC (type : name := initial_value);",
            "c) GENERIC (name : type <= initial_value);",
            "d) GENERIC ( ype : name <= initial_value);"
        ],
        "Answer": "Answer: a\nExplanation: The declaration of generic is done in entity declaration part and the correct syntax to declare it is GENERIC ( parameter_name : parameter_type := initial_value). Since, generic is constant object, so := operator is used to assign the initial value. "
    },
    {
        "id": 123,
        "Question": "What is the main use of the generic parameter?",
        "Options": [
            "a) Defining constant type",
            "b) Assigning some initial value to constant",
            "c) Reusability",
            "d) Using constant type within the entity"
        ],
        "Answer": "Answer: c\nExplanation: The purpose of defining a generic statement within an entity is to confer more flexibility and reusability. A generic parameter is basically used globally with some value. Whenever one want to reuse same thing again and again then defining it as a generic parameter will be useful rather than defining it again and again. "
    },
    {
        "id": 124,
        "Question": "Which of the following is true about Generics?",
        "Options": [
            "a) Generics can be assigned information as part of simulation run",
            "b) Generics cannot be assigned information as part of simulation run",
            "c) Generic passes data to an entity which is not instance specific",
            "d) Results of simulation can modify the value of generics"
        ],
        "Answer": "Answer: a\nExplanation: It is possible to define more than one parameter in an entity. If we want to define more than one generic parameter, then the two parameters must be separated by a semicolon. For example, GENERIC (n : INTEGER := 8; m : BIT_VECTOR := “0011”); In this declaration n and m are two different generics in which one is of INTEGER and another is BIT_VECTOR type."
    },
    {
        "id": 125,
        "Question": "In most synthesis tools, only generics of type ________ are supported.",
        "Options": [
            "a) INTEGER",
            "b) REAL",
            "c) BIT_VECTOR",
            "d) STD_LOGIC"
        ],
        "Answer": "Answer: b\nExplanation: All the data passed to an entity is instance specific and this data can’t be assigned any information as a part of simulation run. The value of generic is not a simulation specific value but, it is a instance specific value which can’t be modified by the simulation results."
    },
    {
        "id": 126,
        "Question": "GENERIC (n : INTEGER := 8); In this statement, the mode of generic ‘n’ is _______",
        "Options": [
            "a) Integer",
            "b) Real",
            "c) Generic",
            "d) No Mode"
        ],
        "Answer": "Answer: b\nExplanation: A generic can be declared in entity as well as in any component declaration statement. It is not necessary to define generic in entity only. If structural modeling is used, then generic can be used in component declaration statement too. However, it must be noted that the generic is declared before ports declaration."
    },
    {
        "id": 127,
        "Question": "Which function is used to map a generic on design?",
        "Options": [
            "a) Port map()",
            "b) Generic()",
            "c) Generic map()",
            "d) Port"
        ],
        "Answer": "Answer: a\nExplanation: Integer type is the only generics type which is synthesizable in most of the EDA tools. Whereas, in some cases all the types are synthesizable. It is possible to define any type of generic but the thing is that they may not be synthesized."
    },
    {
        "id": 128,
        "Question": "Generics in VHDL can be treated as _______",
        "Options": [
            "a) Global variable",
            "b) Local variable",
            "c) Variable",
            "d) Signal"
        ],
        "Answer": "Answer: d\nExplanation: Generics are a means of passing specific information into an entity. Generics can have only a type but no mode. Integer is the type of generic. Mode of any variable or signal defines its direction which means whether it is used as an input signal or output signal. Therefore, mode is not defined in the case of generics."
    },
    {
        "id": 129,
        "Question": "Which of the following can be used as a generic in a complex digital design with many inputs and two outputs?",
        "Options": [
            "a) Number of outputs",
            "b) Number of inputs",
            "c) Intermediate signals",
            "d) No parameter"
        ],
        "Answer": "Answer: c\nExplanation: As generic is declared before a port in component and entity declaration. Similarly, to map a generic type, one can use generic map() function before port map() function in component instantiation part of the code. This function is used in structural modeling."
    },
    {
        "id": 130,
        "Question": "What do you mean by a block?",
        "Options": [
            "a) An object of architecture",
            "b) Interconnection of two or more signals",
            "c) A part of an entity",
            "d) A sub module in an architecture body"
        ],
        "Answer": "Answer: d\nExplanation: The sub modules in architecture can be described as blocks. A block is a unit of module structure, with its own interface, connected to other blocks or ports. For example, while designing CPU, one can divide the architecture into blocks in which one may be describing ALU and another may be describing Control signals and so on."
    },
    {
        "id": 131,
        "Question": "What is the scope of variables or signals declared in the block statement?",
        "Options": [
            "a) Global to the design",
            "b) Local to the architecture",
            "c) Local to the block itself",
            "d) Local to the entity of which architecture is defined"
        ],
        "Answer": "Answer: c\nExplanation: The variables or signals declared in the BLOCK are available local in the block statement only. However, a block can declare constants, types, components, subprograms apart from variables or signals. But, anything declared in the block can be used in the block only."
    },
    {
        "id": 132,
        "Question": "Which of the following defines the interface to the block?",
        "Options": [
            "a) Block declaration part",
            "b) Block header",
            "c) Block statement part",
            "d) Generic declaration part"
        ],
        "Answer": "Answer: b\nExplanation: A block header defines the interface to an entity. The values of generics or components associated with the block are defined in the block header. It uses a port map and generic map functions to declare and map components and generics with the block."
    },
    {
        "id": 133,
        "Question": "Guarded block has an extra ________ expression.",
        "Options": [
            "a) Conditional",
            "b) Declarative",
            "c) Block",
            "d) Guard"
        ],
        "Answer": "Answer: d\nExplanation: VHDL has two types of block which are Simple blocks and guarded blocks. Guarded blocks have an extra guard expression. The role of guard expression is to control the execution of guarded block. The guarded statements in a guarded block are executed only when the guard expression is TRUE."
    },
    {
        "id": 134,
        "Question": "What should be the type of the value of guard expression?",
        "Options": [
            "a) BOOLEAN",
            "b) INTEGER",
            "c) REAL",
            "d) BIT_VECTOR"
        ],
        "Answer": "Answer: a\nExplanation: The type of result of guard expression should be BOOLEAN which may take only two values either TRUE or FALSE. The statements under guarded block are executed only when the result of guard expression is TRUE. Therefore, it is mandatory to have an expression with BOOLEAN output."
    },
    {
        "id": 135,
        "Question": "What is the main purpose of using blocks?",
        "Options": [
            "a) To improve reusability",
            "b) To improve conditional execution",
            "c) To improve readability",
            "d) To improve speed of execution"
        ],
        "Answer": "Answer: c\nExplanation: Blocks are useful to improve the readability and management of VHDL design. In a high level design, say CPU design, blocks are very useful since it can be divided into blocks which can further be managed easily rather than managing whole code. Another use of block statement is to disable some signals by using guard expression. However, the result of simulation will be same of the code using block and the same without blocks."
    },
    {
        "id": 136,
        "Question": "Which of the following is better for design partitioning?",
        "Options": [
            "a) Guarded block",
            "b) Unguarded block",
            "c) Component instantiation",
            "d) Component declaration"
        ],
        "Answer": "Answer: b\nExplanation: In general EDA tools, the guarded blocks are not synthesizable and unguarded blocks doesn’t add any additional functionality to the design and therefore, are usually ignored by synthesis tools. So, it is not much useful to use blocks in non-VITAL designs. "
    },
    {
        "id": 137,
        "Question": "Which of the following is true about guarded blocks?",
        "Options": [
            "a) Guarded blocks can have only guarded statements",
            "b) Guarded blocks can have both guarded as well as unguarded statements",
            "c) Guarded blocks are executed when guarded expression is false",
            "d) Guarded expression can have BIT type"
        ],
        "Answer": "Answer: c\nExplanation: Since guarded and unguarded blocks are not synthesizable. So, component instantiation is certainly a better mechanism to handle design partitioning which is completely synthesizable. Therefore, it is recommended to use component instantiation rather than block statements."
    },
    {
        "id": 138,
        "Question": "Which of the following statement is used to describe regular structures?",
        "Options": [
            "a) BLOCK",
            "b) GENERATE",
            "c) USE",
            "d) GUARDED BLOCK"
        ],
        "Answer": "Answer: a\nExplanation: Nesting of blocks is possible in VHDL. A block can be defined within another block. The nested block is called the child block and the other block is called parent block. Also, it is possible to define two signals with same name one in parent block and another in child block."
    },
    {
        "id": 139,
        "Question": "13. What will be the values of out1 and out2?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> bhv <span class=\"kw1\">OF</span> example <span class=\"kw1\">IS</span>\n<span class=\"kw1\">CONSTANT</span> out1 <span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">CONSTANT</span> out2 <span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nB1 <span class=\"sy0\">:</span> <span class=\"kw1\">BLOCK</span>\n<span class=\"kw1\">CONSTANT</span> S <span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nB1<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"kw1\">BLOCK</span>\n<span class=\"kw1\">SIGNAL</span> S <span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nout1 <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> S<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> BLCOK B1<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\nout2 <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> S<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">BLOCK</span> B1<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> bhv<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) out1 = 0 and out2 = 0",
            "b) out1 = 0 and out2 = 1",
            "c) out1 = 1 and out2 = 0",
            "d) out1 = 1 and out2 = 1"
        ],
        "Answer": "Answer: a\nExplanation: A block is declared by using some label. First, a label is given to the block which is followed by a colon and then the keyword BLOCK. In the next line, signals, components, constants etc. are declared. After the declaration part of the block, BEGIN keyword is used followed by concurrent statements describing the behavior of the block."
    },
    {
        "id": 140,
        "Question": "What is the use of FOR generation?",
        "Options": [
            "a) For describing the exceptional signals",
            "b) For describing the repeating structures",
            "c) For describing half adder circuit",
            "d) For any exceptional cases of structure"
        ],
        "Answer": "Answer: b\nExplanation: Guarded blocks can have both types of statements which are guarded and unguarded. Guarded assignment statements are those statements in which an assignment operator is followed by the keyword called GUARDED. For example, q <= GUARDED d AFTER 10 ns; here the assignment statement used is guarded statement."
    },
    {
        "id": 141,
        "Question": "Which of the following is the use of IF generation?",
        "Options": [
            "a) To handle repeating pattern of design",
            "b) To handle exceptional cases of design",
            "c) To design full adder circuit",
            "d) To connect input instances with output"
        ],
        "Answer": "Answer: b\nExplanation: Generate statement is used to describe regular structures such as array of blocks, component instances or processes. There are two types of generation schemes one is FOR generation and another is IF generation."
    },
    {
        "id": 142,
        "Question": "Which of the following is defined in structural modeling?",
        "Options": [
            "a) The structure of circuit",
            "b) Behavior of circuit on different inputs",
            "c) Data flow from input to output",
            "d) Functional structure"
        ],
        "Answer": "Answer: a\nExplanation: Structural modeling is the modeling of the circuit at the component level. This type of modeling is used to describe the structure of the system with all the components. Along with components, interconnections between them are also defined."
    },
    {
        "id": 143,
        "Question": "Which of the following is not a way of partitioning a design?",
        "Options": [
            "a) Component",
            "b) Block statement",
            "c) Processes",
            "d) Generics"
        ],
        "Answer": "Answer: c\nExplanation: A VHDL design can be partitioned in many ways but generics is not the way to partition the design. Generics are used as constants. A component can divide the design at a structural level. Similarly, Blocks and processes can divide the behavioral model of the design."
    },
    {
        "id": 144,
        "Question": "What is the basic unit of structural modeling?",
        "Options": [
            "a) Process",
            "b) Component declaration",
            "c) Component instantiation",
            "d) Block"
        ],
        "Answer": "Answer: c\nExplanation: Structural modeling describes the design at the component level. Like behavioral modeling is described by using processes, similarly, structural modeling is described by using component instantiation. Both processes and component instantiation are described in the architecture body."
    },
    {
        "id": 145,
        "Question": "Which of the following is similar to the entity declaration in structural modeling?",
        "Options": [
            "a) Component instantiation",
            "b) Component declaration",
            "c) Port map",
            "d) Generic map"
        ],
        "Answer": "Answer: b\nExplanation: Component declaration in structural modeling is similar to the entity declaration. It describes the external interface of the component or subcomponent. All the input and output ports are declared in the component declaration part. "
    },
    {
        "id": 146,
        "Question": "What do you mean by component instantiation?",
        "Options": [
            "a) To use the component",
            "b) To describe external interface of the component",
            "c) To declare the gate level components",
            "d) To remove any component from the design"
        ],
        "Answer": "Answer: a\nExplanation: Component instantiation means to use the component in the circuit. Declaration of component just declares the input and outputs of the component but its instantiation describes its interconnection with other components and to port it in the circuit."
    },
    {
        "id": 147,
        "Question": "The structural model is similar to___________",
        "Options": [
            "a) Boolean relations of the circuit",
            "b) Schematic block diagram of the circuit",
            "c) Timing relations of the circuit",
            "d) Components of the circuit"
        ],
        "Answer": "Answer: b\nExplanation: The structural modeling in VHDL is similar to the schematic block diagram of the circuit. Just like block diagram defines the components and interconnection between them, same is the case with structural modeling."
    },
    {
        "id": 148,
        "Question": "Which of the following is the correct syntax for component instantiation?",
        "Options": [
            "a) instantiate : component_name PORT MAP (port_list);",
            "b) label : instantiate COMPONENT PORT MAP (port_list);",
            "c) label : component_name PORT MAP (port_list);",
            "d) label : instantiate component_name PORT MAP (port_list)"
        ],
        "Answer": "Answer: c\nExplanation: Component instantiation is done in the architecture part by using some label and the function called PORT MAP(). The name of the component is followed by the function PORT MAP (). The arguments list of the function contains the name of ports in the same order as they were declared. By using this we can define the interconnection between ports."
    },
    {
        "id": 149,
        "Question": "Which of the following must be known to describe a structural model in VHDL?",
        "Options": [
            "a) Number of inputs and outputs",
            "b) Components and their connections",
            "c) Relation between inputs and outputs",
            "d) Value of output for different input combinations"
        ],
        "Answer": "Answer: a\nExplanation: There is no restriction on the number of times a component can be used whose declaration is done. It is needed to be declared only once. Just using two or more different labels, we can use the same component again and again."
    },
    {
        "id": 150,
        "Question": "In which part of the VHDL code, components must be declared?",
        "Options": [
            "a) Library",
            "b) Entity",
            "c) Architecture",
            "d) Configuration"
        ],
        "Answer": "Answer: c\nExplanation: The component can be declared only after entity declaration or in the package itself. So, components can be declared either in architecture or in package. If the component is declared in package, then just include the package and don’t declare it again in architecture body."
    },
    {
        "id": 151,
        "Question": "Which of the following function is used to map the component?",
        "Options": [
            "a) COMPONENT INSTANTIATE",
            "b) PORT MAP",
            "c) GENERIC MAP",
            "d) USE"
        ],
        "Answer": "Answer: b\nExplanation: To map a component in the circuit, first it needs to be declared. Once it is declared, one can use the PORT MAP function to map the port on the design. This function can have as many arguments as the number of ports in the component. "
    },
    {
        "id": 152,
        "Question": "How many ways are there in VHDL to map the components?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two ways by which one can map the components in VHDL design excluding the mapping of generic units. One method is positional mapping and another mapping is nominal mapping. Positional mapping is generally used mapping. "
    },
    {
        "id": 153,
        "Question": "What is the property of Positional mapping?",
        "Options": [
            "a) Easier to write",
            "b) Less error prone",
            "c) Ports can be left unconnected",
            "d) Difficult to write"
        ],
        "Answer": "Answer: a\nExplanation: Positional mapping is a type of component mapping that is generally used in VHDL and it is easier to write. But, positional mapping has slightly more chances of occurrence of an error. "
    },
    {
        "id": 154,
        "Question": "__________ mapping is less error prone.",
        "Options": [
            "a) Port",
            "b) Positional",
            "c) Nominal",
            "d) Generic"
        ],
        "Answer": "Answer: c\nExplanation: Nominal mapping has less chances of error since every port is assigned the specific value which is not the case with positional mapping. So, nominal mapping can take time but it is less prone to errors. "
    },
    {
        "id": 155,
        "Question": "A component has 3 ports- two inputs(a and b) and one output(y). Which of the following statement is for the positional mapping of the component?",
        "Options": [
            "a) LABEL : my_component PORT MAP (l, m, n);",
            "b) LABEL : my_component PORT MAP (y, a);",
            "c) LABEL : my_component PORT MAP (l => a, m => b, n => y);",
            "d) LABEL : my_component PORT MAP(a, b, y>= a);"
        ],
        "Answer": "Answer: a\nExplanation: A component can be instantiated by using positional or nominal mapping. In case of positional mapping, arguments are written, in this case, 3 arguments among which first two must be taken as input and last one is taken as output port. SO, only option a is using the positional mapping in which l and m corresponds to a and b respectively and n corresponds to y."
    },
    {
        "id": 156,
        "Question": "Which of the following is the right way to leave a port unconnected?",
        "Options": [
            "a) L1 : my_component PORT MAP(a); a <= OPEN;",
            "b) L1 : my_component PORT MAP(a := OPEN);",
            "c) L1: my_component PORT MAP(a => OPEN);",
            "d) L1 : my_component PORT MAP(a); a := OPEN;"
        ],
        "Answer": "Answer: a\nExplanation: In VHDL, It is possible to leave any port unconnected. If our requirement is to leave a port unconnected in the circuit, then it can be done by using a keyword ‘OPEN’. By doing so, the port will not be connected to any input or output."
    },
    {
        "id": 157,
        "Question": "Which of the following is the correct order for a structural model in VHDL?",
        "Options": [
            "a) Libraries, Entity declaration, Component declaration, Component instantiation",
            "b) Libraries, Component declaration, Entity declaration, Component instantiation",
            "c) Libraries, Entity declaration, Component instantiation, Component declaration",
            "d) Component declaration, Libraries, Entity declaration, Component instantiation"
        ],
        "Answer": "Answer: a\nExplanation: In a VHDL code, first of all, the packages and libraries are declared which are then followed by entity declaration. After the entity is declared, to model a circuit on the structural level, first all the components are declared after which they can be instantiated. "
    },
    {
        "id": 158,
        "Question": "2. Refer to the model given below, which circuit is designed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ENTITY</span> design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a, b, c <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\nx, y <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> design<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> arch1 <span class=\"kw1\">OF</span> design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">COMPONENT</span> xor2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>i1, i2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\no <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">COMPONENT</span> and2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a1, a2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nP <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">COMPONENT</span> or2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>d1, d2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nr <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> s1, s2, s3, s4, s5 <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nX1<span class=\"sy0\">:</span> xor2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, b, s1<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX2 <span class=\"sy0\">:</span> xor2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s1, c, x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX3<span class=\"sy0\">:</span> and2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, b, s2<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX4 <span class=\"sy0\">:</span> and2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, c, s3<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX5<span class=\"sy0\">:</span> and2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>b, c, s4<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX6<span class=\"sy0\">:</span> or2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s2, s3, s5<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX7<span class=\"sy0\">:</span> or2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s4, s5, y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> arch1<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Half adder",
            "b) Comparator 2- bits",
            "c) Full adder",
            "d) Can’t be determined"
        ],
        "Answer": "Answer: b\nExplanation: Though it is not possible to determine the circuits through its structural model until its components are not specified. In the above case, the components are clearly 2 input AND, OR and EXOR gates. These gates are connected to give one output called x as the EXOR of three inputs a, b and c. Another output y = ab + bc+ ac. So, it is a full adder circuit designed."
    },
    {
        "id": 159,
        "Question": "4. Refer to the architecture given below, there are two outputs called x and y. The structure defined is a full adder circuit. Which of the outputs corresponds to sum output of the adder?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> arch1 <span class=\"kw1\">OF</span> design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">COMPONENT</span> xor2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>i1, i2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\no <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">COMPONENT</span> and2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a1, a2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nP <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">COMPONENT</span> or2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>d1, d2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nr <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> s1, s2, s3, s4, s5 <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nX1<span class=\"sy0\">:</span> xor2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, b, s1<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX2 <span class=\"sy0\">:</span> xor2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s1, c, y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX3<span class=\"sy0\">:</span> and2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, b, s2<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX4 <span class=\"sy0\">:</span> and2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, c, s3<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX5<span class=\"sy0\">:</span> and2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>b, c, s4<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX6<span class=\"sy0\">:</span> or2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s2, s3, s5<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX7<span class=\"sy0\">:</span> or2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s4, s5, x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> arch1<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) y",
            "b) x",
            "c) s5",
            "d) c"
        ],
        "Answer": "Answer: b\nExplanation: There is no special function for defining interconnection between two or more inputs or outputs. These interconnections are defined by using port map only. When we use same port for two or more components then they are interconnected. "
    },
    {
        "id": 160,
        "Question": "5. Which modeling style is used in code given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a, b, c <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\nx, y <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> design<span class=\"sy0\">;</span>\n<span class=\"kw1\">Architecture</span> arch <span class=\"kw1\">OF</span> design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\nx <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> a <span class=\"kw3\">XOR</span> b <span class=\"kw3\">XOR</span> c<span class=\"sy0\">;</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"br0\">(</span>a <span class=\"kw3\">AND</span> b<span class=\"br0\">)</span> <span class=\"kw3\">OR</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> c<span class=\"br0\">)</span> <span class=\"kw3\">OR</span> <span class=\"br0\">(</span>a <span class=\"kw3\">AND</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> arch<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> arch1 <span class=\"kw1\">OF</span> design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">COMPONENT</span> comp1 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>i1, i2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\no <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">COMPONENT</span> comp2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a1, a2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nP <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">COMPONENT</span> comp3 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>d1, d2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\nr <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> s1, s2, s3, s4, s5 <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nX1<span class=\"sy0\">:</span> comp1 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, b, s1<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX2 <span class=\"sy0\">:</span> comp1 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s1, c, x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX3<span class=\"sy0\">:</span> comp2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, b, s2<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX4 <span class=\"sy0\">:</span> comp2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>a, c, s3<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX5<span class=\"sy0\">:</span> comp2 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>b, c, s4<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX6<span class=\"sy0\">:</span> comp3 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s2, s3, s5<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nX7<span class=\"sy0\">:</span> comp3 <span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span><span class=\"br0\">(</span>s4, s5, y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> arch1<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Behavioral and structural",
            "b) Structural",
            "c) Dataflow",
            "d) Dataflow and Structural"
        ],
        "Answer": "Answer: a\nExplanation: Since there are three components which are two inputs EXOR gate, AND gate and OR gate. The signal s1 is the output of EXOR of a and b inputs. This signal is further used to EXOR with c and the output is y. So, y = a EXOR b EXOR c, which corresponds to the sum output of the full adder."
    },
    {
        "id": 161,
        "Question": "What is the correct syntax for mapping a GENERIC parameter in structural modeling?",
        "Options": [
            "a) label : component_name GENERIC MAP(parameter_list) PORT MAP(port_list)",
            "b) label : component_name GENERIC MAP(parameter_list)",
            "c) label : parameter_name GENERIC MAP(parameter_list) PORT MAP(port_list)",
            "d) label : parameter_name GENERIC MAP(parameter_list) PORT MAP(port_list)"
        ],
        "Answer": "Answer: d\nExplanation: Since there are two architectures defined for the entity ‘design’. So, two modeling styles are used. In the first architecture, the data flow from inputs to outputs is described by using Boolean equations therefore, it is dataflow modeling. In the second architecture, components are declared and instantiated. So, it is structural model."
    },
    {
        "id": 162,
        "Question": "A component instantiation statement generates a(n) _______ of the component.",
        "Options": [
            "a) Class",
            "b) Behavior",
            "c) Structure",
            "d) Object"
        ],
        "Answer": "Answer: a\nExplanation: Generic is a constant parameter which can be used in structural modeling. But, generic is not a component as such. It can be used as a specification to any component. The correct syntax to use a generic is GENERIC MAP followed by a PORT MAP function."
    },
    {
        "id": 163,
        "Question": "If user want to convert this in an 8 bit adder, which of the following variable should be changed?",
        "Options": [
            "a) n",
            "b) input",
            "c) output",
            "d) component"
        ],
        "Answer": "Answer: d\nExplanation: By ending the component declaration, its object is created which can be used further in the code to use the declared component. The component instantiation statement uses this object and inherits the properties of component declared. These properties include all the ports and their number."
    },
    {
        "id": 164,
        "Question": "What is the other name for implicit mapping?",
        "Options": [
            "a) Nominal mapping",
            "b) Positional mapping",
            "c) Explicit mapping",
            "d) Inclusive mapping"
        ],
        "Answer": "Answer: a\nExplanation: The only way to change it is by changing the value of n. If n is changed from 3 to 7, then it will have 8 input bits and 8 output bits. In this way, by using generic, the whole structure can be altered easily. Also, it may be noted if the value of the generic is not specified, then it will take the value used at the time of entity declaration."
    },
    {
        "id": 165,
        "Question": "What does modeling type refer to?",
        "Options": [
            "a) Type of ports in entity block of VHDL code",
            "b) Type of description statements in architecture block of VHDL code",
            "c) Type of data objects",
            "d) Type of Signals"
        ],
        "Answer": "Answer: b\nExplanation: Modeling refers to the descriptive style we are using to describe our digital system. Modeling type is the type of statement used in architecture block to describe a specific system or circuit. It may define a structure or behavior or anything else."
    },
    {
        "id": 166,
        "Question": "Which of the following is not a type of VHDL modeling?",
        "Options": [
            "a) Behavioral modeling",
            "b) Dataflow modeling",
            "c) Structural modeling",
            "d) Component modeling"
        ],
        "Answer": "Answer: d\nExplanation: VHDL modeling is of three types. These types are behavioral modeling, dataflow modeling and structural modeling. There is no such modeling called component modeling. However, one can declare components in structural modeling."
    },
    {
        "id": 167,
        "Question": "In behavioral modeling, what do descriptive statements describe?",
        "Options": [
            "a) How the system performs on given input values",
            "b) How the design is to be implemented",
            "c) Netlist",
            "d) Concurrent execution"
        ],
        "Answer": "Answer: a\nExplanation: Behavioral style specifies what a particular system does in a program. It gives the details of output values corresponding to the set of input values. In general, behavioral modeling use processes to describe the functioning of system, but no detail is provided regarding the design of the system."
    },
    {
        "id": 168,
        "Question": "Which of the following statement is used in structural modeling?",
        "Options": [
            "a) portmap()",
            "b) process()",
            "c) if-else",
            "d) case"
        ],
        "Answer": "Answer: a\nExplanation: In structural modeling, the graphical representation of the system is described. All the modules, instances or components are defined along with their interconnections. It is defined that how the components are connected to each other by using nets or wires. The portmap() function is used to map the specific component in the design."
    },
    {
        "id": 169,
        "Question": "What is the basic unit of behavioral description?",
        "Options": [
            "a) Structure",
            "b) Sequence",
            "c) Process",
            "d) Dataflow"
        ],
        "Answer": "Answer: c\nExplanation: The primary unit of a behavior description in VHDL is process which describes the behavior of system on various combinations of inputs. All the system is described by using processes and therefore, process is the basic unit."
    },
    {
        "id": 170,
        "Question": "Which of the following modeling style follows the sequential processing of instructions?",
        "Options": [
            "a) Dataflow modeling",
            "b) Behavior modeling",
            "c) Structural modeling",
            "d) Component modeling"
        ],
        "Answer": "Answer: b\nExplanation: Behavior modeling uses sequential processing whereas dataflow and structural modeling uses concurrent statements. In sequential statements, the instructions are executed one after another whereas concurrent statements are executed simultaneously."
    },
    {
        "id": 171,
        "Question": "__________ modeling uses logic gates and basic blocks to describe the functionality of system.",
        "Options": [
            "a) Behavioral",
            "b) Structural",
            "c) Dataflow",
            "d) Component"
        ],
        "Answer": "Answer: c\nExplanation: In dataflow modeling, the system is represented as flow of control and movement of data. It describes how data flows from input to output by using primitive logic functions. Unlike behavioral modeling, it uses concurrent statements and logic functions."
    },
    {
        "id": 172,
        "Question": "Component instantiation is the part of __________ modeling.",
        "Options": [
            "a) Behavior",
            "b) Component",
            "c) Dataflow",
            "d) Structural"
        ],
        "Answer": "Answer: b\nExplanation: Structural style does not use processes since it just describe the graphical representation of system. It doesn’t need process statements. Process statements are required to describe the behavior and not structure. Therefore, structural doesn’t need processes."
    },
    {
        "id": 173,
        "Question": "11. Refer to the code given below, which type of modeling is used to describe the system?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> and_1 <span class=\"kw1\">OF</span> and_gate <span class=\"kw1\">IS</span>\n<span class=\"kw1\">begin</span>\n<span class=\"kw1\">process</span><span class=\"br0\">(</span>a, b, y<span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n<span class=\"kw1\">IF</span><span class=\"br0\">(</span>a <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’ <span class=\"kw3\">and</span> b <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny <span class=\"sy0\">&lt;=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span> y <span class=\"sy0\">&lt;=</span>’<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">end</span> <span class=\"kw1\">IF</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">process</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> and_1<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Structural",
            "b) Component",
            "c) Dataflow",
            "d) Behavioral"
        ],
        "Answer": "Answer: d\nExplanation: Component declaration and component instantiation is a part of structural modeling. It first declares the component and then instantiation takes place by using portmap function. Structural modeling is based on netlist."
    },
    {
        "id": 174,
        "Question": "12. Which logic function is described in the code given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_func <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">begin</span>\n<span class=\"kw1\">process</span><span class=\"br0\">(</span>a, b, y<span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n<span class=\"kw1\">IF</span><span class=\"br0\">(</span>a <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’ <span class=\"kw3\">and</span> b <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny <span class=\"sy0\">&lt;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’ <span class=\"kw3\">and</span> b<span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny<span class=\"sy0\">&lt;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span> y <span class=\"sy0\">&lt;=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">if</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">process</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_func<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) AND",
            "b) EXOR",
            "c) OR",
            "d) EXNOR"
        ],
        "Answer": "Answer: a\nExplanation: Dataflow uses primitive and basic functions to describe the flow of data through registers from inputs to output. It uses concurrent statements and process() is a sequential statement which can’t be used in data flow modeling. It is not necessary to write the name of ARCHITECTURE as ‘dataflow’."
    },
    {
        "id": 175,
        "Question": "13. Which modeling style does the following code represents?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">Architecture</span> my_logic <span class=\"kw1\">OF</span> logic_func <span class=\"kw1\">IS</span>\n<span class=\"kw1\">Component</span> gate_1\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>b1, b2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\ns <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">component</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">Component</span> gate_2 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>b1,b2 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\nC <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">component</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> a, b, sum, carry <span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">begin</span>\nEXOR <span class=\"sy0\">:</span> gate_1 portmap <span class=\"br0\">(</span>a, b, sum<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw3\">AND</span> <span class=\"sy0\">:</span> gate_2 portmap <span class=\"br0\">(</span>a,b ,carry<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_logic</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Structural",
            "b) Component",
            "c) Behavior",
            "d) Dataflow"
        ],
        "Answer": "Answer: d\nExplanation: Above shown code is for AND gate and it is using process statement. The code gives information about output values for different combinations of input values. Therefore, the code given is behavioral style of modeling."
    },
    {
        "id": 176,
        "Question": "Ports are known as _________ to the component.",
        "Options": [
            "a) Structure",
            "b) Behavior",
            "c) Function",
            "d) Interface"
        ],
        "Answer": "Answer: b\nExplanation: The modeling shown is behavioral modeling. The output y is low for 00 and 11 else the output is high. Therefore, the given logic is for exclusive OR gate. Since in EXOR he output is high for 01 and 10 which is shown in the code given."
    },
    {
        "id": 177,
        "Question": "What is the use of a function called port map()?",
        "Options": [
            "a) Component declaration",
            "b) Defining identifiers",
            "c) Component instantiation",
            "d) Defining inputs and outputs"
        ],
        "Answer": "Answer: a\nExplanation: The code describes the every component present in the circuit, here gate_1 and gate_2 are two components and then it describes the inputs and outputs of the gates by using portmap function. In this way structural modeling describes all the functions and their interconnection. Moreover, it uses concurrent statements."
    },
    {
        "id": 178,
        "Question": "The signal assignment is considered as a ________",
        "Options": [
            "a) Concurrent statement",
            "b) Sequential statement",
            "c) Subprogram",
            "d) Package declaration statement"
        ],
        "Answer": "Answer: a\nExplanation: The signal assignment statement is typically considered a concurrent statement rather than a sequential statement. However, the statement can be used as a sequential statement as well but has a side effect of obeying the general rules for when the left operand is actually updated."
    },
    {
        "id": 179,
        "Question": "How can we use an assignment statement as a sequential assignment?",
        "Options": [
            "a) By using keyword WAIT",
            "b) By using a delay mechanism",
            "c) By using conditional statements",
            "d) By using it in any process"
        ],
        "Answer": "Answer: d\nExplanation: The assignment statements can appear either in architecture or in a process. According to this only, the signal assignment is classified as a concurrent and sequential assignment. If the signal assignment is done in a process, then it is a sequential assignment, otherwise it is a concurrent assignment."
    },
    {
        "id": 180,
        "Question": "The sequential assignment statement is activated, whenever ________",
        "Options": [
            "a) The waveform associated changes its value",
            "b) The process is terminated",
            "c) The execution is scheduled",
            "d) The value of the target is needed"
        ],
        "Answer": "Answer: b\nExplanation: The sequential assignment statement appears inside a process. The statements inside the process are sequential statements and the assignment is activated when the process ends. So, the assignment will take place at the time of process termination only."
    },
    {
        "id": 181,
        "Question": "The concurrent assignment statement is activated whenever ______",
        "Options": [
            "a) The execution is scheduled",
            "b) The value of the target is needed",
            "c) The waveform associated changes its value",
            "d) The process is terminated"
        ],
        "Answer": "Answer: c\nExplanation: Concurrent assignment statement has nothing to do with processes. It is executed whenever the waveform associated with it changes its value. The value of the target is updated every time the value of waveform changes. "
    },
    {
        "id": 182,
        "Question": "Which of the following is correct syntax for a signal assignment statement (if {} specifies an optional part)?",
        "Options": [
            "a) target <= {delay_mechanism} waveform;",
            "b) target <= delay_mechanism waveform;",
            "c) target <= delay_mechanism {waveform};",
            "d) target <= {delay_mechanism} {waveform} value;"
        ],
        "Answer": "Answer: a\nExplanation: The proper signal assignment is shown in option target <= {delay_mechanism} waveform;. The ‘target’ gets the value of ‘waveform’ by executing the delay mechanism. The delay mechanism is ,however, optional but is used most of the times for better timing performance of the circuit. "
    },
    {
        "id": 183,
        "Question": "The conditional assignment statement is a _________ assignment.",
        "Options": [
            "a) Sequential",
            "b) Concurrent",
            "c) Selected",
            "d) None of the above"
        ],
        "Answer": "Answer: b\nExplanation: The conditional statement is a type of concurrent assignment statement in which the assignment is executed only if the condition specified is true. It may be noted that the condition is Boolean i.e. it may have only two values true or false. "
    },
    {
        "id": 184,
        "Question": "Delays are generally ignored in ________ assignments statements.",
        "Options": [
            "a) Concurrent",
            "b) Conditional",
            "c) Sequential",
            "d) Selected"
        ],
        "Answer": "Answer: a\nExplanation: Generally, sequential assignments are synthesizable by EDA tools. The assignment statement must be using some operators and types. The only case when these assignments are not synthesizable is when the types and operators are acceptable to the synthesis tools."
    },
    {
        "id": 185,
        "Question": "Which of the following can’t be a mode for target operand of assignment statement?",
        "Options": [
            "a) BUFFER",
            "b) INOUT",
            "c) OUT",
            "d) IN"
        ],
        "Answer": "Answer: c\nExplanation: Conditional and selected assignments are type of concurrent assignment. In case of concurrent assignments delays are usually taken into consideration. Whereas, there is no use of delays in sequential assignments since it is executed at the end of process. So, there is no need for delay in sequential assignments."
    },
    {
        "id": 186,
        "Question": "Which of the following is a variable assignment statement?",
        "Options": [
            "a) <=",
            "b) :=",
            "c) =>",
            "d) =="
        ],
        "Answer": "Answer: d\nExplanation: The left operand of assignment statement, called the target operand is always assigned the value of another operand. There is no chance of using IN type target on the left side of an assignment statement. It is mandatory that the direction of target include output."
    },
    {
        "id": 187,
        "Question": "Which of the following is a keyword used for conditional assignment?",
        "Options": [
            "a) IF",
            "b) WHEN",
            "c) FOR",
            "d) END"
        ],
        "Answer": "Answer: b\nExplanation: To assign a value to variable, a variable assignment statement is used. The symbol used for variable assignment is ‘:=’ whereas when we assign some value to a signal, <= statement is used. In case of variables if we use <= instead of :=, there can be some problem with the delay mechanisms."
    },
    {
        "id": 188,
        "Question": "For a signal used in sequential assignment, it can have _______ driver(s).",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Conditional statement is an assignment statement in which a condition is first tested and then assignment occurs. It uses the keyword WHEN to assign value to a signal conditionally. For example, y <= ‘1’ WHEN x = ‘0’. This is a conditional statement that will assign value 1 to signal y only when signal x is low."
    },
    {
        "id": 189,
        "Question": "The selected concurrent statement is equivalent to ________ sequential statement.",
        "Options": [
            "a) If else",
            "b) Loop",
            "c) Wait",
            "d) Case"
        ],
        "Answer": "Answer: d\nExplanation: Selected concurrent assignment statement is used when the target signal has to choose one value out of n(say) values. This is similar to the case statement used in the process. It uses the keyword ‘SELECT’ to select one value."
    },
    {
        "id": 190,
        "Question": "Those statement which are placed under ________ are concurrent.",
        "Options": [
            "a) Process",
            "b) Function",
            "c) Architecture",
            "d) Procedure"
        ],
        "Answer": "Answer: c\nExplanation: VHDL code, in general, is a concurrent code. Only statements placed under Process, Function or Procedure are executed sequentially. All other statements are concurrent statements. "
    },
    {
        "id": 191,
        "Question": "Which of the following can’t be implemented with concurrent statements only?",
        "Options": [
            "a) Multiplexer",
            "b) Decoder",
            "c) Adder",
            "d) Counter"
        ],
        "Answer": "Answer: a\nExplanation: Since execution of a concurrent statement is parallel and an assignment statement has to be executed whenever the signal associated with it changes its value. Therefore, there is no restriction on the order of the statements."
    },
    {
        "id": 192,
        "Question": "Variable assignment statement executes in ______ time.",
        "Options": [
            "a) Immediately(zero)",
            "b) After delay specified",
            "c) After one clock cycle",
            "d) After two clock cycles"
        ],
        "Answer": "Answer: d\nExplanation: In general, we use concurrent code to build combinational circuits and the reason is that order of statements is not a problem. So, we can’t use purely concurrent code to obtain sequential logic circuits due to use of clock and processes. Hence, counter can’t be designed by using concurrent code only."
    },
    {
        "id": 193,
        "Question": "6. In the signal assignment statement, which delay is used?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">AFTER</span> 10ns</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Transport delay",
            "b) Inertial delay",
            "c) Delta delay",
            "d) Wire delay"
        ],
        "Answer": "Answer: a\nExplanation: When a variable is assigned a value, the assignment executes in zero simulation time. In other words, it changes the value of variable immediately. Also, the delay mechanism is used in the signal assignment but not in variable assignment. Variable assignment doesn’t use any delay mechanism."
    },
    {
        "id": 194,
        "Question": "Inertial delay in Signal assignment is useful to ___________",
        "Options": [
            "a) Specify wire delay",
            "b) Accumulate delay",
            "c) Ignore input glitches",
            "d) No use"
        ],
        "Answer": "Answer: b\nExplanation: Inertial delay is the default delay in VHDL in which only last value is persisted ignoring all other delays. In the case of inertial delay, there is no need of specifying anything like we need to write TRANSPORT to specify the transport delay."
    },
    {
        "id": 195,
        "Question": "Which of the following statement is a zero delay statement?",
        "Options": [
            "a) y <= x AFTER 10 ns",
            "b) y <= TRANSPORT x AFTER 10 ns",
            "c) y <= x",
            "d) y := x AFTER 10 ns"
        ],
        "Answer": "Answer: c\nExplanation: Inertial delay assignment takes only last assignment statement into consideration ignoring all the preceding assignments. So, any intermediate change will be ignored. Therefore, It is useful in ignoring input glitches."
    },
    {
        "id": 196,
        "Question": "Which of the following statement can’t be used to assign values in behavioral modeling of OR Gate?",
        "Options": [
            "a) Simple concurrent assignment",
            "b) Sequential assignment",
            "c) Conditional concurrent assignment",
            "d) Selected concurrent assignment"
        ],
        "Answer": "Answer: d\nExplanation: Signal assignment always have some amount of delay either inertial or transport. If there is no delay specified in signal assignment, even then the delta delay is used to assign value. Only variable assignment is executed immediately also the delay is ignored. Therefore, option d is zero delay statement."
    },
    {
        "id": 197,
        "Question": "Which of the following is not an assignment statement?",
        "Options": [
            "a) <=",
            "b) :=",
            "c) =>",
            "d) :>"
        ],
        "Answer": "Answer: d\nExplanation: In the behavioral modeling, various output values are described w.r.t different combination of input values. A conditional concurrent assignment and selected concurrent assignment can add some condition for assigning values. Same can be done with sequential statements. By using simple concurrent statements, it is not possible to realize or gate."
    },
    {
        "id": 198,
        "Question": "OTHERS keyword is used with which kind of assignment?",
        "Options": [
            "a) Concurrent",
            "b) Sequential",
            "c) Selected",
            "d) Conditional"
        ],
        "Answer": "Answer: d\nExplanation: There are three assignment statements in VHDL. <= is a signal assignment statement, := is used for variable assignment and => is used at the time of mapping the components and is used with ‘OTHERS’. These are 3 type of assignment operators."
    },
    {
        "id": 199,
        "Question": "12. The following code represents which of the logic gates?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">WITH</span> ab <span class=\"kw1\">SELECT</span> \ny <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">WHEN</span> “<span class=\"nu0\">11</span>”<span class=\"sy0\">;</span><span class=\"nu0\">0</span>\t<span class=\"kw1\">WHEN</span> <span class=\"kw1\">OTHERS</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) And gate",
            "b) Or gate",
            "c) Not gate",
            "d) Nand gate"
        ],
        "Answer": "Answer: c\nExplanation: Selected concurrent assignment statement is used when you have to choose one value out of n values. In that case WHEN and OTHERS keywords are used. OTHERS is similar to the ELSE statement which will be selected when all the conditions are false."
    },
    {
        "id": 200,
        "Question": "Process is a _______ statement.",
        "Options": [
            "a) Concurrent",
            "b) Sequential",
            "c) Delay",
            "d) Both concurrent and sequential"
        ],
        "Answer": "Answer: a\nExplanation: Process statement itself is a concurrent statement. Since, the architecture of an entity can contain only concurrent statements, so, process is a concurrent statement. Basically, Process itself is a concurrent statement which includes sequential statement. The statements enclosed in a process statement are executed sequentially."
    },
    {
        "id": 201,
        "Question": "If there is more than one process in a VHDL code, How they are executed?",
        "Options": [
            "a) One after the other",
            "b) Concurrently",
            "c) According to sensitivity list",
            "d) Sequentially"
        ],
        "Answer": "Answer: b\nExplanation: All the processes in a design execute concurrently or in a parallel manner. However, at a given time, only one statement is executed within the process. More than one processes can execute in a parallel manner, but the same is not true for statements within a process."
    },
    {
        "id": 202,
        "Question": "Local variables in a process can be declared __________",
        "Options": [
            "a) Anywhere within the process",
            "b) After a sequential statement",
            "c) Before the BEGIN keyword",
            "d) After the BEGIN keyword"
        ],
        "Answer": "Answer: a\nExplanation: A process can have a declaration part followed by statement part. A process can have its local variables, constants, types or subtypes declared in it which will be visible to the process only. The local process variables can’t be used outside the process. "
    },
    {
        "id": 203,
        "Question": "Sensitivity list of a process contains __________",
        "Options": [
            "a) Constants",
            "b) Signals",
            "c) Variables",
            "d) Literals"
        ],
        "Answer": "Answer: d\nExplanation: A process is declared by using an optional label followed by keyword process and the list of signals to which process is sensitive. After which, there is a declaration part for the process and a statements section. Both parts are separated by keyword BEGIN. THEN, the process is terminated by using keyword END followed by Process."
    },
    {
        "id": 204,
        "Question": "Which of the following statement is used when there are no signals in the sensitive list?",
        "Options": [
            "a) WHEN",
            "b) IF ELSE",
            "c) WAIT",
            "d) CASE"
        ],
        "Answer": "Answer: b\nExplanation: A process has its sensitivity list containing the names of signals to which the process is sensitive. It can contain any number of signals which will trigger the process of change of value of any of these signals. It may not contain constants or variables, only signals are valid."
    },
    {
        "id": 205,
        "Question": "What is the effect of the sensitivity list on the process?",
        "Options": [
            "a) Process executes when any of the signal in sensitivity list changes",
            "b) Process executes sequentially when sensitivity list is specified",
            "c) If there is no sensitivity list, then the process will not execute",
            "d) Helps in simulation"
        ],
        "Answer": "Answer: c\nExplanation: A process can be sensitive to one or more signals. These signals are either specified in the sensitivity list of the process. If there is no sensitivity list, then the signals used in WAIT statements are the signals to which process is sensitive."
    },
    {
        "id": 206,
        "Question": "If no signal in the sensitivity list is changed, then how many times the process will be executed?",
        "Options": [
            "a) 3",
            "b) 2",
            "c) 1",
            "d) 0"
        ],
        "Answer": "Answer: a\nExplanation: The sensitivity list contains those signals which affect the execution of the process. Whenever one or more statements inside the sensitivity list changes, the execution starts. So, the process is executed again and again whenever any value change. It starts from BEGIN keyword and all statements are executed serially and then it waits for change in any value. "
    },
    {
        "id": 207,
        "Question": "Which of the following statements can be seen as sequential equivalent to the selected concurrent assignment?",
        "Options": [
            "a) IF ELSE",
            "b) WAIT",
            "c) WHEN",
            "d) CASE"
        ],
        "Answer": "Answer: b\nExplanation: The use of label is optional. The purpose of using label is just to improve the readability of code. If it is used, then at the end of the process the same label should be written. For example, if label L1 is used to start the process then at the end, it must be- END PROCESS L1."
    },
    {
        "id": 208,
        "Question": "A __________ can’t be declared inside a process.",
        "Options": [
            "a) Signal",
            "b) Variable",
            "c) Constants",
            "d) Subprograms"
        ],
        "Answer": "Answer: c\nExplanation: The process is executed at least once, no matter if the signal changes or not. At the time when the simulation is initiated, the process is triggered. After this one time execution of process, it waits for change in state of signals in sensitivity list. "
    },
    {
        "id": 209,
        "Question": "The process can be __________ by using WAIT statements.",
        "Options": [
            "a) Suspended",
            "b) Resumed",
            "c) Suspended as well as resumed",
            "d) Cannot be determined"
        ],
        "Answer": "Answer: b\nExplanation: The sensitivity list and wait statements can’t be used simultaneously in the same process. One can either use sensitive list or wait statements in a process. Both of them are used to define the signals to which the process is sensitive. These sensitive signals execute process as an infinite loop. "
    },
    {
        "id": 210,
        "Question": "A postponed process runs when ___________",
        "Options": [
            "a) All the other processes have completed",
            "b) After completion of one particular process",
            "c) Concurrently with all other processes",
            "d) First of all processes"
        ],
        "Answer": "Answer: c\nExplanation: The signals used in WAIT statements are the statements which can also be declared in sensitivity list. These signals can be used to suspend as well as resume the process as many times as designer want. "
    },
    {
        "id": 211,
        "Question": "Which of the following statement can’t be used inside a process?",
        "Options": [
            "a) WAIT",
            "b) IF ELSE",
            "c) Variable declaration",
            "d) PORT MAP"
        ],
        "Answer": "Answer: a\nExplanation: A postponed process can be defined in VHDL-93. A postponed process runs when all the normal processes have completed at a particular point of time at the time of simulation. These processes can’t schedule any further events with zero delays."
    },
    {
        "id": 212,
        "Question": "5. Which of the following signal cause the process to execute?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>clr<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>clr <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> input<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) input",
            "b) y",
            "c) clr",
            "d) x"
        ],
        "Answer": "Answer: d\nExplanation: A process itself is a concurrent statement which can have only sequential statements. IF ELSE and WAIT statements can be easily used inside a process. Also, there is a declaration part of the process so variable declaration is possible. Only PORT MAP is not possible inside the process among the above options since it is a concurrent statement."
    },
    {
        "id": 213,
        "Question": "6. The value of y is initially 1 and it is changed after one delta cycle to 0. How many delta cycles (starting from the beginning) will be taken to change the initial value of z, refer to the process given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\nx <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span>y<span class=\"sy0\">;</span>\nz <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"kw3\">NOT</span> y<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: The sensitivity list of the process contains only one signal which is ‘clr’. So, the process will be executed when the value of clr changes. Though value of input will be assigned to y once but change in value of ‘input’ will not cause execution of process again."
    },
    {
        "id": 214,
        "Question": "A combinational process must have all the _________ signals in its sensitivity list.",
        "Options": [
            "a) Input",
            "b) Output",
            "c) Declared",
            "d) Used"
        ],
        "Answer": "Answer: b\nExplanation: At the very beginning, the value of z is 0. After 1 delta cycle, the value of y changes which causes process to run again. So, in 2nd delta cycle process will be executed but assignments will be done after the execution of process is over. So, at the end of 2nd delta cycle, the assignments will be executed. "
    },
    {
        "id": 215,
        "Question": "Which of the following circuit can’t be described without using a process statement?",
        "Options": [
            "a) Multiplexer",
            "b) D flip-flop",
            "c) Decoder",
            "d) Comparator"
        ],
        "Answer": "Answer: a\nExplanation: All the inputs must be used in the sensitivity list to get the desired list. Because if any of the input signal is updated then it is needed that the output also gets updated. To update any output, one needs to activate the process again which is possible only by the signals in the sensitivity list. Therefore, all the signals which it has to read or the input signals must be used in the sensitivity list. "
    },
    {
        "id": 216,
        "Question": "Which of the following signal uses keyword EVENT?",
        "Options": [
            "a) Variables",
            "b) Output",
            "c) Input",
            "d) Clock"
        ],
        "Answer": "Answer: a\nExplanation: A process can have multiple WAIT statements and can be placed anywhere inside the process body. However, it can have only one sensitivity list (can contain many signals) but, there is no restriction on use of WAIT statements. "
    },
    {
        "id": 217,
        "Question": "11. Refer to the code given below, what kind of circuit is designed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SIGNAL</span> x <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> y <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">SIGNAL</span> clk <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>clk<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>clk’EVENT <span class=\"kw3\">and</span> clk <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span>\ny <span class=\"sy0\">;&amp;</span>lt<span class=\"sy0\">=</span> x<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Buffer",
            "b) Latch",
            "c) Flip flop",
            "d) Shift Register"
        ],
        "Answer": "Answer: b\nExplanation: Since a flip flop requires a clock signal which can’t be used directly in architecture without using a process (as it is a sequential process). So, for using the clock, using a process is mandatory. All the other circuits like multiplexer, decoder or comparator are combinational circuits and do not need any clock. So, they can be modeled without using a process."
    },
    {
        "id": 218,
        "Question": "12. The driver(s) of signal y is _________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> x<span class=\"sy0\">;</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> z<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) z",
            "b) x",
            "c) x and z",
            "d) 1"
        ],
        "Answer": "Answer: d\nExplanation: To use a clock signal in a design description, EVENT is used. It is used inside the process body which indicates the change in value of clock signal so that the design can be synchronized with the clock signal or clock frequency. It can be used in an IF statement to assign any input expression to the output."
    },
    {
        "id": 219,
        "Question": "13. The resolution function is needed to resolve the value of _______<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> x<span class=\"sy0\">;</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> z<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) z",
            "b) y",
            "c) x",
            "d) No x, y and z"
        ],
        "Answer": "Answer: c\nExplanation: It is clear from the code that it is a sequential circuit using clock EVENT and the value of input is assigned to the output directly. So, it can’t be a buffer since buffer doesn’t need any clock signal. So, It is a synchronized flip flop. Clearly, It can be said that the given flip flop is a D flip flop. "
    },
    {
        "id": 220,
        "Question": "What kind of statement is the IF statement?",
        "Options": [
            "a) Concurrent",
            "b) Sequential",
            "c) Assignment",
            "d) Selected assignment"
        ],
        "Answer": "Answer: b\nExplanation: IF statement is a sequential statement which appears inside a process, function or subprogram. This statement is used to execute some block of statements if a condition executed comes to be true. "
    },
    {
        "id": 221,
        "Question": "Which of the following keyword is not associated with IF statement?",
        "Options": [
            "a) ELSE",
            "b) THEN",
            "c) ELSIF",
            "d) WHEN"
        ],
        "Answer": "Answer: d\nExplanation: The IF statement can use the keywords ELSIF, THEN and ELSE but not the keyword WHEN. IF statement is followed by a condition which is followed by the keyword THEN. After which to add more conditions one can use ELSIF and ELSE keywords. "
    },
    {
        "id": 222,
        "Question": "Which of the following represents the correct order for keywords?",
        "Options": [
            "a) IF, THEN, ELSIF, THEN, ELSE",
            "b) IF, ELSE, THEN, ELSIF, THEN",
            "c) IF, ELSIF, THEN, ELSE, THEN",
            "d) IF, THEN, ELSE, THEN, ELSIF"
        ],
        "Answer": "Answer: a\nExplanation: In case of IF statement, the keyword IF is followed by the condition and then the keyword THEN. After this any other condition is entered by using ELSIF keyword and all the other exceptions are handled by using ELSE keyword. So, the correct order is shown in option a which is IF, THEN, ELSIF, THEN, ELSE."
    },
    {
        "id": 223,
        "Question": "If the condition of IF statement is an expression, then what should be the type of the result of the expression?",
        "Options": [
            "a) Bit",
            "b) Std_logic",
            "c) Boolean",
            "d) Integer"
        ],
        "Answer": "Answer: c\nExplanation: It doesn’t matter what is the type of the expression, the result must be of Boolean type. It can have only two values which may be either TRUE or FALSE. If the result is true, THEN the statements under IF are executed otherwise ELSE is executed."
    },
    {
        "id": 224,
        "Question": "6. In the following lines, what should be the value of signal y, if a and b both are at logic high?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">IF</span><span class=\"br0\">(</span> a <span class=\"kw3\">XOR</span> b <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span>’<span class=\"nu0\">1</span>’<span class=\"br0\">)</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>a <span class=\"kw3\">AND</span> b <span class=\"sy0\">&lt;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"br0\">)</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> a<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) b",
            "c) 0",
            "d) 1"
        ],
        "Answer": "Answer: b\nExplanation: For a sequential IF statement, the condition is evaluated and if it is found to be true then the statements under IF are executed and after that the sequence of ELSIFs is used and finally an ELSE is used and it is ended by using END keyword followed by IF. "
    },
    {
        "id": 225,
        "Question": "Which of the following condition has topmost priority?",
        "Options": [
            "a) IF",
            "b) ELSIF",
            "c) ELSE",
            "d) THEN"
        ],
        "Answer": "Answer: c\nExplanation: At the time of synthesis, first the condition of IF statement is tested and it is found to be FALSE, so the statements under IF statements are skipped and the condition of ELSIF is tested. That condition again comes to be FALSE and hence the statement under else is executed. So, y is assigned 1."
    },
    {
        "id": 226,
        "Question": "9. What logic is described in the following logic?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>\n<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’ <span class=\"kw3\">AND</span> b <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’ <span class=\"kw3\">OR</span> a<span class=\"sy0\">=</span> ’<span class=\"nu0\">0</span>’ <span class=\"kw3\">AND</span> b <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’ <span class=\"kw3\">AND</span> b<span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span>\n y <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">IF</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) EXOR",
            "b) EXNOR",
            "c) AND",
            "d) NOR"
        ],
        "Answer": "Answer: a\nExplanation: Like other traditional languages, it is possible to use an IF statement inside another IF statement.  In this case, when one IF statement is used inside another IF statement, this is called the nested IF statement. This allows to use more than one condition simultaneously."
    },
    {
        "id": 227,
        "Question": "One IF statement can have multiple ___________",
        "Options": [
            "a) IF",
            "b) ELSIF",
            "c) ELSE",
            "d) CASE"
        ],
        "Answer": "Answer: a\nExplanation: IF has the topmost priority which means the remaining block will be executed only if the condition under IF gives FALSE. Otherwise, if it is true, then the block is shifted until END IF statement. After the IF condition, the next priority is ELSIF condition. ELSE is executed only if every preceding condition is FALSE."
    },
    {
        "id": 228,
        "Question": "If a user gets an error at the time of simulation which is “ the IF statement is illegal” what could be the reason?",
        "Options": [
            "a) Using IF statement in architecture body",
            "b) Using IF statement without ELSE",
            "c) Using multiple ELSE statements",
            "d) Using concurrent assignment in the IF"
        ],
        "Answer": "Answer: a\nExplanation: Here, in the given code, the output is 1 if either a is 1 or b is 1. In the ELSIF, the condition is that the output will be zero if both the inputs are 1. So, both inputs can’t be high at the same time. Therefore, the logic described is exclusive OR logic."
    },
    {
        "id": 229,
        "Question": "In a clocked process, IF statement is used to __________",
        "Options": [
            "a) To run statements sequentially",
            "b) To use concurrent assignment within process",
            "c) To detect the clock signal",
            "d) To implement sequential circuit"
        ],
        "Answer": "Answer: b\nExplanation: It is possible to have multiple ELSIF parts within one IF – END IF block. The IF statement can have multiple ELSIF parts but can have only one ELSE statement part. ELSE part will be executed after each of the ELSIF part is checked and found to be FALSE."
    },
    {
        "id": 230,
        "Question": "14. What will be the output in the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_logic <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\na <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\nb <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>a <span class=\"kw3\">AND</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\noutput <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> a<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>a <span class=\"kw3\">OR</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\noutput <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> b<span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span>\noutput <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_logic<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) b",
            "d) a"
        ],
        "Answer": "Answer: a\nExplanation: Yes, It is not necessary that within a single IF or ELSIF, only one sequential statement is allowed. Multiple statements can be there between each statement part. Unlike, traditional languages it doesn’t need {} to write multiple statements."
    },
    {
        "id": 231,
        "Question": "What is the problem with IF statement?",
        "Options": [
            "a) Overlapping of conditions",
            "b) No default value",
            "c) The condition can be Boolean only",
            "d) Restriction on number of ELSE statement"
        ],
        "Answer": "Answer: a\nExplanation: The IF statement has a priority according to which conditions are being tested. Whenever it is found to be true, all the following ELSIF statements are skipped and the END IF is executed. Sometimes, it is possible that two conditions may overlap which can cause a change in output and we may not get the output as expected. "
    },
    {
        "id": 232,
        "Question": "In which of the following statements, all the branches are equal in priority?",
        "Options": [
            "a) IF",
            "b) CASE",
            "c) WAIT",
            "d) LOOP"
        ],
        "Answer": "Answer: b\nExplanation: Only IF and CASE statements have branches. Among which IF statement has a priority scheduled which is IF, then ELSIF sequentially and ELSE at the lowest priority. Unlike the IF statement, CASE statement has no priority. All the branches are equal in priority and all the cases are covered. Due to this, it is obvious that there must not be any overlaps. "
    },
    {
        "id": 233,
        "Question": "In case any of the conditions is not covered by ‘cases’ in the case statement, which of the following keyword can be used to cover all those conditions?",
        "Options": [
            "a) ELSE",
            "b) ELSIF",
            "c) REMAINING",
            "d) OTHERS"
        ],
        "Answer": "Answer: d\nExplanation: All the possible values, which a CASE expression can take, must be covered. For covering all the remaining values, which are not specified, the keyword OTHERS is used. "
    },
    {
        "id": 234,
        "Question": "CASE is a sequential statement, which is similar to _________ concurrent statement.",
        "Options": [
            "a) Concurrent assignment",
            "b) PORT MAP",
            "c) WHEN",
            "d) THEN"
        ],
        "Answer": "Answer: c\nExplanation: CASE is similar to a selected signal assignment where the keyword WHEN is used along with the assignment statement. In case of sequential code, CASE can be used for the same purpose. Both CASE and WHEN uses the keyword OTHERS to handle the remaining permutations. "
    },
    {
        "id": 235,
        "Question": "7. What will be the value of Z in the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> case_1 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">Port</span> <span class=\"br0\">(</span>a, b, c, y <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">range</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">31</span>\n           z              <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">range</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span>\n<span class=\"kw1\">ARCHITECTURE</span> example <span class=\"kw1\">OF</span> case_1 <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\na <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span>\nb <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span>\nc <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PROCESS</span><span class=\"br0\">(</span>a, b, c, y<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">CASE</span> y<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">IS</span>\n<span class=\"kw1\">WHEN</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span>\nz <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> a<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span>\nz <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> b<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span>\nz <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> c<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> <span class=\"kw1\">OTHERS</span> <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span>\nZ <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">CASE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> example<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 5",
            "d) 6"
        ],
        "Answer": "Answer: b\nExplanation: The CASE statement is started with the keyword CASE followed by any identifier or expression and the IS. The expression is solved to get the value and the result of expression is matched with the choices and when it is matched, the corresponding sequential statements are executed. If the value doesn’t match any of the choices, then the statements under OTHERS are executed. It may be noted that the choices are followed by the operator => but not <=. "
    },
    {
        "id": 236,
        "Question": "What should be the type of choices in the CASE statement?",
        "Options": [
            "a) Boolean",
            "b) Integer",
            "c) Same as expression",
            "d) No restriction on the type"
        ],
        "Answer": "Answer: b\nExplanation: Unlike IF, it is not necessary that the expression used must give a Boolean value. It can be of any type. There is no such restriction on the type of expression used. It can be Integer, Character, Bit, Std_logic. There is no specific type of expression. "
    },
    {
        "id": 237,
        "Question": "If one wants to perform no action, when any condition is true, then which of the following keyword can be used?",
        "Options": [
            "a) NO OPERATION;",
            "b) NOP;",
            "c) NULL;",
            "d) NEXT;"
        ],
        "Answer": "Answer: c\nExplanation: A NULL statement is generally used in CASE statement. The system will ignore the null statement and proceed to the next statement. This statement is used to explicitly state that no action is to be performed when a condition is true. Generally, this can be used in the OTHERS part of the CASE block. "
    },
    {
        "id": 238,
        "Question": "It is not possible to use range with _________ types.",
        "Options": [
            "a) Integer",
            "b) BIT_VECTOR",
            "c) STD_LOGIC",
            "d) Natural"
        ],
        "Answer": "Answer: b\nExplanation: The range used in the choices must be a discrete range. We can use the range in every data type but not with vector types. For example, if we write WHEN 000 TO 010 THEN, it will be an illegal statement. This is not synthesizable and will get an error as well."
    },
    {
        "id": 239,
        "Question": "The CASE statement in VHDL is similar to _________ in C.",
        "Options": [
            "a) Switch",
            "b) If else",
            "c) Pointers",
            "d) Arrays"
        ],
        "Answer": "Answer: a\nExplanation: In traditional programming languages like C, a Switch statement is used which is similar to the CASE statement of VHDL. In Switch, like CASE, one value from multiple possible values is chosen and the respective code is executed."
    },
    {
        "id": 240,
        "Question": "Which of the following operators can’t be used in the choices of a CASE?",
        "Options": [
            "a) Arithmetic",
            "b) Logical",
            "c) Relational",
            "d) Every type of operators can be used"
        ],
        "Answer": "Answer: c\nExplanation: The choices can’t include a Relational operator in it such as less than or greater than operators. Use of these operators can result in overlapping of conditions which is not allowed in the CASE statement."
    },
    {
        "id": 241,
        "Question": "What is the main use of a CASE statement?",
        "Options": [
            "a) To design multiplexers",
            "b) To design Comparators",
            "c) To design Flip flop",
            "d) To design state machines"
        ],
        "Answer": "Answer: a\nExplanation: The OTHERS clause is used to cover all the remaining choices. In case, when one is sure that no choice is remaining, then the OTHERS clause has no use. Then the OTHERS clause is of no use."
    },
    {
        "id": 242,
        "Question": "Which of the following is most complex?",
        "Options": [
            "a) IF THEN ELSE",
            "b) Nested IF THEN ELSE",
            "c) ELSIF",
            "d) CASE"
        ],
        "Answer": "Answer: d\nExplanation: CASE is basically used in the design of state machines. Since there are various combinations of present state and next states due to which there are various choices to select from. That’s why CASE is used in the modeling of state machines."
    },
    {
        "id": 243,
        "Question": "Which of the following is not a legal statement used Ii CASE?",
        "Options": [
            "a) WHEN 1 =>",
            "b) WHEN 1 TO 3 =>",
            "c) WHEN 1|3 =>",
            "d) WHEN 1 THEN"
        ],
        "Answer": "Answer: b\nExplanation: The nested IF ELSE statement is most complex statement. Since it needs to define If again and again inside another ELSE statement. This is the equivalent of ELSIF clause but is more complex. Using ELSIF is easier than using nested IF ELSE."
    },
    {
        "id": 244,
        "Question": "A loop statement is used where we needs to ________",
        "Options": [
            "a) Select one from many choices",
            "b) Check a condition",
            "c) Repeat the statements",
            "d) Choose one from two cases"
        ],
        "Answer": "Answer: c\nExplanation: As the name suggests, a loop statement includes a sequence of statements which have to be executed repeatedly zero or more times. There are different iteration schemes available to generate loops in which some condition may be included to generate a finite loop.  "
    },
    {
        "id": 245,
        "Question": "Loop is a ________ statement.",
        "Options": [
            "a) Concurrent",
            "b) Sequential",
            "c) Assignment",
            "d) Functional"
        ],
        "Answer": "Answer: b\nExplanation: Like IF, WAIT, CASE, LOOP is also intended exclusively for sequential code. It is a sequential statement which can be used inside a process, function or procedure only. "
    },
    {
        "id": 246,
        "Question": "How many styles of loop statement does the VHDL have?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: a\nExplanation: There are two different styles of the loop statement which are FOR LOOP and WHILE LOOP. These are called the iteration schemes. However, it is possible to define a loop without using these iteration schemes. In that case we need to use WAIT statement. "
    },
    {
        "id": 247,
        "Question": "What is the use of FOR loop?",
        "Options": [
            "a) To repeat the statement finite number of times",
            "b) To repeat the statement until any condition holds true",
            "c) To repeat the statements for infinite time",
            "d) To repeat statements inside until any condition is false"
        ],
        "Answer": "Answer: a\nExplanation: FOR LOOP iteration scheme is used to repeat the statements enclosed within a fixed number of times. There is no condition used in the for loop, but a limit is set which must be static and the loop will run only given number of times. "
    },
    {
        "id": 248,
        "Question": "What is the use of WHILE loop?",
        "Options": [
            "a) To repeat the statement finite number of times",
            "b) To repeat the statement until any condition holds true",
            "c) To repeat the statements for infinite time",
            "d) To repeat statements inside until any condition is false"
        ],
        "Answer": "Answer: b\nExplanation: WHILE LOOP is repeated until a condition no longer holds. The condition is first tested and if it is found to be true then the loop iteration starts. With the end of iteration, the condition is again tested and the process continues until the condition is not false. "
    },
    {
        "id": 249,
        "Question": "What does the next statement in loops do?",
        "Options": [
            "a) Skips the current iteration",
            "b) Starts the next loop by ending the current",
            "c) Exits the loop",
            "d) Skips the next line of the loop"
        ],
        "Answer": "Answer: a\nExplanation: The next statement is used to skip the current iteration and start the next iteration of the same loop. This statement passes the control the statement which is enclosing the innermost loop. This statement is useful when one needs to perform some action for every value except one."
    },
    {
        "id": 250,
        "Question": "What is the syntax to use the NEXT statement?",
        "Options": [
            "a) NEXT condition loop_label",
            "b) NEXT loop_label WHEN condition",
            "c) loop_label NEXT WHEN condition",
            "d) loop_label NEXT condition"
        ],
        "Answer": "Answer: b\nExplanation: The next statement can be used by using the keyword NEXT followed by the loop label so that it can execute the next iteration by passing the control to the statement containing loop_label. Loop label is followed by keyword WHEN and one condition so that the iteration is skipped only when the condition is true. If there is no label given to the loop then there is no need to write the label in the NEXT statement. In that case, next statement applies to the innermost enclosing loop."
    },
    {
        "id": 251,
        "Question": "The correct syntax for using EXIT in a loop is ___________",
        "Options": [
            "a) EXIT loop_label WHEN condition;",
            "b) EXIT WHEN condition loop_label;",
            "c) loop_label WHEN condition EXIT",
            "d) EXIT WHEN loop_label condition"
        ],
        "Answer": "Answer: a\nExplanation: EXIT is the keyword used for the execution of EXIT statement. This keyword is followed by the optional loop label which again is followed by keyword WHEN and the condition which should by true for ending the loop. If the loop label is absent, then the exit statement automatically applies tot the innermost enclosing loop. "
    },
    {
        "id": 252,
        "Question": "FOR loop uses a loop index, the type of loop index is _________",
        "Options": [
            "a) STD_LOGIC_VECTOR",
            "b) BIT_VECTOR",
            "c) INTEGER",
            "d) REAL"
        ],
        "Answer": "Answer: c\nExplanation: The loop index is used as a counter which counts the number of iterations and this loop index is an INTEGER by default. This is because by using an integer, the counting can be done easily which is not possible with real numbers."
    },
    {
        "id": 253,
        "Question": "Where do we declare the loop index of a FOR LOOP?",
        "Options": [
            "a) Entity",
            "b) Architecture",
            "c) Library",
            "d) It doesn’t have to be declared"
        ],
        "Answer": "Answer: d\nExplanation: The loop index doesn’t have to be declared because it is always an integer and can be directly used in a loop. So, it is locally declared for a loop. For example, FOR x in 1 TO 10 LOOP; Here ‘x’ is the loop index. Also, it can be reassigned a value within the loop."
    },
    {
        "id": 254,
        "Question": "A FOR loop is inside a WHILE loop. Inside the FOR loop, the EXIT statement is used in such a way that after 4 iterations, it will execute. After the execution of EXIT statement, the control will be passed ________",
        "Options": [
            "a) Outside the FOR loop",
            "b) Outside the WHILE loop",
            "c) At the next iteration of WHILE loop",
            "d) At the next iteration of FOR loop"
        ],
        "Answer": "Answer: a\nExplanation: If the loop is nested inside another loop, then exit statement will end the innermost loop only. It will not end the execution of all the loops. It will start execution from the innermost statement containing END LOOP. So, the control will be passed to the statement next to the end of FOR loop. "
    },
    {
        "id": 255,
        "Question": "5. A for loop is initiated as given below, in total how many iterations will be there for the FOR loop?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">FOR</span> i <span class=\"kw1\">IN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span> <span class=\"kw1\">LOOP</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 5",
            "d) 6"
        ],
        "Answer": "Answer: d\nExplanation: As told earlier, i is the loop index which is integer by default. So, the counting will start from 0 and then 1 and so on till 5. Therefore, the loop will execute 6 times. If one wants to execute it 5 times then either 0 to 4 or 1 to 5 should be used. "
    },
    {
        "id": 256,
        "Question": "What is the use of EXIT statement in a loop?",
        "Options": [
            "a) For skipping one execution",
            "b) For repeating one statement in the loop",
            "c) For ending the condition and creating infinite loop",
            "d) For ending the loop"
        ],
        "Answer": "Answer: b\nExplanation: The loop index in FOR loop must contain a static value only. It is not possible to synthesize the design if the loop range is not static or it is a variable. So, we can’t use a variable in the loop range line otherwise the loop will not be synthesizable. "
    },
    {
        "id": 257,
        "Question": "On what side of the assignment statement, one can use a loop index?",
        "Options": [
            "a) Left",
            "b) Right",
            "c) Left or Right",
            "d) Loop index can’t be used in an assignment"
        ],
        "Answer": "Answer: d\nExplanation: The exit statement completes the execution of an enclosing loop statement and passes the control to the statement after the exited loop. It will skip all the following iterations and starts execution after the statement containing END LOOP. "
    },
    {
        "id": 258,
        "Question": "The FOR loop is not synthesizable if it contains ______ statement.",
        "Options": [
            "a) WHEN",
            "b) THEN",
            "c) WAIT",
            "d) IF"
        ],
        "Answer": "Answer: b\nExplanation: The loop index can be used on the right side of the assignment only. It has read only access. It means that we can’t use index as an output signal. However, it is possible to use this variable as an index to some vector type. "
    },
    {
        "id": 259,
        "Question": "11. Which logic circuit is described in the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n&nbsp;\n<span class=\"kw1\">ENTITY</span> system <span class=\"kw1\">IS</span>\n<span class=\"kw1\">GENERIC</span> <span class=\"br0\">(</span>l <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span> a, b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span> <span class=\"br0\">(</span> l <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n              c     <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span>\n              x     <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span> <span class=\"br0\">(</span>l <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n              y     <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> system<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> design <span class=\"kw1\">OF</span> system <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">PROCESS</span> <span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span>\n<span class=\"kw1\">VARIABLE</span> z <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span> <span class=\"br0\">(</span> l <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">BEGIN</span>\nz<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> c<span class=\"sy0\">;</span>\n<span class=\"kw1\">FOR</span> I <span class=\"kw1\">IN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> l <span class=\"kw1\">LOOP</span>\nx<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">XOR</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">XOR</span> z<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nz<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">OR</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> z<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">OR</span> <span class=\"br0\">(</span>b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> z<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">LOOP</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">&lt;=</span> z<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> design<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4-bit full subtractor",
            "b) 4-bit half subtractor",
            "c) 4-bit half adder",
            "d) 4-bit full adder"
        ],
        "Answer": "Answer: a\nExplanation: Since we can’t use a signal or variable in the loop range statement, so the FOR loop always runs for a specified or constant number of times. Whereas a WHILE loop can be used to run a loop and we don’t need to know that how many times the loop must be executed. "
    },
    {
        "id": 260,
        "Question": "Assert statement is a _____________ statement.",
        "Options": [
            "a) Concurrent and synthesizable",
            "b) Sequential and synthesizable",
            "c) Concurrent and Non-synthesizable",
            "d) Sequential and Non-synthesizable"
        ],
        "Answer": "Answer: d\nExplanation: Assert statement is a sequential statement which can appear inside a process, function or procedure. Also, this statement is a non-synthesizable statement which is used to report some textual string to the designer."
    },
    {
        "id": 261,
        "Question": "What is the use of assert statement in VHDL?",
        "Options": [
            "a) To print any string",
            "b) To check the consistency and generate a message",
            "c) Cause execution of sequential statements to wait",
            "d) To check if a condition can stop the execution"
        ],
        "Answer": "Answer: b\nExplanation: ASSERT statement is used to check the consistency of the program. It checks a condition and generates a message which is printed on the screen depending on the status of the condition whether it is true or false."
    },
    {
        "id": 262,
        "Question": "What is the correct syntax for using ASSERT statement?",
        "Options": [
            "a) ASSERT condition [REPORT string] [SEVERITY name];",
            "b) Condition [REPORT string] [SEVERITY name] ASSERT;",
            "c) Condition [SEVERITY name] [REPORT string] ASSERT;",
            "d) ASSERT condition [SEVERITY name] [REPORT string];"
        ],
        "Answer": "Answer: a\nExplanation: The ASSERT statement is declared by using a Boolean condition before which a keyword ASSERT is used. After the condition, a keyword called REPORT is used and the string is specified which the user wants to display. The string to be displayed is followed by the severity of the error and its name. "
    },
    {
        "id": 263,
        "Question": "What is the use of REPORT statement?",
        "Options": [
            "a) To check the consistency",
            "b) To make the statement wait",
            "c) To print any string or output the string",
            "d) To report the failure"
        ],
        "Answer": "Answer: a\nExplanation: The assert statement does nothing if the condition specified is true. If it is false, only then the message which is specified by the user is displayed on the screen. It is basically used for the status check of the program whether it is running correctly or not. "
    },
    {
        "id": 264,
        "Question": "How many types of severity levels are there for the ASSERT statement?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: The REPORT statement is used to output any message to the screen. It is generally used in conjunction with the ASSERT statement where ASSERT checks the consistency and REPORT outputs the message specified by a user. "
    },
    {
        "id": 265,
        "Question": "Which of the following is the default severity name for ASSERT?",
        "Options": [
            "a) NOTE",
            "b) WARNING",
            "c) ERROR",
            "d) FAILURE"
        ],
        "Answer": "Answer: d\nExplanation: There are four severity levels in the assert statement. There can be four names of SEVERITY which are NOTE, WARNING, ERROR and FAILURE. Depending on these severity levels, the simulator is instructed to halt. "
    },
    {
        "id": 266,
        "Question": "By using which of the following severity level, the simulator can be halted?",
        "Options": [
            "a) NOTE",
            "b) WARNING",
            "c) ERROR",
            "d) FAILURE"
        ],
        "Answer": "Answer: c\nExplanation: The default severity level is ERROR. This means if we haven’t specified any severity level then it will be considered as ERROR severity."
    },
    {
        "id": 267,
        "Question": "9. What kind of circuit may be described by using the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw4\">ASSERT</span> <span class=\"kw3\">NOT</span> <span class=\"br0\">(</span>s<span class=\"sy0\">=</span>’<span class=\"nu0\">1</span>’ <span class=\"kw3\">and</span> r <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">REPORT</span> ‘’INVALID! S <span class=\"kw3\">and</span> R both can’t be <span class=\"nu0\">1</span>” <span class=\"kw1\">SEVERITY</span> ERROR</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Flip flop",
            "b) Multiplexer",
            "c) Decoder",
            "d) Counter"
        ],
        "Answer": "Answer: d\nExplanation: In general, the simulator will generate a list of assert failures or the number of assert statements in which the condition was found to be false and shows at the end of the simulation. But, in the case of FAILURE severity, the simulator can stop working or it can come to a halt. "
    },
    {
        "id": 268,
        "Question": "NOTE severity level can be used to __________",
        "Options": [
            "a) Stop the execution",
            "b) Show the unusual situation",
            "c) Pass a message from simulation",
            "d) To give a warning to simulator"
        ],
        "Answer": "Answer: a\nExplanation: This can be a code for SR flip flop. Because the inputs S and R can’t be high at the same time in case of SR flip flop. It is invalid. ASSERT statement is used to show the same. When the condition is false then the message will be printed. "
    },
    {
        "id": 269,
        "Question": "Where should one use WARNING severity level?",
        "Options": [
            "a) To stop the execution",
            "b) To alert the user about unexpected conditions",
            "c) To pass the message from simulation",
            "d) To give a warning about wrong conditions"
        ],
        "Answer": "Answer: b\nExplanation: An ASSERT statement can be used outside a process. But, in that case it will behave as a postponed or passive process. In case of concurrent assertion, the simulator will monitor the condition continuously. "
    },
    {
        "id": 270,
        "Question": "The use of ERROR severity is _________",
        "Options": [
            "a) To alert about unpredictable results",
            "b) To pass information to the simulator",
            "c) To Stop the execution",
            "d) Where the simulation is not feasible"
        ],
        "Answer": "Answer: c\nExplanation: The NOTE level has the lowest severity level which can be sued at the time of any small condition violation. This can be used to pass a message from the simulator. "
    },
    {
        "id": 271,
        "Question": "Where should we use FAILURE severity?",
        "Options": [
            "a) To identify a fatal error",
            "b) To alert the user about simulation where the results are not correct",
            "c) To ignore the error",
            "d) To show the failure of simulation"
        ],
        "Answer": "Answer: b\nExplanation: WARNING has the second lowest severity level and can be used in any unusual but not fatal situation. In the situations, where the simulation can be continued but the results cannot be predicted. For example, if any file is not opened as expected, in that case one may use a WARNING."
    },
    {
        "id": 272,
        "Question": "WAIT statement can’t appear under _______ directly.",
        "Options": [
            "a) Architecture",
            "b) Process",
            "c) Procedure",
            "d) Subprogram"
        ],
        "Answer": "Answer: a\nExplanation: WAIT statement is a sequential statement which is similar to IF statement and its more than one form are available. Since it is a sequential statement, it can appear inside a process, procedure or subprogram, but can’t appear under architecture. In architecture only concurrent statements can be used."
    },
    {
        "id": 273,
        "Question": "Which of the following can’t be used in a process when it has any WAIT statement?",
        "Options": [
            "a) IF",
            "b) CASE",
            "c) LOOP",
            "d) Sensitivity list"
        ],
        "Answer": "Answer: d\nExplanation: One can’t use a WAIT statement along with sensitivity list. It can either have a sensitivity list or some WAIT statements. However, IF, CASE and LOOP are some other sequential statements which can be used when the process has sensitivity list. WAIT statement also contain signals to which the process is sensitive."
    },
    {
        "id": 274,
        "Question": "How many forms of WAIT statement are there in VHDL?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three forms of WAIT statements among which all of them can be used for synchronous as well as asynchronous sequential code. Some sort of condition or time period is used to stop the execution of process and wait for some event to occur. "
    },
    {
        "id": 275,
        "Question": "Which of the following is not the correct WAIT statement?",
        "Options": [
            "a)  WAIT ON",
            "b) WAIT WHILE",
            "c) WAIT FOR",
            "d) WAIT UNTIL"
        ],
        "Answer": "Answer: b\nExplanation: WAIT ON, WAIT FOR and WAIT UNTIL are the three types of WAIT signals. There is no WAIT WHILE statement. WAIT ON, FOR and UNTIL are the different types which follow different syntax and different types of WAIT statement which suspends the process for some time."
    },
    {
        "id": 276,
        "Question": "WAIT UNTIL statements cause the process to wait ________",
        "Options": [
            "a) When a signal changes value",
            "b) Until a condition is true",
            "c) For a specific time period",
            "d) When either a signal changes its value or a condition comes true"
        ],
        "Answer": "Answer: b\nExplanation: WAIT UNTIL statement is a form of WAIT statement which causes the process to wait until a condition is true. It is mandatory that the type of condition used must be Boolean. It can be any kind of expression but the result must be of Boolean type. "
    },
    {
        "id": 277,
        "Question": "What is the correct syntax for using a WAIT UNTIL statement?",
        "Options": [
            "a) WAIT UNTIL boolean_condition_or_expression;",
            "b) WAIT UNTIL signal_name;",
            "c) WAIT UNTIL time_value_or_expression;",
            "d) WAIT UNTIL boolean_expression time_value;"
        ],
        "Answer": "Answer: a\nExplanation: To write a WAIT UNTIL statement, a Boolean expression is used which causes the process to wait until the expression is true. Unlike IF, CASE and LOOP, the WAIT statement uses a semicolon at the end of the line. "
    },
    {
        "id": 278,
        "Question": "What is the use of WAIT FOR statement?",
        "Options": [
            "a) To stop execution when the condition is false",
            "b) To stop execution until a signal changes its value",
            "c) To stop execution for a specific time period",
            "d) To stop execution until the clock event occurs"
        ],
        "Answer": "Answer: c\nExplanation: WAIT FOR statement is useful in the case when we want to suspend the process for a known time period. For example, a delay of 10 ns is used in case of a buffer execution then we can use a WAIT FOR statement. "
    },
    {
        "id": 279,
        "Question": "How to define a WAIT FOR statement?",
        "Options": [
            "a) WAIT FOR signal_name;",
            "b) WAIT FOR booelan_expression;",
            "c) WAIT FOR clock_event;",
            "d) WAIT FOR time_value;"
        ],
        "Answer": "Answer: d\nExplanation: WAIT FOR statement can be used by writing the keyword WAIT FOR followed by a time expression. This time expression can be a simple value of time followed by units of time. Since the time is a physical literal of VHDL and its base unit is nanosecond (ns). So, ns is mostly used. For example, WAIT FOR 100 ns; is the correct syntax for WAIT FOR statement."
    },
    {
        "id": 280,
        "Question": "Which of the following is the correct use of WAIT ON statement?",
        "Options": [
            "a) To stop execution until a signal changes its value",
            "b) To stop execution when a signal changes its value",
            "c) To stop execution when a condition specified is true",
            "d) To stop execution when a condition specified is false"
        ],
        "Answer": "Answer: a\nExplanation: The WAIT ON statement puts the process on a hold until any of the signal listed changes its value. This statement is thus useful in detecting the clock events and other similar events. For example, WAIT ON clk will cause the process to wait until a clock event takes place. "
    },
    {
        "id": 281,
        "Question": "Which of the following is correct syntax for WAIT ON statement?",
        "Options": [
            "a) WAIT ON signal_assignments;",
            "b) WAIT ON boolean_condition;",
            "c) WAIT ON signal_list;",
            "d) WAIT ON time_expression;"
        ],
        "Answer": "Answer: c\nExplanation: The keyword WAIT is followed by a signal list which is similar to the sensitivity list of the process and the list is used to detect the events. Whenever any signal on the list changes the process resumes the execution. "
    },
    {
        "id": 282,
        "Question": "Which of the following statement uses only 1 signal?",
        "Options": [
            "a) WAIT FOR",
            "b) WAIT UNTIL",
            "c) WAIT ON",
            "d) WAIT UNTIL and WAIT FOR"
        ],
        "Answer": "Answer: b\nExplanation: In the case of WAIT UNTIL statement, there can be more than one condition(using logical operators) but all conditions can use the same signal only. WAIT ON, on the other hand, accepts multiple signals. So, if a process has only one WAIT UNTIL statement then it can be concluded that the process is sensitive to only one signal. "
    },
    {
        "id": 283,
        "Question": "Given that a process has no sensitivity list and has only one WAIT statement which is WAIT FOR statement. How many signals are there to which process is sensitive?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) Can’t be determined"
        ],
        "Answer": "Answer: d\nExplanation: It is not necessary that we have to write the time value in WAIT FOR statement. One can also use an expression that will be first solved and then the resulting value will be taken as time value. In that case, we can’t say how many signals are used in the WAIT FOR statement. If the time value is directly given then the process has 0 signals in sensitivity list. "
    },
    {
        "id": 284,
        "Question": "Which of the following WAIT statement is most useful for implementing a synchronous sequential circuit?",
        "Options": [
            "a) WAIT ON",
            "b) WAIT FOR",
            "c) WAIT UNTIL",
            "d) WAIT TIME"
        ],
        "Answer": "Answer: a\nExplanation: Because the sensitivity list is always written at the starting of the process and this is not true in the case of WAIT statements. They can occur anywhere within the process. Moreover, there can be more than one WAIT statements in the process."
    },
    {
        "id": 285,
        "Question": "What is the deadlock condition in VHDL?",
        "Options": [
            "a) When WAIT statement keeps on waiting forever",
            "b) When WAIT UNTIL statement uses more than one signal",
            "c) When WAIT ON statement has only one signal",
            "d) When WAIT FOR statement doesn’t have any time clause"
        ],
        "Answer": "Answer: c\nExplanation: WAIT ON statement accepts multiple signals whereas WAIT UNTIL statement can have only one signal. In case of the synchronous sequential circuit there is only one clock signal to which the circuit must be sensitive. Therefore, WAIT UNTIL is most suitable for implementing the synchronous circuits. "
    },
    {
        "id": 286,
        "Question": "In case of sensitivity list the process suspends at the end of the process and in WAIT statement it suspends ____________",
        "Options": [
            "a) At the beginning",
            "b) At the end",
            "c) At the beginning of architecture",
            "d) Where the WAIT statement is encountered"
        ],
        "Answer": "Answer: a\nExplanation: Deadlock is a condition where a WAIT statement in a process can wait forever. This can happen when two signals are set by other processes and the condition expression can never be true. This condition is called as deadlock condition. To avoid this ASSERT statement can be used to check the continuity of process. "
    },
    {
        "id": 287,
        "Question": "In combinational logic, how many WAIT statements can be used?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: d\nExplanation: WAIT statements are more flexible than sensitivity list and therefore, it can appear anywhere in the process. Wherever the WAIT statement is encountered, the process suspends and waits for any event or condition or a time period depending on the type of WAIT statement. After the condition is met the process continues from the statement next to the WAIT statement. "
    },
    {
        "id": 288,
        "Question": "8. Refer to the code given below, which kind of circuit is implemented?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">PROCESS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">WAIT</span> <span class=\"kw1\">on</span> a, b<span class=\"sy0\">;</span>\nz <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> a <span class=\"kw3\">AND</span> b<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Combinational",
            "b) Synchronous sequential",
            "c) Asynchronous sequential",
            "d) State machine"
        ],
        "Answer": "Answer: b\nExplanation: However, process is rarely used to implement combinational logic but, sometimes it is required to use WAIT statement. In that case, only one WAIT statement can be there in the process. Otherwise, it can loop forever during initialization. "
    },
    {
        "id": 289,
        "Question": "In a procedure is called from a process having a sensitivity list, how many wait statements one can use?",
        "Options": [
            "a) 3",
            "b) 2",
            "c) 1",
            "d) 0"
        ],
        "Answer": "Answer: a\nExplanation: Since the process doesn’t contain any clock signal therefore, it can’t be a sequential circuit and hence the process is a combinational circuit. Also, there is only one WAIT statement. Therefore, the design must be a combinational circuit."
    },
    {
        "id": 290,
        "Question": "Which of the following is true about WAIT UNTIL statement?",
        "Options": [
            "a) WAIT UNTIL statement is supported by synthesis tools",
            "b) WAIT UNTIL statement is not supported by synthesis tools",
            "c) WAIT UNTIL statement is supported in a clocked process only",
            "d) WAIT UNTIL statement is supported in a combinational process"
        ],
        "Answer": "Answer: c\nExplanation: Most of the synthesis tools support a single WAIT UNTIL statement in a clocked process only. That means WAIT UNTIL statement can be mostly used for implementing the sequential circuit or system. "
    },
    {
        "id": 291,
        "Question": "Which of the following is true about WAIT ON statement?",
        "Options": [
            "a) WAIT ON statement is supported by synthesis tools",
            "b) WAIT ON statement is not supported by synthesis tools",
            "c) WAIT ON statement is supported in a clocked process only",
            "d) WAIT ON statement is supported in a combinational process"
        ],
        "Answer": "Answer: d\nExplanation: Some tools support a single WAIT ON statement as an alternative to a sensitive list in a combinational process or the process in which there is no clock signal. Therefore, WAIT ON is useful for combinational circuits. "
    },
    {
        "id": 292,
        "Question": "In a procedure, __________ statement is not supported.",
        "Options": [
            "a) WAIT UNTIL",
            "b) WAIT ON",
            "c) WAIT FOR",
            "d) WAIT FOR and unconditional WAIT"
        ],
        "Answer": "Answer: d\nExplanation: In any procedure, the wait statements can be used (given that the procedure is not called from the process with a sensitive list). But, the WAIT FOR and simple WAIT or unconditional WAIT statement is not supported by synthesis tools inside the procedure. "
    },
    {
        "id": 293,
        "Question": "4. What kind of circuit is implemented by the following architecture?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">PROCESS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">WAIT</span> <span class=\"kw1\">ON</span> clk<span class=\"sy0\">;</span>\n<span class=\"kw1\">IF</span><span class=\"br0\">(</span>clk <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> x<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) D flip flop",
            "b) Inverter",
            "c) OR gate",
            "d) Shift register"
        ],
        "Answer": "Answer: a\nExplanation: Since the process is using a clock and a WAIT ON statement, so it is a sequential circuit. Also, the process is sensitive to clock. Whenever, any event on clock occurs, the process is resumed and checked if clock is one or not. If it is one, then the value of input is transferred to the output. So, clearly this is a D flip flop. "
    },
    {
        "id": 294,
        "Question": "WAIT FOR statement is useful only for _________",
        "Options": [
            "a) Synthesis",
            "b) Simulation",
            "c) Gate level implementation",
            "d) Optimization"
        ],
        "Answer": "Answer: b\nExplanation: WAIT FOR statement is only good for simulation, you can’t synthesize it. Since, synthesis means to convert the logic into actual hardware circuit. If you are using WAIT FOR 10 ns, certainly, this can’t be used in a synthesis process. So, WAIT FOR can be used for simulation only. "
    },
    {
        "id": 295,
        "Question": "A user wants to assign a signal after a wait of  20 ns. The process used has a sensitivity list. What is the possible way to achieve this?",
        "Options": [
            "a) By using WAIT FOR statement",
            "b) By using AFTER clause",
            "c) By using a separate process",
            "d) By using WAIT ON statement"
        ],
        "Answer": "Answer: c\nExplanation: As we know that a process can’t contain both a sensitivity list and a WAIT statement. So, WAIT FOR can’t be used in this case. Also, AFTER clause is ignored by synthesis tool when used inside a process. So, using AFTER is also not possible. The only way to do this is using another process which can communicate with this process. "
    },
    {
        "id": 296,
        "Question": "Since WAIT statement can’t be synthesized many times, how a clock event can be detected then?",
        "Options": [
            "a) By using IF(clk = ‘1’)",
            "b) By using ‘EVENT keyword",
            "c) By using a CASE statement",
            "d) By using a LOOP"
        ],
        "Answer": "Answer: b\nExplanation: The clock can be detected by ‘EVENT keyword. One can use IF in conjunction with ‘EVENT to detect the clock event and high and low on the same. For example, IF(clk’EVENT AND clk = ‘1’) will detect the rising edge of the clock. "
    },
    {
        "id": 297,
        "Question": "Which of the following can be used to make the process wait indefinitely?",
        "Options": [
            "a) WAIT FOR indefinite ns;",
            "b) WAIT UNTIL false;",
            "c) WAIT;",
            "d) WAIT UNTIL true;"
        ],
        "Answer": "Answer: a\nExplanation: In VHDL 93, it is possible to use a label in front of WAIT statement. In that case, the syntax is as follows:\n\n\nLabel : WAIT {UNTIL | ON | FOR} {condition | signal | time_expression};\n\n\n"
    },
    {
        "id": 298,
        "Question": "Which of the following is the correct use of the signal?",
        "Options": [
            "a) To set a default value",
            "b) To pass value between circuits",
            "c) To declare a variable",
            "d) To represent local information"
        ],
        "Answer": "Answer: b\nExplanation: The signal is a data object which is used to pass a value in and out of the circuit as well as between the internal units of a circuit. Basically, signal represents interconnection of circuits or simply they acts as wires."
    },
    {
        "id": 299,
        "Question": "What is the use of a variable?",
        "Options": [
            "a) To represent local value",
            "b) To represent default value",
            "c) To set default value",
            "d) To declare a subprogram"
        ],
        "Answer": "Answer: a\nExplanation: Variable usually appears inside a block which may be a sequential block like process, function or procedure. It is visible to the corresponding block only. Therefore, variables are used to represent local information."
    },
    {
        "id": 300,
        "Question": "Use of constants is to _________",
        "Options": [
            "a) Represent wires",
            "b) Represent local information",
            "c) Represent default value",
            "d) Pass value between entities"
        ],
        "Answer": "Answer: c\nExplanation: Constant is a data object which serves to establish default value. As the name suggests, the value of constant can’t be modified by using assignment statements. The value is once assigned and the same is used again and again."
    },
    {
        "id": 301,
        "Question": "How to declare a constant in VHDL?",
        "Options": [
            "a) CONSTANT name : type := value;",
            "b) CONSTANT name := value;",
            "c) CONSTANT name := type := value;",
            "d) CONSTANT name := type : value;"
        ],
        "Answer": "Answer: a\nExplanation: The correct syntax to declare a CONSTANT data object in VHDL is shown in option a. The keyword CONSTANT is followed by the name of the constant which in turn is followed by a colon (:) sign. After the colon sign, the type of constant is specified and the value is assigned by using := assignment operator. "
    },
    {
        "id": 302,
        "Question": "Which of the following is local to the block in which it is declared?",
        "Options": [
            "a) Signal",
            "b) Integer",
            "c) Constant",
            "d) Variable"
        ],
        "Answer": "Answer: d\nExplanation: Both Signals and Variables are global to the code whereas Variable is the only data object which is local to the block in which it is declared. For example, a variable x is declared in a process then x will be accessible only within the process. "
    },
    {
        "id": 303,
        "Question": "A constant is declared in Architecture, it will be accessible in ________",
        "Options": [
            "a) Whole code",
            "b) Within the same architecture",
            "c) In the entity associated and corresponding architecture",
            "d) In the process within the architecture"
        ],
        "Answer": "Answer: b\nExplanation: A constant when declared in the architecture, it is global to the architecture. That means, no matter how many blocks are there in architecture, the constant can be used in each of those block. Unlike variable which is local to the variable only. "
    },
    {
        "id": 304,
        "Question": "Which of the following can’t be declared in an architecture?",
        "Options": [
            "a) Signal",
            "b) Constant",
            "c) Variable",
            "d) BIT_VECTOR"
        ],
        "Answer": "Answer: c\nExplanation: We can’t use a variable data object in architecture directly. Variable is mainly intended for sequential code. So, variables can be declared and used in processes, functions or procedures. However, Signals and variables can be used in architecture. "
    },
    {
        "id": 305,
        "Question": "What is the scope of a constant declared in an entity?",
        "Options": [
            "a) Local to the entity",
            "b) Global to the whole code",
            "c) Local to the port",
            "d) Global to the entity and all the architecture associated"
        ],
        "Answer": "Answer: d\nExplanation: The constant declared in an entity can be used in the entity itself as well as the architectures associated with the entity. For example, there are 3 architectures for an entity then all the 3 architectures can access the constant declared in the entity."
    },
    {
        "id": 306,
        "Question": "A user wants a constant to be declared in such a way that it can be accessible by whole code, where should the user declare this constant?",
        "Options": [
            "a) Package",
            "b) Entity",
            "c) Architecture",
            "d) Configuration"
        ],
        "Answer": "Answer: a\nExplanation: When a constant is declared in a package, it is truly global, for the package can be used by several entities and architecture. However, if the same was declared in entity then it can be accessed by the architectures of same entity only. "
    },
    {
        "id": 307,
        "Question": "Which of the following is the default type of ports of an entity?",
        "Options": [
            "a) Variables",
            "b) Constants",
            "c) Signals",
            "d) Functions"
        ],
        "Answer": "Answer: c\nExplanation: Since ports of an entity represent the inputs and outputs of a part of the circuit. Therefore, VHDL takes the ports of entity as signals. If no type is specified in front of a port then it will be considered as a signal. "
    },
    {
        "id": 308,
        "Question": "Which data object can’t be declared inside a process?",
        "Options": [
            "a) Signal",
            "b) Variable",
            "c) Constant",
            "d) Integer"
        ],
        "Answer": "Answer: a\nExplanation: A process consists of sequential statements and signals can be used inside the process. But, it is not possible to declare a signal inside the process. Variables, on the other hand, can be declared in a process."
    },
    {
        "id": 309,
        "Question": "When a signal is assigned a value inside a process, then the value of a signal is updated _________",
        "Options": [
            "a) Immediately",
            "b) After one delta cycle",
            "c) At the end of the corresponding process",
            "d) At the end of architecture"
        ],
        "Answer": "Answer: c\nExplanation: The signal is not updated immediately. The new value should not be expected to be ready before the conclusion of the corresponding process. It is updated at the end of the process and therefore, it is not recommended to assign two or more values to a signal in the same process since only last one is considered. "
    },
    {
        "id": 310,
        "Question": "A variable is assigned a value inside a process, the new value of the variable will be available _______",
        "Options": [
            "a) After one delta cycle",
            "b) Immediately",
            "c) At the end of a process",
            "d) At the end of architecture"
        ],
        "Answer": "Answer: b\nExplanation: Unlike signals, the value of variable is updated immediately. In other words, we can say that the new value of the variable or its updated value can be used immediately in the next line of the code which is not the case with variables. "
    },
    {
        "id": 311,
        "Question": "When there is no delay specified in a signal assignment (concurrent), the delay will be _______",
        "Options": [
            "a) Zero",
            "b) Transport delay",
            "c) Inertial delay",
            "d) Delta delay"
        ],
        "Answer": "Answer: b\nExplanation: A variable can be used inside a process, function or procedure only. One can’t use it outside the process. The variables can’t be assigned values concurrently or in a parallel manner as we can do with the signals. "
    },
    {
        "id": 312,
        "Question": "During synthesis, a variable infers ________",
        "Options": [
            "a) Flip flop",
            "b) Register",
            "c) Wire",
            "d) Variables are not synthesizable"
        ],
        "Answer": "Answer: a\nExplanation: As we know that the variables get their value at the same time or immediately. No delay can be used in the variable assignment. However, in signals there are two types of delay which are transport and inertial delays. This is not possible to use AFTER keyword in the variable assignment. "
    },
    {
        "id": 313,
        "Question": "In which of the following, the right hand side of an assignment is a waveform element?",
        "Options": [
            "a) Signal",
            "b) Variable",
            "c) Constant",
            "d) Process"
        ],
        "Answer": "Answer: d\nExplanation: In a concurrent assignment statement either transport or inertial delay is used. Even if there is zero delay specified it will consider delta delay before assigning a value to the signal. So, it is not possible to assign the value to signal immediately even if no delay is specified. "
    },
    {
        "id": 314,
        "Question": "Which of the following needs no evaluation of drivers?",
        "Options": [
            "a) Signals",
            "b) Variables",
            "c) Process",
            "d) Functions"
        ],
        "Answer": "Answer: c\nExplanation: Both signal and variable are synthesizable and variables infers a wire at the time of synthesis. However, the signal, unlike variable, infers a flip flop at the time of synthesis. "
    },
    {
        "id": 315,
        "Question": "What is there in right hand side of a variable assignment?",
        "Options": [
            "a) Time expressions",
            "b) Waveform elements",
            "c) Delays",
            "d) Simple expressions"
        ],
        "Answer": "Answer: a\nExplanation: The right hand side of a signal assignment statement is a sequence of waveform elements. These elements are having associated time expressions or delays which are generally followed by AFTER keyword. "
    },
    {
        "id": 316,
        "Question": "Which of the following is true about packages?",
        "Options": [
            "a) Package is collection of libraries",
            "b) Library is collection of packages",
            "c) Package is collection of entities",
            "d) Entity is collection of packages"
        ],
        "Answer": "Answer: b\nExplanation: A library contains many packages and it is used to collect and describe elements that can be shared globally among all the design units. It may contain any commonly used data type, functions or constants. "
    },
    {
        "id": 317,
        "Question": "A package may consist of _________ design units.",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: a\nExplanation: A package may consist of two separate design units which are package declaration and package body. Package declaration is necessary part for any package whereas package body is an optional part. Package declaration, like entity declaration, describes the interface of the design and package body is similar to architecture in the VHDL code. "
    },
    {
        "id": 318,
        "Question": "Any item declared in a package declaration section are visible to _______",
        "Options": [
            "a) Every design unit",
            "b) Package body only",
            "c) Library containing that package",
            "d) Design unit that USE the package"
        ],
        "Answer": "Answer: d\nExplanation: To use any component, constant, signal, subprogram or function declared in a package, one needs to declare the package in the code itself by using the USE clause. When the package is declared in the library declaration part of the code then the functions or datatypes defined in the package will be visible to the design unit. "
    },
    {
        "id": 319,
        "Question": "What do you call a constant declared in the package declaration, without its initial value specified?",
        "Options": [
            "a) Constant",
            "b) Package constant",
            "c) Deferred constant",
            "d) Undefined constant"
        ],
        "Answer": "Answer: c\nExplanation: Deferred constants are constants that have their name and type declared in the package declaration section but the actual value is specified in the package body section. It is important to use package body when a deferred constant is declared in the package declaration body. "
    },
    {
        "id": 320,
        "Question": "Which of the following is not a in-built package in VHDL?",
        "Options": [
            "a) STD_LOGIC_1164",
            "b) TEXTIO",
            "c) STANDARD",
            "d) STD"
        ],
        "Answer": "Answer: c\nExplanation: Package declaration is always mandatory but package body is optional. When a function or deferred constant is declared in the package declaration, then it is necessary to use a package body so as to assign value to the constant or to describe the function. "
    },
    {
        "id": 321,
        "Question": "If a user wants to include his/her own package in the body, which library he/she must use?",
        "Options": [
            "a) STD",
            "b) IEEE",
            "c) WORK",
            "d) STD_LOGIC"
        ],
        "Answer": "Answer: a\nExplanation: Though it is not possible to nest libraries in VHDL but it is possible to nest packages. One can make use of another package inside a package by USE clause. In the package declaration, USE may be used to include another packages. "
    },
    {
        "id": 322,
        "Question": "Packages increases _______ of the code.",
        "Options": [
            "a) Reusability",
            "b) Readability",
            "c) Managing",
            "d) Resolution"
        ],
        "Answer": "Answer: d\nExplanation: STD is not a package but it is a library. All other STD_LOGIC_1164, TEXTIO, STANDARD etc. are some in built packages of VHDL. STD_LOGIC_1164 is declared in the IEEE library. TEXTIO and STANDARD libraries are declared in STD library. "
    },
    {
        "id": 323,
        "Question": "Which of the following can’t have multiple assignments or drivers?",
        "Options": [
            "a) STD_LOGIC",
            "b) INTEGER",
            "c) STD_ULOGIC",
            "d) BIT"
        ],
        "Answer": "Answer: c\nExplanation: WORK is a library which can be used to store and use user-defined packages. Similar to other libraries, it is also declared in the same manner by using LIBRARY keyword and to declare the package, USE clause is used. "
    },
    {
        "id": 324,
        "Question": "Which of the following package need not to be a part of the VHDL code?",
        "Options": [
            "a) STANDARD",
            "b) STD_LOGIC_1164",
            "c) TEXTIO",
            "d) STD_LOGIC_ARITH"
        ],
        "Answer": "Answer: a\nExplanation: The package STANDARD is usually integrated directly in the simulation or synthesis program. Therefore, it doesn’t exist as a VHDL description. It doesn’t have to be explicitly included by the USE clause."
    },
    {
        "id": 325,
        "Question": "In which of the following library, the package STANDARD defined?",
        "Options": [
            "a) IEEE",
            "b) STD",
            "c) WORK",
            "d) STD_LOGIC"
        ],
        "Answer": "Answer: b\nExplanation: The package STANDARD is a part of STD library which doesn’t need to be included in the code. It is automatically included in the description without any extra statement or declaration. All other packages of STD library needs to be defined in the code itself."
    },
    {
        "id": 326,
        "Question": "Which of the following is not defined in the STANDARD package?",
        "Options": [
            "a) Basic data types",
            "b) Functions for different operations for data types",
            "c) Functions to read from the text files",
            "d) Functions for arithmetic operators"
        ],
        "Answer": "Answer: c\nExplanation: The package STANDARD contains all the basic data type like Boolean, bit, bit_vector, integer, character and so on. It also contains logical, comparison and arithmetic operators for these data types. It doesn’t contain any function to read and write into text files."
    },
    {
        "id": 327,
        "Question": "Which statement is correct to include a package in the code where we need to read from and write to text files?",
        "Options": [
            "a) USE STD.TEXT.all;",
            "b) USE STD.TEXTIO.all;",
            "c) USE IEEE.TEXTIO.all;",
            "d) USE IEEE.TEXT.all;"
        ],
        "Answer": "Answer: b\nExplanation: The package which contains procedures and functions needed to read from and write to text files is the TEXTIO package. This package is defined in STD library of the VHDL. So, the correct statement is USE STD.TEXTIO.all to include the TEXTIO package. "
    },
    {
        "id": 328,
        "Question": "Among the four packages given below, which is the most used package of VHDL?",
        "Options": [
            "a) STD_LOGIC_1164",
            "b) TEXTIO",
            "c) STD_LOGIC_ARITH",
            "d) NUMERIC_STD"
        ],
        "Answer": "Answer: b\nExplanation: It is not true that TEXTIO package is included in the code by default. However, it is defined in the STD library from which STANDARD and such packages are included by default but this is not the case with TEXTIO package. It needs the USE clause to be included in the package. "
    },
    {
        "id": 329,
        "Question": "The STD_LOGIC_1164 package is contained by _______ library.",
        "Options": [
            "a) STD",
            "b) WORK",
            "c) STD_LOGIC",
            "d) IEEE"
        ],
        "Answer": "Answer: a\nExplanation: The STD_LOGIC_1164 package is most used package in VHDL since it contains definition of data types which are used for modeling wires at the time of synthesis. To use such data types, it is necessary to include STD_LOGIC_1164 in the code. In fact, it is used in almost every single design in VHDL."
    },
    {
        "id": 330,
        "Question": "What is the most important use of STD_LOGIC_1164 package?",
        "Options": [
            "a) To define and use parallel operations",
            "b) To use concurrent code",
            "c) To use sequential code",
            "d) Multi value logic system"
        ],
        "Answer": "Answer: d\nExplanation: The STD_LOGIC_1164 package has been developed and standardized by the IEEE and hence it is included in IEEE library of VHDL. It could be referenced easily by using two statements: LIBRARY IEEE; USE IEEE.STD_LOGIC_1164.all; Also, this is not included by default."
    },
    {
        "id": 331,
        "Question": "Which package defines the data type STD_LOGIC_SIGNED?",
        "Options": [
            "a) STD_LOGIC_1164",
            "b) STD_LOGIC_ARITH",
            "c) STD_LOGIC_NUMERIC",
            "d) IEEE"
        ],
        "Answer": "Answer: d\nExplanation: STD_LOGIC_1164 defines the data types like STD_LOGIC, STD_ULOGIC and the corresponding vector types. These data types basically work on multi valued logic system rather than two valued logic (0, 1). So, to use this multi value logic we need to include the STD_LOGIC_1164 package. "
    },
    {
        "id": 332,
        "Question": "What is another name for STD_LOGIC_ARITH package?",
        "Options": [
            "a) STD_LOGIC_1164",
            "b) STD_LOGIC_NUMERIC",
            "c) NUMERIC_STD",
            "d) ARITH_STD"
        ],
        "Answer": "Answer: b\nExplanation: SRD_LOGIC_ARITH is another package defined in the IEEE library. This package gives a definition of STD_LOGIC_SIGNED and STD_LOGIC_UNSIGNED data types. The basic purpose of STD_LOGIC_ARITH is to provide arithmetic accessibility to STD_LOGIC data types etc."
    },
    {
        "id": 333,
        "Question": "The basic arithmetic function provided by STD_LOGIC_ARITH is for ______ data type.",
        "Options": [
            "a) STD_LOGIC_VECTOR",
            "b) STD_LOGIC",
            "c) INTEGER",
            "d) CHARACTER"
        ],
        "Answer": "Answer: c\nExplanation: STD_LOGIC_ARITH is basically provided by Synopsys and NUMERIC_STD is provided by IEEE. Both of the packages are equivalent and define the same arithmetic functions. So, STD_LOGIC_ARITH is another name for NUMERIC_STD package. "
    },
    {
        "id": 334,
        "Question": "12. The following statement must be in _______ package.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> my_type <span class=\"kw1\">IS</span> <span class=\"kw1\">RANGE</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) STD_LOGIC_1164",
            "b) STANDARD",
            "c) STD_LOGIC_ARITH",
            "d) IEEE"
        ],
        "Answer": "Answer: a\nExplanation: STD_LOGIC_ARITH basically contain arithmetic functions to enable calculations and comparisons based on the types STD_ULOGIC_VECTOR and STD_LOGIC_VECTOR. So, calculations related to vector types of STD_LOGIC_1164 are in STD_LOGIC_ARITH package."
    },
    {
        "id": 335,
        "Question": "13. Which of the following package may contain the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> color <span class=\"kw1\">IS</span> <span class=\"kw1\">RANGE</span> <span class=\"br0\">(</span>red, green, blue, black<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) STD_LOGIC_1164",
            "b) STANDARD",
            "c) STD_LOGIC_ARITH",
            "d) WORK"
        ],
        "Answer": "Answer: b\nExplanation: Since the data type my_type can have only two values which are 0 and 1 which is the case of BIT data type. Therefore, my_type is BIT data type which is defined in STANDARD package. So, the given statement must be in STANDARD package."
    },
    {
        "id": 336,
        "Question": "14. Following lines are a part of _______ package.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> my_type <span class=\"kw1\">IS</span> <span class=\"br0\">(</span>‘U’, ‘X’, ‘<span class=\"nu0\">0</span>’, ‘<span class=\"nu0\">1</span>’, ‘Z’, ‘W’, ‘ L’, ‘H’, ‘<span class=\"sy0\">-</span>‘<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) STANDARD",
            "b) STD_LOGIC_ARITH",
            "c) STD_LOGIC_1164",
            "d) WORK"
        ],
        "Answer": "Answer: d\nExplanation: There is no such pre defined data type which may take any value like red, green, blue or black. So, this must be a user defined data type and not a predefined one. Therefore, it must be defined in WORK package."
    },
    {
        "id": 337,
        "Question": "In STD_LOGIC_1164, the resolution function for ______ is not provided.",
        "Options": [
            "a) STD_LOGIC",
            "b) STD_LOGIC_VECTOR",
            "c) STD_ULOGIC",
            "d) STD_ULOGIC_VECTOR"
        ],
        "Answer": "Answer: c\nExplanation: The given type shows 9 valued logic which is  STD_ULOGIC type having 9 different values. This multi valued logic is defined in STD_LOGIC_1164 package of IEEE library. Apart from STD_ULOGIC, STD_LOGIC is also defined in STD_LOGIC_1164."
    },
    {
        "id": 338,
        "Question": "A function is a ________ code.",
        "Options": [
            "a) Concurrent",
            "b) Sequential",
            "c) Concurrent as well as sequential",
            "d) Process oriented"
        ],
        "Answer": "Answer: b\nExplanation: A subprogram consists of procedures and functions. Both of them are collectively called subprograms. So, subprogram is not same as a function but a function is a part of subprogram in case of VHDL. "
    },
    {
        "id": 339,
        "Question": "Which of the following sequential statement can’t be used in a function?",
        "Options": [
            "a) WAIT",
            "b) IF",
            "c) CASE",
            "d) LOOP"
        ],
        "Answer": "Answer: b\nExplanation: A function is a section of sequential code. From the construction point of view, functions are very similar to the process.  They employ all the sequential statements like IF, CASE etc.  "
    },
    {
        "id": 340,
        "Question": "The function is called from the ________",
        "Options": [
            "a) Function itself",
            "b) Library",
            "c) Main code",
            "d) Package"
        ],
        "Answer": "Answer: d\nExplanation: The function is defined in the way shown in option d. The keyword FUNCTION is followed by the name of function which in turn is followed by the list of parameters in a parenthesis. After the list of parameters the return type of a function is specified followed by the declaration part of the function in which local variables can be declared. The declaration part and statement part is separated by keyword BEGIN. Then there is the RETURN statement and the function definition is end by END and function name.  "
    },
    {
        "id": 341,
        "Question": "The parameters used at the time of function call are called _________",
        "Options": [
            "a) Formal parameters",
            "b) Actual parameters",
            "c) Real parameters",
            "d) Complex parameters"
        ],
        "Answer": "Answer: c\nExplanation: The function which is once declared is always called from the main code. Whenever a function call occurs, the control is passed to the space where the function is defined. Then, the function is executed till a RETURN statement comes, which returns the control to main code.  "
    },
    {
        "id": 342,
        "Question": "Functions are always invoked as a(n) _________",
        "Options": [
            "a) Constant",
            "b) Variable",
            "c) Signal",
            "d) Expression"
        ],
        "Answer": "Answer: b\nExplanation: The parameters which are specified at the time of function call are called the Actual parameters whereas the parameters used at the time of function definition are called formal parameters. The values from actual parameters are copied to the formal parameters in the same order as specified. "
    },
    {
        "id": 343,
        "Question": "How many return arguments can be there in the function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: Any function having a return type is always invoked as an expression. The expression is solved in the function definition and the result is specified by the return statement which can be taken as the result of the expression itself. "
    },
    {
        "id": 344,
        "Question": "9. Which of the following can’t be the parameter of function?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SIGNAL</span> a, b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span>\n<span class=\"kw1\">VARIABLE</span> c <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span>\n<span class=\"kw1\">CONSTANT</span> d <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) b",
            "c) c",
            "d) d"
        ],
        "Answer": "Answer: a\nExplanation: A function can contain any kind of sequential statement may it be IF statement, CASE statement, LOOP statement, NEXT, EXIT or NULL. The only exception is the WAIT statement. One can’t use a WAIT statement inside a function.  "
    },
    {
        "id": 345,
        "Question": "1. Refer to the function defined below, a and b have respectively following data objects.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">FUNCTION</span> my_func <span class=\"br0\">(</span><span class=\"kw1\">SIGNAL</span> a <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"sy0\">;</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">BOOLEAN</span> <span class=\"kw1\">IS</span>\n…..<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Constant, Constant",
            "b) Constant, Signal",
            "c) Signal, Constant",
            "d) Signal, Signal"
        ],
        "Answer": "Answer: c\nExplanation: Until the data object is not specified, the corresponding must be considered as a constant. In the above function, a is specified as a signal but b is not specified therefore, b is taken as a constant. So, a is a signal as specified and b is a constant."
    },
    {
        "id": 346,
        "Question": "2. What should be the mode of signal a in the following function definition?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">FUNCTION</span> my_func <span class=\"br0\">(</span><span class=\"kw1\">SIGNAL</span> a <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">INTEGER</span> <span class=\"kw1\">IS</span>\n…..<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) IN",
            "b) OUT",
            "c) INOUT",
            "d) BUFFER"
        ],
        "Answer": "Answer: a\nExplanation: The default and only signal mode which is applicable to a parameter of the function is the IN mode. There is no need to specify the mode at the time of definition. It is obvious that the mode is taken as IN mode. No other mode can be used in the parameter of a function."
    },
    {
        "id": 347,
        "Question": "Functions are called using ______ no of ________ statement(s).",
        "Options": [
            "a) 1, If",
            "b) 1, Assignment",
            "c) 2, If",
            "d) 2, Assignment"
        ],
        "Answer": "Answer: b\nExplanation: The functions are called using a single assignment statement. A function is always invoked as an expression and therefore, it is called by using an assignment statement in which function appears on the right side of the assignment operator. "
    },
    {
        "id": 348,
        "Question": "Which of the following type can’t be a parameter of a function?",
        "Options": [
            "a) Signals",
            "b) Constants",
            "c) Files",
            "d) Variables"
        ],
        "Answer": "Answer: d\nExplanation: Apart from signals and variables, the files can also be used as a parameter to a function. The only restriction is to use a variable in the parameter of the function. One may use signal of IN mode, any constants and files in the parameter list. "
    },
    {
        "id": 349,
        "Question": "What is the use of resolution functions?",
        "Options": [
            "a) Return the value of a signal with multiple drivers",
            "b) Resolve value of a constant with multiple drivers",
            "c) Convert one data type into another",
            "d) Convert one data object into another"
        ],
        "Answer": "Answer: b\nExplanation: In the declaration part of a function, one may declare a variable. But the declaration of a signal and a constant is not allowed inside a function. The constant instantiation is a concurrent statement and a function consists of sequential statements. Therefore, it is not possible to declare and instantiate a component."
    },
    {
        "id": 350,
        "Question": "A resolution function is invoked when ________",
        "Options": [
            "a) The signal is assigned multiple values",
            "b) All the drivers has changed their value for once at least",
            "c) Any of the driver changes its value",
            "d) The signal is assigned a second value"
        ],
        "Answer": "Answer: a\nExplanation: Resolution function is used to resolve the value of a signal when the signal is driven by multiple drivers. It returns the new value of the signal by resolving all the drivers to give a single new value. "
    },
    {
        "id": 351,
        "Question": "How many parameters are there in a resolution function?",
        "Options": [
            "a) 3",
            "b) 2",
            "c) 0",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: In VHDL, it is illegal to have a signal with multiple drivers without a resolution function attached to the signal. Most of the resolution functions are predefined in the packages provided by STD and IEEE. But, if there is no resolution function then we can’t assign multiple values to the signal."
    },
    {
        "id": 352,
        "Question": "What would be the length of array used as a parameter to the resolution function which resolves the value of a signal having 2 drivers?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) Infinite"
        ],
        "Answer": "Answer: b\nExplanation: A resolution function is called whenever one of the drivers for the signal has an event occurred on it. The resolution function is then executed and it returns a single value from all the driver values, that value is the new value of the signal. "
    },
    {
        "id": 353,
        "Question": "Apart from using WAIT statements, which of the following is not possible in functions?",
        "Options": [
            "a) Variable assignment",
            "b) Return statement",
            "c) Variable declaration",
            "d) Signal assignment"
        ],
        "Answer": "Answer: b\nExplanation: Like all other traditional programming languages, in VHDL too we can use recursive functions. Recursive function is the function which calls itself again and again until a condition comes to be true. It is possible to call functions recursively. "
    },
    {
        "id": 354,
        "Question": "Conversion functions are used to _________",
        "Options": [
            "a) Resolve value of a signal with multiple drivers",
            "b) Convert one data type into another",
            "c) Convert one data object into another",
            "d) Resolve value of a constant with multiple drivers"
        ],
        "Answer": "Answer: d\nExplanation: The signal assignment can’t be done inside a function body. It is possible to declare a variable and assign it some value but it is not possible to declare and use signal assignment inside the function.  "
    },
    {
        "id": 355,
        "Question": "The minimum number of parameters that must be there in a function is ___________",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: b\nExplanation: Conversion functions are the functions which are used to convert any object of one data type into another data type. Some of such conversion functions are predefined in the packages. For example, CONV_INTEGER() converts the parameter into an integer value.  "
    },
    {
        "id": 356,
        "Question": "Which of the following is not the legal name of a function?",
        "Options": [
            "a) abc",
            "b) +",
            "c) then",
            "d) my_func"
        ],
        "Answer": "Answer: b\nExplanation: A function may declare local variables which are accessible inside the function only. These variables don’t retain their values between successive calls but are reinitialized each time the function is called. "
    },
    {
        "id": 357,
        "Question": "7. In the following code, which of the lines corresponds to the function call and function definition?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">L1 <span class=\"sy0\">:</span> <span class=\"kw1\">ARCHITECTURE</span> adder <span class=\"kw1\">OF</span> adder <span class=\"kw1\">IS</span>\nL2 <span class=\"sy0\">:</span> <span class=\"kw1\">BEGIN</span>\nL3 <span class=\"sy0\">:</span> x <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> sum <span class=\"br0\">(</span> <span class=\"kw1\">SIGNAL</span> a <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span> <span class=\"kw1\">SIGNAL</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nL4 <span class=\"sy0\">:</span> <span class=\"kw1\">END</span> adder<span class=\"sy0\">;</span>\nL5 <span class=\"sy0\">:</span> <span class=\"kw1\">FUNCTION</span> sum <span class=\"br0\">(</span> <span class=\"kw1\">SIGNAL</span> a <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span> <span class=\"kw1\">SIGNAL</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">STD_LOGIC</span> <span class=\"kw1\">IS</span>\nL6 <span class=\"sy0\">:</span> <span class=\"kw1\">VARIABLE</span> c <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\nL7 <span class=\"sy0\">:</span> <span class=\"kw1\">BEGIN</span>\nL8 <span class=\"sy0\">:</span> c<span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> a <span class=\"kw3\">OR</span> b<span class=\"sy0\">;</span>\nL9 <span class=\"sy0\">:</span> <span class=\"kw1\">RETURN</span> c<span class=\"sy0\">;</span>\nL10 <span class=\"sy0\">:</span> <span class=\"kw1\">END</span> sum<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) L5, L3",
            "b) L5, L9",
            "c) L3, L7",
            "d) L3, L5"
        ],
        "Answer": "Answer: a\nExplanation: Yes, It is possible to have a function which has no parameter specified in the parameter list. If we don’t need to pass any information to the function from the main code, then there is no need to use any parameter in the list.  "
    },
    {
        "id": 358,
        "Question": "What is the ease provided by using functions?",
        "Options": [
            "a) Easy debugging",
            "b) Easy reading",
            "c) Easy calling",
            "d) Easy implementation"
        ],
        "Answer": "Answer: c\nExplanation: As for all other identifiers, the name may not be any reserved word of VHDL and can have alphanumeric characters and an underscore sign. The only different thing with functions is that the name of function can be any operator sign also. "
    },
    {
        "id": 359,
        "Question": "If a function has an operator sign as its name, then what will be the purpose of that function?",
        "Options": [
            "a) Conversion",
            "b) Overloading",
            "c) Resolution",
            "d) Define the data type"
        ],
        "Answer": "Answer: d\nExplanation: Function call is when a function is invoked as an expression and the definition of function is where the whole description of function is given. Therefore, L3 corresponds to a function call and L5 is where function definition starts. "
    },
    {
        "id": 360,
        "Question": "What is the alternative for specifying the vector size in the function?",
        "Options": [
            "a) Not using arrays",
            "b) Defining every single element differently",
            "c) Defining a subtype",
            "d) Using bit vector"
        ],
        "Answer": "Answer: a\nExplanation: Using function results in easy debugging. Since reading and maintaining code is easy while using functions. Usually, the architecture of a code is very big and therefore, causes difficulty in debugging. So, by using functions, debugging is easy. "
    },
    {
        "id": 361,
        "Question": "Procedures are invoked as _________",
        "Options": [
            "a) Statements",
            "b) Expressions",
            "c) Values",
            "d) Assignments"
        ],
        "Answer": "Answer: a\nExplanation: Unlike functions, procedures are invoked as a statement. Functions are always invoked as expressions as a part of the assignment statement but procedures are directly called as statements only. No assignment operator is needed.  "
    },
    {
        "id": 362,
        "Question": "Procedures are useful when _________",
        "Options": [
            "a) Functions are not synthesizable",
            "b) Signals are needed to be declare",
            "c) Multiple values are needed as a result",
            "d) Architecture can’t contain some statement"
        ],
        "Answer": "Answer: c\nExplanation: Procedures usually returns many values, which is not possible with the case of function. So, procedures are useful when there are multiple results coming from the procedure. Note that procedure can return single value as well."
    },
    {
        "id": 363,
        "Question": "Which of the following could be the objects in the parameter list of a procedure?",
        "Options": [
            "a) CONSTANTS, VARIABLES",
            "b) VARIABLES, SIGNALS",
            "c) CONSTANTS, SIGNALS",
            "d) CONSTANT, SIGNALS, VARIABLES"
        ],
        "Answer": "Answer: a\nExplanation: Functions always have a return type which specifies the type of value which is returned by the function. But, procedures return multiple values; therefore, it is not possible to use a single return type. So, There is no return type for a procedure. "
    },
    {
        "id": 364,
        "Question": "A procedure can’t contain a _______ statement.",
        "Options": [
            "a) WAIT",
            "b) IF",
            "c) RETURN",
            "d) CASE"
        ],
        "Answer": "Answer: d\nExplanation: A procedure may have any of three objects in its parameter list. A SIGNAL, CONSTANT as well as a VARIABLE can be used as a parameter to a procedure. In functions, only signals and constants can be parameters."
    },
    {
        "id": 365,
        "Question": "Which of the following is the default class of any parameter with its mode as IN?",
        "Options": [
            "a) SIGNAL",
            "b) CONSTANT",
            "c) VARIABLE",
            "d) SIGNAL or VARIABLE"
        ],
        "Answer": "Answer: c\nExplanation: A procedure, unlike functions, may contain WAIT statement but it doesn’t include any return statement. The assignments made in the procedure are considered as the values which are needed to be returned to the main code. "
    },
    {
        "id": 366,
        "Question": "Which of the following is the default mode of a parameter of procedure?",
        "Options": [
            "a) IN",
            "b) OUT",
            "c) INOUT",
            "d) IN or INOUT"
        ],
        "Answer": "Answer: a\nExplanation: A procedure can have any number of IN, OUT or INOUT parameters which can be signals, constants or variables. There is no restriction on the mode of the signal It may be any of the three modes which are IN, OUT or INOUT. "
    },
    {
        "id": 367,
        "Question": "It is given that the mode of a parameter is OUT mode but its class is not specified by the user. To which class does it belong?",
        "Options": [
            "a) INTEGER",
            "b) CONSTANT",
            "c) VARIABLE",
            "d) SIGNAL"
        ],
        "Answer": "Answer: b\nExplanation: The default class for any IN mode parameter is CONSTANT. It means that if no mode is specified the parameters of mode IN are interpreted as class CONSTANT."
    },
    {
        "id": 368,
        "Question": "Which of the following is not similar in both functions as well as procedures?",
        "Options": [
            "a) One can’t declare signals in functions as well as procedures",
            "b) One can’t declare components in functions and procedures",
            "c) In both, the WAIT statement is not synthesizable",
            "d) Both can be declared inside a package"
        ],
        "Answer": "Answer: a\nExplanation: The signals can be declared inside a procedure which is not possible with functions. However, all other things are common in both functions and procedures. One can use WAIT statement inside a procedure but it not synthesizable and both can be declared inside a package."
    },
    {
        "id": 369,
        "Question": "2. The mode and class of the following parameters are respectively ________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">my_procedure<span class=\"br0\">(</span> <span class=\"kw1\">SIGNAL</span> a <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span> b <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span> c <span class=\"sy0\">:</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) IN, SIGNAL; OUT, SIGNAL; IN, CONSTANT",
            "b) IN, SIGNAL; OUT, CONSTANT; IN, VARIABLE",
            "c) IN, SIGNAL; OUT, VARIABLE; IN, CONSTANT",
            "d) IN, SIGNAL; OUT, CONSTANT; OUT, CONSTANT"
        ],
        "Answer": "Answer: c\nExplanation: The default mode for any parameter is IN mode. So, the mode of C is IN mode and those of other two are specified. The class of a is specified as SIGNAL. The parameter b is of OUT mode so it will be considered as a VARIABLE and c is considered as a CONSTANT."
    },
    {
        "id": 370,
        "Question": "Which of the following is true about both functions and procedures?",
        "Options": [
            "a) WAIT statement can’t be used",
            "b) When declared in a package, both require package body",
            "c) SIGNALs can’t be declared",
            "d) RETURN is used in both"
        ],
        "Answer": "Answer: b\nExplanation: When function or procedure is placed in a package, then it is necessary to write the package body so that functions and procedures can be defined. However, WAIT can be used in procedures and same is true about signals. RETURN is not used in a procedure."
    },
    {
        "id": 371,
        "Question": "A user is encountering some error with his design, among which of the following the debugging must be easy?",
        "Options": [
            "a) In a code containing no functions or procedures",
            "b) In a code containing functions but no procedures",
            "c) In a code containing procedures but no functions",
            "d) In a code containing both functions as well as procedures"
        ],
        "Answer": "Answer: b\nExplanation: The debugging is easy with the use of functions. However, procedures also divide the code into small segments but there are some side effects with the procedures. For example, the change in value of a signal without being an argument of the procedure. "
    },
    {
        "id": 372,
        "Question": "A procedure is called concurrently. It will execute when ________",
        "Options": [
            "a) Any of its parameters change",
            "b) Any of its OUT parameters change",
            "c) Any of its IN parameters change",
            "d) Any of its IN or INOUT parameter change"
        ],
        "Answer": "Answer: d\nExplanation: If the procedure is called outside a process then it is considered as a concurrent call. In that case, the procedure call statement executes whenever any of its parameter change with the mode IN or INOUT. There is no execution if the OUT parameter is changed. "
    },
    {
        "id": 373,
        "Question": "In which of the following cases, the procedure can’t contain WAIT statement?",
        "Options": [
            "a) When called from inside a process",
            "b) When called from inside a process with a sensitivity list",
            "c) When called from architecture",
            "d) When called from a LOOP statement"
        ],
        "Answer": "Answer: b\nExplanation: The WAIT statement can be used inside a procedure until it is called from a process containing a sensitivity list. Also, if the procedure is called from a function, then the use of WAIT statement is not possible."
    },
    {
        "id": 374,
        "Question": "In which of the following case, the code will not be synthesizable?",
        "Options": [
            "a) Code containing a WAIT statement inside a process",
            "b) Code containing a WAIT statement inside a procedure",
            "c) Code containing a RETURN statement inside a function",
            "d) Code containing a CASE statement inside a function"
        ],
        "Answer": "Answer: a\nExplanation: In VHDL 93, the availability of labels in front of any special statement is made available. One may use an optional label in front of a procedure call or procedure definition to make it more readable. This is possible in VHDL. "
    },
    {
        "id": 375,
        "Question": "9. Which of the following may be specified by the code given?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> op_code <span class=\"kw1\">is</span> <span class=\"br0\">(</span> ADD, SUB, MUL, DIV, LT, LE, EQ <span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PROCEDURE</span> first_unit <span class=\"br0\">(</span> A, B <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> <span class=\"kw2\">integer</span><span class=\"sy0\">;</span> op <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> op_code<span class=\"sy0\">;</span>\nZ <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">integer</span><span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">boolean</span> <span class=\"br0\">)</span> <span class=\"kw1\">is</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">CASE</span> op <span class=\"kw1\">IS</span>\n<span class=\"kw1\">WHEN</span> ADD <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">+</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> SUB <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">-</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> MUL <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">*</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> DIV <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">/</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> LT <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:=</span> A <span class=\"sy0\">&lt;</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> LE <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:=</span> A <span class=\"sy0\">&lt;=</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> EQ <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:=</span> A <span class=\"sy0\">=</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> <span class=\"kw1\">others</span> <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> Z<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">case</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> first_unit<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) CPU",
            "b) CU",
            "c) ALU",
            "d) Memory"
        ],
        "Answer": "Answer: b\nExplanation: The design is synthesizable if the procedure doesn’t have any WAIT statement in it. Also, a process can have wait statement until it doesn’t have a sensitivity list. Moreover, Function should have RETURN statement to be synthesizable. "
    },
    {
        "id": 376,
        "Question": "10. How many types of the output are returned by the code given?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> op_code <span class=\"kw1\">is</span> <span class=\"br0\">(</span> ADD, SUB, MUL, DIV, LT, LE, EQ <span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PROCEDURE</span> first_unit <span class=\"br0\">(</span> A, B <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> <span class=\"kw2\">integer</span><span class=\"sy0\">;</span> op <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> op_code<span class=\"sy0\">;</span>\nZ <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">integer</span><span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">boolean</span> <span class=\"br0\">)</span> <span class=\"kw1\">is</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">CASE</span> op <span class=\"kw1\">IS</span>\n<span class=\"kw1\">WHEN</span> ADD <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">+</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> SUB <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">-</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> MUL <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">*</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> DIV <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> A <span class=\"sy0\">/</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> LT <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:=</span> A <span class=\"sy0\">&lt;</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> LE <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:=</span> A <span class=\"sy0\">&lt;=</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> EQ <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> ZCOMP <span class=\"sy0\">:=</span> A <span class=\"sy0\">=</span> B<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> <span class=\"kw1\">others</span> <span class=\"sy0\">=&amp;</span>gt<span class=\"sy0\">;</span> Z <span class=\"sy0\">:=</span> Z<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">case</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> first_unit<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: It is clear from the code in which two parameters are showing inputs (A and B) on which different operations are being performed. Therefore, It is the case of ALU unit of the CPU. "
    },
    {
        "id": 377,
        "Question": "What is the use of an attribute?",
        "Options": [
            "a) To find all characteristics of an entity",
            "b) To find all characteristics of architecture",
            "c) To extract some additional information about some object",
            "d) To extract information about clock signals"
        ],
        "Answer": "Answer: c\nExplanation: An attribute is a feature of VHDL that allows you to extract additional information about any object. This object can be either a signal, variable or a type. It can also be associated with an entity but it returns a single value which means single information. "
    },
    {
        "id": 378,
        "Question": "Predefined attributes are defined as a part of _________ standard.",
        "Options": [
            "a) 1164",
            "b) 1076",
            "c) 1162",
            "d) 1093"
        ],
        "Answer": "Answer: b\nExplanation: The VHDL describes some fundamental kinds of attributes. These different attributes are defined as a part of 1076 standard. All other attributes which are defined outside this standard are called user defined attributes. "
    },
    {
        "id": 379,
        "Question": "How many fundamental kinds of predefined attributes are there?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: There are five fundamental kinds of predefined attributes which are generally named after their return type. Value kind, Function kind, Signal kind, Type kind and Range kind are the five fundamental kinds of predefined attributes. "
    },
    {
        "id": 380,
        "Question": "What is the basic syntax to write an attribute?",
        "Options": [
            "a) Object_name’ attribute_name (parameter)",
            "b) Attribute_name’ Object_name (parameter)",
            "c) Object_name : Attribute_name (parameter)",
            "d) Attribute_name : Object_name (parameter)"
        ],
        "Answer": "Answer: a\nExplanation: To use a predefined attribute, an object is used. First of all the object name is written followed by apostrophe sign and then the attribute name. There are parameters for some attributes which can be written within parentheses immediately after the attribute name. "
    },
    {
        "id": 381,
        "Question": "Which can’t be a result of a predefined attribute?",
        "Options": [
            "a) A value",
            "b) A function",
            "c) An entity",
            "d) A signal"
        ],
        "Answer": "Answer: c\nExplanation: As specified before, an attribute can return a value, function, signal, type or range. It can’t return an entity. The result of an attribute can be a value in case of value kind attributes and similarly for other five fundamental types."
    },
    {
        "id": 382,
        "Question": "How to declare a user defined attribute?",
        "Options": [
            "a) ATTRIBUTE name’ return_type;",
            "b) ATTRIBUTE name : return_type;",
            "c) ATTRIBUTE’ name : return_type;",
            "d) ATTRIBUTE’ name’ return_type;"
        ],
        "Answer": "Answer: b\nExplanation: Apostrophe sign is used at the time when we need to use the attribute but not at the time of declaration. The declaration of user defined attribute includes the keyword ATTRIBUTE followed by the name of attribute. The type is also specified at the time of declaration which is placed after a colon sign. "
    },
    {
        "id": 383,
        "Question": "Array attributes are those which ________",
        "Options": [
            "a) Returns array type",
            "b) Can be used on arrays",
            "c) Can’t be used on arrays",
            "d) Returns scalar values"
        ],
        "Answer": "Answer: b\nExplanation: Array attributes can be used on arrays. It can be used to find the range, length and other characteristics of an array. So, it can be used to find a particular index type."
    },
    {
        "id": 384,
        "Question": "Which of the following is used to extract information of non-array types?",
        "Options": [
            "a) Vector type",
            "b) Scalar type",
            "c) Non vector type",
            "d) Array type"
        ],
        "Answer": "Answer: b\nExplanation: Those attributes which are used to extract information of non-array types are called Scalar type or scalar kind attributes. It can be used only on pre-defined data types and not on enumeration data types."
    },
    {
        "id": 385,
        "Question": "What does a value kind attribute return?",
        "Options": [
            "a) A single value",
            "b) A signal",
            "c) A function",
            "d) A type"
        ],
        "Answer": "Answer: a\nExplanation: Value kind attributes to return a single value. This value can give information about anything like an array, a block or a type. This can be used to return the length of an array or some related information. "
    },
    {
        "id": 386,
        "Question": "Value attributes are classified into _______ subclasses.",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: Value kind attributes are further broken down into three subclasses. This classification is done on the basis of the information they provide. For example, if an attribute is providing the information about an array then it is called Value array attribute. "
    },
    {
        "id": 387,
        "Question": "Which of the following is not a category of Value kind attribute?",
        "Options": [
            "a) Value type attributes",
            "b) Value array attributes",
            "c) Value block attributes",
            "d) Value function attributes"
        ],
        "Answer": "Answer: d\nExplanation: The Value kind attributes are divided into three categories which are Value type attributes (which returns the value of a type), Value array attributes (information about array) and Value Block attributes (information about block). "
    },
    {
        "id": 388,
        "Question": "If T is an object, then T’LEFT attribute returns ________",
        "Options": [
            "a) Upper bound of object",
            "b) Leftmost value of object",
            "c) Leftmost value of an array",
            "d) Lower bound of the object"
        ],
        "Answer": "Answer: b\nExplanation: T’LEFT is an attribute which returns the left bound or the leftmost value of the object T. This object can be any predefined type, array or any block as well. Similarly, T’RIGHT returns the rightmost value of array."
    },
    {
        "id": 389,
        "Question": "What does the attribute T’HIGH returns?",
        "Options": [
            "a) Upper bound of the object",
            "b) Lower bound of the object",
            "c) Highest value of the object",
            "d) Rightmost value of the object"
        ],
        "Answer": "Answer: a\nExplanation: T’HIGH is another value kind attribute which gives information about the type, array or block. It returns the upper bound of the type or array. In a similar manner T’LOW will returns the lower bound of the object T."
    },
    {
        "id": 390,
        "Question": "6. What will be the value of x and y?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> my_type <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n…\n<span class=\"kw1\">VARIABLE</span> x, y <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\nx <span class=\"sy0\">:=</span> my_type’LEFT<span class=\"sy0\">;</span>\ny <span class=\"sy0\">:=</span> my_type’HIGH<span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0, 0",
            "b) 0, 15",
            "c) 15, 0",
            "d)15, 15"
        ],
        "Answer": "Answer: d\nExplanation: Since the attribute used is for the type, so it is value type attribute. ‘LEFT will give the left bound of the type or the leftmost value which is 15. Here my_type is described as a data type which has bound 0 to 15. So, HIGH will return the upper bound which is 15. So, x and y both will be 15 in this case. "
    },
    {
        "id": 391,
        "Question": "7. What will be the value of x and y in the code given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> bit_range <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> x, y <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\nx <span class=\"sy0\">:=</span> bit_range’RIGHT<span class=\"sy0\">;</span>\ny <span class=\"sy0\">:=</span> bit_range’LOW<span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0, 0",
            "b) 0, 15",
            "c) 15, 0",
            "d) 15, 15"
        ],
        "Answer": "Answer: c\nExplanation: T’RIGHT returns the rightmost value of any type. So, x will be 15. Similarly, T’LOW retruns the lower bound of the same. Here the bounds of the array are 0 and 15 as lower and upper bound. So, the resulting value of y will be 0."
    },
    {
        "id": 392,
        "Question": "What will be the type of value returned by the attribute T’LENGTH?",
        "Options": [
            "a) BIT",
            "b) INTEGER",
            "c) STD_LOGIC",
            "d) BOOLEAN"
        ],
        "Answer": "Answer: b\nExplanation: T’LENGTH is a Value Array attribute which returns the length of array. For example, if an array has 32 elements, then it will return 32. So, T’LENGTH returns a value of integer type."
    },
    {
        "id": 393,
        "Question": "9. What will be the value of my_array’LENGTH, if my_array is defined as below code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> my_array <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 16",
            "c) 0",
            "d) 32"
        ],
        "Answer": "Answer: b\nExplanation: Since, T’LENGTH returns the length of object T. So, my_array’LENGTH will return the length of my_array. Here, my_array has 16 elements from 0 to 15, so the value returned by ‘LENGTH attribute will be 16. "
    },
    {
        "id": 394,
        "Question": "The formula for T’LENGTH is best described by which of the following?",
        "Options": [
            "a) T’HIGH – T’LOW + 1",
            "b) T’HIGH – T’LOW",
            "c) T’HIGH + T’LOW – 1",
            "d) T’HIGH + T’LOW"
        ],
        "Answer": "Answer: a\nExplanation: T’HIGH will return the upper bound of the array and T’LOW will return the lower bound of the array. Also, the number of elements in an array is given by upper bound – lower bound + 1. Therefore, option a describes the formula best."
    },
    {
        "id": 395,
        "Question": "Which of the following is the return type of value T’ASCENDING?",
        "Options": [
            "a) Bit",
            "b) Integer",
            "c) Boolean",
            "d) Same as T"
        ],
        "Answer": "Answer: c\nExplanation: Ascending is a value kind attribute which can take two values either TRUE or FALSE. Regardless of type of the object T, the value returned by attribute ‘ASCENDING is always of Boolean type."
    },
    {
        "id": 396,
        "Question": "12. For which of the following declarations, the value returned by ‘ASCENDING attribute will be true?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> array_1 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">TYPE</span> array_2 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">BOOLEAN</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) For array_1 only",
            "b) For array_2 only",
            "c) For both array_1 and array_2",
            "d) Neither for array_1 nor for array_2"
        ],
        "Answer": "Answer: a\nExplanation: The T’ASCENDING will return true only if the array T is defined as in an ascending order. For example, areay_1 is defined from 0 to 31 whereas array_2 is defined from 15 to 0. Therefore, in case of array_1, the value will be true."
    },
    {
        "id": 397,
        "Question": "Which of the following attribute is available for all types?",
        "Options": [
            "a) ‘LEFT",
            "b) ‘ASCENDING",
            "c) ‘BASE",
            "d) ‘HIGH"
        ],
        "Answer": "Answer: c\nExplanation: ‘BASE is an attribute available for all the types, May it be a predefined data type or user defined data type. It returns the base type of the object. The type of object must have some base type which is returned by attribute."
    },
    {
        "id": 398,
        "Question": "What kind of information is provided by the value block attributes?",
        "Options": [
            "a) About the block name",
            "b) About the modeling of block",
            "c) About the architecture name",
            "d) About the inputs used in block"
        ],
        "Answer": "Answer: b\nExplanation: Value block attributes returns information about how a block in a design is modeled. For example, whether the structural modeling is used or behavioral modeling is used within a block or architecture."
    },
    {
        "id": 399,
        "Question": "Which of the following returns TRUE if there is no component instantiation statement in the block?",
        "Options": [
            "a) ‘STRUCTURE",
            "b) ‘BLOCK_COMPONENT",
            "c) ‘BLOCK_BEHAVIOUR",
            "d) ‘BEHAVIOR"
        ],
        "Answer": "Answer: d\nExplanation: ‘STRUCTURE and ‘BEHAVIOR are two predefined attributes that are under the category Value block. Both of them return true value. ‘BEHAVIOR will return true if there is no component declaration and instantiation inside the block to which it is attached. However, ‘STRUCTURE performs exactly opposite. "
    },
    {
        "id": 400,
        "Question": "Which of the following is returned by the function kind attributes?",
        "Options": [
            "a) Value",
            "b) Function",
            "c) Signal",
            "d) Array"
        ],
        "Answer": "Answer: a\nExplanation: Function attributes return values to the designer about the types, arrays or signals used. The name doesn’t tell that the attribute will return some function. It returns the information related to the function."
    },
    {
        "id": 401,
        "Question": "You are given with the position number of a value within a type, which attribute will you use to find its value?",
        "Options": [
            "a) ‘POS(value)",
            "b) ‘VAL(value)",
            "c) ‘POSITION(value)",
            "d) ‘VALUE(value)"
        ],
        "Answer": "Answer: b\nExplanation: The ‘value’ specified as an argument to the attribute specifies the position number and there are only two attributes which are predefined in the VHDL among the four options given. In which ‘VAL(value) attribute is used to return the value from position number specified."
    },
    {
        "id": 402,
        "Question": "A value from a type is passed as an argument to the attribute to find its position number. Which attribute it should be?",
        "Options": [
            "a) ‘SUCC(value)",
            "b) ‘PRED(value)",
            "c) ‘VAL(value)",
            "d) ‘POS(value)"
        ],
        "Answer": "Answer: d\nExplanation: ‘POS(value) is an attribute used to return the position value within a type if the value is known. For example, if a value 63is defined on the first number and we write ‘POS(63), the value returned will be 1. "
    },
    {
        "id": 403,
        "Question": "What is the function of ‘SUCC(value) attribute?",
        "Options": [
            "a) To return the value next to the value passed in argument of the attribute",
            "b) To return the value previous to the value passed in argument of the attribute",
            "c) To return the position of value next to the value passed in argument",
            "d) To return the position of value next to the value passed in argument"
        ],
        "Answer": "Answer: a\nExplanation: The attribute ‘SUCC(value) is used to return the next value defined in the type. The value written in the argument of the attribute will be taken as the reference and the next value from that is returned. "
    },
    {
        "id": 404,
        "Question": "Which of the following describes the function of ‘PRED(value)?",
        "Options": [
            "a) To return the position of value next to the value passed in argument",
            "b) To return the value next to the value passed in argument of the attribute",
            "c) To return the value previous to the value passed in the argument",
            "d) To return the position of value next to the value passed in argument"
        ],
        "Answer": "Answer: c\nExplanation: ‘PRED(value) attribute is used to return the previous value to the value passed in argument. Here, PRED is a representation for preceding value. There is no attribute for returning the position of previous to the value passed as an argument. "
    },
    {
        "id": 405,
        "Question": "Which of the following is equivalent to the ‘SUCC(value) attribute?",
        "Options": [
            "a) ‘PRED(value)",
            "b) ‘LEFTOF(value)",
            "c) ‘RIGHTOF(value)",
            "d) ‘LEFT(value)"
        ],
        "Answer": "Answer: c\nExplanation: ‘SUCC(value) attribute returns the value next to the value in the argument. Similarly, ‘RIGHTOF(value) returns the value in the type right to the value passed as a parameter to the attribute. Therefore, both are similar."
    },
    {
        "id": 406,
        "Question": "Which of the following is similar to ‘PRED(value) attribute?",
        "Options": [
            "a) ‘LEFTOF(value)",
            "b) ‘RIGHTOF(value)",
            "c) ‘RIGHT(value)",
            "d) ‘LEFT(value)"
        ],
        "Answer": "Answer: a\nExplanation: The value previous to the argument value is returned by the ‘PRED attribute. The same is done by ‘LEFTOF, it returns the value left to the argument which means the same as that of ‘PRED. However, LEFT is a value kind attribute used to return the leftmost value."
    },
    {
        "id": 407,
        "Question": "8. What would be the value of x and y in the example given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> color <span class=\"kw1\">IS</span> <span class=\"br0\">(</span>red, yellow, green, blue, purple, orange<span class=\"br0\">)</span>\n<span class=\"kw1\">VARIABLE</span> x,y <span class=\"sy0\">:</span> color<span class=\"sy0\">;</span>\nx <span class=\"sy0\">:=</span> color’SUCC<span class=\"br0\">(</span>green<span class=\"br0\">)</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">:=</span> color’VAL<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) blue, green",
            "b) blue, blue",
            "c) 4, blue",
            "d) blue, 4"
        ],
        "Answer": "Answer: b\nExplanation: Since ‘SUCC attribute returns the succeeding value of the argument. In the argument, value green is used so the succeeding value is blue. Therefore, x will be blue. Also, ‘VAL will return the value at 4th position which is blue."
    },
    {
        "id": 408,
        "Question": "9. What would be the value of x and y?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> color <span class=\"kw1\">IS</span> <span class=\"br0\">(</span>red, green, blue, yellow, purple, orange, black<span class=\"br0\">)</span>\n<span class=\"kw1\">VARIABLE</span> x <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> y <span class=\"sy0\">:</span> color<span class=\"sy0\">;</span>\nx <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> color<span class=\"re2\">'POS</span><span class=\"br0\">(</span>green<span class=\"br0\">)</span><span class=\"sy0\">;</span>\ny <span class=\"sy0\">&amp;</span>lt<span class=\"sy0\">;=</span> color<span class=\"re2\">'LEFTOF</span><span class=\"br0\">(</span>green<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) red, green",
            "b) green, red",
            "c) red, 2",
            "d) 2, red"
        ],
        "Answer": "Answer: d\nExplanation: Since x is an integer type and is assigned the value returned by ‘POS attribute. The value returned will be the position of green value which is 2. Another variable y can take any value within type color. The value in the left of green is red."
    },
    {
        "id": 409,
        "Question": "10. Identify the value of variable x from the lines given below.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SUBTYPE</span> delay_time <span class=\"kw1\">IS</span> <span class=\"kw2\">TIME</span> <span class=\"kw1\">RANGE</span> <span class=\"nu0\">10</span> <span class=\"re0\">ns</span> <span class=\"kw1\">to</span> <span class=\"nu0\">50</span> <span class=\"re0\">ns</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> x <span class=\"sy0\">:=</span> delay_time<span class=\"re2\">'BASE</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ns",
            "b) time",
            "c) 10 ns",
            "d) 50 ns"
        ],
        "Answer": "Answer: b\nExplanation: ‘BASE is an attribute that is available for all predefined and enumerated data types. It gives the base type of object. Here, the subtype is defined with the base type TIME. So, x will contain TIME."
    },
    {
        "id": 410,
        "Question": "What is the basic use of signal kind attributes?",
        "Options": [
            "a) To check any event on signals",
            "b) To check if a function is called",
            "c) To check if a signal is IN or OUT mode",
            "d) To check a clock signal"
        ],
        "Answer": "Answer: a\nExplanation: Signal kind attributes can provide information about any signals. These attributes can be used to report whether a signal has changed its value, what was the last value and after what time the signal changed, etc. "
    },
    {
        "id": 411,
        "Question": "Which of the following returns the Boolean type always?",
        "Options": [
            "a) ‘LAST_VALUE",
            "b) ‘LAST_EVENT",
            "c) ‘EVENT",
            "d) ‘STABLE"
        ],
        "Answer": "Answer: c\nExplanation: ‘EVENT is an attribute which returns a Boolean value always. It returns true if any transition has taken place on the given signal during the current delta. Otherwise, it returns false. It always takes a signal as its object and detects any change on the value."
    },
    {
        "id": 412,
        "Question": "4. Refer to the statement given below, it is used for detecting _________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">IF</span> <span class=\"br0\">(</span>clk’EVENT <span class=\"kw3\">and</span> clk <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Rising edge of the clock signal",
            "b) Falling edge of the clock signal",
            "c) Clock signal frequency",
            "d) Time period of clock signal"
        ],
        "Answer": "Answer: a\nExplanation: Signal kind attributes are called so because they provide information about any signal. Unlike value kind and function kind in which variables can be used objects with attributes, it is not possible to use any data object with signal kind attributes except signals. "
    },
    {
        "id": 413,
        "Question": "s’ACTIVE will return true if _________",
        "Options": [
            "a) Any transition from 0 to 1 on signal s during the current delta",
            "b) Any transition from 1 to 0 on signal s during the current delta",
            "c) Any change has occurred on the signal s during last 2 delta’s",
            "d) Any change has occurred on the signal s during the current delta"
        ],
        "Answer": "Answer: b\nExplanation: As described earlier, ‘EVENT will detect any change on the clock signal. This attribute is here used in conjunction with a condition that clock signal should be zero. So, the statement is used to detect the trailing or falling edge of the clock signal. "
    },
    {
        "id": 414,
        "Question": "Attribute s‘LAST_EVENT has a return value of ______ type.",
        "Options": [
            "a) BOOLEAN",
            "b) TIME",
            "c) INTEGER",
            "d) Same as signal s type"
        ],
        "Answer": "Answer: d\nExplanation: s’ACTIVE is an attribute which always returns the Boolean value always. It returns true if the signal is active during the current delta. It means the value will be true if any change has occurred on the signal during the current delta. Otherwise, it returns false."
    },
    {
        "id": 415,
        "Question": "What is the type of value returned by the s’DELAYED(time) attribute?",
        "Options": [
            "a) TIME",
            "b) BOOLEAN",
            "c) INTEGER",
            "d) Same as signal s"
        ],
        "Answer": "Answer: b\nExplanation: s’LAST_EVENT is an attribute which returns the time elapsed since the previous event occurred on the signals. This attribute is very useful for implementing timing checks like pulse width check, hold check etc. "
    },
    {
        "id": 416,
        "Question": "Which of the following statement is correct to check the violation of hold time?",
        "Options": [
            "a) IF(clk’DELAYED(hold_time)’EVENT) THEN",
            "b) IF(clk’DELAYED(hold_time) = ‘1’) THEN",
            "c) IF(clk’DELAYED(hold_time) = ‘0’) THEN",
            "d) IF(clk’DELAYED(hold_time) = ‘1’ AND clk’DELAYED(hold_time)’EVENT) THEN"
        ],
        "Answer": "Answer: d\nExplanation: s’DELAYED attribute is used to create a delayed version of same signal, delayed by an amount specified in the argument. It creates the signal delayed by ‘time’ value. So, the return type will be same as that of signals."
    },
    {
        "id": 417,
        "Question": "The attribute s’TRANSACTION creates a signal of type ______",
        "Options": [
            "a) BOOLEAN",
            "b) BIT",
            "c) INTEGER",
            "d) Same as signal s"
        ],
        "Answer": "Answer: d\nExplanation: The signal is created by ‘DELAYED attribute which is delayed by hold time and then it must be used in conjunction with the ‘EVENT attribute to check any event on the signal generated. By doing this, one may check the hold time."
    },
    {
        "id": 418,
        "Question": "What is the use of s’TRANSACTION attribute?",
        "Options": [
            "a) Check the continuity",
            "b) Check the hold time",
            "c) Interrupt handling by using WAIT",
            "d) Create a square wave"
        ],
        "Answer": "Answer: b\nExplanation: s’TRANSACTION creates a signal of time BIT that toggles its value for every transaction of the signal it is attachted to. Whenever there is some change in signal s, the value of BIT signal is toogled either from 1 to 0 or from 0 to 1. "
    },
    {
        "id": 419,
        "Question": "Which of the following is only a predefined type kind attribute?",
        "Options": [
            "a) ‘TYPE",
            "b) ‘BASE",
            "c) ‘RANGE",
            "d) ‘RIGHT"
        ],
        "Answer": "Answer: b\nExplanation: Type attributes return values of a kind type. There is only one type attribute which is T’BASE where T is any object. T’BASE will return the base type of object T. This object can be single, variable or constant."
    },
    {
        "id": 420,
        "Question": "3. What will x’BASE and y’BASE return in the code given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> color <span class=\"kw1\">IS</span> <span class=\"br0\">(</span>red, blue, green, yellow, brown<span class=\"br0\">)</span>\n<span class=\"kw1\">SUBTYPE</span> color_gun <span class=\"kw1\">IS</span> color <span class=\"kw1\">RANGE</span> red <span class=\"kw1\">TO</span> green\n<span class=\"kw1\">VARIABLE</span> x <span class=\"sy0\">:</span> color<span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> y <span class=\"sy0\">:</span> color_gun<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) color, color_gun",
            "b) color_gun, color",
            "c) color, color",
            "d) red, color"
        ],
        "Answer": "Answer: a\nExplanation: T’BASE attribute returns the base type of a type or subtype. It can be used as the prefix to another attribute. It is available for all types and can’t be used independently. It must have a value kind or function kind attribute attached to it. "
    },
    {
        "id": 421,
        "Question": "4. What will be the value of a in the statements given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> color <span class=\"kw1\">IS</span> <span class=\"br0\">(</span>red, green, blue, yellow, brown, black<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">VARIABLE</span> a <span class=\"sy0\">:</span> color<span class=\"sy0\">;</span>\na <span class=\"sy0\">:=</span> color’BASE’RIGHT<span class=\"sy0\">;</span>\n…</pre></div></div></div></div></div></div>",
        "Options": [
            "a) red",
            "b) color",
            "c) green",
            "d) black"
        ],
        "Answer": "Answer: c\nExplanation: As specified before, ‘BASE attribute will return the base type of any type or subtype. Here x is of the type color so x’BASE will return color. Similarly, y’BASE is of type color_gun which is a subtype with its base type color. So, y’BASE will also return color. "
    },
    {
        "id": 422,
        "Question": "How many predefined attributes are there which are range kind attributes?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: Since ‘BASE attribute can’t be used independently, here it is used in conjunction with ‘RIGHT attribute. So, first of all color’BASE will return type color and then the ‘RIGHT attribute will return the rightmost value in the specified type. So, a will be assigned with black. "
    },
    {
        "id": 423,
        "Question": "The object of a range kind attribute can be __________",
        "Options": [
            "a) Any signal, variable or constant",
            "b) An array",
            "c) A constrained array",
            "d) An unconstrained array"
        ],
        "Answer": "Answer: b\nExplanation: There are two predefined attributes in VHDL which return a value kind of range. These two attributes are called Range kind attributes. The predefined range kind attributes are a’RANGE and a’REVERSE_RANGE."
    },
    {
        "id": 424,
        "Question": "Which of the following is the most appropriate use of range kind attributes?",
        "Options": [
            "a) In implementing CASE",
            "b) In implementing LOOP",
            "c) In implementing IF",
            "d) In implementing ASSERT"
        ],
        "Answer": "Answer: c\nExplanation: Range kind attributes works only on constrained array types. The arrays which have defined bounds are called constrained array types. These attributes return the range of the given array."
    },
    {
        "id": 425,
        "Question": "8. What will be the value of array16’RANGE and array16’REVERSE_RANGE, if the array16 is an object defined as below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">TYPE</span> array16 <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">(</span><span class=\"nu0\">15</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">BIT</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 15 DOWNTO 0, 0 TO 15",
            "b) 0 TO 15, 15 DOWNTO 0",
            "c) 0 TO 15, 0 TO 15",
            "d) 15 DOWNTO 0, 15 DOWNTO 0"
        ],
        "Answer": "Answer: b\nExplanation: Since range kind attributes return a range of an array. This range can be used in defining the LOOP structure. For loop needs a counter which needs a range like 1 TO n. This range can be provided by the range kind attribute."
    },
    {
        "id": 426,
        "Question": "Which of the following is a new predefined attribute in VHDL 93?",
        "Options": [
            "a) T’BASE",
            "b) T’RANGE",
            "c) T’EVENT",
            "d) T’ASCENDING"
        ],
        "Answer": "Answer: a\nExplanation: ‘RANGE attribute will just give the range of array to which it is attached to. In this case, the range of array16 is 15 DOWNTO 0. The reverse range will just give the range in reverse order, which will be 0 TO 15. "
    },
    {
        "id": 427,
        "Question": "Which of the following attribute is not synthesizable?",
        "Options": [
            "a) ‘RANGE",
            "b) ‘EVENT",
            "c) ‘BASE",
            "d) ‘REVERSE_RANGE"
        ],
        "Answer": "Answer: d\nExplanation: T’ASCEDING is defined in the VHDL-93 which returns a value of BOOLEAN type. It returns true if a constrained array has range defined in ascending order. Otherwise, if the range is defined like 15 DOWNTO 0 then it will return false."
    },
    {
        "id": 428,
        "Question": "Configuration is generally associated with ________",
        "Options": [
            "a) Behavioral modeling",
            "b) Dataflow modeling",
            "c) Structural modeling",
            "d) All of the modeling styles"
        ],
        "Answer": "Answer: c\nExplanation: Configurations are generally used to connect component instances to the entity or the external interface. It is basically used with modeling at the component level which is structural modeling. "
    },
    {
        "id": 429,
        "Question": "Among the following cases, when the configurations must be used?",
        "Options": [
            "a) One entity and two architectures",
            "b) Two entities and one architecture",
            "c) Two entities and no architecture",
            "d) One entity and no architecture"
        ],
        "Answer": "Answer: b\nExplanation: Configurations are optional and usually are not supported by the synthesis tools. They are used in structural modeling but it is not necessary every time to use a configuration. It makes code more complex. "
    },
    {
        "id": 430,
        "Question": "Which of the following part is optional in a configuration statement?",
        "Options": [
            "a) Instantiation label",
            "b) Library name",
            "c) Entity name",
            "d) Architecture name"
        ],
        "Answer": "Answer: a\nExplanation: The configuration can be directly defined by using a FOR statement in which the label where the component is instantiated is written first and then the name of component is written.  Then a USE clause followed by the name of library in which entity is present to which the component is to be linked. After which the architecture name is written which should be used."
    },
    {
        "id": 431,
        "Question": "What is the use of default configurations?",
        "Options": [
            "a) To bind the architecture and entity",
            "b) To configure block statements in architecture",
            "c) To bind generics with architecture",
            "d) To bind components with entity"
        ],
        "Answer": "Answer: d\nExplanation: Architecture name is optional, all other parts are compulsory in a configuration statement. Architecture name is only written if there is more than one architecture associated with the entity then only we have to write architecture name. "
    },
    {
        "id": 432,
        "Question": "Which of the following is true about configurations?",
        "Options": [
            "a) To use architecture in configurations, it must be first added to some library",
            "b) A configuration can use more than one architecture for an entity",
            "c) To use an entity in configurations, it must be first added to some library",
            "d) A configuration can’t use any architecture for any entity"
        ],
        "Answer": "Answer: a\nExplanation: When there is no configuration used in structural modeling, then default configuration is used to bind the architecture and entity. Default configuration is associated with entities and architectures. The component is automatically associated with the entity by looking at its ports and modes. "
    },
    {
        "id": 433,
        "Question": "Apart from the components ________ can also be associated with configurations.",
        "Options": [
            "a) Constants",
            "b) Generics",
            "c) Integers",
            "d) Signals"
        ],
        "Answer": "Answer: c\nExplanation: Since the library name is written before the name of the entity, so it is necessary to add the entity in some library to use it in a configuration. Also, a configuration binds only one architecture with an entity."
    },
    {
        "id": 434,
        "Question": "Which of the following is not a part of the configuration statement?",
        "Options": [
            "a) Architecture specification",
            "b) Instance specification",
            "c) Binding indication",
            "d) Library binding"
        ],
        "Answer": "Answer: b\nExplanation: Generics can also be defined and attached with the entity by using configurations. Configuration can bind generics and architectures as well. Just like port map and generic map, configurations do the same for these two."
    },
    {
        "id": 435,
        "Question": "As a VHDL designer, what should you make sure about the design so that it is synthesized correctly?",
        "Options": [
            "a) It must use a configuration when more than one architecture is used",
            "b) All the component ports and entity ports must be matched",
            "c) A configuration must be there always",
            "d) A configuration is used when ports are mismatched"
        ],
        "Answer": "Answer: a\nExplanation: For any design configuration of some design entity and the configuration itself must be included in the same library. In most cases, the library used is work library, but it is not mandatory to use work every time."
    },
    {
        "id": 436,
        "Question": "What is the meaning of overloading?",
        "Options": [
            "a) To use single function many times",
            "b) To use same object for different subprograms",
            "c) To use same name for different objects",
            "d) To use single function many time with single call"
        ],
        "Answer": "Answer: c\nExplanation: An object is said to be overloaded when the same object name exists for multiple subprograms or types. In VHDL different type of overloading is possible such as subprogram overloading, operator overloading etc."
    },
    {
        "id": 437,
        "Question": "Overloading a subprogram allows subprogram to ________",
        "Options": [
            "a) Operate on objects of different types",
            "b) Operate on objects of same name",
            "c) Operate on objects of different name",
            "d) Operate on objects of same types"
        ],
        "Answer": "Answer: a\nExplanation: Overloading a subprogram means to use a single name which has multiple definitions. It allows subprograms to operate on objects of different types. For example, a user define function my_func is called with two different object one of bit_vector type and another of integer type, in this case my_func must be defined twice."
    },
    {
        "id": 438,
        "Question": "What is the necessary condition to overload parameters type of a subprogram?",
        "Options": [
            "a) The base type of two parameters must be same",
            "b) The parameters must have a different name",
            "c) The parameters can’t be of integer type",
            "d) The base type of two parameters must differ"
        ],
        "Answer": "Answer: a\nExplanation: The result of using overloaded subprograms and operators is models that are easier to read and maintain. It frees the designer from the necessity of generating countless unique names for subprograms that do virtually the same operation."
    },
    {
        "id": 439,
        "Question": "By overloading + operator, it is possible to _________",
        "Options": [
            "a) Use binary addition",
            "b) Use arithmetic addition",
            "c) Use it as subtract operator",
            "d) Use it as ternary operator"
        ],
        "Answer": "Answer: d\nExplanation: To overload argument types, the base type of parameters of two functions must be different. For example, base types do not differ when two subtypes are of the same type, in that case compiler will return an error.  "
    },
    {
        "id": 440,
        "Question": "Which of the following is true about the overloading of ‘+’ and ‘-‘ operators?",
        "Options": [
            "a) They can be defined as binary operators only",
            "b) They can be defined as unary operators only",
            "c) They can be defined as ternary operators only",
            "d) They can be defined as either binary or unary operators"
        ],
        "Answer": "Answer: a\nExplanation: Overloading an operator allows the operator to perform the same operations on multiple types. In this case, + operator is predefined for arithmetic operation, it can be overloaded to perform the same on binary numbers. "
    },
    {
        "id": 441,
        "Question": "Apart from subprogram and operator overloading, which of the following can be overloaded in VHDL?",
        "Options": [
            "a) Attributes",
            "b) Types",
            "c) IF statement",
            "d) CASE statement"
        ],
        "Answer": "Answer: d\nExplanation: These are the two operators which can be defined as both binary as well as unary operators. Binary operators are those which take two operands and unary operators take a single operator. It is not possible to define them as ternary operators. "
    },
    {
        "id": 442,
        "Question": "8. Which of the following function definition will return an error?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">SUBTYPE</span> log4 <span class=\"kw1\">IS</span> <span class=\"kw2\">BIT_VECTOR</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>\n<span class=\"kw1\">SUBTYPE</span> log8 <span class=\"kw1\">IS</span> <span class=\"kw2\">BIT_VECTOR</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span>\n<span class=\"kw1\">FUNCTION</span> abc <span class=\"br0\">(</span>a <span class=\"sy0\">:</span> log4<span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">FUNCTION</span> abc <span class=\"br0\">(</span>a <span class=\"sy0\">:</span> log8<span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">INTEGER</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Only first call",
            "b) Only second call",
            "c) Both first and second call",
            "d) No error"
        ],
        "Answer": "Answer: b\nExplanation: Overloading of enumeration types is also possible in case of VHDL apart from operator and subprogram overloading. This means that different types can have same name just like subprogram overloading. "
    },
    {
        "id": 443,
        "Question": "A user wants to perform a different operation on an array type and the function can be overloaded but the parameter is of same base type. How to do the same by using a single function?",
        "Options": [
            "a) By using conditional statement with ‘LENGTH attribute",
            "b) By using loop statement with ‘LENGTH attribute",
            "c) By using unconstrained array in parameters",
            "d) It can’t be done by using single function"
        ],
        "Answer": "Answer: b\nExplanation: Here the function abc is overloaded and both has parameters which also have same name or they are also overloaded. So, the base type of two parameters must be different. Here both have same base type which is BIT_VECTOR. Therefore, the second function will be illegal and the error is that two functions have been declared for same base type. "
    },
    {
        "id": 444,
        "Question": "10. In the two functions defined below, which would generate an error?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">FUNCTION</span> abc <span class=\"br0\">(</span> a, b<span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"br0\">)</span> RETURNS <span class=\"kw2\">BOOLEAN</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">FUNCTION</span> abc<span class=\"br0\">(</span> a, b, c<span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"br0\">)</span> RETURNS <span class=\"kw2\">BOOLEAN</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Only function 1",
            "b) Only function 2",
            "c) Both functions 1 and 2",
            "d) No error"
        ],
        "Answer": "Answer: a\nExplanation: Since the parameter is of same base type, it is just that it has different length. So, there is no need to overload the function. It can be defined in a single function only by using conditional statements. For example, one can do it like shown below:\n\n\nIF(parameter’LENGTH =n) THEN \ndo_this;\nELSE do_this\n\n\n "
    },
    {
        "id": 445,
        "Question": "What is the correct syntax to define a function which overloads any operator, say + operator for bit_vector type?",
        "Options": [
            "a) FUNCTION + (L : bit_vector, R : bit_vector) RETURN bit_vector IS",
            "b) FUNCTION ‘+’ (L : bit_vector, R : bit_vector) RETURN bit_vector IS",
            "c) FUNCTION “+” (L : bit_vector, R : bit_vector) RETURN bit_vector IS",
            "d) FUNCTION (+) (L : bit_vector, R : bit_vector) RETURN bit_vector IS"
        ],
        "Answer": "Answer: d\nExplanation: In case of subprogram overloading, either base type or number of parameters must be different. If the number of parameters are same, then parameters can have same name. But, if both functions have same number of parameters, then the names of parameters must differ."
    },
    {
        "id": 446,
        "Question": "What does an alias declaration actually do?",
        "Options": [
            "a) Creates a new object",
            "b) Doesn’t create a new object",
            "c) Creates a new signal",
            "d) Overwrites a file"
        ],
        "Answer": "Answer: b\nExplanation: An alias declaration is used for an alternative name for an existing object. An object is any signal, variable or constant. Thus, an alias creates a duplicate or xerox of the existing object but doesn’t create a new object."
    },
    {
        "id": 447,
        "Question": "Which of the following is the correct syntax for declaring an alias?",
        "Options": [
            "a) ALIAS alias_name :  object_name;",
            "b) ALIAS alias_name ; object_name;",
            "c) ALIAS alias_name – alias_type object_name;",
            "d) ALIAS alias_name : alias_type object_name;"
        ],
        "Answer": "Answer: d\nExplanation: To declare an alias, the keyword ALIAS is used. Then, the colon sign followed by the name of ALIAS. Then, the name of the object is then specified whose alias is to be created. So, that the duplicate for that object can be created."
    },
    {
        "id": 448,
        "Question": "For what purpose in the following, one can use alias?",
        "Options": [
            "a) To divide the complex part into smaller slices",
            "b) To decrease the simulation time",
            "c) To make use of same memory",
            "d) To assign different memory locations"
        ],
        "Answer": "Answer: a\nExplanation: In the complex designs, for example, in the design of CPU, one may need to divide the complex part I to smaller reference slices which are easy to maintain and it also increases the readability of the code."
    },
    {
        "id": 449,
        "Question": "Which of the following can’t be aliased?",
        "Options": [
            "a) Signal",
            "b) Loop variable",
            "c) Variable",
            "d) File"
        ],
        "Answer": "Answer: b\nExplanation: All the objects from the VHDL can be aliased i.e. signals, variables, constants. Even all the non-objects can also be aliased except Labels, Loop parameters and Generate parameters. These are the only three exceptions."
    },
    {
        "id": 450,
        "Question": "In what way the qualified expression differs from a normal expression?",
        "Options": [
            "a) It has a keyword qualified in front of it",
            "b) Its type is explicitly defined",
            "c) Its range is defined",
            "d) It is similar to simple expression but is synthesizable"
        ],
        "Answer": "Answer: a\nExplanation: It is possible to reverse the order of an array in its alias created. For example, if an array is defined with the range 0 TO 7, then its alias can also define 7 DOWNTO 0. It will be completely legal in VHDL."
    },
    {
        "id": 451,
        "Question": "Which of the following is the correct syntax to define a qualified expression?",
        "Options": [
            "a) (expression)’ type",
            "b) (expression)” type",
            "c) type’ (expression)",
            "d) type” (expression)"
        ],
        "Answer": "Answer: b\nExplanation: Qualified expression is an expression whose type is being explicitly specified in the expression itself. In some cases, it is necessary to specify the type other it may be ambiguous to interpret the expression."
    },
    {
        "id": 452,
        "Question": "Where one should use the qualified expression?",
        "Options": [
            "a) In all overloaded functions",
            "b) In overloaded functions with different number of parameters",
            "c) In overloaded functions with different parameter names",
            "d) In overloaded functions with different parameter types"
        ],
        "Answer": "Answer: c\nExplanation: To define a qualified expression, first we need to specify the type which is followed by a single quotation mark. After specifying the type, then the expression is written."
    },
    {
        "id": 453,
        "Question": "Which one of the following would be the best use of qualified expression?",
        "Options": [
            "a) Function overloaded with bit and integer types",
            "b) Function overloaded with bit_vector and std_logic_vector",
            "c) Function overloaded with bit_vector and std_logic",
            "d) Function overloaded with std_logic_vector and bit"
        ],
        "Answer": "Answer: d\nExplanation: When the parameters in two overloaded functions are of different type, then qualified expressions may be needed. In case of different number of parameters, it is easy to identify which function is called, to the user and to the simulation tool as well. But, if there are same number of parameters but different type, then the things may be ambiguous. So, there we need to specify the type of expression."
    },
    {
        "id": 454,
        "Question": "Generate statement is a _______ statement.",
        "Options": [
            "a) Concurrent",
            "b) Sequential",
            "c) Concurrent as well as sequential",
            "d) Process"
        ],
        "Answer": "Answer: a\nExplanation: Generate statement is a concurrent statement that can be used in architecture directly. It is similar to loop statement in case of sequential statement. It give designer the ability to create replicated structures."
    },
    {
        "id": 455,
        "Question": "There are _______ types of GENERATE statement in VHDL.",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: a\nExplanation: There are 2 types of GENERATE statement in VHDL. One is FOR generate and other is IF generate. They can be used to replicate a structure or logic and  to enable/disable a block. FOR can be used for iterative elaboration of a logic and IF can be used for conditional elaboration of some block."
    },
    {
        "id": 456,
        "Question": "A generate statement is generally associated with ________ modeling.",
        "Options": [
            "a) Behavioral",
            "b) Data flow",
            "c) Structural",
            "d) Behavioral and data flow"
        ],
        "Answer": "Answer: c\nExplanation: A generate statement is usually associated with component instantiation which is a part of structural modeling. For example, the FOR generate can be used to instantiate arrays of components and similarly IF can be used to instantiate the component conditionally."
    },
    {
        "id": 457,
        "Question": "FOR generate creates ____________ objects.",
        "Options": [
            "a) Dissimilar",
            "b) Unique",
            "c) Different",
            "d) Similar"
        ],
        "Answer": "Answer: d\nExplanation:  A label is compulsory with IF generate statement as well. However, IF is a sequential statement, but when used with GENERATE it includes concurrent statements. The declarative part and the staements part is separated by the keyword BEGIN."
    },
    {
        "id": 458,
        "Question": "8. What is realized in the code given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">USE</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ENTITY</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">GENERIC</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>sig1 <span class=\"sy0\">:</span> <span class=\"kw2\">bit_vector</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n             Sig2 <span class=\"sy0\">:</span> <span class=\"kw2\">bit_vector</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_logic<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> test <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">COMPONENT</span> or2\n   <span class=\"kw1\">PORT</span><span class=\"br0\">(</span>a0, a1 <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">BIT</span><span class=\"sy0\">;</span>\n                z         <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">BIT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span> <span class=\"kw3\">or</span>\n<span class=\"kw1\">BEGIN</span>\nORARRAY <span class=\"sy0\">:</span> <span class=\"kw1\">FOR</span> i <span class=\"kw1\">IN</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span> <span class=\"kw1\">GENERATE</span>\n                   or_gate <span class=\"sy0\">:</span> or2\n<span class=\"kw1\">PORT</span> <span class=\"kw1\">MAP</span> <span class=\"br0\">(</span> a0 <span class=\"sy0\">=&gt;</span> sig1<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,\n                       A1 <span class=\"sy0\">=&gt;</span> sig2<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,\n                         z <span class=\"sy0\">=&gt;</span> y<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">GENERATE</span> ORARRAY<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> test<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 7- Bit parallel adder ignoring the carry",
            "b) 7- Bit parallel adder including the carry",
            "c) 8- Bit parallel adder ignoring the carry",
            "d) 8- bit parallel adder including the carry"
        ],
        "Answer": "Answer: a\nExplanation: Unlike other statements of VHDL, using a label is compulsory in a GENERATE statement. This label should be unique for each different GENERATE. Moreover, this label can be used to end the generate statement as well. "
    },
    {
        "id": 459,
        "Question": "Which of the following is not possible to use inside the FOR generate statement?",
        "Options": [
            "a) IF",
            "b) IN",
            "c) EXIT",
            "d) PORT MAP"
        ],
        "Answer": "Answer: c\nExplanation: Since, a generic is used to specify the length of the arry which is assigned a value 8. The loop iterates from 7 downto 0 that means 8 times. So, an array of OR gates is instantiated by using this code including 8 OR gates. So, it is 8 bit parallel adder ignoring the carry."
    },
    {
        "id": 460,
        "Question": "What is the use of ABS keyword?",
        "Options": [
            "a) To use only complete number",
            "b) To convert integer operand into real number",
            "c) To convert decimal real operand into integer",
            "d) To return absolute value of the operand"
        ],
        "Answer": "Answer: d\nExplanation: ABS keyword is used to return the absolute value of the operand. It uses only one operand and returns its absolute value. This keyword is useful when we need absolute value after division."
    },
    {
        "id": 461,
        "Question": "Which of the following keyword was not present before VHDL 93?",
        "Options": [
            "a) OR",
            "b) NOT",
            "c) XNOR",
            "d) XOR"
        ],
        "Answer": "Answer: c\nExplanation: All the logic functions except EXNOR operation were present in VHDL 87. XNOR keyword was added in VHDL 93. To perform XNOR function, NOT and XOR were used collectively. It was not available to use."
    },
    {
        "id": 462,
        "Question": "Which of the following keyword is used to declare a pointer?",
        "Options": [
            "a) ACCESS",
            "b) POINT",
            "c) POINTER",
            "d) USE"
        ],
        "Answer": "Answer: a\nExplanation: An ACCESS type is very similar to the pointers in traditional programming languages like C etc. ACCESS type is always an address or a handle to a specific object. "
    },
    {
        "id": 463,
        "Question": "ACCESS type can’t be used in ________ directly.",
        "Options": [
            "a) Process",
            "b) Architecture",
            "c) Functions",
            "d) Loop"
        ],
        "Answer": "Answer: b\nExplanation: Access types are always variable types. By the nature of access types, they can be used in sequential processing. Therefore, it can’t be used in architecture directly. Also, access type is not synthesizable in VHDL."
    },
    {
        "id": 464,
        "Question": "AFTER keyword is generally used with which of the following?",
        "Options": [
            "a) IS",
            "b) IF",
            "c) Assignment",
            "d) When"
        ],
        "Answer": "Answer: c\nExplanation: Generally, AFTER keyword is generally used with concurrent assignment statement. It is used in conjunction with assignment statement to produce delays in assignment. For both type of delays, AFTER keyword is used. "
    },
    {
        "id": 465,
        "Question": "Which of the following assignment is associated with OTHERS keyword?",
        "Options": [
            "a) <=",
            "b) =>",
            "c) :=",
            "d) >="
        ],
        "Answer": "Answer: b\nExplanation: There are three assignment operators in VHDL. Among which <= is used for signal assignment and := is used for variable assignment. Third assignment operate is => used with OTHERS keyword only. "
    },
    {
        "id": 466,
        "Question": "Which of the following keyword is not associated with arrays?",
        "Options": [
            "a) TO",
            "b) DOWNTO",
            "c) ARRAY",
            "d) GROUP"
        ],
        "Answer": "Answer: d\nExplanation: TO and DOWNTO are the keywords used to describe the range of array and the array keyword is used for defining an array type in VHDL. Moreover, GROUP has nothing to do with arrays. It is used to group some names."
    },
    {
        "id": 467,
        "Question": "Which of the following is not a reserved word in VHDL?",
        "Options": [
            "a) Constant",
            "b) Identifier",
            "c) Variable",
            "d) Signal"
        ],
        "Answer": "Answer: b\nExplanation: Constant, Variable and Signal are the reserved words for defining three different types of data objects. However, identifier is a name and not a keyword. It is not in the list of reserved words of VHDL. "
    },
    {
        "id": 468,
        "Question": "Which of the following is a reserved word, which may be used to terminate a loop?",
        "Options": [
            "a) BREAK",
            "b) CONTINUE",
            "c) EXIT",
            "d) NULL"
        ],
        "Answer": "Answer: c\nExplanation: There is only one keyword in VHDL which may be used to terminate the loop which is EXIT. There is no keyword like BREAK and CONTINUE. Only EXIT is used to come out of the loop and start concurrent statements."
    },
    {
        "id": 469,
        "Question": "GUARDED keyword is associated with ______",
        "Options": [
            "a) BLOCK",
            "b) PROCESS",
            "c) FUNCTION",
            "d) COMPONENT"
        ],
        "Answer": "Answer: a\nExplanation: GUARDED is a reserved word used to define a guarded block. A guarded block is like a block that executes conditionally. It contains some guard expression which is first simplified and then only the block is executed. "
    },
    {
        "id": 470,
        "Question": "Among the following, with which keyword MAP is generally used?",
        "Options": [
            "a) IS",
            "b) PORT",
            "c) COMPONENT",
            "d) LABEL"
        ],
        "Answer": "Answer: a\nExplanation: Since Guarded is always used with the BLOCK statement which itself is a block statement and contains concurrent statements. So, wherever we are using guarded, it means that the statement will be executed concurrently. "
    },
    {
        "id": 471,
        "Question": "Impure is a type of _______",
        "Options": [
            "a) Data type",
            "b) Array",
            "c) Function",
            "d) Component"
        ],
        "Answer": "Answer: b\nExplanation: MAP is generally used with PORT for mapping of the components. PORT MAP statement is used for instantiation of the component after its declaration is being done. "
    },
    {
        "id": 472,
        "Question": "How does keyword inertial affect an assignment statement?",
        "Options": [
            "a) By defining initial value from which delay should be started",
            "b) To prevent overriding of following delay assignment statements",
            "c) To specify wire delay",
            "d) No effect"
        ],
        "Answer": "Answer: c\nExplanation: IMPURE keyword is used to define impure functions. An Impure function is a function which can return some different type given that the actual parameters are same. "
    },
    {
        "id": 473,
        "Question": "Which of the following keyword must be used to specify wire delay?",
        "Options": [
            "a) TRANSPORT",
            "b) INERTIAL",
            "c) WIRE",
            "d) DELTA"
        ],
        "Answer": "Answer: d\nExplanation: Inertial delay is the default delay in VHDL. If the assignment statement is y <= x AFTER 10 ns; then it will be same as y <= INERTIAL x AFTER 10 ns; There is no difference between two given statements. So, adding inertial doesn’t affect the assignment."
    },
    {
        "id": 474,
        "Question": "Which of the following is associated with the INOUT keyword?",
        "Options": [
            "a) Type of a signal",
            "b) Mode of a signal",
            "c) Name of a signal",
            "d) Function of a signal"
        ],
        "Answer": "Answer: a\nExplanation: The Transport delay is analogous to the delay incurred by passing a current through a wire and therefore, it is also called wire delay. To specify the transport delay type in an assignment, the keyword TRANSPORT is used. "
    },
    {
        "id": 475,
        "Question": "What is LINKAGE keyword associated with?",
        "Options": [
            "a) Signals",
            "b) Variables",
            "c) Constants",
            "d) Identifiers"
        ],
        "Answer": "Answer: b\nExplanation: INOUT is a kind of mode of a signal specified in any entity or architecture. The signal can have four modes- IN, OUT, INOUT and BUFFER. So, INOUT is a mode of signal which is used to specify the signal can be used as input as well as output type."
    },
    {
        "id": 476,
        "Question": "LINKAGE keyword is same as _______ mode.",
        "Options": [
            "a) IN",
            "b) OUT",
            "c) INOUT",
            "d) BUFFER"
        ],
        "Answer": "Answer: b\nExplanation: LABEL is also a reserved word in VHDL. However, we can write the name of label in starting of any specific statement. But, LABEL itself is a reserved word used for specify a label name in an attribute statement. "
    },
    {
        "id": 477,
        "Question": "MOD keyword is a ________",
        "Options": [
            "a) Data type",
            "b) Literal",
            "c) Operator",
            "d) Function"
        ],
        "Answer": "Answer: a\nExplanation: LINKAGE keyword is associated with signals in VHDL. It is used to link VHDL ports with non-VHDL ports. This corresponds to the mode of a signal and is used when we need to connect VHDL design to some non-VHDL ports. "
    },
    {
        "id": 478,
        "Question": "The use of NEXT in VHDL is similar to _________ in C.",
        "Options": [
            "a) Break",
            "b) Continue",
            "c) Exit",
            "d) Do"
        ],
        "Answer": "Answer: b\nExplanation: NEXT statement is used to skip the current iteration of the loop and start with the next iteration. The same is being done by the continue statement is traditional programming languages like C, C++, etc."
    },
    {
        "id": 479,
        "Question": "NULL keyword is most of the time useful with _______ part of _______ statement.",
        "Options": [
            "a) IF, IF",
            "b) ELSIF, IF",
            "c) OTHERS, CASE",
            "d) NEXT, LOOP"
        ],
        "Answer": "Answer: c\nExplanation: NULL keyword is useful in situations where we have to explicitly specify that no action is needed. It is generally useful in the CASE statement with OTHERS. When all the cases are specified and we don’t want to perform anything when any other case occurs, then it can be used. "
    },
    {
        "id": 480,
        "Question": "When a port of a component is not connected to any signal, then which of the following keyword is used to indicate the situation?",
        "Options": [
            "a) OPEN",
            "b) CLOSED",
            "c) ON",
            "d) OFF"
        ],
        "Answer": "Answer: a\nExplanation: When any of the port is not connected to any signal in the component instantiation statement, then OPEN keyword is used in the association list of the statement to indicate the open port."
    },
    {
        "id": 481,
        "Question": "4. Which of the line(s) in following code is not legal?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">L1 <span class=\"sy0\">:</span> <span class=\"kw1\">PROCESS</span><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>\nL2 <span class=\"sy0\">:</span> <span class=\"kw1\">SIGNAL</span> x<span class=\"sy0\">;</span>\nL3 <span class=\"sy0\">:</span> <span class=\"kw1\">BEGIN</span>\nL4 <span class=\"sy0\">:</span> c<span class=\"sy0\">&lt;=</span> a <span class=\"kw1\">AFTER</span> <span class=\"nu0\">10</span> <span class=\"re0\">ns</span><span class=\"sy0\">;</span>\nL5<span class=\"sy0\">:</span> <span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) L2 only",
            "b) L4 only",
            "c) No error",
            "d) Both L2 and L4"
        ],
        "Answer": "Answer: d\nExplanation: A SIGNAL keyword is used to declare a signal which can’t be declared inside a process. So, L2  isn’t legal. Similarly, there is no role of delay for a sequential assignment statement. So, AFTER keyword is valid for concurrent assignment statement only."
    },
    {
        "id": 482,
        "Question": "A POSTPONED keyword used with a process will make it wait till _________",
        "Options": [
            "a) A specific process is suspended",
            "b) A signal from the sensitivity list changes",
            "c) All the processes are suspended",
            "d) All the signals in sensitivity list changes"
        ],
        "Answer": "Answer: c\nExplanation: A POSTPONED process is the one which is executed after the end of all processes. When all of the normal processes are suspended then the execution of postponed process starts."
    },
    {
        "id": 483,
        "Question": "Which of the following keyword is used to identify a clocked process?",
        "Options": [
            "a) CLOCKED",
            "b) CLKED",
            "c) SEQ",
            "d) No specific keyword"
        ],
        "Answer": "Answer: d\nExplanation: A clocked process also looks like a simple process. The only difference being a clock signal is used inside a clocked process. Whenever the clock event is identified or clock is simply used in the process then it is called a clocked process."
    },
    {
        "id": 484,
        "Question": "RANGE keyword is always used in _______",
        "Options": [
            "a) Type declaration",
            "b) Array declaration",
            "c) Loop declaration",
            "d) Process declaration"
        ],
        "Answer": "Answer: a\nExplanation: A Type declaration always includes three parts. The name of the Type, the base type and the range for the type. This range is always declared by using keyword RANGE followed by some values."
    },
    {
        "id": 485,
        "Question": "If we don’t use any keyword in the function definition, then which of the following is the type of function?",
        "Options": [
            "a) IMPURE",
            "b) PURE",
            "c) CASE",
            "d) CONCURRENT"
        ],
        "Answer": "Answer: b\nExplanation: There are two kinds of functions which are PURE and IMPURE. A function by default is considered as a pure function. If we want to declare an impure function then we need to write IMPURE, but this is not in the case of Pure function."
    },
    {
        "id": 486,
        "Question": "The REPORT keyword is usually associated with _______",
        "Options": [
            "a) RECORD",
            "b) NULL",
            "c) ASSERT",
            "d) IF"
        ],
        "Answer": "Answer: c\nExplanation: REPORT keyword is used with ASSERT statement. Assert statement checks the consistency of simulation and execution and report in conjunction with assert is used to report the kind of error through a message."
    },
    {
        "id": 487,
        "Question": "On which side of a signal assignment statement, UNAFFECTED keyword can be used?",
        "Options": [
            "a) Left hand side",
            "b) Right hand side",
            "c) On any of the side",
            "d) Can’t be used in an assignment statement"
        ],
        "Answer": "Answer: b\nExplanation: UNAFFECTED is a keyword used when we need not to assign a new value to the signal. This is the case used in a selected or conditional signal assignment statements. So, it can be used as a part of waveform only i.e. on the right hand side only."
    },
    {
        "id": 488,
        "Question": "What is the process of flattening?",
        "Options": [
            "a) Converting an optimized function to unoptimized form",
            "b) Converting a Boolean function to PAL format",
            "c) Converting a Boolean function to PLA format",
            "d) Converting a Boolean function to POS form"
        ],
        "Answer": "Answer: c\nExplanation: Flattening is a process of converting the unoptimized Boolean description into a PLA format. PLA format is a format in which the description is converted into sum of products form i.e. in the form of OR and AND arrays."
    },
    {
        "id": 489,
        "Question": "Flattening creates a flat signal representation of ______ levels.",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Flattening is named so because it creates a flat signal representation of only two levels: an AND level and an OR level. Because it converts the function into PLA form in which we can implement only sum of products."
    },
    {
        "id": 490,
        "Question": "3. How will you flatten the following function?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">a <span class=\"sy0\">=</span> b <span class=\"kw3\">AND</span> c<span class=\"sy0\">;</span>\nb <span class=\"sy0\">=</span> x <span class=\"kw3\">OR</span> <span class=\"br0\">(</span>y <span class=\"kw3\">AND</span> z<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nc <span class=\"sy0\">=</span> q <span class=\"kw3\">OR</span> w<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a = (x AND q) OR (q AND y AND z) OR (w AND x) OR (w AND y AND z);",
            "b) a = (x OR q) AND (q OR y OR z) AND (w OR x) AND (w OR y OR z);",
            "c) a = (x AND b) OR (c AND y AND z) OR (c AND x) OR (b AND y AND z);",
            "d) a = (w AND q) OR (w AND y AND z) OR (q AND x) OR (q AND y AND z);"
        ],
        "Answer": "Answer: a\nExplanation: Flattening means only two levels which are AND and OR arrays. So, there must be no intermediate levels. For example, in the question given above, b and c are two intermediate signals used. So, first b and c must be solved then only a can be solved. Therefore, flattening will give the resultant shown in option a. It is Boolean equivalent of the first without any intermediate node.  "
    },
    {
        "id": 491,
        "Question": "What is the result of flattening of functions?",
        "Options": [
            "a) Increased readability",
            "b) Increased speed",
            "c) Decreased speed",
            "d) Decreased readability"
        ],
        "Answer": "Answer: b\nExplanation: Flattening of functions increase the speed of functions. Since there are no intermediate nodes, there are few logic levels from the input to the output. It is only good for smaller functions in which numbers of terms are not more."
    },
    {
        "id": 492,
        "Question": "In which of the following functions, the flattening is difficult?",
        "Options": [
            "a) Functions containing many XOR",
            "b) Functions which are already minimal",
            "c) Functions which are slow due to intermediate nodes",
            "d) Functions which is always false"
        ],
        "Answer": "Answer: a\nExplanation: In case, when a function has many numbers of terms, especially with XOR functions. Because a n- input EXOR gate needs 2^(n-1) terms. Due to which it becomes much complicated to convert that particular function into flattened PLA form. Due to this reason the speed decreases. "
    },
    {
        "id": 493,
        "Question": "Which of the following is the opposite of flattening of functions?",
        "Options": [
            "a) Structure",
            "b) Adding intermediate nodes",
            "c) Un-flattening",
            "d) Factoring"
        ],
        "Answer": "Answer: d\nExplanation: Factoring is the process of adding intermediate terms or nodes to add structure to a description. So, factoring is exactly opposite of flattening in which the intermediate nodes are removed and made a single PLA function.  "
    },
    {
        "id": 494,
        "Question": "The main advantage of using factoring is ________",
        "Options": [
            "a) Reducing the speed",
            "b) Reducing the number of terms",
            "c) Adding intermediate nodes",
            "d) Reducing flattening"
        ],
        "Answer": "Answer: b\nExplanation: The main disadvantage of flattening is that it confuses the whole function by adding more number of terms in one expression which decreases the speed. To overcome this disadvantage, factoring is used to reduce the number of terms in the expression."
    },
    {
        "id": 495,
        "Question": "What is another name for the factoring of functions?",
        "Options": [
            "a) De-flattening",
            "b) Intermediation",
            "c) Structuring",
            "d) De-structuring"
        ],
        "Answer": "Answer: c\nExplanation: Factoring is also known as structuring. This is the name given to factoring because it structures the expressions and increases their readability. It basically uses the concept of factoring used in mathematics to do so. "
    },
    {
        "id": 496,
        "Question": "9. Which factor can be there in the following two functions?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">x <span class=\"sy0\">=</span> a <span class=\"kw3\">AND</span> b <span class=\"kw3\">OR</span> a <span class=\"kw3\">AND</span> c<span class=\"sy0\">;</span>\ny <span class=\"sy0\">=</span> b <span class=\"kw3\">OR</span> c <span class=\"kw3\">OR</span> d</pre></div></div></div></div></div></div>",
        "Options": [
            "a) a AND b",
            "b) b OR a",
            "c) b AND c",
            "d) b OR c"
        ],
        "Answer": "Answer: d\nExplanation: After factoring, using various Boolean properties, the term b or c can be factored out to a separate intermediate node. In the first expression, if we see it is equivalent to a AND (b or c). Also, b OR c is a part of second expression as well."
    },
    {
        "id": 497,
        "Question": "What would be the ideal case for a design?",
        "Options": [
            "a) Using factoring only",
            "b) Using flattening only",
            "c) Using both flattening and factoring",
            "d) Neither using flattening and nor factoring"
        ],
        "Answer": "Answer: c\nExplanation: Since factoring will add an intermediate node which can reduce speed. On the other hand, the flattening process will increase the speed. But, at the same time flattening can increase the area and decrease the fan-out. This is completely opposite to factoring which reduces the area and increases the fan-out."
    },
    {
        "id": 498,
        "Question": "Which of the following is a basic building block of digital logic?",
        "Options": [
            "a) Wires",
            "b) Nets",
            "c) Gates",
            "d) Flip-flops"
        ],
        "Answer": "Answer: c\nExplanation: Any kind of digital logic can be synthesized by basic logic gates like or gate, and gate, not gate, etc. By using these simple gates, we may synthesize many difficult circuits or functions. So, gates are the building block for any digital logic."
    },
    {
        "id": 499,
        "Question": "Which of the following gate is a universal gate?",
        "Options": [
            "a) AND",
            "b) NAND",
            "c) EXOR",
            "d) EXNOR"
        ],
        "Answer": "Answer: b\nExplanation: NAND and NOR are two universal gates. They are called so because we may implement any kind of basic logic gate by using any of these two universal logic gates. By using NAND or NOR, we may implement AND, OR, NOT and EXOR gates. "
    },
    {
        "id": 500,
        "Question": "By how many modeling styles, the gates in VHDL can be implemented?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three modeling styles in VHDL in which we may implement any kind of logic or logic gate. These modeling styles are behavioral modeling, dataflow modeling and structural modeling."
    },
    {
        "id": 501,
        "Question": "Which of the following is not needed when modeling a simple gate?",
        "Options": [
            "a) Library",
            "b) Entity",
            "c) Architecture",
            "d) Configuration"
        ],
        "Answer": "Answer: d\nExplanation: Modeling a gate is a really easy task. There is no need for adding some CONFIGURATIONS to the design. The gates can be designed with any modeling style without using any kind of configuration statement. Also, describing architecture is essential along with entity. Package is needed to have some basic functions."
    },
    {
        "id": 502,
        "Question": "5. Which kind of modeling is used in the following description?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\nc<span class=\"sy0\">&lt;=</span> a <span class=\"kw3\">OR</span> b<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Behavioral",
            "b) Data flow",
            "c) Structural",
            "d) Behavioral and Dataflow"
        ],
        "Answer": "Answer: b\nExplanation: In such cases, where the direct relation between inputs and outputs are described. A flow of data from the input side to the output side is described by using logic functions. Therefore, it is the case of dataflow modeling. "
    },
    {
        "id": 503,
        "Question": "6. What is the type of modeling used in the code given below?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&lt;=</span> ‘<span class=\"nu0\">1</span>’ <span class=\"kw1\">WHEN</span> a <span class=\"sy0\">=</span>’<span class=\"nu0\">1</span>’ <span class=\"kw3\">AND</span> b <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’<span class=\"sy0\">;</span>\n       ‘<span class=\"nu0\">0</span>’ <span class=\"kw1\">WHEN</span> <span class=\"kw1\">OTHERS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Behavioral",
            "b) Dataflow",
            "c) Structural",
            "d) Combinational"
        ],
        "Answer": "Answer: a\nExplanation: When the architecture describes the behavior of the circuit with respect to different combinations of inputs, then it is called behavioral modeling. The behavioral modeling uses a selected assignment to show the value of output for different inputs. "
    },
    {
        "id": 504,
        "Question": "7. The architecture describes _______ gate implemented by _________ modeling.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&lt;=</span> <span class=\"kw3\">NOT</span><span class=\"br0\">(</span>a <span class=\"kw3\">OR</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Or, behavioral",
            "b) Not, Dataflow",
            "c) Nor, behavioral",
            "d) Nor, Dataflow"
        ],
        "Answer": "Answer: d\nExplanation: Since the logic function is used to show the flow of data from input to the output. Therefore, The architecture describes the dataflow model of a gate. Also, the function is a not function performed on the output of or function. Therefore, the design is for NOR gate. "
    },
    {
        "id": 505,
        "Question": "8. Which logic gate is described by the following model, also specify the type of modeling used?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">WITH</span> ab <span class=\"kw1\">SELECT</span>\ny <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">WHEN</span> “<span class=\"nu0\">11</span>”\n        <span class=\"nu0\">1</span> <span class=\"kw1\">WHEN</span> <span class=\"kw1\">OTHERS</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) NAND, Behavioral",
            "b) NOR, Behavioral",
            "c) NAND, Dataflow",
            "d) NOR, Dataflow"
        ],
        "Answer": "Answer: a\nExplanation: It is clear from the architecture that the description represents a behavioral model. Now, the gate described must be the one which has low output when all of its inputs are low. Otherwise, the output is high. This is the case with NAND gate. So, the given logic is behavioral model of NAND gate."
    },
    {
        "id": 506,
        "Question": "9. Which of the logic gate is described by the following model?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">COMPONENT</span> my_comp <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span> a, b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span>\n             y     <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">std_logic</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\nL1 <span class=\"sy0\">:</span> my_comp PORTMAP<span class=\"br0\">(</span> x, y, z<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) OR",
            "b) NOT",
            "c) AND",
            "d) Can’t be determined"
        ],
        "Answer": "Answer: d\nExplanation: The description is the structural model for any gate. But, it is not possible to determine which kind of gate it is. The given information is not sufficient to determine the type of the gain. It can be concluded that structural model alone is not adequate to describe any component completely."
    },
    {
        "id": 507,
        "Question": "10. The design below can’t be of ________ gate.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_arch <span class=\"kw1\">OF</span> my_design <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">COMPONENT</span> or_comp <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span> a, b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span>\n             y     <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">std_logic</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">COMPONENT</span><span class=\"sy0\">;</span>\nL1 <span class=\"sy0\">:</span> or_comp PORTMAP<span class=\"br0\">(</span> x, y, z<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_arch<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) AND",
            "b) OR",
            "c) NOT",
            "d) NAND"
        ],
        "Answer": "Answer: c\nExplanation: This is up to the user, what name he/she wants to give to the component. For example, a user can name an AND gate as or_gate. The name can’t describe what logic is going to be performed by the component. Here, all the gates except NOT have two inputs. Also, the component described has two ports. Therefore, the component can’t be a NOT gate."
    },
    {
        "id": 508,
        "Question": "What is the minimum number of NAND gates required to implement an EXOR gate?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: We can implement an EXOR gate with a minimum of 4 NAND gates. However, when we follow the conventional way to convert an EXOR logic into the NADN logic, then the number of logic gates required is 5, but 1 of them is redundant and therefore, we can implement EXOR get by using 4 NAND gates."
    },
    {
        "id": 509,
        "Question": "Which of the following logic describes the EXOR gate?",
        "Options": [
            "a) y <= ((not a) OR (not b)) AND ((not a) OR (not b));",
            "b) y <= ((not a) OR b) AND (a OR (not b))",
            "c) y <= ((not a) AND (not b)) OR ((not a) AND (not b));",
            "d) y <= ((not a) AND b) OR (a AND (not b));"
        ],
        "Answer": "Answer: d\nExplanation: EXOR function or Exclusive OR is a function in which two inputs of the gate can’t be at high level exclusively, in that case the output will be low. It is described by Y = A’B + AB’. This function is described in the VHDL terms by using option d. Therefore, option d represents EXOR gate. "
    },
    {
        "id": 510,
        "Question": "3. What logic circuit is described by the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> gate <span class=\"kw1\">OF</span> my_gate <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">WITH</span> ab <span class=\"kw1\">SELECT</span>\ny<span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">WHEN</span> “01” <span class=\"kw3\">OR</span> “<span class=\"nu0\">10</span>”<span class=\"sy0\">;</span>\n        <span class=\"nu0\">1</span> <span class=\"kw1\">WHEN</span> <span class=\"kw1\">OTHERS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> gate<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) NAND",
            "b) NOR",
            "c) EXOR",
            "d) EXNOR"
        ],
        "Answer": "Answer: d\nExplanation: Since the output is high when all the two inputs are either high or low. Otherwise, the output is low. This is the case opposite of EXOR gate. So, this must be EXNOR gate."
    },
    {
        "id": 511,
        "Question": "Sometimes gates modeled with ________ modeling may behave differently.",
        "Options": [
            "a) Dataflow",
            "b) Behavioral",
            "c) Structural",
            "d) Structural and Behavioral"
        ],
        "Answer": "Answer: a\nExplanation: Sometimes, dataflow modeling doesn’t behave as we want it to. This different behavior can be with any of the gate. For example, OR gate may behave as AND gate for instance. This occurs at the time of synthesis due to switches in the switch bank."
    },
    {
        "id": 512,
        "Question": "The odd behavior of gates in dataflow modeling may be the result of ________",
        "Options": [
            "a) Sequential statements",
            "b) Wrong logic definitions",
            "c) Concurrency",
            "d) Inappropriate assignments"
        ],
        "Answer": "Answer: c\nExplanation: The VHDL code is concurrent code and it has its own advantages and disadvantages. Concurrency of VHDL results in faster execution. In some PAL or PLA device, it may be like executing AND after OR execution which may result in different results."
    },
    {
        "id": 513,
        "Question": "In CPLD, there are many input switches arranged in a switch bank, if an AND gate is behaving oddly but could be the reason?",
        "Options": [
            "a) Incorrect interconnections",
            "b) Concurrent execution of statements",
            "c) Mismatch of ports name and switches",
            "d) Wrong libraries included"
        ],
        "Answer": "Answer: b\nExplanation: A CPLD is a device which has many input outputs and logic gates and it also includes interconnection between them. The inputs are arranged in the form of switch banks, the gate may perform different due to concurrency of the statement. Due to concurrent statements, the state of a switch can vary and which can affect the output."
    },
    {
        "id": 514,
        "Question": "For gates, which of the following modeling style will corresponds to shortest code?",
        "Options": [
            "a) Behavioral",
            "b) Data flow",
            "c) Structural",
            "d) Both data flow and behavioral"
        ],
        "Answer": "Answer: b\nExplanation: Since in case of dataflow modeling we just need to define the relation between inputs and outputs using some logical function. So, gates can be modeled be using dataflow style in just one line. Whereas Behavioral needs selected assignment and structural used component declaration and instantiation."
    },
    {
        "id": 515,
        "Question": "Which of the following sequential circuit doesn’t need a clock signal?",
        "Options": [
            "a) Flip flop",
            "b) Asynchronous counter",
            "c) Shift register",
            "d) Latch"
        ],
        "Answer": "Answer: a\nExplanation: It is true that a sequential logic can’t be executed by concurrent statements only. It requires the sequential statements because they make use of a clock signal. "
    },
    {
        "id": 516,
        "Question": "The process used for implementation of sequential logic in VHDL is called ______ process.",
        "Options": [
            "a) Sequential process",
            "b) Combinational process",
            "c) Clocked process",
            "d) Unclocked process"
        ],
        "Answer": "Answer: d\nExplanation: Latch has an enable input, but no clock signal. All other circuits including asynchronous counter needs a clock signal. It is called asynchronous because every flip flop doesn’t have same clock signal. "
    },
    {
        "id": 517,
        "Question": "Why do we need to define clock signal in the sensitivity list of the process?",
        "Options": [
            "a) To trigger the statement as soon as there is some event on clock",
            "b) To trigger the clock signal as soon as there is some event on input",
            "c) To trigger the clock signal as soon as there is some event on output",
            "d) To trigger the statement as soon as there is some event on input"
        ],
        "Answer": "Answer: b\nExplanation: Since there is only one input to the flip flop, therefore, it can be either D or T flip flop. But, the output becomes equal to the input signal as soon as there is a positive edge of the clock therefore, it is a delay flip flop."
    },
    {
        "id": 518,
        "Question": "A user has designed JK flip flop by using the VHDL code. The output is continuously switching between 0 and 1. This condition is known as _______",
        "Options": [
            "a) Switching condition",
            "b) Master slave condition",
            "c) Race around condition",
            "d) Edge triggered condition"
        ],
        "Answer": "Answer: c\nExplanation: A process with a clock signal in its sensitivity list is called a clocked process. In case of sequential logic circuit, one needs a clock signal in the sensitivity list."
    },
    {
        "id": 519,
        "Question": "Which of the following method is not used to remove the race around condition in a flip flop?",
        "Options": [
            "a) Using level triggered flip flop",
            "b) Using master slave flip flop",
            "c) Using edge triggered flip flop",
            "d) All of the above are used to remove the race around"
        ],
        "Answer": "Answer: a\nExplanation: To monitor the events on clock signal, whether it is positive triggered circuit or negative triggered circuit, we need to define the clock as a signal in the sensitivity list. When it is in the sensitivity list, then every single positive or negative edge of the signal will trigger the statements inside the process."
    },
    {
        "id": 520,
        "Question": "Which of the following attribute is generally used in implementation of sequential circuits?",
        "Options": [
            "a) ‘STABLE",
            "b) ‘LENGTH",
            "c) ‘LAST_EVENT",
            "d) ‘EVENT"
        ],
        "Answer": "Answer: c\nExplanation: This continuous switching of output between 0 and 1 may be the result of toggle state of the flip flop. This occurs when both the inputs J and K are high and the output toggles its previous state. This condition is called the race around the condition. "
    },
    {
        "id": 521,
        "Question": "Which of the following line is correct for detecting positive edge of a clock?",
        "Options": [
            "a) IF (clk’EVENT AND clk = ‘0’)",
            "b) IF (clk’EVENT AND clk = ‘1’)",
            "c) IF (clk’EVENT OR clk = ‘0’)",
            "d) IF (clk’EVENT OR clk = ‘1’)"
        ],
        "Answer": "Answer: a\nExplanation: The race around condition in JK flip flop can be removed by two methods which are using edge triggered flip flop and by using master slave flip flop. However, using level triggered flip flop cause the race around condition. "
    },
    {
        "id": 522,
        "Question": "How many types of resets are there in hardware design?",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) Four"
        ],
        "Answer": "Answer: a\nExplanation: Hardware is not capable of doing the initialization on its own, so reset is used to initialize the hardware in the beginning. Reset clears any pending event or errors in the system and brings it back to its initial state."
    },
    {
        "id": 523,
        "Question": "In synchronous reset, reset is sampled with respect to _______",
        "Options": [
            "a) Enable signal",
            "b) Data input signal",
            "c) Clock signal",
            "d) Output signal"
        ],
        "Answer": "Answer: b\nExplanation: There are two types of resets in hardware designs: Asynchronous reset and synchronous reset. Asynchronous reset works independently of the clock while synchronous reset works with respect to the clock. "
    },
    {
        "id": 524,
        "Question": "Which of the following is an advantage of a synchronous reset?",
        "Options": [
            "a) It is slow",
            "b) It requires a clock signal to reset the circuit",
            "c) It filters the reset signal",
            "d) It needs a stretched reset"
        ],
        "Answer": "Answer: c\nExplanation: In synchronous reset, the reset signal is sampled with respect to the clock signal. After the reset signal is enabled, it won’t change until the next active clock edge. The output will change only with the positive edge of the clock."
    },
    {
        "id": 525,
        "Question": "In asynchronous reset, reset is sampled independently of the _______",
        "Options": [
            "a) Enable signal",
            "b) Data input signal",
            "c) Clock signal",
            "d) Output signal"
        ],
        "Answer": "Answer: c\nExplanation: Synchronous reset filters the reset signal. It prevents the circuit from glitches and results in smooth functioning. Glitches don’t happen in synchronous reset because it is in synchronization with the clock signal. "
    },
    {
        "id": 526,
        "Question": "Which of the following is NOT an advantage of asynchronous reset?",
        "Options": [
            "a) It is fast",
            "b) It doesn’t require a clock signal to reset the circuit",
            "c) Reset gets the highest priority",
            "d) It may cause metastability"
        ],
        "Answer": "Answer: c\nExplanation: In asynchronous reset, reset is sampled independently of the clock signal. It means, after the reset signal is enabled, it will start effective immediately and it will not wait or check for the clock edges. "
    },
    {
        "id": 527,
        "Question": "Asynchronous circuit is also called ________ circuit.",
        "Options": [
            "a) Combinational",
            "b) Self-timed",
            "c) Clock circuit",
            "d) Delayed"
        ],
        "Answer": "Answer: b\nExplanation: Synchronous reset is slow as it requires clock signal due to which it experience clock cycle related latency. Asynchronous rest is a fast reset since it can be reset without a clock signal and hence high speeds can be achieved. "
    },
    {
        "id": 528,
        "Question": "Designation used by a flip-flop for the reset is ________",
        "Options": [
            "a) PRE",
            "b) CLR",
            "c) D",
            "d) Q"
        ],
        "Answer": "Answer: d\nExplanation: Asynchronous reset doesn’t require an active clock signal to get flip-flops to a known state, it also has a lower latency as compared to synchronous reset due to which flip-flops behave in a non-predictive manner. The reset signal must be synchronized with the clock, when it is not, it causes metastability issues. "
    },
    {
        "id": 529,
        "Question": "What type of inputs is preset and clear?",
        "Options": [
            "a) Data input",
            "b) Output",
            "c) Clock input",
            "d) Control input"
        ],
        "Answer": "Answer: d\nExplanation: Preset (PRE) and clear (CLR) are asynchronous control inputs, which means output responds to these inputs immediately because they have control over the output that is because they are not synchronized by an external clock. "
    },
    {
        "id": 530,
        "Question": "Clear (CLR) or preset (PRE) with a bar above them shows that they have ________",
        "Options": [
            "a) Active high input",
            "b) Active low input",
            "c) Clocked input",
            "d) No input"
        ],
        "Answer": "Answer: b\nExplanation: The inversion bar over the designations of preset and clear shows that they have active LOW asynchronous inputs. If the preset input is active low, then the output of the flip-flop is set to one. If the clear input is active low, then the output of the flip-flop is reset to 0."
    },
    {
        "id": 531,
        "Question": "The output of the flip-flop _______ when both the input, preset and clear are active low at the same time.",
        "Options": [
            "a) Is set to 1",
            "b) Is set to 0",
            "c) Becomes X (Don’t care)",
            "d) Is controlled by clock"
        ],
        "Answer": "Answer: a\nExplanation: Asynchronous inputs change the state of the flip-flop regardless of the clock input, they override inputs which can force a particular state onto the flip-flop that’s why they are also called override inputs. "
    },
    {
        "id": 532,
        "Question": "What is the state of PRESET input?",
        "Options": [
            "a) Reset",
            "b) Set",
            "c) Invalid",
            "d) Don’t care"
        ],
        "Answer": "Answer: c\nExplanation: If preset is active low then Q=1, Q’=0. If clear is active low Q=0, Q’=1. It is not possible to preset and clear a flip-flop at the same time because Q can’t be 0 and 1 at the same instant of time, hence the output of the flip-flop will become X, which is don’t care."
    },
    {
        "id": 533,
        "Question": "What is the state of CLEAR input?",
        "Options": [
            "a) Reset",
            "b) Set",
            "c) Invalid",
            "d) Don’t care"
        ],
        "Answer": "Answer: b\nExplanation: After the preset input is activated, the flip-flop will be SET i.e. Q=1 and Q’=0 without considering any synchronous input or clock input.  So the state of the preset input is set. "
    },
    {
        "id": 534,
        "Question": "What happens if both the inputs PRE and CLR are activated?",
        "Options": [
            "a) Flip-flop is reset",
            "b) Flip-flop is set",
            "c) Invalid State",
            "d) No output"
        ],
        "Answer": "Answer: a\nExplanation: After the clear input is activated, the flip-flop will be RESET i.e. Q=0 and Q’=1 without considering any synchronous input or clock input. The flip-flop will go back to its initial state. "
    },
    {
        "id": 535,
        "Question": "Which of the following input on a flip-flop has control over the outputs?",
        "Options": [
            "a) Data input",
            "b) Clock",
            "c) Enable",
            "d) Preset"
        ],
        "Answer": "Answer: c\nExplanation: If preset input and clear input both are activated in the flip-flop then, Q and Q’ go to the same state simultaneously which is not possible. Hence, then flip-flop gives an invalid state as the output."
    },
    {
        "id": 536,
        "Question": "Which of the following represents the correct order?",
        "Options": [
            "a) Given function, optimized function, implementation",
            "b) Optimized function, implementation, given function",
            "c) Implementation, optimized function, given function",
            "d) Given function, implementation, optimized function"
        ],
        "Answer": "Answer: a\nExplanation: First of all we are given with a logic function that is first optimized before implementing it. The optimization is first done by using a suitable method and then it is implemented in the VHDL."
    },
    {
        "id": 537,
        "Question": "Which of the following will reduce the cost of implementation?",
        "Options": [
            "a) Implementing with only one modeling style",
            "b) Implementing with dataflow modeling",
            "c) Optimization",
            "d) Generating Net list first"
        ],
        "Answer": "Answer: c\nExplanation: Optimization is the technique to get the minimal form for a given logic function. By implementing this minimal function, the cost of implementation is reduced significantly. "
    },
    {
        "id": 538,
        "Question": "Which of the following is not a method of optimization of logic function?",
        "Options": [
            "a) Tabular method",
            "b) By using Boolean laws",
            "c) K-map",
            "d) Rectangular method"
        ],
        "Answer": "Answer: d\nExplanation: There are various methods available for optimization of logic functions like K-map, Boolean reduction, tabular method and cubical method. There is no such method called rectangular method to optimize the logic function. "
    },
    {
        "id": 539,
        "Question": "4. Which of the following k-map represents the following given function?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">y <span class=\"sy0\">=</span> AB <span class=\"sy0\">+</span> AB’C <span class=\"sy0\">+</span> A’BC</pre></div></div></div></div></div></div>",
        "Options": [
            "a) <img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4a.png\" alt=\"vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4a\" width=\"305\" height=\"145\" class=\" size-full wp-image-201534\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4a.png 305w, https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4a-300x143.png 300w\" sizes=\"(max-width: 305px) 100vw, 305px\" />",
            "b) <img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4b.png\" alt=\"vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4b\" width=\"306\" height=\"155\" class=\" size-full wp-image-201536\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4b.png 306w, https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4b-300x152.png 300w\" sizes=\"(max-width: 306px) 100vw, 306px\" />",
            "c)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4c.png\" alt=\"vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4c\" width=\"300\" height=\"140\" class=\" size-full wp-image-201537\" />",
            "d) <img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4d.png\" alt=\"vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4d\" width=\"306\" height=\"139\" class=\" size-full wp-image-201538\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4d.png 306w, https://www.sanfoundry.com/wp-content/uploads/2018/01/vhdl-questions-answers-implementing-logic-functions-vhdl-1-q4d-300x136.png 300w\" sizes=\"(max-width: 306px) 100vw, 306px\" />"
        ],
        "Answer": "Answer: d\nExplanation: In the logic function there are three terms, AB’C representing 101 and A’BC representing 011. Third term is AB which will corresponds to two 1’s which are ABC and ABC’ corresponding to 111 and 110."
    },
    {
        "id": 540,
        "Question": "Which of the following is equivalent to the Boolean expression A + AB?",
        "Options": [
            "a) A",
            "b) B",
            "c) AB",
            "d) A + B"
        ],
        "Answer": "Answer: a\nExplanation: This expression can bide minimized by using simple Boolean laws. In the given expression, let us take A common. This becomes A (1 + B), According to sum laws of Boolean expressions, 1 + B must be equal to 1. So, it becomes A.1 which is equivalent to A."
    },
    {
        "id": 541,
        "Question": "Which of the following assignment statement is not generally used in the implementation of Boolean functions?",
        "Options": [
            "a) Concurrent assignment",
            "b) Sequential assignment",
            "c) Conditional assignment",
            "d) Selected assignment"
        ],
        "Answer": "Answer: b\nExplanation: Generally, these kind of optimized Boolean function doesn’t need any sequential processing and therefore, no sequential assignment is required. All the functions can be implemented with concurrent code only."
    },
    {
        "id": 542,
        "Question": "7. Which of the following are prime implicants of the following Boolean function?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">Y<span class=\"sy0\">=</span> AB <span class=\"sy0\">+</span> BC<span class=\"re2\">'D</span>’ <span class=\"sy0\">+</span> BCD'</pre></div></div></div></div></div></div>",
        "Options": [
            "a) A, B, C, D",
            "b) AB, BC’D’, BCD’",
            "c) AB, BD’",
            "d) AB, CD"
        ],
        "Answer": "Answer: b\nExplanation: Prime implicants of a function are the terms in the given function without any minimization. In this case the prime implicants are AB, BC’D’, BCD’. "
    },
    {
        "id": 543,
        "Question": "How many logical operations are required to implement a Boolean function XY + X?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: The given function XY + X is first optimized to reduce the cost of implementation. So, the optimized function will be equal to X. As XY + X = X (Y + 1) = X. To implement this no logical operation is needed. It just needs an assignment statement and no operation."
    },
    {
        "id": 544,
        "Question": "END my_func;",
        "Options": [
            "a) B’C’ + BC",
            "b) AB’ + A’B",
            "c) AB’C’",
            "d) ABC + AB’C’"
        ],
        "Answer": "Answer: d\nExplanation: The given function is a AND (b XNOR c). So, It is Y = A.(B EXNOR C) = AB’C’ + ABC. So, option ABC + AB’C’ is the correct function which is implemented by the code. "
    },
    {
        "id": 545,
        "Question": "What do you use to perform basic logic functions in VHDL while creating concurrent code?",
        "Options": [
            "a) Operators",
            "b) If statement",
            "c) PROCESS",
            "d) GENERATE"
        ],
        "Answer": "Answer: a\nExplanation: Operators are the most basic ways of creating concurrent code. These operators may be logical, arithmetic, shift operators or so on. Generally, logical operators are used in logic functions. "
    },
    {
        "id": 546,
        "Question": "2. In the implementation of following function by using NAND keyword only, can be done in _____ operations.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">X <span class=\"sy0\">=</span> A<span class=\"re2\">'B</span> <span class=\"sy0\">+</span> AB'</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: The given logic function resembles the export operation. An EXOR gate can be implemented by using 4 NAND operations. Therefore, the NAND keyword will be used 4 times in implementation of this function."
    },
    {
        "id": 547,
        "Question": "The maximum number of parameters in port map() function while implementing logic function using gates only, is equal to ____________",
        "Options": [
            "a) Number of inputs",
            "b) Number of outputs",
            "c) Number of inputs + number of outputs",
            "d) Infinite"
        ],
        "Answer": "Answer: c\nExplanation: A port map function is used in structural modeling in which we use port map fumction to map a given structure. The parameters of port map identify the inputs and outputs of the circuit respectively starting from the left. Therefore, a port map can have maximum parameters as the sum of number of inputs and outputs of the port. "
    },
    {
        "id": 548,
        "Question": "Which of the following is not representing a nibble?",
        "Options": [
            "a) x<= “0101”",
            "b) x<= STD_LOGIC_VECTOR (0 TO 4)",
            "c) x<= STD_LOGIC_VECTOR(3 DOWNTO 0)",
            "d) x<= BIT_VECTOR (1 TO 4)"
        ],
        "Answer": "Answer: b\nExplanation: A nibble is a group of 4 bits. In case of option x<= “0101”, it is clear that x is a group of 4 bits. Similarly in x<= STD_LOGIC_VECTOR(3 DOWNTO 0) and x<= BIT_VECTOR (1 TO 4), we have four bits. But, in option x<= STD_LOGIC_VECTOR (0 TO 4), we have 5 bits from 0 to 4. Therefore, option x<= STD_LOGIC_VECTOR (0 TO 4) is not a nibble. "
    },
    {
        "id": 549,
        "Question": "A “Multiplication by 2” logic is to be designed by using the VHDL code, which of the following operator can be used to implement the same?",
        "Options": [
            "a) SRL",
            "b) SRA",
            "c) SLA",
            "d) SLL"
        ],
        "Answer": "Answer: a\nExplanation: It is completely legal to use arithmetic operator in implementation of a logic or Boolean function. We can obviously use arithmetic operators like +, -, * etc. in the logic functions, if required. It will not contain any error. "
    },
    {
        "id": 550,
        "Question": "7. What kind of logic is represented by the given code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_func <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&lt;=</span> x <span class=\"kw3\">SRL</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_func<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Divide by 2",
            "b) Divide by 4",
            "c) Multiply by 2",
            "d) Multiply by 4"
        ],
        "Answer": "Answer: d\nExplanation: In binary number system, when we multiply a number by 2, it shifts one position to the left. For example, 4(0100), when multiplied by 2, it becomes 8(1000). So, it is clear that one can easily make multiplication by 2 logic by using a single operator called SLL or Shift Left Logical."
    },
    {
        "id": 551,
        "Question": "8. What information is not provided by the given logic’s output?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_func <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\ny <span class=\"sy0\">&lt;=</span> x <span class=\"kw3\">SRL</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_func<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Result of the operation",
            "b) Operands used",
            "c) Remainder of the operation",
            "d) Everything about the operation will be determined"
        ],
        "Answer": "Answer: b\nExplanation: Since the code is using a shift right operator, therefore, it must be something to be divided. So, x is divided here and the result is stored in y. Here, the x is shifted to 2 positions right, which means that it is a divide by 4 (= 22) logic. "
    },
    {
        "id": 552,
        "Question": "Which of the following is a not a characteristics of combinational circuits?",
        "Options": [
            "a) The output of combinational circuit depends on present input",
            "b) There is no use of clock signal in combinational circuits",
            "c) The output of combinational circuit depends on previous output",
            "d) There is no storage element in combinational circuit"
        ],
        "Answer": "Answer: c\nExplanation: A combinational circuit is the one which has no storage of previous output. The next state or output of the combinational circuit depends only on its present input and hence no clock signal is required. "
    },
    {
        "id": 553,
        "Question": "Which of the following is not a combinational circuit?",
        "Options": [
            "a) Adder",
            "b) Code convertor",
            "c) Multiplexer",
            "d) Counter"
        ],
        "Answer": "Answer: b\nExplanation: There is no restriction on usage of any kind of statements while realizing a combinational circuit. Combinational circuit may be implemented by using statements like IF, CASE etc. "
    },
    {
        "id": 554,
        "Question": "4. The code given below is a VHDL implementation of  _________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ARCHITECTURE</span> my_circuit <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">WITH</span> ab <span class=\"kw1\">SELECT</span>\ny <span class=\"sy0\">&lt;=</span> x0 <span class=\"kw1\">WHEN</span> “00”<span class=\"sy0\">;</span>\n         x1 <span class=\"kw1\">WHEN</span> “01”<span class=\"sy0\">;</span>\n         x2 <span class=\"kw1\">WHEN</span> “<span class=\"nu0\">10</span>”<span class=\"sy0\">;</span>\n         x3 <span class=\"kw1\">WHEN</span> “<span class=\"nu0\">11</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_circuit<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4 to 1 MUX",
            "b) 1 to 4 DEMUX",
            "c) 8 to 1 MUX",
            "d) 1 to 8 DEMUX"
        ],
        "Answer": "Answer: d\nExplanation: Since counter makes use of either clock signal or previous output to determine next state. Therefore, counter is a sequential circuit and all the others like multiplexer, adder and code convertors are the examples of combinational circuit."
    },
    {
        "id": 555,
        "Question": "5. Which of the following line of the code contains an error?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\">L1<span class=\"sy0\">:</span> <span class=\"kw1\">ARCHITECTURE</span> mux1 <span class=\"kw1\">OF</span> mux <span class=\"kw1\">IS</span>\nL2<span class=\"sy0\">:</span> <span class=\"kw1\">BEGIN</span>\nL3<span class=\"sy0\">:</span> y<span class=\"sy0\">&lt;=</span> x0 <span class=\"kw1\">WHEN</span> x <span class=\"sy0\">=</span> ‘<span class=\"nu0\">0</span>’ <span class=\"kw1\">ELSE</span>\nL4<span class=\"sy0\">:</span>   <span class=\"sy0\">&lt;=</span> x1 <span class=\"kw1\">WHEN</span> x <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"sy0\">;</span>\nL5<span class=\"sy0\">:</span> <span class=\"kw1\">END</span> mux1<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) L2",
            "b) L3",
            "c) L4",
            "d) No error"
        ],
        "Answer": "Answer: a\nExplanation: In the given architecture, the output is single (y), which is selected with the help of a and b. So, a and b are select lines and y is the output which is selected from 4 inputs. Therefore, it is the multiplexer circuit with 4 inputs and 1 output. "
    },
    {
        "id": 556,
        "Question": "In a given combinational circuit, the concurrent statements are used with selected assignments using WHEN and ELSE keyword. What is the other alternative to implement the same?",
        "Options": [
            "a) WITH-SELECT",
            "b) WITH-SELECT-WHEN",
            "c) IF-ELSE",
            "d) CASE"
        ],
        "Answer": "Answer: d\nExplanation: There is no error in the given piece of the code. However, there was no need to use WHEN in the line L4 because there is no other case to be selected from many inputs. Last case can be directly expressed without any use of WHEN."
    },
    {
        "id": 557,
        "Question": "For using a process to implement a combinational circuit, which signals should be in the sensitivity list?",
        "Options": [
            "a) Inputs of the circuit",
            "b) Outputs of the circuit",
            "c) Both of the Inputs and Outputs",
            "d) No signal should be in the sensitivity list"
        ],
        "Answer": "Answer: d\nExplanation: In a 3 by 8 decoder, there must be 3 inputs and 8 outputs. For 3 inputs the dimension of vector must be 2 DOWNTO 0 and for output the dimensions should be 7 DOWNTO 0. Therefore, option d is the correct port entity of the 3 by 8 decoder."
    },
    {
        "id": 558,
        "Question": "A 4 to 16 decoder can be used as a code converter. What will be the inputs and outputs of the converter respectively?",
        "Options": [
            "a) Binary, Octal",
            "b) Octal, Binary",
            "c) Hexadecimal, Binary",
            "d) Binary, Hexadecimal"
        ],
        "Answer": "Answer: a\nExplanation: In a process used for the implementation of the combinational circuit, all the input signals used which are to be read, should appear in its sensitivity list. In a combinational circuit, there can be many inputs and those inputs should appear in the sensitivity list of the process."
    },
    {
        "id": 559,
        "Question": "10. Following entity may represent a ________ circuit.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> my_circuit <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>a, b <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> STD_LOGIV_VECTOR<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n              x    <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n              y    <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_circuit<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Half adder",
            "b) Full adder",
            "c) Multiplexer",
            "d) Parallel adder"
        ],
        "Answer": "Answer: b\nExplanation: Because only concurrent statements can be used, therefore, WITH-SELECT is the correct alternative for the method used by the user. But, WITH-SELECT also requires WHEN keyword to implement the selected assignment. "
    },
    {
        "id": 560,
        "Question": "The process statement used in combinational circuits is called ______ process.",
        "Options": [
            "a) Combinational",
            "b) Clocked",
            "c) Unclocked",
            "d) Sequential"
        ],
        "Answer": "Answer: a\nExplanation: The process, in which no clock signal is used, is called a combinational process. In a combinational process, the sensitivity list doesn’t include any clock signal for synchronization. In the case of sequential circuits the clock signal is used."
    },
    {
        "id": 561,
        "Question": "Why we need to include all the input signals in the sensitivity list of the process?",
        "Options": [
            "a) To monitor the output continuously",
            "b) To monitor the input continuously",
            "c) To make the circuit synthesizable by EDA tools",
            "d) No special purpose"
        ],
        "Answer": "Answer: b\nExplanation: If the input signals are not in the sensitivity list of the process, then one can’t monitor the change in input. Any change in input signal will not change the output simultaneously by running the process again. "
    },
    {
        "id": 562,
        "Question": "If only two bit vectors are allowed to use in the VHDL code, then how many number of MUX will be required to implement 4 to 1 MUX?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: Since we have inputs with two bits only, so we can use 2 to 1 MUX to implement the required design. So, to design 4 to 1 MUX, we need 3 2 to 1 MUX and hence we can get the desired circuit by using 3 multiplexers. "
    },
    {
        "id": 563,
        "Question": "A package is designed called mux4to1_package, in which a component called mux4to1 is defined, which is a 4 to 1 multiplexer. Now a user wants to design a 16 to 1 MUX by using the same component only, how many times he needs to use the PORT MAP statement?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: The problem statement says that a 16:1 MUX is to be designed by using 4:1 multiplexers only. This can be done by using 5 numbers of 4 to 1 multiplexers. Here, 4 MUXs are required to collect all the inputs and one is used to select one from the 4 multiplexers outputs."
    },
    {
        "id": 564,
        "Question": "In designing a 2 to 1 demultiplexer with input d, output y and select line s, which of the following is a correct process statement?",
        "Options": [
            "a) PROCESS(d)",
            "b) PROCESS(d(0), d(1), s)",
            "c) PROCESS(d(0), d(1))",
            "d) PROCESS(d, s, y)"
        ],
        "Answer": "Answer: a\nExplanation: In a combinational process, the sensitivity list must include all the inputs. For a 2 to 1 MUX, there must be 2 inputs which are d(0) and d(1); also the process should be sensitive to the select line, so s also should be in the sensitivity list. "
    },
    {
        "id": 565,
        "Question": "6. The given code represents a convertor. Which kind of convertor it is?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> convert <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span><span class=\"br0\">(</span>b<span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n           x <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> convert<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> convertor <span class=\"kw1\">OF</span> covert <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">PROCESS</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\n<span class=\"kw1\">CASE</span> b <span class=\"kw1\">IS</span>\n<span class=\"kw1\">WHEN</span> “0000” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1111110</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0001” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “0110000”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0010” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1101101</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0011” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1111001</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0100” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “0110011”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0101” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1011011</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0110” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1011111</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “0111” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1110000</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “<span class=\"nu0\">1000</span>” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1111111</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> “<span class=\"nu0\">1001</span>” <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “<span class=\"nu0\">1110011</span>”<span class=\"sy0\">;</span>\n<span class=\"kw1\">WHEN</span> <span class=\"kw1\">OTHERS</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;=</span> “0000000”<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">CASE</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> convertor<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Gray to BCD",
            "b) 7 segment to BCD",
            "c) BCD to gray",
            "d) BCD to 7 segment display"
        ],
        "Answer": "Answer: d\nExplanation: Clearly, it is a BCD to 7 segment display convertor. This circuit takes a 4 bit BCD input and convert it into 7 bits output which may be used for LED output and hence the 7 segment display can be operated. "
    },
    {
        "id": 566,
        "Question": "7. What is the function of the below code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>din <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n             Count <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_logic<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> behavior <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\nCount <span class=\"sy0\">&lt;=</span> “0000”\n<span class=\"kw1\">PROCESS</span><span class=\"br0\">(</span>din<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\nL1<span class=\"sy0\">:</span> <span class=\"kw1\">FOR</span> i <span class=\"kw1\">IN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span> <span class=\"kw1\">LOOP</span>\n<span class=\"kw1\">IF</span><span class=\"br0\">(</span>din<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\nCount <span class=\"sy0\">=</span> count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span>\n<span class=\"kw1\">NEXT</span> L1<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">LOOP</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> behavior<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) To count number of ones in the given data",
            "b) To count number of zeroes in the given data",
            "c) To reverse the order of given data",
            "d) To perform binary multiplication of two data inputs"
        ],
        "Answer": "Answer: a\nExplanation: Because a loop is used and din is monitored for every bit. If any bit in the din is one then the counter is incremented by one. Therefore, the code is counting the number of ones in a given vector of bits."
    },
    {
        "id": 567,
        "Question": "8. What will be the value of count output, if the data din is 11001111?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">ENTITY</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span>din <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n             Count <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> my_logic<span class=\"sy0\">;</span>\n<span class=\"kw1\">ARCHITECTURE</span> behavior <span class=\"kw1\">OF</span> my_logic <span class=\"kw1\">IS</span>\n<span class=\"kw1\">BEGIN</span>\nCount <span class=\"sy0\">&lt;=</span> “0000”\n<span class=\"kw1\">PROCESS</span><span class=\"br0\">(</span>din<span class=\"br0\">)</span>\n<span class=\"kw1\">BEGIN</span>\nL1<span class=\"sy0\">:</span> <span class=\"kw1\">FOR</span> i <span class=\"kw1\">IN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span> <span class=\"kw1\">LOOP</span>\n<span class=\"kw1\">IF</span><span class=\"br0\">(</span>din<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ‘<span class=\"nu0\">1</span>’<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\nCount <span class=\"sy0\">=</span> count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">ELSE</span>\n<span class=\"kw1\">NEXT</span> L1<span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">LOOP</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> <span class=\"kw1\">PROCESS</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">END</span> behavior<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 0110",
            "c) 2",
            "d) 0010"
        ],
        "Answer": "Answer: b\nExplanation: The count is a signal of bit vector type and hence the output will be a stream of bits. In this case there are 6 ones in the input, which corresponds to 0110 in the binary number system. "
    },
    {
        "id": 568,
        "Question": "Shift registers comprise of which flip-flops?",
        "Options": [
            "a) D flip-flops",
            "b) SR flip-flops",
            "c) JK flip-flops",
            "d) T flip-flops"
        ],
        "Answer": "Answer: a\nExplanation: Shift registers comprise of a few single bit D flip-flops, one flip-flop for one data bit, either logic “1” or a “0”. They are connected together to form a sequence so that the output from the first flip-flop becomes the input of the second flip-flop and so on."
    },
    {
        "id": 569,
        "Question": "In serial input serial output register, the data of ______ is accessed by the circuit.",
        "Options": [
            "a) Last flip-flop",
            "b) First flip-flop",
            "c) All flip-flops",
            "d) No flip-flop"
        ],
        "Answer": "Answer: b\nExplanation: In serial input serial output register, the data of first flip-flop is accessed by the rest of the circuit and in serial input parallel output register, the data of the last flip-flop is accessed by the circuit."
    },
    {
        "id": 570,
        "Question": "In PIPO shift register, parallel data can be taken out by ______",
        "Options": [
            "a) Using the Q output of the first flip-flop",
            "b) Using the Q output of the last flip-flop",
            "c) Using the Q output of the second flip-flop",
            "d) Using the Q output of each flip-flop"
        ],
        "Answer": "Answer: d\nExplanation: In PIPO shift register there are parallel input pins to which data is presented in a parallel format and then the data is transferred to their respective output pins altogether by the same clock pulse. One clock pulse unloads and loads the data of one register, which requires it to use all the output pins of each and every flip-flop."
    },
    {
        "id": 571,
        "Question": "Four bits shift register enables shift control signal in how many clock pulses?",
        "Options": [
            "a) Two clock pulses",
            "b) Three clock pulses",
            "c) Four clock pulses",
            "d) Five clock pulses"
        ],
        "Answer": "Answer: c\nExplanation: One bit is shifted into the register in one clock cycle for data conversion so four bits will be shifted into the register in four clock pulses."
    },
    {
        "id": 572,
        "Question": "Time taken by the shift register to transfer the content is called _______",
        "Options": [
            "a) Clock duration",
            "b) Bit duration",
            "c) Word duration",
            "d) Duration"
        ],
        "Answer": "Answer: c\nExplanation: Serial computer needs less hardware because one circuit can be used over and over again to manipulate the bits that come out of the shift register. The time required by the shift register to shift the entire content is called word duration. "
    },
    {
        "id": 573,
        "Question": "Transfer of one bit of information at a time is called _______",
        "Options": [
            "a) Rotating",
            "b) Serial transfer",
            "c) Parallel transfer",
            "d) Shifting"
        ],
        "Answer": "Answer: b\nExplanation: Movement of data at a rate of one bit per clock pulse from one end of the shift register to the other end is called serial transfer. Movement of data into all flip-flops at the same time is called parallel transfer."
    },
    {
        "id": 574,
        "Question": "In gated D latch, which of the following is the input symbol?",
        "Options": [
            "a) D",
            "b) Q",
            "c) EN",
            "d) CLK"
        ],
        "Answer": "Answer: a\nExplanation: Clock divider is also called frequency divider as it divides the input clock frequency and generates the output clock. VHDL code has a clock and resets as input and output as a divided clock."
    },
    {
        "id": 575,
        "Question": "10.  Which register is used in the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vhdl\"><pre class=\"de1\"><span class=\"kw1\">library</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">use</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">entity</span> shift_siso <span class=\"kw1\">is</span>\n<span class=\"kw1\">port</span> <span class=\"br0\">(</span><span class=\"kw4\">Clock</span>, Sin <span class=\"sy0\">:</span> <span class=\"kw1\">in</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span>\nSout <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">std_logic</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">end</span> shift_siso<span class=\"sy0\">;</span>\n<span class=\"kw1\">architecture</span> behav <span class=\"kw1\">of</span> shift_siso <span class=\"kw1\">is</span>\n<span class=\"kw1\">signal</span> temp<span class=\"sy0\">:</span> <span class=\"kw2\">std_logic_vector</span><span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">begin</span>\n<span class=\"kw1\">process</span> <span class=\"br0\">(</span><span class=\"kw4\">Clock</span><span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">Clock</span><span class=\"re2\">'event</span> <span class=\"kw3\">and</span> <span class=\"kw4\">Clock</span><span class=\"sy0\">=</span>'<span class=\"nu0\">1</span>'<span class=\"br0\">)</span> <span class=\"kw1\">then</span>\n<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span> <span class=\"kw1\">loop</span>\ntemp<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> temp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">end</span> <span class=\"kw1\">loop</span><span class=\"sy0\">;</span>\ntemp<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> Sin<span class=\"sy0\">;</span>\n<span class=\"kw1\">end</span> <span class=\"kw1\">if</span> <span class=\"sy0\">;</span>\n<span class=\"kw1\">end</span> <span class=\"kw1\">process</span><span class=\"sy0\">;</span>\nSout <span class=\"sy0\">&lt;=</span> temp<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">end</span> behav<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Serial in serial out",
            "b) Serial in parallel out",
            "c) Parallel in parallel out",
            "d) Parallel in serial out"
        ],
        "Answer": "Answer: a\nExplanation: Shift registers are used to delay the data signal so that it can be used later for a data operation or output. One example could be, equalization of two parallel signals: a data and a data valid indicator. Data valid indicator is commonly used for the delay. "
    },
    {
        "id": 576,
        "Question": "Which of the following flip-flop is used by the ring counter?",
        "Options": [
            "a) D flip-flops",
            "b) SR flip-flops",
            "c) JK flip-flops",
            "d) T flip-flops"
        ],
        "Answer": "Answer: a\nExplanation: Ring counter is a serial shift register based on continuous circulation. Feeding back the output of the serial shift register to its input without inversion creates a circuit."
    },
    {
        "id": 577,
        "Question": "‘shift_reg’ is used to initialize the _____________ in the shift register.",
        "Options": [
            "a) LSB",
            "b) MSB",
            "c) Register type",
            "d) Register bits"
        ],
        "Answer": "Answer: a\nExplanation: Ring counter comprises of a few single bit D flip-flops, one flip-flop for one data bit, either a logic 1 or a 0. They are connected together to form a sequence so that the output from the first flip-flop becomes the input of the second flip-flop and so on."
    },
    {
        "id": 578,
        "Question": "How many types of shift operators are there in VHDL?",
        "Options": [
            "a) Three",
            "b) Four",
            "c) Five",
            "d) Six"
        ],
        "Answer": "Answer: b\nExplanation: Shift register uses ‘shift_reg’ for the initialization. It sets the value of MSB in the shift register with the following code:\n(signal shift_reg : STD_LOGIC_VECTOR(7 downto 0) := X”80″;)"
    },
    {
        "id": 579,
        "Question": "How many types of the data type are there in the ring counter?",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) More than three"
        ],
        "Answer": "Answer: d\nExplanation: There are six types of shift operators in VHDL: rol (rotate left logical), ror (rotate right logical), sll (shift left logical), srl (shift right logical), sla (shift left arithmetic), sra (shift right arithmetic). "
    },
    {
        "id": 580,
        "Question": "In __________ counter universal clock is not used.",
        "Options": [
            "a) Synchronous counter",
            "b) Asynchronous counter",
            "c) Decade counter",
            "d) Ring counter"
        ],
        "Answer": "Answer: d\nExplanation: There are more than three data types in VHDL, some of them are: STD_LOGIC_VECTOR data type – for more than one bit, the STD_LOGIC data type – for a single bit, the BIT_VECTOR data type – for two or more bits, STD_LOGIC_UNSIGNED data type – for addition and subtraction. "
    },
    {
        "id": 581,
        "Question": "Synchronous counter use ________ global clock, unlike asynchronous counter.",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) zero"
        ],
        "Answer": "Answer: b\nExplanation: In asynchronous counter, the universal clock is not used, only the first flip-flop is operated by the main clock and output of the previous flip-flops operates the clock input of the rest of the counters."
    },
    {
        "id": 582,
        "Question": "How many different states does a decade counter count?",
        "Options": [
            "a) Eight",
            "b) Nine",
            "c) Ten",
            "d) Eleven"
        ],
        "Answer": "Answer: a\nExplanation: Synchronous counter use one global clock that operates each flip flop and changes the output in parallel. One advantage of the synchronous counter as compared to asynchronous counter is, it can work on a much higher frequency than the asynchronous counter."
    },
    {
        "id": 583,
        "Question": "The number of flip-flops used in a counter is _________ number of states in the counter.",
        "Options": [
            "a) Greater than",
            "b) Less than",
            "c) Equal to",
            "d) Greater than equal to"
        ],
        "Answer": "Answer: b\nExplanation: In asynchronous counters, there are small delays between the arrival of the clock pulse at the input due to the internal circuit of the gate so, if the delay of the all the stages are added together the total delay at the end of the counter can be very large. Therefore, asynchronous counters are not used in high-frequency circuits where large numbers of bits are involved."
    },
    {
        "id": 584,
        "Question": "Two decade counters cascaded together will divide the input frequency by ________",
        "Options": [
            "a) 10",
            "b) 100",
            "c) 1000",
            "d) 10000"
        ],
        "Answer": "Answer: c\nExplanation: Ten different states are counted by a decade counter. It then resets to its initial state. A simple decade counter counts from 0 to 9. Also, counters could be made which can go through any ten states between 0 to 15."
    },
    {
        "id": 585,
        "Question": "Output values of Moore type FSM are determined by its ________",
        "Options": [
            "a) Input values",
            "b) Output values",
            "c) Clock input",
            "d) Current state"
        ],
        "Answer": "Answer: d\nExplanation: The output values of a Moore type FSM are determined only by its current state. The output is computed by the state outputs which serve as the input in the flip-flop. The output changes synchronously with the clock edge and state transition."
    },
    {
        "id": 586,
        "Question": "What happens if the input is high in FSM?",
        "Options": [
            "a) Change of state",
            "b) No transition in state",
            "c) Remains in a single state",
            "d) Invalid state"
        ],
        "Answer": "Answer: a\nExplanation: Output of the Moore type FSM are synchronous, it works with respect to the clock and change only with the state transition. Mealy type FSM gives asynchronous output."
    },
    {
        "id": 587,
        "Question": "What happens if the input is low in FSM?",
        "Options": [
            "a) Change of state",
            "b) No transition in state",
            "c) Remains in a single state",
            "d) Invalid state"
        ],
        "Answer": "Answer: b\nExplanation: Finite state machines are SEQUENTIAL logic systems. In sequential logic systems, the output depends on the inputs and also on the present state of the system. It consists of a set of states, set of rules for moving from state to state, inputs and outputs. "
    },
    {
        "id": 588,
        "Question": "In FSM diagram what does circle represent?",
        "Options": [
            "a) Change of state",
            "b) State",
            "c) Output value",
            "d) Initial state"
        ],
        "Answer": "Answer: a\nExplanation: The system changes the state as long the input is high. The system also has an output which is 1 if the input is high since there is a change in state which leads to the output. "
    },
    {
        "id": 589,
        "Question": "In the FSM diagram, what does arrow between the circles represent?",
        "Options": [
            "a) Change of state",
            "b) State",
            "c) Output value",
            "d) Initial state"
        ],
        "Answer": "Answer: b\nExplanation: There is no transition in the state if the input is low. If the system is in a particular state, it remains in that state only until the input becomes high. The system also has an output which is 0 if the input is low since there is no change in the state, it doesn’t reach the output state. "
    },
    {
        "id": 590,
        "Question": "In the FSM diagram, what does the information below the line in the circle represent?",
        "Options": [
            "a) Change of state",
            "b) State",
            "c) Output value",
            "d) Initial state"
        ],
        "Answer": "Answer: b\nExplanation: In FSM diagram circle represent the states. For example: Assume there are four states in an FSM i.e. A, B, C and D. The encircled one out of the four will represent the state. If B is encircled, it shows FSM is in state B."
    },
    {
        "id": 591,
        "Question": "Moore machine has _________ states than a mealy machine.",
        "Options": [
            "a) Fewer",
            "b) More",
            "c) Equal",
            "d) Negligible"
        ],
        "Answer": "Answer: a\nExplanation: In the FSM diagram, arrows between the circles represent the change of one state to another state. For example: Assume there are four states in an FSM i.e. A, B, C and D. The arrow between the states A and B show the transition of state from A to B."
    },
    {
        "id": 592,
        "Question": "State transition happens _______ in every clock cycle.",
        "Options": [
            "a) Once",
            "b) Twice",
            "c) Thrice",
            "d) Four times"
        ],
        "Answer": "Answer: c\nExplanation: In the FSM diagram the information below the line in the circle represents the output value when in each state. It is represented by 1 and 0. If there is a state change then 1, otherwise 0. "
    },
    {
        "id": 593,
        "Question": "Output values of mealy type FSM are determined by its ________",
        "Options": [
            "a) Input values",
            "b) Output values",
            "c) Both input values and current state",
            "d) Current state"
        ],
        "Answer": "Answer: c\nExplanation: The output values of a mealy type FSM are determined by its current state and present input values both. Output can change after a change at the inputs immediately, independent of the clock."
    },
    {
        "id": 594,
        "Question": "What kind of output does mealy machine produce?",
        "Options": [
            "a) Asynchronous",
            "b) Synchronous",
            "c) Level",
            "d) Pulsed"
        ],
        "Answer": "Answer: a\nExplanation: Output of the mealy type FSM is asynchronous it can change in response to any change in the input regardless of the clock. Moore type FSM gives a synchronous output. "
    },
    {
        "id": 595,
        "Question": "States in FSM are represented by ________",
        "Options": [
            "a) Bits",
            "b) Bytes",
            "c) Word",
            "d) Character"
        ],
        "Answer": "Answer: a\nExplanation: Transition states in FSM are represented by bits. The number of bits that are required to represent all the states in FSM is equal to the number of flip-flops required to implement that state machine.  "
    },
    {
        "id": 596,
        "Question": "What is the first step in writing the VHDL for an FSM?",
        "Options": [
            "a) To define the VHDL entity",
            "b) Naming the entity",
            "c) Defining the data type",
            "d) Creating the states"
        ],
        "Answer": "Answer: a\nExplanation: The first step in writing the VHDL for an FSM is defining the VHDL entity. The VHDL entity defines the external interface of the system that is being designed, which includes the name of the entity, the inputs and the outputs."
    },
    {
        "id": 597,
        "Question": "Which of the following react faster to inputs?",
        "Options": [
            "a) Sequencer",
            "b) Generators",
            "c) Mealy machines",
            "d) Moore machines"
        ],
        "Answer": "Answer: b\nExplanation: Moore machines are safer to use because output changes one cycle later at the clock edge while in mealy machines, input changes the output in the same clock cycle which becomes a problem if two machines are interconnected. "
    },
    {
        "id": 598,
        "Question": "What is the first state of FSM?",
        "Options": [
            "a) Wait loop state",
            "b) Initial state",
            "c) Output state",
            "d) Activate pulse state"
        ],
        "Answer": "Answer: c\nExplanation: Mealy machines react faster to the inputs because they react in the same cycle, they don’t wait for the clock. Moore machines react one cycle later."
    },
    {
        "id": 599,
        "Question": "Mealy machines have _________ states than Moore machine.",
        "Options": [
            "a) Fewer",
            "b) More",
            "c) Equal",
            "d) Negligible"
        ],
        "Answer": "Answer: b\nExplanation: The first state of the finite state machine is the initial-standby state. It waits until a 1 is read at the input to get started. It then goes to activate pulse state and transmits a high pulse. "
    },
    {
        "id": 600,
        "Question": "In mealy type FSM, the path is labelled by which of the following?",
        "Options": [
            "a) Inputs",
            "b) Outputs",
            "c) Both inputs and outputs",
            "d) Current state"
        ],
        "Answer": "Answer: a\nExplanation: Mealy machines have fewer states than Moore machine because they respond faster to the input in one cycle only, as they don’t have to wait for the clock. Moore machines generally respond one clock cycle later. "
    },
    {
        "id": 601,
        "Question": "Which modelling is used in the top-level system design?",
        "Options": [
            "a) Low-level behavioural modelling",
            "b) High-level behavioural modelling",
            "c) Structural modelling",
            "d) Data flow modelling"
        ],
        "Answer": "Answer: a\nExplanation: In the top-level system design each major component in the design is formed at the gate level and the design is simulated again for the timing, functionality and performance."
    },
    {
        "id": 602,
        "Question": "What are the two constructs used in most of the behavioural modelling?",
        "Options": [
            "a) Assign",
            "b) Begin and end",
            "c) Initial and always",
            "d) Always and end"
        ],
        "Answer": "Answer: b\nExplanation: High-level behavioural modelling is used in the top-level system design. It is the highest level of abstraction in the VHDL. This level simulates the behavioural level of the circuits and the development rate at this level is highest. "
    },
    {
        "id": 603,
        "Question": "How many levels of abstraction are there in the top-level system design?",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) Four"
        ],
        "Answer": "Answer: c\nExplanation: The two constructs used in most of the behavioural modelling are Initial and always. All the other behavioural statements appear only inside these two structured procedure constructs."
    },
    {
        "id": 604,
        "Question": "Timing performance of design is checked by which of the following simulation mode?",
        "Options": [
            "a) Gate-level",
            "b) Behavioural",
            "c) Transistor-level",
            "d) Switch-level"
        ],
        "Answer": "Answer: c\nExplanation: There are three levels of abstraction: algorithm, register transfer level (RTL), and gate level. Algorithms cannot be synthesized, RTL is the input to the synthesis, gate level is the output from the synthesis."
    },
    {
        "id": 605,
        "Question": "The statements in the initial construct constitute ________",
        "Options": [
            "a) End block",
            "b) Initial block",
            "c) Begin block",
            "d) Always block"
        ],
        "Answer": "Answer: a\nExplanation: Gate-level simulation is used to check the timing performance of a design. It quickly does the implementation of the design and helps in verifying the dynamic behaviour of the circuit which is usually not verified correctly by the static methods."
    },
    {
        "id": 606,
        "Question": "The statements in the always construct constitute ________",
        "Options": [
            "a) End block",
            "b) Initial block",
            "c) Begin block",
            "d) Always block"
        ],
        "Answer": "Answer: b\nExplanation: The statements in the initial construct constitute the initial block. Initial block is executed only once during the simulation process, at time 0. If there are more than one initial blocks, then all the initial blocks are executed simultaneously."
    },
    {
        "id": 607,
        "Question": "How many types of procedural assignments are there?",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) Four"
        ],
        "Answer": "Answer: d\nExplanation: The statements in the always construct constitute the always block. The always block starts executing at time 0 and keeps on executing during the complete simulation process. It is like an infinite loop."
    },
    {
        "id": 608,
        "Question": "In which order do the blocking assignment statements are executed in a sequential block?",
        "Options": [
            "a) Random order",
            "b) Specified order",
            "c) Ascending order",
            "d) Descending order"
        ],
        "Answer": "Answer: a\nExplanation: Procedural assignments update reg, integer, real, time, real-time, and memory data types. The values in procedural assignments change the procedural flow constructs. The variables hold their values until they’re updated by another procedural assignment."
    },
    {
        "id": 609,
        "Question": "What does RTL in digital circuit design stand for?",
        "Options": [
            "a) Register transfer language",
            "b) Register transfer logic",
            "c) Register transfer level",
            "d) Resistor-transistor logic"
        ],
        "Answer": "Answer: c\nExplanation: RTL in digital circuit design stands for register transfer level, used in HDL. Register transfer language is a type of intermediate representation close to assembly language. Resistor-transistor logic is used in BJTs as switching devices. Register transfer logic is used in state machine designs. "
    },
    {
        "id": 610,
        "Question": "RTL is a design abstraction of what kind of circuit?",
        "Options": [
            "a) Asynchronous digital circuit",
            "b) Synchronous digital circuit",
            "c) Asynchronous sequential circuit",
            "d) Analog circuit"
        ],
        "Answer": "Answer: b\nExplanation: RTL is a design abstraction that shapes a synchronous digital circuit with reference to digital signals that flow between hardware registers and the logical operations are carried out on those signals."
    },
    {
        "id": 611,
        "Question": "RTL is used in HDL to create what level of representations in the circuit?",
        "Options": [
            "a) High-level",
            "b) Low-level",
            "c) Mid-level",
            "d) Same level"
        ],
        "Answer": "Answer: a\nExplanation: RTL is used in HDL for creating HIGH-LEVEL of representations in the circuit, from which lower-level of representations can be derived. Designing at the RTL level is a representative practice in modern digital design. "
    },
    {
        "id": 612,
        "Question": "RTL mainly focuses on describing the flow of signals between ________",
        "Options": [
            "a) Logic gates",
            "b) Registers",
            "c) Clock",
            "d) Inverter"
        ],
        "Answer": "Answer: b\nExplanation: RTL focuses on describing the flow of signals between registers. There is a regularly repeated path of logic from the output of the register to its input, that is the reason it is called register transfer level."
    },
    {
        "id": 613,
        "Question": "Which flip-flop is usually used in the implementation of the registers?",
        "Options": [
            "a) D flip-flop",
            "b) S-R flip-flop",
            "c) T flip-flop",
            "d) J-K flip-flop"
        ],
        "Answer": "Answer: a\nExplanation: Registers are generally implemented as D flip-flops because connection for the shift register is the simplest with D flip-flop, as there is a single data input in it. The flip-flop also stores the output of whatever logic is applied to its data input as long as the clock input is high."
    },
    {
        "id": 614,
        "Question": "Which of the following tool performs logic optimization?",
        "Options": [
            "a) Simulation tool",
            "b) Synthesis tool",
            "c) Routing tool",
            "d) RTL compiler"
        ],
        "Answer": "Answer: b\nExplanation: Synthesis tool performs logic optimization in RTL by converting high-level description of the design circuit into an optimized gate level representation by the use of basic logic gates like and, or, nor, etc."
    },
    {
        "id": 615,
        "Question": "Hold time is the time needed for the data to ________ after the edge of the clock is triggered.",
        "Options": [
            "a) Decrease",
            "b) Increase",
            "c) Remain constant",
            "d) Negate"
        ],
        "Answer": "Answer: a\nExplanation: RTL is a combination of both combinational and sequential circuits. Combinational logic performs all the logical operations in the circuit and it typically consists of basic logic gates and registers make synchronized sequential logic."
    },
    {
        "id": 616,
        "Question": "Simulator enters in which phase after the initialization phase?",
        "Options": [
            "a) Execution phase",
            "b) Compilation phase",
            "c) Elaboration phase",
            "d) Simulation phase"
        ],
        "Answer": "Answer: b\nExplanation: The time required for an input data to settle BEFORE the triggering edge of the clock is called the setup time. It is measured with respect to active clock pulse edge only."
    },
    {
        "id": 617,
        "Question": "Conversion of RTL description to Boolean _______ description is a function of the translation procedure in the synthesis process.",
        "Options": [
            "a) Optimized",
            "b) Unoptimized",
            "c) Translation",
            "d) PLA format"
        ],
        "Answer": "Answer: c\nExplanation: Hold time is the time needed for the data to remain constant after the edge of the clock is triggered. Data must remain stable, if the incorrect data is latched then, it leads to hold violation. "
    }
]