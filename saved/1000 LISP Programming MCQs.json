[
    {
        "id": 1,
        "Question": "What S-expression consists of?",
        "Options": [
            "a) Atoms and Lists",
            "b) Numeric only",
            "c) Literals only",
            "d) Atoms only"
        ],
        "Answer": "Answer: a\nExplanation: S-expression consists of both Atoms and Lists. It also consists of numeric and literals."
    },
    {
        "id": 2,
        "Question": "What are the basic building blocks of S-expressions?",
        "Options": [
            "a) Atoms",
            "b) Lists",
            "c) Numbers",
            "d) Predicates"
        ],
        "Answer": "Answer: a\nExplanation: Yes, all the program statements and data are represented by S-expressions in LISP. S-expressions or symbolic expressions are the syntactic elements of the LISP programming language."
    },
    {
        "id": 3,
        "Question": "If X and Y are S-expression then (X.Y) is a/an ____",
        "Options": [
            "a) S-expression",
            "b) Atom",
            "c) List",
            "d) Predicate"
        ],
        "Answer": "Answer: a\nExplanation: Atoms are building blocks of S-expressions. Even atoms are considered as a fundamental unit of LISP."
    },
    {
        "id": 4,
        "Question": "6. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> 'first-statement<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) FIRST-STATEMENT",
            "b) FIRST",
            "c) STATEMENT",
            "d) –"
        ],
        "Answer": "Answer: a\nExplanation: In LISP programming if X and Y are S-expressions then the dotted pair (X.Y) is also considered as S-expression."
    },
    {
        "id": 5,
        "Question": "7. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> '<span class=\"kw1\">Atom</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ATOM",
            "b) A",
            "c) TOM",
            "d) ATOM infinitely"
        ],
        "Answer": "Answer: a\nExplanation: Atoms are also considered as S-expressions. Rather S-expressions are formed from atoms."
    },
    {
        "id": 6,
        "Question": "8. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> 'List-atom<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) LIST-ATOM",
            "b) LIST",
            "c) ATOM",
            "d) –"
        ],
        "Answer": "Answer: a\nExplanation: Print will output the argument given to it as it is on the output terminal of the compiler.\nOutput: FIRST-STATEMENT"
    },
    {
        "id": 7,
        "Question": "9. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> '<span class=\"kw1\">list</span> <span class=\"kw1\">atom</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) LIST ATOM",
            "b) LIST",
            "c) ATOM",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: Print is used to write the argument provided to it on the output part of the program.\nOutput: ATOM"
    },
    {
        "id": 8,
        "Question": "10. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> '<span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">atom</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) LIST ATOM",
            "b) LIST",
            "c) ATOM",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: Print primitive does not give an error if the argument has -(hyphen). It prints on output the argument provided to it.\nOutput: LIST-ATOM"
    },
    {
        "id": 9,
        "Question": "If S1, S2, S3… are S-expressions then list: (S1 S2 S3 ….) is a/an ____",
        "Options": [
            "a) Atom",
            "b) Error will occur",
            "c) S-expression",
            "d) Primitive"
        ],
        "Answer": "Answer: c\nExplanation: According to recursive definition of S-expression if S1, S2, S3… are S-expressions then list: (S1 S2 S3 ….) is also an S-expression. S-expression is short form of symbolic expressions."
    },
    {
        "id": 10,
        "Question": "What are examples of some of the atoms?",
        "Options": [
            "a) Numeric, Integer, Ratio",
            "b) Numeric, Lists",
            "c) Lists",
            "d) Cons of two atoms"
        ],
        "Answer": "Answer: a\nExplanation: Atoms consist of Literals, Numbers, Integers, Ratios, Flonum. Lists are formed from atoms. Cons of two atoms is referred to as List."
    },
    {
        "id": 11,
        "Question": "Which of the following can be considered as List?",
        "Options": [
            "a) Number",
            "b) T",
            "c) NIL",
            "d) Empty"
        ],
        "Answer": "Answer: d\nExplanation: An empty thing is also considered as List. Empty thing means the braces () with no arguments. Numbers are not counted in Lists."
    },
    {
        "id": 12,
        "Question": "5. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> 'ATOMS<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ATOMS",
            "b) error",
            "c) A",
            "d) Toms"
        ],
        "Answer": "Answer: b\nExplanation: LISP is not a case sensitive language. Example: (print ‘a) will behave same as (PRINT ‘A)."
    },
    {
        "id": 13,
        "Question": "What is the use of (WRITE ‘Argument)?",
        "Options": [
            "a) It converts argument in small letters to capital letters",
            "b) It returns capital letters from the string",
            "c) Same as (write ‘argument)",
            "d) It converts the string into alphabetical order/sequence"
        ],
        "Answer": "Answer: a\nExplanation: In LISP primitive programming language, write is a keyword that is used to print things on the output terminal of the compiler.\nOutput: ATOMS"
    },
    {
        "id": 14,
        "Question": "7. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> '<span class=\"br0\">(</span>a b c d<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A B C D",
            "b) A",
            "c) Error",
            "d) B C D"
        ],
        "Answer": "Answer: c\nExplanation: It works same as (write ‘argument) because LISP is case insensitive language."
    },
    {
        "id": 15,
        "Question": "8. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) ‘ is not used so error occurs",
            "c) Error",
            "d) No output"
        ],
        "Answer": "Answer: a\nExplanation: With use of write primitive, we can write space separated words with the use of braces.\nOutput: A B C D"
    },
    {
        "id": 16,
        "Question": "9. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> '+/_<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Ascii value of + divides by that of _",
            "b) Error",
            "c) +/_",
            "d) + only"
        ],
        "Answer": "Answer: a\nExplanation: It will print number 1. If we use ‘1 then that will not be a number. ‘1 will convert number 1 to a list and it will have properties of list and not numbers.\nOutput: 1"
    },
    {
        "id": 17,
        "Question": "10. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> '#<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) #",
            "c) ASCII value of #",
            "d) # will be printed without using ‘"
        ],
        "Answer": "Answer: c\nExplanation: It will not print division of ASCII values of + and _. Write will print arguments as it is in the output.\nOutput: +/_"
    },
    {
        "id": 18,
        "Question": "Which of the following is part of basic syntax in LISP programming?",
        "Options": [
            "a) Primitive",
            "b) +",
            "c) NULL",
            "d) #include"
        ],
        "Answer": "Answer: a\nExplanation: Primitives are part of basic syntax of LISP. + is not considered as a part of basic syntax of LISP. It is rather an example of the primitives."
    },
    {
        "id": 19,
        "Question": "Arguments are ____ a part of LISP Syntax.",
        "Options": [
            "a) sometimes",
            "b) always",
            "c) vever",
            "d) not considered as"
        ],
        "Answer": "Answer: b\nExplanation: Argument is a part of basic syntax of LISP. Even if there is no argument given then NIL is considered to be one of the arguments."
    },
    {
        "id": 20,
        "Question": "How many arguments do a single LISP program has?",
        "Options": [
            "a) One",
            "b) Two",
            "c) Any number of arguments",
            "d) Three"
        ],
        "Answer": "Answer: c\nExplanation: Any number of arguments can come in LISP single program. As an example, the addition (+) primitive takes any number of arguments."
    },
    {
        "id": 21,
        "Question": "What is the basic syntax of LISP? (Note: arg means argument here)",
        "Options": [
            "a) (<LISP Primitive> <arg1> <arg2> …)",
            "b) (<LISP Primitive> <arg>)",
            "c) (<arg> <LISP Primitive>)",
            "d) (<arg1> <arg2> … <LISP Primitive>)"
        ],
        "Answer": "Answer: a\nExplanation: Correct syntax of the LISP is (<LISP Primitive> <arg1> <arg2> …)."
    },
    {
        "id": 22,
        "Question": "6. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span>+ <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 7",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: Yes, the LISP programs can be nested."
    },
    {
        "id": 23,
        "Question": "7. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 24",
            "b) 234",
            "c) 32",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: Prefix notation is used in this statement. The “+” primitive is used for addition of numbers given to it in the form of arguments.\nOutput: 7"
    },
    {
        "id": 24,
        "Question": "8. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span>+ <span class=\"nu0\">17</span> <span class=\"br0\">(</span>* <span class=\"nu0\">22</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 39",
            "b) 3",
            "c) 17 (* 22 1)",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: More than two arguments are given to * primitive. It will multiply all the arguments supplied to it and prints the final result.\nOutput: 24"
    },
    {
        "id": 25,
        "Question": "9. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span>/ <span class=\"nu0\">6</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 1/3",
            "c) Division",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: LISP programs are nested here. This statement will be completely evaluated. It will not give us the output in the form of (+ 17 (* 22 1)).\nOutput: 39"
    },
    {
        "id": 26,
        "Question": "Think of a way to write addition of four numbers using maximum possible braces?",
        "Options": [
            "a) (+ 1 2 3 4)",
            "b) (+ (+ 1 2) (+ 3 4))",
            "c) (+ 1 (+ 2 (+ 3 (4))))",
            "d) (+ 1 2 (+ 3 4))"
        ],
        "Answer": "Answer: a\nExplanation: (/ 6 2) is evaluated as 6/2 and not 2/6 because (/ 6 2) is written in the prefix form.\nOutput: 3"
    },
    {
        "id": 27,
        "Question": "In the syntax (setf arg1 arg2), what is arg1?",
        "Options": [
            "a) Value to be set",
            "b) Variable on which value is set",
            "c) Set of lists",
            "d) Set of elements forming a list"
        ],
        "Answer": "Answer: b\nExplanation: The arg1 or argument 1 is like a variable in which value is stored. The arg1 can be anything like a symbol, a list or maybe the first element of a list, etc."
    },
    {
        "id": 28,
        "Question": "In the syntax (setf arg1 arg2), what is arg2?",
        "Options": [
            "a) A variable",
            "b) A value to be set on arg1",
            "c) It is the definition of arg1",
            "d) A formula"
        ],
        "Answer": "Answer: b\nExplanation: In general, the arg2 or argument2 is the value that is to be set on arg1. It can be a number, a list, a symbol, a formula, etc."
    },
    {
        "id": 29,
        "Question": "What is the notation used for writing LISP Syntax?",
        "Options": [
            "a) Prefix",
            "b) Infix",
            "c) Postfix",
            "d) Different notations for different LISP Primitives"
        ],
        "Answer": "Answer: a\nExplanation: Prefix notation is always used in LISP Syntax. It doesn’t change for different LISP Primitives. That is infix and postfix notations are not used."
    },
    {
        "id": 30,
        "Question": "What can be used as an argument for a primitive?",
        "Options": [
            "a) Atoms and List",
            "b) Another LISP programs",
            "c) A user-defined function",
            "d) Atoms, List, Another LISP program, Used-defined function"
        ],
        "Answer": "Answer: d\nExplanation: These all can be used as an argument for a primitive. Arguments depend on the type of primitive used. Example for arithmetic operators: numbers are used. For list functions: lists are used."
    },
    {
        "id": 31,
        "Question": "Choose correct statement about arg1 of setq syntax.",
        "Options": [
            "a) It is a list",
            "b) It is a symbol in which value is stored",
            "c) It is an arithmetic operator",
            "d) It is a primitive"
        ],
        "Answer": "Answer: b\nExplanation: In (setq arg1 arg2), the arg1 is like a variable in which value is stored. It can be a symbol. The value of arg2 got stored in it."
    },
    {
        "id": 32,
        "Question": "6. What is the value of q after this statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> q <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 22",
            "c) 222",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: Setf will give the value 2 to q. And q being a variable stores the value in it. And hence it’s value becomes 2.\nOutput: 2"
    },
    {
        "id": 33,
        "Question": "7. What is the value of p after this statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setq</span> p <span class=\"br0\">(</span>+ <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 7",
            "b) 3",
            "c) 4",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: (+ 3 4) evaluates to 7 and then p is given the value 7.\nOutput: 7"
    },
    {
        "id": 34,
        "Question": "8. What will be the value of p after the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setq</span> p '<span class=\"br0\">(</span>a b c d<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A B C D",
            "b) B C D",
            "c) A",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: The list is the arg2 of the setq primitive. This list is being stored in the variable p, where p is the arg1 of the setq. There will not be any error as everything is correct.\nOutput: A B C D"
    },
    {
        "id": 35,
        "Question": "9. What will be stored in tap after the execution of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> tap <span class=\"br0\">(</span><span class=\"kw1\">car</span> '<span class=\"br0\">(</span>plastic wood<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) PLASTIC",
            "b) WOOD",
            "c) PLASTIC WOOD",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: The primitive car is used which will take out the first element of the list. So plastic is finally supplied as the value to be stored in variable tap.\nOutput: PLASTIC."
    },
    {
        "id": 36,
        "Question": "10. Choose the correct output statement among these.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setq</span> <span class=\"kw1\">float</span> <span class=\"nu0\">3.33</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3.33",
            "b) FLOAT",
            "c) Error",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: The floating-point values are also being stored in the variables with the help of setq. And it also shows no error."
    },
    {
        "id": 37,
        "Question": "What is the difference between setf and setq?",
        "Options": [
            "a) Setq is used for symbols only but setf can be used anywhere",
            "b) No difference is there",
            "c) Setf is used only for numbers but setq used anywhere",
            "d) Setf is for lists and setq for numbers"
        ],
        "Answer": "Answer: a\nExplanation: Setq is used only for setting the values of symbols but setf can be used for anything. Setf can be used for setting value of any data-type and not only symbols."
    },
    {
        "id": 38,
        "Question": "Choose the correct about Setf and Setq.",
        "Options": [
            "a) Setq can be used in place of setf but not vice versa",
            "b) Setf can be used in place of setq but not vice versa",
            "c) Both can be used in place of each other",
            "d) Neither can be used in place of each other"
        ],
        "Answer": "Answer: b\nExplanation: Setq is used only for symbols and setf is used for any data type, so Setf can be used in place of setq but setq cannot be used in place of setf."
    },
    {
        "id": 39,
        "Question": "How many arguments do setf or setq can have in single braces?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 28",
            "d) Any even number of arguments."
        ],
        "Answer": "Answer: d\nExplanation: The setf and setq takes any number of arguments but the number must be even. Even is required because one of the two will be value taker and another one will be value giver. So, it always comes in a pair."
    },
    {
        "id": 40,
        "Question": "In multiple arguments in setf and setq, it prints ____",
        "Options": [
            "a) All the values",
            "b) Only the first value",
            "c) Only the last value",
            "d) Numerically smallest value"
        ],
        "Answer": "Answer: c\nExplanation: In the process of assigning values to multiple variables with setf and setq, the setf and setq prints only the last value assigned to a variable. It does not print all the values."
    },
    {
        "id": 41,
        "Question": "6. What will the output after the execution of following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setq</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) Error",
            "c) X",
            "d) 2X"
        ],
        "Answer": "Answer: a\nExplanation: The full form of setf is set field and it means that it sets the field with the value given."
    },
    {
        "id": 42,
        "Question": "7. What will be the output after the execution of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> '<span class=\"br0\">(</span>a b cd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) 2",
            "c) A",
            "d) A B"
        ],
        "Answer": "Answer: b\nExplanation: The statement will show error because (car x) is not a symbol and setq requires arg1 to be a symbol.\nOutput: Error"
    },
    {
        "id": 43,
        "Question": "8. What is the value of (cdr ‘(a b c d)) after following LISP statements?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> '<span class=\"br0\">(</span>a b c d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> '<span class=\"br0\">(</span>a b c d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) B C D",
            "c) A",
            "d) A 2"
        ],
        "Answer": "Answer: b\nExplanation: The (car ‘(a b cd)) will give A and then the setf give value 2 to it.\nThe setf doesn’t show error to this as it allows any type of datatype as arg1.\nOutput: 2"
    },
    {
        "id": 44,
        "Question": "9. What will be the value of pow(x,y) after this LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> x <span class=\"nu0\">5</span> y <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) 1024",
            "c) 625",
            "d) 645"
        ],
        "Answer": "Answer: b\nExplanation: The setf will store the value 2 in (cdr ‘(a b c d)) but when it comes out of the setf braces and (cdr ‘(a b c d)) is again called then it is treated as a new statement and the value of (cdr ‘(a b c d)) again changes to B C D. We can say scope of setf’s cdr remain in that braces only. And the again called cdr has its new scope with its own values.\nOutput: 2 B C D."
    },
    {
        "id": 45,
        "Question": "10. What will be the value of p after this program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> p <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> p <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) Error"
        ],
        "Answer": "Answer: c\nExplanation: The value of x is 5 and that of y is 4 after this statement’s execution. And pow(x,y) means x raised to power y in general. So pow(5,4) will give 625."
    },
    {
        "id": 46,
        "Question": "What is the full form of LISP?",
        "Options": [
            "a) Light Processing",
            "b) List Processing",
            "c) Like Processing",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: LISP is a programming language that takes it name from List Processing.\n"
    },
    {
        "id": 47,
        "Question": "How the fundamental things are called in lisp?",
        "Options": [
            "a) Bits",
            "b) Word",
            "c) Atoms",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Atoms are considered to be fundamental units of LISP. From atoms we can form lists, etc.\n"
    },
    {
        "id": 48,
        "Question": "What is meant by symbolic expression in lisp?",
        "Options": [
            "a) Atoms",
            "b) List",
            "c) Atoms and list",
            "d) Words"
        ],
        "Answer": "  Answer: c\nExplanation: Atoms and list collectively are called symbolic expressions or more succinctly expressions.\n"
    },
    {
        "id": 49,
        "Question": "Which uses symbolic expressions in lisp to work with datas?",
        "Options": [
            "a) Symbol manipulation program",
            "b) Procedures",
            "c) Lists",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: A symbol manipulation program uses symbolic expressions to work with data and procedures.\n"
    },
    {
        "id": 50,
        "Question": "Which language is used when computer intelligence is not involved?",
        "Options": [
            "a) C",
            "b) C++",
            "c) Java",
            "d) Lisp"
        ],
        "Answer": "  Answer: d\nExplanation: Lisp is an important language even when computer intelligence is not involved.\n"
    },
    {
        "id": 51,
        "Question": "In which computer aspects does the lisp language is used?",
        "Options": [
            "a) Application programming",
            "b) System programming",
            "c) Computer science education",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: d\nExplanation: Lisp is used to write the applications for all of the given above.\n"
    },
    {
        "id": 52,
        "Question": "Which have the same form on lisp?",
        "Options": [
            "a) Lisp data and procedures",
            "b) Types",
            "c) Form",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Uniformity argument is used in lisp, So procedure and lisp data have same form.\n"
    },
    {
        "id": 53,
        "Question": "How many types of arguments are available in lisp?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: d\nExplanation: The four types of arguments available are interaction argument, environment argument, evolution argument and uniformity argument.\n"
    },
    {
        "id": 54,
        "Question": "Which is included in Common lisp to avail the feature of object oriented programming?",
        "Options": [
            "a) CLOS",
            "b) Object",
            "c) Data",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Common Lisp Object System is included in Common lisp to avail the feature of object oriented programming.\n"
    },
    {
        "id": 55,
        "Question": "What does the Lisp facilitates in computer science learning?",
        "Options": [
            "a) Procedure abstraction",
            "b) Data abstraction",
            "c) Both Procedure & Data abstraction",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: LISP not only facilitates procedure abstraction; but it facilitates data abstraction also.\n"
    },
    {
        "id": 56,
        "Question": "Symbol manipulation in LISP is called as _____",
        "Options": [
            "a) atoms",
            "b) lists",
            "c) list processing",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Symbol manipulation in LISP is called as list processing. The full form of LISP is also List Processing."
    },
    {
        "id": 57,
        "Question": "Lists can be formed from ____",
        "Options": [
            "a) atoms",
            "b) atoms and lists",
            "c) lists",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Both atoms and lists can be used to form lists. Lists can be made from atoms. But atoms cannot be made from lists because atoms are the fundamental unit of LISP."
    },
    {
        "id": 58,
        "Question": "Which of the following are general-purpose dialects of LISP?",
        "Options": [
            "a) Clojure",
            "b) Common LISP",
            "c) Common LISP and Scheme",
            "d) Clojure, Command LISP and Scheme"
        ],
        "Answer": "Answer: d\nExplanation: The best-known general-purpose Lisp dialects are Clojure, Common Lisp, and Scheme."
    },
    {
        "id": 59,
        "Question": "What can be used to print “yes, no”?",
        "Options": [
            "a) (print “yes,no”)",
            "b) (write “yes , no!”)",
            "c) (print “yes,”)(print “,no”)",
            "d) (print “yes”)(print “,”)(print “no”)"
        ],
        "Answer": "Answer: a\nExplanation: (print “yes,no”) will print yes,no. Write has exclamation mark (!) in its argument so not correct. Multiple prints used will print their arguments in new line. So, the two times and three times used print will not print “yes,no” continuously, hence these options are wrong."
    },
    {
        "id": 60,
        "Question": "6. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span>symbol-name 'ABC<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) “ABC”",
            "b) ABC",
            "c) ‘ABC",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Write-line is also used to print the arguments. Other primitives used to print are print and write."
    },
    {
        "id": 61,
        "Question": "7. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> '<span class=\"sy0\">|</span>ABC<span class=\"sy0\">|</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) |ABC|",
            "b) ABC",
            "c) “ABC”",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: “symbol-name” is used in symbol-manipulation. This primitive returns the argument provided to it in double quotes. So, here ABC was provided as argument and symbol-name return it as “ABC”.\nOutput: “ABC”"
    },
    {
        "id": 62,
        "Question": "8. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"st0\">\"better\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) “better””better”",
            "b) “better”",
            "c) “better “better””",
            "d) error will occur"
        ],
        "Answer": "Answer: b\nExplanation: In LISP programming the || are considered as escape characters. The use of these escape characters will print ABC on the output terminal. But these escape characters return string without showing || in output only when all the characters are capital letters.\nOutput: ABC"
    },
    {
        "id": 63,
        "Question": "9. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\"better\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) “better””better”",
            "b) “better”",
            "c) error will occur",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In this statement the two write primitive are nested. The inner write will provide “better” as argument to outer write. Hence, both writes will print their arguments in output.\nOutput: “better””better”"
    },
    {
        "id": 64,
        "Question": "10. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"welcome\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) welcome",
            "b) “welcome”",
            "c) no output due to error",
            "d) both welcome and “welcome” are possible"
        ],
        "Answer": "Answer: a\nExplanation: In this statement the print primitive is nested in write. The print primitive will provide “better” as argument to write and give output “better””better”.\nOutput: “better””better”"
    },
    {
        "id": 65,
        "Question": "Which is used to represent the prompt in lisp?",
        "Options": [
            "a) #",
            "b) $",
            "c) &",
            "d) *"
        ],
        "Answer": "  Answer: d\nExplanation: Lisp displays a prompt to to tell that it waiting for something to enter.\n"
    },
    {
        "id": 66,
        "Question": "Which notation facilitates uniformity in lisp?",
        "Options": [
            "a) Prefix",
            "b) Postfix",
            "c) Infix",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Because the procedure name is always in the same place, no matter how many arguments are involved.\n"
    },
    {
        "id": 67,
        "Question": "Which is a procedures supplied by user in terms of primitives?",
        "Options": [
            "a) Custom",
            "b) User-defined",
            "c) Definite",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: A procedures supplied by user in terms of lisp primitives is called user-defined procedure.\n"
    },
    {
        "id": 68,
        "Question": "What is the process of reserving a place in computer memory to store a value for a symbol?",
        "Options": [
            "a) Storing",
            "b) Ranging",
            "c) Binding",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Binding means that allotting a memory location to a variable and storing a value in it.\n"
    },
    {
        "id": 69,
        "Question": "What is the general pattern that shows how the various parts of an expression fit together?",
        "Options": [
            "a) Template",
            "b) Pattern",
            "c) Match",
            "d) Both Template & Pattern"
        ],
        "Answer": "  Answer: a\nExplanation: Template describes what should appear in the position occupied.\n"
    },
    {
        "id": 70,
        "Question": "6. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>+ <span class=\"nu0\">3.14</span> <span class=\"nu0\">2.71</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3.14",
            "b) 2.71",
            "c) 5.84",
            "d) 5.85"
        ],
        "Answer": "  Answer: d\nExplanation: This statement is used to add the two given values.\nOutput:\n5.85\n"
    },
    {
        "id": 71,
        "Question": "7. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>first '<span class=\"br0\">(</span> p h w<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) P",
            "b) H",
            "c) W",
            "d) phw"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will print the first alphabet of the given value.\nOutput:\nP\n"
    },
    {
        "id": 72,
        "Question": "8. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span> first <span class=\"br0\">(</span>rest <span class=\"br0\">(</span>first '<span class=\"br0\">(</span><span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>c d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) b",
            "c) c",
            "d) d"
        ],
        "Answer": "  Answer: b\nExplanation: This statement is used to print b because of nesting.\nOutput:\nb\n"
    },
    {
        "id": 73,
        "Question": "9. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * '<span class=\"br0\">(</span>first <span class=\"br0\">(</span>first <span class=\"br0\">(</span>rest <span class=\"br0\">(</span>rest <span class=\"br0\">(</span><span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>c d<span class=\"br0\">)</span> <span class=\"br0\">(</span>e f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) b",
            "c) ab",
            "d) (FIRST (FIRST (REST (REST ((A B) (C D) (E F))))))"
        ],
        "Answer": "  Answer: d\nExplanation: Because ‘ character is recognized as a macro character, so it will convert ‘ into (quote ).\nOutput:\n(FIRST (FIRST (REST (REST ((A B) (C D) (E F))))))\n"
    },
    {
        "id": 74,
        "Question": "10. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) B",
            "c) (B C)",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: cdr function is used to form composite primitives.\nOutput:\n(B C)\n"
    },
    {
        "id": 75,
        "Question": "Choose the correct option for the output when lower or upper-case arguments are given in LISP.",
        "Options": [
            "a) Same output",
            "b) Different output",
            "c) LISP does not support lower case",
            "d) LISP does not support upper case"
        ],
        "Answer": "Answer: a\nExplanation: LISP gives the same output for both the cases. In fact, LISP always gives output in upper case letters."
    },
    {
        "id": 76,
        "Question": "Which primitive can be used to create a list?",
        "Options": [
            "a) getf",
            "b) setf",
            "c) make",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Setf is used to create the list. Getf is used to retrieve the data from list. Make is not a primitive in LISP."
    },
    {
        "id": 77,
        "Question": "3. What are the elements in list: tap in following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> tap '<span class=\"br0\">(</span>water oil grease<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Water",
            "b) Oil",
            "c) Grease",
            "d) Water oil grease"
        ],
        "Answer": "Answer: d\nExplanation: Setf is the primitive used to create a list. Tap will be initialised to water oil grease with the given statement.\nOutput: WATER OIL GREASE"
    },
    {
        "id": 78,
        "Question": "Which primitive can be used to remove an element from List?",
        "Options": [
            "a) delete",
            "b) cons",
            "c) cdr",
            "d) write"
        ],
        "Answer": "Answer: a\nExplanation: Delete is the primitive used to remove an element from list. The element to be removed is passed as an argument to delete primitive along with the list name from which element is to be deleted and delete will remove that element from list."
    },
    {
        "id": 79,
        "Question": "Which primitive can be used to add an element to List?",
        "Options": [
            "a) delete",
            "b) cons",
            "c) cdr",
            "d) write"
        ],
        "Answer": "Answer: b\nExplanation: Cons is the primitive used to add an element to list. Cons take two lists as an argument and merge them to form a new list."
    },
    {
        "id": 80,
        "Question": "6. What is the output of the following LISP program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> chess '<span class=\"br0\">(</span>king queen<span class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> 'rook chess<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) rook king queen",
            "b) king queen rook",
            "c) king queen",
            "d) rook"
        ],
        "Answer": "Answer: a\nExplanation: Cons is used to merge two lists provided to it as an argument. Here one list is rook and other is chess. So, cons will merge rook with chess at form a new list: rook king queen.\nOutput: ROOK KING QUEEN"
    },
    {
        "id": 81,
        "Question": "7. What is the output of the following LISP program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> cricket '<span class=\"br0\">(</span>bat ball racquet<span class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">delete</span> 'racquet cricket<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) bat ball racquet",
            "b) bat ball",
            "c) racquet bat ball",
            "d) racquet"
        ],
        "Answer": "Answer: b\nExplanation: Delete is given racquet as an argument to delete it from list cricket. So, it will delete racquet from the list cricket to form a new list: bat ball.\nOutput: BAT BALL"
    },
    {
        "id": 82,
        "Question": "8. What are 2 and 3 referred as in the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) List",
            "b) Arguments",
            "c) It can be both List and argument",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In LISP programming basic syntax, the first thing written is primitive and then arguments are written. So, in this way + is a primitive and 2,3 are arguments."
    },
    {
        "id": 83,
        "Question": "What is the output of (/ 6 3) and (- 6 4)?",
        "Options": [
            "a) 2 2",
            "b) 1/2 2",
            "c) 2 -2",
            "d) 1/2 -2"
        ],
        "Answer": "Answer: a\nExplanation: Yes, the arithmetic operators are primitives in LISP programming language. For example: in (/ 3 3) / is a primitive."
    },
    {
        "id": 84,
        "Question": "Which is used to build the lisp procedures?",
        "Options": [
            "a) Data",
            "b) Primitives",
            "c) Definition",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Lisp procedures are formed by using lisp primitives and it is the primary purpose of procedure definition.\n"
    },
    {
        "id": 85,
        "Question": "Which primitive removes all but the last element from the list?",
        "Options": [
            "a) Last",
            "b) First",
            "c) Remove",
            "d) Revoke"
        ],
        "Answer": "  Answer: a\nExplanation: “Last” is used whenever there is a requirement of only last element of list.\n"
    },
    {
        "id": 86,
        "Question": "What is a symbol thought of as a name for a place to store value?",
        "Options": [
            "a) Data",
            "b) Variable",
            "c) Parameters",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: A variable is a symbol thought of as a name for a place to store value.\n"
    },
    {
        "id": 87,
        "Question": "How many types of variables are available in lisp?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: There are two kinds of variables available in lisp. They are lexical variable and special variable.\n"
    },
    {
        "id": 88,
        "Question": "What are the variables that are bound and that have values assigned to them?",
        "Options": [
            "a) Data",
            "b) Variable",
            "c) Parameters",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The parameter of a procedure are variables that are bound and have values assigned to them.\n"
    },
    {
        "id": 89,
        "Question": "6. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> meals '<span class=\"br0\">(</span>breakfast lunch tea dinner<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first meals<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> meals<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Breakfast",
            "b) Lunch",
            "c) Dinner",
            "d) Both Breakfast & Dinner"
        ],
        "Answer": "  Answer: d\nExplanation: The statement will print the first and last value of the list because of the condition.\nOutput:\n(BREAKFAST DINNER)\n"
    },
    {
        "id": 90,
        "Question": "7. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> whole-list '<span class=\"br0\">(</span>monday tuesday wednesday thursday friday<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">defun</span> both-ends <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">setf</span> whole-list <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first whole-list<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> whole-list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Monday",
            "b) BOTH-ENDS",
            "c) Friday Monday",
            "d) Monday Friday"
        ],
        "Answer": "  Answer: b\nExplanation: The function defun is used to return the procedure name only.\nOutput:\nBOTH-ENDS\n"
    },
    {
        "id": 91,
        "Question": "8. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> both-ends-with-special <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">setf</span> whole-list <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first whole-list<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> whole-list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> whole-list '<span class=\"br0\">(</span>monday tuesday wednesday thursday friday<span class=\"br0\">)</span><span class=\"br0\">)</span>\n*  <span class=\"br0\">(</span>both-ends-with-special<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Monday",
            "b) Friday",
            "c) Wednesday",
            "d) Both Monday & Friday"
        ],
        "Answer": "  Answer: d\nExplanation: The value of whole-list is erected when a form involving both-ends-with-special is evaluated.\nOutput:\n(MONDAY FRIDAY)\n"
    },
    {
        "id": 92,
        "Question": "9. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> meals '<span class=\"br0\">(</span>breakfast lunch tea dinner<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>first meals<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Breakfast",
            "b) Lunch",
            "c) Tea",
            "d) Dinner"
        ],
        "Answer": "  Answer: a\nExplanation: The keyword first is used to print the first item of the list.\nOutput:\n(BREAKFAST)\n"
    },
    {
        "id": 93,
        "Question": "10. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> x 'outside<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x 'inside<span class=\"br0\">)</span> <span class=\"br0\">(</span>y x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Outside",
            "b) Inside",
            "c) Inside Outside",
            "d) Outside Inside"
        ],
        "Answer": "  Answer: c\nExplanation: This statement is used to reverse the list.\nOutput:\n(INSIDE OUTSIDE)\n"
    },
    {
        "id": 94,
        "Question": "In LISP, symbol represents a _____",
        "Options": [
            "a) Data type",
            "b) Data type and data object",
            "c) Data structure",
            "d) Any of Data type, data object and data structure"
        ],
        "Answer": "Answer: d\nExplanation: In LISP programming, Symbols can be considered all of these. Mostly these are known as data objects and sometimes are also known as data structures or data types."
    },
    {
        "id": 95,
        "Question": "Which primitive is used to define a procedure?",
        "Options": [
            "a) defun",
            "b) defpro",
            "c) defin",
            "d) def"
        ],
        "Answer": "Answer: a\nExplanation: defun is used for defining procedures. defun is the shorthand notation of deine function in LISP programming."
    },
    {
        "id": 96,
        "Question": "Does value of an actual parameter change in the procedure?",
        "Options": [
            "a) Yes",
            "b) No",
            "c) Sometimes",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Yes, the parameters can be passed to procedures. Parameter passing is the most important part of the procedures. Actual parameters are passed to the procedures while function invoking."
    },
    {
        "id": 97,
        "Question": "6. What is the output of the following LISP program? (NOTE: * means new line)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> b<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ p p<span class=\"br0\">)</span> <span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setq</span> z <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>b z<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 1",
            "c) 3",
            "d) error"
        ],
        "Answer": "Answer: a\nExplanation: Yes, the actual and formal parameters can be of same name. The scope of the formal parameter remains within the procedure in this case."
    },
    {
        "id": 98,
        "Question": "7. What will be output of the following LISP program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> b<span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ z z<span class=\"br0\">)</span> <span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setq</span> z <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">write</span> b z<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) 2",
            "c) 1",
            "d) no output"
        ],
        "Answer": "Answer: c\nExplanation: The value of the actual parameter does not change only when the name of actual and formal parameters is same. In all other cases, the value of the actual parameter can change."
    },
    {
        "id": 99,
        "Question": "8. What will be stored in Z at A & B?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> b <span class=\"br0\">(</span>z<span class=\"br0\">)</span>\nz \t\t\t<span class=\"br0\">(</span>Position A<span class=\"br0\">)</span>\n<span class=\"br0\">(</span><span class=\"kw1\">setf</span> z '<span class=\"br0\">(</span>u v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> z '<span class=\"br0\">(</span>c d<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>b z<span class=\"br0\">)</span>\n* z \t\t\t<span class=\"br0\">(</span>Position B<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (C D) (C D)",
            "b) (C D) (U V)",
            "c) (U V) (U V)",
            "d) (U V (C D)"
        ],
        "Answer": "Answer: a\nExplanation: The parameter z=1 is passed to the function named b and then within the function the p+p=2 is done. Thus, function will return 2 as an output of this program.\nOutput: 2"
    },
    {
        "id": 100,
        "Question": "9. What is the output of the following LISP program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> raw<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> p '<span class=\"br0\">(</span><span class=\"kw1\">not</span> cooked<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setq</span> q 'YES<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setq</span> q 'NO<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"br0\">(</span><span class=\"kw1\">setq</span> rice '<span class=\"br0\">(</span><span class=\"kw1\">not</span> cooked<span class=\"br0\">)</span><span class=\"br0\">)</span>\n*<span class=\"br0\">(</span>raw rice<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) YES",
            "b) NO",
            "c) NIL",
            "d) T"
        ],
        "Answer": "Answer: b\nExplanation: It has been shown here that the name of the actual and formal parameters can be same and there will not be any error. z=1 is given to function and then function will return z+z=2 as an output.\nOutput: 2"
    },
    {
        "id": 101,
        "Question": "10. What is the value of (cons q 4) after the execution of this LISP program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply<span class=\"br0\">(</span>p q<span class=\"br0\">)</span> <span class=\"br0\">(</span>* p q<span class=\"br0\">)</span><span class=\"br0\">)</span>\n*<span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span>multiply <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (8 . 8)",
            "b) (4 . 4)",
            "c) (4 . 8)",
            "d) (8 . 4)"
        ],
        "Answer": "Answer: a\nExplanation: The value of actual parameter do not change here because the name of actual parameter and formal parameter is same and thus the scope of variable z remains within the procedure and do not reflect the change out of the procedure.\nOutput: (C D)(C D)"
    },
    {
        "id": 102,
        "Question": "Which arranges for parameters to be bound on entering a procedure?",
        "Options": [
            "a) Form",
            "b) Let",
            "c) Initial",
            "d) Parameter"
        ],
        "Answer": "  Answer: b\nExplanation: LET arranges for parameters to be bound, just as parameter are bound on entering a procedure.\n"
    },
    {
        "id": 103,
        "Question": "How does LET generally begins with?",
        "Options": [
            "a) Parameter list",
            "b) Data",
            "c) Fence",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Parameter list consists of two-elements lists, each of which has a parameter variable and an intial value form.\n"
    },
    {
        "id": 104,
        "Question": "What will happen if a variable had not assigned a value by SETF form?",
        "Options": [
            "a) Warning",
            "b) Nothing will happen",
            "c) Error message",
            "d) Crash"
        ],
        "Answer": "  Answer: c\nExplanation: Because of this condition, it will report an unbound variable error.\n"
    },
    {
        "id": 105,
        "Question": "What is the alternative of LET for parameter binding?",
        "Options": [
            "a) Let",
            "b) Let*",
            "c) Let^",
            "d) Let%"
        ],
        "Answer": "  Answer: b\nExplanation: Let* is like shorthand notation for nested LETs.\n"
    },
    {
        "id": 106,
        "Question": "Which helps you to write procedures on complicated things?",
        "Options": [
            "a) Development",
            "b) Revoke",
            "c) Progressive envelopment",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Progressive envelopment helps you to write procedures on  building complicated things incrementally.\n"
    },
    {
        "id": 107,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> x 'outside<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>x 'inside<span class=\"br0\">)</span> <span class=\"br0\">(</span>y x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">list</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Inside Outside",
            "b) Outside Inside",
            "c) Outside Outside",
            "d) Inside Inside"
        ],
        "Answer": "  Answer: d\nExplanation: X’s and Y’s parameter are on inside only, So it is printing as Inside Inside.\nOutput:\n(INSIDE INSIDE)\n"
    },
    {
        "id": 108,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> both_ends <span class=\"br0\">(</span>whole-list<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>element <span class=\"br0\">(</span>first whole-list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>trailer <span class=\"br0\">(</span><span class=\"kw1\">last</span> whole-list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> element trailer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Both",
            "b) Both_ends",
            "c) Error",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Atfirst element and trailer are assigned to initial value and then element and trailer are combined.\nOutput:\nBOTH_ENDS\n"
    },
    {
        "id": 109,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> both <span class=\"br0\">(</span><span class=\"kw1\">l</span> m<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>both '<span class=\"br0\">(</span>breakfast lunch<span class=\"br0\">)</span> '<span class=\"br0\">(</span>tea dinner<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Breakfast Lunch",
            "b) Tea Dinner",
            "c) Breakfast",
            "d) Breakfast Dinner"
        ],
        "Answer": "  Answer: d\nExplanation: The purpose of both is to combine the first element of one list with the last element of another.\nOutput:\n(BREAKFAST DINNER)\n"
    },
    {
        "id": 110,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> route '<span class=\"br0\">(</span>boston cambridge lincoln concord<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> route<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Boston",
            "b) Cambridge",
            "c) Lincoln",
            "d) Concord"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will print last element of the list.\nOutput:\n(CONCORD)\n"
    },
    {
        "id": 111,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> abc-list '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">last</span> abc-list<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>first <span class=\"br0\">(</span><span class=\"kw1\">last</span> abc-list<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A",
            "b) B",
            "c) C",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will nest function of last with the first.\nOutput:\nC\n"
    },
    {
        "id": 112,
        "Question": "What is a procedure that returns a value that signals true or false?",
        "Options": [
            "a) List",
            "b) Predicates",
            "c) Data",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: A predicate is a procedure that returns a value that signals true or false.\n"
    },
    {
        "id": 113,
        "Question": "Which primitive tests two arguments to see if their values are the same expression?",
        "Options": [
            "a) Equal",
            "b) Eql",
            "c) Eq",
            "d) ="
        ],
        "Answer": "  Answer: a\nExplanation: Equal primitive tests two arguments to see if their values are the same expression. It works on atoms and lists.\n"
    },
    {
        "id": 114,
        "Question": "Which predicate tests to see if its first argument is an element of its second argument?",
        "Options": [
            "a) EQ",
            "b) =",
            "c) MEMBER",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: MEMBER will return what is left of the list when the matching symbol is encountered.\n"
    },
    {
        "id": 115,
        "Question": "What is meant by keyword argument?",
        "Options": [
            "a) Arguments that follows a keyword",
            "b) Lists",
            "c) Data",
            "d) Procedure"
        ],
        "Answer": "  Answer: a\nExplanation: It is used to modify a procedure’s basic behaviour along the line.\n"
    },
    {
        "id": 116,
        "Question": "Which is used to produce a procedure object from a procedure name?",
        "Options": [
            "a) EQ",
            "b) #",
            "c) EQUAL",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: From procedure name to produce procedure object # is used always.\n"
    },
    {
        "id": 117,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) F",
            "d) Both NIL & F"
        ],
        "Answer": "  Answer: b\nExplanation: As 4 is not equal 3, it is printing NIL.\nOutput:\nNIL\n"
    },
    {
        "id": 118,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"sy0\">=</span> '<span class=\"br0\">(</span>this is a <span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) Error",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation:= is used to test two numbers only.\n"
    },
    {
        "id": 119,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">*<span class=\"br0\">(</span><span class=\"kw1\">setf</span> sentence '<span class=\"br0\">(</span>a rough road leads to stars<span class=\"br0\">)</span><span class=\"br0\">)</span>\n*<span class=\"br0\">(</span><span class=\"kw1\">member</span> 'stars sentence<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Stars",
            "b) Road",
            "c) Sentence",
            "d) Leads"
        ],
        "Answer": "  Answer: a\nExplanation: Member is used to see if its first argument is an element of its second argument.\nOutput:\n(STARS)\n"
    },
    {
        "id": 120,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pairs '<span class=\"br0\">(</span><span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> <span class=\"br0\">(</span>apple fruit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">member</span> '<span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> pairs<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Shade",
            "b) Maple",
            "c) T",
            "d) Nil"
        ],
        "Answer": "  Answer: d\nExplanation: Any symbol beginning with a colon is said to be a keyword.\nOutput:\nNIL\n"
    },
    {
        "id": 121,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> predicate #'<span class=\"kw1\">equal</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">member</span> '<span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> <span class=\"br0\">(</span>apple fruit<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">test</span> predicate<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) ((MAPLE SHADE) (APPLE FRUIT))",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Procedure object is build from the procedure by using #, So it is printing ((MAPLE SHADE) (APPLE FRUIT)).\nOutput:\n((MAPLE SHADE) (APPLE FRUIT))\n"
    },
    {
        "id": 122,
        "Question": "Which of the following is used by member primitive to compare arguments?",
        "Options": [
            "a) =",
            "b) equalp",
            "c) equal",
            "d) eql"
        ],
        "Answer": "Answer: d\nExplanation: Eql is used by member argument to compare between its two arguments. Eql is one of the equality predicates and is used to test for numbers and symbols of the same type."
    },
    {
        "id": 123,
        "Question": "Which among these are the data type predicates?",
        "Options": [
            "a) atom",
            "b) symbolp",
            "c) listp & numberp",
            "d) atom, symbol, listp & numberp"
        ],
        "Answer": "Answer: d\nExplanation: Atom, symbolp, listp, numberp all are considered as data type predicates. Atom is used check if an argument is atom or not. Similarly, symbolp is used to check symbols, listp to check lists and numberp to check whether the argument is a number or not."
    },
    {
        "id": 124,
        "Question": "What is the use of zerop?",
        "Options": [
            "a) To check object is zero",
            "b) To check object is NIL",
            "c) To make non-zero object to zero",
            "d) It is same as integerp"
        ],
        "Answer": "Answer: a\nExplanation: It is the predicate used to check whether the argument is zero or not. It will show T (true) only if the argument is numeric zero, that is, 0 and NIL in all other cases."
    },
    {
        "id": 125,
        "Question": "Integerp and Zerop will be same __",
        "Options": [
            "a) When argument is not an integer or equal to 0",
            "b) When argument is not equal to 0",
            "c) When argument is a negative integer",
            "d) When argument is a negative integer and not 0"
        ],
        "Answer": "Answer: a\nExplanation: Both integerp and zerop will be same when both will show either T or NIL. Both will show T when argument is 0 and NIL when argument is not an integer."
    },
    {
        "id": 126,
        "Question": "5. What will be the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">evenp</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>* <span class=\"nu0\">0</span> <span class=\"nu0\">234</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) error",
            "d) 0"
        ],
        "Answer": "Answer: c\nExplanation: Error will occur because zerop will give T as an argument to evenp which is not a number and hence evenp will not work."
    },
    {
        "id": 127,
        "Question": "6. What is the output of the following LISP statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">evenp</span> -<span class=\"nu0\">4234234</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) Number is too large",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: evenp work on negative numbers also. As the number is even so, the output is T.\nOutput: T"
    },
    {
        "id": 128,
        "Question": "7. What is the output of the following LISP statement? (NOTE: Here * refers to a new line)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rock<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setq</span> p <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n*<span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"kw1\">NIL</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> <span class=\"br0\">(</span>rock<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) NIL . NIL",
            "b) ERROR",
            "c) T . NIL",
            "d) NIL"
        ],
        "Answer": "Answer: d\nExplanation: Cons primitive is used to make construct of two arguments given to it. Generally, the cons of A & B is (A . B) but for two NILs it will show only NIL.\nOutput: NIL"
    },
    {
        "id": 129,
        "Question": "8. What will be the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>T <span class=\"kw1\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error due to T and NIL are not lists",
            "b) T",
            "c) NIL",
            "d) T . NIL"
        ],
        "Answer": "Answer: b\nExplanation: The cons of T & NIL is not (T . NIL). In this statement the T will dominate above NIL and thus T . NIL gives T on construct.\nOutput: T"
    },
    {
        "id": 130,
        "Question": "9. What will be the output of the following program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> root<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setq</span> qw 'a<span class=\"br0\">)</span><span class=\"br0\">)</span>\n*<span class=\"br0\">(</span>equalp <span class=\"br0\">(</span>root<span class=\"br0\">)</span> 'a<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (cons NIL NIL)",
            "b) T",
            "c) NIL",
            "d) Error"
        ],
        "Answer": "Answer: b\nExplanation: The function root will return ‘a after execution. Now, this is given as argument to equalp predicate. As both the arguments are ‘a so, the equalp will return T as output.\nOutput: T"
    },
    {
        "id": 131,
        "Question": "10. What will be the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\"><span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> '<span class=\"br0\">(</span>a b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> '<span class=\"br0\">(</span>p q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) P . Q",
            "b) A . B",
            "c) A . Q",
            "d) A . P"
        ],
        "Answer": "Answer: c\nExplanation: car will give the first element of the list. So, one argument becomes A. cdr will give all elements except first element of the list. So, the second argument becomes Q. The cons of A and Q becomes A . Q\nOutput: A . Q"
    },
    {
        "id": 132,
        "Question": "In clause what the zero or more additional forms are called?",
        "Options": [
            "a) Conditional",
            "b) Consequents",
            "c) Clause",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: It is used to move through the clauses and evaluating only the test form.\n"
    },
    {
        "id": 133,
        "Question": "What is the value of last consequent form in the triggered clause?",
        "Options": [
            "a) Value of the entire COND",
            "b) Trigger",
            "c) Consequent",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: The value of the entire COND form is the value of the last consequent form in the triggered clause.\n"
    },
    {
        "id": 134,
        "Question": "What will happen if the value of all the test-forms are nil?",
        "Options": [
            "a) Nothing",
            "b) COND form is nil",
            "c) Both Nothing & COND form is nil",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: If all the test forms are NIL then conditional will also return NIL.\n"
    },
    {
        "id": 135,
        "Question": "Which has a template that calls for particularly peculiar argument evaluation?",
        "Options": [
            "a) COND",
            "b) Consequent",
            "c) Trigger",
            "d) Sphere"
        ],
        "Answer": "  Answer: a\nExplanation: COND is more versatile conditional and it has a template that calls for particularly peculiar argument evaluation.\n"
    },
    {
        "id": 136,
        "Question": "Which checks the evaluated key form against the unevaluated keys using EQL?",
        "Options": [
            "a) COND",
            "b) CASE",
            "c) NIL",
            "d) SETF"
        ],
        "Answer": "  Answer: b\nExplanation: CASE checks the evaluated key form against the unevaluated keys using EQL and if the key is found, the corresponding clause is triggered.\n"
    },
    {
        "id": 137,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>endp '<span class=\"br0\">(</span>this is <span class=\"kw1\">not</span> empty<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) Error",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: ENDP is recommended for empty lists, so it is printing NIL.\nOutput:\nNIL\n"
    },
    {
        "id": 138,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"nu0\">8</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) F",
            "c) NIL",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: EVENP checks whether a given number is even or not.\nOutput:\nT\n"
    },
    {
        "id": 139,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pets '<span class=\"br0\">(</span>dog cat<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> 'dog pets<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> 'tiger pets<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Dog",
            "b) Cat",
            "c) Both Dog & Cat",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: OR will return nonNIL if any argument is nonNIL, So it is printing dog and cat.\nOutput:\n(DOG CAT)\n"
    },
    {
        "id": 140,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> day-or-date 'monday<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">symbolp</span> day-or-date<span class=\"br0\">)</span> 'day 'date<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Monday",
            "b) Day",
            "c) Date",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: As a day is setted up by using setf, it is printing the value as day.\nOutput:\nDAY\n"
    },
    {
        "id": 141,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> high <span class=\"nu0\">98</span> temperature <span class=\"nu0\">102</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> temperature high<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> high temperature<span class=\"br0\">)</span> 'new-record<span class=\"br0\">)</span>\n* high</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 98",
            "b) 102",
            "c) new",
            "d) Error"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will compare the temperature, if higher is recorded, its value will be changed.\nOutput:\n102\n"
    },
    {
        "id": 142,
        "Question": "Which process helps to build large and complicated programs?",
        "Options": [
            "a) Macros",
            "b) Procedure abstraction",
            "c) Defun",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Procedure abstraction process helps to build large and complicated programs and it is easy to understand.\n"
    },
    {
        "id": 143,
        "Question": "Which abstractions have a prescribed behavior?",
        "Options": [
            "a) Auxiliary procedures",
            "b) Procedure abstraction",
            "c) Primary procedures",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Auxiliary procedures will help to produce a proper result and it will have a prescribed behavior.\n"
    },
    {
        "id": 144,
        "Question": "What is the process of arranging procedures into layers?",
        "Options": [
            "a) Procedure",
            "b) Abstraction",
            "c) Abstraction layers",
            "d) Procedure abstraction"
        ],
        "Answer": "  Answer: c\nExplanation: Abstraction layers helps to arrange procedures into layers.\n"
    },
    {
        "id": 145,
        "Question": "Which is used to seperate the abstraction layers?",
        "Options": [
            "a) Abstraction boundaries",
            "b) Data",
            "c) Procedure",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Abstraction boundaries help to keep abstraction layers separate from each other.\n"
    },
    {
        "id": 146,
        "Question": "Which hides details behind abstraction boundaries?",
        "Options": [
            "a) Procedures",
            "b) Procedure abstraction",
            "c) Recursion",
            "d) Both Procedures & Procedure abstraction"
        ],
        "Answer": "  Answer: b\nExplanation: Procedure abstraction hides details behind abstraction boundaries and it is increase the security between layers.\n"
    },
    {
        "id": 147,
        "Question": "6. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">*<span class=\"br0\">(</span><span class=\"kw1\">setf</span> thing 'sphere r <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span> thing 'circle<span class=\"br0\">)</span> <span class=\"br0\">(</span>* pi r r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>* <span class=\"nu0\">4</span> pi r r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10.566",
            "b) 11.5683",
            "c) 12.56637",
            "d) 13"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will help to find the area of sphere.\nOutput:\n12.566370614359172d0\n"
    },
    {
        "id": 148,
        "Question": "7. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> p <span class=\"sy0\">.</span>6<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> p <span class=\"sy0\">.</span>75<span class=\"br0\">)</span> 'very-likely<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> p <span class=\"sy0\">.</span>5<span class=\"br0\">)</span> 'likely<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> p <span class=\"sy0\">.</span>25<span class=\"br0\">)</span> 'unlikely<span class=\"br0\">)</span><span class=\"br0\">(</span>t 'very-unlikely<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Very-likely",
            "b) Likely",
            "c) Unlikely",
            "d) Very-unlikely"
        ],
        "Answer": "  Answer: b\nExplanation: As the value p is .6, it is printing likely.\nOutput:\nLIKELY\n"
    },
    {
        "id": 149,
        "Question": "8. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> thing 'point r <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">case</span> thing <span class=\"br0\">(</span>circle <span class=\"br0\">(</span>*pi r r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>sphere <span class=\"br0\">(</span>* <span class=\"nu0\">4</span> pi r r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 12.56637",
            "c) NIL",
            "d) T"
        ],
        "Answer": "  Answer: c\nExplanation: As the value is not matched, it is printing as NIL.\nOutput:\nNIL\n"
    },
    {
        "id": 150,
        "Question": "9. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> breakfast '<span class=\"br0\">(</span>eggs bacon toast tea<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> breakfast<span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> 'glutton<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>endp breakfast<span class=\"br0\">)</span><span class=\"br0\">)</span> 'normal<span class=\"br0\">)</span><span class=\"br0\">(</span>t 'anorexic<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Anorexic",
            "b) Breakfast",
            "c) Eggs",
            "d) Normal"
        ],
        "Answer": "  Answer: d\nExplanation: As breakfast is not empty, It is printing normal.\nOutput:\nNORMAL\n"
    },
    {
        "id": 151,
        "Question": "10. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> thing 'point r <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">case</span> thing <span class=\"br0\">(</span>circle <span class=\"br0\">(</span>*pi r r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>sphere <span class=\"br0\">(</span>* <span class=\"nu0\">4</span> pi r r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>otherwise <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 0",
            "c) 12.566",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Otherwise is like else statement, So it is printing 0.\nOutput:\n0\n"
    },
    {
        "id": 152,
        "Question": "Which is bounded to a list of all unaccounted argument values?",
        "Options": [
            "a) REST",
            "b) &REST",
            "c) RAISE",
            "d) &RAISE"
        ],
        "Answer": "  Answer: b\nExplanation: A rest parameter will be marked by &REST and it is bounded to a list of all unaccounted argument values.\n"
    },
    {
        "id": 153,
        "Question": "Which allow procedures to use themselves again?",
        "Options": [
            "a) Recursion",
            "b) Reuse",
            "c) Reintiate",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Recursion allows procedures to use themselves again and again.\n"
    },
    {
        "id": 154,
        "Question": "Which eliminate the need for many auxiliaries?",
        "Options": [
            "a) Parameters",
            "b) Block parameters",
            "c) Optional parameters",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: None.\n"
    },
    {
        "id": 155,
        "Question": "Which can appear without an initial form?",
        "Options": [
            "a) Parameter",
            "b) Block parameter",
            "c) Optional parameter",
            "d) Aux parameter"
        ],
        "Answer": "  Answer: d\nExplanation: An aux parameter can appear without an initial form, in which case there are no surrounding parentheses.\n"
    },
    {
        "id": 156,
        "Question": "What value will assigned, if there is no argument marked by a matching keyword?",
        "Options": [
            "a) T",
            "b) NIL",
            "c) False",
            "d) Both NIL & False"
        ],
        "Answer": "  Answer: b\nExplanation: If there is no argument marked by a matching keyword, the corresponding keyword parameter is bound to NIL.\n"
    },
    {
        "id": 157,
        "Question": "6. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> higher-level-expt <span class=\"br0\">(</span>m n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span>* m<span class=\"br0\">(</span>lower-level-expt m <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Higher",
            "b) Higher-level-expt",
            "c) Lower",
            "d) Lower-level-expt"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will print higher-level-expt because it is defined atfirst.\nOutput:\nHIGHER-LEVEL-EXPT\n"
    },
    {
        "id": 158,
        "Question": "7. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> root <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span>optional n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> n <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"br0\">(</span>/ <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>sprt x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>root <span class=\"nu0\">27</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 27",
            "c) 3.0",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement is used to find out the square root of the given value.\nOutput:\n3.0\n"
    },
    {
        "id": 159,
        "Question": "8. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> punc <span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"kw1\">l</span> '<span class=\"br0\">(</span>period<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>punc '<span class=\"br0\">(</span>this<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) This",
            "b) Period",
            "c) This period",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will append the period to the end of the given statement.\nOutput:\n(THIS PERIOD)\n"
    },
    {
        "id": 160,
        "Question": "9. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> raise-aux <span class=\"br0\">(</span>result number-list<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp number-list<span class=\"br0\">)</span> result <span class=\"br0\">(</span>raise-aux <span class=\"br0\">(</span><span class=\"kw1\">expt</span> result <span class=\"br0\">(</span>first number-list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rest number-list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">defun</span> raise <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span>rest numbers<span class=\"br0\">)</span> <span class=\"br0\">(</span>raise-aux x numbers<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>raise <span class=\"nu0\">5</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 3",
            "c) 125",
            "d) 25"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will print first argument raised to power second argument.\nOutput:\n125\n"
    },
    {
        "id": 161,
        "Question": "10. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; *  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pairs '<span class=\"br0\">(</span><span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> <span class=\"br0\">(</span>apple fruit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">member</span> '<span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span> <span class=\"br0\">(</span>maple shade<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">test-not</span> #'<span class=\"kw1\">equal</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Maple",
            "b) Shade",
            "c) Nil",
            "d) T"
        ],
        "Answer": "  Answer: c\nExplanation: This statement is used to test the given statement for its equality.\nOutput:\nNIL\n"
    },
    {
        "id": 162,
        "Question": "Which process helps to build a large and complicated programs?",
        "Options": [
            "a) Abstraction",
            "b) Mapping",
            "c) Data abstraction",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Data abstraction process helps to build a large and complicated programs.\n"
    },
    {
        "id": 163,
        "Question": "What is partly embedded in the knowledge of your programming for manipulating applications?",
        "Options": [
            "a) Programming cliches",
            "b) Procedures",
            "c) Abstraction",
            "d) Data"
        ],
        "Answer": "  Answer: a\nExplanation: The knowledge of programming is embedded partly in applicable templates called programming cliches.\n"
    },
    {
        "id": 164,
        "Question": "How many items are available in mapping primitives are there?",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 5",
            "d) 6"
        ],
        "Answer": "  Answer: c\nExplanation: There are five items in mapping primitives.  They are mapcar, remove-if, remove-if-not, count-if and find-if.\n"
    },
    {
        "id": 165,
        "Question": "Which makes it easy to identify the first entry encountered that satisfies a given predicate?",
        "Options": [
            "a) Reusing",
            "b) Revoking",
            "c) Template",
            "d) Filtering"
        ],
        "Answer": "  Answer: d\nExplanation: Filtering makes it easy to identify the first entry encountered that satisfies a given predicate.\n"
    },
    {
        "id": 166,
        "Question": "How many access procedures are available in lisp?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: c\nExplanation: The access procedures available in lisp are constructors, readers and writers.\n"
    },
    {
        "id": 167,
        "Question": "6. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> book-author <span class=\"br0\">(</span>book<span class=\"br0\">)</span> <span class=\"br0\">(</span>second book<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> book-example-<span class=\"nu0\">1</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span>Artificial Intelligence<span class=\"br0\">)</span> <span class=\"br0\">(</span>Patrick<span class=\"br0\">)</span> <span class=\"br0\">(</span>Technical AI<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>book-author book-example-<span class=\"nu0\">1</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Artificial Intelligence",
            "b) Patrick",
            "c) Technical AI",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will define the book author and it will reveal the author from the any statement.\nOutput:\n(PATRICK)\n"
    },
    {
        "id": 168,
        "Question": "7. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">make</span> <span class=\"br0\">(</span>title author<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'title title<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'author author<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> book <span class=\"br0\">(</span><span class=\"kw1\">make</span> '<span class=\"br0\">(</span>Common Lisp<span class=\"br0\">)</span> '<span class=\"br0\">(</span>Guy steele<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Common Lisp",
            "b) Guy steele",
            "c) Make",
            "d) ((TITLE (COMMON LISP)) (AUTHOR (GUY STEELE)))"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will print the values according to the classification.\nOutput:\n((TITLE (COMMON LISP)) (AUTHOR (GUY STEELE)))\n"
    },
    {
        "id": 169,
        "Question": "8. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">make</span> <span class=\"br0\">(</span>title author<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'title title<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'author author<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> book <span class=\"br0\">(</span><span class=\"kw1\">make</span> '<span class=\"br0\">(</span>Common Lisp<span class=\"br0\">)</span> '<span class=\"br0\">(</span>Guy steele<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n*  <span class=\"br0\">(</span><span class=\"kw1\">defun</span> book-author-writer <span class=\"br0\">(</span>book author<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'author author<span class=\"br0\">)</span> book<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Book",
            "b) Book-author",
            "c) Book-author-writer",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will print the defined value.\nOutput:\nBOOK-AUTHOR-WRITER\n"
    },
    {
        "id": 170,
        "Question": "9. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> book <span class=\"br0\">(</span>book<span class=\"sy0\">=</span>author-writer book '<span class=\"br0\">(</span>guy steele<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Guy",
            "b) Steele",
            "c) Error",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will print the error because is not defined.\n"
    },
    {
        "id": 171,
        "Question": "10. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span>  <span class=\"br0\">(</span>input-list<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp input-list<span class=\"br0\">)</span> <span class=\"kw1\">nil</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>first input-list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>rest input-list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Procedure",
            "b) Transforming",
            "c) Input",
            "d) Error"
        ],
        "Answer": "  Answer: d\nExplanation: Because the procedure is not a type of list, So it is printing a error.\n"
    },
    {
        "id": 172,
        "Question": "Which makes the data to easily transform lists?",
        "Options": [
            "a) Car",
            "b) Mapcar",
            "c) Map",
            "d) Maplist"
        ],
        "Answer": "  Answer: b\nExplanation: Mapcar primitive makes the data to transform lists.\n"
    },
    {
        "id": 173,
        "Question": "To which procedure does mapcar is not restricted?",
        "Options": [
            "a) List",
            "b) Datachar",
            "c) Procedure of one parameter",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The procedure mapcar uses is not restricted to be procedure of one parameter.\n"
    },
    {
        "id": 174,
        "Question": "Which forms offer an alternative to the recursive transformation cliche?",
        "Options": [
            "a) Mapcar",
            "b) Maplist",
            "c) Mapdata",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Mapcar forms offer an alternative to the recursive transformation cliche.\n"
    },
    {
        "id": 175,
        "Question": "How many procedures are available in lists to filter them?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: The two procedures available to filter lists are remove-if and remove-if-not.\n"
    },
    {
        "id": 176,
        "Question": "Which enables to define procedures that have procedure arguments?",
        "Options": [
            "a) Funargs",
            "b) Mapcar",
            "c) Fun",
            "d) Funcall"
        ],
        "Answer": "  Answer: b\nExplanation: None.\n"
    },
    {
        "id": 177,
        "Question": "6. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">oddp</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T NIL",
            "b) NIL",
            "c) T",
            "d) T NIL T"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will print odd numbers as true and all the even numbers as false.\nOutput:\n(T NIL T)\n"
    },
    {
        "id": 178,
        "Question": "7. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> #'first '<span class=\"br0\">(</span>e1 e2 e3<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>first '<span class=\"br0\">(</span>e1 e2 e3<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) E1",
            "b) E1 * E1",
            "c) *",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will print first procedure argument from both the lists.\nOutput:\nE1\n*\nE1\n"
    },
    {
        "id": 179,
        "Question": "8. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"sy0\">=</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) NIL T NIL",
            "b) T NIL",
            "c) T NIL T",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will compare the values from both the lists and print the result.\nOutput:\n(NIL T NIL)\n"
    },
    {
        "id": 180,
        "Question": "9. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> '<span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 43",
            "b) 444",
            "c) 32",
            "d) 21"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will add all the values given in the list.\nOutput:\n21\n"
    },
    {
        "id": 181,
        "Question": "10. What is the output of the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> #'<span class=\"kw1\">append</span> '<span class=\"br0\">(</span>a b<span class=\"br0\">)</span> '<span class=\"br0\">(</span>x y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> '<span class=\"br0\">(</span>a b<span class=\"br0\">)</span> '<span class=\"br0\">(</span>x y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (A B X Y) * (A)",
            "b) (A B X Y) * (A B)",
            "c) (A B X Y) * (A B C Y)",
            "d) (A B X Y) * (A B X Y)"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will append the values from both the lists.\nOutput:\n(A B X Y)\n*\n(A B X Y)\n"
    },
    {
        "id": 182,
        "Question": "Which is a general strategy for controlling how a computation evolves?",
        "Options": [
            "a) Recursion",
            "b) Mapping",
            "c) Iteration",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Iteration is said to be one kind of control strategy and it is a general strategy for controlling how a computation evolves.\n"
    },
    {
        "id": 183,
        "Question": "Which provides a way to write simple counting-oriented iteration procedures?",
        "Options": [
            "a) Do",
            "b) Dotimes",
            "c) Recursion",
            "d) Iteration"
        ],
        "Answer": "  Answer: b\nExplanation: Dotimes provides a way to write simple counting-oriented iteration procedures.\n"
    },
    {
        "id": 184,
        "Question": "What will happen if a dotimes form has no result form?",
        "Options": [
            "a) Nil",
            "b) T",
            "c) Both Nil & T",
            "d) Nothing"
        ],
        "Answer": "  Answer: a\nExplanation: If a dotimes form has no result form, the dotimes will return nil and its purpose is to arrange for side effects.\n"
    },
    {
        "id": 185,
        "Question": "What will be occupied in the first part of DO?",
        "Options": [
            "a) Procedures",
            "b) List",
            "c) Iterators",
            "d) List of parameters"
        ],
        "Answer": "  Answer: d\nExplanation: The first part of a DO is always occupied by a list of parameters that are all bound to initial values.\n"
    },
    {
        "id": 186,
        "Question": "Which are evaluated before initial binding?",
        "Options": [
            "a) All initialisation forms",
            "b) Iterations",
            "c) Procedures",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: All initialization forms are evaluated before before inital binding.\n"
    },
    {
        "id": 187,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">prog1</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> a 'x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">Setf</span> b 'y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> c 'z<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) X",
            "b) Y",
            "c) Z",
            "d) XYZ"
        ],
        "Answer": "  Answer: a\nExplanation: The statement contains prog1 which is used to print the first value of the given list.\nOutput:\nX\n"
    },
    {
        "id": 188,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> dotimes-expt <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\n<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">;</span>\n<span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>count <span class=\"nu0\">4</span> result<span class=\"br0\">)</span><span class=\"co1\">;</span>\n<span class=\"br0\">(</span><span class=\"kw1\">setf</span> result <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) 16"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will calculate the power in given terms.\nOutput:\n16\n"
    },
    {
        "id": 189,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> freezing <span class=\"nu0\">32</span> boiling <span class=\"nu0\">212</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 32",
            "b) 212",
            "c) Both 32 & 212",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will return last value always.\nOutput:\n212\n"
    },
    {
        "id": 190,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> cheers '<span class=\"br0\">(</span>cheer cheer cheer<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> loop-count <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>endp cheers<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> loop-count<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> cheers <span class=\"br0\">(</span>rest cheers<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> loop-count <span class=\"br0\">(</span>+ loop-count <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 2",
            "c) Cheers",
            "d) 3"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will count the number of times does the cheers appears by loop.\nOutput:\n3\n"
    },
    {
        "id": 191,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> a 'x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> b 'y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">Setf</span> c 'z<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) X",
            "b) Y",
            "c) Z",
            "d) XYZ"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will make the use of progn to print last value in the given list.\nOutput:\nZ\n"
    },
    {
        "id": 192,
        "Question": "Which translate the procedures into equivalent computer instructions?",
        "Options": [
            "a) File",
            "b) Compile-file",
            "c) Compiler",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Compile-file is mainly used to translate the procedures into equivalent computer instructions.\n"
    },
    {
        "id": 193,
        "Question": "Which primitive is used to create or modify a specified file?",
        "Options": [
            "a) File",
            "b) Manipulation",
            "c) ED",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: To create or modify a file, we can use ED primitive.\n"
    },
    {
        "id": 194,
        "Question": "How the files are specified in lisp?",
        "Options": [
            "a) Strings",
            "b) Characters",
            "c) Booleans",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Files are specified as strings, which is one lisp’s data type.\n"
    },
    {
        "id": 195,
        "Question": "Which has its own convention for doing the basic maneuvers?",
        "Options": [
            "a) Lisp",
            "b) Compiler",
            "c) Lisp",
            "d) Editor"
        ],
        "Answer": "  Answer: d\nExplanation: Editors have their own convention for doing basic maneuvers.\n"
    },
    {
        "id": 196,
        "Question": "To which value does the lisp compiler is evaluated?",
        "Options": [
            "a) File",
            "b) String",
            "c) Compile-File",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Lisp compiler is used to evaluate a compile-file form.\n"
    },
    {
        "id": 197,
        "Question": "What is produced from compile-file?",
        "Options": [
            "a) Text file",
            "b) Binary file",
            "c) Lsp file",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Compile-file produces a binary file full of unintelligible computer instructions expressed by a bit sequences.\n"
    },
    {
        "id": 198,
        "Question": "What is the correct syntax form of the given statement?",
        "Options": [
            "a) (ed <file specification>)",
            "b) (ef <file name>)",
            "c) (ed <file location>)",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Thus the syntax of ED primitive is given.\n"
    },
    {
        "id": 199,
        "Question": "What is the correct syntax form of the given statement?",
        "Options": [
            "a) (load <file>)",
            "b) (load <file attributes>)",
            "c) (load)",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Load primitive is used to read from files.\n"
    },
    {
        "id": 200,
        "Question": "What is the correct syntax form of the given statement?",
        "Options": [
            "a) (compile-file <target file specification>)",
            "b) (compile <target file specification>)",
            "c) (compile-file <source file specification>)",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: In Syntax; source file specification comes instead of target-file. So, compile-file <source file specification> is the correct syntax.\n"
    },
    {
        "id": 201,
        "Question": "Which is used to compile individual procedures?",
        "Options": [
            "a) Compile-file",
            "b) ED",
            "c) Compile",
            "d) Load"
        ],
        "Answer": "  Answer: c\nExplanation: Lisp provides a way to compile individual procedures by the use of compile.\n"
    },
    {
        "id": 202,
        "Question": "Which can read expressions from data-files one at a time?",
        "Options": [
            "a) Print",
            "b) With-open-file",
            "c) Directive",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: With-open-file can read expressions from data files one at a time, as they are needed for processing.\n"
    },
    {
        "id": 203,
        "Question": "Which evaluates the single argument and prints it on a new line?",
        "Options": [
            "a) Format",
            "b) With-open-file",
            "c) Print",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The print primitive evaluates its single argument and prints it on a new line and prints a trailing space character.\n"
    },
    {
        "id": 204,
        "Question": "Which primitive makes the messages consists of uppercase and lowercase letters?",
        "Options": [
            "a) Format",
            "b) Directive",
            "c) Print",
            "d) Read"
        ],
        "Answer": "  Answer: a\nExplanation: Format primitive helps to create messages consisting of both uppercase and lowercase letters.\n"
    },
    {
        "id": 205,
        "Question": "Which evaluates the expression twice during execution?",
        "Options": [
            "a) Read",
            "b) Eval",
            "c) Format",
            "d) Print"
        ],
        "Answer": "  Answer: b\nExplanation: Eval evaluates the expression twice during execution.\n"
    },
    {
        "id": 206,
        "Question": "Which makes it possible to print in tabulated columns?",
        "Options": [
            "a) Print",
            "b) Read",
            "c) Directive",
            "d) Format"
        ],
        "Answer": "  Answer: d\nExplanation: Format also has the option to print the values in tabulated columns.\n"
    },
    {
        "id": 207,
        "Question": "a) 100",
        "Options": [
            "b) 200",
            "c) 0",
            "d) 100",
            "   100"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will print the print forms and Print’s action.\nOutput:\n100\n100\n"
    },
    {
        "id": 208,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>read<span class=\"br0\">)</span>kirsh</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Kirsh",
            "b) T",
            "c) Nil",
            "d) Error"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will print the given value.\nOutput:\nKIRSH\n"
    },
    {
        "id": 209,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">;</span>\n<span class=\"br0\">(</span><span class=\"kw1\">print</span> '<span class=\"br0\">(</span>please type a patient <span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> p <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">;</span>\n<span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> '<span class=\"br0\">(</span>ok the <span class=\"kw1\">name</span> is<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>p<span class=\"br0\">)</span><span class=\"co1\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Nil",
            "b) T",
            "c) Error",
            "d) The value you entered"
        ],
        "Answer": "  Answer: d\nExplanation: Thish statement will get the value from the terminal and print it.\nOutput:\ndfa\n(PLEASE TYPE A PATIENT NAME)\n(OK THE NAME IS DFA)\nDFA\n"
    },
    {
        "id": 210,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>format t <span class=\"st0\">\"Hello!\"</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello",
            "b) T",
            "c) Hello! NIL",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will compare the value and print the result.\nOutput:\nHello! NIL\n"
    },
    {
        "id": 211,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"kw1\">name</span> 'kirsh symptoms '<span class=\"br0\">(</span>fever rash<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'patient <span class=\"kw1\">name</span> 'presented <span class=\"br0\">(</span><span class=\"kw1\">length</span> symptoms<span class=\"br0\">)</span> 'symptoms symptoms<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Patient",
            "b) Krish",
            "c) 2",
            "d) (PATIENT KIRSH PRESENTED 2 SYMPTOMS (FEVER RASH))"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will count the number of symptoms in the given name and print the result.\nOutput:\n(PATIENT KIRSH PRESENTED 2 SYMPTOMS (FEVER RASH))\n"
    },
    {
        "id": 212,
        "Question": "Which primitive is used to connect the files with the streams?",
        "Options": [
            "a) Read",
            "b) Format",
            "c) With-open-file",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Streams are created, variables are bound to them and they are connected to files using with-open-file.\n"
    },
    {
        "id": 213,
        "Question": "How many types of streams are available in lisp?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: There are two types of streams available in streams. They are input and output streams.\n"
    },
    {
        "id": 214,
        "Question": "Which stream is involved with print and format forms?",
        "Options": [
            "a) Input",
            "b) Output",
            "c) Both Input & Output",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Output streams are involved with print and format forms.\n"
    },
    {
        "id": 215,
        "Question": "What will happen if nil is supplied as second argument in read form?",
        "Options": [
            "a) T",
            "b) Value",
            "c) Nil",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: In this case read will return NIL, instead of giving error.\n"
    },
    {
        "id": 216,
        "Question": "How many types of read forms are available in file manipulation?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: The two types of read forms available in read form are read-line and read-char.\n"
    },
    {
        "id": 217,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">eval</span> <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) Error"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will add up the given values and print out the result.\nOutput:\n4\n"
    },
    {
        "id": 218,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"txt\"><pre class=\"de1\">* (length '(a b c))\n* (reverse '(a b c))</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) C B A",
            "c) A B C",
            "d) Both 3 & C B A"
        ],
        "Answer": "  Answer: d\nExplanation: First statement will print the length and second statement will reverse the string.\nOutput:\n3\n(C B A)\n"
    },
    {
        "id": 219,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>elt <span class=\"st0\">\"stevejobs\"</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) o",
            "b) e",
            "c) #/o",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will print the index sixth letter of the given string.\nOutput:\n#/o\n"
    },
    {
        "id": 220,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>read-line<span class=\"br0\">)</span>This is a test<span class=\"sy0\">.</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) This is a test.",
            "b) Nil",
            "c) Error",
            "d) Both This is a test. & Nil"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will read the given line and print it.\nOutput:\n“This is a test.”\nNIL\n"
    },
    {
        "id": 221,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>search <span class=\"st0\">\"boris\"</span> <span class=\"st0\">\"katz, boris\"</span> <span class=\"sy0\">:</span><span class=\"me1\">test</span> #'char-equal<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Katz",
            "b) Boris",
            "c) 6",
            "d) Error"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will search for the given string and print index of first letter that match.\nOutput:\n6\n"
    },
    {
        "id": 222,
        "Question": "Which arranges for one object to be placed on another?",
        "Options": [
            "a) Put-on",
            "b) Put-up",
            "c) Variable",
            "d) List"
        ],
        "Answer": "  Answer: a\nExplanation: Put-on arranges the object one after the another in lisp.\n"
    },
    {
        "id": 223,
        "Question": "How the put-on will succeed in lisp?",
        "Options": [
            "a) No error",
            "b) All procedures failed",
            "c) All sub-procedures succeeds",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Put-on will succeed only if all its sub-procedures succeed.\n"
    },
    {
        "id": 224,
        "Question": "Which should report when lisp is encountered with unexpected situations?",
        "Options": [
            "a) List",
            "b) Procedures",
            "c) Variables",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Procedures should report on what is going on when they encounter unexpected situations.\n"
    },
    {
        "id": 225,
        "Question": "Which causes procedures to print their arguments and values?",
        "Options": [
            "a) Time",
            "b) Describe",
            "c) Trace",
            "d) Break"
        ],
        "Answer": "  Answer: c\nExplanation: Trace causes procedures to print their arguments and values.\n"
    },
    {
        "id": 226,
        "Question": "Which stops evaluation so that you can evaluate forms?",
        "Options": [
            "a) Time",
            "b) Describe",
            "c) Trace",
            "d) Break"
        ],
        "Answer": "  Answer: d\nExplanation: To evaluate forms, break is used which will stops evaluation and we can evaluate forms.\n"
    },
    {
        "id": 227,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-atoms <span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"co1\">;</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">atom</span> expression<span class=\"br0\">)</span>\n  <span class=\"nu0\">1</span>\n  <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>count-atoms <span class=\"br0\">(</span>first expression<span class=\"br0\">)</span><span class=\"br0\">)</span>\n  <span class=\"br0\">(</span>count-atoms <span class=\"br0\">(</span>rest expression<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>count-atoms '<span class=\"br0\">(</span><span class=\"br0\">(</span>this is<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Count-atoms",
            "b) 4",
            "c) Count",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will reoccur over the statement again and again.\nOutput:\n4\n"
    },
    {
        "id": 228,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-atoms <span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"co1\">;</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">atom</span> expression<span class=\"br0\">)</span>\n  <span class=\"nu0\">1</span>\n  <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>count-atoms <span class=\"br0\">(</span>first expression<span class=\"br0\">)</span><span class=\"br0\">)</span>\n  <span class=\"br0\">(</span>count-atoms <span class=\"br0\">(</span>rest expression<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n*<span class=\"br0\">(</span>count-atoms '<span class=\"br0\">(</span><span class=\"br0\">(</span>this is<span class=\"br0\">)</span> <span class=\"br0\">(</span>a test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 6",
            "d) 7"
        ],
        "Answer": "  Answer: d\nExplanation:\n0: (COUNT-ATOMS ((THIS IS) (A TEST)))\n    1: (COUNT-ATOMS (THIS IS))\n      2: (COUNT-ATOMS THIS)\n      2: COUNT-ATOMS returned 1\n      2: (COUNT-ATOMS (IS))\n        3: (COUNT-ATOMS IS)\n        3: COUNT-ATOMS returned 1\n        3: (COUNT-ATOMS NIL)\n        3: COUNT-ATOMS returned 1\n      2: COUNT-ATOMS returned 2\n    1: COUNT-ATOMS returned 3\n    1: (COUNT-ATOMS ((A TEST)))\n      2: (COUNT-ATOMS (A TEST))\n        3: (COUNT-ATOMS A)\n        3: COUNT-ATOMS returned 1\n        3: (COUNT-ATOMS (TEST))\n          4: (COUNT-ATOMS TEST)\n          4: COUNT-ATOMS returned 1\n          4: (COUNT-ATOMS NIL)\n          4: COUNT-ATOMS returned 1\n        3: COUNT-ATOMS returned 2\n      2: COUNT-ATOMS returned 3\n      2: (COUNT-ATOMS NIL)\n      2: COUNT-ATOMS returned 1\n    1: COUNT-ATOMS returned 4\n  0: COUNT-ATOMS returned 7\nOutput:\n7\n"
    },
    {
        "id": 229,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> current <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"co1\">;</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n  <span class=\"nu0\">1</span>\n  <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>minus-one n<span class=\"br0\">)</span> <span class=\"br0\">(</span>minus-two n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">defun</span> minus-one <span class=\"br0\">(</span>n<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span>current <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">defun</span> minus-two <span class=\"br0\">(</span>n<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span>current <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Minus-one",
            "b) Minus-two",
            "c) Error",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Because of the given statement the control stack will be exhausted.\n"
    },
    {
        "id": 230,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> symbol-example '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>describe 'symbol-example<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A",
            "b) B",
            "c) C",
            "d) Description of symbol-example"
        ],
        "Answer": "  Answer: d\nExplanation: Describe is used to print the information about the current procedure or variable.\nOutput:\nCOMMON-LISP-USER::SYMBOL-EXAMPLE\n  [symbol]\nSYMBOL-EXAMPLE names an undefined variable:\n  Value: (A B C)\n"
    },
    {
        "id": 231,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-atoms <span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"co1\">;</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">atom</span> expression<span class=\"br0\">)</span>\n  <span class=\"nu0\">1</span>\n  <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>count-atoms <span class=\"br0\">(</span>first expression<span class=\"br0\">)</span><span class=\"br0\">)</span>\n  <span class=\"br0\">(</span>count-atoms <span class=\"br0\">(</span>rest expression<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>time <span class=\"br0\">(</span>count-atoms '<span class=\"br0\">(</span><span class=\"br0\">(</span>this is<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) Depending on your compiler",
            "c) Error",
            "d) Both 4 & Depending on your compiler"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will print the information about the compilation and resource used.\nOutput:\n 0: (COUNT-ATOMS ((THIS IS)))\n    1: (COUNT-ATOMS (THIS IS))\n      2: (COUNT-ATOMS THIS)\n      2: COUNT-ATOMS returned 1\n      2: (COUNT-ATOMS (IS))\n        3: (COUNT-ATOMS IS)\n        3: COUNT-ATOMS returned 1\n        3: (COUNT-ATOMS NIL)\n        3: COUNT-ATOMS returned 1\n      2: COUNT-ATOMS returned 2\n    1: COUNT-ATOMS returned 3\n    1: (COUNT-ATOMS NIL)\n    1: COUNT-ATOMS returned 1\n  0: COUNT-ATOMS returned 4\nEvaluation took:\n  0.001 seconds of real time\n  0.000000 seconds of total run time (0.000000 user, 0.000000 system)\n  0.00% CPU\n  14 forms interpreted\n  1,654,235 processor cycles\n  43,976 bytes \n4\n"
    },
    {
        "id": 232,
        "Question": "Which procedure is used to create data?",
        "Options": [
            "a) List",
            "b) Variable",
            "c) Constructor",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: A procedure that creates data is a constructor.\n"
    },
    {
        "id": 233,
        "Question": "How many values that a symbol may have?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: Symbols may have property values as well as ordinary values.\n"
    },
    {
        "id": 234,
        "Question": "Which enables storage in symbolically indexed places?",
        "Options": [
            "a) Properties",
            "b) Procedures",
            "c) Variable",
            "d) List"
        ],
        "Answer": "  Answer: a\nExplanation: Properties enables storage in symbolically indexed places.\n"
    },
    {
        "id": 235,
        "Question": "What is the collection of property names and values associated with a symbol?",
        "Options": [
            "a) List",
            "b) Property",
            "c) Procedures",
            "d) Property list"
        ],
        "Answer": "  Answer: d\nExplanation: The collection of property names and values associated with a symbol is said to be property list.\n"
    },
    {
        "id": 236,
        "Question": "Which is used as writer for properties?",
        "Options": [
            "a) Setf",
            "b) Get",
            "c) Both Setf & Get",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The setf used together with get, is the writer for properties.\n"
    },
    {
        "id": 237,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'patrick 'parents<span class=\"br0\">)</span> '<span class=\"br0\">(</span>robert dorothy<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Robert",
            "b) Dorothy",
            "c) Error",
            "d) Robert Dorothy"
        ],
        "Answer": "  Answer: d\nExplanation: This statement is used to reterieve the contents from a property.\nOutput:\n(ROBERT DOROTHY)\n"
    },
    {
        "id": 238,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'bag 'contents<span class=\"br0\">)</span> '<span class=\"br0\">(</span>bread butter<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'bag 'contents<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Bread butter",
            "b) Bread",
            "c) Butter",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: This statement contains get which is used to reterieve the data.\nOutput:\n(BREAD BUTTER)\n"
    },
    {
        "id": 239,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'bag 'contents<span class=\"br0\">)</span> '<span class=\"br0\">(</span>bread butter<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'bag 'contents<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">remprop</span> 'bag 'contents<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Bread",
            "b) Butter",
            "c) (CONTENTS (BREAD BUTTER))",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement is used to remove the contents from the bag property.\nOutput:\n(CONTENTS (BREAD BUTTER))\n"
    },
    {
        "id": 240,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'bag 'contents<span class=\"br0\">)</span> '<span class=\"br0\">(</span>bread butter<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">remprop</span> 'bag 'contents<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'bag 'contents<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) Nil",
            "c) Bread Butter",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will get the content after removing the data, So it is printing as Nil.\nOutput:\nNIL\n"
    },
    {
        "id": 241,
        "Question": "Pick out the correct syntax in given order.",
        "Options": [
            "a) (setf (get <symbol> <property name>) <property value>)",
            "b) (setf (get <property name>)",
            "c) (setf <property value> (get <symbol> <property name>)",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: The setf and get are used as writer for properties.\n"
    },
    {
        "id": 242,
        "Question": "What is a data type in which expressions are stored in places identified by integer indexes?",
        "Options": [
            "a) Structure",
            "b) List",
            "c) Array",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: An array  is a data type in which expressions are stored in places identified by integer indexes.\n"
    },
    {
        "id": 243,
        "Question": "Which symbol holds the first element and also an index?",
        "Options": [
            "a) Nail",
            "b) Tail",
            "c) Initial",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: The nails symbol indicates the first bin, the one with an index of 0 holds nails.\n"
    },
    {
        "id": 244,
        "Question": "Which keyword is used to construct an array?",
        "Options": [
            "a) Array",
            "b) Make-array",
            "c) Bins",
            "d) Make"
        ],
        "Answer": "  Answer: b\nExplanation: The array can be constructed and its dimension can be set by using make-array.\n"
    },
    {
        "id": 245,
        "Question": "Which is present in the writer procedure for arrays?",
        "Options": [
            "a) Setf",
            "b) Aref",
            "c) Fref",
            "d) Both Setf & Aref"
        ],
        "Answer": "  Answer: d\nExplanation: setf is writer procedure and aref is reader procedure for arrays.\n"
    },
    {
        "id": 246,
        "Question": "Which keyword embeds the initial element in an array?",
        "Options": [
            "a) Initial",
            "b) Initial-content",
            "c) Initial-element",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Initial-Contents keyword along with the desired intial elements wrapped up in an array.\n"
    },
    {
        "id": 247,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">Setf</span> part-bins <span class=\"br0\">(</span>make-array '<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) #Done",
            "b) #4",
            "c) #(0 0 0 0)",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will create an array of elements and everything will be initialized to zero.\nOutput:\n#(0 0 0 0)\n"
    },
    {
        "id": 248,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> bins <span class=\"br0\">(</span>make-array <span class=\"nu0\">2</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 'e<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) E",
            "b) E E",
            "c) E E E",
            "d) E E E E"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will create an array and initialize the array to E.\nOutput:\n#(E E)\n"
    },
    {
        "id": 249,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> part <span class=\"br0\">(</span>make-array '<span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 8",
            "b) 0 0 0 0 0 0 0 0",
            "c) 0 0 0 0",
            "d) 8 rows of 0"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will create an two-dimensional array and initialize the element to 0.\nOutput:\n#2A((0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0)\n    (0 0 0 0 0 0 0 0))\n"
    },
    {
        "id": 250,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> bins <span class=\"br0\">(</span>make-array <span class=\"nu0\">4</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 'e<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> bins <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) E",
            "b) 0",
            "c) 4",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will create an array and retrieve the first element of an array.\nOutput:\nE\n"
    },
    {
        "id": 251,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">Setf</span> part-bins <span class=\"br0\">(</span>make-array '<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> part-bins <span class=\"nu0\">0</span><span class=\"br0\">)</span> 'nails<span class=\"br0\">)</span><span class=\"co1\">;</span>\nspan class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> part-bins <span class=\"nu0\">1</span><span class=\"br0\">)</span> 'nuts<span class=\"br0\">)</span><span class=\"co1\">;</span>\nspan class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> part-bins <span class=\"nu0\">2</span><span class=\"br0\">)</span> 'bolts<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> part-bins <span class=\"nu0\">3</span><span class=\"br0\">)</span> 'bike<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> part-bins <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> part-bins <span class=\"nu0\">4</span><span class=\"br0\">)</span> '<span class=\"kw1\">car</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Nails",
            "b) Nuts",
            "c) 2",
            "d) Error"
        ],
        "Answer": "  Answer: d\nExplanation: Error will be arised because of the last statement and it is out of bound.\n"
    },
    {
        "id": 252,
        "Question": "Which uses their arguments to build intermediate forms and evaluating them to produce a value?",
        "Options": [
            "a) Backquote",
            "b) Macros",
            "c) List",
            "d) Procedures"
        ],
        "Answer": "  Answer: b\nExplanation: Macro use their arguments to build intermediate forms and it evaluate the intermediate form to produce a value.\n"
    },
    {
        "id": 253,
        "Question": "Which keyword is used to define macro procedures?",
        "Options": [
            "a) Defun",
            "b) Demacro",
            "c) Defmacro",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Defmacro can be used to define procedure called macro procedure.\n"
    },
    {
        "id": 254,
        "Question": "Which do not evaluate their arguments?",
        "Options": [
            "a) List",
            "b) Procedure",
            "c) Setf",
            "d) Macros"
        ],
        "Answer": "  Answer: d\nExplanation: Macros do not evaluate their arguments.\n"
    },
    {
        "id": 255,
        "Question": "What is the difference between the appearance of macro and ordinary definition?",
        "Options": [
            "a) Argument list",
            "b) Reture value",
            "c) Just the defining keyword",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The only difference between the appearance of macro and ordinary definition is that one uses defmacro and other uses defun.\n"
    },
    {
        "id": 256,
        "Question": "Which forms can be constructed with the same primitives that manipulate lisp expressions?",
        "Options": [
            "a) Lisp",
            "b) Macro",
            "c) Procedure",
            "d) Defun"
        ],
        "Answer": "  Answer: a\nExplanation: Lisp forms can be constructed with the same primitives that generally manipulate lisp expressions.\n"
    },
    {
        "id": 257,
        "Question": "Which exploit the fact that lisp forms are just expressions meant to be evaluated?",
        "Options": [
            "a) List",
            "b) Procedure",
            "c) Macro",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Macros exploit the fact that lisp forms are just expressions meant to be evaluated.\n"
    },
    {
        "id": 258,
        "Question": "Pick out the correct statement about macro.",
        "Options": [
            "a) Macro is dependant",
            "b) Macro is interoperable",
            "c) Macro is complex",
            "d) Macro deserve their own file"
        ],
        "Answer": "  Answer: d\nExplanation: Macro deserve their own file for compiling them.\n"
    },
    {
        "id": 259,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pressure -<span class=\"nu0\">3</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>when-plusp pressure <span class=\"br0\">(</span><span class=\"kw1\">print</span> 'alarm<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) Nil",
            "c) Alarm",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will print nil because of the negative number.\nOutput:\nNIL\n"
    },
    {
        "id": 260,
        "Question": "a) Alarm",
        "Options": [
            "b) Alarm",
            "   Alarm",
            "c) 1",
            "d) Nil"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will print alarm twice because of the positive number.\nOutput:\nALARM\nALARM\n"
    },
    {
        "id": 261,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> when-plusp-with-bug <span class=\"br0\">(</span>number result<span class=\"br0\">)</span><span class=\"co1\">;</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">plusp</span> number<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">;</span>\nspan class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pressure -<span class=\"nu0\">2</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>when-plusp-with-bug pressure <span class=\"br0\">(</span><span class=\"kw1\">print</span> 'alarm<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Alarm",
            "b) Nil",
            "c) Both Alarm & Nil",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will print alarm and nil because of the definition.\nOutput:\nALARM\nNIL\n"
    },
    {
        "id": 262,
        "Question": "Which mechanism makes it easy to create and to complete template like expressions?",
        "Options": [
            "a) Macro",
            "b) Backquote",
            "c) Variable",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Backquote mechanism makes it easy to create and to complete template like expressions in which only a few, variable details to be filled.\n"
    },
    {
        "id": 263,
        "Question": "Which isolates an entire expression from evaluation?",
        "Options": [
            "a) ‘",
            "b)  ”",
            "c) ()",
            "d) $"
        ],
        "Answer": "  Answer: a\nExplanation: The normal quote, ‘ isolates an entire expression from evaluation.\n"
    },
    {
        "id": 264,
        "Question": "Which are perfect for making and filling using backquote mechanism?",
        "Options": [
            "a) Templates",
            "b) Macro templates",
            "c) List",
            "d) Procedure"
        ],
        "Answer": "  Answer: b\nExplanation: The backquote mechanism is perfect for making and filling macro templates.\n"
    },
    {
        "id": 265,
        "Question": "Which is used to spliced the elements in the list?",
        "Options": [
            "a) #",
            "b) %",
            "c) @",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The elements in the list are spliced into the list when the @ appears.\n"
    },
    {
        "id": 266,
        "Question": "Which simplifies the macro writing?",
        "Options": [
            "a) Macros",
            "b) List",
            "c) Backquote mechanism",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The backquote mechanism simplifies macro writing.\n"
    },
    {
        "id": 267,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> variable  'test<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>'<span class=\"br0\">(</span>THIS IS A <span class=\"sy0\">,</span>VARIABLE<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Test",
            "b) Variable",
            "c) This is a variable",
            "d) This is a test"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will create an backquote on the name of variable.\nOutput:\n(THIS IS A TEST)\n"
    },
    {
        "id": 268,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> variable '<span class=\"br0\">(</span>more difficult example<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* '<span class=\"br0\">(</span>this is a <span class=\"sy0\">,</span>variable<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) This is a more difficult example",
            "b) This is a (more difficult example))",
            "c) This is a",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will create an backquote under the name variable and make it to process.\nOutput:\n(THIS IS A (MORE DIFFICULT EXAMPLE))\n"
    },
    {
        "id": 269,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> exam '<span class=\"br0\">(</span>Steve jobs<span class=\"br0\">)</span>\n* '<span class=\"br0\">(</span>Apple has been invented by <span class=\"sy0\">,</span>@exam<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Apple has been",
            "b) Apple has been invented by",
            "c) Apple has been invented by steve jobs",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will slice the statement for inserting steve jobs.\nOutput:\n(APPLE HAS BEEN INVENTED BY STEVE JOBS)\n"
    },
    {
        "id": 270,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> precious '<span class=\"br0\">(</span>time<span class=\"br0\">)</span>\n* '<span class=\"br0\">(</span>Time is precious<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Time is precious",
            "b) Time is time",
            "c) Time",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: As the second statement does not contains comma, it will print time is precious.\n"
    },
    {
        "id": 271,
        "Question": "Which will be simplified by using backquote mechanism?",
        "Options": [
            "a) Time",
            "b) Memory space",
            "c) Error",
            "d) Template filling"
        ],
        "Answer": "  Answer: d\nExplanation: The backquote mechanism will simplify template filling.\n"
    },
    {
        "id": 272,
        "Question": "What is the process of creating new data types in lisp?",
        "Options": [
            "a) List",
            "b) Structures",
            "c) Procedures",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Lisp has elaborate apparatus for automatically creating new data types and this is called as structure types.\n"
    },
    {
        "id": 273,
        "Question": "Which is the primitive that creates new structure types?",
        "Options": [
            "a) Defnum",
            "b) Deftype",
            "c) Defstruct",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Defstruct is the primitive that creates new structure types.\n"
    },
    {
        "id": 274,
        "Question": "What should be used with structure names with a combination?",
        "Options": [
            "a) Make-",
            "b) Make",
            "c) Create",
            "d) Deploy"
        ],
        "Answer": "  Answer: a\nExplanation: The defstruct form is evaluated is a combination of make- with structure type’s name.\n"
    },
    {
        "id": 275,
        "Question": "Which enables storage in procedurally indexed places?",
        "Options": [
            "a) Defstruct",
            "b) Object",
            "c) Structure",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Structure types enables storage in procedurally indexed places.\n"
    },
    {
        "id": 276,
        "Question": "Which creates reader procedures for getting things out of an instance fields?",
        "Options": [
            "a) Structure",
            "b) Defstruct",
            "c) Class",
            "d) Object"
        ],
        "Answer": "  Answer: b\nExplanation: Defstruct creates a constructor procedure. Defstruct creates reader procedures for getting things out of an instance fields.\n"
    },
    {
        "id": 277,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct person <span class=\"br0\">(</span>gender <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>personality 'nice<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">1</span> <span class=\"br0\">(</span>make-person<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>make-person <span class=\"sy0\">:</span><span class=\"me1\">gender</span> 'female<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Person :gender female :personality nice",
            "b) Person :gender",
            "c) gender:Female",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will create two entries in the structure named person.\nOutput:\n#S(PERSON :gender FEMALE :PERSONALITY NICE)\n"
    },
    {
        "id": 278,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct person <span class=\"br0\">(</span>gender <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>personality 'nice<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">1</span> <span class=\"br0\">(</span>make-person<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>make-person <span class=\"sy0\">:</span><span class=\"me1\">gender</span> 'female<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>person-personality person-instance-<span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Female",
            "b) Nice",
            "c) Person",
            "d) Both Female & Nice"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will reveal the value of personality from person.\nOutput:\nNICE\n"
    },
    {
        "id": 279,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct person <span class=\"br0\">(</span>gender <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>personality 'nice<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">1</span> <span class=\"br0\">(</span>make-person<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>make-person <span class=\"sy0\">:</span><span class=\"me1\">gender</span> 'female<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>person-p '<span class=\"br0\">(</span>this is a <span class=\"kw1\">list</span> -- <span class=\"kw1\">not</span> a person instance<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Female",
            "b) Nice",
            "c) T",
            "d) Nil"
        ],
        "Answer": "  Answer: d\nExplanation: This statement is based on structure and not on list, So it is printing as nil.\nOutput:\nNIL\n"
    },
    {
        "id": 280,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct person <span class=\"br0\">(</span>gender <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>personality 'nice<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">1</span> <span class=\"br0\">(</span>make-person<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> person-instance-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>make-person <span class=\"sy0\">:</span><span class=\"me1\">gender</span> 'female<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>person-surname person-instance-<span class=\"nu0\">1</span><span class=\"br0\">)</span> 'winston<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Winston",
            "b) Nil",
            "c) T",
            "d) Error"
        ],
        "Answer": "  Answer: d\nExplanation: The error because of the last statement that the syntax is wrong.\n"
    },
    {
        "id": 281,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct employee <span class=\"br0\">(</span>length-of-service <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>payment 'salary<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> employee-example <span class=\"br0\">(</span>make-employee<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>employee-length-of-service employee-example<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) T",
            "b) NIL",
            "c) 0",
            "d) Error"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will create example field at the employee structure.\nOutput:\n0\n"
    },
    {
        "id": 282,
        "Question": "Which makes it possible to define generic functions?",
        "Options": [
            "a) Lisp",
            "b) CLOS",
            "c) Class",
            "d) Object-Oriented programming"
        ],
        "Answer": "  Answer: b\nExplanation: Common Lisp Object System makes it possible to define generic functions.\n"
    },
    {
        "id": 283,
        "Question": "What is meant by collection of methods the same name?",
        "Options": [
            "a) Lisp class",
            "b) Class",
            "c) Generic function",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Each collection of methods that share the same name is called a generic function.\n"
    },
    {
        "id": 284,
        "Question": "Which keyword is used to define the method?",
        "Options": [
            "a) Defun",
            "b) Destruct",
            "c) Demake",
            "d) Defmethod"
        ],
        "Answer": "  Answer: d\nExplanation: Defmethod is used for defining the method.\n"
    },
    {
        "id": 285,
        "Question": "Which class can help to select a method?",
        "Options": [
            "a) Nonoptional argument",
            "b) Class",
            "c) Method",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Any nonoptional argument class can help to select a method.\n"
    },
    {
        "id": 286,
        "Question": "Which require sophisticated precedence computation?",
        "Options": [
            "a) Superclass",
            "b) Multiple Superclass",
            "c) Subclass",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Multiple superclasses require sophisticated precedence computations.\n"
    },
    {
        "id": 287,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct triangle <span class=\"br0\">(</span>base <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>altitude <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">defun</span> area <span class=\"br0\">(</span>figure<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>triangle-p figure<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"nu0\">1</span>/<span class=\"nu0\">2</span> <span class=\"br0\">(</span>triangle-base figure<span class=\"br0\">)</span> <span class=\"br0\">(</span>triangle-altitude figure<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> triangle <span class=\"br0\">(</span>make-triangle <span class=\"sy0\">:</span><span class=\"me1\">base</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span><span class=\"me1\">altitude</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>area triangle<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Triangle",
            "b) 7",
            "c) 3",
            "d) 10"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will compute the area of triangle.\nOutput:\n3\n"
    },
    {
        "id": 288,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defstruct circle <span class=\"br0\">(</span>radius <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">defun</span> area <span class=\"br0\">(</span>figure<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>circle-p figure<span class=\"br0\">)</span> <span class=\"br0\">(</span>* pi <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span>circle-radius figure<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> circle <span class=\"br0\">(</span>make-circle <span class=\"sy0\">:</span><span class=\"me1\">radius</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>area circle<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 44",
            "b) 380",
            "c) 382",
            "d) 380.132"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will compute the area of circle using given statement.\nOutput:\n380.132711084365\n"
    },
    {
        "id": 289,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defmethod area <span class=\"br0\">(</span><span class=\"br0\">(</span>figure rectangle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span>rectangle-width figure<span class=\"br0\">)</span> <span class=\"br0\">(</span>rectangle-height figure<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Area",
            "b) Rectangle",
            "c) Height",
            "d) Error"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will return an error because of misplacing of brackets.\n"
    },
    {
        "id": 290,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defclass article<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>title <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> article-title <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">title</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>author <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> article-author <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">author</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Article",
            "b) <STANDARD-CLASS",
            "c) <STANDARD-CLASS ARTICLE>",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will create an class by using defclass keyword.\nOutput:\n#<STANDARD-CLASS ARTICLE>\n"
    },
    {
        "id": 291,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defclass article<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>title <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> article-title <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">title</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>author <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> article-author <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">author</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass computer-article <span class=\"br0\">(</span>article<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass business-article <span class=\"br0\">(</span>article<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass political-article <span class=\"br0\">(</span>article<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> articles <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>make-instance 'business-article <span class=\"sy0\">:</span><span class=\"me1\">title</span> <span class=\"st0\">\"Memory Prices down\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Business article",
            "b) Political article",
            "c) Business article",
            "d) <BUSINESS-ARTICLE {Random Number}>"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will make the book name under the main title of business articles.\nOutput:\n(#<BUSINESS-ARTICLE {AC04B11}>)\n"
    },
    {
        "id": 292,
        "Question": "Which makes it possible to define sophisticated generator procedures that produce new values?",
        "Options": [
            "a) List",
            "b) Variables",
            "c) Encapsulation",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Encapsulation makes it possible to define sophisticated generator procedures that produce new values each time they are called.\n"
    },
    {
        "id": 293,
        "Question": "Which primitive enables you to define one procedure inside another?",
        "Options": [
            "a) Do",
            "b) List",
            "c) Primitive",
            "d) Labels"
        ],
        "Answer": "  Answer: d\nExplanation: The labels primitive enables you to define one procedure inside another.\n"
    },
    {
        "id": 294,
        "Question": "Which helps to produce nested fences?",
        "Options": [
            "a) Lets",
            "b) List",
            "c) Label",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Lets helps to produce nested fences.\n"
    },
    {
        "id": 295,
        "Question": "Which do not produce nested fences?",
        "Options": [
            "a) Variables",
            "b) Procedure calls",
            "c) Fences",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Procedure calls do not produce nested fences."
    },
    {
        "id": 296,
        "Question": "Which makes nameless procedures into lexical closures?",
        "Options": [
            "a) $",
            "b) #",
            "c) #’",
            "d) *"
        ],
        "Answer": "  Answer: c\nExplanation: #’ makes it possible to produce nameless procedures into lexical closures.\n"
    },
    {
        "id": 297,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> first-of-first-with-labels <span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>aux <span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">(</span>first m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>first <span class=\"br0\">(</span>aux <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>first-of-first-with-labels '<span class=\"br0\">(</span><span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>c d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A",
            "b) B",
            "c) C",
            "d) D"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will produce the result as first given variable.\nOutput:\nA\n"
    },
    {
        "id": 298,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> power-of-two <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> previous-power-of-two <span class=\"br0\">(</span>* previous-power-of-two <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>power-of-two<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>power-of-two<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 4",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will compute the power of two by executing certain number of times.\nOutput:\n4\n"
    },
    {
        "id": 299,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> square <span class=\"br0\">(</span>list-of-numbers<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>*n n<span class=\"br0\">)</span><span class=\"br0\">)</span> list-of-numbers<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>square '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 9",
            "b) 1",
            "c) 3",
            "d) 1 4 9"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will compute the square of all given numbers.\nOutput:\n(1 4 9)\n"
    },
    {
        "id": 300,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> square-procedures #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> square-procedure <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will compute the procedure of square using the given statement.\nOutput:\n4\n"
    },
    {
        "id": 301,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> g1 <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>previous-power-of-two <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> previous-power-of-two <span class=\"br0\">(</span>*previous-power-of-two <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>g1<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) G1",
            "b) 0",
            "c) Let",
            "d) Error"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will create an error because of lag in number of arguments.\n"
    },
    {
        "id": 302,
        "Question": "Which is a string of boxes linked by arrow like pointers?",
        "Options": [
            "a) Lisp",
            "b) List",
            "c) Variables",
            "d) Pointers"
        ],
        "Answer": "  Answer: b\nExplanation: A list in box and pointer notation is a string of boxes linked by arrow like pointers.\n"
    },
    {
        "id": 303,
        "Question": "What is the other name of boxes?",
        "Options": [
            "a) Cons cells",
            "b) Conses",
            "c) Both Cons cells & Conses",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: The box is called as atoms and two-pointer entities, in which the boxes can tie together.\n"
    },
    {
        "id": 304,
        "Question": "Which is used to construct new lists by linking the right pointers?",
        "Options": [
            "a) Links",
            "b) List",
            "c) Variables",
            "d) Right pointers"
        ],
        "Answer": "  Answer: d\nExplanation: Lisp maintains a list of spare boxes, linked by their right pointers for constructing new lists.\n"
    },
    {
        "id": 305,
        "Question": "Which can be represented in bytes?",
        "Options": [
            "a) Boxes and pointers",
            "b) Lists",
            "c) Lisp",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Boxes and pointers both can be represented in bytes. But lists and LISP can be represented in bytes.\n"
    },
    {
        "id": 306,
        "Question": "Which can build new lists by depositing pointers in free boxes?",
        "Options": [
            "a) Do",
            "b) Dobuild",
            "c) Cons",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: Cons builds new lists by depositing pointers in free boxes.\n"
    },
    {
        "id": 307,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> abc '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span> xyz '<span class=\"br0\">(</span>x y z<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> bc <span class=\"br0\">(</span>rest abc<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* bc</pre></div></div></div></div></div></div>",
        "Options": [
            "a) A",
            "b) B",
            "c) C",
            "d) BC"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will print BC because of definied variable bc.\nOutput:\n(B C)\n"
    },
    {
        "id": 308,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> abc '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span> xyz '<span class=\"br0\">(</span>x y z<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* abc</pre></div></div></div></div></div></div>",
        "Options": [
            "a) A",
            "b) B",
            "c) ABC",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement is printing abc because of definition.\nOutput:\n(A B C)\n"
    },
    {
        "id": 309,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> toss '<span class=\"br0\">(</span>heads tails tails tails heads tails<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">delete</span> 'heads toss<span class=\"br0\">)</span>\n* toss</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Heads tails",
            "b) Heads tails tails tails tails",
            "c) Heads",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will print the result by mainpulation of delete.\nOutput:\n(HEADS TAILS TAILS TAILS TAILS)\n"
    },
    {
        "id": 310,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> fact1 '<span class=\"br0\">(</span>big computers are nice<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>first fact1<span class=\"br0\">)</span> 'fast<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Big computers",
            "b) Fast",
            "c) Big computers are fast",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: This statement will print the given result because of the definition of first.\nOutput:\nFAST\n"
    },
    {
        "id": 311,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> l1 <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'a 'b 'c<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> l2 <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'a 'b<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> l1 l2<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A B",
            "b) A B C",
            "c) B C",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will print the a and b because of computing the intersection of the two values.\nOutput:\n(A B)\n"
    },
    {
        "id": 312,
        "Question": "Which have the ability to propagate numbers through arithmetic boxes?",
        "Options": [
            "a) Condition",
            "b) Constraint",
            "c) Logic",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Constraint propagate numbers through arithmetic boxes.\n"
    },
    {
        "id": 313,
        "Question": "Which is used to represent assertions and logical constraints?",
        "Options": [
            "a) Logic",
            "b) Methods",
            "c) Controls",
            "d) Class"
        ],
        "Answer": "  Answer: d\nExplanation: Classes represent assertions and logical constraints.\n"
    },
    {
        "id": 314,
        "Question": "What is the process of combining assertions and logical constraints?",
        "Options": [
            "a) List",
            "b) Net",
            "c) Inference net",
            "d) Inference"
        ],
        "Answer": "  Answer: c\nExplanation: When a group of assertions and logical constraints are combined, they form inference net.\n"
    },
    {
        "id": 315,
        "Question": "Which propagate probability bounds through logic boxes?",
        "Options": [
            "a) Constraint",
            "b) Condition",
            "c) List",
            "d) Inference"
        ],
        "Answer": "  Answer: a\nExplanation: Constraints propagate probability bounds through logic boxes.\n"
    },
    {
        "id": 316,
        "Question": "Which functions are used to enforce constraints?",
        "Options": [
            "a) Conditional",
            "b) Generic functions",
            "c) Functions",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: Generic functions are used to enforce constraints.\n"
    },
    {
        "id": 317,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defclass assertion <span class=\"br0\">(</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> assertion-name <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"kw1\">name</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>lower-bound <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> assertion-lower-bound <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>upper-bound <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> assertion-upper-bound <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>constraints <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> assertion-constraints <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Constraints",
            "b) Class",
            "c) Standard-class assertion",
            "d) Standard-class"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will output class named assertion with a constraint.\nOutput:\n#<STANDARD-CLASS ASSERTION>\n"
    },
    {
        "id": 318,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defclass constraint <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> constraint-name <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"kw1\">name</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>output <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> constraint-output<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass binary-constraint <span class=\"br0\">(</span>constraint<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>input <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> constraint-input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass ternary-constraint <span class=\"br0\">(</span>constraint<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>input-a <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> constraint-input-a<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>input-b <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> constraint-input-b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass not-box <span class=\"br0\">(</span>binary-constraint<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass or-box <span class=\"br0\">(</span>ternary-constraint<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>defclass and-box <span class=\"br0\">(</span>ternary-constraint<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) And-box",
            "b) Or-box",
            "c) Not-box",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: This statement will create a list of classes for constraint manipulation.\nOutput:\n#<STANDARD-CLASS BINARY-CONSTRAINT>\n     #<STANDARD-CLASS TERNARY-CONSTRAINT> #<STANDARD-CLASS NOT-BOX>\n        #<STANDARD-CLASS OR-BOX> #<STANDARD-CLASS AND-BOX>\n"
    },
    {
        "id": 319,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span>defmethod connect2 <span class=\"br0\">(</span><span class=\"br0\">(</span>c constraint<span class=\"br0\">)</span> <span class=\"br0\">(</span>i assertion<span class=\"br0\">)</span> <span class=\"br0\">(</span>o assertion<span class=\"br0\">)</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>constraint-input c<span class=\"br0\">)</span> i<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>constraint-output c<span class=\"br0\">)</span> o<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>push c <span class=\"br0\">(</span>assertion-constraints i<span class=\"br0\">)</span><span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>push c <span class=\"br0\">(</span>assertion-constraints o<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Connect2",
            "b) Defmethod",
            "c) Constraint",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will create a method named connect2 with input and output constraint.\nOutput:\n#\n"
    },
    {
        "id": 320,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>assertions <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>make-instance 'assertion <span class=\"sy0\">:</span><span class=\"kw1\">name</span> 'broker1<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>make-instance 'assertion <span class=\"sy0\">:</span><span class=\"kw1\">name</span> 'broker2<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>make-instance 'assertion <span class=\"sy0\">:</span><span class=\"kw1\">name</span> 'broker-opinion<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span>constraints <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>make-instance 'or-box <span class=\"sy0\">:</span><span class=\"kw1\">name</span> 'broker-constraint<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Assertion",
            "b) Broker",
            "c) Both Assertion & Broker",
            "d) Error"
        ],
        "Answer": "  Answer: d\nExplanation: This statement will create an error because of misplacing and unsatisfied arguments.\n"
    },
    {
        "id": 321,
        "Question": "Which constraint has the parameter that identifies where the constraint is coming from?",
        "Options": [
            "a) Binary",
            "b) Secondary",
            "c) Ternary",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: None.\n"
    },
    {
        "id": 322,
        "Question": "Which procedure is used as key element in a backward chaining algorithm?",
        "Options": [
            "a) Matching",
            "b) Unification matching",
            "c) Verification",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: b\nExplanation: The unification matching procedure is a key element in a backward chaining.\n"
    },
    {
        "id": 323,
        "Question": "What is the way of expressing an ordinary expression in terms of bits?",
        "Options": [
            "a) Datum",
            "b) Data",
            "c) Manipulation",
            "d) Verification"
        ],
        "Answer": "  Answer: a\nExplanation: The process of expressing an ordinary expression in terms of bits is called datum.\n"
    },
    {
        "id": 324,
        "Question": "What is the name of elements present in patterns?",
        "Options": [
            "a) Variables",
            "b) Patterns",
            "c) Pattern variables",
            "d) Pattern elements"
        ],
        "Answer": "  Answer: c\nExplanation: Patterns can contain elements called pattern variables.\n"
    },
    {
        "id": 325,
        "Question": "Which keeps variable binding on an association list?",
        "Options": [
            "a) Match",
            "b) Compare",
            "c) Equal",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: Match keeps variable binding on an association list.\n"
    },
    {
        "id": 326,
        "Question": "Which is used to compare patterns and datums element by element?",
        "Options": [
            "a) Procedure",
            "b) Compare",
            "c) Equal",
            "d) Matching"
        ],
        "Answer": "  Answer: d\nExplanation: To compare patterns and datums element by element matching is used.\n"
    },
    {
        "id": 327,
        "Question": "6. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pattern-variable-expression '<span class=\"br0\">(</span>? x<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> datum 'apple<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> bindings '<span class=\"br0\">(</span><span class=\"br0\">(</span>y red<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>second pattern-variable-expression<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) X",
            "b) Red",
            "c) Apple",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: a\nExplanation: The result will be x because the second element is referred in pattern.\nOutput:\nX\n"
    },
    {
        "id": 328,
        "Question": "7. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">setf</span> pattern-variable-expression '<span class=\"br0\">(</span>? x<span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> datum 'apple<span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">setf</span> bindings '<span class=\"br0\">(</span><span class=\"br0\">(</span>y red<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>second pattern-variable-expression<span class=\"br0\">)</span> datum<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) x",
            "b) Y",
            "c) Apple",
            "d) Both x & Apple"
        ],
        "Answer": "  Answer: d\nExplanation: The elements from the given list is listed using the given statement.\nOutput:\n(X APPLE)\n"
    },
    {
        "id": 329,
        "Question": "8. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>second pattern-variable-expression<span class=\"br0\">)</span> datum<span class=\"br0\">)</span> bindings<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (X apple)",
            "b) (Y orange)",
            "c) (X apple) (Y orange)",
            "d) None of the mentioned"
        ],
        "Answer": "  Answer: c\nExplanation: This statement will list all the elements in datum and bindings.\nOutput:\n((X APPLE) (Y RED))\n"
    },
    {
        "id": 330,
        "Question": "9. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> add-binding <span class=\"br0\">(</span>pattern-variable-expression datum bindings<span class=\"br0\">)</span> \n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> '_ <span class=\"br0\">(</span>extract-variable pattern-variable-expression<span class=\"br0\">)</span><span class=\"br0\">)</span> bindings <span class=\"br0\">(</span><span class=\"kw1\">cons</span> \n  <span class=\"br0\">(</span>make-binding <span class=\"br0\">(</span>extract-variable pattern-variable-expression<span class=\"br0\">)</span> datum<span class=\"br0\">)</span> bindings<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>add-binding '<span class=\"br0\">(</span>? _<span class=\"br0\">)</span> 'apple '<span class=\"br0\">(</span><span class=\"br0\">(</span>y red<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) X",
            "b) Y",
            "c) (X apple)",
            "d) (Y red)"
        ],
        "Answer": "  Answer: d\nExplanation: This statement is used for adding a binding in the pattern.\nOutput:\n((Y RED))\n"
    },
    {
        "id": 331,
        "Question": "10. What is the output of the given statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"lisp\"><pre class=\"de1\">span class=\"sy0\"&gt; * <span class=\"br0\">(</span><span class=\"kw1\">defun</span> find-binding <span class=\"br0\">(</span>pattern-variable-expression binding<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">eq</span> '_<span class=\"br0\">(</span>extract-variable pattern-variable-expression<span class=\"br0\">)</span><span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> <span class=\"br0\">(</span>extract-variable pattern-variable-expression<span class=\"br0\">)</span> binding<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n* <span class=\"br0\">(</span>find-binding '<span class=\"br0\">(</span>? _<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span>x apple<span class=\"br0\">)</span> <span class=\"br0\">(</span>y red<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) X",
            "b) Apple",
            "c) T",
            "d) Nil"
        ],
        "Answer": "  Answer: d\nExplanation: This statement is used to find a binding in the given pattern.\nOutput:\nNIL\n"
    }
]