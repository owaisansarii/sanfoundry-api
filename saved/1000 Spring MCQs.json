[
    {
        "id": 1,
        "Question": "Beans can be created by which of the following properties?",
        "Options": [
            "a) Scope",
            "b) Property",
            "c) Class",
            "d) It’s own constructor"
        ],
        "Answer": " Answer: d\nExplanation: Class’s constructor can create bean."
    },
    {
        "id": 2,
        "Question": "Which attribute is used to specify class name of the bean?",
        "Options": [
            "a) name",
            "b) id",
            "c) class",
            "d) constructor-args"
        ],
        "Answer": " Answer: c\nExplanation: Class attribute is mandatory and denotes the class used to create bean."
    },
    {
        "id": 3,
        "Question": "Which of the following method can be used to used to instantiate a method?",
        "Options": [
            "a) static factory method",
            "b) default-init method",
            "c) destroy method",
            "d) lazy-init method"
        ],
        "Answer": " Answer: a\nExplanation: Class attribute is used to specify the name of the class that contains the static factory method."
    },
    {
        "id": 4,
        "Question": "Which attribute is used to specify static factory-method?",
        "Options": [
            "a) factory-method",
            "b) default-init method",
            "c) destroy method",
            "d) lazy-init method"
        ],
        "Answer": " Answer: a\nExplanation: factory-method attribute denotes the name of actual method of the class."
    },
    {
        "id": 5,
        "Question": "Purpose of Static Factory Method?",
        "Options": [
            "a) Static method to create an object",
            "b) Initialize bean",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: a\nExplanation: Instantiate a bean using static method."
    },
    {
        "id": 6,
        "Question": "Exception thrown by factory method?",
        "Options": [
            "a) IllegalArgumentException",
            "b) IndexOutofBoundException",
            "c) ClassPathNotFoundException",
            "d) BeanCreationException"
        ],
        "Answer": " Answer: d\nExplanation: Spring generates the above mentioned exception, in case something’s wrong."
    },
    {
        "id": 7,
        "Question": "7. What will be the output?\nSnippet of Code:<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CreatePro <span class=\"br0\">{</span>\n    <span class=\"kw3\">String</span> ProductId<span class=\"sy0\">;</span>\n    <span class=\"kw1\">public</span> CreatePro<span class=\"br0\">(</span><span class=\"kw3\">String</span> ProductId<span class=\"br0\">)</span>\t<span class=\"br0\">{</span>\n        <span class=\"kw1\">this</span>.<span class=\"me1\">ProductId</span> <span class=\"sy0\">=</span> ProductId<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Product creation_Product<span class=\"br0\">(</span><span class=\"kw3\">String</span> productId<span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\n    <span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Bean Created\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">\"aaa\"</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>productId<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Battery<span class=\"br0\">(</span><span class=\"st0\">\"AAA\"</span>, <span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">\"cdrw\"</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>productId<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Disc<span class=\"br0\">(</span><span class=\"st0\">\"CD-RW\"</span>, <span class=\"nu0\">1.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n<span class=\"sy0\">&lt;</span>beans ...<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"aaa\"</span> <span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"CreatePro\"</span>\n    factory<span class=\"sy0\">-</span>method<span class=\"sy0\">=</span><span class=\"st0\">\"createProduct\"</span><span class=\"sy0\">&gt;</span>\n    <span class=\"sy0\">&lt;</span>constructor<span class=\"sy0\">-</span>arg value<span class=\"sy0\">=</span><span class=\"st0\">\"aaa\"</span> <span class=\"sy0\">/&gt;</span>\n<span class=\"sy0\">&lt;/</span>bean<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"cdrw\"</span> <span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"CreatePro\"</span>\n    factory<span class=\"sy0\">-</span>method<span class=\"sy0\">=</span><span class=\"st0\">\"createProduct\"</span><span class=\"sy0\">&gt;</span>\n    <span class=\"sy0\">&lt;</span>constructor<span class=\"sy0\">-</span>arg value<span class=\"sy0\">=</span><span class=\"st0\">\"cdrw\"</span> <span class=\"sy0\">/&gt;</span>\n<span class=\"sy0\">&lt;/</span>bean<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;/</span>beans<span class=\"sy0\">&gt;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) BeanCreationException",
            "b) Bean Created",
            "c) ClassPathException",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: a\nExplanation: Since factory-method doesn’t exists in the ProductCreator class, so exception thrown.\nOutput: BeanCreationException"
    },
    {
        "id": 8,
        "Question": "",
        "Options": [
            "9. Bean’s naming convention:-",
            "\tstarts with lowercase, camelcase from then on.?",
            "a) True",
            "b) False"
        ],
        "Answer": " Answer: a\nExplanation: Beans are allowed to have more than one ids."
    },
    {
        "id": 9,
        "Question": "Beans can be created by which of the following properties?",
        "Options": [
            "a) Static factory-method",
            "b) Instance Factory-Method",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: a\nExplanation: Beans follow naming conventions."
    },
    {
        "id": 10,
        "Question": "What will be the output:-",
        "Options": [
            "a) BeanCreationException",
            "b) IllegalArgumentException",
            "c) New Product will be created",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: c\nExplanation: Instantiate a bean via static and instance Factory methods."
    },
    {
        "id": 11,
        "Question": "Which Attribute is used to specify the bean declared?",
        "Options": [
            "a) factory-bean",
            "b) scope",
            "c) getBean",
            "d) declareBean"
        ],
        "Answer": " Answer: b\nExplanation: The bean instance is mentioned by factory-bean attr while factory method is for factory-method attr."
    },
    {
        "id": 12,
        "Question": "Declaring Beans using:-",
        "Options": [
            "a) Static field",
            "b) Object Properties",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Beans can be declared from static fields as well as Object properties."
    },
    {
        "id": 13,
        "Question": "Ways to declare bean from a static field?",
        "Options": [
            "a) FieldRetrievingFactoryBean",
            "b) util:contant",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To declare a bean from a static field, you can make use of either the built-in factory bean FieldRetrievingFactoryBean, or the util:constant tag in Spring 2.x."
    },
    {
        "id": 14,
        "Question": "4. A)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">      <span class=\"kw1\">public</span> <span class=\"kw1\">abstract</span> <span class=\"kw1\">class</span> Product <span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> Product AAA <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Battery<span class=\"br0\">(</span><span class=\"st0\">\"AAA\"</span>, <span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> Product CDRW <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Disc<span class=\"br0\">(</span><span class=\"st0\">\"CD-RW\"</span>, <span class=\"nu0\">1.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t...\n      <span class=\"br0\">}</span>\n      <span class=\"sy0\">&lt;</span>beans ...<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"aaa\"</span> <span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"org.springframework.beans.factory.config.\n\tFieldRetrievingFactoryBean\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>property name<span class=\"sy0\">=</span><span class=\"st0\">\"staticField\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>value<span class=\"sy0\">&gt;</span>com.<span class=\"me1\">shop</span>.<span class=\"me1\">Product</span>.<span class=\"me1\">AAA</span><span class=\"sy0\">&lt;/</span>value<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>property<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>bean<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"cdrw\"</span> <span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"org.springframework.beans.factory.config.\n\tFieldRetrievingFactoryBean\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>property<span class=\"sy0\">&gt;</span> name<span class=\"sy0\">=</span><span class=\"st0\">\"staticField\"</span>\n\tvaluecom.<span class=\"me1\">shop</span>.<span class=\"me1\">Product</span>.<span class=\"me1\">CDRW</span><span class=\"sy0\">/</span>value\n\t<span class=\"sy0\">&lt;/</span>property<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>bean<span class=\"sy0\">&gt;</span>\n     <span class=\"sy0\">&lt;/</span>beans<span class=\"sy0\">&gt;</span>\n&nbsp;\n   B<span class=\"br0\">)</span> Product aaa <span class=\"sy0\">=</span> com.<span class=\"me1\">shop</span>.<span class=\"me1\">Product</span>.<span class=\"me1\">AAA</span><span class=\"sy0\">;</span>\n      Product cdrw <span class=\"sy0\">=</span> com.<span class=\"me1\">shop</span>.<span class=\"me1\">Product</span>.<span class=\"me1\">CDRW</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A and B are equivalent",
            "b) A and B provides different functionality",
            "c) Runtime Error in A",
            "d) Exception in B"
        ],
        "Answer": "Answer: b\nExplanation: StaticField property is used to specify instance field name."
    },
    {
        "id": 15,
        "Question": "Which tag is also allowed by static field?",
        "Options": [
            "a) util:constant",
            "b) list",
            "c) set",
            "d) constructor-args"
        ],
        "Answer": "Answer: a\nExplanation: StaticField method fills up the static fields with the provided property values."
    },
    {
        "id": 16,
        "Question": "Declaring bean form object properties can be done using:-",
        "Options": [
            "a) PropertyPathFactoryBean",
            "b) util:constant",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Bean name may get rather long and verbose."
    },
    {
        "id": 17,
        "Question": "PropertyPathFactoryBean declares a bean from an:-",
        "Options": [
            "a) Object Property",
            "b) Property Path",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This is an alternate method of using staticField in property attributes."
    },
    {
        "id": 18,
        "Question": "Alternate way of PropertyPathFactoryBean to declare a bean.",
        "Options": [
            "a) util:property-path tag",
            "b) util:constant tag",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring 2 and later allow you to declare a bean from a static field by using the util:constant tag."
    },
    {
        "id": 19,
        "Question": "The Spring Expression Language can be accessed by:-",
        "Options": [
            "a) XML configuration",
            "b) Annotations",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Schema for util:constant needs to be included using this link: http://www.springframework.org/schema/util."
    },
    {
        "id": 20,
        "Question": "A bean can be requested by:-",
        "Options": [
            "a) getBean method",
            "b) reference from another bean using autowiring, property etc",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: When a bean is requested by the getBean() method or a reference from other beans, Spring will decide which bean instance should be returned according to the bean scope."
    },
    {
        "id": 21,
        "Question": "Which attribute is used to set the scope of the bean?",
        "Options": [
            "a) setScope",
            "b) scope",
            "c) getScope",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Scope attribute defines the scope of a bean."
    },
    {
        "id": 22,
        "Question": "Which one is the default scope of the beans?",
        "Options": [
            "a) Prototype",
            "b) Session",
            "c) Request",
            "d) Singleton"
        ],
        "Answer": "Answer: d\nExplanation: This unique bean instance will be returned for all subsequent getBean() calls and bean references."
    },
    {
        "id": 23,
        "Question": "Which scope creates a new bean instance each time when requested?",
        "Options": [
            "a) Singleton",
            "b) Prototype",
            "c) Session",
            "d) Request"
        ],
        "Answer": "Answer: b\nExplanation: Creates a new bean instance each time when requested."
    },
    {
        "id": 24,
        "Question": "Which of the following are considered valid beans?",
        "Options": [
            "a) Singleton",
            "b) Prototype",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Session Creates a single bean instance per HTTP session, only valid in the context of a web application."
    },
    {
        "id": 25,
        "Question": "Which interface is used to perform initialization of beans?",
        "Options": [
            "a) InitializingBean",
            "b) Disposablebean",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In Spring 1.x, singleton and prototype are the only two valid bean scopes, and they are specified by the singleton attribute (i.e., singleton=”true” or singleton=”false”), not the scope attribute."
    },
    {
        "id": 26,
        "Question": "Which interface is used to perform destruction of beans?",
        "Options": [
            "a) InitializingBean",
            "b) Disposablebean",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Since the default scope is singleton, so items added by first bean instantiated will be used again by same bean if instantiated again."
    },
    {
        "id": 27,
        "Question": "Alternate way of initialization method is:-",
        "Options": [
            "a) init-method attribute",
            "b) afterPropertiesSet",
            "c) destroy-method attribute",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Since the default scope is prototype, so items added by first bean instantiated will be removed by same bean if instantiated again, and will add new items listed."
    },
    {
        "id": 28,
        "Question": "Alternate way of destruction method is:-",
        "Options": [
            "a) init-method attribute",
            "b) afterPropertiesSet",
            "c) destroy-method attribute",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring allows your bean to perform initialization callback methods afterPropertiesSet() by implementing the InitializingBean and interfaces. "
    },
    {
        "id": 29,
        "Question": "Which annotation is used as a substitute of initialization method?",
        "Options": [
            "a) @PostConstruct",
            "b) @PreDestroy",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring allows your bean to perform destroy callback methods destroy() by implementing the DisposableBean and interfaces. "
    },
    {
        "id": 30,
        "Question": "14.Which annotation is used as a substitute of destroy method?",
        "Options": [
            "a) @PostConstruct",
            "b) @PreDestroy",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A better approach of specifying the initialization callback methods is by setting the init-method attributes in your bean declaration."
    },
    {
        "id": 31,
        "Question": "Which configuration can be used for Dependency Injection?",
        "Options": [
            "a) XML Configuration",
            "b) Annotation Configuration",
            "c) Java Based Configuration",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: A better approach of specifying the destroy callback methods is by setting the destroy-method attributes in your bean declaration."
    },
    {
        "id": 32,
        "Question": "Method used to process bean before initialization callback",
        "Options": [
            "a) scope",
            "b) postProcessAfterInitialization()",
            "c) postProcessBeforeInitialization()",
            "d) it’s own constructor"
        ],
        "Answer": "Answer: c\nExplanation: You can process every bean before initialization callback method by implementing the postProcessBeforeInitialization() and methods."
    },
    {
        "id": 33,
        "Question": "Method used to process bean after initialization callback",
        "Options": [
            "a) scope",
            "b) getBean",
            "c) postProcessAfterInitialization()",
            "d) it’s own constructor"
        ],
        "Answer": "Answer: c\nExplanation: You can process every bean after initialization callback method by implementing the postProcessAfterInitialization() and methods."
    },
    {
        "id": 34,
        "Question": "Which method is used to gracefully shutdown all the bean processes after closing the spring container?",
        "Options": [
            "a) shutdownHook",
            "b) destroy method",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: ShutdownHook method gracefully shuts down each bean process before closing the container."
    },
    {
        "id": 35,
        "Question": "Which method is used to register BeanPostProcessor?",
        "Options": [
            "a) addBeanPostProcessors",
            "b) registerBeanPostProcessors",
            "c) addBeanProcessors",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When using a bean factory as your IoC container, bean post processors can only be registered programmatically, or more accurately, via the addBeanPostProcessor() method."
    },
    {
        "id": 36,
        "Question": "Which Interface for bean Post Processor is used to distinguish between checked beans",
        "Options": [
            "a) StorageConfig",
            "b) Marker",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Using an application context, the registration will be as simple as declaring an instance of the processor in the bean configuration file."
    },
    {
        "id": 37,
        "Question": "Which method of bean post processors is used to check path existence",
        "Options": [
            "a) getPath",
            "b) setPath",
            "c) value",
            "d) auto-wiring"
        ],
        "Answer": "Answer: a\nExplanation: First of all, for the bean post processor to distinguish which beans should be checked, you create a marker interface, StorageConfig, for your target beans to implement."
    },
    {
        "id": 38,
        "Question": "PathCheckingBeanPostProcessor will not work properly in case of:-",
        "Options": [
            "a) XML Configuration",
            "b) Java based Configuration",
            "c) JSR Annotation",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Moreover, for your bean post processor to check for path existence, it must be able to access the path property. This can be done by adding the getPath() method to this interface."
    },
    {
        "id": 39,
        "Question": "Which bean factory post processor externalizes part of the bean configurations into a properties file",
        "Options": [
            "a) PropertyPlaceholderConfigurer",
            "b) PropertyPlaceholderRegister",
            "c) PropertyGetPath",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Both the postProcessBeforeInitialization() and postProcessAfterInitialization() methods must return an instance for the bean being processed."
    },
    {
        "id": 40,
        "Question": "Which interface defines methods for resolving text messages",
        "Options": [
            "a) MessageSource",
            "b) ApplicationListener",
            "c) ApplicationContextListener",
            "d) TextEvent"
        ],
        "Answer": "Answer: c\nExplanation: This is because your bean post processor has a lower priority than CommonAnnotationBeanPostProcessor by default. As a result, the initialization method will be called before your path checking."
    },
    {
        "id": 41,
        "Question": "Which interface is used to listen to certain events",
        "Options": [
            "a) ApplicationListener",
            "b) ContextListener",
            "c) EventListener",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring comes with a bean factory post processor called PropertyPlaceholderConfigurer for you to externalize part of the bean configurations into a properties file."
    },
    {
        "id": 42,
        "Question": "Which method is used to publish your own custom event",
        "Options": [
            "a) contextPublish",
            "b) publishEvent",
            "c) applicationEventPublish",
            "d) addEvent"
        ],
        "Answer": "Answer: a\nExplanation: MessageSource is an interface that defines several methods for resolving messages."
    },
    {
        "id": 43,
        "Question": "Which of the following is a well known recognized event",
        "Options": [
            "a) ContextCloasedEvemt",
            "b) ContextRefreshedEvent",
            "c) RequestHandledEvent",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: For a bean to listen to certain events, it must implement the ApplicationListener interface and handle the events in the onApplicationEvent() method."
    },
    {
        "id": 44,
        "Question": "Which event is provoked when web request comes into action",
        "Options": [
            "a) ContextClosedEvent",
            "b) ContextStoppedEvent",
            "c) SessionEvent",
            "d) RequestHandledEvent"
        ],
        "Answer": "Answer: b\nExplanation: Any bean can publish an event by calling an application event publisher’s publishEvent() method."
    },
    {
        "id": 45,
        "Question": "Which of the following is used to convert property values to text Values?",
        "Options": [
            "a) property Editor",
            "b) property setter",
            "c) property getter",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A property editor is a feature of the JavaBeans API for converting property values to and from text values."
    },
    {
        "id": 46,
        "Question": "Which property editor is used to specify a URL String for a property of the URL type?",
        "Options": [
            "a) java.net.*",
            "b) java.io.*",
            "c) java.net.URL",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring will automatically convert the URL string into a URL object and inject it into your property."
    },
    {
        "id": 47,
        "Question": "Which interface is used to create your own property editors?",
        "Options": [
            "a) CustomEditorConfigurer",
            "b) RegisterCustomEditor",
            "c) PropertyEditorConfigurer",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The CustomEditorConfigurer is implemented as a bean factory post processor for you to register your custom property editors before any of the beans get instantiated."
    },
    {
        "id": 48,
        "Question": "Which of the following property editors are registered by Spring?",
        "Options": [
            "a) CustomNumberEditor",
            "b) FileEditor",
            "c) CustomDateEditor",
            "d) CustomNetEditor"
        ],
        "Answer": "Answer: b\nExplanation: ClassEditor, FileEditor, LocaleEditor, and URLEditor are pre registered by Spring, so you don’t need to register them again. "
    },
    {
        "id": 49,
        "Question": "What are the ways to create custom Property Editors?",
        "Options": [
            "a) implement PropertyEditor interface",
            "b) extend PropertyEditorSupport Class",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: You can write custom property editors by implementing the java.beans.PropertyEditor interface or extending the convenient support class java.beans.PropertyEditorSupport."
    },
    {
        "id": 50,
        "Question": "Method which converts property into a string value",
        "Options": [
            "a) getAsText",
            "b) setAsText",
            "c) regText",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The getAsText() method converts a property into a string value."
    },
    {
        "id": 51,
        "Question": "Method that converts string into a property value",
        "Options": [
            "a) getAsText",
            "b) setAsText",
            "c) regText",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The setAsText() method converts a string back into a property."
    },
    {
        "id": 52,
        "Question": "The property value is retrieved by:-",
        "Options": [
            "a) getValue method",
            "b) setValue method",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The property value is retrieved and set by calling the getValue() and setValue() methods."
    },
    {
        "id": 53,
        "Question": "Which package is used for periodic work",
        "Options": [
            "a) java.lang.Thread",
            "b) java.util.TimerTask",
            "c) java.util.Timer",
            "d) java.util.concurrent"
        ],
        "Answer": "Answer: b\nExplanation: The name must be target class name with Editor as its suffix."
    },
    {
        "id": 54,
        "Question": "Which subinterface provides functionality for managing Threads and their events",
        "Options": [
            "a) ExecutorService",
            "b) ThreadService",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Java 1.3 saw the introduction of java.util.TimerTask to support doing some sort of work periodically."
    },
    {
        "id": 55,
        "Question": "Method provided by ExectuorService which returns a Future < T >",
        "Options": [
            "a) submit",
            "b) publish",
            "c) addService",
            "d) registerService"
        ],
        "Answer": "Answer: a\nExplanation: ExecutorService, a subinterface, provides more functionality for managing threads and providing support for raising events to the threads, such as shutdown()."
    },
    {
        "id": 56,
        "Question": "Which method provided by ExecutorService is used to check whether job is finished or cancelled",
        "Options": [
            "a) Future.isDone()",
            "b) Future.isCancelled()",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: ExecutorService, a subinterface, provides more functionality for managing threads and providing support for raising events to the threads, such as shutdown()."
    },
    {
        "id": 57,
        "Question": "Which of the following class’s instance is used by TimerTaskExecutor for managing jobs",
        "Options": [
            "a) java.util.Timer",
            "b) java.util.Date",
            "c) java.util.HashMap",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: You can call Future.isDone() or Future.isCancelled() to determine whether the job is finished or cancelled, respectively."
    },
    {
        "id": 58,
        "Question": "Which tag informs the spring container about the use of AspectJ annotation?",
        "Options": [
            "a) aop:aspectj-autowire",
            "b) aop:aspectj-name",
            "c) aop:aspectj-autoproxy",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To enable AspectJ annotation support in the Spring IoC container, you only have to define an empty XML element aop:aspectj-autoproxy in your bean configuration file."
    },
    {
        "id": 59,
        "Question": "Which of the following is advice supported by Aspect Annotation?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterReturning",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: AspectJ supports five types of advice annotations: @Before, @After, @AfterReturning, @AfterThrowing, and @Around."
    },
    {
        "id": 60,
        "Question": "Which advice is executed once a joint point finishes?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterReturning",
            "d) @AfterThrowing"
        ],
        "Answer": "Answer: b\nExplanation: A pointcut is an expression to match a set of join points, while an advice is the action to take at a particular join point."
    },
    {
        "id": 61,
        "Question": "Which advice is executed only when joint point returns or throws an exception?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterReturning",
            "d) @AfterThrowing"
        ],
        "Answer": "Answer: b\nExplanation: An after advice is executed after a join point finishes, whenever it returns a result or throws an exception abnormally."
    },
    {
        "id": 62,
        "Question": "Which advice combines all advices into one?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterThrowing",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If you would like to perform logging only when a join point returns, you should replace the after advice with an after returning advice."
    },
    {
        "id": 63,
        "Question": "Which interface is implemented to specify precedence of aspects?",
        "Options": [
            "a) Ordered",
            "b) ApplicationAspect",
            "c) AspectPointcut",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: It gains full control of a join point, so you can combine all the actions of the preceding advices into one single advice. You can even control when, and whether, to proceed with the original join point execution."
    },
    {
        "id": 64,
        "Question": "Alternative annotative way to specify precedence of aspects?",
        "Options": [
            "a) @Order",
            "b) @Aspect",
            "c) @PointCut",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: An advice can access the current join point information by declaring an argument of type org.aspectj.lang.JoinPoint in the advice method signature."
    },
    {
        "id": 65,
        "Question": "Method which returns the highest priority of aspect’s join point?",
        "Options": [
            "a) getHighestPriority",
            "b) getOrder",
            "c) getHighOrder",
            "d) getPriority"
        ],
        "Answer": "Answer: a\nExplanation: The precedence of aspects can be specified either by implementing the Ordered interface."
    },
    {
        "id": 66,
        "Question": "11. What will be the output of the code snippet?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">    <span class=\"kw1\">import</span> <span class=\"co2\">org.aspectj.lang.annotation.Aspect</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">import</span> <span class=\"co2\">org.aspectj.lang.annotation.AfterThrowing</span><span class=\"sy0\">;</span>\n&nbsp;\n    @Aspect\n    <span class=\"kw1\">public</span> <span class=\"kw1\">class</span> AfterThrowingExample \n    <span class=\"br0\">{</span>\n&nbsp;\n\t  @AfterThrowing<span class=\"br0\">(</span>\n\t    pointcut<span class=\"sy0\">=</span><span class=\"st0\">\"com.xyz.myapp.SystemArchitecture.dataAccessOperation()\"</span>,\n\t    throwing<span class=\"sy0\">=</span><span class=\"st0\">\"ex\"</span><span class=\"br0\">)</span>\n\t  <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> doRecoveryActions<span class=\"br0\">(</span>DataAccessException e<span class=\"br0\">)</span>\n          <span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <span class=\"kw3\">IllegalArgumentException</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t    <span class=\"co1\">// ...</span>\n\t  <span class=\"br0\">}</span>\n&nbsp;\n    <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Runtime Error",
            "b) IllegalArgumentException",
            "c) BeanCreation Exception",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The precedence of aspects can be specified either by implementing the Ordered interface or @Order Annotation."
    },
    {
        "id": 67,
        "Question": "Which instantiation model is supported by AspectJ?",
        "Options": [
            "a) perthis",
            "b) pertarget",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The lower value returned by the getOrder() method represents higher priority."
    },
    {
        "id": 68,
        "Question": "Which instantiation model is supported by AspectJ?",
        "Options": [
            "a) perthis",
            "b) pertarget",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The throwing keyword in pointcut annotation doesn’t matches with the method’s parameter exception."
    },
    {
        "id": 69,
        "Question": "Which tag in XML is used to declare @Before advice’s method?",
        "Options": [
            "a) aop:before",
            "b) aop:after",
            "c) aop:afterthrow",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring supports AspectJ perthis and pertarget instantiation models."
    },
    {
        "id": 70,
        "Question": "Which tag in XML is used to declare @Before advice’s method?",
        "Options": [
            "a) aop:before",
            "b) aop:after-returning",
            "c) aop:afterthrow",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: percflow, percflowbelow, and pertypewithin are not currently supported."
    },
    {
        "id": 71,
        "Question": "Annotation used to refer poincuts?",
        "Options": [
            "a) @Pointcut",
            "b) @PointcutExecution",
            "c) @PointcutBefore",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Like many other AOP implementations, AspectJ also allows you to define a pointcut independently to be reused in multiple advices."
    },
    {
        "id": 72,
        "Question": "3.  what will be the output of the code snippet?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">   <span class=\"kw1\">package</span> <span class=\"co2\">com.apress.springrecipes.calculator</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">import</span> <span class=\"co2\">org.aspectj.lang.annotation.Aspect</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">import</span> <span class=\"co2\">org.aspectj.lang.annotation.Pointcut</span><span class=\"sy0\">;</span>\n   @Aspect\n   <span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CalculatorPointcuts \n   <span class=\"br0\">{</span>\n\t@Pointcut<span class=\"br0\">(</span><span class=\"st0\">\"execution(* *.*(..))\"</span><span class=\"br0\">)</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> loggingOperation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n   <span class=\"br0\">}</span>\n&nbsp;\n   <span class=\"kw1\">package</span> <span class=\"co2\">com.apress.springrecipes.calculator</span><span class=\"sy0\">;</span>\n   @Aspect\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CalculatorLoggingAspect \n<span class=\"br0\">{</span>\n   ...\n   @Before<span class=\"br0\">(</span><span class=\"st0\">\"CalculatorPointcuts.loggingOperation()\"</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> logBefore<span class=\"br0\">(</span>JoinPoint joinPoint<span class=\"br0\">)</span> \n   <span class=\"br0\">{</span>\n   ...\n   <span class=\"br0\">}</span>\n   @AfterReturning<span class=\"br0\">(</span>\n   pointcut <span class=\"sy0\">=</span> <span class=\"st0\">\"loggingOperation()\"</span>,\n   returning <span class=\"sy0\">=</span> <span class=\"st0\">\"result\"</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> logAfterReturning<span class=\"br0\">(</span>JoinPoint joinPoint, <span class=\"kw3\">Object</span> result<span class=\"br0\">)</span>\n   <span class=\"br0\">{</span>\n   <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <span class=\"kw3\">IllegalArgumentException</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n   <span class=\"br0\">}</span>\n   @AfterThrowing<span class=\"br0\">(</span>\n   pointcut <span class=\"sy0\">=</span> <span class=\"st0\">\"CalculatorPointcuts.loggingOperation()\"</span>,\n   throwing <span class=\"sy0\">=</span> <span class=\"st0\">\"e\"</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> logAfterThrowing<span class=\"br0\">(</span>JoinPoint joinPoint, <span class=\"kw3\">IllegalArgumentException</span> e<span class=\"br0\">)</span>\n   <span class=\"br0\">{</span>\n   ...\n   <span class=\"br0\">}</span>\n   @Around<span class=\"br0\">(</span><span class=\"st0\">\"CalculatorPointcuts.loggingOperation()\"</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> logAround<span class=\"br0\">(</span>ProceedingJoinPoint joinPoint<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">Throwable</span> \n   <span class=\"br0\">{</span>\n   ...\n   <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Runtime Error",
            "b) IllegalArgument Exception",
            "c) BeanCreation Exception",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In an AspectJ aspect, a pointcut can be declared as a simple method with the @Pointcut annotation."
    },
    {
        "id": 73,
        "Question": "Language used to set various kinds of join points",
        "Options": [
            "a) AspectJ pointcut language",
            "b) Java pointcut language",
            "c) XML pointcut language",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: When you refer to this pointcut, you have to include the class name as well. If the class is not located in the same package as the aspect, you have to include the package name also."
    },
    {
        "id": 74,
        "Question": "Which of the following pattern is used to match bean name?",
        "Options": [
            "a) bean(*Calculator)",
            "b) bean(Calculator)",
            "c) bean(com.appress.spring.Calculator)",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The AspectJ pointcut language is a powerful expression language that can match various kinds of join points."
    },
    {
        "id": 75,
        "Question": "Expressions which returns Parameters of pointcuts?",
        "Options": [
            "a) target",
            "b) args",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you use a pointcut expression out of this scope, an IllegalArgumentException will be thrown."
    },
    {
        "id": 76,
        "Question": "Method which checks if all target classes are matched",
        "Options": [
            "a) matches()",
            "b) pair()",
            "c) matchTargetClass()",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can omit the package name if the target class or interface is located in the same package as this aspect."
    },
    {
        "id": 77,
        "Question": "Spring supports operations on pointcuts:-",
        "Options": [
            "a) notably",
            "b) union",
            "c) intersection",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Annotations must be added to the implementation class but not the interface, as they will not be inherited."
    },
    {
        "id": 78,
        "Question": "Pointcuts can be composed using:-",
        "Options": [
            "a) org.springframework.aop.support.Pointcuts class",
            "b) composablePointcut class",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The following pointcut expression matches beans whose name ends with Calculator."
    },
    {
        "id": 79,
        "Question": "Pointcut used to parse an AspectJ pointcut expression string",
        "Options": [
            "a) org.springframework.aop.aspectj.AspectJExpressionPointcut",
            "b) org.springframework.aop.aspectj.AspectJExpressionPointcutString",
            "c) org.springframework.aop.aspectj.AspectJExpressionString",
            "d) org.springframework.aop.aspectj.AspectJPointcuttoString"
        ],
        "Answer": "Answer: b\nExplanation: This pointcut type is supported only in XML-based Spring AOP configurations, not in AspectJ annotations."
    },
    {
        "id": 80,
        "Question": "Which special type of advice is used to implement an interface?",
        "Options": [
            "a) Introduction",
            "b) Before",
            "c) After",
            "d) AfterSpecial"
        ],
        "Answer": "Answer: a\nExplanation: It allows your objects to implement an interface dynamically by providing an implementation class for that interface."
    },
    {
        "id": 81,
        "Question": "How does an Introduction advice do this in Spring?",
        "Options": [
            "a) dynamic proxy",
            "b) web proxy",
            "c) implements org.springframework.net.bundle interface",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You are able to introduce multiple interfaces with multiple implementation classes to your objects at the same time."
    },
    {
        "id": 82,
        "Question": "Annotation used to declare an introduction",
        "Options": [
            "a) Before",
            "b) After",
            "c) @DeclareParents",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You can introduce methods to your existing classes even without source code available."
    },
    {
        "id": 83,
        "Question": "Attribute used to specify implementation class",
        "Options": [
            "a) no such attribute",
            "b) defaultImpl",
            "c) defaultInterface",
            "d) defaultImplement"
        ],
        "Answer": "Answer: a\nExplanation: Introduction works by adding an interface to the dynamic proxy."
    },
    {
        "id": 84,
        "Question": "How to keep track of the usage of your beans",
        "Options": [
            "a) Calling Count",
            "b) Last modified date",
            "c) New Interface to your object",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In this aspect, you can declare an introduction by annotating an arbitrary field with the @DeclareParents annotation."
    },
    {
        "id": 85,
        "Question": "How to introduce counter field to original bean class?",
        "Options": [
            "a) Using Spring AOP",
            "b) Implementing interface",
            "c) AspectJ Pointcut",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The value attribute of the @DeclareParents annotation type indicates which classes are the targets for this introduction."
    },
    {
        "id": 86,
        "Question": "Tag used to declare aspects",
        "Options": [
            "a) aop:config",
            "b) aop:auto-proxy",
            "c) aop:autowire",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The interface to introduce is determined by the type of the annotated field. Finally, the implementation class used for this new interface is specified in the defaultImpl attribute."
    },
    {
        "id": 87,
        "Question": "Tag which defined Spring AOP configurations",
        "Options": [
            "a) aop:config",
            "b) aop:configregister",
            "c) aop:configbeans",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To enable AspectJ annotation support in Spring, you have already defined an empty XML element, aop:aspectj-autoproxy."
    },
    {
        "id": 88,
        "Question": "What are the ways to declare an advice?",
        "Options": [
            "a) pointcut-ref attribute",
            "b) pointcut attribute",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In the bean configuration file, all the Spring AOP configurations must be defined inside the aop:config element."
    },
    {
        "id": 89,
        "Question": "Applying aspects to your target objects",
        "Options": [
            "a) AspectJ Annotation",
            "b) Weaving",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: An advice element requires either a pointcut-ref attribute to refer to a pointcut or a pointcut attribute to embed a pointcut expression directly."
    },
    {
        "id": 90,
        "Question": "Special compiler used during weaving",
        "Options": [
            "a) jvm",
            "b) gcc",
            "c) ajc",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Weaving is the process of applying aspects to your target objects."
    },
    {
        "id": 91,
        "Question": "Name of the process when targe classes are loaded into JVM",
        "Options": [
            "a) load-time weaving",
            "b) process-time weaving",
            "c) load-process weaving",
            "d) process-delivery weaving"
        ],
        "Answer": "Answer: c\nExplanation: AspectJ compile-time weaving is done through a special AspectJ compiler called ajc."
    },
    {
        "id": 92,
        "Question": "How to weave your classes using argument while compiling?",
        "Options": [
            "a) -javaagent:CLASSPATH",
            "b) -javaagent:PackgePath",
            "c) -javaweave:CLASSPATH",
            "d) -javaweave:PackagePath"
        ],
        "Answer": "Answer: a\nExplanation: AspectJ load-time weaving (also known as LTW) happens when the target classes are loaded into JVM by a class loader."
    },
    {
        "id": 93,
        "Question": "XML Element to include load-time weaver",
        "Options": [
            "a) aop:config",
            "b) aop:auto-wire",
            "c) context:load-time-weaver",
            "d) aop:load-time-weaver"
        ],
        "Answer": "Answer: a\nExplanation: You need only to add a VM argument to the command that runs your application. Then your classes will get woven when they are loaded into the JVM."
    },
    {
        "id": 94,
        "Question": "Library to use AspectJ weaver",
        "Options": [
            "a) spring-instrument.jar",
            "b) spring-introduction.jar",
            "c) spring-aop.jar",
            "d) spring-weave.jar"
        ],
        "Answer": "Answer: c\nExplanation: To turn on a suitable load-time weaver for your Spring application, you need only to declare the empty XML element context:load-time-weaver."
    },
    {
        "id": 95,
        "Question": "Objects created outside the container:-",
        "Options": [
            "a) Domain Objects",
            "b) User Objects",
            "c) SpringVisitor Objects",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring will be able to detect the most suitable load-time weaver for your runtime environment."
    },
    {
        "id": 96,
        "Question": "How to inject Spring bean into domain objects",
        "Options": [
            "a) AOP",
            "b) XML",
            "c) AspectJ",
            "d) Java Based"
        ],
        "Answer": "Answer: a\nExplanation: To use the AspectJ weaver, you need to include the spring-instrument.jar"
    },
    {
        "id": 97,
        "Question": "Which scope does @Configurable instantiated class looks for?",
        "Options": [
            "a) Singleton",
            "b) Prototype",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Objects created outside the Spring IoC container are usually domain objects. They are often created using the new operator or from the results of database queries."
    },
    {
        "id": 98,
        "Question": "Scripting languages supported by Spring?",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring supports the 3 above mentioned scripting languages."
    },
    {
        "id": 99,
        "Question": "Scripting language based on Ruby",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: JRuby is an open source Java-based implementation of the popular Ruby programming language."
    },
    {
        "id": 100,
        "Question": "Dynamic Language for java platform to cope up with other languages",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Groovy is a dynamic language for the Java platform that integrates the features of other excellent programming languages."
    },
    {
        "id": 101,
        "Question": "Lightweight java scripting language executing java fragments",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: BeanShell is a lightweight Java scripting language that can dynamically execute Java code fragments while supporting scripting features like those of other scripting languages."
    },
    {
        "id": 102,
        "Question": "In Ruby instance variable begins with",
        "Options": [
            "a) #",
            "b) *",
            "c) @",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In Ruby, an instance variable begins with the @ sign."
    },
    {
        "id": 103,
        "Question": "XML Element to declare a bean implemented by JRuby",
        "Options": [
            "a) lang:jruby",
            "b) aop:jruby",
            "c) beanscript:jruby",
            "d) script:jruby"
        ],
        "Answer": "Answer: a\nExplanation: In the bean configuration file, you can declare a bean implemented with JRuby by using the lang:jruby."
    },
    {
        "id": 104,
        "Question": "XML element to specify the property values for scripting bean",
        "Options": [
            "a) lang:property",
            "b) bean:property",
            "c) script:property",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can specify the property values for a scripting bean in the lang:property elements."
    },
    {
        "id": 105,
        "Question": "XML Element to declare a bean implemented by Groovy",
        "Options": [
            "a) lang:groovy",
            "b) lang:jruby",
            "c) beanscript:jruby",
            "d) script:jruby"
        ],
        "Answer": "Answer: a\nExplanation: In the bean configuration file, you can declare a bean implemented with Groovy by using the lang:groovy."
    },
    {
        "id": 106,
        "Question": "Script’s location is specified by attribute",
        "Options": [
            "a) script-source",
            "b) xml-source",
            "c) script-annotation",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Specifying the script’s location in the script-source attribute."
    },
    {
        "id": 107,
        "Question": "XML Element to declare a bean implemented by JRuby",
        "Options": [
            "a) lang:bash",
            "b) aop:bash",
            "c) lang:bsh",
            "d) script:bash"
        ],
        "Answer": "Answer: c\nExplanation: In the bean configuration file, you can declare a bean implemented with BeanShell by using the lang:bsh."
    },
    {
        "id": 108,
        "Question": "Interface used to create additional features in groovy based beans",
        "Options": [
            "a) GroovyObjectCustomizer",
            "b) GroovyBeanCustomizer",
            "c) GroovyCustomizer",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The GroovyObjectCustomizer interface is a callback that allows you to hook additional creation logic into the process of creating a Groovy-backed bean."
    },
    {
        "id": 109,
        "Question": "Attribute which specifies all the interfaces",
        "Options": [
            "a) script-interfaces",
            "b) lang:bsh",
            "c) lang:script",
            "d) script:bsh"
        ],
        "Answer": "Answer: a\nExplanation: Spring creates a JDK dynamic proxy implementing all of the interfaces that are specified in the ‘script-interfaces’."
    },
    {
        "id": 110,
        "Question": "Element which allows you to control the scope",
        "Options": [
            "a) lang:jruby",
            "b) lang:language",
            "c) lang: bsh",
            "d) lang:groovy"
        ],
        "Answer": "Answer: b\nExplanation: There is just one (small) thing that you need to be aware of when advising scripted beans. You cannot use class-based proxies, you must use interface-based proxies."
    },
    {
        "id": 111,
        "Question": "BeanShell Library dependencies",
        "Options": [
            "a) bsh-2.0b4.jar",
            "b) cglib-nodep-2.1_3.jar",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The scope attribute on the various lang:language/ elements allows you to control the scope of the underlying scripted bean, just as it does with a regular bean."
    },
    {
        "id": 112,
        "Question": "Attribute used by Spring to refresh beans",
        "Options": [
            "a) refresh-check-interval",
            "b) refresh-check-delay",
            "c) refresh-delay",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring is able to refresh a scripted bean definition from its source once you have specified the checking interval in the refresh-check-delay attribute."
    },
    {
        "id": 113,
        "Question": "Default value of refresh-check-delay attribute",
        "Options": [
            "a) Zero",
            "b) Negative",
            "c) Positive",
            "d) None of the mentioned above"
        ],
        "Answer": "Answer: a\nExplanation: When a method is called on that bean, Spring will check the script source if the specified checking interval has elapsed. The Spring will refresh the bean definition from the script source if it has been changed."
    },
    {
        "id": 114,
        "Question": "XML Element to define an inline script",
        "Options": [
            "a) lang:inlinescript",
            "b) lang:inline_script",
            "c) lang:[email protected]",
            "d) lang:inline-script"
        ],
        "Answer": "Answer: b\nExplanation: By default, the refresh-check-delay attribute is negative, so the refresh checking feature is disabled. You can assign the milliseconds for refresh checking in this attribute to enable this feature."
    },
    {
        "id": 115,
        "Question": "To prevent the characters in your script from conflicting with the reserved XML characters",
        "Options": [
            "a) Use ![CDATA[…]] tag",
            "b) Use ![DATA[…]] tag",
            "c) Use ![CDATA(…)] tag",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: You can define an inline script source in the lang:inline-script element of a scripted bean to replace a reference to an external script source file by the script-source attribute."
    },
    {
        "id": 116,
        "Question": "Dynamic-language-backed bean with some configurations",
        "Options": [
            "a) Refreshable bean",
            "b) Beanshell",
            "c) Scripting Beans",
            "d) Inline Script"
        ],
        "Answer": "Answer: a\nExplanation: Spring IoC container only loads the bean configuration once, at startup."
    },
    {
        "id": 117,
        "Question": "To quickly add a Spring Validator implementation to a Spring MVC Controller",
        "Options": [
            "a) Use inline-script",
            "b) lang:inline-script",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You no longer have to specify the reference to the external script source file in the script-source attribute."
    },
    {
        "id": 118,
        "Question": "Script’s location is specified by attribute",
        "Options": [
            "a) script-source",
            "b) xml-source",
            "c) script-annotation",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A refreshable bean is a dynamic-language-backed bean that with a small amount of configuration, a dynamic-language-backed bean can monitor changes in its underlying source file resource, and then reload itself when the dynamic language source file is changed."
    },
    {
        "id": 119,
        "Question": "Way to secure web app’s URL.",
        "Options": [
            "a) servlet filters",
            "b) refresh-check-delay",
            "c) http servlet filters",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Security enables you to secure a web application’s URL access in a declarative way through simple configuration. It handles security by applying servlet filters to HTTP requests."
    },
    {
        "id": 120,
        "Question": "Servlet filter registered in web deployment descriptor, which filters request in spring application context.",
        "Options": [
            "a) DelegatingFilter",
            "b) DelegatingFilterProxy",
            "c) DelegatingProxy",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: As servlet filters must be registered in the web deployment descriptor to take effect, you have to register a DelegatingFilterProxy instance in the web deployment descriptor, which is a servlet filter that delegates request filtering to a filter in Spring’s application context."
    },
    {
        "id": 121,
        "Question": "Servlet APIs to access security information of web application.",
        "Options": [
            "a) HttpServletRequest.isUserInRole()",
            "b) HttpServletRequest.getUserPrincipal()",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Servlet API integration: This allows you to access security information in your web application via standard Servlet APIs, such as HttpServletRequest.isUserInRole() and HttpServletRequest.getUserPrincipal()."
    },
    {
        "id": 122,
        "Question": "To load root application context at the start up.",
        "Options": [
            "a) ContextListener",
            "b) ContextLoader",
            "c) ContextLoaderListener",
            "d) ContextEventListener"
        ],
        "Answer": "Answer: c\nExplanation: In the web deployment descriptor (i.e., web.xml), you register ContextLoaderListener to load the root application context at startup."
    },
    {
        "id": 123,
        "Question": "To dispatch requests for web application.",
        "Options": [
            "a) DispatcherServlet",
            "b) ViewHandler",
            "c) ViewResolver",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring MVC DispatcherServlet is used to dispatch requests."
    },
    {
        "id": 124,
        "Question": "The responsibility of DelegatingFilterProxy is simply to delegate HTTP request filtering to a Spring bean that implements the interface:-",
        "Options": [
            "a) java.util.logging.Filter",
            "b) java.util.logging.net",
            "c) java.util.logging.FilterHttp",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The responsibility of DelegatingFilterProxy is simply to delegate HTTP request filtering to a Spring bean that implements the java.util.logging.Filter interface."
    },
    {
        "id": 125,
        "Question": "Filter chain configured by Spring security, when web app security enabled.",
        "Options": [
            "a) springSecurityFilterChain",
            "b) delegatingFilterProxy",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: By default, it delegates to a bean whose name is the same as its filter-name property, but you can override the bean name in its targetBeanName init parameter."
    },
    {
        "id": 126,
        "Question": "Element used to restrict access to a particular URL.",
        "Options": [
            "a) restrict-url",
            "b) intercept-url",
            "c) intercept-restrict",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation:  As Spring Security will automatically configure a filter chain with the name springSecurityFilterChain when you enable web application security, you can simply use this name for your DelegatingFilterProxy instance."
    },
    {
        "id": 127,
        "Question": "Element which configures authentication services.",
        "Options": [
            "a) authentication-provider",
            "b) authentication-manager",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The http auto-config=”true” element automatically configures the basic security services that a typical web application needs. You can fine-tune these services with the corresponding sub elements inside it."
    },
    {
        "id": 128,
        "Question": "Element which defines user details.",
        "Options": [
            "a) user-service",
            "b) user-details",
            "c) user-requirements",
            "d) user-servicerequirements"
        ],
        "Answer": "Answer: b\nExplanation: Inside the http configuration element, you can restrict access to particular URLs with one or more intercept-url elements."
    },
    {
        "id": 129,
        "Question": "Which of the following way to provide authenticity of users is/are supported by Spring Security?",
        "Options": [
            "a) Authenticating against a database",
            "b) LDAP repository",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can configure authentication services in the authentication-provider element, which is nested inside the authentication-manager element."
    },
    {
        "id": 130,
        "Question": "The basic security services registered and configured by Spring Security.",
        "Options": [
            "a) Form-based login service",
            "b) Logout Service",
            "c) HTTP Basic authentication.",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Security also supports defining user details in user-service directly for simple security requirements. You can specify a\nusername, a password, and a set of authorities for each user."
    },
    {
        "id": 131,
        "Question": "HTTP Basic authentication support is configured by:-",
        "Options": [
            "a) logout",
            "b) http-basic",
            "c) http-basicauth",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring Security supports several ways of authenticating users, including authenticating against a database or an LDAP repository."
    },
    {
        "id": 132,
        "Question": "Form-based login is configured by:-",
        "Options": [
            "a) servlet filters",
            "b) refresh-check-delay",
            "c) form-login",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The form-based login service will render a web page that contains a login form for users to input their login details and process the login form submission. It’s configured via the form-login element."
    },
    {
        "id": 133,
        "Question": "Attribute used to display custom login page.",
        "Options": [
            "a) login-url",
            "b) custom-login",
            "c) login-custom",
            "d) custom-login"
        ],
        "Answer": "Answer: a\nExplanation: Note that the form action URL and the input field names are Spring Security–specific. However, the action URL can be customized with the login-url attribute of form-login."
    },
    {
        "id": 134,
        "Question": "Attribute which specifies redirection URL on login error.",
        "Options": [
            "a) authentication-failure-url",
            "b) authentication-failure_login-url",
            "c) authentication-login-url",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In order for Spring Security to display your custom login page when a login is requested, you have to specify its URL in the login-page attribute."
    },
    {
        "id": 135,
        "Question": "Session scope attribute to display error message.",
        "Options": [
            "a) SPRING_SECURITY_FIRST_EXCEPTION",
            "b) SPRING_SECURITY_LAST_EXCEPTION",
            "c) SPRING_SECURITY_EXCEPTION",
            "d) SPRING_SECURITY_LAST_ERROR"
        ],
        "Answer": "Answer: a\nExplanation: If you specify a custom login page, you will have to configure the authentication-failure-url attribute to specify which URL to redirect to on login error."
    },
    {
        "id": 136,
        "Question": "Logout service is configured by:-",
        "Options": [
            "a) logout",
            "b) login",
            "c) logout-basic",
            "d) logout_basic"
        ],
        "Answer": "Answer: b\nExplanation: If an error has occurred, you will have to display the error message by accessing the session scope attribute SPRING_SECURITY_LAST_EXCEPTION, which stores the last exception for the current user."
    },
    {
        "id": 137,
        "Question": "Element which redirects to a specific URL on logout.",
        "Options": [
            "a) logout-success",
            "b) logout-success_url",
            "c) logout-url",
            "d) logout-success-url"
        ],
        "Answer": "Answer: a\nExplanation: The logout service provides a handler to handle logout requests. It can be configured via the logout element."
    },
    {
        "id": 138,
        "Question": "Anonymous login services can be configured by:-",
        "Options": [
            "a) anonymous-basic",
            "b) anonymous",
            "c) anonymous-target",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: By default, a user will be redirected to the context path root when the logout succeeds, but sometimes, you may wish to direct the user to another URL."
    },
    {
        "id": 139,
        "Question": "Remember-me support can be configured by:-",
        "Options": [
            "a) remember-me",
            "b) remember-me-basic",
            "c) remember-basic",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The anonymous login service can be configured via the anonymous element."
    },
    {
        "id": 140,
        "Question": "Spring Security algorithms to secure password.",
        "Options": [
            "a) MD5",
            "b) SHA",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can customize the username and authorities of an anonymous user, whose default values are anonymousUser and ROLE_ANONYMOUS."
    },
    {
        "id": 141,
        "Question": "Connection of database with Apache derby server requires.",
        "Options": [
            "a) Derby client.jar",
            "b) Spring JDBC support",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Remember-me support can be configured via the remember-me element."
    },
    {
        "id": 142,
        "Question": "Utility to calculate MD5 digests for your password.",
        "Options": [
            "a) CheckSum",
            "b) BeanShell",
            "c) Jacksum",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Remember-me stores as cookie in the user’s browser not as cache."
    },
    {
        "id": 143,
        "Question": "Element used to secure methods.",
        "Options": [
            "a) security:intercept-methods",
            "b) global-method-security",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: First, you can embed a security:intercept-methods element in a bean definition to secure its methods. Alternatively, you can configure a global global-method-security element to secure multiple methods."
    },
    {
        "id": 144,
        "Question": "Element used to specify access attributes for bean’s methods.",
        "Options": [
            "a) security:protect",
            "b) security:intercept",
            "c) security:intercept-security",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can also annotate methods declared in a bean interface or an implementation class with the @Secured annotation and then enable security for them in global-method-security."
    },
    {
        "id": 145,
        "Question": "Attribute used to specify custom access decision manager.",
        "Options": [
            "a) access-decision-manager-ref",
            "b) access-decision-ref",
            "c) access-decision",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In a bean’s security:intercept-methods, you can specify multiple security:protect elements to specify access attributes for this bean’s methods."
    },
    {
        "id": 146,
        "Question": "Tag which displays user’s Authentication object.",
        "Options": [
            "a) security:tag",
            "b) security_Tag",
            "c) security:authentication",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you would like to use a custom access decision manager, you can specify it in the access-decision-manager-ref."
    },
    {
        "id": 147,
        "Question": "Tag which renders the granted authorities one by one.",
        "Options": [
            "a) c:for",
            "b) c:forEach",
            "c) c:doWhile",
            "d) c:while"
        ],
        "Answer": "Answer: a\nExplanation: Spring Security provides a JSPtag library for you to handle security in JSP views."
    },
    {
        "id": 148,
        "Question": "Tag used to render view contents conditionally.",
        "Options": [
            "a) security:authorize",
            "b) security:authority",
            "c) security:authenticate",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The security:authentication tag exposes the current user’s Authentication object for you to render its properties."
    },
    {
        "id": 149,
        "Question": "Attribute used to render enclosed content.",
        "Options": [
            "a) ifGranted",
            "b) if_Granted",
            "c) ifAllGranted",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You can store the authorities property, which contains the authorities granted to the user, in the JSP variable authorities, and render them one by one with a c:forEach tag. "
    },
    {
        "id": 150,
        "Question": "Module that allows each domain to have it’s own access.",
        "Options": [
            "a) access share list",
            "b) access common list",
            "c) access control list",
            "d) access list"
        ],
        "Answer": "Answer: a\nExplanation: If you would like to render view contents conditionally according to a user’s authorities, you can use the security:authorize tag. "
    },
    {
        "id": 151,
        "Question": "ACL(Access control list) consists of:-",
        "Options": [
            "a) object identity",
            "b) access control entities",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If you want the enclosing content to be rendered only when the user has been granted certain authorities at the same time, you have to specify them in the ifAllGranted attribute."
    },
    {
        "id": 152,
        "Question": "ACEs(Access control entries) core consists of:-",
        "Options": [
            "a) Permissions",
            "b) Security Identity",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring Security provides a module named ACL that allows each domain object to have its own access control list (ACL)."
    },
    {
        "id": 153,
        "Question": "Which of the following is/are part of BasePermission class:-",
        "Options": [
            "a) CREATE",
            "b) READ/WRITE",
            "c) DELETE",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: An ACL contains a domain object’s object identity to associate with the object, and also holds multiple access control entries (ACEs)."
    },
    {
        "id": 154,
        "Question": "SID(Security Identity) associates with permission using.",
        "Options": [
            "a) principal(PrincipalSid)",
            "b) authority (GrantedAuthoritySid)",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Multiple access control entries (ACEs), each of which contains the above mentioned two core parts."
    },
    {
        "id": 155,
        "Question": "Interfaces that defines operation of an ACL service.",
        "Options": [
            "a) AclService",
            "b) MutableAclService",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The BasePermission class predefines five basic permissions as constant values for you to use: READ (bit 0 or integer 1), WRITE (bit 1 or integer 2), CREATE (bit 2 or integer 4), DELETE (bit 3 or integer 8), and ADMINISTRATION (bit 4 or integer 16)."
    },
    {
        "id": 156,
        "Question": "Servlet listener which loads application context.",
        "Options": [
            "a) Security:intercept-methods",
            "b) global-method-security",
            "c) ContextLoaderListener",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: A web application can load Spring application context by registering the servlet listener ContextLoaderListener."
    },
    {
        "id": 157,
        "Question": "Method to retrieve Spring Applicationcontext.",
        "Options": [
            "a) WebApplicationContextUtils.getRequiredWebApplicationContext()",
            "b) WebApplicationContextUtils.getRequiredWeb()",
            "c) WebApplicationUtils.getRequiredWebApplicationContext()",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: As Spring applicationcontext is stored in the servlet context, you can retrieve it through the WebApplicationContextUtils.getRequiredWebApplicationContext() method by passing in a servlet context."
    },
    {
        "id": 158,
        "Question": "Class used to have full access to the Spring context’s life cycle machinery and dependency injection.",
        "Options": [
            "a) DelegatingFilterProxy",
            "b) WebApplicationContextUtils.getRequiredWeb()",
            "c) WebApplicationUtils.getRequiredWebApplicationContext()",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you want to implement filter-like functionality but want to have full access to the Spring context’s life cycle machinery and dependency injection, use the DelegatingFilterProxy class."
    },
    {
        "id": 159,
        "Question": "In order to leverage Spring application context machinery and configuration.",
        "Options": [
            "a) HttpRequestHandlerJNDI",
            "b) HttpRequestHandlerServlet",
            "c) HttpRequestHandler",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Suppose we wanted to rewrite the servlet functionality to leverage Spring application context machinery and configuration. The HttpRequestHandlerServlet will handle this for us."
    },
    {
        "id": 160,
        "Question": "Interface implemented by object instantiated by HttpRequestHandlerServlet.",
        "Options": [
            "a) HttpRequestHandlerJNDI",
            "b) HttpRequestHandlerServlet",
            "c) HttpRequestHandler",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In the servlet example, the HttpRequestHandlerServlet delegated to another object that implemented an interface—HttpRequestHandler—that was considerably simpler than that of a raw servlet."
    },
    {
        "id": 161,
        "Question": "Attribute used to look up and delegate a particular root bean.",
        "Options": [
            "a) filter",
            "b) filter-name",
            "c) filtername",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: the filter-name attribute is used to determine which bean in the root Spring application context to look up and delegate to."
    },
    {
        "id": 162,
        "Question": "ActionSupport class provides a method to access spring application context.",
        "Options": [
            "a) getWebApplicationContext()",
            "b) getWebApplication()",
            "c) getApplicationContext()",
            "d) contextEventListener()"
        ],
        "Answer": "Answer: a\nExplanation: Spring provides the ActionSupport class, a subclass of the Action base class that has a convenient getWebApplicationContext() method for you to access Spring application context."
    },
    {
        "id": 163,
        "Question": "Struts servlet used to handle web requests.",
        "Options": [
            "a) ActionServlet",
            "b) Action",
            "c) ActionSupport",
            "d) ActionStruts"
        ],
        "Answer": "Answer: a\nExplanation: In the web deployment descriptor (i.e., web.xml) of a Struts application, you have to register the Struts servlet ActionServlet to handle web requests."
    },
    {
        "id": 164,
        "Question": "Struts plugin used to integrate with spring.",
        "Options": [
            "a) ContextLoaderListener",
            "b) ContextLoaderPlugin",
            "c) ContextLoaderListenerPlugin",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Another way is to register the Struts plug-in ContextLoaderPlugin in the Struts configuration file."
    },
    {
        "id": 165,
        "Question": "Integration of JSF with Spring Application Context.",
        "Options": [
            "a) ContextLoaderListener",
            "b) DelegatingVariableResolver",
            "c) SpringBeanFacesELResolver",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Due to the similarity between Spring and JSF bean models, it’s very easy to integrate them by registering the Spring-provided JSF variable resolver DelegatingVariableResolver (for JSF 1.1) or the SpringBeanFacesELResolver (for JSF 1.2 and greater)."
    },
    {
        "id": 166,
        "Question": "To handle web requests in JSF.",
        "Options": [
            "a) FacesServlet",
            "b) JavaFacesServlet",
            "c) Faces-Servlet",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In the web deployment descriptor (i.e., web.xml) of a JSF application, you have to register the JSF servlet FacesServlet to handle web requests."
    },
    {
        "id": 167,
        "Question": "Component of JSF, for user’s input in a form.",
        "Options": [
            "a) h:form",
            "b) h:commandButton",
            "c) h:outputText",
            "d) h:inputText"
        ],
        "Answer": "Answer: a\nExplanation: h:form component for users to fill form."
    },
    {
        "id": 168,
        "Question": "Tag used to provide result of web requests and is read only.",
        "Options": [
            "a) h:form",
            "b) h:commandButton",
            "c) h:outputText",
            "d) h:inputText"
        ],
        "Answer": "Answer: c\nExplanation: The distance result is defined using an h:outputText component because its value is read-only. "
    },
    {
        "id": 169,
        "Question": "Tag which triggers server side requests.",
        "Options": [
            "a) h:form",
            "b) h:commandButton",
            "c) h:outputText",
            "d) h:inputText"
        ],
        "Answer": "Answer: b\nExplanation: You define an h:commandButton component whose action will be triggered on the server side when you click it. "
    },
    {
        "id": 170,
        "Question": "Tag used to integrate Spring with DWR.",
        "Options": [
            "a) dwr:integrate",
            "b) dwr:remote",
            "c) dwr:action",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You can simply configure which beans to expose for remote invocation by embedding the  tag without involving the DWR configuration file. "
    },
    {
        "id": 171,
        "Question": "Spring supports web flows by:-",
        "Options": [
            "a) Java",
            "b) XML",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring supports defining a flow either by java or XML."
    },
    {
        "id": 172,
        "Question": "Stated related to Spring Web flows.",
        "Options": [
            "a) view",
            "b) action",
            "c) decision",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Web Flow allows you to model UI activities as flows."
    },
    {
        "id": 173,
        "Question": "Required dependencies to manage web UI flows.",
        "Options": [
            "a) spring web flow distribution.",
            "b) org.springframework.webflow",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring Web Flow builds in several state types, including view state, action state, decision state, subflow state, and end state."
    },
    {
        "id": 174,
        "Question": "Spring Web flow supports.",
        "Options": [
            "a) Unified EL",
            "b) Object-Graph Navigation Language (OGNL)",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation:  An event contains a source and an event ID, and perhaps some attributes. "
    },
    {
        "id": 175,
        "Question": "To create URL path mappings from the ids of registered flow definitions.",
        "Options": [
            "a) FlowHandlerMapping",
            "b) FlowHandler",
            "c) FlowHandlerMappingRequest",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: To manage your web UI flows with Spring Web Flow, you need the Spring Web Flow distribution (e.g.,v2.0.8) on your CLASSPATH. "
    },
    {
        "id": 176,
        "Question": "XML Based flow definitions can be validated by:-",
        "Options": [
            "a) Spring Web Flow XSD",
            "b) Spring IDE",
            "c) SpringSource Tool Suite",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring Web Flow supports using Unified EL (used in JSF 1.2 and JSP 2.1) and Object-Graph Navigation Language (OGNL), which is used in Tapestry, WebWork, and other frameworks, as its expression language."
    },
    {
        "id": 177,
        "Question": "Element to trigger an action for view module.",
        "Options": [
            "a) on-render",
            "b) on-action",
            "c) on-trigger",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring Web Flow is able to detect the libraries of JBoss EL (as the default Unified EL implementation) and OGNL from the classpath. You can enable either of them (but not both) by including the corresponding JAR file in your classpath."
    },
    {
        "id": 178,
        "Question": "Variable to trigger the flow execution.",
        "Options": [
            "a) ${flowExecutionUrl}",
            "b) ${exec.flow}",
            "c) ${flowExecutionUrl.match}",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The FlowHandlerMapping follows a convention to create URL path mappings from the ids of registered flow definitions. "
    },
    {
        "id": 179,
        "Question": "12.Servers which listen on port 8080.",
        "Options": [
            "a) Apache Tomcat 6.0",
            "b) Jetty",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring Web Flow offers an XML–based flow definition language that can be validated by Spring Web Flow XSD and supported by Spring IDE or SpringSource Tool Suite (STS). "
    },
    {
        "id": 180,
        "Question": "Interface which is used to persist instances sessions.",
        "Options": [
            "a) serializable",
            "b) file.io",
            "c) io.file.*",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use the on-render element to trigger an action for a view state before its view renders. "
    },
    {
        "id": 181,
        "Question": "Class which assist Spring Web flow in handling form.",
        "Options": [
            "a) Form",
            "b) FormAction",
            "c) FormHandler",
            "d) Form-Handler"
        ],
        "Answer": "Answer: a\nExplanation: You have to start the URLs with the variable ${flowExecutionUrl} to trigger a flow execution. This variable will be evaluated by Spring Web Flow at runtime. "
    },
    {
        "id": 182,
        "Question": "Property for action to instantiate form objects.",
        "Options": [
            "a) formObjectClass",
            "b) formClass",
            "c) objectClass",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: By default, Tomcat and Jetty (and the Maven Jetty plugin configured for this code) listen on port 8080. "
    },
    {
        "id": 183,
        "Question": "Element which secures web flows.",
        "Options": [
            "a) secured",
            "b) security",
            "c) sec",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation:  With Spring Security configured properly, you can simply secure a flow, a state, or a transition by embedding the secured element with required access attributes specified."
    },
    {
        "id": 184,
        "Question": "To secure web flows with Spring Security.",
        "Options": [
            "a) DelegatingFilter",
            "b) DelegatingFilterProxy",
            "c) DelegatingProxy",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: To secure web flows with Spring Security, you first have to configure a DelegatingFilterProxy filter in the web deployment descriptor (i.e., web.xml)."
    },
    {
        "id": 185,
        "Question": "3. Group id to add spring security using Maven.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"sy0\">&lt;</span>dependency<span class=\"sy0\">&gt;</span>\n   <span class=\"sy0\">&lt;</span>groupId<span class=\"sy0\">&gt;&lt;/</span>groupId<span class=\"sy0\">&gt;</span>\n   <span class=\"sy0\">&lt;</span>artifactId<span class=\"sy0\">&gt;</span>spring<span class=\"sy0\">-</span>security<span class=\"sy0\">-</span>core<span class=\"sy0\">&lt;/</span>artifactId<span class=\"sy0\">&gt;</span>\n   <span class=\"sy0\">&lt;</span>version<span class=\"sy0\">&gt;</span>3.0.2.<span class=\"me1\">RELEASE</span><span class=\"sy0\">&lt;/</span>version<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;/</span>dependency<span class=\"sy0\">&gt;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) org.springframework.secure",
            "b) org.springframework.security",
            "c) org.springframework.securedflow",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: org.springframework.secur is used to secure web flows with Spring Security."
    },
    {
        "id": 186,
        "Question": "To enable Spring security for web flows.",
        "Options": [
            "a) SecurityFlowExecutionListener",
            "b) SecurityFlowExecution",
            "c) FlowSecurity",
            "d) SecurityFlowListener"
        ],
        "Answer": "Answer: b\nExplanation: HTTP auto-config, which provides a default form-based login service, an anonymous login service, and so on."
    },
    {
        "id": 187,
        "Question": "6. Which of the following class should replace ‘?’.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"sy0\">&lt;</span>beans ...<span class=\"sy0\">&gt;</span>\n...\n  <span class=\"sy0\">&lt;</span>webflow<span class=\"sy0\">:</span>flow<span class=\"sy0\">-</span>executor id<span class=\"sy0\">=</span><span class=\"st0\">\"flowExecutor\"</span><span class=\"sy0\">&gt;</span>\n  <span class=\"sy0\">&lt;</span>webflow<span class=\"sy0\">:</span>flow<span class=\"sy0\">-</span>execution<span class=\"sy0\">-</span>listeners<span class=\"sy0\">&gt;</span>\n  <span class=\"sy0\">&lt;</span>webflow<span class=\"sy0\">:</span>listener ref<span class=\"sy0\">=</span><span class=\"st0\">\"securityFlowExecutionListener\"</span> <span class=\"sy0\">/&gt;</span>\n  <span class=\"sy0\">&lt;/</span>webflow<span class=\"sy0\">:</span>flow<span class=\"sy0\">-</span>execution<span class=\"sy0\">-</span>listeners<span class=\"sy0\">&gt;</span>\n  <span class=\"sy0\">&lt;/</span>webflow<span class=\"sy0\">:</span>flow<span class=\"sy0\">-</span>executor<span class=\"sy0\">&gt;</span>\n  <span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"securityFlowExecutionListener\"</span> <span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"?\"</span> <span class=\"sy0\">/&gt;</span>\n<span class=\"sy0\">&lt;/</span>beans<span class=\"sy0\">&gt;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) org.springframework.webflow.security.SecurityFlow",
            "b) org.springframework.webflow.SecurityFlowExecutionListener",
            "c) org.springframework.webflow.security.SecurityFlowExecutionListener",
            "d) org.springframework.security.SecurityFlowExecutionListener"
        ],
        "Answer": "Answer: a\nExplanation: You have to register the flow execution listener SecurityFlowExecutionListener in the flow executor to enable Spring Security for web flow."
    },
    {
        "id": 188,
        "Question": "Which attribute is used to access security element of web flow.",
        "Options": [
            "a) attribute",
            "b) attributes-security",
            "c) attributes",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You have to register the flow execution listener SecurityFlowExecutionListener in the flow executor to enable Spring Security for web flow."
    },
    {
        "id": 189,
        "Question": "Spring web flow supports integration with.",
        "Options": [
            "a) JSF",
            "b) Hibernate",
            "c) JPA",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can specify multiple access attributes required for accessing this web flow in the attributes attribute, separated by commas."
    },
    {
        "id": 190,
        "Question": "To integrate JPA with Spring Web flows.",
        "Options": [
            "a) JpaFlowExecutionListener",
            "b) HibernateFlowExecutionListener",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring Web Flow 2.0 comes with support for JPA and Hibernate."
    },
    {
        "id": 191,
        "Question": "To integrate Hibernate with Spring Web flows.",
        "Options": [
            "a) JpaFlowExecutionListener",
            "b) HibernateFlowExecutionListener",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To have Spring Web Flow manage the persistence contexts for your web flows, you have to register a flow execution listener (e.g., JpaFlowExecutionListener for JPA."
    },
    {
        "id": 192,
        "Question": "HibernateFlowExecutionListener and JpaFlowExecutionListener both belongs to which of the package.",
        "Options": [
            "a) org.springframework.web.persistence package",
            "b) org.springframework.persistence package",
            "c) org.springframework.webflow package package",
            "d) org.springframework.webflow.persistence package"
        ],
        "Answer": "Answer: b\nExplanation: To have Spring Web Flow manage the persistence contexts for your web flows, you have to register a flow execution listener (e.g., HibernateFlowExecutionListener for Hibernate."
    },
    {
        "id": 193,
        "Question": "Libraries used to integrate Hibernate with JPA.",
        "Options": [
            "a) Hibernate 3",
            "b) Hibernate 3 Entity Manager",
            "c) JPA API",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: JpaFlowExecutionListener for JPA and HibernateFlowExecutionListener for Hibernate, both of which belong to the org.springframework.webflow.persistence package) in the flow executor."
    },
    {
        "id": 194,
        "Question": "To configure JPA vendor-specific information.",
        "Options": [
            "a) JPA vendor adaptor",
            "b) Data source",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: . When a new flow starts, this listener creates a new persistence context (e.g., a JPA entity manager or a Hibernate session) and binds it to the flow scope."
    },
    {
        "id": 195,
        "Question": "View Technologies to render Spring Web MVC view.",
        "Options": [
            "a) JSP",
            "b) Tiles",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: By default, Spring Web Flow relies on Spring MVC view technologies (e.g., JSP and Tiles) to render its views."
    },
    {
        "id": 196,
        "Question": "Submodules of Spring\tWeb Flow to simplify use of JSF and javascript in Spring.",
        "Options": [
            "a) Spring Faces",
            "b) Spring Javascript",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring Web Flow provides two submodules, Spring Faces and Spring JavaScript, to simplify using JSF and JavaScript in Spring."
    },
    {
        "id": 197,
        "Question": "To use JSF Validation components provided by spring faces.",
        "Options": [
            "a) Faces",
            "b) Spring Javascript",
            "c) Facelets",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: These components are provided as Facelets tags, so you have to use Facelets as your JSF view technology to use them."
    },
    {
        "id": 198,
        "Question": "Attribute used to handle web flow requests.",
        "Options": [
            "a) servlet-mapping",
            "b) servlet-attr",
            "c) servlet-flow",
            "d) servlet-requests"
        ],
        "Answer": "Answer: c\nExplanation: To use the JSF validation components provided by Spring Faces, you have to use Facelets to create your JSF views."
    },
    {
        "id": 199,
        "Question": "JSF view handler to enable Facelets and a SpringBeanFacesELResolver to access Spring beans.",
        "Options": [
            "a) FaceletViewHandler",
            "b) FaceletView",
            "c) FaceletHandler",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you are going to use the legacy JSF request handling at the same time, you will have to specify that."
    },
    {
        "id": 200,
        "Question": "To resolve Facelets views we configure:-",
        "Options": [
            "a) ViewFacelets",
            "b) ViewResolver",
            "c) View-resolver",
            "d) View_Resolver"
        ],
        "Answer": "Answer: a\nExplanation: You have to configure FaceletViewHandler as the JSF view handler to enable Facelets and a SpringBeanFacesELResolver to be able to access Spring beans through JSF expression language."
    },
    {
        "id": 201,
        "Question": "File extension of a view state’s name which is by default loaded by facelet page.",
        "Options": [
            "a) .xml",
            "b) .hbm.xml",
            "c) .xhtml",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: We configure a ViewResolver to resolve Facelets views by conventions we dictate. "
    },
    {
        "id": 202,
        "Question": "Navigation in traditional JSF applications is handled by:-",
        "Options": [
            "a) linking directly linking to a resource",
            "b) commandLink",
            "c) invoking an action",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The JSF flow builder services internally use a JSF view factory, which will, by default, load a Facelets page using a view state’s name and .xhtml as the file extension. "
    },
    {
        "id": 203,
        "Question": "For cross field validation or some sort of barrier to ensure state before you start a flow, we use.",
        "Options": [
            "a) FacesContext",
            "b) FaceletContext",
            "c) FacesResolver",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Navigation in traditional JSF applications is handled by linking directly linking to a resource or by invoking an action (for example, on a commandLink). "
    },
    {
        "id": 204,
        "Question": "To use Spring Faces Components, we register which of the following?",
        "Options": [
            "a) Servlet API",
            "b) ResourceServlet",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: There are many reasons to want to use the FacesContext from the action. "
    },
    {
        "id": 205,
        "Question": "Resources retrieved by Spring Faces Component.",
        "Options": [
            "a) JavaScript",
            "b) CSS",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Before you can use the Spring Faces components, you have to register ResourceServlet, which is provided by Spring JavaScript for accessing static resources in JAR files, in the web deployment descriptor."
    },
    {
        "id": 206,
        "Question": "Component which additionally provides a pop-up date picker control for its enclosed input field.",
        "Options": [
            "a) clientDateValidator",
            "b) clientValidator",
            "c) dateValidator",
            "d) validator"
        ],
        "Answer": "Answer: c\nExplanation: Spring Faces components will retrieve static JavaScript and CSS resources from Spring JavaScript through this servlet."
    },
    {
        "id": 207,
        "Question": "Component which encloses command button.",
        "Options": [
            "a) validateAll",
            "b) validateAllClick",
            "c) validateAllInClick",
            "d) validateAllOnClick"
        ],
        "Answer": "Answer: a\nExplanation: The validation components enable client-side validation for the inputText components. You will see that the clientDateValidator component additionally provides a pop-up date picker control for its enclosed input field. "
    },
    {
        "id": 208,
        "Question": "Libraries provided by RichFaces an integration support for Spring web flow.",
        "Options": [
            "a) RichFaces",
            "b) Slf-4j",
            "c) Log-4j",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: When a command button enclosed by a validateAllInClick component is clicked, it will trigger all validators in the same page to validate their fields. "
    },
    {
        "id": 209,
        "Question": "Design pattern implemented by Dispatcher Servlet.",
        "Options": [
            "a) jsp",
            "b) tiles",
            "c) front controller",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: A Spring MVC controller—often referred to as a Dispatcher Servlet—implements one of Sun’s core Java EE design patterns called front controller."
    },
    {
        "id": 210,
        "Question": "Class used to give a class behavior of a Dispatcher Servlet.",
        "Options": [
            "a) AbstractController",
            "b) Controller",
            "c) Abstract Class",
            "d) AbstractAction"
        ],
        "Answer": "Answer: a\nExplanation: Prior to Spring 3.0 one of a series of classes, such as AbstractController, were used to give a class the behavior of a Dispatcher Servlet."
    },
    {
        "id": 211,
        "Question": "Annotation for Controller Class.",
        "Options": [
            "a) @Before",
            "b) @Controller",
            "c) @After",
            "d) @Exception"
        ],
        "Answer": "Answer: b\nExplanation: When a @Controller annotated class (i.e., a controller class) receives a request, it looks for an appropriate handler method to handle the request."
    },
    {
        "id": 212,
        "Question": "Handler method annotation.",
        "Options": [
            "a) @Before",
            "b) @Controller",
            "c) @After",
            "d) @RequestMapping"
        ],
        "Answer": "Answer: d\nExplanation: In order to do so, a controller class’s methods are decorated with the @RequestMapping annotation, making them handler methods."
    },
    {
        "id": 213,
        "Question": "Method arguments that can be used in handler methods using the @RequestMapping annotation.",
        "Options": [
            "a) HttpServletRequest or HttpServleResponse",
            "b) @RequestParam",
            "c) @ModelAttribute",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The above mentioned is only a partial list of valid argument types, just to give you an idea."
    },
    {
        "id": 214,
        "Question": "Annotation which represents cookie values of requests.",
        "Options": [
            "a) HttpServletRequest or HttpServleResponse",
            "b) @RequestParam",
            "c) @Cookie",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Cookie values included in an incoming request, annotated with @CookieValue."
    },
    {
        "id": 215,
        "Question": "To add attributes to the model.",
        "Options": [
            "a) Map",
            "b) ModelMap",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Map or ModelMap, for the handler method to add attributes to the model."
    },
    {
        "id": 216,
        "Question": "To access the binding and validation result for the command object.",
        "Options": [
            "a) Errors",
            "b) BindingResult",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Errors or BindingResult, for the handler method to access the binding and validation result for the command object."
    },
    {
        "id": 217,
        "Question": "To notify its completion of session processing.",
        "Options": [
            "a) Errors",
            "b) BindingResult",
            "c) SessionStatus",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: SessionStatus, for the handler method to notify its completion of session processing."
    },
    {
        "id": 218,
        "Question": "Parameter used to specify a configuration file.",
        "Options": [
            "a) contextConfigLocation",
            "b) contextConfigure",
            "c) contextLocation",
            "d) none of these"
        ],
        "Answer": "Answer: a\nExplanation: Once the controller class has resolved a view name into a view implementation, per the view implementation design, it renders the objects (e.g., HttpServletRequest, Map, Errors, or SessionStatus) passed by the controller’s handler method. "
    },
    {
        "id": 219,
        "Question": "Bean classes pre-registered in the web application context by default.",
        "Options": [
            "a) DefaultAnnotationHandlerMapping",
            "b) AnnotationMethodHandlerAdapter",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: By default, a look is made for a file by joining the servlet name with -servlet.xml as the file name. You can explicitly specify a configuration file in the contextConfigLocation servlet parameter.  "
    },
    {
        "id": 220,
        "Question": "Callback methods provided by HandlerInterceptor to implement.",
        "Options": [
            "a) preHandle()",
            "b) postHandle()",
            "c) afterCompletion()",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The @RequestMapping annotation can be applied to the class level or the method level."
    },
    {
        "id": 221,
        "Question": "Interface implemented by locale resolver.",
        "Options": [
            "a) localeResolver",
            "b) tiles",
            "c) front controller",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In a Spring MVC application, a user’s locale is identified by a locale resolver, which has to implement the LocaleResolver interface."
    },
    {
        "id": 222,
        "Question": "Default localeResolver used by Spring.",
        "Options": [
            "a) AcceptHeaderLocale",
            "b) AcceptHeader",
            "c) AcceptHeaderLocaleResolver",
            "d) AcceptLocaleResolver"
        ],
        "Answer": "Answer: a\nExplanation: You must set the bean name of the locale resolver to localeResolver for DispatcherServlet to auto-detect."
    },
    {
        "id": 223,
        "Question": "Alternative way to resolve locales.",
        "Options": [
            "a) AcceptHeaderLocale",
            "b) AcceptHeader",
            "c) AcceptHeaderLocaleResolver",
            "d) SessionLocaleResolver"
        ],
        "Answer": "Answer: c\nExplanation: The default locale resolver used by Spring is AcceptHeaderLocaleResolver."
    },
    {
        "id": 224,
        "Question": "Property which indicates how many seconds this cookie should be persisted.",
        "Options": [
            "a) cookieMaxAge",
            "b) cookieName",
            "c) cookieAge",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This header is set by a user’s web browser according to the locale setting of the underlying operating system."
    },
    {
        "id": 225,
        "Question": "Method used to change user’s locale.",
        "Options": [
            "a) set",
            "b) setLocale",
            "c) locale",
            "d) set_locale"
        ],
        "Answer": "Answer: d\nExplanation: Another option of resolving locales is by SessionLocaleResolver."
    },
    {
        "id": 226,
        "Question": "Property of LocaleChangeInterceptor used to customize parameter name.",
        "Options": [
            "a) localeResolver.setLocale",
            "b) paramName",
            "c) locale.parm",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The cookieMaxAge property indicates how many seconds this cookie should be persisted. "
    },
    {
        "id": 227,
        "Question": "Parameter which can change user’s locale by any URL.",
        "Options": [
            "a) locale",
            "b) languageURL",
            "c) language",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Changing a user’s locale by calling LocaleResolver.setLocale() explicitly. "
    },
    {
        "id": 228,
        "Question": "Interface used to resolve text messages.",
        "Options": [
            "a) Message",
            "b) Message_Source",
            "c) Language",
            "d) MessageSource"
        ],
        "Answer": "Answer: b\nExplanation: Changing a user’s locale by calling LocaleResolver.setLocale() explicitly. "
    },
    {
        "id": 229,
        "Question": "Tag used by view to resolve text messages.",
        "Options": [
            "a) spring:message",
            "b) spring:language",
            "c) spring:title",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: So, if you have more than one handler mapping configured in your web application context, you have to register this interceptor to allow users to change their locales in any of the URLs. "
    },
    {
        "id": 230,
        "Question": "The cookieMaxAge value when browser is closed.",
        "Options": [
            "a) 0",
            "b) 1",
            "c) -1",
            "d) true"
        ],
        "Answer": "Answer: c\nExplanation: Now a user’s locale can be changed by any URLs with the language parameter."
    },
    {
        "id": 231,
        "Question": "Interface for Dispatcher Servlet to auto detect view resolver beans.",
        "Options": [
            "a) localeResolver",
            "b) tiles",
            "c) ViewResolver",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring MVC comes with several ViewResolver implementations for you to resolve views using different strategies."
    },
    {
        "id": 232,
        "Question": "ViewResolver which maps each view name tol an application’s directory.",
        "Options": [
            "a) InternalViewResolver",
            "b) InternalResourceViewResolver",
            "c) InternalResolver",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The view resolver InternalResourceViewResolver maps each view name to an application’s directory by means of a prefix and a suffix declaration."
    },
    {
        "id": 233,
        "Question": "InternalResourceViewResolver resolves view names into view objects of type.",
        "Options": [
            "a) JstlView",
            "b) Jst Library",
            "c) View",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: By default, InternalResourceViewResolver resolves view names into view objects of type JstlView if the JSTL library (i.e., jstl.jar) is present in the classpath. "
    },
    {
        "id": 234,
        "Question": "View beans from a resource bundle is loaded by.",
        "Options": [
            "a) ResourceBundleViewResolver",
            "b) ResourceBundleView",
            "c) ResourceViewResolver",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: This location can be overridden through the location property."
    },
    {
        "id": 235,
        "Question": "Views that can’t be resolved by InternalResourceViewResolver.",
        "Options": [
            "a) redirect",
            "b) redirect:prefix",
            "c) redirect:suffix",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: ResourceBundleViewResolver loads view beans from a resource bundle in the classpath root."
    },
    {
        "id": 236,
        "Question": "Properties used to determine the correct content and type for a certain web requests.",
        "Options": [
            "a) The URL extension provided in a request",
            "b) The HTTP Accept header",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Now the resource bundle views.properties should only contain the views that can’t be resolved by InternalResourceViewResolver (e.g., the redirect views)."
    },
    {
        "id": 237,
        "Question": "Inspection of header is done by which of the following.",
        "Options": [
            "a) InternalViewResolver",
            "b) ContentNegotiatingViewResolver",
            "c) ContentNegotiating",
            "d) InternalResolver"
        ],
        "Answer": "Answer: c\nExplanation: When a request is received for a web application, it contains a series of properties that allow the processing framework, in this case Spring MVC, to determine the correct content and type to return to the requesting party. "
    },
    {
        "id": 238,
        "Question": "The ContentNegotiatingViewResolver resolver first determines the media type for a request based on which of the following criteria?",
        "Options": [
            "a) It checks a request path extension",
            "b) If a request path has an extension but no match can be found in the default mediaTypes section of the ContentNegotiatingViewResolver bean",
            "c) If no extension is present in a request path, the HTTP Accept header of the request is used",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Inspecting HTTP Accept headers in a controller can be a messy process. So Spring MVC supports the inspection of headers through the ContentNegotiatingViewResolver. "
    },
    {
        "id": 239,
        "Question": "To configure the exception mappings in the web application context.",
        "Options": [
            "a) SimpleMappingExceptionResolver",
            "b) ExceptionResolver",
            "c) ExceptionViewResolver",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It’s necessary to make the content negotiating resolver work."
    },
    {
        "id": 240,
        "Question": "Annotation which allows a controller’s field to be assigned using Spring Expression Language(SpEL)",
        "Options": [
            "a) @Value",
            "b) @After",
            "c) @Default",
            "d) @None"
        ],
        "Answer": "Answer: d\nExplanation: It checks a request path extension (e.g., .html, .xml, or .pdf) against the default\nmedia types (e.g., text/html) specified in the mediaTypes section of the\nContentNegotiatingViewResolver bean.\nIf a request path has an extension but no match can be found in the default\n   mediaTypes section of the ContentNegotiatingViewResolver bean, an attempt is\n  made to determine an extension’s media type using FileTypeMap belonging to Java\n   Activation Framework.\nIf no extension is present in a request path, the HTTP Accept header of the request\n   is used."
    },
    {
        "id": 241,
        "Question": "Tag, used to define a location in which to place errors in case a form.",
        "Options": [
            "a) form",
            "b) form:GET",
            "c) form:POST",
            "d) form:errors"
        ],
        "Answer": "Answer: a\nExplanation: These beans have to implement the HandlerExceptionResolver interface for DispatcherServlet to auto-detect them."
    },
    {
        "id": 242,
        "Question": "To validate Java beans in a web application using annotations.",
        "Options": [
            "a) XML",
            "b) Java Based",
            "c) JAR-303 standard",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: You can validate Java beans in a web application using annotations based on the JSR-303 standard."
    },
    {
        "id": 243,
        "Question": "For validating beans Spring supports.",
        "Options": [
            "a) ad-hoc technique",
            "b) jsr-303",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: JSR-303 or bean validation is a specification whose objective is to standardize the validation of Java beans through annotations."
    },
    {
        "id": 244,
        "Question": "Annotation which indicates a field cannot be a null.",
        "Options": [
            "a) @NotNULL",
            "b) @NotNull",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: This requires you to extend one of the Spring framework’s classes to create a validator class for a particular type of Java bean."
    },
    {
        "id": 245,
        "Question": "Annotation used to indicate a field has to have a minimum of 2 characters.",
        "Options": [
            "a) @NotNull",
            "b) @Size",
            "c) @MaxSize",
            "d) @size"
        ],
        "Answer": "Answer: b\nExplanation: The objective of the JSR-303 standard is to use annotations directly in a Java bean class."
    },
    {
        "id": 246,
        "Question": "Annotation which receives a value in the form regexp=”[email protected]+\\\\.[a-z]+”.",
        "Options": [
            "a) @Pattern",
            "b) @EmailRecognizer",
            "c) @Email",
            "d) @Null"
        ],
        "Answer": "Answer: b\nExplanation: The @NotNull annotation, which indicates a field cannot be null ."
    },
    {
        "id": 247,
        "Question": "A field named validator is of type.",
        "Options": [
            "a) javax.validation.Validator",
            "b) javax.validation.ValidatorFactory",
            "c) javax.validation.ValidatorFactor",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: @Size annotation used to indicate a field has to have a minimum of 2 characters."
    },
    {
        "id": 248,
        "Question": "Validator field is not assigned to any bean, but rather a factory class of the type.",
        "Options": [
            "a) javax.validation.Validator",
            "b) javax.validation.ValidatorFactory",
            "c) javax.validation.ValidatorFactor",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: @Pattern annotation receives a value in the form regexp=”[email protected]+\\\\.[a-z]+”."
    },
    {
        "id": 249,
        "Question": "To hold any errors detected from validating the instance of beans.",
        "Options": [
            "a) javax.validation.Validator",
            "b) javax.validation.ValidatorFactory",
            "c) javax.validation.ValidatorFactor",
            "d) javax.validation.ConstraintViolation"
        ],
        "Answer": "Answer: a\nExplanation: The first addition to the controller is a field named validator of the type javax.validation.Validator. "
    },
    {
        "id": 250,
        "Question": "To use JSR-303 bean validation in a web application, dependencies to be added in maven.",
        "Options": [
            "a) javax.validation",
            "b) org.hibernate",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: This is how JSR-303 validation works. The assignment process is done inside the controller’s constructor. "
    },
    {
        "id": 251,
        "Question": "Spring MVC supports generating Excel files using which of the following libraries.",
        "Options": [
            "a) Apache POI library",
            "b) JExcelAPI library",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Set of the type javax.validation.ConstraintViolation to hold any errors detected from validating the instance of the Person object."
    },
    {
        "id": 252,
        "Question": "The view classes for Excel view is/are:-",
        "Options": [
            "a) AbstractExcelView",
            "b) AbstractJExcelView",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: you must add above mentioned dependencies to an implementation to your CLASSPATH."
    },
    {
        "id": 253,
        "Question": "Spring MVC supports generating PDF files using which of the following libraries.",
        "Options": [
            "a) iText library",
            "b) iJText library",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring integrates the generation of Excel and PDF files into its MVC framework. "
    },
    {
        "id": 254,
        "Question": "To publish a REST service with Spring.",
        "Options": [
            "a) publishing an application’s data as a REST service",
            "b) accessing data from third-party REST services",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: One involves publishing an application’s data as a REST service, the other one involves accessing data from third-party REST services to be used in an application."
    },
    {
        "id": 255,
        "Question": "Publishing an application’s data as a REST service requires.",
        "Options": [
            "a) @RequestMapping",
            "b) @PathVariable",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Publishing an application’s data as a REST service revolves around the use of the Spring MVC annotations @RequestMapping and @PathVariable. "
    },
    {
        "id": 256,
        "Question": "Annotation added as an input parameter to the handler method.",
        "Options": [
            "a) @PathVariable",
            "b) @Path",
            "c) @PathLocale",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This recipe will explore the simplest mechanism, which involves the use of Spring’s MarshallingView class. "
    },
    {
        "id": 257,
        "Question": "Notation for defining REST endpoints.",
        "Options": [
            "a) { }",
            "b) *",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The @PathVariable annotation is added as an input parameter to the handler method, per Spring’s MVC conventions, in order for it to be used inside the handler method body."
    },
    {
        "id": 258,
        "Question": "General-purpose class that allows a response to be rendered using a marshaller.",
        "Options": [
            "a) MarshallingView",
            "b) Marshalling",
            "c) View",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In addition to supporting the { } notation, it’s also possible to use a wildcard * notation for defining REST endpoints. "
    },
    {
        "id": 259,
        "Question": "The marshaller used by MarshallingView belongs to one of a series of XML marshallers.",
        "Options": [
            "a) Jaxb2Marshaller",
            "b) XmlBeansMarshaller",
            "c) CastorMarshalle",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The membertemplate view is defined as a MarshallingView type, which is a general-purpose class that allows a response to be rendered using a marshaller.  "
    },
    {
        "id": 260,
        "Question": "To configure Jaxb2Marshaller marshaller we require.",
        "Options": [
            "a) ClassesToBeBound",
            "b) ContextPath",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Therefore, for this particular case, a marshaller is charged with transforming a Member object into an XML data format. "
    },
    {
        "id": 261,
        "Question": "Annotation which allows the Jaxb2Marshaller marshaller to detect a class’s (i.e., object’s) fields.",
        "Options": [
            "a) @XmlRootElement",
            "b) @XmlRoot",
            "c) @NotNull",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The marshaller used by MarshallingView belongs to one of a series of XML marshallers provided by Spring—Jaxb2Marshaller. Other marshallers provided by Spring include CastorMarshaller, JibxMarshaller, XmlBeansMarshaller, and XStreamMarshaller."
    },
    {
        "id": 262,
        "Question": "Accessing a third-party REST service inside a Spring application.",
        "Options": [
            "a) RestTemplate Class",
            "b) ViewResolver",
            "c) InternalViewResolver",
            "d) View"
        ],
        "Answer": "Answer: c\nExplanation: The Jaxb2Marshaller marshaller requires to be configured with either a property named classesToBeBound or contextPath."
    },
    {
        "id": 263,
        "Question": "REST service end point comprises an address.",
        "Options": [
            "a) starts with http:// and ends with ?",
            "b) starts with http:// and ends with &",
            "c) no certain URL is specified",
            "d) depends upon the platform used"
        ],
        "Answer": "Answer: a\nExplanation: The Jaxb2Marshaller marshaller requires to be configured with either a property named classesToBeBound or contextPath."
    },
    {
        "id": 264,
        "Question": "XML tag which represents information related to a REST service request.",
        "Options": [
            "a) Result",
            "b) Title",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This annotation allows the Jaxb2Marshaller marshaller to detect a class’s (i.e., object’s) fields and transform them into XML data."
    },
    {
        "id": 265,
        "Question": "RestTemplate class method which performs an HTTP HEAD operation.",
        "Options": [
            "a) headForHeaders(String, Object…)",
            "b) getForObject(String, Class, Object…)",
            "c) postForLocation(String, Object, Object…)",
            "d) postForObject(String, Object, Class, Object…)"
        ],
        "Answer": "Answer: a\nExplanation: Accessing a third-party REST service inside a Spring application revolves around the use of the Spring RestTemplate class."
    },
    {
        "id": 266,
        "Question": "Payload format for REST services.",
        "Options": [
            "a) RSS",
            "b) Atom",
            "c) JSON",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: JSON, in addition to RSS and Atom, has blossomed into a favorite payload format for REST services."
    },
    {
        "id": 267,
        "Question": "Class that forms part of Spring to apply JSON content.",
        "Options": [
            "a) MappingJacksonJsonView",
            "b) MappingJsonView",
            "c) MappingJacksonJson",
            "d) JsonView"
        ],
        "Answer": "Answer: b\nExplanation: JSON is different in the sense that its content is a special notation based on the JavaScript language."
    },
    {
        "id": 268,
        "Question": "The MappingJacksonJsonView class depends on Jackson JSON processor library.",
        "Options": [
            "a) org.codehaus.jackson",
            "b) jackson-mapper-asl",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In addition to relying on Spring REST support, we will also use the MappingJacksonJsonView class that forms part of Spring to facilitate the publication of JSON content."
    },
    {
        "id": 269,
        "Question": "JSON payload consists of text and separators like.",
        "Options": [
            "a) { , }",
            "b) ( , )",
            "c) :",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The MappingJacksonJsonView class depends on the presence of the Jackson JSON processor library which can be downloaded at http://wiki.fasterxml.com/JacksonDownload."
    },
    {
        "id": 270,
        "Question": "To access JSON in a Spring application, library used is:-",
        "Options": [
            "a) JSON-LIB",
            "b) SpringJSON-lib",
            "c) JSON-lib",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This information can be located in a RDBMS or text file, accessed through JDBC or ORM, inclusively be part of a Spring bean or some other type of construct."
    },
    {
        "id": 271,
        "Question": "Class which is capable of performing a multitude of operations on REST services.",
        "Options": [
            "a) RestTemplate",
            "b) XPathTemplate",
            "c) XMLTemplate",
            "d) JavaTemplate"
        ],
        "Answer": "Answer: d\nExplanation:  a JSON payload consists of text and separators like { , }, ( , ),  : and “."
    },
    {
        "id": 272,
        "Question": "XML query language for selecting nodes from an XML document.",
        "Options": [
            "a) XPathTemplate",
            "b) XPath",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Though it’s technically possible to access JSON in a Spring application (i.e., on the server side), using a third-party Java library like JSON-LIB (http://json-lib.sourceforge.net/ )."
    },
    {
        "id": 273,
        "Question": "To extract and manipulate payloads in Spring REST in a format other than String.",
        "Options": [
            "a) HttpConverter",
            "b) HttpMessage",
            "c) HttpConverterMessage",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The Java platform’s native support for XML, in addition to the fact that XML is more intuitive and does not have the same processing limitations as browsers."
    },
    {
        "id": 274,
        "Question": "To write your own converters relying on the MarshallingHttpMessageConverter interface that would allow the use of custom marshallers.",
        "Options": [
            "a) messageConverters",
            "b) messageConvert",
            "c) converters",
            "d) convertersMessage"
        ],
        "Answer": "Answer: a\nExplanation: Spring RestTemplate class is capable of performing a multitude of operations on REST services in order for their payloads to be used inside Spring applications, processing elaborate XML responses requires using a set of approaches beyond those of this last class."
    },
    {
        "id": 275,
        "Question": "To override the default implementations registered with the RestTemplate class.",
        "Options": [
            "a) messageConverters",
            "b) messageConvert",
            "c) converters",
            "d) convertersMessage"
        ],
        "Answer": "Answer: b\nExplanation:  XPath—an XML query language for selecting nodes from an XML document— knowledge about Spring HttpConverterMessage, as well as supporting facilities like Spring XPathTemplate."
    },
    {
        "id": 276,
        "Question": "To extract and manipulate the contents of a REST service payload.",
        "Options": [
            "a) messageConverters",
            "b) StreamSource class",
            "c) converters",
            "d) convertersMessage"
        ],
        "Answer": "Answer: a\nExplanation: The handler method makes use of the getForObject method of the RestTemplate class and assigns the returning XML payload to a String, which is then added to the handler method Model object. "
    },
    {
        "id": 277,
        "Question": "IntelliJ IDEA product, versions 8 and 9, supports:-",
        "Options": [
            "a) Flex",
            "b) AIR",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Particularly, IntelliJ IDEA product, versions 8 and 9, support Flex and AIR development with aplomb."
    },
    {
        "id": 278,
        "Question": "In Flash, the displayed area where animation and rendering occurs.",
        "Options": [
            "a) Stage",
            "b) Animation",
            "c) Stagery",
            "d) State"
        ],
        "Answer": "Answer: b\nExplanation: Flex is, technically, a library implemented on top of the Flash virtual machine."
    },
    {
        "id": 279,
        "Question": "Linkable libraries have the extension.",
        "Options": [
            "a) .swc",
            "b) .dll",
            "c) .so",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In Flash, the displayed area where animation and rendering occurs is called the stage. "
    },
    {
        "id": 280,
        "Question": "The source artifacts of a Flex application are:-",
        "Options": [
            "a) ActionScript files (ending in .as)",
            "b) ActionScript files (ending in .mxml)",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Flash uses a language called ActionScript 3.0."
    },
    {
        "id": 281,
        "Question": "XML variant that describe the UI components and provide a DOM.",
        "Options": [
            "a) AS files",
            "b) MXML files",
            "c) XML Files",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: ActionScript code pages end in .as, and ActionScript binaries are .swf files."
    },
    {
        "id": 282,
        "Question": "Outermost tag in Flex.",
        "Options": [
            "a) mx:Application",
            "b) mx:WindowedApplication",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use ActionScript tools to build linkable libraries, much like a .dll on Windows, or a .so on Linux. These linkable libraries have the extension .swc."
    },
    {
        "id": 283,
        "Question": "Outermost tag in AIR.",
        "Options": [
            "a) mx:Application",
            "b) mx:WindowedApplication",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The two source artifacts of a Flex application are the ActionScript files (ending in .as) and the .mxml files."
    },
    {
        "id": 284,
        "Question": " As soon as the application has been loaded and all the objects configured, an event will be fired.",
        "Options": [
            "a) applicationEvent",
            "b) applicationComplete",
            "c) eventConfigure",
            "d) eventComplete"
        ],
        "Answer": "Answer: b\nExplanation: MXML files are an XML variant that describe the UI components and provide a DOM."
    },
    {
        "id": 285,
        "Question": "JavaScript library dynamically generates.",
        "Options": [
            "a) object",
            "b) plugin",
            "c) FlashVars",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Limited when compared to the EL support in frameworks like Tapestry or JSF, anyway."
    },
    {
        "id": 286,
        "Question": "15.To talk to the containing HTML page.",
        "Options": [
            "a) flash.external.ExternalInterface",
            "b) flash.external.External",
            "c) flash.external.ExternalInterface",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In the case of Flex applications, the outermost tag is the mx:Application tag."
    },
    {
        "id": 287,
        "Question": "The endpoint URL attribute defines where service is mounted.",
        "Options": [
            "a) endpoint URL",
            "b) endpoint",
            "c) endpoint service",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The endpoint URL attribute defines where we should expect this service to be mounted."
    },
    {
        "id": 288,
        "Question": "To keep our code as ready-to-deploy as possible.",
        "Options": [
            "a) parameterize the URL of the service in the client",
            "b) add an entry to your /etc/hosts file on Unix derivatives or, on Windows, to your C:\\WINDOWS\\system32\\drivers\\etc\\hosts",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To keep our code as ready-to-deploy as possible, you should parameterize the URL of the service in the client. Alternatively, if you know the domain name for your application, you might add an entry to your /etc/hosts file on Unix derivatives or, on Windows, to your C:\\WINDOWS\\system32\\drivers\\etc\\hosts file mapping 127.0.0.1 to your target domain."
    },
    {
        "id": 289,
        "Question": "The service, which will simply fetch all the items that are for auction and return the description.",
        "Options": [
            "a) SpringBlaze DS",
            "b) SpringFlex",
            "c) EventSpring",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring BlazeDS lets you expose existing Spring beans as AMF endpoints."
    },
    {
        "id": 290,
        "Question": "To keep the code simpler.",
        "Options": [
            "a) Hibernate",
            "b) Backing datastore",
            "c) ConcurrentSkipListSet",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Use Spring BlazeDS to set up a simple service and demonstrate its invocation from the client—a simple auction application that we’ll build on in subsequent recipes."
    },
    {
        "id": 291,
        "Question": "Method which takes parameters required to describe a bid and creates it.",
        "Options": [
            "a) bid",
            "b) acceptBid",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: We’re not using Hibernate or any backing datastore to keep the code simpler. Instead, the service uses a ConcurrentSkipListSet instance variable. "
    },
    {
        "id": 292,
        "Question": "To notify other viewers of any new items posted.",
        "Options": [
            "a) javax.jms.Topic",
            "b) jms",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The bid method takes parameters required to describe a bid and creates it."
    },
    {
        "id": 293,
        "Question": "Method, which is called after the component’s been configured by Spring",
        "Options": [
            "a) setupItems",
            "b) setUp",
            "c) setupFakeItems",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: We want to notify other viewers of any new items posted, we use JMS and a javax.jms.Topic."
    },
    {
        "id": 294,
        "Question": "To configure the standard Spring bean.",
        "Options": [
            "a) context:component-scan",
            "b) context:scan",
            "c) context:component",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: We spend some time constructing seed data in the setupFakeItems method, which is called after the component’s been configured by Spring. "
    },
    {
        "id": 295,
        "Question": "In Spring context XML for the message broker, we have.",
        "Options": [
            "a) flex",
            "b) flex:message-broker",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: There are two parts to the configuration: the standard services configuration, and the Spring BlazeDS configuration. We’ve already gone a long way to configuring the standard Spring beans with the addition of the context:component-scan element. "
    },
    {
        "id": 296,
        "Question": "flex:message-service element had an attribute.",
        "Options": [
            "a) default-channels",
            "b) default-channel",
            "c) default",
            "d) default-types"
        ],
        "Answer": "Answer: b\nExplanation: Recall that in our Spring context XML for the message broker, we had a flex:message-broker element, in which we had a flex:message-service element. "
    },
    {
        "id": 297,
        "Question": "To use a different channel they’d like to use when communicating with the server.",
        "Options": [
            "a) flex:remoting-destination",
            "b) flex:remote",
            "c) flex:destination",
            "d) flex:default-channels"
        ],
        "Answer": "Answer: a\nExplanation: The flex:message-service element had an attribute, default-channels. "
    },
    {
        "id": 298,
        "Question": "To invoke Grails operations from anywhere on your workstation.",
        "Options": [
            "a) GRAILS HOME",
            "b) PATH",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In this sense, you simply need to unpack the distribution and perform a few installation steps in order to create Java applications on your workstation."
    },
    {
        "id": 299,
        "Question": "To see Grails numerous commands.",
        "Options": [
            "a) grails help",
            "b) grails -help",
            "c) grails -h",
            "d) help grails"
        ],
        "Answer": "Answer: c\nExplanation: After you unpack Grails on your workstation, define two environment variables on your operating system: GRAILS HOME and PATH.This allows you to invoke Grails operations from anywhere on your workstation."
    },
    {
        "id": 300,
        "Question": "To create a Grails application, command:-",
        "Options": [
            "a) grails create-app",
            "b) grails create-app grailsappname",
            "c) grails create-app default",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you execute the command grails help from any directory on your workstation, you should see Grails numerous commands."
    },
    {
        "id": 301,
        "Question": "Working directories and files are placed under which directory.",
        "Options": [
            "a) User’s home directory under the name.grails/grails version/.",
            "b) WEB-APP",
            "c) WEB-INF",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: To create a Grails application, invoke the following command wherever you wish to create an application: grails create-app grailsappname. "
    },
    {
        "id": 302,
        "Question": "Grails generates a series of files and directories which includes.",
        "Options": [
            "a) Apache Ant file(build.xml)",
            "b) Apache Ivy file(ivy.xml)",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Grails also creates a series of working directories and files (i.e., not intended to be modified directly) for an application. These working directories and files are placed under a user’s home directory under the name.grails/grails version/."
    },
    {
        "id": 303,
        "Question": "Used to define an application’s properties.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) manifest.xml",
            "d) court.iml"
        ],
        "Answer": "Answer: c\nExplanation: Grails generates a series of files and directories that are common in most Java applications. This includes, an Apache Ant file (build.xml) and an Apache Ivy file (ivy.xml), as well as common directories like src for placing source code files and a web-app."
    },
    {
        "id": 304,
        "Question": "An Apache Ant script with a series of predefined tasks designed to create a Grails application.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) manifest.xml",
            "d) court.iml"
        ],
        "Answer": "Answer: a\nExplanation: Used to define an application’s properties, including the Grails version, servlet version, and an application’s name."
    },
    {
        "id": 305,
        "Question": "An XML file containing configuration parameters for an application.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) manifest.xml",
            "d) court.iml"
        ],
        "Answer": "Answer: b\nExplanation: An Apache Ant script with a series of predefined tasks designed to create a Grails application. "
    },
    {
        "id": 306,
        "Question": "An XML file containing configuration parameters for an application’s deployment.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) court.iws",
            "d) court.iml"
        ],
        "Answer": "Answer: d\nExplanation: An XML file containing configuration parameters for an application, such as directory locations and treatment of JARs."
    },
    {
        "id": 307,
        "Question": "An XML file containing configuration parameters for an application’s launch.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) court.iws",
            "d) court.launch"
        ],
        "Answer": "Answer: c\nExplanation: An XML file containing configuration parameters for an application’s deployment, such as web container port and project views."
    },
    {
        "id": 308,
        "Question": "An Apache Ivy configuration file used for defining repositories.",
        "Options": [
            "a) application.properties",
            "b) ivysettings.xml",
            "c) court.iws",
            "d) court.launch"
        ],
        "Answer": "Answer: d\nExplanation: An XML file containing configuration parameters for an application’s launch, such as JVM arguments."
    },
    {
        "id": 309,
        "Question": "A directory containing the core of an application.",
        "Options": [
            "a) application.properties",
            "b) ivysettings.xml",
            "c) court.iws",
            "d) grails-app"
        ],
        "Answer": "Answer: b\nExplanation: An Apache Ivy configuration file used for defining repositories in order to download dependencies."
    },
    {
        "id": 310,
        "Question": "An XML file containing configuration parameters for an application.",
        "Options": [
            "a) application.properties",
            "b) ivysettings.xml",
            "c) court.iml",
            "d) court.launch"
        ],
        "Answer": "Answer: d\nExplanation: A directory containing the core of an application, which further\ncontains the following folders:\n1. conf: A directory containing an application’s configuration sources\n2. controllers: A directory containing an application’s controllers files\n3. domain: A directory containing an application’s domain files\n4. i18n: A directory containing an application’s internationalization (i18n) files\n5. services: A directory containing an application’s service files\n6. taglib: A directory containing an application’s tag libraries\n7. utils: A directory containing an application’s utility files\n8. views: A directory containing an application’s view files\n"
    },
    {
        "id": 311,
        "Question": "Some of the more popular Grails plugins follow:",
        "Options": [
            "a) App Engine",
            "b) Quartz",
            "c) Spring WS",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: An XML file containing configuration parameters for an application, such as directory locations and treatment of JARs."
    },
    {
        "id": 312,
        "Question": "Classes used to describe an application’s primary elements.",
        "Options": [
            "a) Domain Classes",
            "b) Application",
            "c) Context",
            "d) View"
        ],
        "Answer": "Answer: a\nExplanation: Domain classes are used to describe an application’s primary elements and characteristics."
    },
    {
        "id": 313,
        "Question": "In Grails, domain classes are placed under:-",
        "Options": [
            "a) /grails-app/WEB-INF/",
            "b) /grails-app/domain/",
            "c) /grails-app/domain/WEB-APP",
            "d) /grails-app/"
        ],
        "Answer": "Answer: a\nExplanation: Domain classes represent data that is saved for posterity—in a permanent storage system—so it interacts with controllers, as well as representing data displayed in views."
    },
    {
        "id": 314,
        "Question": "The creation of domain classes  by executing a simple command which is:-",
        "Options": [
            "a) grails create-domain-class",
            "b) grails create-domain-class domain class name",
            "c) domain class name",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In Grails, domain classes are placed under the /grails-app/domain/ directory."
    },
    {
        "id": 315,
        "Question": "Static field which defines constraints on the domain class.",
        "Options": [
            "a) static{}",
            "b) static field{}",
            "c) static constraint{}",
            "d) static constraints{}"
        ],
        "Answer": "Answer: b\nExplanation: The creation of domain classes, like most other things in Grails, can be carried out by executing a simple command in the following form:\ngrails create-domain-class domain class name\n"
    },
    {
        "id": 316,
        "Question": "Declaration name which indicates that object’s name field can’t be blank.",
        "Options": [
            "a) blank:false",
            "b) blank:true",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It generates a skeleton domain class file named domain class name.groovy inside the /grails-app/domain/ directory."
    },
    {
        "id": 317,
        "Question": "Command to generate the corresponding CRUD controller and views for an application’s domain class.",
        "Options": [
            "a) grails create-domain-class domain class name",
            "b) grails create-domain-class",
            "c) grails generate-all domain class name",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In addition, corresponding unit tests files are also generated for each domain class under an application’s test/unit directory."
    },
    {
        "id": 318,
        "Question": "Views corresponding to a controller class’s CRUD operations.",
        "Options": [
            "a) create.gsp",
            "b) edit.gsp",
            "c) list.gsp",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: static constraints = { }, defines constraints on the domain class."
    },
    {
        "id": 319,
        "Question": ".gsp extension stands for:-",
        "Options": [
            "a) Groovy Server Pages",
            "b) Groovy Service Pages",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The declaration name(blank:false) indicates that a Player object’s name field cannot be left blank."
    },
    {
        "id": 320,
        "Question": "Views are placed under which directory:-",
        "Options": [
            "a) app/views/",
            "b) app/",
            "c) grails-app/views/WEB-INF",
            "d) grails-app/views/domain class"
        ],
        "Answer": "Answer: a\nExplanation: Under certain circumstances, if a constraint is too elaborate, it’s often incorporated within an application’s controller prior to creating an object of a certain domain class. "
    },
    {
        "id": 321,
        "Question": "Command to start the Grails application:-",
        "Options": [
            "a) grails run",
            "b) grails start-app",
            "c) grails run-app",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can execute the following command to generate the corresponding CRUD controller and views for an application’s domain class:\ngrails generate-all domain class name."
    },
    {
        "id": 322,
        "Question": "Where can you find series of *.properties files.",
        "Options": [
            "a) /grails-app/",
            "b) /grails-app/i18n/",
            "c) /grails-app/i18n/WEB-INF",
            "d) /grails-app/i18n/WEB-APP"
        ],
        "Answer": "Answer: a\nExplanation: By default, all Grails applications are equipped to support internationalization."
    },
    {
        "id": 323,
        "Question": "Which locale (i.e., from an internationalization properties file) to use for a user is based on?",
        "Options": [
            "a) /grails-app/conf/spring/resource.groovy file",
            "b) user’s browser language preferences",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Inside an application /grails-app/i18n/ folder, you can find series of *.properties files used to define messages in 12 languages."
    },
    {
        "id": 324,
        "Question": "If you want to coerce users into using a specific language locale.",
        "Options": [
            "a) /grails-app/conf/spring/resource.groovy file",
            "b) /grails-app/resource.groovy file",
            "c) /grails-app/spring/resource.groovy file",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The values declared in these *.properties files allow Grails applications to display messages based on a user’s languages preferences or an application default language."
    },
    {
        "id": 325,
        "Question": "JSP Tag which declares statements using the Groovy.",
        "Options": [
            "a) g:message",
            "b) g:string",
            "c) g:msg",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Grails determines which locale (i.e., from an internationalization properties file) to use for a user based\non two criteria:\n• The explicit configuration inside an application /grails-app/conf/spring/\n     resource.groovy file\n• A user’s browser language preferences\n"
    },
    {
        "id": 326,
        "Question": "Tag can also be used in GSP pages views.",
        "Options": [
            "a) g:message",
            "b) g:string",
            "c) g:msg",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Since the explicit configuration of an application locale takes precedence over a user’s browser language preferences, there is no default configuration present in an application resource.groovy file."
    },
    {
        "id": 327,
        "Question": "Grails comes preconfigured to use:-",
        "Options": [
            "a) MySql",
            "b) PostgreSQL",
            "c) Access",
            "d) HSQLDB"
        ],
        "Answer": "Answer: a\nExplanation: You should define an explicit configuration inside an application /grails-app/conf/spring/resource.groovy file, only if you want to coerce users into using a specific language locale."
    },
    {
        "id": 328,
        "Question": "Configure Grails to use another RDBMS by modifying:-",
        "Options": [
            "a) Data.groovy",
            "b) DataSource.groovy",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: JSP page first imports the Groovy tag library and later declares statements using the Groovy g:message tag."
    },
    {
        "id": 329,
        "Question": "DataSource properties, Class name for the JDBC driver.",
        "Options": [
            "a) driverClassName",
            "b) dataSource properties",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The g:message tag can also be used in GSP pages views, but note that it’s not necessary to import the tag library explicitly, since it’s available by default on all Grails GSP pages."
    },
    {
        "id": 330,
        "Question": "Indicates whether to enable SQL logging.",
        "Options": [
            "a) driverClassName",
            "b) dataSource properties",
            "c) logSql",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Grails is designed to use a RDBMS as a permanent storage system. "
    },
    {
        "id": 331,
        "Question": "To perform its logging operations.",
        "Options": [
            "a) Log4J",
            "b) LogingJ",
            "c) JLog",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Grails relies on Java Log4J to perform its logging operations."
    },
    {
        "id": 332,
        "Question": "Log4J configuration parameters are specified inside:-",
        "Options": [
            "a) Config.groovy",
            "b) Conf.groovy",
            "c) Log.groovy",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Log4J configuration parameters are specified inside the Config.groovy file."
    },
    {
        "id": 333,
        "Question": "Grails application logging can be configured using:-",
        "Options": [
            "a) creating custom appenders",
            "b) logging levels",
            "c) console output",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Given Log4J’s logging versatility, a Grails application logging can be configured in various ways. This includes creating custom appenders, logging levels, console output, logging by artifacts and custom logging layouts."
    },
    {
        "id": 334,
        "Question": "In Log4J parlance, each package is known as:-",
        "Options": [
            "a) parlance",
            "b) logger",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The notation follows the convention logging level ‘package name’. This implies that any logging operation occurring at any of the cited packages will be logged so long as it occurs within the specified logging level or a more severe level."
    },
    {
        "id": 335,
        "Question": " Log4J also has the following logging level:-",
        "Options": [
            "a) fatal",
            "b) error",
            "c) warning",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In Log4J parlance, each package is known as a logger."
    },
    {
        "id": 336,
        "Question": "To offer versatile logging functionality:-",
        "Options": [
            "a) loggers",
            "b) appenders",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Log4J also has the following logging levels:\nfatal, error, warn, info, debug, and trace. fatal is the most severe."
    },
    {
        "id": 337,
        "Question": "A location where logging information is sent.",
        "Options": [
            "a) appender",
            "b) logger",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: By default, all logging message are sent to the stacktrace.log file located under an application’s root directory."
    },
    {
        "id": 338,
        "Question": "A location where logging information is generated.",
        "Options": [
            "a) appender",
            "b) logger",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Log4J relies on appenders and loggers to offer versatile logging functionality."
    },
    {
        "id": 339,
        "Question": "An appender that logs to a JDBC connection.",
        "Options": [
            "a) jdbc",
            "b) console",
            "c) file",
            "d) rollingFile"
        ],
        "Answer": "Answer: a\nExplanation: An appender is a location where logging information is sent (e.g., a file or standard output)."
    },
    {
        "id": 340,
        "Question": "Command for running tests in Grails.",
        "Options": [
            "a) grails test-app",
            "b) grails test",
            "c) grails test-app domain class",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: A logger is a location where logging information is generated (e.g., a class or package)."
    },
    {
        "id": 341,
        "Question": "Method creates a mock object from a domain class.",
        "Options": [
            "a) mockForConstraintsTests",
            "b) mockForConstraints",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The default Log4J logger can be customized in a Grails application using the following statement within the log4j { } section of an application’s Config.groovy file:\nroot {\nerror()\nadditivity = true\n}\n"
    },
    {
        "id": 342,
        "Question": "A Grails view can contain:-",
        "Options": [
            "a) HTML Tags",
            "b) GSP or JSTL Tags",
            "c) Groovy or Java code",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A Grails view can contain display elements (e.g., HTML tags), business logic elements (e.g., GSP or JSTL tags) or straightforward Groovy or Java code to achieve its display objectives."
    },
    {
        "id": 343,
        "Question": "To create custom tags.",
        "Options": [
            "a) grails create tag",
            "b) grails create-tag-lib  tag-lib-name",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To simplify the inclusion of such a combination and facilitate its reuse in multiple views a custom tag can be used."
    },
    {
        "id": 344,
        "Question": "grails create-tag-lib tag-lib-name command creates a custom tag library under:-",
        "Options": [
            "a) /grails-app/tag/",
            "b) /grails-app/",
            "c) /grails-app/tag-lib/",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: To create custom tags, you can use the grails create-tag-lib tag-lib-name command."
    },
    {
        "id": 345,
        "Question": "By default, Grails assigns custom tags to:-",
        "Options": [
            "a) g: namespace",
            "b) f: namespace",
            "c) j: namespace",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: This command creates a skeleton class for a custom tag library under an application’s /grails-app/tag-lib/ directory."
    },
    {
        "id": 346,
        "Question": "Where is subdirectory called layouts located, containing the layouts available to an application?",
        "Options": [
            "a) /grails-app/view/",
            "b) /grails-app/",
            "c) /grails-app/view/WEB-INF",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: TLDs are located in an application’s /web-app/WEB-INF/tld/ directory."
    },
    {
        "id": 347,
        "Question": "Tag is used to define the contents of a layout’s title section.",
        "Options": [
            "a) g:layoutTitle",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta"
        ],
        "Answer": "Answer: a\nExplanation: Custom tags can also rely on input parameters passed in as tag attributes to perform a backing class’s logic."
    },
    {
        "id": 348,
        "Question": "Tag is used to define the contents of a layout’s head section.",
        "Options": [
            "a) g:layoutTitle",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta"
        ],
        "Answer": "Answer: a\nExplanation: Finally, a word about the namespace used in Grails custom tags—by default, Grails assigns custom tags to the g: namespace. "
    },
    {
        "id": 349,
        "Question": "Tag allows any view inheriting this layout automatic access to JavaScript libraries.",
        "Options": [
            "a) g:javascript library=”application”",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta"
        ],
        "Answer": "Answer: a\nExplanation: This allows views to have a minimal set of display elements (e.g., HTML, CSS, and JavaScript) and inherit their layout behavior from a separate location. "
    },
    {
        "id": 350,
        "Question": "A view’s body content is inside the:-",
        "Options": [
            "a) g:javascript library=”application”",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta"
        ],
        "Answer": "Answer: b\nExplanation: Grails also supports the concept of templates, which serve the same purpose as layouts, except applied at a more granular level. In addition, it’s also possible to use templates for rendering a controller’s output, instead of a view as in most controllers."
    },
    {
        "id": 351,
        "Question": "GORM dynamic finder comparators:-",
        "Options": [
            "a) InList",
            "b) LessThan",
            "c) LessThanEquals",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Inside the /grails-app/view/ directory of an application, you can find a subdirectory called layouts, containing the layouts available to an application. "
    },
    {
        "id": 352,
        "Question": "Library which helps Spring Roo in using of the command line shell.",
        "Options": [
            "a) JTag",
            "b) JLine",
            "c) JHib",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This has a lot of implications. Applications built in Roo are Java applications that benefit from the mature Java language and platform."
    },
    {
        "id": 353,
        "Question": "To check version of Maven.",
        "Options": [
            "a) mvn –v",
            "b) mvn -v",
            "c) mvn –version",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The shell is quite smart, featuring tab completion, line history, and much more. These features are surfaced pretty consistently on all platforms, thanks to the excellent JLine library (http://jline.sourceforge.net). JLine handles some features inconsistently, however, on Windows—nothing fundamentally irresolvable, mind you, just nuisances like shell color differences and line history glitches. Proceed full speed ahead, but if you’re not using a Unix-like operating system, be aware of the (ever diminishing) possibility of issues."
    },
    {
        "id": 354,
        "Question": "To confirm Roo version.",
        "Options": [
            "a) roo.sh",
            "b) roo",
            "c) roo quit",
            "d) roo.sh quit"
        ],
        "Answer": "Answer: c\nExplanation: Start a new shell session and confirm that you can issue the following command without error, in any directory on your system: mvn –version."
    },
    {
        "id": 355,
        "Question": "You can ask Roo questions using:-",
        "Options": [
            "a) tab",
            "b) hint",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Confirm that you saw output. On my system, the output looked like this:\n$ roo.sh quit\n____ ____ ____\n/ __ \\/ __ \\/ __ \\\n/ /_/ / / / / / / /\n/ _, _/ /_/ / /_/ /\n/_/ |_|\\____/\\____/\n1.0.2.RELEASE [rev 638]\nWelcome to Spring Roo. For assistance press TAB or type “hint” then hit ENTER.\n"
    },
    {
        "id": 356,
        "Question": "Spring Roo file extension is:-",
        "Options": [
            "a) .xml",
            "b) .xhtml",
            "c) .roo",
            "d) .groovy"
        ],
        "Answer": "Answer: a\nExplanation: A custom command line shell to facilitate the developer. This shell can be intimidating to the uninitiated."
    },
    {
        "id": 357,
        "Question": "To run the script:-",
        "Options": [
            "a) roo.sh script –file ~/Desktop/myapp.roo",
            "b) roo.sh –file ~/Desktop/myapp.roo",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It supports tab completion, which will enable you to tab your way to a completely specified command."
    },
    {
        "id": 358,
        "Question": "Maven Directory to hold the non–unit-test Java files for your application.",
        "Options": [
            "a) src/main/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java"
        ],
        "Answer": "Answer: b\nExplanation: You can ask it questions using the hint command, and it does its best to direct you in response."
    },
    {
        "id": 359,
        "Question": "Maven Directory which holds classpath resources that aren’t Java class files.",
        "Options": [
            "a) src/main/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java"
        ],
        "Answer": "Answer: c\nExplanation: The Spring Roo shell is pretty darned handy, and even fun, but on the surface, it would appear to lack the reusability we developers have come to expect from our tools. "
    },
    {
        "id": 360,
        "Question": "Maven Directory which is used to hold the rest of a web application’s structure.",
        "Options": [
            "a) src/main/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java"
        ],
        "Answer": "Answer: a\nExplanation: To run the script, simply invoke the Roo shell as follows (changing the path of the file as appropriate):\nroo.sh script –file ~/Desktop/myapp.roo. "
    },
    {
        "id": 361,
        "Question": "This directory holds artifacts intended to test the Java classes under the src/main/java folder.",
        "Options": [
            "a) src/test/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java"
        ],
        "Answer": "Answer: a\nExplanation: A directory to hold the non–unit-test Java files for your application."
    },
    {
        "id": 362,
        "Question": "This directory holds resources needed by your test classes at test time.",
        "Options": [
            "a) src/test/java",
            "b) src/test/resources",
            "c) src/main/webapp",
            "d) src/test/java"
        ],
        "Answer": "Answer: b\nExplanation: Note, this is for classpath resources and is not appropriate, for example, for web application resources. For that you need src/main/webapp."
    },
    {
        "id": 363,
        "Question": "To package the project using the Roo shell.",
        "Options": [
            "a) perform package",
            "b) roo.sh",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If you were going to develop a web application, put everything except what you would put in WEB-INF/classes in this folder. "
    },
    {
        "id": 364,
        "Question": "The plugin, which provides Maven support to Eclipse",
        "Options": [
            "a) m2eclipse",
            "b) m2plugin",
            "c) plugin",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The m2eclipse plugin, which provides Maven support to Eclipse (and thus to SpringSource Tool Suite), can do all the heavy lifting of importing your project since it is just a stock-standard Maven project."
    },
    {
        "id": 365,
        "Question": "A database and some sort of persistence mechanism using command:-",
        "Options": [
            "a) persistence setup –database HYPERSONIC_IN_MEMORY –provider HIBERNATE",
            "b) persistence setup –database HYPERSONIC_IN_MEMORY –provider",
            "c) persistence setup –database HYPERSONIC_IN_MEMORY",
            "d) persistence –database HYPERSONIC_IN_MEMORY –provider HIBERNATE"
        ],
        "Answer": "Answer: a\nExplanation: It’s entirely possible there’s a plugin that will do the job for you."
    },
    {
        "id": 366,
        "Question": "persistence setup –database HYPERSONIC_IN_MEMORY –provider HIBERNATE command creates files:-",
        "Options": [
            "a) src/main/resources/META-INF/persistence.xml",
            "b) src/main/resources/META-INF/spring/database.properties",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Enter persistence setup as it suggests. On my console, I ended up entering the following command:\nroo> persistence setup –database HYPERSONIC_IN_MEMORY –provider HIBERNATE\n"
    },
    {
        "id": 367,
        "Question": "The file which contains useful configuration for Hypersonic in-memory database.",
        "Options": [
            "a) src/main/resources/META-INF/spring/database.properties",
            "b) src/main/resources/META-INF/persistence.xml",
            "c) src/main/resources/META-INF/pom.xml",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In my project, the command created two new files (src/main/resources/META-INF/persistence.xml and src/main/resources/META-INF/spring/database.properties), and it updated two files (src/main/resources/META-INF/spring/applicationContext.xml and pom.xml). "
    },
    {
        "id": 368,
        "Question": "The file which is the standard JPA configuration file to enable the Hibernate-based JPA implementation.",
        "Options": [
            "a) src/main/resources/META-INF/spring/database.properties",
            "b) src/main/resources/META-INF/persistence.xml",
            "c) src/main/resources/META-INF/pom.xml",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The file src/main/resources/META-INF/spring/database.properties contains useful configuration to facilitate connection to the Hypersonic in-memory database. "
    },
    {
        "id": 369,
        "Question": "Spring application context, src/main/resources/META-INF/spring/applicationContext.xml consists of:-",
        "Options": [
            "a) Data Source",
            "b) JPA Transaction Manager",
            "c) JPA entity manager factory",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The file src/main/resources/META-INF/persistence.xml is the standard JPA configuration file to enable the Hibernate-based JPA implementation to do its work.  "
    },
    {
        "id": 370,
        "Question": "Command to create a Spring MVC controller that provides a UI:-",
        "Options": [
            "a) controller scaff –class ~.web.CustomerController –entity ~.domain.Customer",
            "b) controller scaff –class ~.web.CustomerController –entity",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Finally, the Spring application context, src/main/resources/META-INF/spring/applicationContext.xml, has been updated to have a data source, a JPA transaction manager, and a JPA entity manager factory."
    },
    {
        "id": 371,
        "Question": "To deploy the application to a web container:-",
        "Options": [
            "a) mvn tomcat:run",
            "b) mvn jetty:run",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Type the following command to create a Spring MVC controller that provides a UI to manipulate Customer entities (and stand back!):\ncontroller scaff –class ~.web.CustomerController –entity ~.domain.Customer"
    },
    {
        "id": 372,
        "Question": "Spring Roo’s root folder (or any of the source packages) is:-",
        "Options": [
            "a) src/main/java, src/main/resources",
            "b) src/test/java",
            "c) src/test/resources",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In the project directory, in the standard shell, run mvn tomcat:run or mvn jetty:run, and open http://localhost:8080 in your browser."
    },
    {
        "id": 373,
        "Question": "This encapsulates the context of a test’s execution:-",
        "Options": [
            "a) Test context",
            "b) Test context manager",
            "c) Test context listener",
            "d) Test execution listener"
        ],
        "Answer": "Answer: a\nExplanation: This encapsulates the context of a test’s execution, including the application context, test class, current test instance, current test method, and current test exception."
    },
    {
        "id": 374,
        "Question": "This manages a test context for a test and triggers test execution listeners:-",
        "Options": [
            "a) Test context",
            "b) Test context manager",
            "c) Test context listener",
            "d) Test execution listener"
        ],
        "Answer": "Answer: b\nExplanation: This manages a test context for a test and triggers test execution listeners at predefined test execution points, including when preparing a test instance, before executing a test method (before any framework-specific initialization methods), and after executing a test method (after any framework-specific cleanup methods)."
    },
    {
        "id": 375,
        "Question": "This defines a listener interface; by implementing this, you can listen to test execution events.",
        "Options": [
            "a) Test context",
            "b) Test context manager",
            "c) Test context listener",
            "d) Test execution listener"
        ],
        "Answer": "Answer: d\nExplanation: The TestContext framework provides several test execution listeners for common testing features, but you are free to create your own."
    },
    {
        "id": 376,
        "Question": "Spring provides convenient TestContext support classes for:-",
        "Options": [
            "a) JUnit3",
            "b) JUnit4",
            "c) TestNG5",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring provides convenient TestContext support classes for JUnit 3, JUnit 4, and TestNG 5, with particular test execution listeners pre registered."
    },
    {
        "id": 377,
        "Question": "JUnit 4 allows you to annotate your test methods with:-",
        "Options": [
            "a) @Test",
            "b) @Autowire",
            "c) @JTest",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: JUnit 4 allows you to annotate your test methods with JUnit @Test annotation, so an arbitrary public method can be run as a test case."
    },
    {
        "id": 378,
        "Question": "Method to perform cleanup tasks:-",
        "Options": [
            "a) finalize",
            "b) tearDown",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: (e.g., test) from the source files of other classes (e.g., src)."
    },
    {
        "id": 379,
        "Question": "The static assert methods is declared in the:-",
        "Options": [
            "a) org.junit.Assert",
            "b) org.junit.*",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can override the tearDown() method to perform cleanup tasks, such as releasing permanent resources."
    },
    {
        "id": 380,
        "Question": "Attribute which specifies the exception type:-",
        "Options": [
            "a) after",
            "b) expected",
            "c) before",
            "d) test"
        ],
        "Answer": "Answer: c\nExplanation: You can override the tearDown() method to perform cleanup tasks, such as releasing permanent resources."
    },
    {
        "id": 381,
        "Question": "Test data sets are provided by data providers, which are methods with the:-",
        "Options": [
            "a) @DataProvider",
            "b) @Autowire",
            "c) @JTest",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: JUnit 4 offers a powerful feature that allows you to expect an exception to be thrown in a test case. You can simply specify the exception type in the expected attribute of the @Test annotation."
    },
    {
        "id": 382,
        "Question": "An object that simulates a dependent object:-",
        "Options": [
            "a) stub",
            "b) mock",
            "c) test",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In TestNG, test data sets are provided by data providers, which are methods with the @DataProvider annotation."
    },
    {
        "id": 383,
        "Question": "An Object which usually knows how its methods are expected to be called:-",
        "Options": [
            "a) stub",
            "b) mock",
            "c) test",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A stub is an object that simulates a dependent object with the minimum number of methods required for a test."
    },
    {
        "id": 384,
        "Question": "Libraries that can help create mock objects:-",
        "Options": [
            "a) EasyMock",
            "b) jMock",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In contrast to a stub, a mock object usually knows how its methods are expected to be called in a test. "
    },
    {
        "id": 385,
        "Question": "Test used to test several units in combination as a whole.",
        "Options": [
            "a) Integration tests",
            "b) JUnit4",
            "c) TestNG5",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In Java, there are several libraries that can help create mock objects, including EasyMock and jMock."
    },
    {
        "id": 386,
        "Question": "Spring supports web controller testing by providing Servlet API:-",
        "Options": [
            "a) MockHttpServletRequest",
            "b) MockHttpServletResponse",
            "c) MockHttpSession",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Integration tests, in contrast, are used to test several units in combination as a whole."
    },
    {
        "id": 387,
        "Question": "Base class to access the managed application context through the inherited getApplicationContext() method.",
        "Options": [
            "a) AbstractSingleSpringContextTests",
            "b) AbstractSingleSpring",
            "c) Test context listener",
            "d) Test execution listener"
        ],
        "Answer": "Answer: a\nExplanation: With Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the AbstractSingleSpringContextTests base class to access the managed application context through the inherited getApplicationContext() method."
    },
    {
        "id": 388,
        "Question": "The TestContext framework provides two test execution listeners related to context management:-",
        "Options": [
            "a) DependencyInjectionTestExecutionListener",
            "b) DirtiesContextTestExecutionListener",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: They will be registered with a test context manager by default if you don’t specify your own explicitly.\n• DependencyInjectionTestExecutionListener: This injects dependencies, including\n   the managed application context, into your tests.\n• DirtiesContextTestExecutionListener: This handles the @DirtiesContext\n   annotation and reloads the application context when necessary.\n"
    },
    {
        "id": 389,
        "Question": "Interface which can provide access to the managed application context through the protected field applicationContext:-",
        "Options": [
            "a) ApplicationContextAware",
            "b) ApplicationContext",
            "c) ApplicationContextAwareContext",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: These classes integrate with a test context manager and implement the ApplicationContextAware interface, so they can provide access to the managed application context through the protected field applicationContext. "
    },
    {
        "id": 390,
        "Question": "Method to indicate that the application context is dirty.",
        "Options": [
            "a) getDirty()",
            "b) setDirty()",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In JUnit 4, you can simply run your test with the test runner SpringJUnit4ClassRunner to have a test context manager integrated. However, in TestNG, you have to integrate with a test context manager manually."
    },
    {
        "id": 391,
        "Question": "In JUnit4, to explicitly specify a Spring-specific test runner for running your test.",
        "Options": [
            "a) SpringJUnit4ClassRunner",
            "b) SpringJUnit4Class",
            "c) SpringJUnit4",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You can call the setDirty() method to indicate that the application context is dirty so that it will be reloaded automatically for the next test method."
    },
    {
        "id": 392,
        "Question": "Annotation for SpringJUnit4ClassRunner:-",
        "Options": [
            "a) @Run",
            "b) @RunWith",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You have to explicitly specify a Spring-specific test runner for running your test—SpringJUnit4ClassRunner."
    },
    {
        "id": 393,
        "Question": "This class implements the ApplicationContextAware interface, so you can get access to the managed application context:-",
        "Options": [
            "a) AbstractJUnit38SpringContext",
            "b) AbstractJUnit38Spring",
            "c) AbstractJUnit38SpringContextTests",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: For this option, you have to explicitly specify a Spring-specific test runner for running your test—SpringJUnit4ClassRunner. You can specify this in the @RunWith annotation at the class level."
    },
    {
        "id": 394,
        "Question": "Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the:-",
        "Options": [
            "a) AbstractDependencyInjectionSpringContextTests",
            "b) AbstractSingleSpringContextTests",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: This class implements the ApplicationContextAware interface, so you can get access to the managed application context via the protected field applicationContext."
    },
    {
        "id": 395,
        "Question": "AbstractDependencyInjectionSpringContextTests supports dependency injection.",
        "Options": [
            "a) auto-wires beans by type via setter methods",
            "b) auto-wires beans by name via protected fields",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: AbstractTestNGSpringContextTests class also implements the ApplicationContextAware interface."
    },
    {
        "id": 396,
        "Question": "Test fixtures injected from the managed application context by annotating:-",
        "Options": [
            "a) @Autowired",
            "b) @Resource",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When using Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the AbstractDependencyInjectionSpringContextTests base class, which is a subclass of AbstractSingleSpringContextTests, to have its test fixtures injected automatically."
    },
    {
        "id": 397,
        "Question": "Starting from Spring 2.5, the TestContext framework provides a test execution listener related to transaction management:-",
        "Options": [
            "a) TransactionalTestExecutionListener",
            "b) TransactionalTestExecution",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: When using Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the AbstractDependencyInjectionSpringContextTests base class, which is a subclass of AbstractSingleSpringContextTests, to have its test fixtures injected automatically."
    },
    {
        "id": 398,
        "Question": "Annotation for TransactionalTestExecutionListener:-",
        "Options": [
            "a) @Transactional",
            "b) @RunWith",
            "c) @Run",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: When using the TestContext framework to create tests, you can have their test fixtures injected from the managed application context by annotating a field or setter method with the @Autowired or @Resource annotations. "
    },
    {
        "id": 399,
        "Question": "Maps each request to a handler through one or more handler mapping beans.",
        "Options": [
            "a) DispatcherServlet",
            "b) DispatcherPortlet",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: DispatcherPortlet. It dispatches portlet requests to appropriate handlers that handle the requests. It acts as the front controller of Spring Portlet MVC, and every portlet request must go through it so that it can manage the entire request-handling process."
    },
    {
        "id": 400,
        "Question": "In portlets, there are URLs:-",
        "Options": [
            "a) render",
            "b) action",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Once it has picked an appropriate handler, it will invoke this handler to handle the request. "
    },
    {
        "id": 401,
        "Question": "After Controller has finished handling a render request, it returns:-",
        "Options": [
            "a) model name",
            "b) view name",
            "c) view obect",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In portlets, there are two types of URLs: render URLs and action URLs. "
    },
    {
        "id": 402,
        "Question": "portlet deployment descriptor file is:-",
        "Options": [
            "a) portlet.xml",
            "b) portlet.config",
            "c) portlet.xhtml",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When a user triggers a render URL, the portlet container will ask all the portlets in the same page to handle a render request to render its view, unless the view’s content has been cached."
    },
    {
        "id": 403,
        "Question": "Servlet Listener to load the root application context at startup.",
        "Options": [
            "a) ContextLoader",
            "b) ContextLoaderListener",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A controller should return an object in response to a render request. However, when a user triggers an action URL in a portlet, the portlet container will first ask the target portlet to handle an action request. A controller needn’t return anything for an action request."
    },
    {
        "id": 404,
        "Question": "The preceding controller handles portlet requests:-",
        "Options": [
            "a) render requests",
            "b) action requests",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: After a controller has finished handling a render request, it returns a model and a view name, or sometimes a view object, to DispatcherPortlet."
    },
    {
        "id": 405,
        "Question": "Spring supports most of the popular ORM (or data mapper) frameworks.",
        "Options": [
            "a) Hibernate",
            "b) JDO",
            "c) JPA",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring supports most of the popular ORM (or data mapper) frameworks, including Hibernate, JDO, iBATIS, and the Java Persistence API (JPA)."
    },
    {
        "id": 406,
        "Question": "ORM which isn’t supported by Spring:-",
        "Options": [
            "a) Hibernate",
            "b) JDO",
            "c) TopLink",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Classic TopLink isn’t supported starting from Spring 3.0 (the JPA implementation still supported, of course)."
    },
    {
        "id": 407,
        "Question": "Database Engine which uses low memory consumption and easy configuration.",
        "Options": [
            "a) SQL",
            "b) MySQL",
            "c) Apache Derby",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: XML- or annotation-based, such as the mappings between classes and tables, properties and columns, and so on."
    },
    {
        "id": 408,
        "Question": "Mode which Derby prefers to run in:-",
        "Options": [
            "a) embedded",
            "b) client/server",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Derby is an open source relational database engine provided under the Apache License and implemented in pure Java."
    },
    {
        "id": 409,
        "Question": "To start the Derby server in the client/server mode.",
        "Options": [
            "a) startNetworkServer java file",
            "b) startNetworkServer script",
            "c) startNetwork script",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Derby can run in either the embedded mode or the client/server mode."
    },
    {
        "id": 410,
        "Question": "JDBC Properties for Connecting to the Application Database.",
        "Options": [
            "a) Driver Class",
            "b) URL",
            "c) Username",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It allows you to inspect and edit data with any visual database tools that support JDBC—for example, the Eclipse Data Tools Platform (DTP)."
    },
    {
        "id": 411,
        "Question": "To access the database with JDBC:-",
        "Options": [
            "a) DAO interface",
            "b) DAO Class",
            "c) DataAccess interface",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: To start the Derby server in the client/server mode, just execute the startNetworkServer script for your platform (located in the bin directory of the Derby installation)."
    },
    {
        "id": 412,
        "Question": "Standard interface defined by the JDBC specification that factories Connection instances.",
        "Options": [
            "a) javax.sql.DataAccess",
            "b) javax.sql.DataSource",
            "c) javax.sql.Data",
            "d) javax.sql.DataSourceAccess"
        ],
        "Answer": "Answer: d\nExplanation: JDBC Properties for Connecting to the Application Database\nProperty Value\nDriver class org.apache.derby.jdbc.ClientDriver\nURL jdbc:derby://localhost:1527/vehicle;create=true\nUsername app\nPassword app\n"
    },
    {
        "id": 413,
        "Question": "Data source implementations provided by different vendors and projects.",
        "Options": [
            "a) C3PO",
            "b) Apache Commons DBCP",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This pattern recommends that data access logic be encapsulated in independent modules called data access objects."
    },
    {
        "id": 414,
        "Question": "Spring also provides several convenient but less powerful data source implementations.",
        "Options": [
            "a) DriverManagerDataSource",
            "b) DriverManagerData",
            "c) DriverManagerDataAccess",
            "d) DriverManagerDataSourceAccess"
        ],
        "Answer": "Answer: a\nExplanation: Because your DAO implementation has to connect to the database to execute SQL statements, you may establish database connections by specifying the driver class name, database URL, username, and password. "
    },
    {
        "id": 415,
        "Question": "Which DataSource is not stable in MultiThreaded Environment?",
        "Options": [
            "a) DriverManagerDataSource",
            "b) SingleConnectionDataSource",
            "c) All of the mentioned",
            "d) None of the mentione"
        ],
        "Answer": "Answer: b\nExplanation: The javax.sql.DataSource interface is a standard interface defined by the JDBC specification that factories Connection instances. "
    },
    {
        "id": 416,
        "Question": "Class which declares a number of overloaded update() template methods to control the overall update process.",
        "Options": [
            "a) org.springframework.jdbc.core.JdbcTemplate",
            "b) org.springframework.jdbc.core.*",
            "c) org.springframework.jdbc.*",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The org.springframework.jdbc.core.JdbcTemplate class declares a number of overloaded update() template methods to control the overall update process."
    },
    {
        "id": 417,
        "Question": "You implement this interface to override the statement creation task.",
        "Options": [
            "a) PreparedStatement",
            "b) PreparedStatementCreator",
            "c) PreparedCreator",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The first callback interface to introduce is PreparedStatementCreator. You implement this interface to override the statement creation task and the parameter binding task of the overall update process. "
    },
    {
        "id": 418,
        "Question": "The JdbcTemplate class offers template method for batch update operations.",
        "Options": [
            "a) batchUpdate()",
            "b) update()",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: All you have to do in this method is to create a PreparedStatement object on this connection and bind your parameters to this object. "
    },
    {
        "id": 419,
        "Question": "The primary interface that allows you to process the current row of the result set.",
        "Options": [
            "a) PreparedStatementSetter",
            "b) PreparedStatementCreator",
            "c) RowCallbackHandler",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This is because you can get access to the local variables and method arguments directly from the inner class, instead of passing them as constructor arguments. "
    },
    {
        "id": 420,
        "Question": "Method of RowMapper interface in which, you have to construct the object that represents a row and return it as the method’s return value.",
        "Options": [
            "a) mapRow()",
            "b) query()",
            "c) update()",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The second callback interface, PreparedStatementSetter, as its name indicates, performs only the parameter binding task of the overall update process. "
    },
    {
        "id": 421,
        "Question": "RowMapper implementation which can automatically map a row to a new instance of the specified class.",
        "Options": [
            "a) BeanPropertyRowMapper",
            "b) BeanPropertyRow",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: It requires a SQL statement and a BatchPreparedStatementSetter object as arguments. In this method, the statement is compiled (prepared) only once and executed multiple times. "
    },
    {
        "id": 422,
        "Question": "Method which provides list of maps.",
        "Options": [
            "a) queryForList()",
            "b) update",
            "c) query()",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can override the statement creation (task 2) and the parameter binding by implementing the PreparedStatementCreator and PreparedStatementSetter interfaces, just as you did for the update operations."
    },
    {
        "id": 423,
        "Question": "Spring JDBC framework offers a convenient class, to simplify your DAO implementation.",
        "Options": [
            "a) org.springframework.jdbc.core.support",
            "b) org.springframework.jdbc.core.support.JdbcDaoSupport",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: RowCallbackHandler is the is the primary interface that allows you to process the current row of the result set."
    },
    {
        "id": 424,
        "Question": "Method to retrieve the JDBC template.",
        "Options": [
            "a) setJdbcTemplate()",
            "b) getTemplate()",
            "c) getJdbc()",
            "d) getJdbcTemplate()"
        ],
        "Answer": "Answer: b\nExplanation: RowCallbackHandler is the is the primary interface that allows you to process the current row of the result set."
    },
    {
        "id": 425,
        "Question": "JdbcTemplate that takes advantage of Java 1.5 features such as autoboxing, generics, and variable-length arguments to simplify its usage.",
        "Options": [
            "a) org.springframework.jdbc.core.JdbcTemplate",
            "b) org.springframework.jdbc.core.simple.SimpleJdbcTemplate",
            "c) org.springframework.jdbc.*",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: org.springframework.jdbc.core.simple.SimpleJdbcTemplate is an evolution of JdbcTemplate that takes advantage of Java 1.5 features such as autoboxing, generics, and variable-length arguments to simplify its usage."
    },
    {
        "id": 426,
        "Question": "To use SimpleJdbcTemplate:-",
        "Options": [
            "a) instantiate it directly",
            "b) retrieve its instance by extending the SimpleJdbcDaoSupport class",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In SimpleJdbcTemplate, they can be passed as variable-length arguments; this saves you the trouble of wrapping them in an array."
    },
    {
        "id": 427,
        "Question": "SimpleJdbcTemplate offers a convenient batch update method in the form of:-",
        "Options": [
            "a) Vector",
            "b) Set",
            "c) Map",
            "d) List"
        ],
        "Answer": "Answer: c\nExplanation: To use SimpleJdbcTemplate, you can either instantiate it directly or retrieve its instance by extending the SimpleJdbcDaoSupport class."
    },
    {
        "id": 428,
        "Question": "Method has a warning from the Java compiler because of an unchecked conversion from List to List.",
        "Options": [
            "a) findAll()",
            "b) query()",
            "c) update()",
            "d) batchUpdate()"
        ],
        "Answer": "Answer: d\nExplanation: SimpleJdbcTemplate offers a convenient batch update method for you to specify a SQL statement and a batch of parameters in the form of List so that you don’t need to implement the BatchPreparedStatementSetter interface."
    },
    {
        "id": 429,
        "Question": "Implementations of the SqlParameterSource interface:-",
        "Options": [
            "a) MapSqlParameterSource",
            "b) BeanPropertySqlParameterSource",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When using the classic JdbcTemplate, the findAll() method has a warning from the Java compiler because of an unchecked conversion from List to List. This is because the return type of the query() method is List rather than the type-safe List."
    },
    {
        "id": 430,
        "Question": "The direct parent class of DataAccessException is:-",
        "Options": [
            "a) RuntimeException",
            "b) NestedRuntimeException",
            "c) Exception",
            "d) Throwable"
        ],
        "Answer": "Answer: a\nExplanation: So, there’s no need for you to perform typecasting manually. "
    },
    {
        "id": 431,
        "Question": "Which concrete exception in the DataAccessException hierarchy should be thrown?",
        "Options": [
            "a) errorCode",
            "b) SQLState properties of the caught SQLException",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Another option when binding SQL parameters in the Spring JDBC framework is to use named parameters."
    },
    {
        "id": 432,
        "Question": "Error code for The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint.",
        "Options": [
            "a) -1",
            "b) 0",
            "c) 23505",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: Named parameters are supported only in SimpleJdbcTemplate and NamedParameterJdbcTemplate."
    },
    {
        "id": 433,
        "Question": "How does the Spring JDBC framework know that state 23505 should be mapped to DuplicateKeyException?",
        "Options": [
            "a) error code",
            "b) SQL state",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: There are three implementations of the SqlParameterSource interface. The basic one is MapSqlParameterSource, which wraps a map as its parameter source. "
    },
    {
        "id": 434,
        "Question": "Class which represents a real-world entity and its instances will be persisted to a database.",
        "Options": [
            "a) entity",
            "b) persistent",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Class is called an entity class or a persistent class because it represents a real-world entity and its instances will be persisted to a database."
    },
    {
        "id": 435,
        "Question": "To allow the identifier to be null, you should choose a primitive wrapper type:-",
        "Options": [
            "a) java.lang.Integer",
            "b) java.lang.Long",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: For each entity class, you must define an identifier property to uniquely identify an entity."
    },
    {
        "id": 436,
        "Question": "A set of persistent annotations for you to define mapping metadata.",
        "Options": [
            "a) JPA",
            "b) JSR",
            "c) XML",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When this entity is persisted, an insert SQL statement will be issued; otherwise, an update statement will."
    },
    {
        "id": 437,
        "Question": "For mapping and persisting your objects with Hibernate and JPA.",
        "Options": [
            "a) Using the Hibernate API to persist objects with Hibernate XML mappings",
            "b) Using the Hibernate API to persist objects with JPA annotations",
            "c) Using JPA to persist objects with JPA annotations",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To allow the identifier to be null, you should choose a primitive wrapper type like java.lang.Integer and java.lang.Long for the identifier."
    },
    {
        "id": 438,
        "Question": "Core Programming Elements for Different Data Access Strategies.",
        "Options": [
            "a) Resource",
            "b) Resource Factory",
            "c) Session",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: JPA defines a set of persistent annotations for you to define mapping metadata in a standard format that is more likely to be reusable in other ORM frameworks."
    },
    {
        "id": 439,
        "Question": "Interface whose instances can be obtained from a SessionFactory instance.",
        "Options": [
            "a) Session",
            "b) Session Factory",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Hibernate also supports the use of JPA annotations to define mapping metadata, so there are\nessentially three different strategies for mapping and persisting your objects with Hibernate and JPA:\n• Using the Hibernate API to persist objects with Hibernate XML mappings\n• Using the Hibernate API to persist objects with JPA annotations\n• Using JPA to persist objects with JPA annotations\n"
    },
    {
        "id": 440,
        "Question": "Interface whose instances can be obtained from an EntityManagerFactory instance.",
        "Options": [
            "a) Entity",
            "b) EntityManager",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Core Programming Elements for Different Data Access Strategies\nConcept JDBC Hibernate JPA\nResource Connection Session EntityManager\nResource factory DataSource SessionFactory EntityManagerFactory\nException SQLException HibernateException PersistenceException\n"
    },
    {
        "id": 441,
        "Question": "To accept a session factory via dependency injection.",
        "Options": [
            "a) HibernateCourseDao",
            "b) HibernateCourse",
            "c) HibernateDao",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In Hibernate, the core interface for object persistence is Session, whose instances can be obtained from a SessionFactory instance. "
    },
    {
        "id": 442,
        "Question": "Property for factory bean to load the Hibernate configuration file.",
        "Options": [
            "a) config.xml",
            "b) config",
            "c) configLocation",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In JPA, the corresponding interface is EntityManager, whose instances can be obtained from an EntityManagerFactory instance.  "
    },
    {
        "id": 443,
        "Question": "FactoryBean to create an entity manager factory in the IoC container.",
        "Options": [
            "a) LocalEntityManagerFactoryBean",
            "b) LocalEntityManagerFactory",
            "c) LocalEntityManager",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Other Java SE exceptions like IllegalArgumentException and IllegalStateException."
    },
    {
        "id": 444,
        "Question": "It allows you to override some of the configurations in the JPA configuration file.",
        "Options": [
            "a) LocalEntityManagerFactoryBean",
            "b) LocalContainerEntityManagerFactoryBean",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Modify HibernateCourseDao to accept a session factory via dependency injection, instead of creating it directly with the native Hibernate API in the constructor."
    },
    {
        "id": 445,
        "Question": "An alternative to Spring HibernateTemplate is:-",
        "Options": [
            "a) HibernateContext",
            "b) Hibernate contextual sessions",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: However, using HibernateTemplate means your DAO has to depend on Spring API."
    },
    {
        "id": 446,
        "Question": "Sessionfactory can manage contextual sessions for you and allows you to retrieve them by the:-",
        "Options": [
            "a) getSession() method",
            "b) getCurrent() method",
            "c) getCurrentSession() method",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: An alternative to Spring HibernateTemplate is to use Hibernate contextual sessions."
    },
    {
        "id": 447,
        "Question": "DAO methods require access to the session factory, which can be injected:-",
        "Options": [
            "a) a setter method",
            "b) constructor argument",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In Hibernate 3, a sessionfactory can manage contextual sessions for you and allows you to retrieve them by the getCurrentSession() method on org.hibernate.SessionFactory. "
    },
    {
        "id": 448,
        "Question": "Annotation to find a transaction and then fail, complaining that no Hibernate session been bound to the thread.",
        "Options": [
            "a) @Transaction",
            "b) @Transactional",
            "c) @Transactions",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To use the contextual session approach, your DAO methods require access to the session factory, which can be injected via a setter method or a constructor argument. "
    },
    {
        "id": 449,
        "Question": "In the bean configuration file for Hibernate (i.e., beans-hibernate.xml), you have to declare a HibernateTransactionManager instance for this application and enable declarative transaction via:-",
        "Options": [
            "a) tx:annotation",
            "b) tx:annotationdriven",
            "c) tx:annotation-driven",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This is required because Spring wraps the SessionFactory with a proxy that expects that Spring transaction management is in play when methods on a session are made."
    },
    {
        "id": 450,
        "Question": "Annotation for Hibernate exceptions to be translated into Spring DataAccessException for consistent exception handling:-",
        "Options": [
            "a) @Translation",
            "b) @Repo",
            "c) @Repository",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: This ensures that the persistence operations within a DAO method will be executed in the same transaction and hence by the same session. "
    },
    {
        "id": 451,
        "Question": "Instance to translate the native Hibernate exceptions into data access exceptions in Spring DataAccessException hierarchy.",
        "Options": [
            "a) PersistenceExceptionPostProcessor",
            "b) PersistenceExceptionTranslation",
            "c) PersistenceException",
            "d) PersistenceExceptionTranslationPostProcessor"
        ],
        "Answer": "Answer: c\nExplanation: In the bean configuration file for Hibernate (i.e., beans-hibernate.xml), you have to declare a HibernateTransactionManager instance for this application and enable declarative transaction management via tx:annotation-driven."
    },
    {
        "id": 452,
        "Question": "Spring provides to simplify your DAO implementation by managing entitymanagers and transactions for you:-",
        "Options": [
            "a) HibernateTemplate",
            "b) JpaTemplate",
            "c) SpringTemplate",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This allows consistent exception handling for different data access strategies in Spring. "
    },
    {
        "id": 453,
        "Question": "Annotation used for entity manager injection in EJB components.",
        "Options": [
            "a) @PersistenceContext",
            "b) @Persistence",
            "c) @PersistenceCon",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If you want the Hibernate exceptions to be translated into Spring DataAccessException for consistent exception handling, you have to apply the @Repository annotation to your DAO class that requires exception translation. "
    },
    {
        "id": 454,
        "Question": "Transactions can be described with key properties:-",
        "Options": [
            "a) Atomicity",
            "b) Consistency",
            "c) Isolation",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The concept of transactions can be described with four key properties: atomicity, consistency, isolation, and durability (ACID).\n• Atomicity: A transaction is an atomic operation that consists of a series of actions.\n   The atomicity of a transaction ensures that the actions either complete entirely or\n  take no effect at all.\n• Consistency: Once all actions of a transaction have completed, the transaction is\n   committed. Then your data and resources will be in a consistent state that\n  conforms to business rules.\n• Isolation: Because there may be many transactions processing with the same data\n   set at the same time, each transaction should be isolated from others to prevent\n  data corruption.\n• Durability: Once a transaction has completed, its result should be durable to\n   survive any system failure (imagine if the power to your machine was cut right in\n  the middle of a transaction commit). Usually, the result of a transaction is\n   written to persistent storage. "
    },
    {
        "id": 455,
        "Question": "To access a database running on the Derby server, you have to add:-",
        "Options": [
            "a) Derby client library",
            "b) Tomcat client library",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To access a database running on the Derby server, you have to the Derby client library to your CLASSPATH.  "
    },
    {
        "id": 456,
        "Question": "Spring’s transaction support offers a set of technology-independent facilities, including transaction managers.",
        "Options": [
            "a) org.springframework.transaction.PlatformTransactionManager",
            "b) org.springframework.transaction.support.TransactionTemplate",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring’s transaction support offers a set of technology-independent facilities, a transaction template (e.g., org.springframework.transaction.support.TransactionTemplate), and transaction declaration support to simplify your transaction management tasks."
    },
    {
        "id": 457,
        "Question": "Spring’s core transaction management abstraction is based on the interface:-",
        "Options": [
            "a) PlatformTransaction",
            "b) PlatformTransactionManager",
            "c) TransactionManager",
            "d) PlatformManager"
        ],
        "Answer": "Answer: b\nExplanation: It encapsulates a set of technology-independent methods for transaction management."
    },
    {
        "id": 458,
        "Question": "The PlatformTransactionManager interface provides methods for working with transactions:",
        "Options": [
            "a) getTransaction(TransactionDefinition definition)",
            "b) commit(TransactionStatus status)",
            "c) rollback(TransactionStatus status)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation:\n• TransactionStatus getTransaction(TransactionDefinition definition) throws\n   TransactionException\n• void commit(TransactionStatus status) throws TransactionException;\n• void rollback(TransactionStatus status) throws TransactionException;\n"
    },
    {
        "id": 459,
        "Question": "Method that allows you to start a new transaction (or obtain the currently active transaction).",
        "Options": [
            "a) getTransaction()",
            "b) commit()",
            "c) rollback()",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation:\n• If you have to deal with only a single data source in your application and access it\n   with JDBC, DataSourceTransactionManager should meet your needs.\n• If you are using JTA for transaction management on a Java EE application server,\n   you should use JtaTransactionManager to look up a transaction from the\n  application server. Additionally, JtaTransactionManager is appropriate for\n distributed transactions (transactions that span multiple resources). Note that\nwhile it’s common to use a JTA transaction manager to integrate the application\n servers’ transaction manager, there’s nothing stopping you from using a stand-\n    alone JTA transaction manager such as Atomikos.\n• If you are using an object/relational mapping framework to access a database, you\n   should choose a corresponding transaction manager for this framework, such as\n  HibernateTransactionManager and JpaTransactionManager.\n"
    },
    {
        "id": 460,
        "Question": "Method to start a new transaction with that definition:-",
        "Options": [
            "a) getTransaction()",
            "b) commit()",
            "c) rollback()",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: For example, the following bean configuration declares a DataSourceTransactionManager instance. It requires the dataSource property to be set so that it can manage transactions for connections made by this data source."
    },
    {
        "id": 461,
        "Question": "To help you control the overall transaction management process and transaction exception handling.",
        "Options": [
            "a) SpringTransactionTemplate",
            "b) TransactionTemplate",
            "c) Transaction",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring’s transaction manager provides a technology-independent API that allows you to start a new transaction (or obtain the currently active transaction) by calling the getTransaction() method."
    },
    {
        "id": 462,
        "Question": "A TransactionTemplate can accept a transaction callback object that implements:-",
        "Options": [
            "a) TransactionCallback",
            "b) TransactionCallbackWithoutResult class",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Because PlatformTransactionManager is an abstract unit for transaction management, the methods you called for transaction management are guaranteed to be technology independent."
    },
    {
        "id": 463,
        "Question": "Spring (since version 2.0) offers a transaction advice that can be easily configured via the:-",
        "Options": [
            "a) rx:advice",
            "b) bx:advice",
            "c) tx:advice",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Once you have a transaction definition, you can ask the transaction manager to start a new transaction with that definition by calling the getTransaction() method. "
    },
    {
        "id": 464,
        "Question": "A transaction propagation behavior can be specified by the:-",
        "Options": [
            "a) propagation",
            "b) consistency",
            "c) isolation",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A transaction propagation behavior can be specified by the propagation transaction attribute."
    },
    {
        "id": 465,
        "Question": "Transaction propagation behavior are defined in the:-",
        "Options": [
            "a) org.springframework.transaction.Transaction",
            "b) org.springframework.transaction.TransactionDefinition",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: These behaviors are defined in the org.springframework.transaction.TransactionDefinition interface. "
    },
    {
        "id": 466,
        "Question": "If there’s an existing transaction in progress, the current method should run within this transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED"
        ],
        "Answer": "Answer: a\nExplanation: If there’s an existing transaction in progress, the current method should run within this transaction. Otherwise, it should start a new transaction and run within its own transaction."
    },
    {
        "id": 467,
        "Question": "The current method must start a new transaction and run within its own transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED"
        ],
        "Answer": "Answer: b\nExplanation: The current method must start a new transaction and run within its own transaction. If there’s an existing transaction in progress, it should be suspended."
    },
    {
        "id": 468,
        "Question": "If there’s an existing transaction in progress, the current method can run within this transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED"
        ],
        "Answer": "Answer: c\nExplanation: Otherwise, it is not necessary to run within a transaction. "
    },
    {
        "id": 469,
        "Question": "The current method should not run within a transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED"
        ],
        "Answer": "Answer: d\nExplanation: The current method should not run within a transaction. If there’s an existing transaction in progress, it should be suspended. "
    },
    {
        "id": 470,
        "Question": "The current method must run within a transaction.",
        "Options": [
            "a) Required",
            "b) MANDATORY",
            "c) SUPPORTS",
            "d) NOT SUPPORTED"
        ],
        "Answer": "Answer: b\nExplanation: The current method must run within a transaction. If there’s no existing transaction in progress, an exception will be thrown."
    },
    {
        "id": 471,
        "Question": "The current method should not run within a transaction. If there’s an existing transaction in progress, an exception will be thrown.",
        "Options": [
            "a) Required",
            "b) MANDATORY",
            "c) SUPPORTS",
            "d) NEVER"
        ],
        "Answer": "Answer: d\nExplanation: The current method should not run within a transaction. If there’s an existing transaction in progress, an exception will be thrown."
    },
    {
        "id": 472,
        "Question": "If there’s an existing transaction in progress, the current method should run within the nested transaction.",
        "Options": [
            "a) Required",
            "b) MANDATORY",
            "c) NESTED",
            "d) NEVER"
        ],
        "Answer": "Answer: c\nExplanation: If there’s an existing transaction in progress, the current method should run within the nested transaction (supported by the JDBC 3.0 save point feature) of this transaction. Otherwise, it should start a new transaction and run within its own transaction. "
    },
    {
        "id": 473,
        "Question": "For two transactions T1 and T2, T1 reads a field that has been updated by T2 but not yet committed.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates"
        ],
        "Answer": "Answer: a\nExplanation: Later, if T2 rolls back, the field read by T1 will be temporary and invalid."
    },
    {
        "id": 474,
        "Question": "For two transactions T1 and T2, T1 reads a field and then T2 updates the field.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates"
        ],
        "Answer": "Answer: b\nExplanation: Later, if T1 reads the same field again, the value will be different."
    },
    {
        "id": 475,
        "Question": "For two transactions T1 and T2, T1 reads some rows from a table and then T2 inserts new rows into the table.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates"
        ],
        "Answer": "Answer: c\nExplanation: Later, if T1 reads the same table again, there will be additional rows."
    },
    {
        "id": 476,
        "Question": "For two transactions T1 and T2, they both select a row for update, and based on the state of that row, make an update to it.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates"
        ],
        "Answer": "Answer: d\nExplanation: Thus, one overwrites the other when the second transaction to commit should have waited until the first one committed before performing its selection."
    },
    {
        "id": 477,
        "Question": "Isolation Levels Supported by Spring:-",
        "Options": [
            "a) DEFAULT",
            "b) READ COMMITTED",
            "c) READ UNCOMMITTED",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Isolation Description\nDEFAULT Uses the default isolation level of the underlying database. For most databases,\n       the default isolation level is READ COMMITTED.\nREAD UNCOMMITTED Allows a transaction to read uncommitted changes by other transactions. The\n                dirty read, nonrepeatable read, and phantom read problems may occur.\nREAD COMMITTED Allows a transaction to read only those changes that have been committed by\n              other transactions. The dirty read problem can be avoided, but the nonrepeatable\n             read and phantom read problems may still occur.\nREPEATABLE READ Ensures that a transaction can read identical values from a field multiple times.\n               For the duration of this transaction, updates made by other transactions to this\n              field are prohibited. The dirty read and nonrepeatable read problems can be\n             avoided, but the phantom read problem may still occur.\nSERIALIZABLE Ensures that a transaction can read identical rows from a table multiple times. For\n            the duration of this transaction, inserts, updates, and deletes made by other\n           transactions to this table are prohibited. All the concurrency problems can be\n          avoided, but the performance will be low."
    },
    {
        "id": 478,
        "Question": "The exceptions that cause a transaction to roll back or not can be specified by attribute:-",
        "Options": [
            "a) rollback",
            "b) commit",
            "c) serialize",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Any exceptions not explicitly specified in this attribute will be handled by the default rollback rule (i.e., rolling back for unchecked exceptions and not rolling back for checked exceptions)."
    },
    {
        "id": 479,
        "Question": "Key technology in developing distributed applications, especially multi-tier enterprise applications.",
        "Options": [
            "a) Remoting",
            "b) EJB",
            "c) RMI",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring support for various remoting technologies, such as EJB, RMI, Hessian, Burlap, HTTP Invoker, and web services. Remoting is a key technology in developing distributed applications, especially multi-tier enterprise applications."
    },
    {
        "id": 480,
        "Question": "Java-based remoting technology that allows two Java applications running in different JVMs to communicate with each other.",
        "Options": [
            "a) Burlap",
            "b) EJB",
            "c) RMI",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: With RMI, an object can invoke the methods of a remote object. RMI relies on object serialization to marshall and unmarshall method arguments and return values. "
    },
    {
        "id": 481,
        "Question": "To expose a service through RMI, you have to create the service interface that extends:-",
        "Options": [
            "a) java.rmi.Remote",
            "b) java.rmi.RemoteException",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Considering the typical RMI usage scenario, to expose a service through RMI, you have to create the service interface that extends java.rmi.Remote and whose methods declare throwing java.rmi.RemoteException. "
    },
    {
        "id": 482,
        "Question": "To call the methods on a remote service:-",
        "Options": [
            "a) java.rmi.Remote",
            "b) java.rmi.RemoteException",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: However, to call the methods on a remote service, you must handle java.rmi.RemoteException in case any exception is thrown by the remote service."
    },
    {
        "id": 483,
        "Question": "There are several properties you must configure for an RmiServiceExporter instance:-",
        "Options": [
            "a) service name",
            "b) service interface",
            "c) service object",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: On the server side, you can use RmiServiceExporter to export a Spring bean as an RMI service whose methods can be invoked remotely. It’s just several lines of bean configuration without any programming. On the client side, you can simply use RmiProxyFactoryBean to create a proxy for the remote service."
    },
    {
        "id": 484,
        "Question": "The Spring support classes facilitate building session beans:-",
        "Options": [
            "a) stateful session beans (SFSBs)",
            "b) stateless session beans (SLSBs)",
            "c) message-driven beans (MDBs)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: There are several properties you must configure for an RmiServiceExporter instance, including the service name, the service interface, and the service object to export. "
    },
    {
        "id": 485,
        "Question": "Spring EJB Support Classes for Different Types of EJB:-",
        "Options": [
            "a) AbstractStatelessSessionBean",
            "b) AbstractStatefulSessionBean",
            "c) AbstractMessageDrivenBean",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If it can’t find the RMI registry, it will start a new one. "
    },
    {
        "id": 486,
        "Question": "OpenEJB 3.1.1 supports:-",
        "Options": [
            "a) EJB 2.x components",
            "b) EJB 3.0 and EJB 3.1 components",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The Spring support classes facilitate building session beans—stateful session beans (SFSBs) and stateless session beans (SLSBs)—and message-driven beans (MDBs) with Spring. "
    },
    {
        "id": 487,
        "Question": "To start the OpenEJB container, you first set environment variable:-",
        "Options": [
            "a) EJB_HOME",
            "b) OPENEJB_HOME",
            "c) Bashrc",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring EJB Support Classes for Different Types of EJB\nEJB Support Class EJB Type\nAbstractStatelessSessionBean Stateless session bean\nAbstractStatefulSessionBean Stateful session bean\nAbstractMessageDrivenBean General message-driven bean that may not use JMS\nAbstractJmsMessageDrivenBean Message-driven bean that uses JMS."
    },
    {
        "id": 488,
        "Question": "To use Spring EJB support for your EJB implementation classes, you have to include a few Spring framework JARs:-",
        "Options": [
            "a) spring-beans",
            "b) spring-core",
            "c) spring-context",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Because POJOs are easier to develop and test, implementing business logic in POJOs can accelerate your EJB development."
    },
    {
        "id": 489,
        "Question": "Interceptor to let Spring configure @Autowired elements on your EJB.",
        "Options": [
            "a) org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor",
            "b) org.springframework.ejb.interceptor.SpringBeanAutowiring",
            "c) org.springframework.ejb.interceptor.SpringBean",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Use the org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor interceptor to let Spring configure @Autowired elements on your EJB."
    },
    {
        "id": 490,
        "Question": "A remote stateless session bean requires annotations:-",
        "Options": [
            "a) @Remote",
            "b) @Stateless",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: A remote stateless session bean requires the @Stateless and @Remote annotations. In the @Remote annotation, you have to specify the remote interface for this EJB component."
    },
    {
        "id": 491,
        "Question": "Proxying Spring services with EJB3s, injecting custom resources configured in Spring, or even using Spring to isolate your EJBs from acquiring references to other distributed resources such as a REST endpoint or an RMI endpoint.",
        "Options": [
            "a) SpringBeanAutowiringInterceptor",
            "b) SpringBeanAutowiring",
            "c) SpringBean",
            "d) SpringBeanInterceptor"
        ],
        "Answer": "Answer: a\nExplanation: To do this, use Spring’s SpringBeanAutowiringInterceptor class to provide configuration for the EJB."
    },
    {
        "id": 492,
        "Question": "Annotation which decorates the PostageServiceBean:-",
        "Options": [
            "a) @Interceptors",
            "b) @Autowire",
            "c) @Wire",
            "d) @Mention"
        ],
        "Answer": "Answer: a\nExplanation: This tells Spring to handle @Autowired injection points in the class."
    },
    {
        "id": 493,
        "Question": "To declare a JNDI object reference in the Spring IoC container.",
        "Options": [
            "a) JndiObjectFactory",
            "b) JndiObjectFactoryBean",
            "c) JndiObject",
            "d) JndiFactoryBean"
        ],
        "Answer": "Answer: a\nExplanation: The interceptor obtains beans, by default, from a ContextSingletonBeanFactoryLocation, which in turn looks for an XML application context named beanRefContext.xml, which is presumed to be on the classpath. "
    },
    {
        "id": 494,
        "Question": "You can configure the JNDI details for factory bean in:-",
        "Options": [
            "a) jndiEnvironment",
            "b) jndiName",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: EJB interface is a simple Java interface whose methods don’t throw RemoteException, while the implementation class is a simple Java class annotated with EJB annotations."
    },
    {
        "id": 495,
        "Question": "Lightweight remoting technologies developed by Caucho Technology.",
        "Options": [
            "a) Hessian",
            "b) Burlap",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: By using Spring’s JndiObjectFactoryBean, you can easily declare a JNDI object reference in the Spring IoC container. You can use this factory bean to declare a reference to an EJB 3.0 component."
    },
    {
        "id": 496,
        "Question": "To expose a Hessian or Burlap service, you have to add the:-",
        "Options": [
            "a) Hessian library",
            "b) Burlap library",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you have chosen OpenEJB as your EJB container, the default JNDI name for a remote EJB 3.0 component is the EJB class name with Remote as its suffix (PostageServiceBeanRemote, in this case). "
    },
    {
        "id": 497,
        "Question": "Invoking a Burlap service:-",
        "Options": [
            "a) HessianProxyFactoryBean",
            "b) BurlapProxyFactoryBean",
            "c) BurlapProxyFactory",
            "d) BurlapProxy"
        ],
        "Answer": "Answer: c\nExplanation: You can configure the JNDI details for factory bean in the jndiEnvironment and jndiName properties.  "
    },
    {
        "id": 498,
        "Question": "A web service contract is described using :-",
        "Options": [
            "a) Web Services Description Language",
            "b) Web Services Description",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In contract-last, you expose an existing service interface as a web service whose service contract is generated automatically. "
    },
    {
        "id": 499,
        "Question": "In contrast, the contract-first approach encourages you to think of the service contract first in terms of :-",
        "Options": [
            "a) XML",
            "b) XML Schema(.xsd)",
            "c) WSDL",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A web service contract is described using Web Services Description Language (WSDL). In contract-last, you expose an existing service interface as a web service whose service contract is generated automatically. In contract-first, you design the service contract in terms of XML and then write code to fulfill it."
    },
    {
        "id": 500,
        "Question": "Service exporters that can export a bean as a remote service based on the :-",
        "Options": [
            "a) RMI",
            "b) Hessian",
            "c) Burlap",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In contrast, the contract-first approach encourages you to think of the service contract first, in terms of XML, using XML schema (.xsd) and WSDL. "
    },
    {
        "id": 501,
        "Question": "The standard for deploying web services on the Java EE platform as of Java EE 1.4:-",
        "Options": [
            "a) JAX-RPC",
            "b) JAX",
            "c) RPC",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Just like that between an object model and a relational model. "
    },
    {
        "id": 502,
        "Question": "If you are deploying into a Java EE 5 (or better) container, you may simply create a bean that is annotated with:-",
        "Options": [
            "a) javax.jws.WebService",
            "b) javax.jws.WebServiceProvider",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring comes with several service exporters that can export a bean as a remote service based on the RMI, Hessian, Burlap, or HTTP Invoker remoting technologies."
    },
    {
        "id": 503,
        "Question": "Spring provides a factory that can export beans annotated with:-",
        "Options": [
            "a) javax.jws.WebService",
            "b) javax.jws.WebServiceProvider",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring doesn’t come with a service exporter that can export a bean as a SOAP web service. We will use Apache CXF, which is the de facto successor to XFire."
    },
    {
        "id": 504,
        "Question": "Exposing a stand-alone SOAP endpoint using the:-",
        "Options": [
            "a) SimpleJaxWsServiceExporter",
            "b) JAX-WS",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The standard for deploying web services on the Java EE platform as of Java EE 1.4 was called JAX-RPC. It supported SOAP 1.0 and 1.1, but didn’t support message-oriented web services. "
    },
    {
        "id": 505,
        "Question": "Factory to use our Spring bean as the implementation:-",
        "Options": [
            "a) jaxws:end",
            "b) jaxws:endpoint",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: JAXB supports many class types out of the box with no special support."
    },
    {
        "id": 506,
        "Question": "Spring-WS provides various abstract endpoint classes for you to process the request.",
        "Options": [
            "a) org.springframework.ws.server.endpoint",
            "b) org.springframework.ws.server",
            "c) org.springframework.*",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The difference is that a web controller deals with HTTP requests and HTTP responses, while a service endpoint deals with XML request messages and XML response messages. "
    },
    {
        "id": 507,
        "Question": "Endpoint Classes for DOM:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint"
        ],
        "Answer": "Answer: a\nExplanation: Spring-WS provides various abstract endpoint classes for you to process the request and response XML messages using different XML processing technologies and APIs. These classes are all located in the org.springframework.ws.server.endpoint package."
    },
    {
        "id": 508,
        "Question": "Endpoint Classes for JDOM:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint"
        ],
        "Answer": "Answer: a\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nDOM AbstractDomPayloadEndpoint\n"
    },
    {
        "id": 509,
        "Question": "Endpoint Classes for dom4j:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint"
        ],
        "Answer": "Answer: b\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nJDOM AbstractJDomPayloadEndpoint\n"
    },
    {
        "id": 510,
        "Question": "Endpoint Classes for XOM:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint"
        ],
        "Answer": "Answer: c\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\ndom4j AbstractDom4jPayloadEndpoint\n"
    },
    {
        "id": 511,
        "Question": "Endpoint Classes for SAX:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint"
        ],
        "Answer": "Answer: d\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nXOM AbstractXomPayloadEndpoint\n"
    },
    {
        "id": 512,
        "Question": "Endpoint Classes for Event-based StAX:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractStaxEventPayloadEndpoint"
        ],
        "Answer": "Answer: b\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nSAX AbstractSaxPayloadEndpoint\n"
    },
    {
        "id": 513,
        "Question": "Endpoint Classes for Streaming StAX :-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractStaxStreamPayloadEndpoint",
            "d) AbstractStaxEventPayloadEndpoint"
        ],
        "Answer": "Answer: d\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nEvent-based Stax AbstractStaxEventPayloadEndpoint\n"
    },
    {
        "id": 514,
        "Question": "Endpoint Classes for XML marshalling :-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractStaxStreamPayloadEndpoint",
            "d) AbstractMarshallingPayloadEndpoint"
        ],
        "Answer": "Answer: c\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nStreaming Stax AbstractStaxStreamPayloadEndpoint\n"
    },
    {
        "id": 515,
        "Question": "If you need to get access to the entire SOAP message, you should write an endpoint class by implementing:-",
        "Options": [
            "a) org.springframework.ws.server.endpoint.MessageEndpoint",
            "b) org.springframework.ws",
            "c) org.springframework.ws.server.endpoint",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Endpoint Classes for Different XML Processing Technologies/APIs\nTechnology/API Endpoint Class\nXML marshalling AbstractMarshallingPayloadEndpoint\n"
    },
    {
        "id": 516,
        "Question": "You can create a dom4j endpoint by extending the:-",
        "Options": [
            "a) AbstractDom4jPayloadEndpoint",
            "b) AbstractDom4jPayload",
            "c) AbstractDom4jEndpoint",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you need to get access to the entire SOAP message, you should write an endpoint class by implementing the org.springframework.ws.server.endpoint.MessageEndpoint org.springframework.ws.server.endpoint.MessageEndpoint interface."
    },
    {
        "id": 517,
        "Question": "In this method, you can access the request XML element, whose type is org.dom4j.Element, and the response document, whose type is org.dom4j.Document, as method arguments.",
        "Options": [
            "a) invoke",
            "b) invokeInterval",
            "c) invokeInternal",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can create a dom4j endpoint by extending the AbstractDom4jPayloadEndpoint class. "
    },
    {
        "id": 518,
        "Question": "Web services can be invoked through the core template class:-",
        "Options": [
            "a) org.springframework.ws.client.core.WebServiceTemplate",
            "b) JDBC Template",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The core method defined in this class that you must override is invokeInternal(). "
    },
    {
        "id": 519,
        "Question": "WebServiceTemplate provides a sendSourceAndReceiveToResult() method that accepts arguments:-",
        "Options": [
            "a) java.xml.transform.Source",
            "b) java.xml.transform.Result",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When using Spring-WS on the client side, web services can be invoked through the core template class org.springframework.ws.client.core.WebServiceTemplate."
    },
    {
        "id": 520,
        "Question": "To implement endpoints with an XML marshalling technology, you have to extend the:-",
        "Options": [
            "a) AbstractMarshallingPayload",
            "b) AbstractMarshalling",
            "c) AbstractMarshallingPayloadEndpoint",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This technology is also known as object/XML mapping (OXM) because you are actually mapping objects to and from XML documents. "
    },
    {
        "id": 521,
        "Question": "Marshaller for JAXB 1.0:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller"
        ],
        "Answer": "Answer: c\nExplanation: To implement endpoints with an XML marshalling technology, you have to extend the AbstractMarshallingPayloadEndpoint class and configure an XML marshaller for it.  "
    },
    {
        "id": 522,
        "Question": "Marshaller for JAXB 2.0:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller"
        ],
        "Answer": "Answer: a\nExplanation: JAXB 1.0 org.springframework.oxm.jaxb.Jaxb1Marshaller. "
    },
    {
        "id": 523,
        "Question": "Marshaller for Castor:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller"
        ],
        "Answer": "Answer: b\nExplanation: JAXB 2.0 org.springframework.oxm.jaxb.Jaxb2Marshaller."
    },
    {
        "id": 524,
        "Question": "Marshaller for XMLBeans:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller"
        ],
        "Answer": "Answer: c\nExplanation: Castor org.springframework.oxm.castor.CastorMarshaller."
    },
    {
        "id": 525,
        "Question": "Marshaller for JiBX:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.jibx.JibxMarshaller"
        ],
        "Answer": "Answer: d\nExplanation: XMLBeans org.springframework.oxm.xmlbeans.XmlBeansMarshaller."
    },
    {
        "id": 526,
        "Question": "Marshaller for XStream:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.xstream.XStreamMarshaller",
            "d) org.springframework.oxm.jibx.JibxMarshaller"
        ],
        "Answer": "Answer: d\nExplanation: JiBX org.springframework.oxm.jibx.JibxMarshaller."
    },
    {
        "id": 527,
        "Question": "Spring-WS supports various XML marshalling APIs.",
        "Options": [
            "a) Castor",
            "b) JAXB 1.0",
            "c) XMLBeans",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: XStream org.springframework.oxm.xstream.XStreamMarshaller."
    },
    {
        "id": 528,
        "Question": "A marshalling endpoint requires:-",
        "Options": [
            "a) marshaller",
            "b) unmarshaller",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Spring-WS supports various XML marshalling APIs, including JAXB 1.0, JAXB 2.0, Castor, XMLBeans, JiBX, and XStream. "
    },
    {
        "id": 529,
        "Question": "Spring-WS supports annotating an arbitrary class as a service endpoint by:-",
        "Options": [
            "a) @Endpoint",
            "b) @End",
            "c) @Point",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Because Castor supports marshalling between XML messages and arbitrary Java objects, you can start creating the following classes by yourself."
    },
    {
        "id": 530,
        "Question": "There are two main options for scheduling tasks on the Java platform:-",
        "Options": [
            "a) JDK Timer",
            "b) Quartz Scheduler",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: JDK Timer offers simple task scheduling features that you can use conveniently because the features are bundled with JDK. Compared with JDK Timer, Quartz offers more powerful job scheduling features.  "
    },
    {
        "id": 531,
        "Question": "Connectors to expose your MBeans for remote access over a specific protocol by using a factory bean.",
        "Options": [
            "a) MBeanExporter",
            "b) JSR-160",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This can be done simply by declaring an MBeanExporter instance. "
    },
    {
        "id": 532,
        "Question": "Method, all files in the source directory will be replicated to the destination directory.",
        "Options": [
            "a) replicate",
            "b) copy",
            "c) rep",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In addition, Spring enables you to declare JSR-160 (Java Management Extensions Remote API) connectors to expose your MBeans for remote access over a specific protocol by using a factory bean. Spring provides factory beans for both servers and clients."
    },
    {
        "id": 533,
        "Question": "6. To register an MBean, you need an instance of the interface :-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.management.ManagementFactory</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.Descriptor</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.JMException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.MBeanServer</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.ObjectName</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.DescriptorSupport</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.InvalidTargetObjectTypeException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanAttributeInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanInfoSupport</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanOperationInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.RequiredModelMBean</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.context.ApplicationContext</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>code<span class=\"sy0\">&gt;&lt;/</span>code<span class=\"sy0\">&gt;</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">IOException</span> <span class=\"br0\">{</span>\n\t\tApplicationContext context <span class=\"sy0\">=</span>\n\t\t\t<span class=\"kw1\">new</span> ClassPathXmlApplicationContext<span class=\"br0\">(</span><span class=\"st0\">\"beans-jmx.xml\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tFileReplicator documentReplicator <span class=\"sy0\">=</span>\n\t\t<span class=\"br0\">(</span>FileReplicator<span class=\"br0\">)</span> context.<span class=\"me1\">getBean</span><span class=\"br0\">(</span><span class=\"st0\">\"documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span>\n\t\t\tMBeanServer mbeanServer <span class=\"sy0\">=</span> ManagementFactory.<span class=\"me1\">getPlatformMBeanServer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tObjectName objectName <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ObjectName<span class=\"br0\">(</span><span class=\"st0\">\"bean:name=documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tRequiredModelMBean mbean <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RequiredModelMBean<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbean.<span class=\"me1\">setManagedResource</span><span class=\"br0\">(</span>documentReplicator, <span class=\"st0\">\"objectReference\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tDescriptor srcDirDescriptor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DescriptorSupport<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"st0\">\"name=SrcDir\"</span>, <span class=\"st0\">\"descriptorType=attribute\"</span>,\n\t\t\t<span class=\"st0\">\"getMethod=getSrcDir\"</span>, <span class=\"st0\">\"setMethod=setSrcDir\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanAttributeInfo srcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"SrcDir\"</span>, <span class=\"st0\">\"java.lang.String\"</span>, <span class=\"st0\">\"Source directory\"</span>,\n\t\t\t<span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, srcDirDescriptor<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tDescriptor destDirDescriptor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DescriptorSupport<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"st0\">\"name=DestDir\"</span>, <span class=\"st0\">\"descriptorType=attribute\"</span>,\n\t\t\t<span class=\"st0\">\"getMethod=getDestDir\"</span>, <span class=\"st0\">\"setMethod=setDestDir\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">IOException</span> <span class=\"br0\">{</span>\n\t\t\tApplicationContext context <span class=\"sy0\">=</span>\n\t\t\t<span class=\"kw1\">new</span> ClassPathXmlApplicationContext<span class=\"br0\">(</span><span class=\"st0\">\"beans-jmx.xml\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tFileReplicator documentReplicator <span class=\"sy0\">=</span>\n\t\t\t<span class=\"br0\">(</span>FileReplicator<span class=\"br0\">)</span> context.<span class=\"me1\">getBean</span><span class=\"br0\">(</span><span class=\"st0\">\"documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanAttributeInfo destDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"DestDir\"</span>, <span class=\"st0\">\"java.lang.String\"</span>, <span class=\"st0\">\"Destination directory\"</span>,\n\t\t\t<span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, destDirDescriptor<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo getSrcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Get source directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"getSrcDir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo setSrcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Set source directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"setSrcDir\"</span>, <span class=\"kw3\">String</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo getDestDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Get destination directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"getDestDir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo setDestDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Set destination directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"setDestDir\"</span>, <span class=\"kw3\">String</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo replicateInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Replicate files\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"replicate\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanInfo mbeanInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanInfoSupport<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"FileReplicator\"</span>, <span class=\"st0\">\"File replicator\"</span>,\n\t\t\t<span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> srcDirInfo, destDirInfo <span class=\"br0\">}</span>,\n\t\t\t<span class=\"kw2\">null</span>,\n\t\t\t<span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> getSrcDirInfo, setSrcDirInfo,\n\t\t\tgetDestDirInfo, setDestDirInfo, replicateInfo <span class=\"br0\">}</span>,\n\t\t\t<span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbean.<span class=\"me1\">setModelMBeanInfo</span><span class=\"br0\">(</span>mbeanInfo<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbeanServer.<span class=\"me1\">registerMBean</span><span class=\"br0\">(</span>mbean, objectName<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>JMException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>InvalidTargetObjectTypeException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><span class=\"kw3\">NoSuchMethodException</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">in</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) javax.management.MBeanServer",
            "b) javax.management",
            "c) javax.management.MBean",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The MBeanExporter class exports beans, delegating to an instance of MBeanInfoAssembler to do the heavy lifting."
    },
    {
        "id": 534,
        "Question": "7.The static method to locate a platform MBean server.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.management.ManagementFactory</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.Descriptor</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.JMException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.MBeanServer</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.ObjectName</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.DescriptorSupport</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.InvalidTargetObjectTypeException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanAttributeInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanInfoSupport</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanOperationInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.RequiredModelMBean</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.context.ApplicationContext</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">IOException</span> <span class=\"br0\">{</span>\n\t\tApplicationContext context <span class=\"sy0\">=</span>\n\t\t\t<span class=\"kw1\">new</span> ClassPathXmlApplicationContext<span class=\"br0\">(</span><span class=\"st0\">\"beans-jmx.xml\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tFileReplicator documentReplicator <span class=\"sy0\">=</span>\n\t\t<span class=\"br0\">(</span>FileReplicator<span class=\"br0\">)</span> context.<span class=\"me1\">getBean</span><span class=\"br0\">(</span><span class=\"st0\">\"documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span>\n\t\t\tMBeanServer mbeanServer <span class=\"sy0\">=</span> ManagementFactory.<span class=\"me1\">getPlatformMBeanServer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tObjectName objectName <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ObjectName<span class=\"br0\">(</span><span class=\"st0\">\"bean:name=documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tRequiredModelMBean mbean <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RequiredModelMBean<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbean.<span class=\"me1\">setManagedResource</span><span class=\"br0\">(</span>documentReplicator, <span class=\"st0\">\"objectReference\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tDescriptor srcDirDescriptor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DescriptorSupport<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"st0\">\"name=SrcDir\"</span>, <span class=\"st0\">\"descriptorType=attribute\"</span>,\n\t\t\t<span class=\"st0\">\"getMethod=getSrcDir\"</span>, <span class=\"st0\">\"setMethod=setSrcDir\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanAttributeInfo srcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"SrcDir\"</span>, <span class=\"st0\">\"java.lang.String\"</span>, <span class=\"st0\">\"Source directory\"</span>,\n\t\t\t<span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, srcDirDescriptor<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tDescriptor destDirDescriptor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DescriptorSupport<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"st0\">\"name=DestDir\"</span>, <span class=\"st0\">\"descriptorType=attribute\"</span>,\n\t\t\t<span class=\"st0\">\"getMethod=getDestDir\"</span>, <span class=\"st0\">\"setMethod=setDestDir\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">IOException</span> <span class=\"br0\">{</span>\n\t\t\tApplicationContext context <span class=\"sy0\">=</span>\n\t\t\t<span class=\"kw1\">new</span> ClassPathXmlApplicationContext<span class=\"br0\">(</span><span class=\"st0\">\"beans-jmx.xml\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tFileReplicator documentReplicator <span class=\"sy0\">=</span>\n\t\t\t<span class=\"br0\">(</span>FileReplicator<span class=\"br0\">)</span> context.<span class=\"me1\">getBean</span><span class=\"br0\">(</span><span class=\"st0\">\"documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanAttributeInfo destDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"DestDir\"</span>, <span class=\"st0\">\"java.lang.String\"</span>, <span class=\"st0\">\"Destination directory\"</span>,\n\t\t\t<span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, destDirDescriptor<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo getSrcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Get source directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"getSrcDir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo setSrcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Set source directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"setSrcDir\"</span>, <span class=\"kw3\">String</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo getDestDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Get destination directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"getDestDir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo setDestDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Set destination directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"setDestDir\"</span>, <span class=\"kw3\">String</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo replicateInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Replicate files\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"replicate\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanInfo mbeanInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanInfoSupport<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"FileReplicator\"</span>, <span class=\"st0\">\"File replicator\"</span>,\n\t\t\t<span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> srcDirInfo, destDirInfo <span class=\"br0\">}</span>,\n\t\t\t<span class=\"kw2\">null</span>,\n\t\t\t<span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> getSrcDirInfo, setSrcDirInfo,\n\t\t\tgetDestDirInfo, setDestDirInfo, replicateInfo <span class=\"br0\">}</span>,\n\t\t\t<span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbean.<span class=\"me1\">setModelMBeanInfo</span><span class=\"br0\">(</span>mbeanInfo<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbeanServer.<span class=\"me1\">registerMBean</span><span class=\"br0\">(</span>mbean, objectName<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>JMException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>InvalidTargetObjectTypeException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><span class=\"kw3\">NoSuchMethodException</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">in</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ManagementFactory.getPlatform()",
            "b) ManagementFactory.getPlatformMBeanServer()",
            "c) ManagementFactory.getPlatformMBean()",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Each time you call the replicate() method, all files in the source directory will be replicated to the destination directory. To avoid unexpected problems caused by concurrent replication, you declare this method as synchronized."
    },
    {
        "id": 535,
        "Question": "8.From the preceding code, you can see that for each MBean attribute and MBean operation, you need to create a:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.management.ManagementFactory</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.Descriptor</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.JMException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.MBeanServer</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.ObjectName</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.DescriptorSupport</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.InvalidTargetObjectTypeException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanAttributeInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanInfoSupport</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.ModelMBeanOperationInfo</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.management.modelmbean.RequiredModelMBean</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.context.ApplicationContext</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">IOException</span> <span class=\"br0\">{</span>\n\t\tApplicationContext context <span class=\"sy0\">=</span>\n\t\t\t<span class=\"kw1\">new</span> ClassPathXmlApplicationContext<span class=\"br0\">(</span><span class=\"st0\">\"beans-jmx.xml\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tFileReplicator documentReplicator <span class=\"sy0\">=</span>\n\t\t<span class=\"br0\">(</span>FileReplicator<span class=\"br0\">)</span> context.<span class=\"me1\">getBean</span><span class=\"br0\">(</span><span class=\"st0\">\"documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span>\n\t\t\tMBeanServer mbeanServer <span class=\"sy0\">=</span> ManagementFactory.<span class=\"me1\">getPlatformMBeanServer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tObjectName objectName <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ObjectName<span class=\"br0\">(</span><span class=\"st0\">\"bean:name=documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tRequiredModelMBean mbean <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RequiredModelMBean<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbean.<span class=\"me1\">setManagedResource</span><span class=\"br0\">(</span>documentReplicator, <span class=\"st0\">\"objectReference\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tDescriptor srcDirDescriptor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DescriptorSupport<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"st0\">\"name=SrcDir\"</span>, <span class=\"st0\">\"descriptorType=attribute\"</span>,\n\t\t\t<span class=\"st0\">\"getMethod=getSrcDir\"</span>, <span class=\"st0\">\"setMethod=setSrcDir\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanAttributeInfo srcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"SrcDir\"</span>, <span class=\"st0\">\"java.lang.String\"</span>, <span class=\"st0\">\"Source directory\"</span>,\n\t\t\t<span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, srcDirDescriptor<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tDescriptor destDirDescriptor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DescriptorSupport<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"st0\">\"name=DestDir\"</span>, <span class=\"st0\">\"descriptorType=attribute\"</span>,\n\t\t\t<span class=\"st0\">\"getMethod=getDestDir\"</span>, <span class=\"st0\">\"setMethod=setDestDir\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <span class=\"kw3\">IOException</span> <span class=\"br0\">{</span>\n\t\t\tApplicationContext context <span class=\"sy0\">=</span>\n\t\t\t<span class=\"kw1\">new</span> ClassPathXmlApplicationContext<span class=\"br0\">(</span><span class=\"st0\">\"beans-jmx.xml\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tFileReplicator documentReplicator <span class=\"sy0\">=</span>\n\t\t\t<span class=\"br0\">(</span>FileReplicator<span class=\"br0\">)</span> context.<span class=\"me1\">getBean</span><span class=\"br0\">(</span><span class=\"st0\">\"documentReplicator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanAttributeInfo destDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"DestDir\"</span>, <span class=\"st0\">\"java.lang.String\"</span>, <span class=\"st0\">\"Destination directory\"</span>,\n\t\t\t<span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, destDirDescriptor<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo getSrcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Get source directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"getSrcDir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo setSrcDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Set source directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"setSrcDir\"</span>, <span class=\"kw3\">String</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo getDestDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Get destination directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"getDestDir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo setDestDirInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Set destination directory\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"setDestDir\"</span>, <span class=\"kw3\">String</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanOperationInfo replicateInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"Replicate files\"</span>,\n\t\t\tFileReplicator.<span class=\"kw1\">class</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"replicate\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tModelMBeanInfo mbeanInfo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ModelMBeanInfoSupport<span class=\"br0\">(</span>\n\t\t\t<span class=\"st0\">\"FileReplicator\"</span>, <span class=\"st0\">\"File replicator\"</span>,\n\t\t\t<span class=\"kw1\">new</span> ModelMBeanAttributeInfo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> srcDirInfo, destDirInfo <span class=\"br0\">}</span>,\n\t\t\t<span class=\"kw2\">null</span>,\n\t\t\t<span class=\"kw1\">new</span> ModelMBeanOperationInfo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> getSrcDirInfo, setSrcDirInfo,\n\t\t\tgetDestDirInfo, setDestDirInfo, replicateInfo <span class=\"br0\">}</span>,\n\t\t\t<span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbean.<span class=\"me1\">setModelMBeanInfo</span><span class=\"br0\">(</span>mbeanInfo<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmbeanServer.<span class=\"me1\">registerMBean</span><span class=\"br0\">(</span>mbean, objectName<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>JMException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>InvalidTargetObjectTypeException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><span class=\"kw3\">NoSuchMethodException</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t...\n\t\t\t<span class=\"br0\">}</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">in</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ModelMBeanAttributeInfo",
            "b) ModelMBeanOperationInfo",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To register an MBean, you need an instance of the interface javax.management.MBeanServer."
    },
    {
        "id": 536,
        "Question": "VM argument to enable local monitoring of this application.",
        "Options": [
            "a) -Dcom.sun.management.jmxremote",
            "b) -Dcom.sun.management",
            "c) -Dcom.sun.management.jmx",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: It will create an MBean server if none exists and then register this server instance for future use. "
    },
    {
        "id": 537,
        "Question": "However, in an environment with no MBean server available, you have to create one explicitly using:-",
        "Options": [
            "a) MBeanServerFactoryBean",
            "b) MBeanServerFactory",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: From the preceding code, you can see that for each MBean attribute and MBean operation, you need to create a ModelMBeanAttributeInfo object and a ModelMBeanOperationInfo object for describing it. "
    },
    {
        "id": 538,
        "Question": "Spring allows you to create a JMX connector server through:-",
        "Options": [
            "a) ConnectorServerFactoryBean",
            "b) ConnectorServer",
            "c) ConnectorServerFactory",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You have to add the VM argument -Dcom.sun.management.jmxremote to enable local monitoring of this application. You should also include all other options for your command, such as the classpath, as necessary.\nJava –classpath … -Dcom.sun.management.jmxremote com.apress.springrecipes.replicator.Main"
    },
    {
        "id": 539,
        "Question": "12. ? should be replaced by:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"sy0\">&lt;</span>beans ...<span class=\"sy0\">&gt;</span>\n\t...\n\t<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"rmiRegistry\"</span>\n\t<span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"org.springframework.remoting.rmi.RmiRegistryFactoryBean\"</span> <span class=\"sy0\">/&gt;</span>\n\t<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"connectorServer\"</span>\n\t<span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"org.springframework.jmx.support.ConnectorServerFactoryBean\"</span>\n\tdepends<span class=\"sy0\">-</span>on<span class=\"sy0\">=</span><span class=\"st0\">\"rmiRegistry\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>property name<span class=\"sy0\">=</span><span class=\"st0\">\"serviceUrl\"</span> value<span class=\"sy0\">=?</span> <span class=\"sy0\">/&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>bean<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;/</span>beans<span class=\"sy0\">&gt;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) service:jmx:rmi://localhost/jndi/rmi://localhost:1099/replicator",
            "b) service:jmx:rmi://localhost/jndi/rmi://localhost:1099/",
            "c) service:jmx:rmi://localhost/jndi//localhost:1099/replicator",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To make your application portable to different runtime environments, you should enable the locateExistingServerIfPossible property so that this factory bean will create an MBean server only if none is available."
    },
    {
        "id": 540,
        "Question": "If no RMI registry has been created externally, you should create one by using:-",
        "Options": [
            "a) RmiRegistryFactory",
            "b) RmiRegistryFactoryBean",
            "c) RmiRegistry",
            "d) RmiRegister"
        ],
        "Answer": "Answer: a\nExplanation: By default, ConnectorServerFactoryBean creates and starts a JMX connector server bound to the service URL service:jmx:jmxmp://localhost:9875, which exposes the JMX connector through the JMX Messaging Protocol (JMXMP)."
    },
    {
        "id": 541,
        "Question": "The simplest MBean assembler in Spring is, which allows you to specify the names of the methods to export.",
        "Options": [
            "a) MethodNameBasedMBeanInfoAssembler",
            "b) MethodNameBasedMBeanInfo",
            "c) MethodNameBasedMBean",
            "d) MethodNameBasedInfoAssembler"
        ],
        "Answer": "Answer: a\nExplanation: To expose your JMX connector through a specific protocol, you just provide the service URL for it."
    },
    {
        "id": 542,
        "Question": "Spring allows your beans to publish JMX notifications through:-",
        "Options": [
            "a) NotificationPublisher",
            "b) Notification",
            "c) Notify",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If no RMI registry has been created externally, you should create one by using RmiRegistryFactoryBean. The default port for this registry is 1099, but you can specify another one in its port property. "
    },
    {
        "id": 543,
        "Question": "The core interface of Spring email support is:-",
        "Options": [
            "a) MailSender",
            "b) EMail",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring email support makes it easier to send email by providing an abstract and implementation-independent API for sending email. The core interface of Spring email support is MailSender."
    },
    {
        "id": 544,
        "Question": "The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features:-",
        "Options": [
            "a) Multipurpose Internet Mail Extensions",
            "b) Multipurpose Internet Mail",
            "c) Multipurpose Internet Extensions",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features such as Multipurpose Internet Mail Extensions (MIME) message support. To send an email message with HTML content, inline images, or attachments, you have to send it as a MIME message."
    },
    {
        "id": 545,
        "Question": "You can implement the interface to send email notifications in case of errors.",
        "Options": [
            "a) Notify",
            "b) Error",
            "c) ErrorNotifier",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Before you implement the interface in this way, you may need a local email server that supports the Simple Mail Transfer Protocol (SMTP) for testing purposes. We recommend installing Apache James Server (http://james.apache.org/server/index.html), which is very easy to install and configure."
    },
    {
        "id": 546,
        "Question": "You send the email by making a call to:-",
        "Options": [
            "a) Transport.send()",
            "b) Transport.sendTo()",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can implement the ErrorNotifier interface to send email notifications in case of errors."
    },
    {
        "id": 547,
        "Question": "The default port used by JavaMailSenderImpl is the:-",
        "Options": [
            "a) SMTP port 24",
            "b) SMTP port 22",
            "c) SSH port 22",
            "d) SMTP port 25"
        ],
        "Answer": "Answer: a\nExplanation: You send the email by making a call to Transport.send()."
    },
    {
        "id": 548,
        "Question": "If you have a JavaMail session configured in your Java EE application server, you can first look it up with the help of:-",
        "Options": [
            "a) JndiObjectFactory",
            "b) JndiObjectFactoryBean",
            "c) JndiObject",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The default port used by JavaMailSenderImpl is the standard SMTP port 25, so if your email server listens on this port for SMTP, you can simply omit this property. "
    },
    {
        "id": 549,
        "Question": "MIME is supported by JavaMail through the:-",
        "Options": [
            "a) javax.mail.internet.Mime",
            "b) javax.mail.internet.Message",
            "c) javax.mail.internet.MimeMessage",
            "d) javax.mail.internet.Mail"
        ],
        "Answer": "Answer: b\nExplanation: If you have a JavaMail session configured in your Java EE application server, you can first look it up with the help of JndiObjectFactoryBean."
    },
    {
        "id": 550,
        "Question": "Quartz supports several types of triggers:-",
        "Options": [
            "a) SimpleTrigger",
            "b) CronTrigger",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To send email that contains HTML content, inline images, or attachments, you have to construct and send a MIME message instead. MIME is supported by JavaMail through the javax.mail.internet.MimeMessage class."
    },
    {
        "id": 551,
        "Question": "SimpleTrigger allows you to set trigger properties:-",
        "Options": [
            "a) start time",
            "b) end time",
            "c) repeat interval",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The JavaMailSenderImpl instance you injected does implement this interface, so you needn’t modify your bean configurations. "
    },
    {
        "id": 552,
        "Question": "You can configure a Quartz SimpleTrigger object in Spring bean configuration file through:-",
        "Options": [
            "a) SimpleTrigger",
            "b) SimpleTriggerBean",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Quartz supports two types of triggers: SimpleTrigger and CronTrigger. "
    },
    {
        "id": 553,
        "Question": "Spring 3.0 debuts new support for configuring:-",
        "Options": [
            "a) TaskExecutors",
            "b) TaskSchedulers",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: SimpleTrigger allows you to set trigger properties such as start time, end time, repeat interval, and repeat count. "
    },
    {
        "id": 554,
        "Question": "Template which can send and receive JMS messages with much less code",
        "Options": [
            "a) JmsTemplate",
            "b) EMail",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: With a JMS template (Spring framework class JmsTemplate), you can send and receive JMS messages with much less code. "
    },
    {
        "id": 555,
        "Question": "The template handles the boilerplate tasks for you and also converts the JMS API JMSException hierarchy into Spring runtime exception:-",
        "Options": [
            "a) org.springframework.jms.Jms",
            "b) org.springframework.jms.JmsException",
            "c) org.springframework.jms.JmsTemplate",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The translation converts exceptions to a mirrored hierarchy of unchecked exceptions."
    },
    {
        "id": 556,
        "Question": "To address different JMS APIs, Spring provides :-",
        "Options": [
            "a) JmsTemplate",
            "b) JmsTemplate102",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To address different JMS APIs, Spring provides two JMS template classes, JmsTemplate and JmsTemplate102, for these two versions of JMS. "
    },
    {
        "id": 557,
        "Question": "Before you can send and receive JMS messages, you need to install a JMS message broker:-",
        "Options": [
            "a) Apache ActiveM",
            "b) Apache Active",
            "c) Apache MQ",
            "d) Apache ActiveMQ"
        ],
        "Answer": "Answer: d\nExplanation: Before you can send and receive JMS messages, you need to install a JMS message broker. For simplicity’s sake, we have chosen Apache ActiveMQ (http://activemq.apache.org/) as our message broker, which is very easy to install and configure."
    },
    {
        "id": 558,
        "Question": "6.In JMS, there are two types of destinations:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.Connection</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.ConnectionFactory</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.Destination</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.JMSException</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.MapMessage</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.MessageProducer</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">javax.jms.Session</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.apache.activemq.ActiveMQConnectionFactory</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.apache.activemq.command.ActiveMQQueue</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FrontDeskImpl <span class=\"kw1\">implements</span> FrontDesk <span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> sendMail<span class=\"br0\">(</span>Mail mail<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\tConnectionFactory cf <span class=\"sy0\">=</span>\n\t\t<span class=\"kw1\">new</span> ActiveMQConnectionFactory<span class=\"br0\">(</span><span class=\"st0\">\"tcp://localhost:61616\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tDestination destination <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ActiveMQQueue<span class=\"br0\">(</span><span class=\"st0\">\"mail.queue\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">Connection</span> conn <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span>\n\t\t\tconn <span class=\"sy0\">=</span> cf.<span class=\"me1\">createConnection</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tSession session <span class=\"sy0\">=</span>\n\t\t\tconn.<span class=\"me1\">createSession</span><span class=\"br0\">(</span><span class=\"kw2\">false</span>, Session.<span class=\"me1\">AUTO_ACKNOWLEDGE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tMessageProducer producer <span class=\"sy0\">=</span> session.<span class=\"me1\">createProducer</span><span class=\"br0\">(</span>destination<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tMapMessage message <span class=\"sy0\">=</span> session.<span class=\"me1\">createMapMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmessage.<span class=\"me1\">setString</span><span class=\"br0\">(</span><span class=\"st0\">\"mailId\"</span>, mail.<span class=\"me1\">getMailId</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmessage.<span class=\"me1\">setString</span><span class=\"br0\">(</span><span class=\"st0\">\"country\"</span>, mail.<span class=\"me1\">getCountry</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tmessage.<span class=\"me1\">setDouble</span><span class=\"br0\">(</span><span class=\"st0\">\"weight\"</span>, mail.<span class=\"me1\">getWeight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tproducer.<span class=\"me1\">send</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tsession.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>JMSException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <span class=\"kw3\">RuntimeException</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">finally</span> <span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>conn <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span>\n\t\t\t\tconn.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>JMSException e<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t\t\t<span class=\"br0\">}</span>\n\t\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) topic",
            "b) queue",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In the preceding sendMail() method, you first create JMS-specific ConnectionFactory and Destination objects with the classes provided by ActiveMQ. "
    },
    {
        "id": 559,
        "Question": "There are several types of messages defined in the JMS API, including:-",
        "Options": [
            "a) TextMessage",
            "b) MapMessage",
            "c) BytesMessage",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The message broker URL is the default for ActiveMQ if you run it on localhost. In JMS, there are two types of destinations: queue and topic. As explained before, a queue is for the point-to-point communication model, while topic is for the publish-subscribe communication model. "
    },
    {
        "id": 560,
        "Question": "To send a JMS message with this template, you simply call:-",
        "Options": [
            "a) send",
            "b) sendTo",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: There are several types of messages defined in the JMS API, including TextMessage, MapMessage, BytesMessage, ObjectMessage, and StreamMessage. "
    },
    {
        "id": 561,
        "Question": "The MessageCreator interface declares method:-",
        "Options": [
            "a) createMessage()",
            "b) create()",
            "c) createMsg()",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To send a JMS message with this template, you simply call the send() method and provide a message destination, as well as a MessageCreator object, which creates the JMS message you are going to send.  "
    },
    {
        "id": 562,
        "Question": "JMS sender and receiver classes can also extend to retrieve a JMS template:-",
        "Options": [
            "a) JmsGatewaySupport",
            "b) JmsGateway",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The MessageCreator interface declares only a createMessage() method for you to implement."
    },
    {
        "id": 563,
        "Question": "When you need access to the JMS template.",
        "Options": [
            "a) setJmsTemplate",
            "b) getJmsTemplate",
            "c) getJms",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A JMS template helps you to obtain and release the JMS connection and session, and it sends the JMS message created by your MessageCreator object. "
    },
    {
        "id": 564,
        "Question": "For your front desk and back office classes, you can send and receive a map using the:-",
        "Options": [
            "a) convertAndSend()",
            "b) receiveAndConvert()",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Just like your DAO class can extend JdbcDaoSupport to retrieve a JDBCtemplate, your JMS sender and receiver classes can also extend JmsGatewaySupport to retrieve a JMS template. "
    },
    {
        "id": 565,
        "Question": "When you call the receive() method on a JMS message consumer to receive a message.",
        "Options": [
            "a) send",
            "b) receive",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: When you call the receive() method on a JMS message consumer to receive a message, the calling thread is blocked until a message is available. "
    },
    {
        "id": 566,
        "Question": "EJB component which was introduced for asynchronous reception of JMS messages.",
        "Options": [
            "a) message-driven bean",
            "b) message-driven",
            "c) message bean",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Starting with EJB 2.0, a new kind of EJB component called a message-driven bean (MDB) was introduced for asynchronous reception of JMS messages. "
    },
    {
        "id": 567,
        "Question": "MDB must implements interfaces:-",
        "Options": [
            "a) javax.ejb.MessageDrivenBean",
            "b) javax.jms.MessageListener",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: An MDB must implement both the javax.ejb.MessageDrivenBean and javax.jms.MessageListener interfaces and override all EJB life cycle methods (ejbCreate and ejbRemove).  "
    },
    {
        "id": 568,
        "Question": "In EJB 3.0, an MDB can be a POJO that implements the MessageListener interface and is annotated with the:-",
        "Options": [
            "a) @MessageDrive",
            "b) @Message",
            "c) all of the mentioned",
            "d) @MessageDriven"
        ],
        "Answer": "Answer: d\nExplanation: In EJB 3.0, an MDB can be a POJO that implements the MessageListener interface and is annotated with the @MessageDriven annotation."
    },
    {
        "id": 569,
        "Question": "A message listener must implement the:-",
        "Options": [
            "a) javax.jms.MessageListener",
            "b) javax.jms.Message",
            "c) javax.jms",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: For example, the following MailListener listens for JMS messages that contain mail information:-\n\n\n        \n\nimport javax.jms.JMSException;\nimport javax.jms.MapMessage;\nimport javax.jms.Message;\nimport javax.jms.MessageListener;\n \nimport org.springframework.jms.support.JmsUtils;\npublic class MailListener implements MessageListener {\n\tpublic void onMessage(Message message) {\n\tMapMessage mapMessage = (MapMessage) message;\n\ttry {\n\t\tMail mail = new Mail();\n\t\tmail.setMailId(mapMessage.getString(\"mailId\"));\n\t\tmail.setCountry(mapMessage.getString(\"country\"));\n\t\tmail.setWeight(mapMessage.getDouble(\"weight\"));\n\t\tdisplayMail(mail);\n\t} catch (JMSException e) {\n\t\tthrow JmsUtils.convertJmsAccessException(e);\n\t}\n\t}\n\tprivate void displayMail(Mail mail) {\n\tSystem.out.println(\"Mail #\" + mail.getMailId() + \" received\");\n\t}\n}\n\n\n"
    },
    {
        "id": 570,
        "Question": "Method to convert MapMessage Object into Spring runtime exception JmsException.",
        "Options": [
            "a) JmsUtils.convertJmsAccessException()",
            "b) JmsUtils.convertJmsAccess()",
            "c) JmsUtils.convertJms()",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A message listener must implement the javax.jms.MessageListener interface. "
    },
    {
        "id": 571,
        "Question": "Spring provides several types of message listener containers:-",
        "Options": [
            "a) SimpleMessageListenerContainer",
            "b) DefaultMessageListenerContainer",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In this sample, you simply display the mail information to the console.\n\n\nimport javax.jms.JMSException;\nimport javax.jms.MapMessage;\nimport javax.jms.Message;\nimport javax.jms.MessageListener;\n \nimport org.springframework.jms.support.JmsUtils;\npublic class MailListener implements MessageListener {\n\tpublic void onMessage(Message message) {\n\tMapMessage mapMessage = (MapMessage) message;\n\ttry {\n\t\tMail mail = new Mail();\n\t\tmail.setMailId(mapMessage.getString(\"mailId\"));\n\t\tmail.setCountry(mapMessage.getString(\"country\"));\n\t\tmail.setWeight(mapMessage.getDouble(\"weight\"));\n\t\tdisplayMail(mail);\n\t} catch (JMSException e) {\n\t\tthrow JmsUtils.convertJmsAccessException(e);\n\t}\n\t}\n\tprivate void displayMail(Mail mail) {\n\tSystem.out.println(\"Mail #\" + mail.getMailId() + \" received\");\n\t}\n}\n\n\n"
    },
    {
        "id": 572,
        "Question": "If you have a transaction requirement in receiving messages, you have to use:-",
        "Options": [
            "a) SimpleMessageListenerContainer",
            "b) DefaultMessageListenerContainer",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: When extracting message information from a MapMessage object, you need to handle the JMS API’s JMSException. You can make a call to JmsUtils.convertJmsAccessException() to convert it into Spring runtime exception JmsException."
    },
    {
        "id": 573,
        "Question": "Using Spring JMS support with a very simple instance of:-",
        "Options": [
            "a) org.apache.activemq.ActiveMQConnectionFactory",
            "b) org.apache.activemq.ActiveMQConnection",
            "c) org.apache.activemq.ActiveMQ",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring provides several types of message listener containers for you to choose from in the org.springframework.jms.listener package, of which SimpleMessageListenerContainer and DefaultMessageListenerContainer are the most commonly used. "
    },
    {
        "id": 574,
        "Question": "It caches consumers correctly, or use Spring ConnectionFactory implementations.",
        "Options": [
            "a) MessageListenerContainer",
            "b) MessageListener",
            "c) MessageContainer",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If you have a transaction requirement in receiving messages, you have to use DefaultMessageListenerContainer. "
    },
    {
        "id": 575,
        "Question": "Implementation which returns the same underlying JMS connection each time (which is thread-safe according to the JMS API) and ignores calls to the close() method.",
        "Options": [
            "a) org.springframework.jms.connection.SingleConnectionFactory",
            "b) org.springframework.jms.connection.Single",
            "c) org.springframework.jms.connection.SingleConnection",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: By default, this adapter will call the method whose name is handleMessage on that bean."
    },
    {
        "id": 576,
        "Question": "Integration of Spring which has each application produce files of shared data for others to consume.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging"
        ],
        "Answer": "Answer: a\nExplanation: File transfer: Have each application produce files of shared data for others to consume and consume files that others have produced. "
    },
    {
        "id": 577,
        "Question": "Integration of Spring which has the applications store the data they want to share in a common database.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging"
        ],
        "Answer": "Answer: b\nExplanation: This usually takes the form of a database to which different applications have access.  "
    },
    {
        "id": 578,
        "Question": "Integration of Spring which has each application expose some of its procedures so that they can be invoked remotely and have applications invoke them to initiate behavior and exchange data.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging"
        ],
        "Answer": "Answer: c\nExplanation: There is specific support for optimizing RPC (remote procedure calls such as SOAP, RMI, and HTTP Invoker) exchanges using Spring Integration."
    },
    {
        "id": 579,
        "Question": "Integration of Spring which has each application connect to a common messaging system and exchange data and invoke behavior using messages.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging"
        ],
        "Answer": "Answer: d\nExplanation: This style, most enabled by JMS in the JEE world, also describes other asynchronous or multicast publish/subscribe architectures."
    },
    {
        "id": 580,
        "Question": "The configuration starts with the inboundHelloJMSMessageChannel channel, which tells Spring Integration what to name the point-to-point connection from the message queue to the:-",
        "Options": [
            "a) service-activator",
            "b) service",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You’ll use this solution as an easy way to see how a Spring Integration solution can be built. "
    },
    {
        "id": 581,
        "Question": "The next component, a service-activator, listens for messages coming into that channel and invokes the bean referenced by the:-",
        "Options": [
            "a) ref",
            "b) after",
            "c) before",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: There’s also a lot of other schem as required for using the configuration elements available in Spring Integration."
    },
    {
        "id": 582,
        "Question": "Headers Found in Spring Integration Messages:-",
        "Options": [
            "a) ID",
            "b) TIMESTAMP",
            "c) CORRELATION_ID",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You typically define a new channel for every point-to-point connection."
    },
    {
        "id": 583,
        "Question": "Component-specific headers are the constants defined for files on:-",
        "Options": [
            "a) org.springframework.integration.file.FileHeaders: FILENAME",
            "b) org.springframework.integration.file.FileHeaders: PREFIX",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Adapters also do the same in reverse, taking messages on the Spring Integration bus and translating them into something a specific subsystem will understand. "
    },
    {
        "id": 584,
        "Question": "Annotation to get access to header metadata:-",
        "Options": [
            "a) @Ref",
            "b) @service",
            "c) @Header",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: What you do in the business logic, connecting to another system or not, is up to you."
    },
    {
        "id": 585,
        "Question": "The code for the service-activator has changed to reflect the fact that you’re expecting a message containing a message of type:-",
        "Options": [
            "a) Message<java.io.File>",
            "b) Message<java.io>",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The next component, a service-activator, listens for messages coming into that channel and invokes the bean referenced by the ref attribute, which in this case is the bean defined previously: inboundHelloWorldJMSPingServiceActivator."
    },
    {
        "id": 586,
        "Question": "To send a message into the bus and transform it before working with it further.",
        "Options": [
            "a) adding extra headers or augmenting the payload",
            "b) transformer",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You might also want to transform a message by enriching it—adding extra headers or augmenting the payload so that components downstream in the processing pipeline can benefit from it. Use a transformer component to take a Message of a payload and send the Message out with a payload of a different type. "
    },
    {
        "id": 587,
        "Question": "3.The output is constructed dynamically using MessageBuilder to create a message that has the same payload as the input message as well as copy the existing headers and adds an extra header:<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.annotation.Transformer</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.core.Message</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.message.MessageBuilder</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> InboundJMSMessageToCustomerWithExtraMetadataTransformer <span class=\"br0\">{</span>\n\t@Transformer\n\t<span class=\"kw1\">public</span> Message<span class=\"sy0\">&lt;</span>Customer<span class=\"sy0\">&gt;</span> transformJMSMapToCustomer<span class=\"br0\">(</span>\n\tMessage<span class=\"sy0\">&lt;</span>Map<span class=\"sy0\">&lt;</span><span class=\"kw3\">String</span>, Object<span class=\"sy0\">&gt;&gt;</span> inboundSpringIntegrationMessage<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\tMap<span class=\"sy0\">&lt;</span><span class=\"kw3\">String</span>, Object<span class=\"sy0\">&gt;</span> jmsMessagePayload <span class=\"sy0\">=</span>\n\tinboundSpringIntegrationMessage.<span class=\"me1\">getPayload</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tCustomer customer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Customer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tcustomer.<span class=\"me1\">setFirstName</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">)</span> jmsMessagePayload.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"firstName\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tcustomer.<span class=\"me1\">setLastName</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">)</span> jmsMessagePayload.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"lastName\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tcustomer.<span class=\"me1\">setId</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">Long</span><span class=\"br0\">)</span> jmsMessagePayload.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"id\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> MessageBuilder.<span class=\"me1\">withPayload</span><span class=\"br0\">(</span>customer<span class=\"br0\">)</span>\n\t.<span class=\"me1\">copyHeadersIfAbsent</span><span class=\"br0\">(</span> inboundSpringIntegrationMessage.<span class=\"me1\">getHeaders</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t.<span class=\"me1\">setHeaderIfAbsent</span><span class=\"br0\">(</span><span class=\"st0\">\"randomlySelectedForSurvey\"</span>, <span class=\"kw3\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> .5<span class=\"br0\">)</span>\n\t.<span class=\"me1\">build</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) randomlySelected",
            "b) randomlySelectedForSurvey",
            "c) randomly",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Integration provides a transformer message endpoint to permit the augmentation of the message headers or the transformation of the message itself. In Spring Integration, components are chained together, and output from one component is returned by way of the method invoked for that component."
    },
    {
        "id": 588,
        "Question": "Spring Integration provides the ability to catch exceptions and send them to an error channel of your choosing. By default, it’s a global channel called :-",
        "Options": [
            "a) error",
            "b) exceptionChannel",
            "c) exception",
            "d) errorChannel"
        ],
        "Answer": "Answer: b\nExplanation: As before, this code is simply a method with an input and an output. The output is constructed dynamically using MessageBuilder to create a message that has the same payload as the input message as well as copy the existing headers and adds an extra header: randomlySelectedForSurvey."
    },
    {
        "id": 589,
        "Question": "All errors thrown from Spring Integration components will be a subclass of:-",
        "Options": [
            "a) Messaging",
            "b) MessagingException",
            "c) Exception",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: You can have components subscribe to messages from this channel to override the exception handling behavior."
    },
    {
        "id": 590,
        "Question": "One way to discriminate by Exception type is to use:-",
        "Options": [
            "a) org.springframework.integration.router.ErrorMessageExceptionType",
            "b) org.springframework.integration.router.ErrorMessageException",
            "c) org.springframework.integration.router.ErrorMessageExceptionTypeRouter",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: We just use it for convenience here. The code for the following service-activator depicts some of the machinations you might go through to build a handler for the errorChannel."
    },
    {
        "id": 591,
        "Question": "11. All errors that come from the integration in which this component is used will be directed to:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">import</span> <span class=\"co2\">org.apache.log4j.Logger</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.annotation.ServiceActivator</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.core.Message</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.core.MessageHeaders</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">import</span> <span class=\"co2\">org.springframework.integration.message.MessageBuilder</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ServiceActivatorThatSpecifiesErrorChannel <span class=\"br0\">{</span>\n<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> Logger logger <span class=\"sy0\">=</span> Logger.<span class=\"me1\">getLogger</span><span class=\"br0\">(</span>\n\tServiceActivatorThatSpecifiesErrorChannel.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t@ServiceActivator\n\t<span class=\"kw1\">public</span> Message<span class=\"sy0\">&lt;?&gt;</span> startIntegrationFlow<span class=\"br0\">(</span>Message<span class=\"sy0\">&lt;?&gt;</span> firstMessage<span class=\"br0\">)</span>\n\t<span class=\"kw1\">throws</span> <span class=\"kw3\">Throwable</span> <span class=\"br0\">{</span>\n\t<span class=\"kw1\">return</span> MessageBuilder.<span class=\"me1\">fromMessage</span><span class=\"br0\">(</span>firstMessage<span class=\"br0\">)</span>.\n\t<span class=\"me1\">setHeaderIfAbsent</span><span class=\"br0\">(</span> MessageHeaders.<span class=\"me1\">ERROR_CHANNEL</span>,\n\t<span class=\"st0\">\"errorChannelForMySolution\"</span><span class=\"br0\">)</span>.<span class=\"me1\">build</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) customErrorChannel",
            "b) customError",
            "c) errorChannel",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: MessagingException carries a pointer to the original Message that caused an error, which you can dissect for more context information."
    },
    {
        "id": 592,
        "Question": "To fork the process flow from one component to many, either all at once or to a single one based on a predicate condition.",
        "Options": [
            "a) splitter",
            "b) fork",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use a splitter component (and maybe its cohort, the aggregator component) to fork and join (respectively) control of processing."
    },
    {
        "id": 593,
        "Question": "Spring Integration ships with useful splitters that require no customization.",
        "Options": [
            "a) Splitter",
            "b) XPathMessageSplitter",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You’re responsible for providing the split functionality."
    },
    {
        "id": 594,
        "Question": "Return type of the method annotated by the @Splitter annotation is of type:-",
        "Options": [
            "a) java.util.Collection",
            "b) java.util.Date",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In a few cases, Spring Integration ships with useful splitters that require no customization. One example is the splitter provided to partition an XML payload along an XPath query, XPathMessageSplitter."
    },
    {
        "id": 595,
        "Question": "Annotation which collects a series of messages (based on some correlation that you help Spring Integration make between the messages).",
        "Options": [
            "a) @After",
            "b) @Splitter",
            "c) @Aggregator",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The configuration for this is not terribly different from the previous solutions. The Java code is just about the same as well, except that the return type of the method annotated by the @Splitter annotation is of type java.util.Collection."
    },
    {
        "id": 596,
        "Question": "To determine how many messages to read until it can stop:-",
        "Options": [
            "a) SequenceSizeCompletionStrategy",
            "b) SequenceSizeCompletion",
            "c) SequenceSize",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: An @Aggregator collects a series of messages (based on some correlation that you help Spring Integration make between the messages) and publishes a single message to the components downstream."
    },
    {
        "id": 597,
        "Question": "You want to conditionally move a message through different processes based on some criteria.",
        "Options": [
            "a) router component",
            "b) EAI",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: There are many ways for Spring Integration to correlate incoming messages. To determine how many messages to read until it can stop, it uses the class SequenceSizeCompletionStrategy, which reads a well known header value (aggregators are often used after a splitter."
    },
    {
        "id": 598,
        "Question": "There are some convenient default routers available to fill common needs:-",
        "Options": [
            "a) PayloadTypeRouter",
            "b) PayloadType",
            "c) Payload",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In this way, it knows that all messages with that value are from the same group, in the same way that your last name identifies you as being part of a larger group."
    },
    {
        "id": 599,
        "Question": "To receive messages from an external system and process them using Spring Integration.",
        "Options": [
            "a) channel",
            "b) channel adapter",
            "c) EJP",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It could, of course, be a collection of Customer objects, because they are what you’re expecting as output from the previous splitter."
    },
    {
        "id": 600,
        "Question": "Sometimes, functionality is made available from within the application via:-",
        "Options": [
            "a) Stable API",
            "b) Cohesive API",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use a router component to alter the processing flow based on some predicate. You can also use a router to multicast a message to many subscribers (as you did with the splitter)."
    },
    {
        "id": 601,
        "Question": "To take an input file or a payload and reliably, and systematically, decompose it into events that an ESB can work with:-",
        "Options": [
            "a) Splitter",
            "b) Spring Batch",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You have a file with a million records in it. This file’s too big to handle as one event; it’s far more natural to react to each row as an event. Spring Batch works very well with these types of solutions. It allows you to take an input file or a payload and reliably, and systematically, decompose it into events that an ESB can work with."
    },
    {
        "id": 602,
        "Question": "Spring Batch reads the file, transforms the records into:-",
        "Options": [
            "a) objects",
            "b) outputs",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Batch does support providing custom, unique endpoints for data."
    },
    {
        "id": 603,
        "Question": "You want to expose an interface to clients of your service, without betraying the fact that your service is implemented in terms of messaging middleware.",
        "Options": [
            "a) Enterprise Integration Patterns",
            "b) Gateway",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Strive to decompose bigger events and messages into smaller ones."
    },
    {
        "id": 604,
        "Question": "Serving to abstract away the functionality of other components in an abbreviated interface to provide courser functionality.",
        "Options": [
            "a) facade",
            "b) façade",
            "c) gateway",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Batch reads the file, transforms the records into objects, and writes the output to a JMS topic with a key correlating the original batch to the JMS message."
    },
    {
        "id": 605,
        "Question": "The capability to hide messaging behind a POJO interface.",
        "Options": [
            "a) Lingo",
            "b) JCA",
            "c) JMS",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The BPM engine would thread together the different actors and work lists, allow work to continue over the course of days instead of the small millisecond timeframes Spring Integration is more geared to."
    },
    {
        "id": 606,
        "Question": "The most fundamental support for gateways comes from the Spring Integration class:-",
        "Options": [
            "a) SimpleMessagingGateway",
            "b) SimpleMessaging",
            "c) SimpleGateway",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Use a gateway—a pattern from the classic book Enterprise Integration Patterns by Gregor Hohpe and Bobby Woolf (Addison-Wesley, 2004) that enjoys rich support in Spring Integration."
    },
    {
        "id": 607,
        "Question": "Messages sent on the requests channel are forwarded to the:-",
        "Options": [
            "a) jms:outbound-gateway",
            "b) jms:outbound",
            "c) jms-gateway",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You might use a façade to build an interface oriented around vacation planning that in turn abstracts away the minutiae of using a car rental, hotel reservation, and airline reservation system."
    },
    {
        "id": 608,
        "Question": "Spring Batch provides a lot of flexibility and guarantees to your application, but it cannot work in a vacuum. To do its work:-",
        "Options": [
            "a) Job",
            "b) JobRepo",
            "c) JobRepository",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To do its work, the JobRepository requires a database. Additionally, there are several collaborators required for Spring Batch to do its work. This configuration is mostly boilerplate."
    },
    {
        "id": 609,
        "Question": "There’s only one really useful implementation of the JobRepository interface, which stores information about the state of the batch processes in a database.",
        "Options": [
            "a) SimpleJobRepository",
            "b) SimpleJob",
            "c) SimpleRepo",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Creation is done through a JobRepositoryFactoryBean. Another standard factory, MapJobRepositoryFactoryBean is useful mainly for testing because its state is not durable – it’s an in-memory implementation. Both factories create an instance of SimpleJobRepository."
    },
    {
        "id": 610,
        "Question": "To load the contents of a properties file (batch.properties) whose values you use to configure the data source.",
        "Options": [
            "a) PropertyPlaceholder",
            "b) PropertyPlaceholderConfigurer",
            "c) Property",
            "d) PropertyConfigurer"
        ],
        "Answer": "Answer: b\nExplanation: You need to place values for your particular database in this file. This example uses Spring’s property schema (“p”) to abbreviate the tedious configuration."
    },
    {
        "id": 611,
        "Question": "Indeed, a step could be considered the smallest unit of work for a job. Input (what’s read) is passed to the Step and potentially processed; then output (what’s written) is created from the step.",
        "Options": [
            "a) Steplet",
            "b) Tasklet",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It controls the “big picture” about all Jobs in the system. Everything else works with this instance."
    },
    {
        "id": 612,
        "Question": "Attribute to configure how many items will be processed before the transaction is committed all the input is sent to the writer.",
        "Options": [
            "a) interval",
            "b) commit",
            "c) commit-interval",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The jobLauncher is used to specify the name of the batch solution to run as well as any parameters required."
    },
    {
        "id": 613,
        "Question": "Class which delegates the task of delimiting fields and records within a file to a LineMapper, which in turn delegates the task of identifying the fields within that record, to LineTokenizer.",
        "Options": [
            "a) org.springframework.batch.item.file.FlatFileItemReader",
            "b) org.springframework.batch.item.file.FlatFile",
            "c) org.springframework.batch.item.file.FlatFileItem",
            "d) org.springframework.batch.item.file.FileItemReader"
        ],
        "Answer": "Answer: a\nExplanation: This schema is new to Spring Batch 2.1."
    },
    {
        "id": 614,
        "Question": "The names and values for the named parameters are being created by the bean configured for the itemSqlParameterSourceProvider property, an instance of the interface",
        "Options": [
            "a) BeanPropertyItemSqlParameterSourceProvider",
            "b) BeanPropertyItemSqlParameterSource",
            "c) BeanPropertyItemSqlParameter",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A common solution is to create a denormalized table whose contents can be coerced into valid data once inside the database, perhaps by a trigger on inserts."
    },
    {
        "id": 615,
        "Question": "There’s support for writing JMS:-",
        "Options": [
            "a) JmsItemWriter",
            "b) JpaItemWriter",
            "c) JdbcBatchItemWriter",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: This processing is spelled out using a Tasklet. You can provide your own Tasklet implementation or simply use some of the preconfigured configurations for different processing scenarios. "
    },
    {
        "id": 616,
        "Question": "The processor attribute on the chunk element expects a reference to a bean of the interface:-",
        "Options": [
            "a) org.springframework.batch.item.Item",
            "b) org.springframework.batch.item",
            "c) org.springframework.batch.item.ItemProcessor",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If there is a transaction manager in play, the transaction is also committed. "
    },
    {
        "id": 617,
        "Question": "If the preceding job was run on a batch with a 100 rows, each item was read and passed through the processor, and it found 10 items invalid (it returned null 10 times), the value for the filter_count column would be:-",
        "Options": [
            "a) 100",
            "b) 1",
            "c) 10",
            "d) 1000"
        ],
        "Answer": "Answer: a\nExplanation: The FlatFileItemReader also declares a fieldSetMapper attribute that requires an implementation of FieldSetMapper. "
    },
    {
        "id": 618,
        "Question": "Spring core framework provides first-class support for transactions.",
        "Options": [
            "a) Transaction",
            "b) TransactionManager",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Where relevant, Spring Batch surfaces the configuration so that you can control it."
    },
    {
        "id": 619,
        "Question": "The batch.xml file establishes a:-",
        "Options": [
            "a) BasicDataSource",
            "b) DataSourceTransactionManager",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: You simply wire up a TransactionManager and give Spring Batch a reference, just as you would in any regular JdbcTemplate or HibernateTemplate solution. "
    },
    {
        "id": 620,
        "Question": "Spring Batch will, by default, try to pluck the:-",
        "Options": [
            "a) PlatformTransactionManager",
            "b) transactionManager",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The TransactionManager and BasicDataSource were then wired to the JobRepository, which was in turn wired to the JobLauncher, which you used to launch all jobs thus far. "
    },
    {
        "id": 621,
        "Question": "Element to configure this for the step:-",
        "Options": [
            "a) no-rollback-exception-classes",
            "b) no-rollback-exception",
            "c) no-rollback",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The transaction manager reference can be specified, but in your solutions, it wasn’t required because Spring Batch will, by default, try to pluck the PlatformTransactionManager named transactionManager from the context and use it."
    },
    {
        "id": 622,
        "Question": "You want to work with a resource that may fail when you try to read from or write to it.",
        "Options": [
            "a) TransactionManager",
            "b) Transaction",
            "c) Spring batch retry",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If a write fails on an ItemWriter, or some other exception occurs in processing, Spring Batch will rollback the transaction."
    },
    {
        "id": 623,
        "Question": "The template that (much like its various other Template cousins) isolates your logic from the nuances of retries and instead enables you to write the code as though you were only going to attempt it once.",
        "Options": [
            "a) Retry",
            "b) RetryTemplate",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use the no-rollback-exception-classes element to configure this for the step. The value is a list of Exception classes that should not cause the transaction to roll back."
    },
    {
        "id": 624,
        "Question": "One of the more useful settings for the RetryTemplate is the :-",
        "Options": [
            "a) BackOff",
            "b) Back",
            "c) BackOffPolicy",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use the no-rollback-exception-classes element to configure this for the step. The value is a list of Exception classes that should not cause the transaction to roll back."
    },
    {
        "id": 625,
        "Question": "You want to control how steps are executed, perhaps to eliminate a needless waste of time by:-",
        "Options": [
            "a) concurrent steps",
            "b) decisions",
            "c) sequential steps",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: There are different ways to change the runtime profile of your jobs, mainly by exerting control over the way steps are executed: concurrent steps, decisions, and sequential steps."
    },
    {
        "id": 626,
        "Question": "Spring Batch provides a mechanism to offload processing to another process.",
        "Options": [
            "a) chunking",
            "b) remote chunking",
            "c) remote",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A step provides a boundary (transactional or not) to the beans and logic it encloses. "
    },
    {
        "id": 627,
        "Question": "Pattern which refers to the arrangement of multiple JMS clients all consuming the same queue messages.",
        "Options": [
            "a) aggressive-consumer",
            "b) aggressive",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Nor was there anything preventing you from having more steps after the split element. The split element, like the step elements, takes a next attribute as well. "
    },
    {
        "id": 628,
        "Question": "Spring Batch ships with only handler, which executes steps in multiple threads using a TaskExecutor strategy.",
        "Options": [
            "a) TaskExecutorPartition",
            "b) TaskExecutorPartitionHandler",
            "c) TaskExecutorPartitionHandle",
            "d) TaskExecutor"
        ],
        "Answer": "Answer: b\nExplanation: Spring Batch provides a mechanism to offload processing to another process. This feature, called remote chunking, is new in Spring Batch 2.x. "
    },
    {
        "id": 629,
        "Question": "To determine the next step is the simplest example of a conditional flow.",
        "Options": [
            "a) Exit",
            "b) Status",
            "c) ExitStatus",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If one client consumes a message and is busy processing, other idle queues will get the message instead. "
    },
    {
        "id": 630,
        "Question": "If you want to vary the execution flow based on some logic more complex than a job’s ExitStatuses:-",
        "Options": [
            "a) ExitStatus",
            "b) Exit",
            "c) Decision",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: This simple improvement might be enough of a justification for this feature! If you’re really hurting, however, you can extend it. "
    },
    {
        "id": 631,
        "Question": "Spring Batch work with a system scheduler:-",
        "Options": [
            "a) cron",
            "b) autosys",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring Batch facilitates this through the use of the stop, next, fail, and end elements.     "
    },
    {
        "id": 632,
        "Question": "TaskExecutor that will spawn a thread of execution and manage that thread without blocking.",
        "Options": [
            "a) Async",
            "b) Sync",
            "c) Simple",
            "d) SimpleAsyncTaskExecutor"
        ],
        "Answer": "Answer: c\nExplanation: If you want to vary the execution flow based on some logic more complex than a job’s ExitStatuses, you may give Spring Batch a helping hand by using a decision element and providing it with an implementation of a JobExecutionDecider.     "
    },
    {
        "id": 633,
        "Question": "The CommandLineJobRunner for success will return system error codes:-",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Spring Batch work with a system scheduler such as cron or autosys, or from a web application."
    },
    {
        "id": 634,
        "Question": "More complicated return codes can be returned by creating and declaring a top-level bean that implements the interface:-",
        "Options": [
            "a) ExitCode",
            "b) ExitCodeMapper",
            "c) ExitMapper",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The result is a JobExecution. You can interrogate the JobExecution for information on the state of the Job, including its exit status and runtime status."
    },
    {
        "id": 635,
        "Question": "The bean is recognized and becomes part of the application context because of the:-",
        "Options": [
            "a) @Component",
            "b) @Attr",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: SimpleAsyncTaskExecutor will spawn a thread of execution and manage that thread without blocking. "
    },
    {
        "id": 636,
        "Question": "To parameterize a job, which is then available to your steps through Spring Batch expression language.",
        "Options": [
            "a) Job",
            "b) Steps",
            "c) JobParameters",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The CommandLineJobRunner will even return system error codes (0 for success, 1 for failure, and 2 for an issue with loading the batch job) so that a shell (such as used by most system schedulers) can react or do something about the failure.  "
    },
    {
        "id": 637,
        "Question": "You want to share object state across multiple virtual machines.",
        "Options": [
            "a) Terracotta",
            "b) Hibernate Transaction",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use Terracotta to build such a solution. Terracotta (http://www.terracotta.org) is a free open source clustering solution."
    },
    {
        "id": 638,
        "Question": "The company, Terracotta, has also recently become the corporate sponsor of:-",
        "Options": [
            "a) Ehcache",
            "b) Quartz",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The company, Terracotta, has also recently become the corporate sponsor of the Ehcache and Quartz projects. "
    },
    {
        "id": 639,
        "Question": "To deploy a Terracotta application, you first download the distribution. The distribution provides :-",
        "Options": [
            "a) utility scripts",
            "b) JAR files",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It also works as a mostly unnoticeable engine to enable API-free shared state across a cluster.  "
    },
    {
        "id": 640,
        "Question": "On Unix-like operating systems, you start Terracotta as :-",
        "Options": [
            "a) $TERRACOTTA HOME/bin/start-tc-server.sh –f $PATH TO TERRACOTTA CONFIGURATION",
            "b) $TERRACOTTA HOME/bin/start-tc-server.sh –f $PATH TO TERRACOTTA",
            "c) $TERRACOTTA HOME/bin/start-tc-server.sh –f $PATH TO TERRACOTTA bin",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Terracotta doesn’t use serialization of objects (not even highly compact serialization like Swift, Google’s Protocol Buffers, Coherence Pofs, or Hazelcast DataSerializables), and instead ferries around deltas of VM memory across the cluster.  "
    },
    {
        "id": 641,
        "Question": "To use the script on Unix-like operating systems:",
        "Options": [
            "a) $TERRACOTTA HOME/bin/dso-env.sh $HOST:3312",
            "b) $TERRACOTTA HOME/bin/dso-env.sh $HOST:$PORT",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It ensures replication of object state across a cluster. "
    },
    {
        "id": 642,
        "Question": "To distribute processing over many nodes, perhaps to increase result speed through the use of concurrences, perhaps merely to provide load balance and fault tolerance.",
        "Options": [
            "a) Grid",
            "b) GridGain",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Terracotta is different than most clustered caches today because it has no visible API, and because it’s far more efficient in conveying the changed state to nodes across the cluster.  "
    },
    {
        "id": 643,
        "Question": "There are many data grids, such as :-",
        "Options": [
            "a) Coherence",
            "b) Terracotta",
            "c) Hadoop’s HFS",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The server, in this case, is the one that contains the original working memory."
    },
    {
        "id": 644,
        "Question": "Map/reduce is a pattern that was popularized by Google, and it comes from functional programming languages, which often have:-",
        "Options": [
            "a) map",
            "b) reduce",
            "c) none of the mentioned",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The distribution provides utility scripts, as well as JARs. You may download Terracotta from http://www.terracotta.org."
    },
    {
        "id": 645,
        "Question": "To quickly grid-enable a method on a bean using GridGain.",
        "Options": [
            "a) @Gridify",
            "b) @Grid",
            "c) @GridGain",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use GridGain @Gridify annotation along with some Spring AOP configuration to let GridGain know that it can parallelize the execution of the method across the grid."
    },
    {
        "id": 646,
        "Question": "GridGain provides:-",
        "Options": [
            "a) load balancing",
            "b) fault tolerance",
            "c) routing",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: GridGain provides load balancing as well as fault tolerance and routing out of the box, which you get for free by adding this annotation. "
    },
    {
        "id": 647,
        "Question": "To build a parallelized solution for a problem that’s intrinsically better-suited to parallelization or that, for want of resources, needs to be chunked.",
        "Options": [
            "a) map",
            "b) reduce",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Use map/reduce to approach the problem concurrently. "
    },
    {
        "id": 648,
        "Question": "GridGain works with a GridTask, which specifies how to handle the main unit of work of the interface type:-",
        "Options": [
            "a) Grid",
            "b) GridGain",
            "c) GridJob",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Underneath the hood, GridGain works with a GridTask, which specifies how to handle the main unit of work of the interface type GridJob. "
    },
    {
        "id": 649,
        "Question": "GridGain lets you start up nodes using the startup script in the:-",
        "Options": [
            "a) etc",
            "b) opt",
            "c) bin",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The parameters, as passed to the method with the annotation, are passed to: split(int i, final GridifyArgument gridifyArgument), which is used to dole out GridJob instances."
    },
    {
        "id": 650,
        "Question": "To hoist a grid node into existence.",
        "Options": [
            "a) GridLoader",
            "b) GridLoad",
            "c) Grid",
            "d) GridGain"
        ],
        "Answer": "Answer: a\nExplanation: The parameters, as passed to the method with the annotation, are passed to: split(int i, final GridifyArgument gridifyArgument), which is used to dole out GridJob instances."
    },
    {
        "id": 651,
        "Question": "When you use the script that comes with the distribution is the class:-",
        "Options": [
            "a) GridCommandLine",
            "b) GridCommandLineLoader",
            "c) GridCommand",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: GridGain lets you start up nodes using the startup script in the bin directory of the distribution.  "
    },
    {
        "id": 652,
        "Question": "A GridLoader instance is responsible for many things such as:-",
        "Options": [
            "a) GridFactory.start",
            "b) GridFactory.stop",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The GridLoader’s job is to hoist a grid node into existence.   "
    },
    {
        "id": 653,
        "Question": "GridFactory.start can take as its first parameter a:-",
        "Options": [
            "a) GridConfiguration object",
            "b) Spring application context",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The one that gets started when you use the script that comes with the distribution is the class GridCommandLineLoader."
    },
    {
        "id": 654,
        "Question": "The file which enables you to tell GridGain about which GridTask classes are deployed:-",
        "Options": [
            "a) gridgain.xml",
            "b) gridgain.html",
            "c) grid.xml",
            "d) gridify.xml"
        ],
        "Answer": "Answer: c\nExplanation: A GridLoader instance is responsible for many things, not the least of which is correctly calling GridFactory.start and GridFactory.stop."
    },
    {
        "id": 655,
        "Question": "Instances of the ApplicationContext can be injected into the various GridGain class instances (GridTask, GridJob, and so forth) using GridGain:-",
        "Options": [
            "a) @Grid",
            "b) @GridGain",
            "c) @Gridify",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: This GridConfiguration object is what tells GridGain what is unique about a given node and the grid’s topology. By default, it uses $GRIDGAIN HOME/config/default-spring.xml, which, in turn, does things such as load a Grid object and configure user parameters about a specific node."
    },
    {
        "id": 656,
        "Question": "This is the default implementation. It is used when you run gridgain.sh or gridgain.bat.",
        "Options": [
            "a) org.gridgain.grid.loaders.cmdline.GridCommandLineLoader",
            "b) org.gridgain.grid.loaders.servlet.GridServletLoader",
            "c) org.gridgain.grid.loaders.jboss.GridJbossLoader",
            "d) org.gridgain.grid.loaders.weblogic.GridWeblogicStartup"
        ],
        "Answer": "Answer: a\nExplanation: gridgain.xml file, which is optional, enables you to tell GridGain about which GridTask classes are deployed. "
    },
    {
        "id": 657,
        "Question": "This is likely the second most useful implementation. It provides a servlet that bootstraps the GridGain instance inside any web container as a servlet.",
        "Options": [
            "a) org.gridgain.grid.loaders.cmdline.GridCommandLineLoader",
            "b) org.gridgain.grid.loaders.servlet.GridServletLoader",
            "c) org.gridgain.grid.loaders.jboss.GridJbossLoader",
            "d) org.gridgain.grid.loaders.weblogic.GridWeblogicStartup"
        ],
        "Answer": "Answer: d\nExplanation: Instances of the ApplicationContext can be injected into the various GridGain class instances (GridTask, GridJob, and so forth) using GridGain @GridSpringApplicationContextResource annotation. "
    },
    {
        "id": 658,
        "Question": "A workflow engine lets you model the process in a higher-level form:-",
        "Options": [
            "a) XML",
            "b) Use Case",
            "c) UML",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A workflow system also typically models which agents in the system do what work, providing work lists for different agents in the system."
    },
    {
        "id": 659,
        "Question": "A language that, when deployed to a BPEL container, describes the execution of a process.",
        "Options": [
            "a) WS-BPEL (BPEL 2.0)",
            "b) WS-BPEL (BPEL)",
            "c) WS-BPEL for People (BPEL4People)",
            "d) Business Process Modeling Notation (BPMN)"
        ],
        "Answer": "Answer: c\nExplanation: A workflow engine lets you model the process in a higher-level form, roughly corresponding in code to what a UML activity diagram can describe. "
    },
    {
        "id": 660,
        "Question": "The main feature common to traditional workflow systems is the ability to support work lists for actors in a process.",
        "Options": [
            "a) WS-BPEL (BPEL 2.0)",
            "b) WS-BPEL (BPEL)",
            "c) WS-BPEL for People (BPEL4People)",
            "d) Business Process Modeling Notation (BPMN)"
        ],
        "Answer": "Answer: b\nExplanation: It interfaces with the outside world via the invocation of external web services. This language describes the runtime behavior of a process."
    },
    {
        "id": 661,
        "Question": "This provides a set of diagramming notations that describe a business process. This notation is akin to UML activity diagram.",
        "Options": [
            "a) WS-BPEL (BPEL 2.0)",
            "b) WS-BPEL (BPEL)",
            "c) WS-BPEL for People (BPEL4People)",
            "d) Business Process Modeling Notation (BPMN)"
        ],
        "Answer": "Answer: a\nExplanation: BPEL had no such support, as it didn’t support human tasks (that is, wait states for people). This specification addresses that exact shortcoming."
    },
    {
        "id": 662,
        "Question": "A way of letting your process rest in a known condition indefinitely.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Subprocess"
        ],
        "Answer": "Answer: d\nExplanation: The notation is sometimes ambiguous, however, and one of the formidable challenges facing BPM vendors is creating a drawing tool that can take a round-trip to BPEL and back, providing seamless authoring."
    },
    {
        "id": 663,
        "Question": "A pause in the action that can only move forward when a known actor or agent in the system moves it forward.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Subprocess"
        ],
        "Answer": "Answer: a\nExplanation: “State” can mean many things, but simply, it’s a pause or window in the action."
    },
    {
        "id": 664,
        "Question": "An aggregation of states, activities, and other types of constructs that serializes them.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Subprocess"
        ],
        "Answer": "Answer: b\nExplanation: An activity is a pause in the action that can only move forward when a known actor or agent in the system moves it forward."
    },
    {
        "id": 665,
        "Question": "A concurrent execution of multiple threads of execution at the same time, originating from a common thread.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Fork or concurrence or split"
        ],
        "Answer": "Answer: c\nExplanation: A sequence is simply an aggregation of states, activities, and other types of constructs that serializes them. "
    },
    {
        "id": 666,
        "Question": "Each department may have its own task list to complete in order to achieve the goals of the overarching process.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Subprocess",
            "d) Fork or concurrence or split"
        ],
        "Answer": "Answer: d\nExplanation: Some parts of a business process are inherently sequential, and some are readily concurrent. "
    },
    {
        "id": 667,
        "Question": "JBPM supports databases such as:-",
        "Options": [
            "a) Oracle",
            "b) SQL Server",
            "c) MySql",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: These subtasks (basically a separate process unto their own) may be modeled as a subprocess."
    },
    {
        "id": 668,
        "Question": "To make use of jBPM from within a Spring application context.",
        "Options": [
            "a) org.jbpm.pvm.internal.cfg.SpringConfiguration",
            "b) org.jbpm.pvm.internal.cfg.Spring",
            "c) org.jbpm.pvm.internal.cfg.*",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Earlier versions of Spring shipped with a custom bean for use with Spring (org.jbpm.pvm.internal.cfg.SpringConfiguration). "
    },
    {
        "id": 669,
        "Question": "To use jBPM as a stand-alone process server:-",
        "Options": [
            "a) Javax",
            "b) JBoss",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: There are many ways to use jBPM. One approach is to use it as a stand-alone process server, perhaps deployed using JBoss. "
    },
    {
        "id": 670,
        "Question": "jBPM is, fundamentally, a runtime that stores its state and jobs in a database. It uses:-",
        "Options": [
            "a) Hibernate",
            "b) Spring",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: As it’s written using Hibernate, it’s not too difficult to get it working on JBoss EJB environment."
    },
    {
        "id": 671,
        "Question": "To have an annotated class be registered as a Hibernate entity, it needs to be registered with the:-",
        "Options": [
            "a) AnnotationSessionFactory",
            "b) AnnotationSessionFactoryBean",
            "c) AnnotationSession",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: So, you might use jBPM as a service."
    },
    {
        "id": 672,
        "Question": "Because our jBPM configuration uses Hibernate, we have to configure the :-",
        "Options": [
            "a) AnnotatedSessionFactory",
            "b) AnnotatedSessionFactoryBean",
            "c) None of the mentioned",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It uses Hibernate as its persistence mechanism (though it may eventually move to a strict JPA–based model)."
    },
    {
        "id": 673,
        "Question": "The next bean—the dataSource—is configured entirely at your discretion. The properties are set using properties in the properties file :-",
        "Options": [
            "a) jbpm4.xml",
            "b) jbpm.properties",
            "c) jbpm4.properties",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The annotatedClasses property expects a list of class names."
    },
    {
        "id": 674,
        "Question": "jBPM will expose beans using the:-",
        "Options": [
            "a) jBPM expression language",
            "b) jBoss",
            "c) Spring expression language",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: jBPM will expose beans using the jBPM expression language, and you can then just reference them by name."
    },
    {
        "id": 675,
        "Question": "3. We override the List bean (with id annotatedHibernateClasses) that we created for the last recipe (jbpm4 context.xml) to provide the session factory with a collection of annotated entities which is here as:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"sy0\">&lt;?</span>xml version<span class=\"sy0\">=</span><span class=\"st0\">\"1.0\"</span> encoding<span class=\"sy0\">=</span><span class=\"st0\">\"UTF-8\"</span><span class=\"sy0\">?&gt;</span>\n\t<span class=\"sy0\">&lt;</span>beans xmlns<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.springframework.org/schema/beans\"</span>\n\txmlns<span class=\"sy0\">:</span>tx<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.springframework.org/schema/tx\"</span> \n\txmlns<span class=\"sy0\">:</span>p<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.springframework.org/schema/p\"</span>\n\txmlns<span class=\"sy0\">:</span>util<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.springframework.org/schema/util\"</span> \n\txmlns<span class=\"sy0\">:</span>xsi<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n\txmlns<span class=\"sy0\">:</span>aop<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.springframework.org/schema/aop\"</span>\n\txmlns<span class=\"sy0\">:</span>context<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.springframework.org/schema/context\"</span>\n\txsi<span class=\"sy0\">:</span>schemaLocation<span class=\"sy0\">=</span><span class=\"st0\">\"\n\thttp://www.springframework.org/schema/beans\n\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n\thttp://www.springframework.org/schema/context\n\thttp://www.springframework.org/schema/context/spring-context-3.0.xsd\n\thttp://www.springframework.org/schema/util\n\thttp://www.springframework.org/schema/util/spring-util-3.0.xsd\n\thttp://www.springframework.org/schema/aop\n\thttp://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n\thttp://www.springframework.org/schema/tx\n\thttp://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n\t\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span><span class=\"kw1\">import</span> resource<span class=\"sy0\">=</span><span class=\"st0\">\"jbpm4-context.xml\"</span><span class=\"sy0\">/&gt;</span>\n\t<span class=\"sy0\">&lt;</span>context<span class=\"sy0\">:</span>annotation<span class=\"sy0\">-</span>config<span class=\"sy0\">/&gt;</span>\n\t<span class=\"sy0\">&lt;</span>tx<span class=\"sy0\">:</span>advice id<span class=\"sy0\">=</span><span class=\"st0\">\"txAdvice\"</span> transaction<span class=\"sy0\">-</span>manager<span class=\"sy0\">=</span><span class=\"st0\">\"transactionManager\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>tx<span class=\"sy0\">:</span>attributes<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>tx<span class=\"sy0\">:</span>method propagation<span class=\"sy0\">=</span><span class=\"st0\">\"REQUIRED\"</span> name<span class=\"sy0\">=</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">/&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>tx<span class=\"sy0\">:</span>attributes<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>tx<span class=\"sy0\">:</span>advice<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>aop<span class=\"sy0\">:</span>config<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>aop<span class=\"sy0\">:</span>advisor advice<span class=\"sy0\">-</span>ref<span class=\"sy0\">=</span><span class=\"st0\">\"txAdvice\"</span> pointcut<span class=\"sy0\">=</span><span class=\"st0\">\"execution(* \n\tcom.apress.springrecipes..jbpm4.*.*(..))\"</span><span class=\"sy0\">/&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>aop<span class=\"sy0\">:</span>config<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>util<span class=\"sy0\">:</span>list id<span class=\"sy0\">=</span><span class=\"st0\">\"annotatedHibernateClasses\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>value<span class=\"sy0\">&gt;</span>com.<span class=\"me1\">apress</span>.<span class=\"me1\">springrecipes</span>.<span class=\"me1\">jbpm</span>.<span class=\"me1\">jbpm4</span>.<span class=\"me1\">customers</span>.<span class=\"me1\">Customer</span><span class=\"sy0\">&lt;/</span>value<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>util<span class=\"sy0\">:</span>list<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>bean id<span class=\"sy0\">=</span><span class=\"st0\">\"customerService\"</span> <span class=\"kw1\">class</span><span class=\"sy0\">=</span><span class=\"st0\">\"com.apress.springrecipes.jbpm.jbpm4.customers.\n\tCustomerServiceImpl\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>property name<span class=\"sy0\">=</span><span class=\"st0\">\"processDefinitions\"</span><span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>list<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;</span>value<span class=\"sy0\">&gt;/</span>process<span class=\"sy0\">-</span>definitions<span class=\"sy0\">/</span>RegisterCustomer.<span class=\"me1\">jpdl</span>.<span class=\"me1\">xml</span><span class=\"sy0\">&lt;/</span>value<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>list<span class=\"sy0\">&gt;</span>\n\t<span class=\"sy0\">&lt;/</span>property<span class=\"sy0\">&gt;</span>\n        <span class=\"sy0\">&lt;/</span>bean<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;/</span>beans<span class=\"sy0\">&gt;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) HibernateCustom",
            "b) Customer",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Indeed, because you’ve decomposed your process into a series of isolated steps, each of which contributes to the larger goal while remaining independently useful, you get the best of both worlds:\nstateful processes and stateless scalability."
    },
    {
        "id": 676,
        "Question": "The business process file’s name needs to end in :-",
        "Options": [
            "a) jpdl",
            "b) xml",
            "c) jpdl.xml",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: This bean leverages Hibernate (through the HibernateTemplate instance) to handle persistence, and it leverages jBPM (through the SpringConfiguration instance) to handle BPM. "
    },
    {
        "id": 677,
        "Question": "At the top, we’ve injected some dependencies:",
        "Options": [
            "a) springConfiguration",
            "b) repositoryService",
            "c) executionService",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The bean handles as part of its duties in its post-initialization phase."
    },
    {
        "id": 678,
        "Question": "7. The class(CustomerServiceImpl) provides a few salient methods:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">package</span> <span class=\"co2\">com.apress.springrecipes.jbpm.jbpm4.customers</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> CustomerService <span class=\"br0\">{</span>\n<span class=\"kw4\">void</span> sendWelcomeEmail<span class=\"br0\">(</span><span class=\"kw3\">Long</span> customerId<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw4\">void</span> deauthorizeCustomer<span class=\"br0\">(</span><span class=\"kw3\">Long</span> customerId<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw4\">void</span> authorizeCustomer<span class=\"br0\">(</span><span class=\"kw3\">Long</span> customerId<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nCustomer getCustomerById<span class=\"br0\">(</span><span class=\"kw3\">Long</span> customerId<span class=\"br0\">)</span><span class=\"sy0\">;</span>\nCustomer createCustomer<span class=\"br0\">(</span><span class=\"kw3\">String</span> email, <span class=\"kw3\">String</span> password, <span class=\"kw3\">String</span> firstName, \n<span class=\"kw3\">String</span> lastName<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"kw4\">void</span> sendCustomerVerificationEmail<span class=\"br0\">(</span><span class=\"kw3\">Long</span> customerId<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) void setupProcessDefinitions()",
            "b) Customer createCustomer(String email, String passphrase, String firstName, String lastName)",
            "c) void sendCustomerVerificationEmail(Long customerId)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The business process file’s name needs to end in jpdl.xml; otherwise, jBPM won’t deploy it. "
    },
    {
        "id": 679,
        "Question": "12.Inside the createCustomer method, we use jBPM to start the business process to track the Customer. This is done with the :-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"sy0\">&lt;?</span>xml version<span class=\"sy0\">=</span><span class=\"st0\">\"1.0\"</span> encoding<span class=\"sy0\">=</span><span class=\"st0\">\"UTF-8\"</span><span class=\"sy0\">?&gt;</span>\n<span class=\"sy0\">&lt;</span>process name<span class=\"sy0\">=</span><span class=\"st0\">\"RegisterCustomer\"</span> xmlns<span class=\"sy0\">=</span><span class=\"st0\">\"http://jbpm.org/4.0/jpdl\"</span><span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>start<span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>transition to<span class=\"sy0\">=</span><span class=\"st0\">\"send-verification-email\"</span> <span class=\"sy0\">/&gt;</span>\n          <span class=\"sy0\">&lt;/</span>start<span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>java name<span class=\"sy0\">=</span><span class=\"st0\">\"send-verification-email\"</span> expr<span class=\"sy0\">=</span><span class=\"st0\">\"#{customerService}\"</span>\n          method<span class=\"sy0\">=</span><span class=\"st0\">\"sendCustomerVerificationEmail\"</span><span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>arg<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>object expr<span class=\"sy0\">=</span><span class=\"st0\">\"#{customerId}\"</span> <span class=\"sy0\">/&gt;</span> <span class=\"sy0\">&lt;/</span>arg<span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>transition to<span class=\"sy0\">=</span><span class=\"st0\">\"confirm-receipt-of-verification-email\"</span> <span class=\"sy0\">/&gt;</span>\n          <span class=\"sy0\">&lt;/</span>java<span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>state name<span class=\"sy0\">=</span><span class=\"st0\">\"confirm-receipt-of-verification-email\"</span><span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>transition to<span class=\"sy0\">=</span><span class=\"st0\">\"send-welcome-email\"</span> <span class=\"sy0\">/&gt;</span>\n          <span class=\"sy0\">&lt;/</span>state<span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>java name<span class=\"sy0\">=</span><span class=\"st0\">\"send-welcome-email\"</span>\n          expr<span class=\"sy0\">=</span><span class=\"st0\">\"#{customerService}\"</span> method<span class=\"sy0\">=</span><span class=\"st0\">\"sendWelcomeEmail\"</span><span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;</span>arg<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>object expr<span class=\"sy0\">=</span><span class=\"st0\">\"#{customerId}\"</span> <span class=\"sy0\">/&gt;</span> <span class=\"sy0\">&lt;/</span>arg<span class=\"sy0\">&gt;</span>\n          <span class=\"sy0\">&lt;/</span>java<span class=\"sy0\">&gt;</span>\n<span class=\"sy0\">&lt;/</span>process<span class=\"sy0\">&gt;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) startProcessInstanceByKey",
            "b) startProcessInstance",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: At the top, we’ve injected three dependencies:\nspringConfiguration (which doesn’t get used, though its configuration is worth noting because you may use it to access other services), repositoryService, and executionService. "
    },
    {
        "id": 680,
        "Question": "Once in the java element named send-verification-email, jBPM will invoke the method:-",
        "Options": [
            "a) sendCustomerVerificationEmail",
            "b) sendCustomerVerification",
            "c) veifyCustomerVerificationEmail",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The class provides a few\nsalient methods (some of which are required by its interface, CustomerService):\n• void setupProcessDefinitions()\n• Customer createCustomer(String email, String passphrase, String firstName,\n   String lastName)\n• void sendCustomerVerificationEmail(Long customerId)\n• void authorizeCustomer(Long customerId)\n"
    },
    {
        "id": 681,
        "Question": "Inside authorizeCustomer, the service queries the server for the any processes waiting at the:-",
        "Options": [
            "a) confirm-receipt-of-verification",
            "b) confirm-receipt",
            "c) confirm-receipt-of-verification-email",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It iterates through the processDefinitions collection and deploys the resource whose path it is given. "
    },
    {
        "id": 682,
        "Question": "OSGi—which was formerly known as the:-",
        "Options": [
            "a) Open Services Gateway initiative",
            "b) Open Source Gateway initiative",
            "c) Open Services Gateway initialisation",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: OSGi—which was formerly known as the Open Services Gateway initiative, though the name’s obsolete now—has its roots in the embedded space, where dynamic service provisioning is far more important than it is in the gridiron world of enterprise applications. "
    },
    {
        "id": 683,
        "Question": "User component models are:-",
        "Options": [
            "a) OSGi",
            "b) Spring",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The deployment unit for OSGi is a bundle, which is essentially a JAR with an augmented MANIFEST.MF."
    },
    {
        "id": 684,
        "Question": "“Service” doesn’t imply any:-",
        "Options": [
            "a) RPC",
            "b) inheritance",
            "c) transactional qualities",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: SpringSource dm Server supports dynamic deployment, enhanced tooling, HTTP, and native .war deployment."
    },
    {
        "id": 685,
        "Question": "Tool which dynamically interrogates classes for their imports and generates OSGi–compliant entries.",
        "Options": [
            "a) pnd",
            "b) jndi",
            "c) bnd",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: OSGi is a specification, not a framework. There are many implementations of the specification, just as there are many implementations of the Java EE specification. "
    },
    {
        "id": 686,
        "Question": "The Bundle-Activator directive describes to the OSGi environment, which class implements :-",
        "Options": [
            "a) BundleActivator",
            "b) BundleActivate",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: OSGi is not a user component model, like Spring or EJB 3. Instead, it sits below your components, providing life-cycle management for Java classes."
    },
    {
        "id": 687,
        "Question": "When the bundle begins to load and start, it calls the start method of the:-",
        "Options": [
            "a) BundleActivator",
            "b) Activator",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In OSGi, anything used by something else is a service. “Service” doesn’t imply any concrete inheritance."
    },
    {
        "id": 688,
        "Question": "To start using Spring to smooth over some of the minutiae of resource acquisition and to help build more reliable systems in an OSGi environment.",
        "Options": [
            "a) Spring DM server",
            "b) Spring Dynamic Modules",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: “Service” doesn’t imply any concrete inheritance; it doesn’t imply transactional qualities, and it doesn’t imply RPC. It’s merely a class on whose concrete, black-box functionality and interface your class relies."
    },
    {
        "id": 689,
        "Question": "You’ll split your OSGi–specific Spring configuration and your plain-vanilla Spring configuration into:-",
        "Options": [
            "a) modulename-context.xml",
            "b) modulename-osgi-context.xml",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The plug-in wraps the bnd command line tool. "
    },
    {
        "id": 690,
        "Question": "To create services and have those automatically installed in the registry.",
        "Options": [
            "a) Spring Dynamic Modules",
            "b) Spring DM Server",
            "c) Spring Tooling",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can use Spring Dynamic Modules configuration schema to export a service. The service will be made available to other beans as well as other OSGi components."
    },
    {
        "id": 691,
        "Question": "Element to export the bean as an OSGi service, classified by the interface we specify.",
        "Options": [
            "a) osgix",
            "b) osgi:service",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: We’ll use the osgi:service element to export the bean as an OSGi service, classified by the interface we specify."
    },
    {
        "id": 692,
        "Question": "The first, most direct connection to OSGi is the bean that’s created on your behalf when you export a service. This bean, an instance of:-",
        "Options": [
            "a) org.osgi.framework.ServiceRegistration",
            "b) org.osgi.framework.Service",
            "c) org.osgi.framework.ServiceRegister",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This implies that you may have timing issues to resolve in configuring your service. For this, Spring Dynamic Modules provides the depends-on attribute, which lets your bean wait for another bean."
    },
    {
        "id": 693,
        "Question": "Sometimes, you may want to limit the visibility of a service so that multiple clients each get their own instance of the bean.",
        "Options": [
            "a) time",
            "b) scope",
            "c) attr",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: You can abbreviate the syntax by using an anonymous bean.\n\n\n<osgi:service auto-export=\"all-classes\" ref=\"greeterService\">\n<osgi:interfaces>\n<value>com.apress.springrecipes.osgi.helloworld.service.GreeterService</value>\n<value>com.apress.springrecipes.osgi.helloworld.service.GreetingRecorderService</value>\n</osgi:interfaces>\n</osgi:service>\n\n\n"
    },
    {
        "id": 694,
        "Question": "Spring Dynamic Modules also supports injection and manipulation of bundles themselves. An injected bundle is of type:-",
        "Options": [
            "a) org.osgi.framework.savedBundle",
            "b) org.osgi.framework.Bundle",
            "c) org.osgi.framework.BundleInstance",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This bean, an instance of org.osgi.framework.ServiceRegistration, is in turn a delegate to the Spring bean you have defined."
    },
    {
        "id": 695,
        "Question": "When specified on a service element, allows the ascription of a rank relative to other beans with the same interface.",
        "Options": [
            "a) Ranking",
            "b) Service",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: By default, beans created in a Spring application context are global to the entire OSGi runtime, including all clients that use it."
    },
    {
        "id": 696,
        "Question": "Attribute, which, is the symbolic name of another bundle.",
        "Options": [
            "a) Fragment",
            "b) Fragment-Host",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Spring Dynamic Modules provides a clever use of the scope attribute here, allowing you to limit beans exported as services to the client, or service importer."
    },
    {
        "id": 697,
        "Question": "Support for deployment of traditional .war artifacts, enable use of some of the standard Java EE libraries, provide useful defaults for many de facto standard libraries, and provide fully integrated support for Spring Dynamic Modules.",
        "Options": [
            "a) Spring Dynamic Modules",
            "b) Spring dm Server",
            "c) Spring Tooling",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Use Spring dm Server, SpringSource’s tried and true OSGi–oriented server built on many technologies including Equinox and the Spring framework itself."
    },
    {
        "id": 698,
        "Question": "Spring Dynamic Modules was, while powerful for those already invested in an OSGi platform, not the most natural accommodations for those trying to migrate large code into the OSGi environment, SpringSource created.",
        "Options": [
            "a) Spring Dynamic Modules",
            "b) Spring dm Server",
            "c) Spring Tooling",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring Dynamic Modules provides functionality that sits on top of those implementations, providing very powerful runtime sophistication for developers looking to produce and consume OSGi services in a Spring-friendly fashion."
    },
    {
        "id": 699,
        "Question": "SpringSource dm Server many advances focus on delivering a solution, and not just a framework, for delivering:-",
        "Options": [
            "a) Spring Tooling",
            "b) Spring dm",
            "c) OSGi",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: SpringSource dm Server is a robust solution. There are several editions available. "
    },
    {
        "id": 700,
        "Question": "SpringSource dm Server works with several types of deployment formats:-",
        "Options": [
            "a) bundle",
            "b) Java EE .war",
            "c) platform archive",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: SpringSource dm Server many advances focus on delivering a solution, and not just a framework, for delivering OSGi–based enterprise applications. "
    },
    {
        "id": 701,
        "Question": "Application isolation is critical because it allows you to solve the issue of reconciliation of two services whose interfaces collide. You can use:-",
        "Options": [
            "a) .WAR",
            "b) .XML",
            "c) .PAR",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: It’s already well integrated."
    },
    {
        "id": 702,
        "Question": "To begin with SpringSource dm Server but need a way to rapidly turnaround development.",
        "Options": [
            "a) Spring Dynamic Module",
            "b) Spring Dynamic Server",
            "c) SpringSource dm Server",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Spring dm Server provides the ability to wholesale import an entire library and all packages therein to expedite the process. "
    },
    {
        "id": 703,
        "Question": "SpringSource has provided solid tooling for Eclipse, called :-",
        "Options": [
            "a) Spring Dynamic Module",
            "b) dm Server Tools",
            "c) SpringSource dm Server",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: For example, consider the application of an aspect using Spring’s AOP. This might require weaving of classes, which in the case of a pointcut that matches classes deployed across multiple bundles, would prove cumbersome. SpringSource dm Server can intervene on Spring’s behalf, propagating such changes across multiple bundles where necessary."
    },
    {
        "id": 704,
        "Question": "These tools—part of the broader SpringSource Tool Suite—are available as :-",
        "Options": [
            "a) plug-in",
            "b) stand-alone environment",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: SpringSource dm Server works with four types of deployment formats. "
    },
    {
        "id": 705,
        "Question": "Java provides a mechanism, where an object can be represented as a sequence of bytes:-",
        "Options": [
            "a) Serialization",
            "b) Compilation",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes that includes the object’s data as well as information about the object’s type and the types of data stored in the object."
    },
    {
        "id": 706,
        "Question": "Classes which are high-level streams that contain the methods for serializing and deserializing an object.",
        "Options": [
            "a) ObjectInputStream",
            "b) ObjectOutputStream",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The type information and bytes that represent the object and its data can be used to recreate the object in memory."
    },
    {
        "id": 707,
        "Question": "The ObjectOutputStream class contains methods for writing various data types.",
        "Options": [
            "a) public final void writeObject(Object x)",
            "b) public final void write(Object x)",
            "c) public final void writeToObject(Object x)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: An object can be serialized on one platform and deserialized on an entirely different platform."
    },
    {
        "id": 708,
        "Question": "The ObjectInputStream class contains methods for writing various data types.",
        "Options": [
            "a) public final Object readObject()",
            "b) public final Object read(Object x)",
            "c) public final Object readFromObject(Object x)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Classes ObjectInputStream and ObjectOutputStream are high-level streams that contain the methods for serializing and deserializing an object."
    },
    {
        "id": 709,
        "Question": "For a class to be serialized successfully:",
        "Options": [
            "a) The class must implement the java.io.Serializable interface.",
            "b) Every field in the class must be volatile.",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The ObjectOutputStream class contains many write methods for writing various data types, but one method in particular stands out:\npublic final void writeObject(Object x) throws IOException"
    },
    {
        "id": 710,
        "Question": "When serializing an object to a file, the standard convention in Java is to give the file a:",
        "Options": [
            "a) .war",
            "b) .java",
            "c) .ser",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: This method retrieves the next Object out of the stream and deserializes it. The return value is Object, so you will need to cast it to its appropriate data type."
    },
    {
        "id": 711,
        "Question": "What will be the value of transient field after deserialization:-",
        "Options": [
            "a) 0",
            "b) NULL",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The class must implement the java.io.Serializable interface.\nAll of the fields in the class must be serializable. If a field is not serializable, it must be marked transient."
    },
    {
        "id": 712,
        "Question": "To send an email using your Java Application:-",
        "Options": [
            "a) JavaMail API",
            "b) Java Activation Framework (JAF)",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: You can download latest version of JavaMail (Version 1.2) from Java’s standard website. You can download latest version of JAF (Version 1.1.1) from Java’s standard website."
    },
    {
        "id": 713,
        "Question": "If you want to send an email to multiple recipients:-",
        "Options": [
            "a) void addRecipients(Message.RecipientType type, Address[] addresses)",
            "b) void addRecipients(Message.RecipientType type)",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If you want to send an email to multiple recipients then the following methods would be used to specify multiple email IDs:\nvoid addRecipients(Message.RecipientType type, Address[] addresses) throws MessagingException."
    },
    {
        "id": 714,
        "Question": "To set content whose second argument is “text/html” to specify that the HTML content is included in the message.",
        "Options": [
            "a) setContent",
            "b) content",
            "c) setMail",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: This would be set to TO, CC or BCC. Here CC represents Carbon Copy and BCC represents Black Carbon Copy. Example Message.RecipientType.TO."
    },
    {
        "id": 715,
        "Question": "If it is required to provide user ID and Password to the email server for authentication purpose then you can set properties:",
        "Options": [
            "a) props.setProperty(“mail.user”, “myuser”)",
            "b) props.setProperty(“mail.password”, “mypwd”)",
            "c) all of the mentioned",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Addresses: This is the array of email ID. You would need to use the InternetAddress() method while specifying email IDs."
    },
    {
        "id": 716,
        "Question": "The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features:-",
        "Options": [
            "a) Multipurpose Internet Mail Extensions",
            "b) Multipurpose Internet Mail",
            "c) Multipurpose Internet Extensions",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: setContent() method to set content whose second argument is “text/html” to specify that the HTML content is included in the message."
    },
    {
        "id": 717,
        "Question": "You can implement the interface to send email notifications in case of errors.",
        "Options": [
            "a) Notify",
            "b) Error",
            "c) ErrorNotifier",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If it is required to provide user ID and Password to the email server for authentication purpose then you can set these properties as follows:\n props.setProperty(“mail.user”, “myuser”);\n props.setProperty(“mail.password”, “mypwd”);"
    },
    {
        "id": 718,
        "Question": "You send the email by making a call to:-",
        "Options": [
            "a) Transport.send()",
            "b) Transport.sendTo()",
            "c) All of the mentioned",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: To send an HTML email from your machine."
    }
]