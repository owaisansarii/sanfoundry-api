[
    {
        "id": 1,
        "Question": "Which of these best describes an array?",
        "Options": [
            "a) A data structure that shows a hierarchical behavior",
            "b) Container of objects of similar types",
            "c) Arrays are immutable once initialised",
            "d) Array is not a data structure"
        ],
        "Answer": "Answer: b\nExplanation: Array contains elements only of the same type."
    },
    {
        "id": 2,
        "Question": "How do you initialize an array in C?",
        "Options": [
            "a) int arr[3] = (1,2,3);",
            "b) int arr(3) = {1,2,3};",
            "c) int arr[3] = {1,2,3};",
            "d) int arr(3) = (1,2,3);"
        ],
        "Answer": "Answer: c\nExplanation: This is the syntax to initialize an array in C."
    },
    {
        "id": 3,
        "Question": "How do you instantiate an array in Java?",
        "Options": [
            "a) int arr[] = new int(3);",
            "b) int arr[];",
            "c) int arr[] = new int[3];",
            "d) int arr() = new int(3);"
        ],
        "Answer": "Answer: c\nExplanation: Note that int arr[]; is declaration whereas int arr[] = new int[3]; is to instantiate an array."
    },
    {
        "id": 4,
        "Question": "Which of the following is the correct way to declare a multidimensional array in Java?",
        "Options": [
            "a) int[] arr;",
            "b) int arr[[]];",
            "c) int[][]arr;",
            "d) int[[]] arr;"
        ],
        "Answer": "Answer: c\nExplanation: The syntax to declare multidimensional array in java is either int[][] arr; or int arr[][];"
    },
    {
        "id": 5,
        "Question": "5. What is the output of the following Java code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> array\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">int</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>arr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3 and 5",
            "b) 5 and 3",
            "c) 2 and 4",
            "d) 4 and 2"
        ],
        "Answer": "Answer: a\nExplanation: Array indexing starts from 0."
    },
    {
        "id": 6,
        "Question": "6. What is the output of the following Java code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> array\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">int</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>arr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 5",
            "c) ArrayIndexOutOfBoundsException",
            "d) InavlidInputException"
        ],
        "Answer": "Answer: c\nExplanation: Trying to access an element beyond the limits of an array gives ArrayIndexOutOfBoundsException."
    },
    {
        "id": 7,
        "Question": "When does the ArrayIndexOutOfBoundsException occur?",
        "Options": [
            "a) Compile-time",
            "b) Run-time",
            "c) Not an error",
            "d) Not an exception at all"
        ],
        "Answer": "Answer: b\nExplanation: ArrayIndexOutOfBoundsException is a run-time exception and the compilation is error-free."
    },
    {
        "id": 8,
        "Question": "Which of the following concepts make extensive use of arrays?",
        "Options": [
            "a) Binary trees",
            "b) Scheduling of processes",
            "c) Caching",
            "d) Spatial locality"
        ],
        "Answer": "Answer: d\nExplanation: Whenever a particular memory location is referred to, it is likely that the locations nearby are also referred, arrays are stored as contiguous blocks in memory, so if you want to access array elements, spatial locality makes it to access quickly."
    },
    {
        "id": 9,
        "Question": "What are the advantages of arrays?",
        "Options": [
            "a) Objects of mixed data types can be stored",
            "b) Elements in an array cannot be sorted",
            "c) Index of first element of an array is 1",
            "d) Easier to store elements of same data type"
        ],
        "Answer": "Answer: d\nExplanation: Arrays store elements of the same data type and present in continuous memory locations. "
    },
    {
        "id": 10,
        "Question": "What are the disadvantages of arrays?",
        "Options": [
            "a) Data structure like queue or stack cannot be implemented",
            "b) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size",
            "c) Index value of an array can be negative",
            "d) Elements are sequentially accessed"
        ],
        "Answer": "Answer: b\nExplanation: Arrays are of fixed size. If we insert elements less than the allocated size, unoccupied positions can’t be used again. Wastage will occur in memory."
    },
    {
        "id": 11,
        "Question": "Assuming int is of 4bytes, what is the size of int arr[15];?",
        "Options": [
            "a) 15",
            "b) 19",
            "c) 11",
            "d) 60"
        ],
        "Answer": "Answer: d\nExplanation: Since there are 15 int elements and each int is of 4bytes, we get 15*4 = 60bytes."
    },
    {
        "id": 12,
        "Question": "In general, the index of the first element in an array is __________",
        "Options": [
            "a) 0",
            "b) -1",
            "c) 2",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: In general, Array Indexing starts from 0. Thus, the index of the first element in an array is 0. "
    },
    {
        "id": 13,
        "Question": "Elements in an array are accessed _____________",
        "Options": [
            "a) randomly",
            "b) sequentially",
            "c) exponentially",
            "d) logarithmically"
        ],
        "Answer": "Answer: a\nExplanation: Elements in an array are accessed randomly. In Linked lists, elements are accessed sequentially."
    },
    {
        "id": 14,
        "Question": "Process of inserting an element in stack is called ____________",
        "Options": [
            "a) Create",
            "b) Push",
            "c) Evaluation",
            "d) Pop"
        ],
        "Answer": "Answer: b\nExplanation: Push operation allows users to insert elements in the stack. If the stack is filled completely and trying to perform push operation stack – overflow can happen.\n"
    },
    {
        "id": 15,
        "Question": "Process of removing an element from stack is called __________",
        "Options": [
            "a) Create",
            "b) Push",
            "c) Evaluation",
            "d) Pop"
        ],
        "Answer": "Answer: d\nExplanation: Elements in the stack are removed using pop operation. Pop operation removes the top most element in the stack i.e. last entered element.\n"
    },
    {
        "id": 16,
        "Question": "In a stack, if a user tries to remove an element from an empty stack it is called _________",
        "Options": [
            "a) Underflow",
            "b) Empty collection",
            "c) Overflow",
            "d) Garbage Collection"
        ],
        "Answer": "Answer: a\nExplanation: Underflow occurs when the user performs a pop operation on an empty stack. Overflow occurs when the stack is full and the user performs a push operation. Garbage Collection is used to recover the memory occupied by objects that are no longer used.\n"
    },
    {
        "id": 17,
        "Question": "Pushing an element into stack already having five elements and stack size of 5, then stack becomes ___________",
        "Options": [
            "a) Overflow",
            "b) Crash",
            "c) Underflow",
            "d) User flow"
        ],
        "Answer": "Answer: a\nExplanation: The stack is filled with 5 elements and pushing one more element causes a stack overflow. This results in overwriting memory, code and loss of unsaved work on the computer.\n"
    },
    {
        "id": 18,
        "Question": "Entries in a stack are “ordered”. What is the meaning of this statement?",
        "Options": [
            "a) A collection of stacks is sortable",
            "b) Stack entries may be compared with the ‘<‘ operation",
            "c) The entries are stored in a linked list",
            "d) There is a Sequential entry that is one by one"
        ],
        "Answer": "Answer: d\nExplanation: In stack data structure, elements are added one by one using push operation. Stack follows LIFO Principle i.e. Last In First Out(LIFO).\n"
    },
    {
        "id": 19,
        "Question": "Which of the following is not the application of stack?",
        "Options": [
            "a) A parentheses balancing program",
            "b) Tracking of local variables at run time",
            "c) Compiler Syntax Analyzer",
            "d) Data Transfer between two asynchronous process"
        ],
        "Answer": "Answer: d\nExplanation: Data transfer between the two asynchronous process uses the queue data structure for synchronisation. The rest are all stack applications.\n"
    },
    {
        "id": 20,
        "Question": "Consider the usual algorithm for determining whether a sequence of parentheses is balanced. The maximum number of parentheses that appear on the stack AT ANY ONE TIME when the algorithm analyzes: (()(())(()))?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4 or more"
        ],
        "Answer": "Answer: c\nExplanation: In the entire parenthesis balancing method when the incoming token is a left parenthesis it is pushed into stack. A right parenthesis makes pop operation to delete the elements in stack till we get left parenthesis as top most element. 3 elements are there in stack before right parentheses comes. Therefore, maximum number of elements in stack at run time is 3.\n"
    },
    {
        "id": 21,
        "Question": "Consider the usual algorithm for determining whether a sequence of parentheses is balanced. Suppose that you run the algorithm on a sequence that contains 2 left parentheses and 3 right parentheses (in some order). The maximum number of parentheses that appear on the stack AT ANY ONE TIME during the computation?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4 or more"
        ],
        "Answer": "Answer: b\nExplanation: In the entire parenthesis balancing method when the incoming token is a left parenthesis it is pushed into stack. A right parenthesis makes pop operation to delete the elements in stack till we get left parenthesis as top most element. 2 left parenthesis are pushed whereas one right parenthesis removes one of left parenthesis. 2 elements are there before right parenthesis which is the maximum number of elements in stack at run time.\n"
    },
    {
        "id": 22,
        "Question": "What is the value of the postfix expression 6 3 2 4 + – *?",
        "Options": [
            "a) 1",
            "b) 40",
            "c) 74",
            "d) -18"
        ],
        "Answer": "Answer: d\nExplanation: Postfix Expression is (6*(3-(2+4))) which results -18 as output."
    },
    {
        "id": 23,
        "Question": "Here is an infix expression: 4 + 3*(6*3-12). Suppose that we are using the usual stack algorithm to convert the expression from infix to postfix notation. The maximum number of symbols that will appear on the stack AT ONE TIME during the conversion of this expression?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: When we perform the conversion from infix to postfix expression +, *, (, * symbols are placed inside the stack. A maximum of 4 symbols are identified during the entire conversion.\n"
    },
    {
        "id": 24,
        "Question": "The postfix form of the expression (A+ B)*(C*D- E)*F / G is?",
        "Options": [
            "a) AB+ CD*E – FG /**",
            "b) AB + CD* E – F **G /",
            "c) AB + CD* E – *F *G /",
            "d) AB + CDE * – * F *G /"
        ],
        "Answer": "Answer: c\nExplanation: (((A+ B)*(C*D- E)*F) / G) is converted to postfix expression as\n(AB+(*(C*D- E)*F )/ G)\n(AB+CD*E-*F) / G\n(AB+CD*E-*F * G/). Thus Postfix expression is AB+CD*E-*F*G/\n"
    },
    {
        "id": 25,
        "Question": "The data structure required to check whether an expression contains a balanced parenthesis is?",
        "Options": [
            "a) Stack",
            "b) Queue",
            "c) Array",
            "d) Tree"
        ],
        "Answer": "Answer: a\nExplanation: The stack is a simple data structure in which elements are added and removed based on the LIFO principle. Open parenthesis is pushed into the stack and a closed parenthesis pops out elements till the top element of the stack is its corresponding open parenthesis. If the stack is empty, parenthesis is balanced otherwise it is unbalanced.\n"
    },
    {
        "id": 26,
        "Question": "What data structure would you mostly likely see in non recursive implementation of a recursive algorithm?",
        "Options": [
            "a) Linked List",
            "b) Stack",
            "c) Queue",
            "d) Tree"
        ],
        "Answer": "Answer: b\nExplanation: In recursive algorithms, the order in which the recursive process comes back is the reverse of the order in which it goes forward during execution. The compiler uses the stack data structure to implement recursion. In the forwarding phase, the values of local variables, parameters and the return address are pushed into the stack at each recursion level. In the backing-out phase, the stacked address is popped and used to execute the rest of the code.\n"
    },
    {
        "id": 27,
        "Question": "The process of accessing data stored in a serial access memory is similar to manipulating data on a ________",
        "Options": [
            "a) Heap",
            "b) Binary Tree",
            "c) Array",
            "d) Stack"
        ],
        "Answer": "Answer: d\nExplanation: In serial access memory data records are stored one after the other in which they are created and are accessed sequentially. In stack data structure, elements are accessed sequentially. Stack data structure resembles the serial access memory.\n"
    },
    {
        "id": 28,
        "Question": "The postfix form of A*B+C/D is?",
        "Options": [
            "a) *AB/CD+",
            "b) AB*CD/+",
            "c) A*BC+/D",
            "d) ABCD+/*"
        ],
        "Answer": "Answer: b\nExplanation: Infix expression is (A*B)+(C/D)\nAB*+(C/D)\nAB*CD/+. Thus postfix expression is AB*CD/+.\n"
    },
    {
        "id": 29,
        "Question": "Which data structure is needed to convert infix notation to postfix notation?",
        "Options": [
            "a) Branch",
            "b) Tree",
            "c) Queue",
            "d) Stack"
        ],
        "Answer": "Answer: d\nExplanation: The Stack data structure is used to convert infix expression to postfix expression. The purpose of stack is to reverse the order of the operators in the expression. It also serves as a storage structure, as no operator can be printed until both of its operands have appeared."
    },
    {
        "id": 30,
        "Question": "The prefix form of A-B/ (C * D ^ E) is?",
        "Options": [
            "a) -/*^ACBDE",
            "b) -ABCD*^DE",
            "c) -A/B*C^DE",
            "d) -A/BC*^DE"
        ],
        "Answer": "Answer: c\nExplanation: Infix Expression is (A-B)/(C*D^E)\n(-A/B)(C*D^E)\n-A/B*C^DE. Thus prefix expression is -A/B*C^DE.\n"
    },
    {
        "id": 31,
        "Question": "The prefix form of an infix expression (p + q) – (r * t) is?",
        "Options": [
            "a) + pq – *rt",
            "b) – +pqr * t",
            "c) – +pq * rt",
            "d) – + * pqrt"
        ],
        "Answer": "Answer: a\nExplanation: The function Push(S,X) pushes the value X in the stack S. Top() function gives the value which entered last. X entered into stack S at last.\n"
    },
    {
        "id": 32,
        "Question": "Which data structure is used for implementing recursion?",
        "Options": [
            "a) Queue",
            "b) Stack",
            "c) Array",
            "d) List"
        ],
        "Answer": "Answer: c\nExplanation: Given Infix Expression is ((p+q)-(r*t))\n(+pq)-(r*t)\n(-+pq)(r*t)\n-+pq*rt. Thus prefix expression is -+pq*rt.\n"
    },
    {
        "id": 33,
        "Question": "The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?",
        "Options": [
            "a) 600",
            "b) 350",
            "c) 650",
            "d) 588"
        ],
        "Answer": "Answer: b\nExplanation: The postfix expression is evaluated using stack. We will get the infix expression as\n(5*(4+6))*(4+9/3). On solving the Infix Expression, we get\n(5*(10))*(4+3)\n= 50*7\n= 350.\n"
    },
    {
        "id": 34,
        "Question": "Which of the following statement(s) about stack data structure is/are NOT correct?",
        "Options": [
            "a) Linked List are used for implementing Stacks",
            "b) Top of the Stack always contain the new node",
            "c) Stack is the FIFO data structure",
            "d) Null link is present in the last node at the bottom of the stack"
        ],
        "Answer": "Answer: a\nExplanation: The given infix expression is (A + B ⋀D)/(E – F)+G.\n(A B D ^ + ) / (E – F) +G\n(A B D ^ + E F – ) + G. ‘/’ is present in stack.\nA B D ^ + E F – / G +. Thus Postfix Expression is A B D ^ + E F – / G +.\n"
    },
    {
        "id": 35,
        "Question": "After the completion of all operation, the number of elements present in stack is?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: The Infix Expression is x + y * z + (p * q + r) * s.\n(x y z ) + (p * q + r) * s. ‘+’, ‘*’ are present in stack.\n(x y z * + p q * r) * s. ‘+’ is present in stack.\nx y z * + p q * r + s * +. Thus Postfix Expression is x y z * + p q * r + s * +.\n"
    },
    {
        "id": 36,
        "Question": "Which of the following is not an inherent application of stack?",
        "Options": [
            "a) Reversing a string",
            "b) Evaluation of postfix expression",
            "c) Implementation of recursion",
            "d) Job scheduling"
        ],
        "Answer": "Answer: c\nExplanation: Stack follows LIFO.\n"
    },
    {
        "id": 37,
        "Question": "The type of expression in which operator succeeds its operands is?",
        "Options": [
            "a) Infix Expression",
            "b) Prefix Expression",
            "c) Postfix Expression",
            "d) Both Prefix and Postfix Expressions"
        ],
        "Answer": "Answer: a\nExplanation: Number of elements present in stack is equal to the difference between number of push operations and number of pop operations. Number of elements is 5-4=1.\n"
    },
    {
        "id": 38,
        "Question": "Assume that the operators +,-, X are left associative and ^ is right associative. The order of precedence (from highest to lowest) is ^, X, +, -. The postfix expression for the infix expression a + b X c – d ^ e ^ f is?",
        "Options": [
            "a) abc X+ def ^^ –",
            "b) abc X+ de^f^ –",
            "c) ab+c Xd – e ^f^",
            "d) -+aXbc^ ^def"
        ],
        "Answer": "Answer: d\nExplanation: Job Scheduling is not performed using stacks.\n"
    },
    {
        "id": 39,
        "Question": "If the elements “A”, “B”, “C” and “D” are placed in a stack and are deleted one at a time, what is the order of removal?",
        "Options": [
            "a) ABCD",
            "b) DCBA",
            "c) DCAB",
            "d) ABDC"
        ],
        "Answer": "Answer: c\nExplanation: The expression in which operator succeeds its operands is called postfix expression. The expression in which operator precedes the operands is called prefix expression. If an operator is present between two operands, then it is called infix expressions.\n"
    },
    {
        "id": 40,
        "Question": "A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as _____________",
        "Options": [
            "a) Queue",
            "b) Stack",
            "c) Tree",
            "d) Linked list"
        ],
        "Answer": "Answer: a\nExplanation: Linear list of elements in which deletion is done at front side and insertion at rear side is called Queue. In stack we will delete the last entered element first.\n"
    },
    {
        "id": 41,
        "Question": "The data structure required for Breadth First Traversal on a graph is?",
        "Options": [
            "a) Stack",
            "b) Array",
            "c) Queue",
            "d) Tree"
        ],
        "Answer": "Answer: c\nExplanation: In Breadth First Search Traversal, BFS, starting vertex is first taken and adjacent vertices which are unvisited are also taken. Again, the first vertex which was added as an unvisited adjacent vertex list will be considered to add further unvisited vertices of the graph. To get the first unvisited vertex we need to follows First In First Out principle. Queue uses FIFO principle.\n"
    },
    {
        "id": 42,
        "Question": "A queue follows __________",
        "Options": [
            "a) FIFO (First In First Out) principle",
            "b) LIFO (Last In First Out) principle",
            "c) Ordered array",
            "d) Linear tree"
        ],
        "Answer": "Answer: a\nExplanation: Element first added in queue will be deleted first which is FIFO principle.\n"
    },
    {
        "id": 43,
        "Question": "Circular Queue is also known as ________",
        "Options": [
            "a) Ring Buffer",
            "b) Square Buffer",
            "c) Rectangle Buffer",
            "d) Curve Buffer"
        ],
        "Answer": "Answer: a\nExplanation: Circular Queue is also called as Ring Buffer. Circular Queue is a linear data structure in which last position is connected back to the first position to make a circle. It forms a ring structure."
    },
    {
        "id": 44,
        "Question": "If the elements “A”, “B”, “C” and “D” are placed in a queue and are deleted one at a time, in what order will they be removed?",
        "Options": [
            "a) ABCD",
            "b) DCBA",
            "c) DCAB",
            "d) ABDC"
        ],
        "Answer": "Answer: a\nExplanation: Queue follows FIFO approach. i.e. First in First Out Approach. So, the order of removal elements are ABCD.\n"
    },
    {
        "id": 45,
        "Question": "A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?",
        "Options": [
            "a) Queue",
            "b) Circular queue",
            "c) Dequeue",
            "d) Priority queue"
        ],
        "Answer": "Answer: c\nExplanation: In dequeuer, we can insert or delete elements from both the ends. In queue, we will follow first in first out principle for insertion and deletion of elements. Element with least priority will be deleted in a priority queue.\n"
    },
    {
        "id": 46,
        "Question": "A normal queue, if implemented using an array of size MAX_SIZE, gets full when?",
        "Options": [
            "a) Rear = MAX_SIZE – 1",
            "b) Front = (rear + 1)mod MAX_SIZE",
            "c) Front = rear + 1",
            "d) Rear = front"
        ],
        "Answer": "Answer: a\nExplanation: When Rear = MAX_SIZE – 1, there will be no space left for the elements to be added in queue. Thus queue becomes full.\n"
    },
    {
        "id": 47,
        "Question": "Queues serve major role in ______________",
        "Options": [
            "a) Simulation of recursion",
            "b) Simulation of arbitrary linked list",
            "c) Simulation of limited resource allocation",
            "d) Simulation of heap sort"
        ],
        "Answer": "Answer: c\nExplanation: Simulation of recursion uses stack data structure. Simulation of arbitrary linked lists uses linked lists. Simulation of resource allocation uses queue as first entered data needs to be given first priority during resource allocation. Simulation of heap sort uses heap data structure.\n"
    },
    {
        "id": 48,
        "Question": "Which of the following is not the type of queue?",
        "Options": [
            "a) Ordinary queue",
            "b) Single ended queue",
            "c) Circular queue",
            "d) Priority queue"
        ],
        "Answer": "Answer: b\nExplanation: Queue always has two ends. So, single ended queue is not the type of queue.\n"
    },
    {
        "id": 49,
        "Question": "A linear collection of data elements where the linear node is given by means of pointer is called?",
        "Options": [
            "a) Linked list",
            "b) Node list",
            "c) Primitive list",
            "d) Unordered list"
        ],
        "Answer": "Answer: a\nExplanation: In Linked list each node has its own data and the address of next node. These nodes are linked by using pointers. Node list is an object that consists of a list of all nodes in a document with in a particular selected set of nodes.\n"
    },
    {
        "id": 50,
        "Question": "2. Consider an implementation of unsorted singly linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">i) Insertion at the front of the linked list\nii) Insertion at the end of the linked list\niii) Deletion of the front node of the linked list\niv) Deletion of the last node of the linked list</pre></div></div></div></div></div></div>",
        "Options": [
            "a) I and II",
            "b) I and III",
            "c) I, II and III",
            "d) I, II and IV"
        ],
        "Answer": "Answer: b\nExplanation: We know the head node in the given linked list. Insertion and deletion of elements at the front of the linked list completes in O (1) time whereas for insertion and deletion at the last node requires to traverse through every node in the linked list. Suppose there are n elements in a linked list, we need to traverse through each node. Hence time complexity becomes O(n).\n"
    },
    {
        "id": 51,
        "Question": "In linked list each node contains a minimum of two fields. One field is data field to store the data second field is?",
        "Options": [
            "a) Pointer to character",
            "b) Pointer to integer",
            "c) Pointer to node",
            "d) Node"
        ],
        "Answer": "Answer: c\nExplanation: Each node in a linked list contains data and a pointer (reference) to the next node. Second field contains pointer to node.\n"
    },
    {
        "id": 52,
        "Question": "What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) θ(n)",
            "d) θ(1)"
        ],
        "Answer": "Answer: c\nExplanation: In case of a linked list having n elements, we need to travel through every node of the list to add the element at the end of the list. Thus asymptotic time complexity is θ(n).\n"
    },
    {
        "id": 53,
        "Question": "What would be the asymptotic time complexity to insert an element at the front of the linked list (head is known)?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(n2)",
            "d) O(n3)"
        ],
        "Answer": "Answer: a\nExplanation: To add an element at the front of the linked list, we will create a new node which holds the data to be added to the linked list and pointer which points to head position in the linked list. The entire thing happens within O (1) time. Thus the asymptotic time complexity is O (1).\n"
    },
    {
        "id": 54,
        "Question": "What would be the asymptotic time complexity to find an element in the linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(n2)",
            "d) O(n4)"
        ],
        "Answer": "Answer: b\nExplanation: If the required element is in the last position, we need to traverse the entire linked list. This will take O (n) time to search the element.\n"
    },
    {
        "id": 55,
        "Question": "What would be the asymptotic time complexity to insert an element at the second position in the linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(n2)",
            "d) O(n3)"
        ],
        "Answer": "Answer: a\nExplanation: A new node is created with the required element. The pointer of the new node points the node to which the head node of the linked list is also pointing. The head node pointer is changed and it points to the new node which we created earlier. The entire process completes in O (1) time. Thus the asymptotic time complexity to insert an element in the second position of the linked list is O (1).\n"
    },
    {
        "id": 56,
        "Question": "The concatenation of two lists can be performed in O(1) time. Which of the following variation of the linked list can be used?",
        "Options": [
            "a) Singly linked list",
            "b) Doubly linked list",
            "c) Circular doubly linked list",
            "d) Array implementation of list"
        ],
        "Answer": "Answer: c\nExplanation: We can easily concatenate two lists in O (1) time using singly or doubly linked list, provided that we have a pointer to the last node at least one of the lists. But in case of circular doubly linked lists, we will break the link in both the lists and hook them together. Thus circular doubly linked list concatenates two lists in O (1) time.\n"
    },
    {
        "id": 57,
        "Question": "Which of the following c code is used to create new node?",
        "Options": [
            "a) ptr = (NODE*)malloc(sizeof(NODE));",
            "b) ptr = (NODE*)malloc(NODE);",
            "c) ptr = (NODE*)malloc(sizeof(NODE*));",
            "d) ptr = (NODE)malloc(sizeof(NODE));"
        ],
        "Answer": "Answer: a\nExplanation: As it represents the right way to create a node.\n"
    },
    {
        "id": 58,
        "Question": "What kind of linked list is best to answer questions like “What is the item at position n?”",
        "Options": [
            "a) Singly linked list",
            "b) Doubly linked list",
            "c) Circular linked list",
            "d) Array implementation of linked list"
        ],
        "Answer": "Answer: d\nExplanation: Arrays provide random access to elements by providing the index value within square brackets. In the linked list, we need to traverse through each element until we reach the nth position. Time taken to access an element represented in arrays is less than the singly, doubly and circular linked lists. Thus, array implementation is used to access the item at the position n.\n"
    },
    {
        "id": 59,
        "Question": "Linked lists are not suitable for the implementation of ___________",
        "Options": [
            "a) Insertion sort",
            "b) Radix sort",
            "c) Polynomial manipulation",
            "d) Binary search"
        ],
        "Answer": "Answer: d\nExplanation: It cannot be implemented using linked lists."
    },
    {
        "id": 60,
        "Question": "Linked list is considered as an example of ___________ type of memory allocation.",
        "Options": [
            "a) Dynamic",
            "b) Static",
            "c) Compile time",
            "d) Heap"
        ],
        "Answer": "Answer: a\nExplanation: As memory is allocated at the run time.\n"
    },
    {
        "id": 61,
        "Question": "In Linked List implementation, a node carries information regarding ___________",
        "Options": [
            "a) Data",
            "b) Link",
            "c) Data and Link",
            "d) Node"
        ],
        "Answer": "Answer: c\nExplanation: A linked list is a collection of objects linked together by references from an object to another object. By convention these objects are names as nodes. Linked list consists of nodes where each node contains one or more data fields and a reference(link) to the next node.\n"
    },
    {
        "id": 62,
        "Question": "Linked list data structure offers considerable saving in _____________",
        "Options": [
            "a) Computational Time",
            "b) Space Utilization",
            "c) Space Utilization and Computational Time",
            "d) Speed Utilization"
        ],
        "Answer": "Answer: c\nExplanation: Linked lists saves both space and time.\n"
    },
    {
        "id": 63,
        "Question": "Which of the following points is/are not true about Linked List data structure when it is compared with an array?",
        "Options": [
            "a) Arrays have better cache locality that can make them better in terms of performance",
            "b) It is easy to insert and delete elements in Linked List",
            "c) Random access is not allowed in a typical implementation of Linked Lists",
            "d) Access of elements in linked list takes less time than compared to arrays"
        ],
        "Answer": "Answer: d\nExplanation: To access an element in a linked list, we need to traverse every element until we reach the desired element. This will take more time than arrays as arrays provide random access to its elements.\n"
    },
    {
        "id": 64,
        "Question": "7. What does the following function do for a given Linked List with first node as head?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw4\">void</span> fun1<span class=\"br0\">(</span>struct node<span class=\"sy0\">*</span> head<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>head <span class=\"sy0\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n    fun1<span class=\"br0\">(</span>head<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    printf<span class=\"br0\">(</span><span class=\"st0\">\"%d  \"</span>, head<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Prints all nodes of linked lists",
            "b) Prints all nodes of linked list in reverse order",
            "c) Prints alternate nodes of Linked List",
            "d) Prints alternate nodes in reverse order"
        ],
        "Answer": "Answer: b\nExplanation: fun1() prints the given Linked List in reverse manner.\nFor Linked List 1->2->3->4->5, fun1() prints 5->4->3->2->1. "
    },
    {
        "id": 65,
        "Question": "Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?",
        "Options": [
            "a) Insertion Sort",
            "b) Quick Sort",
            "c) Heap Sort",
            "d) Merge Sort"
        ],
        "Answer": "Answer: d\nExplanation: Both Merge sort and Insertion sort can be used for linked lists. The slow random-access performance of a linked list makes other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. Since worst case time complexity of Merge Sort is O(nLogn) and Insertion sort is O(n2), merge sort is preferred.\n"
    },
    {
        "id": 66,
        "Question": "What should be added in place of “/*ADD A STATEMENT HERE*/”, so that the function correctly reverses a linked list.",
        "Options": [
            "a) *head_ref = prev;",
            "b) *head_ref = current;",
            "c) *head_ref = next;",
            "d) *head_ref = NULL;"
        ],
        "Answer": "Answer: a\nExplanation: *head_ref = prev; At the end of while loop, the prev pointer points to the last node of original linked list.\nWe need to change *head_ref so that the head pointer now starts pointing to the last node.\n"
    },
    {
        "id": 67,
        "Question": "2. What is the output of following function for start pointing to first node of following linked list?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"nu0\">1</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">2</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">3</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">4</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">5</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">6</span>\n<span class=\"kw4\">void</span> fun<span class=\"br0\">(</span>struct node<span class=\"sy0\">*</span> start<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>start <span class=\"sy0\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n    printf<span class=\"br0\">(</span><span class=\"st0\">\"%d  \"</span>, start<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>start<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">!=</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>\n    fun<span class=\"br0\">(</span>start<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    printf<span class=\"br0\">(</span><span class=\"st0\">\"%d  \"</span>, start<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 4 6 6 4 1",
            "b) 1 3 5 1 3 5",
            "c) 1 2 3 5",
            "d) 1 3 5 5 3 1"
        ],
        "Answer": "Answer: d\nExplanation: fun() prints alternate nodes of the given Linked List, first from head to end, and then from end to head.\nIf Linked List has even number of nodes, then skips the last node.\n"
    },
    {
        "id": 68,
        "Question": "3. The following C function takes a simply-linked list as an input argument. It modifies the list by moving the last element to the front of the list and returns the modified list. Some part of the code is left blank. Choose the correct alternative to replace the blank line.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">typedef struct node \n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> value<span class=\"sy0\">;</span>\n    struct node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>Node<span class=\"sy0\">;</span>\n&nbsp;\nNode <span class=\"sy0\">*</span>move_to_front<span class=\"br0\">(</span>Node <span class=\"sy0\">*</span>head<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n    Node <span class=\"sy0\">*</span>p, <span class=\"sy0\">*</span>q<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>head <span class=\"sy0\">==</span> <span class=\"kw2\">NULL</span><span class=\"sy0\">:</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>head<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \n    <span class=\"kw1\">return</span> head<span class=\"sy0\">;</span>\n    q <span class=\"sy0\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy0\">;</span> p <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span>\n    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span> next <span class=\"sy0\">!=</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n        q <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span>\n        p <span class=\"sy0\">=</span> p<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n   _______________________________\n  <span class=\"kw1\">return</span> head<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) q = NULL; p->next = head; head = p;",
            "b) q->next = NULL; head = p; p->next = head;",
            "c) head = p; p->next = q; q->next = NULL;",
            "d) q->next = NULL; p->next = head; head = p;"
        ],
        "Answer": "Answer: d\nExplanation: When while loop completes its execution, node ‘p’ refers to the last node whereas the ‘q’ node refers to the node before ‘p’ in the linked list. q->next=NULL makes q as the last node. p->next=head places p as the first node. the head must be modified to ‘p’ as ‘p’ is the starting node of the list (head=p). Thus the sequence of steps are q->next=NULL, p->next=head, head=p.\n"
    },
    {
        "id": 69,
        "Question": "4. The following C function takes a single-linked list of integers as a parameter and rearranges the elements of the list. The function is called with the list containing the integers 1, 2, 3, 4, 5, 6, 7 in the given order. What will be the contents of the list after the function completes execution?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">struct node \n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> value<span class=\"sy0\">;</span>\n    struct node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n<span class=\"kw4\">void</span> rearrange<span class=\"br0\">(</span>struct node <span class=\"sy0\">*</span>list<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    struct node <span class=\"sy0\">*</span>p, <span class=\"sy0\">*</span> q<span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> temp<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>list<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>list<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span> \n      <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n    p <span class=\"sy0\">=</span> list<span class=\"sy0\">;</span>\n    q <span class=\"sy0\">=</span> list<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span>\n    <span class=\"kw1\">while</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n         temp <span class=\"sy0\">=</span> p<span class=\"sy0\">-&gt;</span>value<span class=\"sy0\">;</span>\n         p<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> q<span class=\"sy0\">-&gt;</span>value<span class=\"sy0\">;</span>\n         q<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span>\n         p <span class=\"sy0\">=</span> q<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span>\n         q <span class=\"sy0\">=</span> p<span class=\"sy0\">?</span>p<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1, 2, 3, 4, 5, 6, 7",
            "b) 2, 1, 4, 3, 6, 5, 7",
            "c) 1, 3, 2, 5, 4, 7, 6",
            "d) 2, 3, 4, 5, 6, 7, 1"
        ],
        "Answer": "Answer: b\nExplanation: The function rearrange() exchanges data of every node with its next node. It starts exchanging data from the first node itself.\n"
    },
    {
        "id": 70,
        "Question": "In the worst case, the number of comparisons needed to search a singly linked list of length n for a given element is?",
        "Options": [
            "a) log 2 n",
            "b) n⁄2",
            "c) log 2 n – 1",
            "d) n"
        ],
        "Answer": "Answer: d\nExplanation: In the worst case, the element to be searched has to be compared with all elements of the linked list.\n"
    },
    {
        "id": 71,
        "Question": "Given pointer to a node X in a singly linked list. Only one pointer is given, pointer to head node is not given, can we delete the node X from given linked list?",
        "Options": [
            "a) Possible if X is not last node",
            "b) Possible if size of linked list is even",
            "c) Possible if size of linked list is odd",
            "d) Possible if X is not first node"
        ],
        "Answer": "Answer: a\nExplanation: Following are simple steps.\n\n\n    struct node *temp  = X->next;\n    X->data  = temp->data;\n    X->next  = temp->next;\n    free(temp);\n\n\n"
    },
    {
        "id": 72,
        "Question": "You are given pointers to first and last nodes of a singly linked list, which of the following operations are dependent on the length of the linked list?",
        "Options": [
            "a) Delete the first element",
            "b) Insert a new element as a first element",
            "c) Delete the last element of the list",
            "d) Add a new element at the end of the list"
        ],
        "Answer": "Answer: c\nExplanation: Deletion of the first element of the list is done in O (1) time by deleting memory and changing the first pointer.\nInsertion of an element as a first element can be done in O (1) time. We will create a node that holds data and points to the head of the given linked list. The head pointer was changed to a newly created node.\nDeletion of the last element requires a pointer to the previous node of last, which can only be obtained by traversing the list. This requires the length of the linked list.\nAdding a new element at the end of the list can be done in O (1) by changing the pointer of the last node to the newly created node and last is changed to a newly created node.\n"
    },
    {
        "id": 73,
        "Question": "In the worst case, the number of comparisons needed to search a singly linked list of length n for a given element is?",
        "Options": [
            "a) log2 n",
            "b) n⁄2",
            "c) log2 n – 1",
            "d) n"
        ],
        "Answer": "Answer: d\nExplanation: The worst-case happens if the required element is at last or the element is absent in the list. For this, we need to compare every element in the linked list. If n elements are there, n comparisons will happen in the worst case.\n"
    },
    {
        "id": 74,
        "Question": "Which of the following is not a disadvantage to the usage of array?",
        "Options": [
            "a) Fixed size",
            "b) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size",
            "c) Insertion based on position",
            "d) Accessing elements at specified positions"
        ],
        "Answer": "Answer: d\nExplanation: Array elements can be accessed in two steps. First, multiply the size of the data type with the specified position, second, add this value to the base address. Both of these operations can be done in constant time, hence accessing elements at a given index/position is faster."
    },
    {
        "id": 75,
        "Question": "What is the time complexity of inserting at the end in dynamic arrays?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(logn)",
            "d) Either O(1) or O(n)"
        ],
        "Answer": "Answer: d\nExplanation: Depending on whether the array is full or not, the complexity in dynamic array varies. If you try to insert into an array that is not full, then the element is simply stored at the end, this takes O(1) time. If you try to insert into an array which is full, first you will have to allocate an array with double the size of the current array and then copy all the elements into it and finally insert the new element, this takes O(n) time."
    },
    {
        "id": 76,
        "Question": "What is the time complexity to count the number of elements in the linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(logn)",
            "d) O(n2)"
        ],
        "Answer": "Answer: b\nExplanation: To count the number of elements, you have to traverse through the entire list, hence complexity is O(n)."
    },
    {
        "id": 77,
        "Question": "5. What is the functionality of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> function<span class=\"br0\">(</span>Node node<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>size <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\thead <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span>\n\t<span class=\"kw1\">else</span>\n\t<span class=\"br0\">{</span>\n\t\tNode temp,cur<span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>cur <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span> <span class=\"br0\">(</span>temp <span class=\"sy0\">=</span> cur.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">;</span> cur <span class=\"sy0\">=</span> temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tcur.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\tsize<span class=\"sy0\">++;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Inserting a node at the beginning of the list",
            "b) Deleting a node at the beginning of the list",
            "c) Inserting a node at the end of the list",
            "d) Deleting a node at the end of the list"
        ],
        "Answer": "Answer: a\nExplanation: Since you have to traverse to the end of the list and delete the last node, you need two reference pointers. ‘cur’ to traverse all the way and find the last node, and ‘temp’ is a trailing pointer to ‘cur’. Once you reach the end of the list, setNext of ‘temp’ to null, ‘cur’ is not being pointed to by any node, and hence it is available for garbage collection."
    },
    {
        "id": 78,
        "Question": "What is the space complexity for deleting a linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) Either O(1) or O(n)",
            "d) O(logn)"
        ],
        "Answer": "Answer: c\nExplanation: The for loop traverses through the list and then inserts a new node as cur.setNext(node);  "
    },
    {
        "id": 79,
        "Question": "Which of these is not an application of a linked list?",
        "Options": [
            "a) To implement file systems",
            "b) For separate chaining in hash-tables",
            "c) To implement non-binary trees",
            "d) Random Access of elements"
        ],
        "Answer": "Answer: a\nExplanation: Loop through the list to get into position one behind the actual position given. temp.setNext(temp.getNext().getNext()) will delete the specified node."
    },
    {
        "id": 80,
        "Question": "11. What is the functionality of the following piece of code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">int</span> function<span class=\"br0\">(</span><span class=\"kw4\">int</span> data<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tNode temp <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span>\n\t<span class=\"kw4\">int</span> var <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>temp <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>temp.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> data<span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw1\">return</span> var<span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\tvar <span class=\"sy0\">=</span> var<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n\t\ttemp <span class=\"sy0\">=</span> temp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"kw3\">Integer</span>.<span class=\"me1\">MIN_VALUE</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Find and delete a given element in the list",
            "b) Find and return the given element in the list",
            "c) Find and return the position of the given element in the list",
            "d) Find and insert a new element in the list"
        ],
        "Answer": "Answer: a\nExplanation: ‘cur’ pointer traverses through list and increments the size variable until the end of list is reached."
    },
    {
        "id": 81,
        "Question": "Which of the following is false about a doubly linked list?",
        "Options": [
            "a) We can navigate in both the directions",
            "b) It requires more space than a singly linked list",
            "c) The insertion and deletion of a node take a bit longer",
            "d) Implementing a doubly linked list is easier than singly linked list"
        ],
        "Answer": "Answer: d\nExplanation: A doubly linked list has two pointers ‘left’ and ‘right’ which enable it to traverse in either direction. Compared to singly liked list which has only a ‘next’ pointer, doubly linked list requires extra space to store this extra pointer. Every insertion and deletion requires manipulation of two pointers, hence it takes a bit longer time. Implementing doubly linked list involves setting both left and right pointers to correct nodes and takes more time than singly linked list."
    },
    {
        "id": 82,
        "Question": "What is a memory efficient double linked list?",
        "Options": [
            "a) Each node has only one pointer to traverse the list back and forth",
            "b) The list has breakpoints for faster traversal",
            "c) An auxiliary singly linked list acts as a helper list to traverse through the doubly linked list",
            "d) A doubly linked list that uses bitwise AND operator for storing addresses"
        ],
        "Answer": "Answer: a\nExplanation: Memory efficient doubly linked list has only one pointer to traverse the list back and forth. The implementation is based on pointer difference. It uses bitwise XOR operator to store the front and rear pointer addresses. Instead of storing actual memory address, every node store the XOR address of previous and next nodes."
    },
    {
        "id": 83,
        "Question": "How do you calculate the pointer difference in a memory efficient double linked list?",
        "Options": [
            "a) head xor tail",
            "b) pointer to previous node xor pointer to next node",
            "c) pointer to previous node – pointer to next node",
            "d) pointer to next node – pointer to previous node"
        ],
        "Answer": "Answer: b\nExplanation: The pointer difference is calculated by taking XOR of pointer to previous node and pointer to the next node."
    },
    {
        "id": 84,
        "Question": "What is the worst case time complexity of inserting a node in a doubly linked list?",
        "Options": [
            "a) O(nlogn)",
            "b) O(logn)",
            "c) O(n)",
            "d) O(1)"
        ],
        "Answer": "Answer: c\nExplanation: In the worst case, the position to be inserted maybe at the end of the list, hence you have to traverse through the entire list to get to the correct position, hence O(n)."
    },
    {
        "id": 85,
        "Question": "8. Consider the following doubly linked list: head-1-2-3-4-5-tail. What will be the list after performing the given sequence of operations?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\tNode temp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Node<span class=\"br0\">(</span><span class=\"nu0\">6</span>,head,head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tNode temp1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Node<span class=\"br0\">(</span><span class=\"nu0\">0</span>,tail.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,tail<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\thead.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttemp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setPrev</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttail.<span class=\"me1\">setPrev</span><span class=\"br0\">(</span>temp1<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttemp1.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>temp1<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) head-0-1-2-3-4-5-6-tail",
            "b) head-1-2-3-4-5-6-tail",
            "c) head-6-1-2-3-4-5-0-tail",
            "d) head-0-1-2-3-4-5-tail"
        ],
        "Answer": "Answer: a\nExplanation: The new node’s previous pointer will point to head and next pointer will point to the current next of head."
    },
    {
        "id": 86,
        "Question": "9. What is the functionality of the following piece of code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">int</span> function<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tNode temp <span class=\"sy0\">=</span> tail.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttail.<span class=\"me1\">setPrev</span><span class=\"br0\">(</span>temp.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttemp.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>tail<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tsize<span class=\"sy0\">--;</span>\n\t<span class=\"kw1\">return</span> temp.<span class=\"me1\">getItem</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Return the element at the tail of the list but do not remove it",
            "b) Return the element at the tail of the list and remove it from the list",
            "c) Return the last but one element from the list but do not remove it",
            "d) Return the last but one element at the tail of the list and remove it from the list"
        ],
        "Answer": "Answer: c\nExplanation: The given sequence of operations performs addition of nodes at the head and tail of the list."
    },
    {
        "id": 87,
        "Question": "10. Consider the following doubly linked list: head-1-2-3-4-5-tail. What will be the list after performing the given sequence of operations?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\tNode temp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Node<span class=\"br0\">(</span><span class=\"nu0\">6</span>,head,head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\thead.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttemp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setPrev</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tNode temp1 <span class=\"sy0\">=</span> tail.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttail.<span class=\"me1\">setPrev</span><span class=\"br0\">(</span>temp1.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\ttemp1.<span class=\"me1\">getPrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>tail<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) head-6-1-2-3-4-5-tail",
            "b) head-6-1-2-3-4-tail",
            "c) head-1-2-3-4-5-6-tail",
            "d) head-1-2-3-4-5-tail"
        ],
        "Answer": "Answer: b\nExplanation: The previous and next pointers of the tail and the last but one element are manipulated, this suggests that the last node is being removed from the list."
    },
    {
        "id": 88,
        "Question": "What differentiates a circular linked list from a normal linked list?",
        "Options": [
            "a) You cannot have the ‘next’ pointer point to null in a circular linked list",
            "b) It is faster to traverse the circular linked list",
            "c) You may or may not have the ‘next’ pointer point to null in a circular linked list",
            "d) Head node is known in circular linked list"
        ],
        "Answer": "Answer: c\nExplanation: The ‘next’ pointer points to null only when the list is empty, otherwise it points to the head of the list. Every node in a circular linked list can be a starting point(head)."
    },
    {
        "id": 89,
        "Question": "3. What is the functionality of the following piece of code? Select the most appropriate.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> function<span class=\"br0\">(</span><span class=\"kw4\">int</span> data<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> flag <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> head <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tNode temp <span class=\"sy0\">=</span> head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>temp <span class=\"sy0\">!=</span> head<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>temp.<span class=\"me1\">getItem</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\ttemp <span class=\"sy0\">=</span> temp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tflag <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"success\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">else</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"fail\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Print success if a particular element is not found",
            "b) Print fail if a particular element is not found",
            "c) Print success if a particular element is equal to 1",
            "d) Print fail if the list is empty"
        ],
        "Answer": "Answer: a\nExplanation: If the head is null, it means that the list is empty. Otherwise, traverse the list until the head of the list is reached."
    },
    {
        "id": 90,
        "Question": "What is the time complexity of searching for an element in a circular linked list?",
        "Options": [
            "a) O(n)",
            "b) O(nlogn)",
            "c) O(1)",
            "d) O(n2)"
        ],
        "Answer": "Answer: b\nExplanation: The function prints fail if the given element is not found. Note that this option is inclusive of option “Print fail if the list is empty”, the list being empty is one of the cases covered."
    },
    {
        "id": 91,
        "Question": "Which of the following application makes use of a circular linked list?",
        "Options": [
            "a) Undo operation in a text editor",
            "b) Recursive function calls",
            "c) Allocating CPU to resources",
            "d) Implement Hash Tables"
        ],
        "Answer": "Answer: a\nExplanation: In the worst case, you have to traverse through the entire list of n elements."
    },
    {
        "id": 92,
        "Question": "7. What is the functionality of the following code? Choose the most appropriate answer.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">int</span> function<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>head <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">return</span> <span class=\"kw3\">Integer</span>.<span class=\"me1\">MIN_VALUE</span><span class=\"sy0\">;</span>\n\t<span class=\"kw4\">int</span> var<span class=\"sy0\">;</span>\n\tNode temp <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span>\n\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>temp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> head<span class=\"br0\">)</span>\n\t\ttemp <span class=\"sy0\">=</span> temp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>temp <span class=\"sy0\">==</span> head<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tvar <span class=\"sy0\">=</span> head.<span class=\"me1\">getItem</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\thead <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">return</span> var<span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\ttemp.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tvar <span class=\"sy0\">=</span> head.<span class=\"me1\">getItem</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\thead <span class=\"sy0\">=</span> head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> var<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Return data from the end of the list",
            "b) Returns the data and deletes the node at the end of the list",
            "c) Returns the data from the beginning of the list",
            "d) Returns the data and deletes the node from the beginning of the list"
        ],
        "Answer": "Answer: c\nExplanation: Generally, round robin fashion is employed to allocate CPU time to resources which makes use of the circular linked list data structure. Recursive function calls use stack data structure. Undo Operation in text editor uses doubly linked lists. Hash tables uses singly linked lists."
    },
    {
        "id": 93,
        "Question": "8. What is the functionality of the following code? Choose the most appropriate answer.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">int</span> function<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>head <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">return</span> <span class=\"kw3\">Integer</span>.<span class=\"me1\">MIN_VALUE</span><span class=\"sy0\">;</span>\n\t<span class=\"kw4\">int</span> var<span class=\"sy0\">;</span>\n\tNode temp <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span>\n\tNode cur<span class=\"sy0\">;</span>\n\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>temp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> head<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tcur <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span>\n\t\ttemp <span class=\"sy0\">=</span> temp.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>temp <span class=\"sy0\">==</span> head<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tvar <span class=\"sy0\">=</span> head.<span class=\"me1\">getItem</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\thead <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">return</span> var<span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\tvar <span class=\"sy0\">=</span> temp.<span class=\"me1\">getItem</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tcur.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>head<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> var<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Return data from the end of the list",
            "b) Returns the data and deletes the node at the end of the list",
            "c) Returns the data from the beginning of the list",
            "d) Returns the data and deletes the node from the beginning of the list"
        ],
        "Answer": "Answer: a\nExplanation: If the list is empty make the new node as ‘head’, otherwise traverse the list to the end and make its ‘next’ pointer point to the new node, set the new node’s next point to the current head and make the new node as the head."
    },
    {
        "id": 94,
        "Question": "Which of the following is false about a circular linked list?",
        "Options": [
            "a) Every node has a successor",
            "b) Time complexity of inserting a new node at the head of the list is O(1)",
            "c) Time complexity for deleting the last node is O(n)",
            "d) We can traverse the whole circular linked list by starting from any point"
        ],
        "Answer": "Answer: d\nExplanation: First traverse through the list to find the end node, then manipulate the ‘next’ pointer such that it points to the current head’s next node, return the data stored in head and make this next node as the head."
    },
    {
        "id": 95,
        "Question": "Consider a small circular linked list. How to detect the presence of cycles in this list effectively?",
        "Options": [
            "a) Keep one node as head and traverse another temp node till the end to check if its ‘next points to head",
            "b) Have fast and slow pointers with the fast pointer advancing two nodes at a time and slow pointer advancing by one node at a time",
            "c) Cannot determine, you have to pre-define if the list contains cycles",
            "d) Circular linked list itself represents a cycle. So no new cycles cannot be generated"
        ],
        "Answer": "Answer: b\nExplanation: First traverse through the list to find the end node, also have a trailing pointer to find the penultimate node, make this trailing pointer’s ‘next’ point to the  head and return the data stored in the ‘temp’ node."
    },
    {
        "id": 96,
        "Question": "Which of the following real world scenarios would you associate with a stack data structure?",
        "Options": [
            "a) piling up of chairs one above the other",
            "b) people standing in a line to be serviced at a counter",
            "c) offer services based on the priority of the customer",
            "d) tatkal Ticket Booking in IRCTC"
        ],
        "Answer": "Answer: a\nExplanation: Stack follows Last In First Out (LIFO) policy. Piling up of chairs one above the other is based on LIFO, people standing in a line is a queue and if the service is based on priority, then it can be associated with a priority queue. Tatkal Ticket Booking Follows First in First Out Policy. People who click the book now first will enter the booking page first."
    },
    {
        "id": 97,
        "Question": "2. What does the following function check for? (all necessary headers to be included and function is called from main)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#define MAX 10</span>\n&nbsp;\n<span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> stack\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> top<span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> item<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>stack<span class=\"sy0\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span>stack <span class=\"sy0\">*</span>s<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>top <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) full stack",
            "b) invalid index",
            "c) empty stack",
            "d) infinite stack"
        ],
        "Answer": "Answer: c\nExplanation: An empty stack is represented with the top-of-the-stack(‘top’ in this case) to be equal to -1."
    },
    {
        "id": 98,
        "Question": "What does ‘stack underflow’ refer to?",
        "Options": [
            "a) accessing item from an undefined stack",
            "b) adding items to a full stack",
            "c) removing items from an empty stack",
            "d) index out of bounds exception"
        ],
        "Answer": "Answer: c\nExplanation: Removing items from an empty stack is termed as stack underflow."
    },
    {
        "id": 99,
        "Question": "4. What is the output of the following program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> <span class=\"kw3\">Stack</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">protected</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> CAPACITY <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> size,top <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">protected</span> <span class=\"kw3\">Object</span> stk<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n\t<span class=\"kw1\">public</span> <span class=\"kw3\">Stack</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tstk <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw3\">Object</span><span class=\"br0\">[</span>CAPACITY<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> push<span class=\"br0\">(</span><span class=\"kw3\">Object</span> item<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>size_of_stack<span class=\"sy0\">==</span>size<span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack overflow\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\ttop<span class=\"sy0\">++;</span>\n\t\t\tstk<span class=\"br0\">[</span>top<span class=\"br0\">]</span><span class=\"sy0\">=</span>item<span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> pop<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>top<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">999</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">Object</span> ele<span class=\"sy0\">=</span>stk<span class=\"br0\">[</span>top<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t\t\ttop<span class=\"sy0\">--;</span>\n\t\t\tsize_of_stack<span class=\"sy0\">--;</span>\n\t\t\t<span class=\"kw1\">return</span> ele<span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StackDemo\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">Stack</span> myStack <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw3\">Stack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tmyStack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">Object</span> element1 <span class=\"sy0\">=</span> myStack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">Object</span> element2 <span class=\"sy0\">=</span> myStack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>element2<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) stack is full",
            "b) 20",
            "c) 0",
            "d) -999"
        ],
        "Answer": "Answer: d\nExplanation: The first call to pop() returns 10, whereas the second call to pop() would result in stack underflow and the program returns -999."
    },
    {
        "id": 100,
        "Question": "What is the time complexity of pop() operation when the stack is implemented using an array?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(logn)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: a\nExplanation: pop() accesses only one end of the structure, and hence constant time."
    },
    {
        "id": 101,
        "Question": "Which of the following array position will be occupied by a new element being pushed for a stack of size N elements(capacity of stack > N)?",
        "Options": [
            "a) S[N-1] ",
            "b) S[N] ",
            "c) S[1] ",
            "d) S[0]"
        ],
        "Answer": "Answer: b\nExplanation: Elements are pushed at the end, hence N."
    },
    {
        "id": 102,
        "Question": "What happens when you pop from an empty stack while implementing using the Stack ADT in Java?",
        "Options": [
            "a) Undefined error",
            "b) Compiler displays a warning",
            "c) EmptyStackException is thrown",
            "d) NoStackException is thrown"
        ],
        "Answer": "Answer: c\nExplanation: The Stack ADT throws an EmptyStackException if the stack is empty and a pop() operation is tried on it."
    },
    {
        "id": 103,
        "Question": "8. What is the functionality of the following piece of Java code?\nAssume: ‘a’ is a non empty array of integers, the Stack class creates an array of specified size and provides a top pointer indicating TOS(top of stack), push and pop have normal meaning.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> some_function<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">Stack</span> S<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw3\">Stack</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>a.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>a.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tS.<span class=\"me1\">push</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>a.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>S.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"output :\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>b.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) print alternate elements of array",
            "b) duplicate the given array",
            "c) parentheses matching",
            "d) reverse the array"
        ],
        "Answer": "Answer: d\nExplanation: Every element from the given array ‘a’ is pushed into the stack, and then the elements are popped out into the array ‘b’. Stack is a LIFO structure, this results in reversing the given array."
    },
    {
        "id": 104,
        "Question": "Array implementation of Stack is not dynamic, which of the following statements supports this argument?",
        "Options": [
            "a) space allocation for array is fixed and cannot be changed during run-time",
            "b) user unable to give the input for stack operations",
            "c) a runtime exception halts execution",
            "d) improper program compilation"
        ],
        "Answer": "Answer: a\nExplanation: You cannot modify the size of an array once the memory has been allocated, adding fewer elements than the array size would cause wastage of space, and adding more elements than the array size at run time would cause Stack Overflow."
    },
    {
        "id": 105,
        "Question": "Which of the following array element will return the top-of-the-stack-element for a stack of size N elements(capacity of stack > N)?",
        "Options": [
            "a) S[N-1] ",
            "b) S[N] ",
            "c) S[N-2] ",
            "d) S[N+1]"
        ],
        "Answer": "Answer: a\nExplanation: Array indexing start from 0, hence N-1 is the last index."
    },
    {
        "id": 106,
        "Question": "What is the best case time complexity of deleting a node in a Singly Linked list?",
        "Options": [
            "a) O (n)",
            "b) O (n2)",
            "c) O (nlogn)",
            "d) O (1)"
        ],
        "Answer": "Answer: d\nExplanation: Deletion of the head node in the linked list is taken as the best case. The successor of the head node is changed to head and deletes the predecessor of the newly assigned head node. This process completes in O(1) time."
    },
    {
        "id": 107,
        "Question": "Which of the following statements are not correct with respect to Singly Linked List(SLL) and Doubly Linked List(DLL)?",
        "Options": [
            "a) Complexity of Insertion and Deletion at known position is O(n) in SLL and O(1) in DLL",
            "b) SLL uses lesser memory per node than DLL",
            "c) DLL has more searching power than SLL",
            "d) Number of node fields in SLL is more than DLL"
        ],
        "Answer": "Answer: d\nExplanation: To insert and delete at known positions requires complete traversal of the list in worst case in SLL, SLL consists of an item and a node field, while DLL has an item and two node fields, hence SLL occupies lesser memory, DLL can be traversed both ways(left and right), while SLL can traverse in only one direction, hence more searching power of DLL. Node fields in SLL is 2 (data and address of next node) whereas in DLL is 3(data, address to next node, address to previous node)."
    },
    {
        "id": 108,
        "Question": "4. What does the following function do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> some_func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"kw1\">throws</span> emptyStackException\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> emptyStackException<span class=\"br0\">(</span><span class=\"st0\">\"underflow\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> first.<span class=\"me1\">getEle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) pop",
            "b) delete the top-of-the-stack element",
            "c) retrieve the top-of-the-stack element",
            "d) push operation"
        ],
        "Answer": "Answer: a\nExplanation: pop() should return the Object pointed to by the node ‘first’. The sequence of operations is, first, get the element stored at node ‘first’ using getEle(), and second, make the node point to the next node using getNext()."
    },
    {
        "id": 109,
        "Question": "5. What is the functionality of the following piece of code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>size <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"underflow\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">else</span>\n\t<span class=\"br0\">{</span>\n\t\tNode current <span class=\"sy0\">=</span> first<span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>current <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>current.<span class=\"me1\">getEle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tcurrent <span class=\"sy0\">=</span> current.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) reverse the list",
            "b) display the list",
            "c) display the list excluding top-of-the-stack-element",
            "d) reverse the list excluding top-of-the-stack-element"
        ],
        "Answer": "Answer: c\nExplanation: This code is only retrieving the top element, note that it is not equivalent to pop operation as you are not setting the ‘next’ pointer point to the next node in sequence."
    },
    {
        "id": 110,
        "Question": "What does ‘stack overflow’ refer to?",
        "Options": [
            "a) accessing item from an undefined stack",
            "b) adding items to a full stack",
            "c) removing items from an empty stack",
            "d) index out of bounds exception"
        ],
        "Answer": "Answer: b\nExplanation: An alias of the node ‘first’ is created which traverses through the list and displays the elements."
    },
    {
        "id": 111,
        "Question": "d)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> push<span class=\"br0\">(</span><span class=\"kw3\">Object</span> item<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tNode temp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Node<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tfirst <span class=\"sy0\">=</span> temp.<span class=\"me1\">getNext</span>.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tfirst.<span class=\"me1\">setItem</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tsize<span class=\"sy0\">++;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "8. Consider these functions:",
            "push() : push an element into the stack",
            "pop()  : pop the top-of-the-stack element",
            "top()  : returns the item stored in top-of-the-stack-node",
            "What will be the output after performing these sequence of operations"
        ],
        "Answer": "Answer: a\nExplanation: To push an element into the stack, first create a new node with the next pointer point to the current top-of-the-stack node, then make this node as top-of-the-stack by assigning it to ‘first’."
    },
    {
        "id": 112,
        "Question": "",
        "Options": [
            "a) 20",
            "b) 4",
            "c) stack underflow",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: 20 and 4 which were pushed are popped by the two pop() statements, the recent push() is 5, hence top() returns 5."
    },
    {
        "id": 113,
        "Question": "Which of the following data structures can be used for parentheses matching?",
        "Options": [
            "a) n-ary tree",
            "b) queue",
            "c) priority queue",
            "d) stack"
        ],
        "Answer": "Answer: d\nExplanation: For every opening brace, push it into the stack, and for every closing brace, pop it off the stack. Do not take action for any other character. In the end, if the stack is empty, then the input has balanced parentheses."
    },
    {
        "id": 114,
        "Question": "Minimum number of queues to implement stack is ___________",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 1",
            "d) 2"
        ],
        "Answer": "Answer: c\nExplanation: Use one queue and one counter to count the number of elements in the queue."
    },
    {
        "id": 115,
        "Question": "Which of the following properties is associated with a queue?",
        "Options": [
            "a) First In Last Out",
            "b) First In First Out",
            "c) Last In First Out",
            "d) Last In Last Out"
        ],
        "Answer": "Answer: b\nExplanation: Queue follows First In First Out structure."
    },
    {
        "id": 116,
        "Question": "In a circular queue, how do you increment the rear end of the queue?",
        "Options": [
            "a) rear++",
            "b) (rear+1) % CAPACITY",
            "c) (rear % CAPACITY)+1",
            "d) rear–"
        ],
        "Answer": "Answer: b\nExplanation: Ensures rear takes the values from 0 to (CAPACITY-1)."
    },
    {
        "id": 117,
        "Question": "What is the term for inserting into a full queue known as?",
        "Options": [
            "a) overflow",
            "b) underflow",
            "c) null pointer exception",
            "d) program won’t be compiled"
        ],
        "Answer": "Answer: a\nExplanation: Just as stack, inserting into a full queue is termed overflow."
    },
    {
        "id": 118,
        "Question": "What is the time complexity of enqueue operation?",
        "Options": [
            "a) O(logn)",
            "b) O(nlogn)",
            "c) O(n)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: Enqueue operation is at the rear end, it takes O(1) time to insert a new item into the queue."
    },
    {
        "id": 119,
        "Question": "5. What does the following Java code do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> function<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">999</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">else</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">Object</span> high<span class=\"sy0\">;</span>\n\t\thigh <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>front<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">return</span> high<span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Dequeue",
            "b) Enqueue",
            "c) Return the front element",
            "d) Return the last element"
        ],
        "Answer": "Answer: c\nExplanation: q[front] gives the element at the front of the queue, since we are not moving the ‘front’ to the next element,\nit is not a dequeue operation."
    },
    {
        "id": 120,
        "Question": "What is the need for a circular queue?",
        "Options": [
            "a) effective usage of memory",
            "b) easier computations",
            "c) to delete elements based on priority",
            "d) implement LIFO principle in queues"
        ],
        "Answer": "Answer: a\nExplanation: In a linear queue, dequeue operation causes the starting elements of the array to be empty, and there is no way you can use that space, while in a circular queue, you can effectively use that space. Priority queue is used to delete the elements based on their priority. Higher priority elements will be deleted first whereas lower priority elements will be deleted next. Queue data structure always follows FIFO principle."
    },
    {
        "id": 121,
        "Question": "What is the space complexity of a linear queue having n elements?",
        "Options": [
            "a) O(n)",
            "b) O(nlogn)",
            "c) O(logn)",
            "d) O(1)"
        ],
        "Answer": "Answer: a\nExplanation: Because there are n elements."
    },
    {
        "id": 122,
        "Question": "10. What is the output of the following Java code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CircularQueue\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">protected</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> CAPACITY <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> size,front,rear<span class=\"sy0\">;</span>\n\t<span class=\"kw1\">protected</span> <span class=\"kw3\">Object</span> q<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t<span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n&nbsp;\n\t<span class=\"kw1\">public</span> CircularQueue<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">this</span><span class=\"br0\">(</span>CAPACITY<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">public</span> CircularQueue <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tsize <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span>\n\t\tfront <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n\t\trear <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n\t\tq <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw3\">Object</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n&nbsp;\n\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> enqueue<span class=\"br0\">(</span><span class=\"kw3\">Object</span> item<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">==</span> size<span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Queue overflow\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tq<span class=\"br0\">[</span>rear<span class=\"br0\">]</span> <span class=\"sy0\">=</span> item<span class=\"sy0\">;</span>\n\t\t\trear <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rear<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>size<span class=\"sy0\">;</span>\n\t\t\tcount<span class=\"sy0\">++;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> dequeue<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Queue underflow\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">Object</span> ele <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>front<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t\t\tq<span class=\"br0\">[</span>front<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span>\n\t\t\tfront <span class=\"sy0\">=</span> <span class=\"br0\">(</span>front<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>size<span class=\"sy0\">;</span>\n\t\t\tcount<span class=\"sy0\">--;</span>\n\t\t\t<span class=\"kw1\">return</span> ele<span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> frontElement<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">999</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">Object</span> high<span class=\"sy0\">;</span>\n\t\t\thigh <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>front<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">return</span> high<span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> rearElement<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">999</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\">Object</span> low<span class=\"sy0\">;</span>\n\t\t\trear <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rear<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>size<span class=\"sy0\">;</span>\n\t\t\tlow <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>rear<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\t\t\trear <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rear<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>size<span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">return</span> low<span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CircularQueueDemo\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">String</span> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">Object</span> var<span class=\"sy0\">;</span>\n\t\tCircularQueue myQ <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> CircularQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tmyQ.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tmyQ.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tvar <span class=\"sy0\">=</span> myQ.<span class=\"me1\">rearElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tmyQ.<span class=\"me1\">dequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tmyQ.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tvar <span class=\"sy0\">=</span> mQ.<span class=\"me1\">frontElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>var<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>var<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3 3",
            "b) 3 6",
            "c) 6 6",
            "d) 10 6"
        ],
        "Answer": "Answer: a\nExplanation: A common technique to expand the size of array at run time is simply to double the size. Create a new array of double the previous size and copy all the elements, after copying do not forget to assign front = 0 and rear = size()-1, as these are necessary to maintain the decorum of the queue operations."
    },
    {
        "id": 123,
        "Question": "In linked list implementation of queue, if only front pointer is maintained, which of the following operation take worst case linear time?",
        "Options": [
            "a) Insertion",
            "b) Deletion",
            "c) To empty a queue",
            "d) Both Insertion and To empty a queue"
        ],
        "Answer": "Answer: d\nExplanation: Since front pointer is used for deletion, so worst time for the other two cases.\n"
    },
    {
        "id": 124,
        "Question": "In linked list implementation of a queue, where does a new element be inserted?",
        "Options": [
            "a) At the head of link list",
            "b) At the centre position in the link list",
            "c) At the tail of the link list",
            "d) At any position in the linked list"
        ],
        "Answer": "Answer: c\nExplanation: Since queue follows FIFO so new element inserted at last.\n"
    },
    {
        "id": 125,
        "Question": "In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?",
        "Options": [
            "a) Only front pointer",
            "b) Only rear pointer",
            "c) Both front and rear pointer",
            "d) No pointer will be changed"
        ],
        "Answer": "Answer: b\nExplanation: Since queue follows FIFO so new element inserted at last.\n"
    },
    {
        "id": 126,
        "Question": "In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue?",
        "Options": [
            "a) Only front pointer",
            "b) Only rear pointer",
            "c) Both front and rear pointer",
            "d) No pointer will be changed"
        ],
        "Answer": "Answer: c\nExplanation: Since its the starting of queue, so both values are changed.\n"
    },
    {
        "id": 127,
        "Question": "In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.",
        "Options": [
            "a) AVAIL",
            "b) FRONT",
            "c) REAR",
            "d) NULL"
        ],
        "Answer": "Answer: a\nExplanation: All the nodes are collected in AVAIL list.\n"
    },
    {
        "id": 128,
        "Question": "In linked list implementation of a queue, from where is the item deleted?",
        "Options": [
            "a) At the head of link list",
            "b) At the centre position in the link list",
            "c) At the tail of the link list",
            "d) Node before the tail"
        ],
        "Answer": "Answer: a\nExplanation: Since queue follows FIFO so new element deleted from first.\n"
    },
    {
        "id": 129,
        "Question": "In linked list implementation of a queue, the important condition for a queue to be empty is?",
        "Options": [
            "a) FRONT is null",
            "b) REAR is null",
            "c) LINK is empty",
            "d) FRONT==REAR-1"
        ],
        "Answer": "Answer: a\nExplanation: Because front represents the deleted nodes.\n"
    },
    {
        "id": 130,
        "Question": "The essential condition which is checked before insertion in a linked queue is?",
        "Options": [
            "a) Underflow",
            "b) Overflow",
            "c) Front value",
            "d) Rear value"
        ],
        "Answer": "Answer: b\nExplanation: To check whether there is space in the queue or not.\n"
    },
    {
        "id": 131,
        "Question": "The essential condition which is checked before deletion in a linked queue is?",
        "Options": [
            "a) Underflow",
            "b) Overflow",
            "c) Front value",
            "d) Rear value"
        ],
        "Answer": "Answer: a\nExplanation: To check whether there is element in the list or not.\n"
    },
    {
        "id": 132,
        "Question": "Which of the following is true about linked list implementation of queue?",
        "Options": [
            "a) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end",
            "b) In push operation, if new nodes are inserted at the beginning, then in pop operation, nodes must be removed from the beginning",
            "c) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from end",
            "d) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from beginning"
        ],
        "Answer": "Answer: a\nExplanation: It can be done by both the methods.\n"
    },
    {
        "id": 133,
        "Question": "With what data structure can a priority queue be implemented?",
        "Options": [
            "a) Array",
            "b) List",
            "c) Heap",
            "d) Tree"
        ],
        "Answer": "Answer: d\nExplanation: Priority queue can be implemented using an array, a list, a binary search tree or a heap, although the most efficient one being the heap."
    },
    {
        "id": 134,
        "Question": "Which of the following is not an application of priority queue?",
        "Options": [
            "a) Huffman codes",
            "b) Interrupt handling in operating system",
            "c) Undo operation in text editors",
            "d) Bayesian spam filter"
        ],
        "Answer": "Answer: c\nExplanation: Undo operation is achieved using a stack."
    },
    {
        "id": 135,
        "Question": "What is the time complexity to insert a node based on key in a priority queue?",
        "Options": [
            "a) O(nlogn)",
            "b) O(logn)",
            "c) O(n)",
            "d) O(n2)"
        ],
        "Answer": "Answer: a\nExplanation: Have two temporary pointers ‘dup’ and ‘cur’ with ‘cur’ trailing behind ‘dup’. Traverse through the list until the given key is greater than some element with a lesser key, insert the new node ‘temp’ in that position."
    },
    {
        "id": 136,
        "Question": "5. What is the functionality of the following piece of code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> insert_key<span class=\"br0\">(</span><span class=\"kw4\">int</span> key,<span class=\"kw3\">Object</span> item<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>key<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tSysterm.<span class=\"me1\">our</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"invalid\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw3\">System</span>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span>\n\t<span class=\"br0\">{</span>\n\t\tNode temp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Node<span class=\"br0\">(</span>key,item,<span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\thead.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\ttemp.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>trail<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tNode dup <span class=\"sy0\">=</span> head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\tNode cur <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>key<span class=\"sy0\">&gt;</span>dup.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>dup<span class=\"sy0\">!=</span>trail<span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"br0\">{</span>\n\t\t\t\tdup <span class=\"sy0\">=</span> cur\n\t\t\t\tcur <span class=\"sy0\">=</span> cur.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span>\n\t\t\tcur.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>dup<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\ttemp.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>cur<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\tcount<span class=\"sy0\">++;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Delete the second element in the list",
            "b) Return but not delete the second element in the list",
            "c) Delete the first element in the list",
            "d) Return but not delete the first element in the list"
        ],
        "Answer": "Answer: c\nExplanation: In the worst case, you might have to traverse the entire list."
    },
    {
        "id": 137,
        "Question": "What is not a disadvantage of priority scheduling in operating systems?",
        "Options": [
            "a) A low priority process might have to wait indefinitely for the CPU",
            "b) If the system crashes, the low priority systems may be lost permanently",
            "c) Interrupt handling",
            "d) Indefinite blocking"
        ],
        "Answer": "Answer: c\nExplanation: A pointer is made to point at the first element in the list and one more to point to the second element, pointer manipulations are done such that the first element is no longer being pointed by any other pointer, its value is returned."
    },
    {
        "id": 138,
        "Question": "Which of the following is not an advantage of a priority queue?",
        "Options": [
            "a) Easy to implement",
            "b) Processes with different priority can be efficiently handled",
            "c) Applications with differing requirements",
            "d) Easy to delete elements in any case"
        ],
        "Answer": "Answer: c\nExplanation: The lower priority process should wait until the CPU completes the processing higher priority process.  Interrupt handling is an advantage as interrupts should be given more priority than tasks at hand so that interrupt can be serviced to produce desired results."
    },
    {
        "id": 139,
        "Question": "What is the time complexity to insert a node based on position in a priority queue?",
        "Options": [
            "a) O(nlogn)",
            "b) O(logn)",
            "c) O(n)",
            "d) O(n2)"
        ],
        "Answer": "Answer: d\nExplanation: In worst case, the entire queue has to be searched for the element having the highest priority. This will take more time than usual. So deletion of elements is not an advantage."
    },
    {
        "id": 140,
        "Question": "What is a dequeue?",
        "Options": [
            "a) A queue with insert/delete defined for both front and rear ends of the queue",
            "b) A queue implemented with a doubly linked list",
            "c) A queue implemented with both singly and doubly linked lists",
            "d) A queue with insert/delete defined for front side of the queue"
        ],
        "Answer": "Answer: a\nExplanation: A dequeue or a double ended queue is a queue with insert/delete defined for both front and rear ends of the queue."
    },
    {
        "id": 141,
        "Question": "d)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> function<span class=\"br0\">(</span><span class=\"kw3\">Object</span> item<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tNode temp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Node<span class=\"br0\">(</span>item,<span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tNode cur <span class=\"sy0\">=</span> head.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\ttemp.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>cur<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tcur.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span>\n\t<span class=\"br0\">{</span>\n\t\thead.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>trail<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\ttrail.<span class=\"me1\">setNext</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\tsize<span class=\"sy0\">++;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Insert at the front end of the dequeue",
            "b) Insert at the rear end of the dequeue",
            "c) Fetch the element at the rear end of the dequeue",
            "d) Fetch the element at the front end of the dequeue"
        ],
        "Answer": "Answer: a\nExplanation: Create a new node, if the current list is empty, the ‘head’ points to this node and this new node points to ‘trail’. Otherwise, ‘head’ points to the new node and this in turn points to the current first element(head.getNext())."
    },
    {
        "id": 142,
        "Question": "What are the applications of dequeue?",
        "Options": [
            "a) A-Steal job scheduling algorithm",
            "b) Can be used as both stack and queue",
            "c) To find the maximum of all sub arrays of size k",
            "d) To avoid collision in hash tables"
        ],
        "Answer": "Answer: b\nExplanation: If the list is empty, this new node will point to ‘trail’ and will be pointed at by ‘head’. Otherwise, traverse till the end of the list and insert the new node there."
    },
    {
        "id": 143,
        "Question": "8. After performing these set of operations, what does the final list look contain?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">InsertFront<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nInsertFront<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nInsertRear<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nDeleteFront<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nInsertRear<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nInsertRear<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nDeleteRear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\nInsertRear<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\ndisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10 30 10 15",
            "b) 20 30 40 15",
            "c) 20 30 40 10",
            "d) 10 30 40 15"
        ],
        "Answer": "Answer: b\nExplanation: Have two pointers, one(temp) pointing to the first element and the other(cur) pointing to the second element. Make the ‘head’ point to the second element, this removes all reference for ‘temp’."
    },
    {
        "id": 144,
        "Question": "A Double-ended queue supports operations such as adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What are the total number of stacks required for this operation?(you can reuse the stack)",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: The addFront and removeFront operations can be performed using one stack itself as push and pop are supported (adding and removing element from top of the stack) but to perform addRear and removeRear you need to pop each element from the current stack and push it into another stack, push or pop the element as per the asked operation from this stack and in the end pop elements from this stack to the first stack."
    },
    {
        "id": 145,
        "Question": "You are asked to perform a queue operation using a stack. Assume the size of the stack is some value ‘n’ and there are ‘m’ number of variables in this stack. The time complexity of performing deQueue operation is (Using only stack operations like push and pop)(Tightly bound).",
        "Options": [
            "a) O(m)",
            "b) O(n)",
            "c) O(m*n)",
            "d) Data is insufficient"
        ],
        "Answer": "Answer: a\nExplanation: To perform deQueue operation you need to pop each element from the first stack and push it into the second stack. In this case you need to pop ‘m’ times and need to perform push operations also ‘m’ times. Then you pop the first element from this second stack (constant time) and pass all the elements to the first stack (as done in the beginning)(‘m-1’ times). Therfore the time complexity is O(m)."
    },
    {
        "id": 146,
        "Question": "Consider you have an array of some random size. You need to perform dequeue operation. You can perform it using stack operation (push and pop) or using queue operations itself (enQueue and Dequeue). The output is guaranteed to be same. Find some differences?",
        "Options": [
            "a) They will have different time complexities",
            "b) The memory used will not be different",
            "c) There are chances that output might be different",
            "d) No differences"
        ],
        "Answer": "Answer: a\nExplanation: To perform operations such as Dequeue using stack operation you need to empty all the elements from the current stack and push it into the next stack, resulting in a O(number of elements) complexity whereas the time complexity of dequeue operation itself is O(1). And there is a need of a extra stack. Therefore more memory is needed."
    },
    {
        "id": 147,
        "Question": "A double-ended queue supports operations like adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What’s the time complexity of performing addFront and addRear? (Assume ‘m’ to be the size of the stack and ‘n’ to be the number of elements)",
        "Options": [
            "a) O(m) and O(n)",
            "b) O(1) and O(n)",
            "c) O(n) and O(1)",
            "d) O(n) and O(m)"
        ],
        "Answer": "Answer: a\nExplanation: By performing push(pop()) on all elements on the current stack to the next stack you get  2 3 4 5 << top.Push(6) and perform push(pop()) you’ll get back 6 5 4 3 2 << top. You have actually performed enQueue operation using push and pop."
    },
    {
        "id": 148,
        "Question": "Why is implementation of stack operations on queues not feasible for a large dataset (Asssume the number of elements in the stack to be n)?",
        "Options": [
            "a) Because of its time complexity O(n)",
            "b) Because of its time complexity O(log(n))",
            "c) Extra memory is not required",
            "d) There are no problems"
        ],
        "Answer": "Answer: b\nExplanation: addFront is just a normal push operation. Push operation is of O(1). Whereas addRear is of O(n) as it requires two push(pop()) operations of all elements of a stack."
    },
    {
        "id": 149,
        "Question": "Consider yourself to be in a planet where the computational power of chips to be slow. You have an array of size 10.You want to perform enqueue some element into this array. But you can perform only push and pop operations .Push and pop operation both take 1 sec respectively. The total time required to perform enQueue operation is?",
        "Options": [
            "a) 20",
            "b) 40",
            "c) 42",
            "d) 43"
        ],
        "Answer": "Answer: a\nExplanation: To perform Queue operations such as enQueue and deQueue there is a need of emptying all the elements of a current stack and pushing elements into the next stack and vice versa. Therfore it has a time complexity of O(n) and the need of extra stack as well, may not be feasible for a large dataset."
    },
    {
        "id": 150,
        "Question": "You have two jars, one jar which has 10 rings and the other has none. They are placed one above the other. You want to remove the last ring in the jar. And the second jar is weak and cannot be used to store rings for a long time.",
        "Options": [
            "a) Empty the first jar by removing it one by one from the first jar and placing it into the second jar",
            "b) Empty the first jar by removing it one by one from the first jar and placing it into the second jar and empty the second jar by placing all the rings into the first jar one by one",
            "c) There exists no possible way to do this",
            "d) Break the jar and remove the last one"
        ],
        "Answer": "Answer: d\nExplanation: First you have to empty all the elements of the current stack into the temporary stack, push the required element and empty the elements of the temporary stack into the original stack. Therfore taking 10+10+1+11+11= 43 seconds."
    },
    {
        "id": 151,
        "Question": "Given only a single array of size 10 and no other memory is available. Which of the following operation is not feasible to implement (Given only push and pop operation)?",
        "Options": [
            "a) Push",
            "b) Pop",
            "c) Enqueue",
            "d) Returntop"
        ],
        "Answer": "Answer: b\nExplanation: This is similar to performing dequeue operation using push and pop only. Elements in the first jar are taken out and placed in the second jar. After removing the last element from the first jar, remove all the elements in the second jar and place them in the first jar."
    },
    {
        "id": 152,
        "Question": "Given an array of size n, let’s assume an element is ‘touched’ if and only if some operation is performed on it(for example, for performing a pop operation the top element is ‘touched’). Now you need to perform Dequeue operation. Each element in the array is touched atleast?",
        "Options": [
            "a) Once",
            "b) Twice",
            "c) Thrice",
            "d) Four times"
        ],
        "Answer": "Answer: c\nExplanation: To perform Enqueue using just push and pop operations, there is a need of another array of same size. But as there is no extra available memeory, the given operation is not feasible."
    },
    {
        "id": 153,
        "Question": "To implement a stack using queue(with only enqueue and dequeue operations), how many queues will you need?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Either the push or the pop has to be a costly operation, and the costlier operation requires two queues."
    },
    {
        "id": 154,
        "Question": "d)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">int</span> pop<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> res<span class=\"sy0\">=-</span><span class=\"nu0\">999</span>,count<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>q1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\tcount <span class=\"sy0\">=</span> q2.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>count<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n\t\t\tq2.<span class=\"me1\">offer</span><span class=\"br0\">(</span>q1.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tres <span class=\"sy0\">=</span> q1.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>q2.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\tcount <span class=\"sy0\">=</span> q1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>count<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n\t\t\tq1.<span class=\"me1\">offer</span><span class=\"br0\">(</span>q2.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\tres <span class=\"sy0\">=</span> q2.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> res<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Perform push() with push as the costlier operation",
            "b) Perform push() with pop as the costlier operation",
            "c) Perform pop() with push as the costlier operation",
            "d) Perform pop() with pop as the costlier operation"
        ],
        "Answer": "Answer: b\nExplanation: If both the queues are empty, then the stack also is empty."
    },
    {
        "id": 155,
        "Question": "Express -15 as a 6-bit signed binary number.",
        "Options": [
            "a) 001111",
            "b) 101111",
            "c) 101110",
            "d) 001110"
        ],
        "Answer": "Answer: b\nExplanation: The first 4 1s from the right represent the number 15, 2 more bits are padded to make it 6 digits and the leftmost bit is a 1 to represent that it is -15."
    },
    {
        "id": 156,
        "Question": "d)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isBalanced<span class=\"br0\">(</span><span class=\"kw3\">String</span> exp<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> exp.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tStack<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> stk <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">char</span> ch <span class=\"sy0\">=</span> exp.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span>\n                stk.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>stk.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n                        <span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"br0\">}</span>\n\t\t\tstk.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(logn)",
            "b) O(n)",
            "c) O(1)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: c\nExplanation: Here instead of adding the digits to an array, you push it into a stack and while printing, pop it from the stack."
    },
    {
        "id": 157,
        "Question": "How many stacks are required for applying evaluation of infix expression algorithm?",
        "Options": [
            "a) one",
            "b) two",
            "c) three",
            "d) four"
        ],
        "Answer": "Answer: b\nExplanation: Two stacks are required for evaluation of infix expression – one for operands and one for operators."
    },
    {
        "id": 158,
        "Question": "How many passes does the evaluation of infix expression algorithm makes through the input?",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) Four"
        ],
        "Answer": "Answer: a\nExplanation: Evaluation of infix expression algorithm is linear and makes only one pass through the input."
    },
    {
        "id": 159,
        "Question": "Identify the infix expression from the list of options given below.",
        "Options": [
            "a) a/b+(c-d)",
            "b) abc*+d+ab+cd+*ce-f-",
            "c) ab-c-",
            "d) +ab"
        ],
        "Answer": "Answer: a\nExplanation: a/b+(c-d) is an infix expression since the operators are placed in between the operands."
    },
    {
        "id": 160,
        "Question": "Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?",
        "Options": [
            "a) Operand is pushed on to the stack",
            "b) If the precedence of operator is higher, pop two operands and evaluate",
            "c) If the precedence of operator is lower, pop two operands and evaluate",
            "d) The result is pushed on to the operand stack"
        ],
        "Answer": "Answer: b\nExplanation: If the precedence of the operator is higher than the stack operator, then it is pushed on to the stack operator."
    },
    {
        "id": 161,
        "Question": "Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2",
        "Options": [
            "a) 3",
            "b) 6",
            "c) 5",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: According to precedence of operators, * is evaluated first. + and – have equal priorities. Hence, 1+6-2= 5."
    },
    {
        "id": 162,
        "Question": "Of the following choices, which operator has the lowest precedence?",
        "Options": [
            "a) ^",
            "b) +",
            "c) /",
            "d) #"
        ],
        "Answer": "Answer: a\nExplanation: During evaluation of infix expression, the operators with higher precedence are evaluated first, followed by operators with lower precedence."
    },
    {
        "id": 163,
        "Question": "Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5",
        "Options": [
            "a) 10",
            "b) 11",
            "c) 16",
            "d) 12"
        ],
        "Answer": "Answer: d\nExplanation: The operator with the lowest precedence is #, preceded by +, / and then ^."
    },
    {
        "id": 164,
        "Question": "Using the evaluation of infix expression, evaluate a^b+c  and choose the correct answer. (a=2, b=2, c=2)",
        "Options": [
            "a) 12",
            "b) 8",
            "c) 10",
            "d) 6"
        ],
        "Answer": "Answer: b\nExplanation: The algorithm holds good for infix expression with parentheses. The system does not throw error."
    },
    {
        "id": 165,
        "Question": "Evaluate the following infix expression using algorithm and choose the correct answer. a+b*c-d/e^f  where a=1, b=2, c=3, d=4, e=2, f=2.",
        "Options": [
            "a) 6",
            "b) 8",
            "c) 9",
            "d) 7"
        ],
        "Answer": "Answer: b\nExplanation: * and / have higher priority. Hence, they are evaluated first. Then, + is evaluated. Hence, 2+2=4."
    },
    {
        "id": 166,
        "Question": "How many stacks are required for evaluation of prefix expression?",
        "Options": [
            "a) one",
            "b) two",
            "c) three",
            "d) four"
        ],
        "Answer": "Answer: b\nExplanation: 2 stacks are required for evaluation of prefix expression, one for integers and one for characters."
    },
    {
        "id": 167,
        "Question": "While evaluating a prefix expression, the string is read from?",
        "Options": [
            "a) left to right",
            "b) right to left",
            "c) center to right",
            "d) center to left to right"
        ],
        "Answer": "Answer: b\nExplanation: The string is read from right to left because a prefix string has operands to its right side."
    },
    {
        "id": 168,
        "Question": "How many types of input characters are accepted by this algorithm?",
        "Options": [
            "a) one",
            "b) two",
            "c) three",
            "d) four"
        ],
        "Answer": "Answer: a\nExplanation: The associativity of ^ is right side while the rest of the operators like +,-,*,/ has its associativity to its left."
    },
    {
        "id": 169,
        "Question": "What determines the order of evaluation of a prefix expression?",
        "Options": [
            "a) precedence and associativity",
            "b) precedence only",
            "c) associativity only",
            "d) depends on the parser"
        ],
        "Answer": "Answer: c\nExplanation: Three kinds of input are accepted by this algorithm- numbers, operators and new line characters."
    },
    {
        "id": 170,
        "Options": [
            "a) 2",
            "b) 12",
            "c) 10",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: Precedence is a very important factor in determining the order of evaluation. If two operators have the same precedence, associativity comes into action."
    },
    {
        "id": 171,
        "Question": "Using the evaluation of prefix algorithm, evaluate +-9 2 7.",
        "Options": [
            "a) 10",
            "b) 4",
            "c) 17",
            "d) 14"
        ],
        "Answer": "Answer: a\nExplanation: The given prefix expression is evaluated using two stacks and the value is given by (2+2-1)*(4-2)/(5-3+1)= 2."
    },
    {
        "id": 172,
        "Question": "If -*+abcd = 11, find a, b, c, d using evaluation of prefix algorithm.",
        "Options": [
            "a) a=2, b=3, c=5, d=4",
            "b) a=1, b=2, c=5, d=4",
            "c) a=5, b=4, c=7,d=5",
            "d) a=1, b=2, c=3, d=4"
        ],
        "Answer": "Answer: b\nExplanation: The input character ‘\\n’ is accepted as a character by the evaluation of prefix expression algorithm."
    },
    {
        "id": 173,
        "Question": "10. In the given C snippet, find the statement number that has error.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co1\">//C code to push an element into a stack</span>\n<span class=\"nu0\">1</span>. <span class=\"kw4\">void</span> push<span class=\"br0\">(</span> <span class=\"kw4\">struct</span> stack <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span> \n<span class=\"nu0\">2</span>. <span class=\"br0\">{</span>\n<span class=\"nu0\">3</span>.     <span class=\"kw1\">if</span><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>top<span class=\"sy0\">==</span>MAX<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n<span class=\"nu0\">4</span>.     <span class=\"br0\">{</span>\n<span class=\"nu0\">5</span>.         <span class=\"kw3\">printf</span><span class=\"br0\">(</span>“stack overflow”<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"nu0\">6</span>.     <span class=\"br0\">}</span>\n<span class=\"nu0\">7</span>.     <span class=\"kw1\">else</span>\n<span class=\"nu0\">8</span>.     <span class=\"br0\">{</span>\n<span class=\"nu0\">9</span>.         <span class=\"me1\">s</span><span class=\"sy0\">-&gt;</span>items<span class=\"br0\">[</span><span class=\"sy0\">++</span>s<span class=\"sy0\">-&gt;</span>top<span class=\"br0\">]</span><span class=\"sy0\">=</span>x<span class=\"sy0\">;</span>\n<span class=\"nu0\">10</span>.        <span class=\"me1\">s</span><span class=\"sy0\">++;</span>\n<span class=\"nu0\">11</span>.    <span class=\"br0\">}</span>   \n<span class=\"nu0\">12</span>. <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 9",
            "c) 10",
            "d) 11"
        ],
        "Answer": "Answer: d\nExplanation: Using the evaluation of prefix algorithm, +-9 2 7 is evaluated as 9-2+7=14."
    },
    {
        "id": 174,
        "Question": "What is the other name for a postfix expression?",
        "Options": [
            "a) Normal polish Notation",
            "b) Reverse polish Notation",
            "c) Warsaw notation",
            "d) Infix notation"
        ],
        "Answer": "Answer: b\nExplanation: Reverse polish Notation is the other name for a postfix expression whereas Polish Notation, Warsaw notation are the other names for a prefix expression."
    },
    {
        "id": 175,
        "Question": "Which of the following is an example for a postfix expression?",
        "Options": [
            "a) a*b(c+d)",
            "b) abc*+de-+",
            "c) +ab",
            "d) a+b-c"
        ],
        "Answer": "Answer: b\nExplanation: abc*+de-+ is a postfix expression. +ab is a prefix expression and others are infix expressions."
    },
    {
        "id": 176,
        "Question": "What is the time complexity of evaluation of postfix expression algorithm?",
        "Options": [
            "a) O (N)",
            "b) O (N log N)",
            "c) O (N2)",
            "d) O (M log N)"
        ],
        "Answer": "Answer: b\nExplanation: Reverse Polish Notation is not the reverse of a polish notation. Though both NPN and RPN read the expression from left to right, they follow different strategies."
    },
    {
        "id": 177,
        "Question": "Which of these operators have the highest order of precedence?",
        "Options": [
            "a) ‘(‘ and ‘)’",
            "b) ‘*’ and ‘/’",
            "c) ‘~’ and ‘^’",
            "d) ‘+’ and ‘-‘"
        ],
        "Answer": "Answer: a\nExplanation: The time complexity of evaluation of infix, prefix and postfix expressions is O (N)."
    },
    {
        "id": 178,
        "Question": "Which of the following is not an application of stack?",
        "Options": [
            "a)  evaluation of postfix expression",
            "b)  conversion of infix to postfix expression",
            "c)  balancing symbols",
            "d)  line at ticket counter"
        ],
        "Answer": "Answer: a\nExplanation: In postfix expressions, the operators follow operands. In prefix expressions, the operands follow operators."
    },
    {
        "id": 179,
        "Question": "While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?",
        "Options": [
            "a) push it directly on to the stack",
            "b) pop 2 operands, evaluate them and push the result on to the stack",
            "c) pop the entire stack",
            "d) ignore the operator"
        ],
        "Answer": "Answer: c\nExplanation: The highest order of precedence is ~ and ^ followed by ‘*’ ,’ /’, ‘+’ ,’-‘ and  then braces ‘(‘ ‘)’."
    },
    {
        "id": 180,
        "Question": "Which of the following statement is incorrect?",
        "Options": [
            "a) Postfix operators use value to their right",
            "b) Postfix operators use value to their left",
            "c) Prefix operators use value to their right",
            "d) In postfix expression, operands are followed by operators"
        ],
        "Answer": "Answer: d\nExplanation: Line at ticket counter is an application of queue whereas conversion of infix to postfix expression, balancing symbols, line at ticket counter are stack applications."
    },
    {
        "id": 181,
        "Question": "What is the result of the given postfix expression?  abc*+ where a=1, b=2, c=3.",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 6",
            "d) 7"
        ],
        "Answer": "Answer: b\nExplanation: When an operator is encountered, the first two operands are popped from the stack, they are evaluated and the result is pushed into the stack."
    },
    {
        "id": 182,
        "Question": "Evaluate the postfix expression ab + cd/- where a=5, b=4, c=9, d=3.",
        "Options": [
            "a) 23",
            "b) 15",
            "c) 6",
            "d) 10"
        ],
        "Answer": "Answer: a\nExplanation: All prefix operators use values to their right and all postfix operators use values to their left."
    },
    {
        "id": 183,
        "Question": "What data structure is used when converting an infix notation to prefix notation?",
        "Options": [
            "a) Stack",
            "b) Queue",
            "c) B-Trees",
            "d) Linked-list"
        ],
        "Answer": "Answer: a\nExplanation: First you reverse the given equation and carry out the algorithm of infix to postfix expression. Here, the data structure used is stacks."
    },
    {
        "id": 184,
        "Question": "2. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">A<span class=\"sy0\">+</span><span class=\"br0\">(</span>B<span class=\"sy0\">*</span>C<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) +A*CB",
            "b) *B+AC",
            "c) +A*BC",
            "d) *A+CB"
        ],
        "Answer": "Answer: c\nExplanation: Reverse the equation or scan the equation from right to left. Apply the infix-postfix algorithm. The equation inside the bracket evaluates to CB* and outside the bracket evaluates to A+ therefore getting CB*A+. Reversing this and we get +A*BC."
    },
    {
        "id": 185,
        "Question": "3. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"br0\">(</span>A<span class=\"sy0\">*</span>B<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>C<span class=\"sy0\">*</span>D<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) +*AB*CD",
            "b) *+AB*CD",
            "c) **AB+CD",
            "d) +*BA*CD"
        ],
        "Answer": "Answer: a\nExplanation: Reverse the equation or scan the equation from right to left. Apply the infix-postfix algorithm. The equation inside the brackets evaluate to DC* and BA* respectively giving us DC*BA*+ in the end. Reversing this we get the +*AB*CD."
    },
    {
        "id": 186,
        "Question": "4. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">A<span class=\"sy0\">+</span>B<span class=\"sy0\">*</span>C<span class=\"sy0\">^</span>D</pre></div></div></div></div></div></div>",
        "Options": [
            "a) +A*B^CD",
            "b) +A^B*CD",
            "c) *A+B^CD",
            "d) ^A*B+CD"
        ],
        "Answer": "Answer: a\nExplanation: Reverse the equation or scan the equation from right to left. Apply the infix-prefix algorithm. The preference order in ascending order are as follows +*^. Operators are pushed into the stack and popped if its preference is greater than the one which is getting pushed. In the end all operators are popped. The equation evaluates to DC^B*A+. Reversing this we get our following answer."
    },
    {
        "id": 187,
        "Question": "Out of the following operators (^, *, +, &, $), the one having highest priority is _________",
        "Options": [
            "a) +",
            "b) $",
            "c) ^",
            "d) &"
        ],
        "Answer": "Answer: c\nExplanation: According to the algorithm (infix-prefix), it follows that the exponentiation will have the highest priority. "
    },
    {
        "id": 188,
        "Question": "Out of the following operators (|, *, +, &, $), the one having lowest priority is ________",
        "Options": [
            "a) +",
            "b) $",
            "c) |",
            "d) &"
        ],
        "Answer": "Answer: c\nExplanation: According to the algorithm (infix-prefix), it follows that the logical OR will have the lowest priority."
    },
    {
        "id": 189,
        "Question": "7. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">A<span class=\"sy0\">^</span>B<span class=\"sy0\">^</span>C<span class=\"sy0\">^</span>D</pre></div></div></div></div></div></div>",
        "Options": [
            "a) ^^^ABCD",
            "b) ^A^B^CD",
            "c) ABCD^^^",
            "d) AB^C^D"
        ],
        "Answer": "Answer: a\nExplanation: Reverse the equation or scan the equation from right to left. Apply the infix-prefix algorithm. Here we have to remember that the exponentiation has order of associativity from right to left. Therefore the stack goes on pushing ^. Therefore resulting in ^^^ABCD."
    },
    {
        "id": 190,
        "Question": "8. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">+</span>b<span class=\"sy0\">-</span>c<span class=\"sy0\">/</span>d<span class=\"sy0\">&amp;</span>e<span class=\"sy0\">|</span>f</pre></div></div></div></div></div></div>",
        "Options": [
            "a) |&-+ab/cdef",
            "b) &|-+ab/cdef",
            "c) |&-ab+/cdef",
            "d) |&-+/abcdef"
        ],
        "Answer": "Answer: a\nExplanation: Reverse the equation or scan the equation from right to left. Apply the infix-prefix algorithm. The preference order in ascending order are as follows |&+*/. "
    },
    {
        "id": 191,
        "Question": "9. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"br0\">(</span>b<span class=\"sy0\">/</span>c<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>d<span class=\"sy0\">^</span>e<span class=\"br0\">)</span><span class=\"sy0\">-</span>f<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) -+a*/^bcdef",
            "b) -+a*/bc^def",
            "c) -+a*b/c^def",
            "d) -a+*/bc^def"
        ],
        "Answer": "Answer: b\nExplanation: Reverse the equation or scan the equation from right to left. Apply the infix-prefix algorithm. The preference order in ascending order are as follows +*/^. Brackets have the highest priority. The equations inside the brackets are solved first."
    },
    {
        "id": 192,
        "Question": "10. What would be the Prefix notation and Postfix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">A<span class=\"sy0\">+</span>B<span class=\"sy0\">+</span>C</pre></div></div></div></div></div></div>",
        "Options": [
            "a) ++ABC and AB+C+",
            "b) AB+C+ and ++ABC",
            "c) ABC++ and AB+C+",
            "d) ABC+ and ABC+"
        ],
        "Answer": "Answer: a\nExplanation: For prefix notation there is a need of reversing the giving equation and solving it as a normal infix-postfix question. We see that it doesn’t result as same as normal infix-postfix conversion."
    },
    {
        "id": 193,
        "Question": "11. What would be the Prefix notation for the given equation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">|</span>b<span class=\"sy0\">&amp;</span>c</pre></div></div></div></div></div></div>",
        "Options": [
            "a) a|&bc",
            "b) &|abc",
            "c) |a&bc",
            "d) ab&|c"
        ],
        "Answer": "Answer: c\nExplanation: The order of preference of operators is as follows (descending): & |.\nThe equation a|b&c will be parenthesized as (a|(b&c)) for evaluation.\nTherefore the equation for prefix notation evaluates to |a&bc. "
    },
    {
        "id": 194,
        "Question": "When an operand is read, which of the following is done?",
        "Options": [
            "a) It is placed on to the output",
            "b) It is placed in operator stack",
            "c) It is ignored",
            "d) Operator stack is emptied"
        ],
        "Answer": "Answer: a\nExplanation: While converting an infix expression to a postfix expression, when an operand is read, it is placed on to the output. When an operator is read, it is placed in the operator stack."
    },
    {
        "id": 195,
        "Question": "What should be done when a left parenthesis ‘(‘ is encountered?",
        "Options": [
            "a) It is ignored",
            "b) It is placed in the output",
            "c) It is placed in the operator stack",
            "d) The contents of the operator stack is emptied"
        ],
        "Answer": "Answer: c\nExplanation: When a left parenthesis is encountered, it is placed on to the operator stack. When the corresponding right parenthesis is encountered, the stack is popped until the left parenthesis and remove both the parenthesis."
    },
    {
        "id": 196,
        "Question": "Which of the following is an infix expression?",
        "Options": [
            "a) (a+b)*(c+d)",
            "b) ab+c*",
            "c) +ab",
            "d) abc+*"
        ],
        "Answer": "Answer: a\nExplanation: (a+b)*(c+d) is an infix expression. +ab is a prefix expression and ab+c* is a postfix expression."
    },
    {
        "id": 197,
        "Question": "What is the time complexity of an infix to postfix conversion algorithm?",
        "Options": [
            "a) O(N log N)",
            "b) O(N)",
            "c) O(N2)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: b\nExplanation: The time complexity of an infix to postfix expression conversion algorithm is mathematically found to be O(N)."
    },
    {
        "id": 198,
        "Question": "5.What is the postfix expression for the corresponding infix expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">+</span>b<span class=\"sy0\">*</span>c<span class=\"sy0\">+</span><span class=\"br0\">(</span>d<span class=\"sy0\">*</span>e<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) abc*+de*+",
            "b) abc+*de*+",
            "c) a+bc*de+*",
            "d) abc*+(de)*+"
        ],
        "Answer": "Answer: a\nExplanation: Using the infix to postfix expression conversion algorithm, the corresponding postfix expression is found to be abc*+de*+."
    },
    {
        "id": 199,
        "Question": "8. What is the postfix expression for the infix expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">-</span>b<span class=\"sy0\">-</span>c</pre></div></div></div></div></div></div>",
        "Options": [
            "a) -ab-c",
            "b) ab – c –",
            "c) – -abc",
            "d) -ab-c"
        ],
        "Answer": "Answer: b\nExplanation: When a parenthesis is encountered, it is placed on the operator stack. When the corresponding parenthesis is encountered, the stack is popped until the other parenthesis is reached and they are discarded."
    },
    {
        "id": 200,
        "Question": "9. What is the postfix expression for the following infix expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">/</span>b<span class=\"sy0\">^</span>c<span class=\"sy0\">-</span>d</pre></div></div></div></div></div></div>",
        "Options": [
            "a) abc^/d-",
            "b) ab/cd^-",
            "c) ab/^cd-",
            "d) abcd^/-"
        ],
        "Answer": "Answer: a\nExplanation: Computers can easily process a postfix expression because a postfix expression keeps track of precedence of operators."
    },
    {
        "id": 201,
        "Question": "Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?",
        "Options": [
            "a) operand is always placed in the output",
            "b) operator is placed in the stack when the stack operator has lower precedence",
            "c) parenthesis are included in the output",
            "d) higher and equal priority operators follow the same condition"
        ],
        "Answer": "Answer: b\nExplanation: The corresponding postfix expression for the given infix expression is found to be ab-c- and not abc- -."
    },
    {
        "id": 202,
        "Question": "In infix to postfix conversion algorithm, the operators are associated from?",
        "Options": [
            "a) right to left",
            "b) left to right",
            "c) centre to left",
            "d) centre to right"
        ],
        "Answer": "Answer: a\nExplanation: Using the infix to postfix conversion algorithm, the corresponding postfix expression for the infix expression is found to be abc^/d-."
    },
    {
        "id": 203,
        "Question": "12. What is the corresponding postfix expression for the given infix expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">*</span><span class=\"br0\">(</span>b<span class=\"sy0\">+</span>c<span class=\"br0\">)</span><span class=\"sy0\">/</span>d</pre></div></div></div></div></div></div>",
        "Options": [
            "a) ab*+cd/",
            "b)  ab+*cd/",
            "c) abc*+/d",
            "d) abc+*d/"
        ],
        "Answer": "Answer: c\nExplanation: Parentheses are not included in the output. They are placed in the operator stack and then discarded."
    },
    {
        "id": 204,
        "Question": "13. What is the corresponding postfix expression for the given infix expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">+</span><span class=\"br0\">(</span>b<span class=\"sy0\">*</span>c<span class=\"br0\">(</span>d<span class=\"sy0\">/</span>e<span class=\"sy0\">^</span>f<span class=\"br0\">)</span><span class=\"sy0\">*</span>g<span class=\"br0\">)</span><span class=\"sy0\">*</span>h<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ab*cdef/^*g-h+",
            "b) abcdef^/*g*h*+",
            "c) abcd*^ed/g*-h*+",
            "d) abc*de^fg/*-*h+"
        ],
        "Answer": "Answer: b\nExplanation: In infix, prefix and postfix expressions, the operators are associated from left to right and not right to left."
    },
    {
        "id": 205,
        "Question": "14. What is the correct postfix expression for the following expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">a<span class=\"sy0\">+</span>b<span class=\"sy0\">*</span><span class=\"br0\">(</span>c<span class=\"sy0\">^</span>d<span class=\"sy0\">-</span>e<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>f<span class=\"sy0\">+</span>g<span class=\"sy0\">*</span>h<span class=\"br0\">)</span><span class=\"sy0\">-</span>i</pre></div></div></div></div></div></div>",
        "Options": [
            "a) abc^de-fg+*^*+i-",
            "b) abcde^-fg*+*^h*+i-",
            "c) abcd^e-fgh*+^*+i-",
            "d) ab^-dc*+ef^gh*+i-"
        ],
        "Answer": "Answer: d\nExplanation: Using the infix to postfix conversion algorithm, the corresponding postfix expression is obtained as abc+*d/."
    },
    {
        "id": 206,
        "Question": "1. What would be the solution to the given prefix notation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"sy0\">-</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 5",
            "c) 10",
            "d) 7"
        ],
        "Answer": "Answer: a\nExplanation: The infix notation of the given prefix notation is 5+10/5-5 which gives us 2 as our answer."
    },
    {
        "id": 207,
        "Question": "2. What would be the solution to the given prefix notation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"sy0\">/</span> <span class=\"sy0\">/</span> <span class=\"sy0\">/</span> <span class=\"sy0\">/</span> <span class=\"nu0\">16</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 4",
            "c) 2",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: The infix notation to the given prefix notation is 16/4/2/1 which gives us 1 as our answer. The infix notation is got from the prefix notation by traversing the equation from the right. "
    },
    {
        "id": 208,
        "Question": "3. What would be the solution to the given prefix notation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"sy0\">+</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">/</span> <span class=\"nu0\">8</span> <span class=\"nu0\">4</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 14",
            "b) 15",
            "c) 18",
            "d) 12"
        ],
        "Answer": "Answer: b\nExplanation: The infix notation for the given prefix notation is (9+(3*(8/4))) which solves to 15. So 15 is correct answer."
    },
    {
        "id": 209,
        "Question": "4. What would be the solution to the given prefix notation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"sy0\">-</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) -6",
            "c) 3",
            "d) -3"
        ],
        "Answer": "Answer: b\nExplanation: The infix notation for the given prefix notation is (1+2)-3*(6/2). The result of the given equation is -6."
    },
    {
        "id": 210,
        "Question": "5. What would be the solution to the given prefix notation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"sy0\">-</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"sy0\">*</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 0",
            "c) -1",
            "d) -2"
        ],
        "Answer": "Answer: c\nExplanation: The infix notation for the given prefix notation is (1*5)-(6/3)*6/2. The result of the equation is -1."
    },
    {
        "id": 211,
        "Question": "6. What would be the solution to the given prefix notation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"sy0\">*</span> <span class=\"sy0\">/</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 12",
            "b) 7.5",
            "c) 9",
            "d) 13.5"
        ],
        "Answer": "Answer: a\nExplanation: The infix notation of the given prefix notation is ((1+2)/(4/2))*(3+5) which solves to (3/2)*8 which by solving gives us 12."
    },
    {
        "id": 212,
        "Question": "Given a prefix and a postfix notation what are the difference between them?",
        "Options": [
            "a) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right",
            "b) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left",
            "c) Both equations are solved starting from the same side(right)",
            "d) Both equations are solved starting from the same side(left)"
        ],
        "Answer": "Answer: a\nExplanation: The postfix notation is solved starting from left but whereas the prefix notation is reversed after creating them, therefore it’s solved starting from right. "
    },
    {
        "id": 213,
        "Question": "When converting the prefix notation into an infix notation, the first step to be followed is ________",
        "Options": [
            "a) Reverse the equation",
            "b) Push the equation to the stack",
            "c) Push the equation onto the queue",
            "d) Push the equation to the stack or queue"
        ],
        "Answer": "Answer: a\nExplanation: The steps that are followed are: the equation is reversed, pushed onto a stack, popped one by one and solved. Therefore the first step is reversing the equation."
    },
    {
        "id": 214,
        "Question": "The time complexity of converting a prefix notation to infix notation is _________",
        "Options": [
            "a) O(n) where n is the length of the equation",
            "b) O(n) where n is number of operands",
            "c) O(1)",
            "d) O(logn) where n is length of the equation"
        ],
        "Answer": "Answer: a\nExplanation: The processes that are involved are reversing the equation (O(n)), pushing them all onto the stack(O(n)), and popping them one by one and solving them (O(n)). Hence the answer is O(n) where n is the length of the equation."
    },
    {
        "id": 215,
        "Question": "Given two processes (conversion of postfix equation to infix notation and conversion of prefix notation to infix notation), which of the following is easier to implement?",
        "Options": [
            "a) Both are easy to implement",
            "b) Conversion of postfix equation to infix equation is harder than converting a prefix notation to infix notation",
            "c) Conversion of postfix equation to infix equation is easier than converting a prefix notation to infix notation",
            "d) Insufficient data"
        ],
        "Answer": "Answer: c\nExplanation: As the conversion of prefix notation to infix notation involves reversing the equation, the latter is harder to implement than postfix to infix process."
    },
    {
        "id": 216,
        "Question": "Which of the following data structure is used to convert postfix expression to infix expression?",
        "Options": [
            "a) Stack",
            "b) Queue",
            "c) Linked List",
            "d) Heap"
        ],
        "Answer": "Answer: a\nExplanation: To convert the postfix expression into infix expression we need stack. We need stack to maintain the intermediate infix expressions. We use stack to hold operands."
    },
    {
        "id": 217,
        "Question": "The postfix expression abc+de/*- is equivalent to which of the following infix expression?",
        "Options": [
            "a) abc+-de*/",
            "b) (a+b)-d/e*c",
            "c) a-(b+c)*(d/e)",
            "d) abc+*-(d/e)"
        ],
        "Answer": "Answer: c\nExplanation: Given postfix expression : abc+de/*-\ninfix ⇒ a(b+c)(d/e)*-\n⇒ a(b+c)*(d/e)-\n⇒ a-(b+c)*(d/e)\nHence, correct choice is a-(b+c)*(d/e)."
    },
    {
        "id": 218,
        "Question": "The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * – will be ___________",
        "Options": [
            "a) 1 + 2 * 3 – 4 * 5 and -13",
            "b) (2 + 1) * (3 – 4) * 5 and 13",
            "c) 1 + 2 * (3 – 4) * 5 and -11",
            "d) (1 + 2) * 3 – (4 * 5) and -11"
        ],
        "Answer": "Answer: d\nExplanation: Given postfix expression : 1 2 + 3 * 4 5 * –\n\t\t\t\t\t\t⇒ (1 + 2) 3 * 4 5 * –\n\t\t\t\t\t\t⇒ ((1 + 2) * 3) 4 5 * –\n\t\t\t\t\t\t⇒ ((1 + 2) * 3) (4 * 5) –\n\t\t\t\t\t\t⇒ ((1 + 2) * 3) – (4 * 5)\nSo, the equivalent infix expression is (1 + 2) * 3 – (4 * 5) and it’s value is -11. "
    },
    {
        "id": 219,
        "Question": "What is the value of the postfix expression  2 3 + 4 5 6 – – *",
        "Options": [
            "a) 19",
            "b) 21",
            "c) -4",
            "d) 25"
        ],
        "Answer": "Answer: d\nExplanation: Given postfix expression : 2 3 + 4 5 6 – – *\ninfix ⇒ (2 + 3)4 (5 – 6) – *\n⇒ (2 + 3)*4 – (5 – 6)\nHence, value = (2 + 3) * (4 – (5 – 6)) = 5 *(4 – (-1)) = 5*5 = 25.\n"
    },
    {
        "id": 220,
        "Question": "The prefix expression of the postfix expression AB+CD-* is __________",
        "Options": [
            "a) (A+B)*(C-D)",
            "b) +AB*-CD",
            "c) A+*BCD-",
            "d) *+AB-CD"
        ],
        "Answer": "Answer: d\nExplanation: To convert from postfix to prefix, we first convert it to infix and then to prefix.\npostfix :  AB+CD-*\ninfix ⇒ (A+B) * (C-D)\nSo,  prefix ⇒ +AB*-CD,\n\t        ⇒ *+AB-CD.\nTherefore, correct choice is *+AB-CD."
    },
    {
        "id": 221,
        "Question": "Consider the postfix expression 4 5 6 a b 7 8 a c, where a, b, c are operators. Operator a has higher precedence over operators b and c. Operators b and c are right associative. Then, equivalent infix expression is",
        "Options": [
            "a) 4 a 5 6  b 7 8 a c",
            "b) 4 a 5 c 6 b 7 a 8",
            "c) 4 b 5 a 6 c 7 a 8",
            "d) 4 a 5 b 6 c 7 a 8"
        ],
        "Answer": "Answer: c\nExplanation: Given postfix expression: 4 5 6 a b 7 8 a c\n\t\t\t\t\tinfix ⇒ 4 (5 a 6)  b (7 a 8)  c\n\t\t\t\t\t         ⇒ (4 b (5 a 6)) (7 a 8)  c\n\t\t\t\t\t\t⇒ (4 b (5 a 6)) c (7 a 8)\nSo, the required infix expression is 4 b 5 a 6 c 7 a 8."
    },
    {
        "id": 222,
        "Question": "Which of the following is valid reverse polish expression?",
        "Options": [
            "a) a op b",
            "b) op a b",
            "c) a b op",
            "d) both op a b and a b op"
        ],
        "Answer": "Answer: a\nExplanation: Stack is used to postfix expression to infix expression. And to convert we follow the following steps: (i) Scan the expression from left to right. (ii) If operand is found, push it on stack.(iii) If operator is found, the two operands are popped and the combined infix expression is formed and pushed onto the stack."
    },
    {
        "id": 223,
        "Question": "The result of the postfix expression 5 3 * 9 + 6 / 8 4 / + is _____________",
        "Options": [
            "a) 8",
            "b) 6",
            "c) 10",
            "d) 9"
        ],
        "Answer": "Answer: c\nExplanation: The postfix expression is also known as the reverse polish expression. In postfix expressions, the operators come after the operands. So, the correct expression is a b op and hence a b op is correct."
    },
    {
        "id": 224,
        "Question": "The optimal data structure used to solve Tower of Hanoi is _________",
        "Options": [
            "a) Tree",
            "b) Heap",
            "c) Priority queue",
            "d) Stack"
        ],
        "Answer": "Answer: d\nExplanation: The Tower of Hanoi involves moving of disks ‘stacked’ at one peg to another peg with respect to the size constraint. It is conveniently done using stacks and priority queues. Stack approach is widely used to solve Tower of Hanoi.  "
    },
    {
        "id": 225,
        "Question": "Which among the following is not a palindrome?",
        "Options": [
            "a) Madam",
            "b) Dad",
            "c) Malayalam",
            "d) Maadam"
        ],
        "Answer": "Answer: d\nExplanation: A palindrome is a string that reads the same forward and backward, Madam, Dad and Malayalam are palindromes where as Maadam is not a palindrome."
    },
    {
        "id": 226,
        "Question": "Which data structure can be used to test a palindrome?",
        "Options": [
            "a) Tree",
            "b) Heap",
            "c) Stack",
            "d) Priority queue"
        ],
        "Answer": "Answer: c\nExplanation: Stack is a convenient option as it involves pushing and popping of characters."
    },
    {
        "id": 227,
        "Question": "What is the number of moves required to solve Tower of Hanoi problem for k disks?",
        "Options": [
            "a) 2k – 1",
            "b) 2k + 1",
            "c) 2k + 1",
            "d) 2k – 1"
        ],
        "Answer": "Answer: d\nExplanation: Tracing of the moves in the above ToH problem will prove this result, instead you can simply add a count for each recursive call to check the number of moves."
    },
    {
        "id": 228,
        "Question": "Which is the most appropriate data structure for reversing a word?",
        "Options": [
            "a) queue",
            "b) stack",
            "c) tree",
            "d) graph"
        ],
        "Answer": "Answer: a\nExplanation: This application of stack can also be used to find if the given word is a palindrome because, if the reversed is same as that of the original word, the given word is a palindrome."
    },
    {
        "id": 229,
        "Question": "What is the time complexity of reversing a word using stack algorithm?",
        "Options": [
            "a) O (N log N)",
            "b) O (N2)",
            "c) O (N)",
            "d) O (M log N)"
        ],
        "Answer": "Answer: b\nExplanation: Stack is the most appropriate data structure for reversing a word because stack follows LIFO principle."
    },
    {
        "id": 230,
        "Question": "What will be the word obtained if the word “abbcabb” is reversed using a stack?",
        "Options": [
            "a) bbabbca",
            "b) abbcabb",
            "c) bbacbba",
            "d) bbacabb"
        ],
        "Answer": "Answer: a\nExplanation: Push operation inserts a character into the stack and pop operation pops the top of the stack."
    },
    {
        "id": 231,
        "Question": "How many stacks are required for reversing a word algorithm?",
        "Options": [
            "a) one",
            "b) two",
            "c) three",
            "d) four"
        ],
        "Answer": "Answer: c\nExplanation: The time complexity of reversing a stack is mathematically found to be O (N) where N is the input."
    },
    {
        "id": 232,
        "Options": [
            "a) abc",
            "b) b",
            "c) ac",
            "d) acb"
        ],
        "Answer": "Answer: c\nExplanation: The string “abbcabb” is pushed on to the stack. If the characters are popped one by one, the word obtained will be bbacbba."
    },
    {
        "id": 233,
        "Question": "How will your stack look like if the word ‘java’ is pushed?",
        "Options": [
            "a)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/data-structures-questions-answers-reverse-word-stack-q10a.png\" alt=\"data-structures-questions-answers-reverse-word-stack-q10a\" width=\"59\" height=\"114\" class=\"alignnone size-full wp-image-221540\" />",
            "b)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/data-structures-questions-answers-reverse-word-stack-q10b.png\" alt=\"data-structures-questions-answers-reverse-word-stack-q10b\" width=\"58\" height=\"112\" class=\"alignnone size-full wp-image-221541\" />",
            "c)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/data-structures-questions-answers-reverse-word-stack-q10c.png\" alt=\"data-structures-questions-answers-reverse-word-stack-q10c\" width=\"57\" height=\"111\" class=\"alignnone size-full wp-image-221542\" />",
            "d)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/data-structures-questions-answers-reverse-word-stack-q10d.png\" alt=\"data-structures-questions-answers-reverse-word-stack-q10d\" width=\"53\" height=\"111\" class=\"alignnone size-full wp-image-221543\" />"
        ],
        "Answer": "Answer: a\nExplanation: Only 1 stack is required for reversing a word using stack. In that stack, push and pop operations are carried out."
    },
    {
        "id": 234,
        "Question": "11. Find the error (if any) in the following code snippet for pop operation.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"kw4\">void</span> pop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">//removing an element from a stack</span>\n<span class=\"br0\">{</span>\n     <span class=\"kw3\">printf</span><span class=\"br0\">(</span>“<span class=\"sy0\">%</span>s”<span class=\"sy0\">,</span> stack<span class=\"br0\">[</span>top<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) run time error",
            "b) compile time error",
            "c) pop operation is performed, but top moved in wrong direction",
            "d) pop operation is performed properly"
        ],
        "Answer": "Answer: b\nExplanation: The word ‘pat’ is pushed on to the stack. When the characters of the stack are popped one by one, the word ‘tap’ is obtained."
    },
    {
        "id": 235,
        "Question": "12. What will be the output of the following program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">main<span class=\"br0\">(</span><span class=\"br0\">)</span>  \n<span class=\"br0\">{</span>  \n   <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"san foundry\"</span><span class=\"sy0\">;</span>  \n   <span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> <span class=\"kw3\">strlen</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span>  \n   <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>  \n&nbsp;\n   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>  \n        push<span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// pushes an element into stack</span>\n&nbsp;\n   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>  \n      pop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">//pops an element from the stack</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) sanfoundry",
            "b) san foundry",
            "c) yrdnuof nas",
            "d) foundry nas"
        ],
        "Answer": "Answer: b\nExplanation: The element ‘b’ is popped out of the stack. Hence the output of the following sequence of operations will be ‘b’."
    },
    {
        "id": 236,
        "Question": "What is the time complexity of balancing parentheses algorithm?",
        "Options": [
            "a) O (N)",
            "b) O (N log N)",
            "c) O (M log N)",
            "d) O (N2)"
        ],
        "Answer": "Answer: a\nExplanation: The time complexity of balancing parentheses algorithm is mathematically found to be O (N)."
    },
    {
        "id": 237,
        "Question": "Which application of stack is used to ensure that the pair of parentheses is properly nested?",
        "Options": [
            "a) Balancing symbols",
            "b) Reversing a stack",
            "c) Conversion of an infix to postfix expression",
            "d) Conversion of an infix to prefix expression"
        ],
        "Answer": "Answer: a\nExplanation: Balancing symbols application ensures that the pair of parentheses are properly nested while reversing stack reverses a stack."
    },
    {
        "id": 238,
        "Question": "In balancing parentheses algorithm, the string is read from?",
        "Options": [
            "a) right to left",
            "b) left to right",
            "c) center to right",
            "d) center to left"
        ],
        "Answer": "Answer: b\nExplanation: Any string is read by the compiler from left to right and not from right to left."
    },
    {
        "id": 239,
        "Question": "Which is the most appropriate data structure for applying balancing of symbols algorithm?",
        "Options": [
            "a) stack",
            "b) queue",
            "c) tree",
            "d) graph"
        ],
        "Answer": "Answer: a\nExplanation: Stack is the most appropriate data structure for balancing symbols algorithm because stack follows LIFO principle (Last In First Out)."
    },
    {
        "id": 240,
        "Question": "Which of the following does the balancing symbols algorithm include?",
        "Options": [
            "a) balancing double quotes",
            "b) balancing single quotes",
            "c) balancing operators and brackets",
            "d) balancing parentheses, brackets and braces"
        ],
        "Answer": "Answer: d\nExplanation: The balancing symbols algorithm using stack only includes balancing parentheses, brackets and braces and not any other symbols."
    },
    {
        "id": 241,
        "Question": "Which of the following statement is incorrect with respect to balancing symbols algorithm?",
        "Options": [
            "a) {[()]}",
            "b) ([ )] ",
            "c) {( )}",
            "d) { [ ] }"
        ],
        "Answer": "Answer: b\nExplanation: ([ )] is incorrect because’)’ occurs before the corresponding ‘]’ is encountered."
    },
    {
        "id": 242,
        "Question": "What should be done when an opening parentheses is read in a balancing symbols algorithm?",
        "Options": [
            "a) push it on to the stack",
            "b) throw an error",
            "c) ignore the parentheses",
            "d) pop the stack"
        ],
        "Answer": "Answer: a\nExplanation: When an opening bracket/braces/parentheses is encountered, it is pushed on to the stack. When the corresponding end bracket/braces/parentheses is not found, throw an error."
    },
    {
        "id": 243,
        "Question": "When the corresponding end bracket/braces/parentheses is not found, what happens?",
        "Options": [
            "a) The stack is popped",
            "b) Ignore the parentheses",
            "c) An error is reported",
            "d) It is treated as an exception"
        ],
        "Answer": "Answer: c\nExplanation: When the corresponding end bracket/braces/parentheses is not found, throw an error since they don’t match."
    },
    {
        "id": 244,
        "Question": "If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?",
        "Options": [
            "a) push it on to the stack",
            "b) pop the stack",
            "c) throw an error",
            "d) treated as an exception"
        ],
        "Answer": "Answer: b\nExplanation: When the corresponding end bracket/braces/parentheses is encountered, the stack is popped. When an opening bracket/braces/parentheses is encountered, it is pushed on to the stack."
    },
    {
        "id": 245,
        "Question": "How many passes does the balancing symbols algorithm makes through the input?",
        "Options": [
            "a) one",
            "b) two",
            "c) three",
            "d) four"
        ],
        "Answer": "Answer: a\nExplanation: When the stack contains elements at the end, it means that the given string of parentheses is not balanced."
    },
    {
        "id": 246,
        "Question": "Which of the following statement is invalid with respect to balancing symbols?",
        "Options": [
            "a) [(A+B) + (C-D)] ",
            "b) [{A+B}-{C-[D+E]}] ",
            "c) ((A+B) + (C+D)",
            "d) {(A+B) + [C+D]}"
        ],
        "Answer": "Answer: b\nExplanation: The given statement is invalid with respect to balancing of symbols because the last bracket does not correspond to the opening braces."
    },
    {
        "id": 247,
        "Question": "What is a bit array?",
        "Options": [
            "a) Data structure for representing arrays of records",
            "b) Data structure that compactly stores bits",
            "c) An array in which most of the elements have the same value",
            "d) Array in which elements are not present in continuous locations"
        ],
        "Answer": "Answer: b\nExplanation: It compactly stores bits and exploits bit-level parallelism."
    },
    {
        "id": 248,
        "Question": "Which of the following bitwise operations will you use to set a particular bit to 1?",
        "Options": [
            "a) OR",
            "b) AND",
            "c) XOR",
            "d) NOR"
        ],
        "Answer": "Answer: a\nExplanation: 1 OR 1 = 1, 0 OR 1 = 1, any bit OR’ed with 1 gives 1."
    },
    {
        "id": 249,
        "Question": "Which of the following bitwise operations will you use to set a particular bit to 0?",
        "Options": [
            "a) OR",
            "b) AND",
            "c) XOR",
            "d) NAND"
        ],
        "Answer": "Answer: b\nExplanation: 1 AND 0 = 0, 0 AND 0 = 0, any bit AND with 0 gives 0."
    },
    {
        "id": 250,
        "Question": "Which of the following bitwise operations will you use to toggle a particular bit?",
        "Options": [
            "a) OR",
            "b) AND",
            "c) XOR",
            "d) NOT"
        ],
        "Answer": "Answer: c\nExplanation: 1 XOR 1 = 0, 0 XOR 1 = 1, note that NOT inverts all the bits, while XOR toggles only a specified bit."
    },
    {
        "id": 251,
        "Question": "Which of the following is not an advantage of bit array?",
        "Options": [
            "a) Exploit bit level parallelism",
            "b) Maximal use of data cache",
            "c) Can be stored and manipulated in the register set for long periods of time",
            "d) Accessing Individual Elements is easy"
        ],
        "Answer": "Answer: d\nExplanation: Individual Elements are difficult to access and can’t be accessed in some programming languages. If random access is more common than sequential access, they have to be compressed to byte/word array. Exploit Bit parallelism, Maximal use of data cache and storage and manipulation for longer time in register set are all advantages of bit array."
    },
    {
        "id": 252,
        "Question": "Which of the following is not a disadvantage of bit array?",
        "Options": [
            "a) Without compression, they might become sparse",
            "b) Accessing individual bits is expensive",
            "c) Compressing bit array to byte/word array, the machine also has to support byte/word addressing",
            "d) Storing and Manipulating in the register set for long periods of time"
        ],
        "Answer": "Answer: d\nExplanation: Bit arrays allow small arrays of bits to be stored and manipulated in the register set for long periods of time with no memory accesses because of their ability to exploit bit-level parallelism, limit memory access, and maximally use the data cache, they often outperform many other data structures on practical data sets. This is an advantage of bit array. The rest are all disadvantages of bit array."
    },
    {
        "id": 253,
        "Question": "Which of the following is/are not applications of bit arrays?",
        "Options": [
            "a) Used by the Linux kernel",
            "b) For the allocation of memory pages",
            "c) Bloom filter",
            "d) Implementation of Vectors and Matrices"
        ],
        "Answer": "Answer: d\nExplanation: Normal Arrays are used to implement vectors and matrices. Bit arrays have no prominent role. Remaining all are applications of Bit Arrays."
    },
    {
        "id": 254,
        "Question": "Which class in Java can be used to represent bit array?",
        "Options": [
            "a) BitSet",
            "b) BitVector",
            "c) BitArray",
            "d) BitStream"
        ],
        "Answer": "Answer: a\nExplanation: The BitSet class creates a special type of array that can hold bit values."
    },
    {
        "id": 255,
        "Question": "Which of the following bitwise operator will you use to invert all the bits in a bit array?",
        "Options": [
            "a) OR",
            "b) NOT",
            "c) XOR",
            "d) NAND"
        ],
        "Answer": "Answer: b\nExplanation: NOT operation is used to invert all the bits stored in a bit array.\nEg: NOT (10110010) = 01001101. "
    },
    {
        "id": 256,
        "Question": "What does Hamming weight/population count mean in Bit arrays?",
        "Options": [
            "a) Finding the number of 1 bit in a bit array",
            "b) Finding the number of 0 bit in a bit array",
            "c) Finding the sum of bits in a bit array",
            "d) Finding the average number of 1’s and 0’s in bit arrays"
        ],
        "Answer": "Answer: a\nExplanation: A bit array stores the combinations of bit 0 and bit 1. Each bit in the bit array is independent. Run Length encoding is a data compression technique in which data are stored as single value and number of times that value repeated in the data. This compression reduces the space complexity in arrays. Bit arrays without compression require more space. Thus, we will use Run-Length encoding in most of the cases to compress data in bit arrays."
    },
    {
        "id": 257,
        "Question": "Which one of the following operations returns the first occurrence of bit 1 in bit arrays?",
        "Options": [
            "a) Find First Zero",
            "b) Find First One",
            "c) Counting lead Zeroes",
            "d) Counting lead One"
        ],
        "Answer": "Answer: a\nExplanation: Hamming/ population count involves finding the number of 1’s in the bit array. Population count is used in data compression."
    },
    {
        "id": 258,
        "Question": "What is a dynamic array?",
        "Options": [
            "a) A variable size data structure",
            "b) An array which is created at runtime",
            "c) The memory to the array is allocated at runtime",
            "d) An array which is reallocated everytime whenever new elements have to be added"
        ],
        "Answer": "Answer: a\nExplanation: It is a varying-size list data structure that allows items to be added or removed, it may use a fixed sized array at the back end."
    },
    {
        "id": 259,
        "Question": "What is meant by physical size in a dynamic array?",
        "Options": [
            "a) The size allocated to elements",
            "b) The size extended to add new elements",
            "c) The size of the underlying array at the back-end",
            "d) The size visible to users"
        ],
        "Answer": "Answer: c\nExplanation: Physical size, also called array capacity is the size of the underlying array, which is the maximum size without relocation of data."
    },
    {
        "id": 260,
        "Question": "The number of items used by the dynamic array contents is its __________",
        "Options": [
            "a) Physical size",
            "b) Capacity",
            "c) Logical size",
            "d) Random size"
        ],
        "Answer": "Answer: c\nExplanation: The number of items used by the dynamic array contents is called logical size. Physical size is the size of the underlying array, which is the maximum size without reallocation of data."
    },
    {
        "id": 261,
        "Question": "How will you implement dynamic arrays in Java?",
        "Options": [
            "a) Set",
            "b) Map",
            "c) HashMap",
            "d) List"
        ],
        "Answer": "Answer: d\nExplanation: ArrayList is used to implement dynamic arrays in Java."
    },
    {
        "id": 262,
        "Question": "Which of the following is the correct syntax to declare an ArrayList in Java?",
        "Options": [
            "a) ArrayList al = new ArrayList();",
            "b) ArrayList al = new ArrayList[];",
            "c) ArrayList al() = new ArrayList();",
            "d) ArrayList al[] = new ArrayList[];"
        ],
        "Answer": "Answer: a\nExplanation: This is a non-generic way of creating an ArrayList."
    },
    {
        "id": 263,
        "Question": "Array is divided into two parts in ____________",
        "Options": [
            "a) Hashed Array Tree",
            "b) Geometric Array",
            "c) Bounded-size dynamic array",
            "d) Sparse Array"
        ],
        "Answer": "Answer: c\nExplanation: The first part stores the items of the dynamic array and the second part is reserved for new allocations."
    },
    {
        "id": 264,
        "Question": "Which of the following is a disadvantage of dynamic arrays?",
        "Options": [
            "a) Locality of reference",
            "b) Data cache utilization",
            "c) Random access",
            "d) Memory leak"
        ],
        "Answer": "Answer: d\nExplanation: Dynamic arrays share the advantage of arrays, added to it is the dynamic addition of elements to the array. Memory can be leaked if it is not handled properly during allocation and deallocation. It is a disadvantage."
    },
    {
        "id": 265,
        "Question": "What is the time complexity for inserting/deleting at the beginning of the array?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(logn)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: b\nExplanation: All the other elements will have to be moved, hence O(n)."
    },
    {
        "id": 266,
        "Question": "The size of the dynamic array is deallocated if the array size is less than _________% of the backend physical size.",
        "Options": [
            "a) 30",
            "b) 40",
            "c) 10",
            "d) 20"
        ],
        "Answer": "Answer: a\nExplanation: Static arrays have fixed capacity. The capacity must be specified during memory allocation. Dynamic arrays don’t require to specify their capacity during memory allocation. Dynamic arrays have fixed physical size at backend and its capacity increases if required. Thus, Dynamic arrays overcome the limit of static arrays."
    },
    {
        "id": 267,
        "Question": "In which of the following cases dynamic arrays are not preferred?",
        "Options": [
            "a) If the size of the array is unknown",
            "b) If the size of the array changes after few iterations",
            "c) If the memory reallocation takes more time i.e. expensive",
            "d) If the array holds less number of elements"
        ],
        "Answer": "Answer: a\nExplanation: The size of the dynamic array is decreased/deallocated if the actual size of the array is less than 30% of the backend physical size. This is used to avoid memory wastage."
    },
    {
        "id": 268,
        "Question": "The growth factor of ArrayList in Java is _______",
        "Options": [
            "a) 1",
            "b) 1.5",
            "c) 2",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: Physical size of a Dynamic array is fixed with a larger value. Dynamically memory allocated arrays are arrays whose memory is allocated at run time rather than at compile time. Dynamically memory allocated arrays don’t have physical size at the backend. Thus, Dynamic arrays and Dynamically memory allocated arrays are different."
    },
    {
        "id": 269,
        "Question": "In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________",
        "Options": [
            "a) O (n)",
            "b) O (n1/2)",
            "c) O (log n)",
            "d) O (1)"
        ],
        "Answer": "Answer: d\nExplanation: Dynamic arrays are preferred when the size of the array is unknown during memory allocation or the size changes after few iterations or the memory reallocation is expensive. If array holds less number of elements, the physical size is reduced and reduction takes more time. In that case, we can use normal arrays instead of dynamic arrays."
    },
    {
        "id": 270,
        "Question": "Which of the following arrays are used in the implementation of list data type in python?",
        "Options": [
            "a) Bit array",
            "b) Dynamic arrays",
            "c) Sparse arrays",
            "d) Parallel arrays"
        ],
        "Answer": "Answer: b\nExplanation: The growth factor of dynamic arrays (Array List) in Java is 3/2.\nThe new array capacity is calculated as new_array_size = (old_array_size*3)/2+1."
    },
    {
        "id": 271,
        "Question": "What are parallel arrays?",
        "Options": [
            "a) Arrays of the same size",
            "b) Arrays allocated one after the other",
            "c) Arrays of the same number of elements",
            "d) Arrays allocated dynamically"
        ],
        "Answer": "Answer: c\nExplanation: Different arrays can be of different data types but should contain same number of elements. Elements at corresponding index belong to a record."
    },
    {
        "id": 272,
        "Question": "Which of the following is a disadvantage of parallel array over the traditional arrays?",
        "Options": [
            "a) When a language does not support records, parallel arrays can be used",
            "b) Increased locality of reference",
            "c) Ideal cache behaviour",
            "d) Insertion and Deletion becomes tedious"
        ],
        "Answer": "Answer: d\nExplanation: Insertion and deletion of elements require to move every element from their initial positions. This will become tedious. For Record collection, locality of reference and Ideal Cache behaviour we can use parallel arrays."
    },
    {
        "id": 273,
        "Question": "Which of the following is an advantage of parallel arrays?",
        "Options": [
            "a) Poor locality of reference for non-sequential access",
            "b) Very little direct language support",
            "c) Expensive to shrink or grow",
            "d) Increased Locality of Reference"
        ],
        "Answer": "Answer: d\nExplanation: Elements in the parallel array are accessed sequentially as one arrays holds the keys whereas other holds the values. This sequential access generally improves Locality of Reference. It is an advantage."
    },
    {
        "id": 274,
        "Question": "What is a sorted array?",
        "Options": [
            "a) Arrays sorted in numerical order",
            "b) Arrays sorted in alphabetical order",
            "c) Elements of the array are placed at equally spaced addresses in the memory",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The array can be sorted in any way, numerical, alphabetical or any other way but the elements are placed at equally spaced addresses."
    },
    {
        "id": 275,
        "Question": "To search for an element in a sorted array, which searching technique can be used?",
        "Options": [
            "a) Linear Search",
            "b) Jump Search",
            "c) Binary Search",
            "d) Fibonacci Search"
        ],
        "Answer": "Answer: c\nExplanation: Since the array is sorted, binary search is preferred as its time complexity is O(logn)."
    },
    {
        "id": 276,
        "Question": "Which of the following is not an application of sorted array?",
        "Options": [
            "a) Commercial computing",
            "b) Priority Scheduling",
            "c) Discrete Mathematics",
            "d) Hash Tables"
        ],
        "Answer": "Answer: d\nExplanation: Sorted arrays have widespread applications as all commercial computing involves large data which is very useful if it is sorted. It makes best use of locality of reference and data cache. Linked lists are used in Hash Tables not arrays. "
    },
    {
        "id": 277,
        "Question": "What is the worst case time complexity of inserting an element into the sorted array?",
        "Options": [
            "a) O(nlogn)",
            "b) O(logn)",
            "c) O(n)",
            "d) O(n2)"
        ],
        "Answer": "Answer: c\nExplanation: In the worst case, an element must added to the front of the array, which means that rest of the elements have to be shifted, hence the worst case time complexity becomes O(n)."
    },
    {
        "id": 278,
        "Question": "What is a sparse array?",
        "Options": [
            "a) Data structure for representing arrays of records",
            "b) Data structure that compactly stores bits",
            "c) An array in which most of the elements have the same value",
            "d) An array in which memory is allocated in run time"
        ],
        "Answer": "Answer: c\nExplanation: They are set to a default value, usually 0 or null."
    },
    {
        "id": 279,
        "Question": "When do you use a sparse array?",
        "Options": [
            "a) When there are unique elements in the array",
            "b) When the array has more occurrence of zero elements",
            "c) When the data type of elements differ",
            "d) When elements are sorted"
        ],
        "Answer": "Answer: b\nExplanation: It need not necessarily be zero, it could be any default value, usually zero or null."
    },
    {
        "id": 280,
        "Question": "What is the difference between a normal(naive) array and a sparse array?",
        "Options": [
            "a) Sparse array can hold more elements than a normal array",
            "b) Sparse array is memory efficient",
            "c) Sparse array is dynamic",
            "d) A naive array is more efficient"
        ],
        "Answer": "Answer: b\nExplanation: A naive implementation allocates space for the entire size of the array, whereas a sparse array(linked list implementation) allocates space only for the non-default values."
    },
    {
        "id": 281,
        "Question": "What is sparsity of a matrix?",
        "Options": [
            "a) The fraction of zero elements over the total number of elements",
            "b) The fraction of non-zero elements over the total number of elements",
            "c) The fraction of total number of elements over the zero elements",
            "d) The fraction of total number of elements over the non-zero elements"
        ],
        "Answer": "Answer: b\nExplanation: A normal array considers null also as an element, but in the sparse array only a non-zero or a non-null element is considered. "
    },
    {
        "id": 282,
        "Question": "10. What is the functionality of the following piece of code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw3\">Object</span> function<span class=\"br0\">(</span><span class=\"kw4\">int</span> row_index, <span class=\"kw4\">int</span> col_index<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row_index <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> col_index <span class=\"sy0\">&gt;</span> N<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n            <span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"column index out of bounds\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>sparse_array<span class=\"br0\">[</span>row_index<span class=\"br0\">]</span>.<span class=\"me1\">fetch</span><span class=\"br0\">(</span>col_index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Store the element in the specified position",
            "b) Get the element from the specified position",
            "c) Alter the element in the specified position",
            "d) Removes the element from the specified position"
        ],
        "Answer": "Answer: a\nExplanation: Sparsity of a matrix is the fraction of number of zero elements over the total number of zero elements. "
    },
    {
        "id": 283,
        "Question": "Which of the following is the disadvantage of sparse matrices over normal matrices?",
        "Options": [
            "a) Size",
            "b) Speed",
            "c) Easily compressible",
            "d) Algorithm complexity"
        ],
        "Answer": "Answer: a\nExplanation: Each row in a sparse matrix acts as a sparse array, hence this row with the specified col_index is the array and the specified position where the element is stored."
    },
    {
        "id": 284,
        "Question": "Which of the following is false?",
        "Options": [
            "a) Suffix array is always sorted",
            "b) Suffix array is used in string matching problems",
            "c) Suffix array is always unsorted",
            "d) Suffix array contains all the suffixes of the given string"
        ],
        "Answer": "Answer: c\nExplanation: Suffix array is always sorted as it contains all the suffixes of a string in sorted order. Suffix arrays are used to solve problems related to string, like string matching problems."
    },
    {
        "id": 285,
        "Question": "Suffix array of the string “statistics” is ____________",
        "Options": [
            "a) 2 8 7 4 9 0 5 1 6 3",
            "b) 2 7 4 9 8 0 5 1 6 3",
            "c) 2 4 9 0 5 7 8 1 6 3",
            "d) 2 8 7 0 5 1 6 9 4 3"
        ],
        "Answer": "Answer: a\nExplanation: The suffix array of the string statistics will be:\n2 atistics\n8 cs\n7 ics\n4 istics\n9 s\n0 statistics\n5 stics\n1 tatistics\n6 tics\n3 tistics\nIn Suffix array, we only store the indices of suffixes. So, correct option is 2 8 7 4 9 0 5 1 6 3."
    },
    {
        "id": 286,
        "Question": "Suffix array can be created by performing __________ traversal of a suffix tree.",
        "Options": [
            "a) breadth-first",
            "b) level order",
            "c) depth-first",
            "d) either breadth-first or level order"
        ],
        "Answer": "Answer: c\nExplanation: A suffix tree is a trie, which contains all the suffixes of the given string as their keys and positions in the string as their values. So, we can construct a suffix array by performing the depth-first traversal of a suffix tree."
    },
    {
        "id": 287,
        "Question": "If comparison based sorting algorithm is used construct the suffix array, then what will be time required to construct the suffix array?",
        "Options": [
            "a) O(nlogn)",
            "b) O(n2)",
            "c) O(n2logn)",
            "d) O(n2) + O(logn)"
        ],
        "Answer": "Answer: b\nExplanation: Suffix arrays are more space efficient than the suffix trees as they just store the original string and an array of integer. But working with suffix tree is faster than that of the suffix array."
    },
    {
        "id": 288,
        "Question": "What will be the suffix array of the string “engineering”?",
        "Options": [
            "a) 2 3 8 4 9 1 7 5 0 6 10",
            "b) 5 0 6 1 4 9 1 7 0 2 3 8",
            "c) 5 0 6 10 2 4 9 1 7 3 8",
            "d) 5 0 6 10 2 3 8 4 9 1 7"
        ],
        "Answer": "Answer: c\nExplanation: On average comparison based sorting algorithms require O(nlogn) comparisons. But comparing a suffix takes O(n). So, overall time to construct the suffix array will be O(nlogn) * O(n) = O(n2logn)."
    },
    {
        "id": 289,
        "Question": "LCP array and ______ is used to construct suffix tree.",
        "Options": [
            "a) Hash tree",
            "b) Hash trie",
            "c) Suffix array",
            "d) Balanced tree"
        ],
        "Answer": "Answer: d\nExplanation: Correct choice is : 5 0 6 10 2 3 8 4 9 1 7.\nBecause the suffix array formed will be: 5 eering 0 engineering 6 ering 10 g 2 gineering 3 ineering 8 ing 4 neering 9 ng 1 ngineering 7 ring."
    },
    {
        "id": 290,
        "Question": "What is the time required to locate the occurrences of a pattern P of length m in a string of length n using suffix array?",
        "Options": [
            "a) O(nm)",
            "b) O(n2)",
            "c) O(mnlogn)",
            "d) O(mlogn)"
        ],
        "Answer": "Answer: c\nExplanation: Suffix tree can be created using an LCP array and a suffix array. If we are given a string of length (n + 1) and its suffix array and LCP array, we can construct the suffix tree in linear time i.e in O(n) time.  "
    },
    {
        "id": 291,
        "Question": "What is the order of a matrix?",
        "Options": [
            "a) number of rows X number of columns",
            "b) number of columns X number of rows",
            "c) number of rows X number of rows",
            "d) number of columns X number of columns"
        ],
        "Answer": "Answer: a\nExplanation: The order of the matrix is the number of rows X number of columns."
    },
    {
        "id": 292,
        "Question": "Which of the following property does not hold for matrix multiplication?",
        "Options": [
            "a) Associative",
            "b) Distributive",
            "c) Commutative",
            "d) Additive Inverse"
        ],
        "Answer": "Answer: c\nExplanation: In matrix multiplication, AB != BA"
    },
    {
        "id": 293,
        "Question": "How do you allocate a matrix using a single pointer in C?(r and c are the number of rows and columns respectively)",
        "Options": [
            "a) int *arr = malloc(r * c * sizeof(int));",
            "b) int *arr = (int *)malloc(r * c * sizeof(int));",
            "c) int *arr = (int *)malloc(r + c * sizeof(int));",
            "d) int *arr = (int *)malloc(r * c * sizeof(arr));"
        ],
        "Answer": "Answer: b\nExplanation: Total number of elements in the matrix will be r*c"
    },
    {
        "id": 294,
        "Question": "5. What does the following piece of code do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> row<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>  \n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> column<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span>\n            sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Normal of a matrix",
            "b) Trace of a matrix",
            "c) Square of a matrix",
            "d) Transpose of a matrix"
        ],
        "Answer": "Answer: a\nExplanation: The corresponding elements from the row and column are multiplied and a cumulative sum is formed."
    },
    {
        "id": 295,
        "Question": "Which of the following don’t use matrices?",
        "Options": [
            "a) In solving linear equations",
            "b) Image processing",
            "c) Graph theory",
            "d) Sorting numbers"
        ],
        "Answer": "Answer: b\nExplanation: Trace of a matrix is the sum of the principal diagonal elements."
    },
    {
        "id": 296,
        "Question": "Which of the following is an advantage of matrices?",
        "Options": [
            "a) Internal complexity",
            "b) Searching through a matrix is complex",
            "c) Not space efficient",
            "d) Graph Plotting"
        ],
        "Answer": "Answer: b\nExplanation: It starts with the first element and continues in the same row until the end of row is reached and then proceeds with the next row. C follows row-major order."
    },
    {
        "id": 297,
        "Question": "Matrix A when multiplied with Matrix C gives the Identity matrix I, what is C?",
        "Options": [
            "a) Identity matrix",
            "b) Inverse of A",
            "c) Square of A",
            "d) Transpose of A"
        ],
        "Answer": "Answer: d\nExplanation: It starts with the first element and continues in the same column until the end of column is reached and then proceeds with the next column. Fortran follows column-major order."
    },
    {
        "id": 298,
        "Question": "Which matrix has most of the elements (not all) as Zero?",
        "Options": [
            "a) Identity Matrix",
            "b) Unit Matrix",
            "c) Sparse Matrix",
            "d) Zero Matrix"
        ],
        "Answer": "Answer: c\nExplanation: Sparse Matrix is a matrix in which most of the elements are Zero. Identity Matrix is a matrix in which all principle diagonal elements are 1 and rest of the elements are Zero. Unit Matrix is also called Identity Matrix. Zero Matrix is a matrix in which all the elements are Zero. "
    },
    {
        "id": 299,
        "Question": "What is the relation between Sparsity and Density of a matrix?",
        "Options": [
            "a) Sparsity = 1 – Density",
            "b) Sparsity = 1 + Density",
            "c) Sparsity = Density*Total number of elements",
            "d) Sparsity = Density/Total number of elements"
        ],
        "Answer": "Answer: a\nExplanation: Sparsity of a matrix is equal to 1 minus Density of the matrix. The Sparsity of matrix is defined as the total number of Zero Valued elements divided total number of elements."
    },
    {
        "id": 300,
        "Question": "Who coined the term Sparse Matrix?",
        "Options": [
            "a) Harry Markowitz",
            "b) James Sylvester",
            "c) Chris Messina",
            "d) Arthur Cayley"
        ],
        "Answer": "Answer: a\nExplanation: Harry Markowitz coined the term Sparse Matrix. James Sylvester coined the term Matrix. Chris Messina coined the term Hashtag and Arthur Cayley developed the algebraic aspects of a matrix."
    },
    {
        "id": 301,
        "Question": "The matrix contains m rows and n columns. The matrix is called Sparse Matrix if ________",
        "Options": [
            "a) Total number of Zero elements > (m*n)/2",
            "b) Total number of Zero elements = m + n",
            "c) Total number of Zero elements = m/n",
            "d) Total number of Zero elements = m-n"
        ],
        "Answer": "Answer: a\nExplanation: In Addition, the matrix is traversed linearly, hence it has the time complexity of O(n) where n is the number of non-zero elements in the largest matrix amongst two."
    },
    {
        "id": 302,
        "Question": "Which of the following is not the method to represent Sparse Matrix?",
        "Options": [
            "a) Dictionary of Keys",
            "b) Linked List",
            "c) Array",
            "d) Heap"
        ],
        "Answer": "Answer: a\nExplanation: For matrix to be Sparse Matrix, it should contain Zero elements more than the non-zero elements. Total elements of the given matrix is m*n. So if Total number of Zero elements > (m*n)/2, then the matrix is called Sparse Matrix."
    },
    {
        "id": 303,
        "Question": "Which one of the following is a Special Sparse Matrix?",
        "Options": [
            "a) Band Matrix",
            "b) Skew Matrix",
            "c) Null matrix",
            "d) Unit matrix"
        ],
        "Answer": "Answer: d\nExplanation: Heap is not used to represent Sparse Matrix while in Dictionary, rows and column numbers are used as Keys and values as Matrix entries, Linked List is used with each node of Four fields (Row, Column, Value, Next Node) (2D array is used to represent the Sparse Matrix with three fields (Row, Column, Value)."
    },
    {
        "id": 304,
        "Question": "In what way the Symmetry Sparse Matrix can be stored efficiently?",
        "Options": [
            "a) Heap",
            "b) Binary tree",
            "c) Hash table",
            "d) Adjacency List"
        ],
        "Answer": "Answer: b\nExplanation: Sparse Matrix is a matrix with most of the elements as Zero elements while Dense Matrix is a matrix with most of the elements as Non-Zero element."
    },
    {
        "id": 305,
        "Question": "What does the number of inversions in an array indicate?",
        "Options": [
            "a) mean value of the elements of array",
            "b) measure of how close or far the array is from being sorted",
            "c) the distribution of values in the array",
            "d) median value of the elements of array"
        ],
        "Answer": "Answer: b\nExplanation: The number of inversions in an array indicates how close or far the array is from being completely sorted. The array is sorted if the number of inversions are 0."
    },
    {
        "id": 306,
        "Question": "How many inversions does a sorted array have?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) cannot be determined"
        ],
        "Answer": "Answer: a\nExplanation: When an array is sorted then there cannot be any inversion in the array. As the necessary condition for an inversion is arr[i]>arr[j] and i<j."
    },
    {
        "id": 307,
        "Question": "What is the condition for two elements arr[i] and arr[j] to form an inversion?",
        "Options": [
            "a) arr[i]<arr[j] ",
            "b) i < j",
            "c) arr[i] < arr[j] and i < j",
            "d) arr[i] > arr[j] and i < j"
        ],
        "Answer": "Answer: d\nExplanation: For two elements to form an inversion the necessary condition is arr[i] > arr[j] and i < j. The number of inversions in an array indicate how close or far the array is from being completely sorted."
    },
    {
        "id": 308,
        "Question": "Under what condition the number of inversions in an array are maximum?",
        "Options": [
            "a) when the array is sorted",
            "b) when the array is reverse sorted",
            "c) when the array is half sorted",
            "d) depends on the given array"
        ],
        "Answer": "Answer: b\nExplanation: Number of inversions in an array are maximum when the given array is reverse sorted. As the necessary condition for an inversion is arr[i]>arr[j] and i<j."
    },
    {
        "id": 309,
        "Question": "Under what condition the number of inversions in an array are minimum?",
        "Options": [
            "a) when the array is sorted",
            "b) when the array is reverse sorted",
            "c) when the array is half sorted",
            "d) depends on the given array"
        ],
        "Answer": "Answer: a\nExplanation: Number of inversions in an array are minimum when the given array is sorted. As the necessary condition for an inversion is arr[i]>arr[j] and i<j."
    },
    {
        "id": 310,
        "Question": "How many inversions are there in the array arr = {1,5,4,2,3}?",
        "Options": [
            "a) 0",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: The necessary condition for an inversion is arr[i]>arr[j] and i<j. So there are 5 inversions in the array."
    },
    {
        "id": 311,
        "Question": "Which of the following form inversion in the array arr = {1,5,4,2}?",
        "Options": [
            "a) (5,4), (5,2)",
            "b) (5,4), (5,2), (4,2)",
            "c) (1,5), (1,4), (1,2)",
            "d) (1,5)"
        ],
        "Answer": "Answer: b\nExplanation: The necessary condition for an inversion is arr[i]>arr[j] and i<j. So there are 3 inversions in the array. These are (5,4), (5,2), (4,2)."
    },
    {
        "id": 312,
        "Question": "9. What is the time complexity of the following code that determines the number of inversions in an array?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"kw4\">int</span> InvCount<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> \n\t\t\t\tcount<span class=\"sy0\">++;</span> \n&nbsp;\n\t<span class=\"kw1\">return</span> count<span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(n)",
            "b) O(n log n)",
            "c) O(n2)",
            "d) O(log n)"
        ],
        "Answer": "Answer: b\nExplanation: To determine the number of inversions we apply a nested loop and compare the value of each element with all the elements present after it. Then the count of number of inversions is counted and returned to the main function."
    },
    {
        "id": 313,
        "Question": "What is the time complexity of the code that uses merge sort for determining the number of inversions in an array?",
        "Options": [
            "a) O(n2)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: c\nExplanation: The time complexity of the given code is O(n2). It is due to the presence of nested loop."
    },
    {
        "id": 314,
        "Question": "What is the time complexity of the code that uses self balancing BST for determining the number of inversions in an array?",
        "Options": [
            "a) O(n2)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: The time complexity of the code that determines the number of inversions in an array using merge sort is O(n log n) which is lesser than the time complexity taken by the code that uses loops."
    },
    {
        "id": 315,
        "Question": "What is the space complexity of the code that uses merge sort for determining the number of inversions in an array?",
        "Options": [
            "a) O(n)",
            "b) O(log n)",
            "c) O(1)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: d\nExplanation: The code of merge sort is slightly modified in order to calculate the number of inversions in an array. So the time complexity of merge sort remains unaffected and hence the time complexity is O(n log n)."
    },
    {
        "id": 316,
        "Question": "What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?",
        "Options": [
            "a) 2, 1, 3, 4, 5",
            "b) 3, 4, 5, 1, 2",
            "c) 4, 5, 1, 2, 3",
            "d) 1, 2, 3, 5, 4"
        ],
        "Answer": "Answer: b\nExplanation: When the given array is rotated by 2 then the resulting array will be\nRotation 1: {2,3,4,5,1}\nRotation 2: {3,4,5,1,2}.\nThus, the final array is {3,4,5,1,2}.\n"
    },
    {
        "id": 317,
        "Question": "2. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\nusing namespace std<span class=\"sy0\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>   \n    <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> d<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> temp<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++,</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw4\">int</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++,</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>temp<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    cout<span class=\"sy0\">&lt;&lt;</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5 6 1 2 3 4",
            "b) 6 5 4 3 1 2",
            "c) 3 4 5 6 1 2",
            "d) error"
        ],
        "Answer": "Answer: a\nExplanation: The given code rotates the given array by 4. It does so by using an array temp[] which stores the first d elements and then shift them to the end of the array. So the output will be 5 6 1 2 3 4."
    },
    {
        "id": 318,
        "Question": "3. What will be the time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\nusing namespace std<span class=\"sy0\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>   \n    <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> d<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> temp<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++,</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw4\">int</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++,</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>temp<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    cout<span class=\"sy0\">&lt;&lt;</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(d)",
            "b) O(n)",
            "c) O(n2)",
            "d) O(n*d)"
        ],
        "Answer": "Answer: b\nExplanation: The given code rotates an input array by d. The longest loop in the code takes n iterations so the time complexity will be O(n)."
    },
    {
        "id": 319,
        "Question": "4. What will be the auxiliary space complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\nusing namespace std<span class=\"sy0\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>   \n    <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> d<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> temp<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++,</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw4\">int</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span>d<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++,</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>temp<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n&nbsp;\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    cout<span class=\"sy0\">&lt;&lt;</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(d)",
            "d) O(n*d)"
        ],
        "Answer": "Answer: c\nExplanation: The given code rotates an input array by d. It does so by using an auxiliary array temp[] which stores first d elements of the original array. So the auxiliary space complexity will be O(d)."
    },
    {
        "id": 320,
        "Question": "5. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> func1<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> \n&nbsp;\n\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> d<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tfunc1<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n&nbsp;\n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4 5 1 2 3",
            "b) 3 4 5 1 2",
            "c) 5 4 3 1 2",
            "d) error"
        ],
        "Answer": "Answer: a\nExplanation: The given code rotates the input array by 3. It does so by rotating the elements one by one until the desired rotation is achieved. So the output will be 4 5 1 2 3."
    },
    {
        "id": 321,
        "Question": "6. What will be the time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func1<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> \n&nbsp;\n\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> d<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tfunc1<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n    <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>\n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(n*d)",
            "b) O(n)",
            "c) O(d)",
            "d) O(n2)"
        ],
        "Answer": "Answer: a\nExplanation: The given code rotates the input array by d. It does so by rotating the elements one by one until the desired rotation is achieved. Each element takes O(n) time for rotation and there are d such elements in the array. So the time complexity would be O(n*d)."
    },
    {
        "id": 322,
        "Question": "7. What will be the auxiliary space complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func1<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> \n&nbsp;\n\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> d<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tfunc1<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n    <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>\n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(d)",
            "d) O(n*d)"
        ],
        "Answer": "Answer: a\nExplanation: The given code rotates the input array by d. It does so by rotating the elements one by one until the desired rotation is achieved. It does not require any auxiliary array for this purpose. So the auxiliary space complexity will be O(1)."
    },
    {
        "id": 323,
        "Question": "9. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func1<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> right<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;</span> right<span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> \n\t\tleft<span class=\"sy0\">++;</span> \n\t\tright<span class=\"sy0\">--;</span> \n\t<span class=\"br0\">}</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> d<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\tfunc1<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> d<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc1<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc1<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\tcout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3 2 1 4 5",
            "b) 3 4 5 1 2",
            "c) 5 4 3 2 1",
            "d) error"
        ],
        "Answer": "Answer: a\nExplanation: The auxiliary space requirement of the mentioned algorithm is O(1). So it qualifies to be an in place algorithm."
    },
    {
        "id": 324,
        "Question": "What will be the auxiliary space complexity of the code to rotate an array by using the reversal algorithm (d = number of rotations)?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(d)",
            "d) O(n*d)"
        ],
        "Answer": "Answer: b\nExplanation: The given code rotates the input array by 2. It does so by applying a reversal algorithm to different segments of the array. First d elements and the rest of the array is reversed individually. Then the whole array is reversed which gives us the desired rotated array. So the output will be 3 4 5 1 2."
    },
    {
        "id": 325,
        "Question": "Which of the following is the predefined function for array reversal in C++?",
        "Options": [
            "a) rotate()",
            "b) arr_rotate()",
            "c) array_rotate()",
            "d) rot()"
        ],
        "Answer": "Answer: a\nExplanation: The reversal algorithm for rotating an array does not require any auxiliary space. So the auxiliary space complexity will be O(1). "
    },
    {
        "id": 326,
        "Question": "How many arguments are required by the predefined function rotate() in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: The predefined function for rotating an array is rotate() in C++. It is defined under the library algorithm and requires 3 arguments."
    },
    {
        "id": 327,
        "Question": "Predefined function rotate() in C++ is available under which header file?",
        "Options": [
            "a) math",
            "b) stdio",
            "c) stdlib",
            "d) algorithm"
        ],
        "Answer": "Answer: c\nExplanation: The predefined function for rotating an array is rotate() in C++ which comes under the library called an algorithm. It requires 3 arguments."
    },
    {
        "id": 328,
        "Question": "Which of the following algorithm to rotate an array has the maximum time complexity?",
        "Options": [
            "a) rotate elements one by one",
            "b) juggling algorithm",
            "c) reversal algorithm",
            "d) using a temporary array"
        ],
        "Answer": "Answer: d\nExplanation: The predefined function for rotating an array is rotate() in C++ which comes under the library called algorithm. It requires 3 arguments the first being the pointer to the starting index of the array and the last being the pointer to the last index of the array. The middle argument is the pointer to the element that becomes the first element in the rotated array."
    },
    {
        "id": 329,
        "Question": "What is the time complexity of the juggling algorithm to rotate an array?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(d)",
            "d) O(n*d)"
        ],
        "Answer": "Answer: a\nExplanation: The maximum time complexity is required by the algorithm that rotates elements one by one. It requires O(n*d) time."
    },
    {
        "id": 330,
        "Question": "What will be the resulting array after reversing arr[]={3,5,4,2}?",
        "Options": [
            "a) 2,3,5,4",
            "b) 4,2,3,5",
            "c) 5,4,2,3",
            "d) 2,4,5,3"
        ],
        "Answer": "Answer: d\nExplanation: The resulting array upon reversing after reversal is arr[]={2,4,5,3}. We can implement an algorithm for this purpose in various possible ways."
    },
    {
        "id": 331,
        "Question": "How many swaps are required for reversing an array having n elements where n is an odd number?",
        "Options": [
            "a) (n-1) / 2",
            "b) n/2",
            "c) (n/2) – 1",
            "d) (n+1)/2"
        ],
        "Answer": "Answer: a\nExplanation: The number of swaps required for an odd element and an even element array is different because in an odd element array the position of the middle element does not need to be changed. So the number of swaps will be (n-1) / 2."
    },
    {
        "id": 332,
        "Question": "How many swaps are required for reversing an array having n elements where n is an even number?",
        "Options": [
            "a) (n-1) / 2",
            "b) n/2",
            "c) (n/2) – 1",
            "d) (n+1)/2"
        ],
        "Answer": "Answer: b\nExplanation: The number of swaps required for an odd element and an even element array is different because in an odd element array the position of the middle element does not need to be changed. So number of swaps required will be n/2."
    },
    {
        "id": 333,
        "Question": "4. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> right<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>     \n\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;</span> right<span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> \n\t\tleft<span class=\"sy0\">++;</span> \n\t\tright<span class=\"sy0\">--;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"br0\">}</span>\t \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n    cout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5 1 4 3",
            "b) 3 5 1 4",
            "c) 5 3 4 1",
            "d) error"
        ],
        "Answer": "Answer: c\nExplanation: The given code reverses the input array and then prints the resulting array. So the output of the given code will be 5 3 4 1."
    },
    {
        "id": 334,
        "Question": "5. What will be the time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> right<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    \t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;</span> right<span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> \n\t\tleft<span class=\"sy0\">++;</span> \n\t\tright<span class=\"sy0\">--;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"br0\">}</span>\t \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n    cout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(n)",
            "b) O(log n)",
            "c) O(1)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: The given code reverses the input array and then prints the resulting array. So the time complexity of the given code will linearly vary with the number of elements in the array and thus the time complexity will be O(n)."
    },
    {
        "id": 335,
        "Question": "6. What will be the auxiliary space requirement of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> right<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>     \n\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;</span> right<span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t\tarr<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> \n\t\tleft<span class=\"sy0\">++;</span> \n\t\tright<span class=\"sy0\">--;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"br0\">}</span>\t\n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n    cout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: The given code reverses the input array and then prints the resulting array. The given code does not use any extra array to complete this task thus the auxiliary space requirement is O(1)."
    },
    {
        "id": 336,
        "Question": "7. What will be the output of the following code ?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> right<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&gt;=</span> right<span class=\"br0\">)</span> \n    <span class=\"kw1\">return</span><span class=\"sy0\">;</span> \n&nbsp;\n    <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"sy0\">;</span>  \n    arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n    arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> \n&nbsp;\n    func<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> left <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> right <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  \n<span class=\"br0\">}</span>      \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n    cout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4",
            "b) 4 3 2 1",
            "c) 1 4 2 3",
            "d) 4 1 2 3"
        ],
        "Answer": "Answer: b\nExplanation: The given code reverses the original array and prints the resulting array. Recursive function is used to reverse the array."
    },
    {
        "id": 337,
        "Question": "8. What will be the time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> right<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&gt;=</span> right<span class=\"br0\">)</span> \n    <span class=\"kw1\">return</span><span class=\"sy0\">;</span> \n&nbsp;\n    <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"sy0\">;</span>  \n    arr<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n    arr<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> \n&nbsp;\n    func<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> left <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> right <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  \n<span class=\"br0\">}</span>      \n&nbsp;\n<span class=\"kw4\">void</span> printArray<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n    cout <span class=\"sy0\">&lt;&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tprintArray<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: b\nExplanation: The given code reverses the original array and prints the resulting array. The number of swaps is proportional to the number of elements in the array so it requires a time complexity of O(n)."
    },
    {
        "id": 338,
        "Question": "9. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> k<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> k<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tswap<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>k<span class=\"sy0\">-</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"br0\">}</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3 2 1 4 5",
            "b) 5 4 3 2 1",
            "c) 1 2 5 4 3",
            "d) error"
        ],
        "Answer": "Answer: a\nExplanation: The given code reverses only a specified segment of the input array. As the value of k is given to be 3 in the code thus only the first three elements of the array will be reversed."
    },
    {
        "id": 339,
        "Question": "10. What will be the time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> k<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> k<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tswap<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>k<span class=\"sy0\">-</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"br0\">}</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(k)",
            "b) O(n)",
            "c) O(k log k)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: The given code reverses only a specified segment of the input array. This segment is decided by the value of k so the time complexity of the code will be O(k)."
    },
    {
        "id": 340,
        "Question": "Which of the following is the predefined function for array reversal in C++ ?",
        "Options": [
            "a) reverse()",
            "b) arr_reverse()",
            "c) array_reverse()",
            "d) rev()"
        ],
        "Answer": "Answer: b\nExplanation: Array rotation and array reversal are different operations and thus they give different outputs when applied to the same array."
    },
    {
        "id": 341,
        "Question": "Which of the following is the predefined function for array reversal in javascript?",
        "Options": [
            "a) reverse()",
            "b) arr_reverse()",
            "c) array_reverse()",
            "d) rev()"
        ],
        "Answer": "Answer: a\nExplanation: The predefined function for reversing an array is reverse() in C++. It is defined under the library algorithm and requires 2 arguments."
    },
    {
        "id": 342,
        "Question": "Predefined function reverse() in C++ is available under which header file?",
        "Options": [
            "a) math",
            "b) stdio",
            "c) stdlib",
            "d) algorithm"
        ],
        "Answer": "Answer: a\nExplanation: The predefined function for reversing an array is reverse() in javascript. It does not requires any argument. "
    },
    {
        "id": 343,
        "Question": "What will be the minimum number of jumps required to reach the end of the array arr[] = {1,3,6,3,6,8,5}?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) not possible to reach the end"
        ],
        "Answer": "Answer: c\nExplanation: Each element of the array represents the maximum number of steps that can be taken forward from that element. If the first element is 0 then it is not possible to reach the end."
    },
    {
        "id": 344,
        "Question": "What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) not possible to reach the end"
        ],
        "Answer": "Answer: d\nExplanation: Each element of the array represents the maximum number of steps that can be taken forward from that element. So as the first element here is 0 so we cannot move any further from the first element. Thus, it is not possible to reach the end of the array."
    },
    {
        "id": 345,
        "Question": "3. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> e<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> e<span class=\"br0\">)</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n\t<span class=\"kw1\">return</span> INT_MAX<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> min <span class=\"sy0\">=</span> INT_MAX<span class=\"sy0\">;</span> \n<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> e <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;=</span> s <span class=\"sy0\">+</span> arr<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> jumps <span class=\"sy0\">=</span> func<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>jumps <span class=\"sy0\">!=</span> INT_MAX <span class=\"sy0\">&amp;&amp;</span> jumps <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> min<span class=\"br0\">)</span> \n\t\tmin <span class=\"sy0\">=</span> jumps <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n<span class=\"kw1\">return</span> min<span class=\"sy0\">;</span> \n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tcout <span class=\"sy0\">&lt;&lt;</span> func<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) error"
        ],
        "Answer": "Answer: c\nExplanation: The given code finds the minimum number of steps required to reach the end of the array by using recursion. So the output will be 3."
    },
    {
        "id": 346,
        "Question": "4. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> min<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> y<span class=\"br0\">)</span><span class=\"sy0\">?</span> x<span class=\"sy0\">:</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n&nbsp;\n\t<span class=\"kw4\">int</span> <span class=\"sy0\">*</span>jump <span class=\"sy0\">=</span> new <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n\t\t<span class=\"kw1\">return</span> INT_MAX<span class=\"sy0\">;</span> \n&nbsp;\n\tjump<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\tjump<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> INT_MAX<span class=\"sy0\">;</span> \n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\t<span class=\"br0\">{</span> \n\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> j <span class=\"sy0\">+</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> jumps<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> INT_MAX<span class=\"br0\">)</span> \n\t\t\t<span class=\"br0\">{</span> \n\t\t\t\tjump<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> min<span class=\"br0\">(</span>jump<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> jump<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span> \n\t\t\t<span class=\"br0\">}</span> \n\t\t<span class=\"br0\">}</span> \n\t<span class=\"br0\">}</span> \n\t<span class=\"kw1\">return</span> jump<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tcout<span class=\"sy0\">&lt;&lt;</span> func<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) error"
        ],
        "Answer": "Answer: c\nExplanation: The given code finds the minimum number of steps required to reach the end of the array by using dynamic programming. So the output will be 3."
    },
    {
        "id": 347,
        "Question": "5. What will be the time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> min<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> y<span class=\"br0\">)</span><span class=\"sy0\">?</span> x<span class=\"sy0\">:</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n&nbsp;\n\t<span class=\"kw4\">int</span> <span class=\"sy0\">*</span>jump <span class=\"sy0\">=</span> new <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n\t\t<span class=\"kw1\">return</span> INT_MAX<span class=\"sy0\">;</span> \n&nbsp;\n\tjump<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\tjump<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> INT_MAX<span class=\"sy0\">;</span> \n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\t<span class=\"br0\">{</span> \n\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> j <span class=\"sy0\">+</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> jumps<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> INT_MAX<span class=\"br0\">)</span> \n\t\t\t<span class=\"br0\">{</span> \n\t\t\t\tjump<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> min<span class=\"br0\">(</span>jump<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> jump<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span> \n\t\t\t<span class=\"br0\">}</span> \n\t\t<span class=\"br0\">}</span> \n\t<span class=\"br0\">}</span> \n\t<span class=\"kw1\">return</span> jump<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tcout<span class=\"sy0\">&lt;&lt;</span> func<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(n log n)",
            "b) O(n)",
            "c) O(n1/2)",
            "d) O(n2)"
        ],
        "Answer": "Answer: d\nExplanation: The given code finds the minimum number of steps required to reach the end of an array by using dynamic programming. As there is a nested loop in the code so the time complexity will be O(n2)."
    },
    {
        "id": 348,
        "Question": "What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) not possible to reach the end"
        ],
        "Answer": "Answer: d\nExplanation: Each element of the array represents the maximum number of steps that can be taken forward from that element. So we cannot move any further after reaching the second element hence it is impossible to reach the end of the array."
    },
    {
        "id": 349,
        "Question": "In how many different ways we can reach the end of the array arr[]={1,3,5,8,9}?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: It is possible to find the minimum number of steps to reach the end of an array in O(n) time complexity. So it is the fastest possible method of finding the minimum number of steps to reach the end of an array."
    },
    {
        "id": 350,
        "Question": "9. What will be the output of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>  \n\t<span class=\"kw4\">int</span> count<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t<span class=\"kw3\">memset</span><span class=\"br0\">(</span>count<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> \n\t\t\tcount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">++;</span> \n&nbsp;\n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&lt;=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n&nbsp;\n\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>count<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \n\t\t\t\tcount<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> count<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n&nbsp;\n\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n\t\t\tcount<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 4 4 2 1 0",
            "d) 4 2 2 0 1"
        ],
        "Answer": "Answer: d\nExplanation: There are 4 possible ways in which we can reach the end of the array. The possible paths are – 1->3->5->8->9, 1->3->5->9, 1->3->8->9, 1->3->9."
    },
    {
        "id": 351,
        "Question": "10. What will be the worst case time complexity of the following code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\nusing namespace std<span class=\"sy0\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>  \t\n\t<span class=\"kw4\">int</span> count<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n\t<span class=\"kw3\">memset</span><span class=\"br0\">(</span>count<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n&nbsp;\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> \n\t\t\tcount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">++;</span> \n&nbsp;\n\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&lt;=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n&nbsp;\n\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>count<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \n\t\t\t\tcount<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> count<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span> \n&nbsp;\n\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n\t\t\tcount<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> \n\t<span class=\"br0\">}</span> \n&nbsp;\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> \n\t\tcout <span class=\"sy0\">&lt;&lt;</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span> \n&nbsp;\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> \n\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\tfunc<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(n1/2)",
            "b) O(n)",
            "c) O(n3/2)",
            "d) O(n2)"
        ],
        "Answer": "Answer: c\nExplanation: The given code finds the number of possible ways to reach the end of an array from each element. So the output will be 4 4 2 1 0."
    },
    {
        "id": 352,
        "Question": "What is the minimum possible time complexity to find the number of steps to reach the end of an array?",
        "Options": [
            "a) O(n)",
            "b) O(n2)",
            "c) O(n3/2)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: The given code finds the number of possible ways to reach the end of an array from each element. By observing the nested loop in the code we can say that the worst case time complexity will be O(n2)."
    },
    {
        "id": 353,
        "Question": "What is a skip list?",
        "Options": [
            "a) a linkedlist with size value in nodes",
            "b) a linkedlist that allows faster search within an ordered sequence",
            "c) a linkedlist that allows slower search within an ordered sequence",
            "d) a tree which is in the form of linked list"
        ],
        "Answer": "Answer: b\nExplanation: It is a datastructure, which can make search in sorted linked list faster in the same way as binary search tree and sorted array (using binary search) are faster."
    },
    {
        "id": 354,
        "Question": "Skip lists are similar to which of the following datastructure?",
        "Options": [
            "a) stack",
            "b) heap",
            "c) binary search tree",
            "d) balanced binary search tree"
        ],
        "Answer": "Answer: a\nExplanation: Let us call the nodes 20, 30, 40 as top lines and the nodes between them as normal lines. the advantage of skip lists is we can skip all the elements between the top line elements as required."
    },
    {
        "id": 355,
        "Question": " What is the time complexity improvement of skip lists from linked lists in insertion and deletion?",
        "Options": [
            "a) O(n) to O(logn) where n is number of elements",
            "b) O(n) to O(1) where n is number of elements",
            "c) no change",
            "d) O(n) to O(n2) where n is number of elements"
        ],
        "Answer": "Answer: d\nExplanation: Skip lists have the same asymptotic time complexity as balanced binary search tree. For a Balanced Binary Search Tree, we skip almost half of the nodes after one comparison with root element. The same thing done in the skip lists. Hence skip lists are similar to balanced Binary search trees."
    },
    {
        "id": 356,
        "Question": "To which datastructure are skip lists similar to in terms of time complexities in worst and best cases?",
        "Options": [
            "a) balanced binary search trees",
            "b) binary search trees",
            "c) binary trees",
            "d) linked lists"
        ],
        "Answer": "Answer: a\nExplanation: In Skip list we skip some of the elements by adding more layers. In this the skip list resembles balanced binary search trees. Thus we can change the time complexity from O (n) to O (logn)"
    },
    {
        "id": 357,
        "Question": "The nodes in a skip list may have many forward references. their number is determined",
        "Options": [
            "a) probabilistically",
            "b) randomly",
            "c) sequentially",
            "d) orthogonally"
        ],
        "Answer": "Answer: a\nExplanation: Skip lists are similar to any randomly built binary search tree. a BST is balanced because to avoid skew tree formations in case of sequential input and hence achieve O(logn) in all 3 cases. now skip lists can gurantee that O(logn) complexity for any input."
    },
    {
        "id": 358,
        "Question": "How to maintain multi-level skip list properties when insertions and deletions are done?",
        "Options": [
            "a) design each level of a multi-level skip list with varied probabilities",
            "b) that cannot be maintained",
            "c) rebalancing of lists",
            "d) reconstruction"
        ],
        "Answer": "Answer: a\nExplanation: The number of forward references are determined probabilistically, that is why skip list is a probabilistic algorithm."
    },
    {
        "id": 359,
        "Question": "What is indexed skip list?",
        "Options": [
            "a) it stores width of link in place of element",
            "b) it stores index values",
            "c) array based linked list",
            "d) indexed tree"
        ],
        "Answer": "Answer: a\nExplanation: To achieve above operations augment with few additional stuff like partial counts."
    },
    {
        "id": 360,
        "Question": "The self organizing list improves the efficiency of _______",
        "Options": [
            "a) binary search",
            "b) jump search",
            "c) sublist search",
            "d) linear search"
        ],
        "Answer": "Answer: d\nExplanation: Linear search in a linked list has time complexity O(n). To improve the efficiency of the linear search the self organizing list is used. A self-organizing list improves the efficiency of linear search by moving more frequently accessed elements towards the head of the list."
    },
    {
        "id": 361,
        "Question": "Which of the following is true about the Move-To-Front Method for rearranging nodes?",
        "Options": [
            "a) node with highest access count is moved to head of the list",
            "b) requires extra storage",
            "c) may over-reward infrequently accessed nodes",
            "d) requires a counter for each node"
        ],
        "Answer": "Answer: c\nExplanation: In Move-To-front Method the element which is searched is moved to the head of the list. And if a node is searched even once, it is moved to the head of the list and given maximum priority even if it is not going to be accessed frequently in the future. Such a situation is referred to as over-rewarding."
    },
    {
        "id": 362,
        "Question": "What technique is used in Transpose method?",
        "Options": [
            "a) searched node is swapped with its predecessor",
            "b) node with highest access count is moved to head of the list",
            "c) searched node is swapped with the head of list",
            "d) searched nodes are rearranged based on their proximity to the head node"
        ],
        "Answer": "Answer: a\nExplanation: In Transpose method, if any node is searched, it is swapped with the node in front unless it is the head of the list. So, in Transpose method searched node is swapped with its predecessor."
    },
    {
        "id": 363,
        "Question": "The worst case running time of a linear search on the self organizing list is ____",
        "Options": [
            "a) O(1)",
            "b) O(logn)",
            "c) O(n)",
            "d) O(n2)"
        ],
        "Answer": "Answer: c\nExplanation: Worst case occurs when the element is located at the very end of list. So n comparisons must be made to the locate element. So the worst case running time of linear search on self organizing list is O(n)."
    },
    {
        "id": 364,
        "Question": "Which of the following data structure is preferred to have lesser search time when the list size is small?",
        "Options": [
            "a) search tree",
            "b) sorted list",
            "c) self organizing list",
            "d) linked list"
        ],
        "Answer": "Answer: c\nExplanation: Self-organizing list is easy and simple to implement than search tree and it requires no additional space. So using self organizing list is preferred when list size is small."
    },
    {
        "id": 365,
        "Question": "In _____________ method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.",
        "Options": [
            "a) least recently used",
            "b) count",
            "c) traspose",
            "d) exchange"
        ],
        "Answer": "Answer: b\nExplanation: In the count method, the number of times a node was accessed is counted and is stored in a counter variable associated with each node. Then the nodes are arranged in descending order based on their access counts. And the node with highest access count is head of the list."
    },
    {
        "id": 366,
        "Question": "Symbol tables during compilation of program is efficiently implemented using __________",
        "Options": [
            "a) a singly linked list",
            "b) a doubly linked list",
            "c) a self organizing list",
            "d) an array"
        ],
        "Answer": "Answer: c\nExplanation: Self organizing list allows fast sequential search and it is simple to implement and requires no extra storage. Self-organizing list is used to implement the symbol table."
    },
    {
        "id": 367,
        "Question": "Which of the following method performs poorly when elements are accessed in sequential order?",
        "Options": [
            "a) count method",
            "b) move to front method",
            "c) transpose meth",
            "d) ordering method"
        ],
        "Answer": "Answer: b\nExplanation: Move-to-front method performs poorly when the elements are accessed in sequential order, especially if that sequential order is then repeated multiple times."
    },
    {
        "id": 368,
        "Question": "The self organizing list improves _____",
        "Options": [
            "a) average access time",
            "b) insertion",
            "c) deletion",
            "d) binary search"
        ],
        "Answer": "Answer: a\nExplanation: The self-organizing list rearranges the nodes based on the access probabilities of the nodes. So the required elements can be located efficiently. Therefore, self-organizing list is mainly used to improve the average access time."
    },
    {
        "id": 369,
        "Question": "Which of the following is not the rearranging method used to implement self-organizing lists?",
        "Options": [
            "a) count method",
            "b) move to front method",
            "c) ordering method",
            "d) least frequently used"
        ],
        "Answer": "Answer: d\nExplanation: Least frequently used is a buffer replacement policy, while other three are methods to reorder the nodes in the self-organizing lists based on their access probability."
    },
    {
        "id": 370,
        "Question": "What is xor linked list?",
        "Options": [
            "a) uses of bitwise XOR operation to decrease storage requirements for doubly linked lists",
            "b) uses of bitwise XOR operation to decrease storage requirements for linked lists",
            "c) uses of bitwise operations to decrease storage requirements for doubly linked lists",
            "d) just another form of linked list"
        ],
        "Answer": "Answer: a\nExplanation: Why we use bitwise XOR operation is to decrease storage requirements for doubly linked lists."
    },
    {
        "id": 371,
        "Question": "What does a xor linked list have?",
        "Options": [
            "a) every node stores the XOR of addresses of previous and next nodes",
            "b) actuall memory address of next node",
            "c) every node stores the XOR of addresses of previous and next two nodes",
            "d) every node stores xor 0 and the current node address"
        ],
        "Answer": "Answer: a\nExplanation: Every node stores the XOR of addresses."
    },
    {
        "id": 372,
        "Question": "What does first and last nodes of a xor linked lists contain ? (let address of first and last be A and B)",
        "Options": [
            "a) NULL xor A and B xor NULL",
            "b) NULL and NULL",
            "c) A and B",
            "d) NULL xor A and B"
        ],
        "Answer": "Answer: a\nExplanation: NULL xor A and B xor NULL."
    },
    {
        "id": 373,
        "Question": "Which of the following is an advantage of XOR list?",
        "Options": [
            "a) Almost of debugging tools cannot follow the XOR chain, making debugging difficult",
            "b) You need to remember the address of the previously accessed node in order to calculate the next node’s address",
            "c) In some contexts XOR of pointers is not defined",
            "d) XOR list decreases the space requirement in doubly linked list"
        ],
        "Answer": "Answer: d\nExplanation: XOR linked list stores the address of previous and next nodes by performing XOR operations. It requires single pointer to store both XOR address of next and previous nodes. Thus it reduces space. It is an advantage. But the main disadvantages are debugging tools cannot follow XOR chain, previous node address must be remembered to get next nodes and pointers are not defined accurately. "
    },
    {
        "id": 374,
        "Question": "Which of the following is not the properties of XOR lists?",
        "Options": [
            "a) X⊕X = 0",
            "b) X⊕0 = X",
            "c) (X⊕Y)⊕Z = X⊕(Y⊕Z)",
            "d) X⊕0 = 1"
        ],
        "Answer": "Answer: d\nExplanation: The important properties of XOR lists are X⊕X=0, X⊕0=X and (X⊕Y)⊕Z = X⊕(Y⊕Z)."
    },
    {
        "id": 375,
        "Question": "7. What’s wrong with this code which returns xor of two nodes address ?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"co1\">//struct is common userdefined datatype in c/c++ and class is it's alternative</span>\n&nbsp;\nstruct node<span class=\"sy0\">*</span> XOR <span class=\"br0\">(</span>struct node <span class=\"sy0\">*</span>a, struct node <span class=\"sy0\">*</span>b<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n    <span class=\"co1\">//this logic is used to fill the nodes with address of a xor linked list</span>\n    <span class=\"kw1\">return</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) nothing wrong. everything is fine",
            "b) type casting at return is missing",
            "c) parameters are wrong",
            "d) total logic is wrong"
        ],
        "Answer": "Answer: b\nExplanation: Xor lists requires same time for most of the operations as arrays would require."
    },
    {
        "id": 376,
        "Question": "In the above question would using arrays and swaping of elements in place of xor linked list would have been more efficient?",
        "Options": [
            "a) no not all",
            "b) yes arrays would have been better than xor lists",
            "c) both would be same in efficiency",
            "d) can’t say"
        ],
        "Answer": "Answer: c\nExplanation: XOR linked lists are used to reduce the memory by storing the XOR values of address instead of actual address in pointers."
    },
    {
        "id": 377,
        "Question": "Free lists are used in",
        "Options": [
            "a) static memory allocation",
            "b) dynamic memory allocation",
            "c) contagious allocations",
            "d) are used for speeding up linked list operations"
        ],
        "Answer": "Answer: b\nExplanation: Their property is meant for dynamic allocations."
    },
    {
        "id": 378,
        "Question": "What are implicit and explicit implementations of freelists?",
        "Options": [
            "a) garbage collection and new or malloc operators respectively",
            "b) new or malloc and garbage collection respectively",
            "c) implicit implementation is not favored",
            "d) explicit implementation is not favored"
        ],
        "Answer": "Answer: a\nExplanation: Gc and new most widely known."
    },
    {
        "id": 379,
        "Question": "What datastructures can be used in implementing a free list?",
        "Options": [
            "a) only linked list",
            "b) linked list or sort trees",
            "c) arrays",
            "d) trees"
        ],
        "Answer": "Answer: b\nExplanation: Sort trees can also be used in impelementing free lists which remaincomplex."
    },
    {
        "id": 380,
        "Question": "What are different ways of implementing free lists and which is simple among them?",
        "Options": [
            "a) best fit, first fit, worst fit, simple-first fit",
            "b) best fit, first fit, worst fit, simple-best fit",
            "c) best fit, first fit, worst fit, simple-worst fit",
            "d) best fit  simple-best fit"
        ],
        "Answer": "Answer: a\nExplanation: The‭ ‬simplest form of memory management system can be called as first-fit.‭ ‬a device or system maintains a single‭ ‬list of free memory locations.‭ ‬When request to memory is sent,‭ ‬the list is searched and the first block that is large enough is returned."
    },
    {
        "id": 381,
        "Question": "What is buddy memory management of free lists ?",
        "Options": [
            "a) modified version of first fit",
            "b) buddy allocation keeps several‭ ‬free lists,‭ ‬each one holds blocks which are of one particular size",
            "c) modified version of best fit",
            "d) a tree representation of free lists"
        ],
        "Answer": "Answer: b\nExplanation: When an allocation request is received,‭ ‬the list that holds blocks that are just large enough to satisfy the request are considered, and an open location is returned.‭ ‬If no‭ ‬free‭ ‬blocks that are smaller than two times the size that are requested are available,‭ ‬a larger block is split in two to satisfy the requirements."
    },
    {
        "id": 382,
        "Question": "How does implicit free lists(garbage collection) works in adding memory to free list ?",
        "Options": [
            "a) whichever comes last will be added to free list",
            "b) whichever comes first will be added to free list",
            "c) certain blocks cannot be used if there are no pointers to them and hence they can be freed",
            "d) makes a probabilistic guess"
        ],
        "Answer": "Answer: c\nExplanation: When no pointers pointing a block that means it is useless to be in memory."
    },
    {
        "id": 383,
        "Question": "What are the disadvantages in implementing buddy system algorithm for free lists?",
        "Options": [
            "a) internal fragmentation",
            "b) it takes so much space",
            "c) we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole",
            "d) both a and c are correct"
        ],
        "Answer": "Answer: d\nExplanation: Internal fragmentation is an issue to be dealt and it takes so much space."
    },
    {
        "id": 384,
        "Question": "The above code represents what?",
        "Options": [
            "a) code for first fit",
            "b) code for best fit",
            "c) code for worst fit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: As z is start point and now from beginning we are moving and checking if we reached end and then checking size naively assigning the first block which is bigger than required size hence it is first fit."
    },
    {
        "id": 385,
        "Question": "How are free blocks linked together mostly and in what addressing order?",
        "Options": [
            "a) circular linked list and increasing addressing order",
            "b) linked list and decreasing addressing order",
            "c) linked list and in no addressing order",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: A common way is circular linked list and address are arranged in increasing order because merging would be easier which is actually a problem in buddy memory allocation."
    },
    {
        "id": 386,
        "Question": "Accessing free list very frequently for wide range of addresses can lead to",
        "Options": [
            "a) paging",
            "b) segmentation fault",
            "c) memory errors",
            "d) cache problems"
        ],
        "Answer": "Answer: a\nExplanation: Paging in/out of disk will be caused."
    },
    {
        "id": 387,
        "Question": "How many children does a binary tree have?",
        "Options": [
            "a) 2",
            "b) any number of children",
            "c) 0 or 1 or 2",
            "d) 0 or 1"
        ],
        "Answer": "Answer: c\nExplanation: Can have atmost 2 nodes."
    },
    {
        "id": 388,
        "Question": "What is/are the disadvantages of implementing tree using normal arrays?",
        "Options": [
            "a) difficulty in knowing children nodes of a node",
            "b) difficult in finding the parent of a node",
            "c) have to know the maximum number of nodes possible before creation of trees",
            "d) difficult to implement"
        ],
        "Answer": "Answer: c\nExplanation: The size of array is fixed in normal arrays. We need to know the number of nodes in the tree before array declaration. It is the main disadvantage of using arrays to represent binary trees."
    },
    {
        "id": 389,
        "Question": "What must be the ideal size of array if the height of tree is ‘l’?",
        "Options": [
            "a) 2l-1",
            "b) l-1",
            "c) l",
            "d) 2l"
        ],
        "Answer": "Answer: a\nExplanation: Maximum elements in a tree (complete binary tree in worst case) of height ‘L’ is 2L-1. Hence size of array is taken as 2L-1."
    },
    {
        "id": 390,
        "Question": "What are the children for node ‘w’ of a complete-binary tree in an array representation?",
        "Options": [
            "a) 2w and 2w+1",
            "b) 2+w and 2-w",
            "c) w+1/2 and w/2",
            "d) w-1/2 and w+1/2"
        ],
        "Answer": "Answer: a\nExplanation: The left child is generally taken as 2*w whereas the right child will be taken as 2*w+1 because root node is present at index 0 in the array and to access every index position in the array."
    },
    {
        "id": 391,
        "Question": "What is the parent for a node ‘w’ of a complete binary tree in an array representation when w is not 0?",
        "Options": [
            "a) floor(w-1/2)",
            "b) ceil(w-1/2)",
            "c) w-1/2",
            "d) w/2"
        ],
        "Answer": "Answer: a\nExplanation: Floor of w-1/2 because we can’t miss a node."
    },
    {
        "id": 392,
        "Question": "If the tree is not a complete binary tree then what changes can be made for easy access of children of a node in the array?",
        "Options": [
            "a) every node stores data saying which of its children exist in the array",
            "b) no need of any changes continue with 2w and 2w+1, if node is at i",
            "c) keep a seperate table telling children of a node",
            "d) use another array parallel to the array with tree"
        ],
        "Answer": "Answer: a\nExplanation: Array cannot represent arbitrary shaped trees. It can only be used in case of complete trees. If every node stores data saying that which of its children exists in the array then elements can be accessed easily."
    },
    {
        "id": 393,
        "Question": "Consider a situation of writing a binary tree into a file with memory storage efficiency in mind, is array representation of tree is good?",
        "Options": [
            "a) yes because we are overcoming the need of pointers and so space efficiency",
            "b) yes because array values are indexable",
            "c) No it is not efficient in case of sparse trees and remaning cases it is fine",
            "d) No linked list representation of tree is only fine"
        ],
        "Answer": "Answer: c\nExplanation: In case of sparse trees (where one node per level in worst cases), the array size (2h)-1 where h is height but only h indexes will be filled and (2h)-1-h nodes will be left unused leading to space wastage."
    },
    {
        "id": 394,
        "Question": "Then why go with array representation when both are having same values ?",
        "Options": [
            "a) arrays can store trees which are complete and heaps are not complete",
            "b) lists representation takes more memory hence memory efficiency is less and go with arrays and arrays have better caching",
            "c) lists have better caching",
            "d) In lists insertion and deletion is difficult"
        ],
        "Answer": "Answer: b\nExplanation: In memory the pointer address for next node may not be adjacent or nearer to each other and also array have wonderful caching power from os and manipulating pointers is a overhead. Heap data structure is always a complete binary tree."
    },
    {
        "id": 395,
        "Question": "Can a tree stored in an array using either one of inorder or post order or pre order traversals be again reformed?",
        "Options": [
            "a) Yes just traverse through the array and form the tree",
            "b) No we need one more traversal to form a tree",
            "c) No in case of sparse trees",
            "d) Yes by using both inorder and array elements"
        ],
        "Answer": "Answer: b\nExplanation: We need any two traversals for tree formation but if some additional stuff or techniques are used while storing a tree in an array then one traversal can facilitate like also storing null values of a node in array. "
    },
    {
        "id": 396,
        "Question": "Advantages of linked list representation of binary trees over arrays?",
        "Options": [
            "a) dynamic size",
            "b) ease of insertion/deletion",
            "c) ease in randomly accessing a node",
            "d) both dynamic size and ease in insertion/deletion"
        ],
        "Answer": "Answer: d\nExplanation: It has both dynamic size and ease in insertion and deletion as advantages."
    },
    {
        "id": 397,
        "Question": "Disadvantages of linked list representation of binary trees over arrays?",
        "Options": [
            "a) Randomly accessing is not possible",
            "b) Extra memory for a pointer is needed with every element in the list",
            "c) Difficulty in deletion",
            "d) Random access is not possible and extra memory with every element"
        ],
        "Answer": "Answer: d\nExplanation: Random access is not possible with linked lists."
    },
    {
        "id": 398,
        "Question": "Which of the following traversing algorithm is not used to traverse in a tree?",
        "Options": [
            "a) Post order",
            "b) Pre order",
            "c) Post order",
            "d) Randomized"
        ],
        "Answer": "Answer: d\nExplanation: Generally, all nodes in a tree are visited by using preorder, inorder and postorder traversing algorithms."
    },
    {
        "id": 399,
        "Question": "Level order traversal of a tree is formed with the help of",
        "Options": [
            "a) breadth first search",
            "b) depth first search",
            "c) dijkstra’s algorithm",
            "d) prims algorithm"
        ],
        "Answer": "Answer: a\nExplanation: Level order is similar to bfs."
    },
    {
        "id": 400,
        "Question": "Identify the reason which doesn’t play a key role to use threaded binary trees?",
        "Options": [
            "a) The storage required by stack and queue is more",
            "b) The pointers in most of nodes of a binary tree are NULL",
            "c) It is Difficult to find a successor node",
            "d) They occupy less size"
        ],
        "Answer": "Answer: d\nExplanation: Threaded binary trees are introduced to make the Inorder traversal faster without using any stack or recursion. Stack and Queue require more space and pointers in the majority of binary trees are null and difficulties are raised while finding successor nodes. Size constraints are not taken on threaded binary trees, but they occupy less space than a stack/queue."
    },
    {
        "id": 401,
        "Question": "What may be the psuedo code for finding the size of a tree?",
        "Options": [
            "a) find_size(root_node–>left_node) + 1 + find_size(root_node–>right_node)",
            "b) find_size(root_node–>left_node) + find_size(root_node–>right_node)",
            "c) find_size(root_node–>right_node) – 1",
            "d) find_size(root_node–>left_node + 1"
        ],
        "Answer": "Answer: d\nExplanation: We just replace a to be deleted node with last leaf node of a tree. this must not be done in case of BST or heaps."
    },
    {
        "id": 402,
        "Question": "8. What is missing in this logic of finding a path in the tree for a given sum (i.e checking whether there will be a path from roots to leaf nodes with given sum)?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">checkSum<span class=\"br0\">(</span>struct bin<span class=\"sy0\">-</span>treenode <span class=\"sy0\">*</span>root , <span class=\"kw4\">int</span> sum<span class=\"br0\">)</span> <span class=\"sy0\">:</span>\n  <span class=\"kw1\">if</span><span class=\"br0\">(</span>root<span class=\"sy0\">==</span><span class=\"kw2\">null</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> sum as <span class=\"nu0\">0</span>\n  <span class=\"kw1\">else</span> <span class=\"sy0\">:</span>\n     leftover_sum<span class=\"sy0\">=</span>sum<span class=\"sy0\">-</span>root_node<span class=\"sy0\">--&gt;</span>value\n     <span class=\"co1\">//missing</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) code for having recursive calls to either only left tree or right trees or to both subtrees depending on their existence",
            "b) code for having recursive calls to either only left tree or right trees",
            "c) code for having recursive calls to either only left tree",
            "d) code for having recursive calls to either only right trees"
        ],
        "Answer": "Answer: a\nExplanation: Draw a tree and analyze the expression. we are always taking size of left subtree and right subtree and adding root value(1) to it and finally printing size."
    },
    {
        "id": 403,
        "Question": "9. What must be the missing logic below so as to print mirror of a tree as below as an example?\n<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-binary-trees-linked-lists-q9.png\" alt=\"data-structure-questions-answers-binary-trees-linked-lists-q9\" width=\"394\" height=\"158\" class=\"aligncenter size-full wp-image-155640\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-binary-trees-linked-lists-q9.png 394w, https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-binary-trees-linked-lists-q9-300x120.png 300w\" sizes=\"(max-width: 394px) 100vw, 394px\" /><div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">if</span><span class=\"br0\">(</span>rootnode<span class=\"br0\">)</span><span class=\"sy0\">:</span>\n  mirror<span class=\"br0\">(</span>rootnode<span class=\"sy0\">--&gt;</span>left<span class=\"br0\">)</span>\n  mirror<span class=\"br0\">(</span>rootnode<span class=\"sy0\">--&gt;</span>right<span class=\"br0\">)</span>\n&nbsp;\n  <span class=\"co1\">//missing</span>\n&nbsp;\nend</pre></div></div></div></div></div></div>",
        "Options": [
            "a) swapping of left and right nodes is missing",
            "b) swapping of left with root nodes is missing",
            "c) swapping of right with root nodes is missing",
            "d) nothing is missing"
        ],
        "Answer": "Answer: a\nExplanation: if(left subtree and right subtree) then move to both subtrees\n             else if only left subtree then move to left subtree carrying leftover_sum parameter\n             else if only right subtree then move to right subtree carrying leftover_sum parameter."
    },
    {
        "id": 404,
        "Question": "10. What is the code below trying to print?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw4\">void</span> print<span class=\"br0\">(</span>tree <span class=\"sy0\">*</span>root,tree <span class=\"sy0\">*</span>node<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">if</span><span class=\"br0\">(</span>root <span class=\"sy0\">==</span><span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>\n  <span class=\"kw1\">if</span><span class=\"br0\">(</span>root<span class=\"sy0\">--&gt;</span>left<span class=\"sy0\">==</span>node <span class=\"sy0\">||</span> root<span class=\"sy0\">--&gt;</span>right<span class=\"sy0\">==</span>node<span class=\"br0\">)</span> <span class=\"sy0\">||</span> print<span class=\"br0\">(</span>root<span class=\"sy0\">-&gt;</span>left,node<span class=\"br0\">)</span>\n  <span class=\"sy0\">||</span>printf<span class=\"br0\">(</span>root<span class=\"sy0\">-&gt;</span>right,node<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n     print<span class=\"br0\">(</span>root<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) just printing all nodes",
            "b) not a valid logic to do any task",
            "c) printing ancestors of a node passed as argument",
            "d) printing nodes from leaf node to a node passed as argument"
        ],
        "Answer": "Answer: a\nExplanation: Mirror is another tree with left and right children of nodes are interchanged as shown in the figure."
    },
    {
        "id": 405,
        "Question": "What is the maximum number of children that a binary tree node can have?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: In a binary tree, a node can have atmost 2 nodes (i.e.) 0,1 or 2 left and right child."
    },
    {
        "id": 406,
        "Question": "How many common operations are performed in a binary tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: The given tree is an example for binary tree since has got two children and the left and right children do not satisfy binary search tree’s property, Fibonacci and AVL tree."
    },
    {
        "id": 407,
        "Question": "What is the traversal strategy used in the binary tree?",
        "Options": [
            "a) depth-first traversal",
            "b) breadth-first traversal",
            "c) random traversal",
            "d) Priority traversal"
        ],
        "Answer": "Answer: b\nExplanation: A binary tree is a rooted tree and also an ordered tree (i.e) every node in a binary tree has at most two children."
    },
    {
        "id": 408,
        "Question": "How many types of insertion are performed in a binary tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: Three common operations are performed in a binary tree- they are insertion, deletion and traversal."
    },
    {
        "id": 409,
        "Question": "How many bits would a succinct binary tree occupy?",
        "Options": [
            "a) n+O(n)",
            "b) 2n+O(n)",
            "c) n/2",
            "d) n"
        ],
        "Answer": "Answer: b\nExplanation: Breadth first traversal, also known as level order traversal is the traversal strategy used in a binary tree. It involves visiting all the nodes at a given level."
    },
    {
        "id": 410,
        "Question": "The average depth of a binary tree is given as?",
        "Options": [
            "a) O(N)",
            "b) O(√N)",
            "c) O(N2)",
            "d) O(log N)"
        ],
        "Answer": "Answer: b\nExplanation: Two kinds of insertion operation is performed in a binary tree- inserting a leaf node and inserting an internal node."
    },
    {
        "id": 411,
        "Question": "How many orders of traversal are applicable to a binary tree (In General)?",
        "Options": [
            "a) 1",
            "b) 4",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: The above diagram is a depiction of deleting a node with 0 or 1 child since the node D which has 1 child is deleted."
    },
    {
        "id": 412,
        "Question": "If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?",
        "Options": [
            "a) 2i+1",
            "b) 2i+2",
            "c) 2i",
            "d) 4i"
        ],
        "Answer": "Answer: a\nExplanation: General ordered tree can be mapped into binary tree by representing them in a left-child-right-sibling way."
    },
    {
        "id": 413,
        "Question": "Using what formula can a parent node be located in an array?",
        "Options": [
            "a) (i+1)/2",
            "b) (i-1)/2",
            "c) i/2",
            "d) 2i/2"
        ],
        "Answer": "Answer: b\nExplanation: A succinct binary tree occupies close to minimum possible space established by lower bounds. A succinct binary tree would occupy 2n+O(n) bits."
    },
    {
        "id": 414,
        "Question": "Which of the following properties are obeyed by all three tree – traversals?",
        "Options": [
            "a) Left subtrees are visited before right subtrees",
            "b) Right subtrees are visited before left subtrees",
            "c) Root node is visited before left subtree",
            "d) Root node is visited before right subtree"
        ],
        "Answer": "Answer: d\nExplanation: The average depth of a binary tree is given as O(√N). In case of a binary search tree, it is O(log N)."
    },
    {
        "id": 415,
        "Question": "What is the time complexity of pre-order traversal in the iterative fashion?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(logn)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: b\nExplanation: Post order traversal follows NLR(Left-Right-Node)."
    },
    {
        "id": 416,
        "Question": "What is the space complexity of the post-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)",
        "Options": [
            "a) O(1)",
            "b) O(nlogd)",
            "c) O(logd)",
            "d) O(d)"
        ],
        "Answer": "Answer: c\nExplanation: Add the root to the stack first, then continously check for the right and left children of the top-of-the-stack."
    },
    {
        "id": 417,
        "Question": "To obtain a prefix expression, which of the tree traversals is used?",
        "Options": [
            "a) Level-order traversal",
            "b) Pre-order traversal",
            "c) Post-order traversal",
            "d) In-order traversal"
        ],
        "Answer": "Answer: b\nExplanation: The left and right children are added first to the stack, followed by the node, which is then popped. Post-order follows LRN policy."
    },
    {
        "id": 418,
        "Question": "Consider the following data. The pre order traversal of a binary tree is A, B, E, C, D. The in order traversal of the same binary tree is B, E, A, D, C. The level order sequence for the binary tree is _________",
        "Options": [
            "a) A, C, D, B, E",
            "b) A, B, C, D, E",
            "c) A, B, C, E, D",
            "d) D, B, E, A, C"
        ],
        "Answer": "Answer: b\nExplanation: Since you have to go through all the nodes, the complexity becomes O(n)."
    },
    {
        "id": 419,
        "Question": "What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order.",
        "Options": [
            "a) 15",
            "b) 3",
            "c) 5",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: Post-order method of traversing involves  – i) Traverse left subtree in post-order, ii) Traverse right subtree in post-order, iii) visit the root."
    },
    {
        "id": 420,
        "Question": "The post-order traversal of a binary tree is O P Q R S T. Then possible pre-order traversal will be ________",
        "Options": [
            "a) T Q R S O P",
            "b) T O Q R P S",
            "c) T Q O P S R",
            "d) T Q O S P R"
        ],
        "Answer": "Answer:  c\nExplanation: 5 binary trees are possible and they are,\n<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/postorder-traversal-questions-answers-q2.png\" alt=\"postorder-traversal-questions-answers-q2\" width=\"614\" height=\"144\" class=\"alignnone size-full wp-image-218675\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/postorder-traversal-questions-answers-q2.png 614w, https://www.sanfoundry.com/wp-content/uploads/2017/09/postorder-traversal-questions-answers-q2-300x70.png 300w\" sizes=\"(max-width: 614px) 100vw, 614px\" />\n"
    },
    {
        "id": 421,
        "Question": "A binary search tree contains values 7, 8, 13, 26, 35, 40, 70, 75. Which one of the following is a valid post-order sequence of the tree provided the pre-order sequence as 35, 13, 7, 8, 26, 70, 40 and 75?",
        "Options": [
            "a) 7, 8, 26, 13, 75, 40, 70, 35",
            "b) 26, 13, 7, 8, 70, 75, 40, 35",
            "c) 7, 8, 13, 26, 35, 40, 70, 75",
            "d) 8, 7, 26, 13, 40, 75, 70, 35"
        ],
        "Answer": "Answer:  c\nExplanation: The last, second last nodes visited in post-order traversal are root and it’s right child respectively. Option T Q R S O P can’t be a pre-order traversal, because nodes O, P are visited after the nodes Q, R, S. Option T O Q R P S, can’t be valid, because the pre-order sequence given in option T O Q R P S  and given post-order traversal creates a tree with node T as root and node O as left subtree. Option T Q O P S R is valid. Option T Q O S P R is not valid as node P is visited after visiting node S.  "
    },
    {
        "id": 422,
        "Question": "Which of the following pair’s traversals on a binary tree can build the tree uniquely?",
        "Options": [
            "a) post-order and pre-order",
            "b) post-order and in-order",
            "c) post-order and level order",
            "d) level order and preorder"
        ],
        "Answer": "Answer: d\nExplanation: The binary tree contains values 7, 8, 13, 26, 35, 40, 70, 75. The given pre-order sequence is 35, 13, 7, 8, 26, 70, 40 and 75. So, the binary search tree formed is\n<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/postorder-traversal-questions-answers-q4.png\" alt=\"postorder-traversal-questions-answers-q4\" width=\"237\" height=\"193\" class=\"alignnone size-full wp-image-218676\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/postorder-traversal-questions-answers-q4.png 237w, https://www.sanfoundry.com/wp-content/uploads/2017/09/postorder-traversal-questions-answers-q4-100x80.png 100w\" sizes=\"(max-width: 237px) 100vw, 237px\" />\nThus post-order sequence for the tree is 8, 7, 26, 13, 40, 75, 70 and 35. "
    },
    {
        "id": 423,
        "Question": "A full binary tree can be generated using ______",
        "Options": [
            "a) post-order and pre-order traversal",
            "b) pre-order traversal",
            "c) post-order traversal",
            "d) in-order traversal"
        ],
        "Answer": "Answer: b\nExplanation: A binary tree can uniquely be created by post-order and in-order traversals."
    },
    {
        "id": 424,
        "Question": "The maximum number of nodes in a tree for which post-order and pre-order traversals may be equal is ______",
        "Options": [
            "a) 3",
            "b) 1",
            "c) 2",
            "d) any number"
        ],
        "Answer": "Answer: a\nExplanation: Every node in a full binary tree has either 0 or 2 children. A binary tree can be generated by two traversals if one of them is in-order. But, we can generate a full binary tree using post-order and pre-order traversals. "
    },
    {
        "id": 425,
        "Question": "The pre-order and in-order are traversals of a binary tree are T M L N P O Q and L M N T O P Q. Which of following is post-order traversal of the tree?",
        "Options": [
            "a) L N M O Q P T",
            "b) N M O P O L T",
            "c) L M N O P Q T",
            "d) O P L M N Q T"
        ],
        "Answer": "Answer: b\nExplanation: The tree with only one node has post-order and pre-order traversals equal."
    },
    {
        "id": 426,
        "Question": "What is the space complexity of the in-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)",
        "Options": [
            "a) O(1)",
            "b) O(nlogd)",
            "c) O(logd)",
            "d) O(d)"
        ],
        "Answer": "Answer: b\nExplanation: In-order traversal follows LNR(Left-Node-Right)."
    },
    {
        "id": 427,
        "Question": "What is the time complexity of level order traversal?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(logn)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: a\nExplanation: Firstly add the root node to the queue. Then for all the remaining nodes, pop the front end of the queue and print it, add the left and right children of the popped node to the queue."
    },
    {
        "id": 428,
        "Question": "Which of the following graph traversals closely imitates level order traversal of a binary tree?",
        "Options": [
            "a) Depth First Search",
            "b) Breadth First Search",
            "c) Depth & Breadth First Search",
            "d) Binary Search"
        ],
        "Answer": "Answer: d\nExplanation: In the worst case we have d stack frames in the recursive call, hence the complexity is O(d)."
    },
    {
        "id": 429,
        "Question": "In a binary search tree, which of the following traversals would print the numbers in the ascending order?",
        "Options": [
            "a) Level-order traversal",
            "b) Pre-order traversal",
            "c) Post-order traversal",
            "d) In-order traversal"
        ],
        "Answer": "Answer: b\nExplanation: Since you have to go through all the nodes, the complexity becomes O(n)."
    },
    {
        "id": 430,
        "Question": "The number of edges from the root to the node is called __________ of the tree.",
        "Options": [
            "a) Height",
            "b) Depth",
            "c) Length",
            "d) Width"
        ],
        "Answer": "Answer: b\nExplanation: The number of edges from the root to the node is called depth of the tree."
    },
    {
        "id": 431,
        "Question": "The number of edges from the node to the deepest leaf is called _________ of the tree.",
        "Options": [
            "a) Height",
            "b) Depth",
            "c) Length",
            "d) Width"
        ],
        "Answer": "Answer: a\nExplanation: The number of edges from the node to the deepest leaf is called height of the tree."
    },
    {
        "id": 432,
        "Question": "What is a full binary tree?",
        "Options": [
            "a) Each node has exactly zero or two children",
            "b) Each node has exactly two children",
            "c) All the leaves are at the same level",
            "d) Each node has exactly one or two children"
        ],
        "Answer": "Answer: a\nExplanation: A full binary tree is a tree in which each node has exactly 0 or 2 children."
    },
    {
        "id": 433,
        "Question": "What is a complete binary tree?",
        "Options": [
            "a) Each node has exactly zero or two children",
            "b) A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from right to left",
            "c) A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from left to right",
            "d) A tree In which all nodes have degree 2"
        ],
        "Answer": "Answer: c\nExplanation: A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from left to right is called complete binary tree. A Tree in which each node has exactly zero or two children is called full binary tree. A Tree in which the degree of each node is 2 except leaf nodes is called perfect binary tree."
    },
    {
        "id": 434,
        "Question": "What is the average case time complexity for finding the height of the binary tree?",
        "Options": [
            "a) h = O(loglogn)",
            "b) h = O(nlogn)",
            "c) h = O(n)",
            "d) h = O(log n)"
        ],
        "Answer": "Answer: d\nExplanation: The nodes are either a part of left sub tree or the right sub tree, so we don’t have to traverse all the nodes, this means the complexity is lesser than n, in the average case, assuming the nodes are spread evenly, the time complexity becomes O(logn)."
    },
    {
        "id": 435,
        "Question": "Which of the following is not an advantage of trees?",
        "Options": [
            "a) Hierarchical structure",
            "b) Faster search",
            "c) Router algorithms",
            "d) Undo/Redo operations in a notepad"
        ],
        "Answer": "Answer: d\nExplanation: Undo/Redo operations in a notepad is an application of stack. Hierarchical structure, Faster search, Router algorithms are advantages of trees."
    },
    {
        "id": 436,
        "Question": "In a full binary tree if number of internal nodes is I, then number of leaves L are?",
        "Options": [
            "a) L = 2*I",
            "b) L = I + 1",
            "c) L = I – 1",
            "d) L = 2*I – 1"
        ],
        "Answer": "Answer: b\nExplanation: Number of Leaf nodes in full binary tree is equal to 1 + Number of Internal Nodes i.e L = I + 1"
    },
    {
        "id": 437,
        "Question": "In a full binary tree if number of internal nodes is I, then number of nodes N are?",
        "Options": [
            "a) N = 2*I",
            "b) N = I + 1",
            "c) N = I – 1",
            "d) N = 2*I + 1"
        ],
        "Answer": "Answer: d\nExplanation: Relation between number of internal nodes(I) and nodes(N) is N = 2*I+1."
    },
    {
        "id": 438,
        "Question": "In a full binary tree if there are L leaves, then total number of nodes N are?",
        "Options": [
            "a) N = 2*L",
            "b) N = L + 1",
            "c) N = L – 1",
            "d) N = 2*L – 1"
        ],
        "Answer": "Answer: d\nExplanation: The relation between number of nodes(N) and leaves(L) is N=2*L-1."
    },
    {
        "id": 439,
        "Question": "Which of the following is incorrect with respect to binary trees?",
        "Options": [
            "a) Let T be a binary tree. For every k ≥ 0, there are no more than 2k nodes in level k",
            "b) Let T be a binary tree with λ levels. Then T has no more than 2λ – 1 nodes",
            "c) Let T be a binary tree with N nodes. Then the number of levels is at least ceil(log (N + 1))",
            "d) Let T be a binary tree with N nodes. Then the number of levels is at least floor(log (N + 1))"
        ],
        "Answer": "Answer: d\nExplanation: In a binary tree, there are atmost 2k nodes in level k and 2k-1 total number of nodes. Number of levels is at least ceil(log(N+1))."
    },
    {
        "id": 440,
        "Question": "Which of the following is false about a binary search tree?",
        "Options": [
            "a) The left child is always lesser than its parent",
            "b) The right child is always greater than its parent",
            "c) The left and right sub-trees should also be binary search trees",
            "d) In order sequence gives decreasing order of elements"
        ],
        "Answer": "Answer: d\nExplanation: In order sequence of binary search trees will always give ascending order of elements. Remaining all are true regarding binary search trees."
    },
    {
        "id": 441,
        "Question": "What is the speciality about the inorder traversal of a binary search tree?",
        "Options": [
            "a) It traverses in a non increasing order",
            "b) It traverses in an increasing order",
            "c) It traverses in a random fashion",
            "d) It traverses based on priority of the node"
        ],
        "Answer": "Answer: b\nExplanation: As a binary search tree consists of elements lesser than the node to the left and the ones greater than the node to the right, an inorder traversal will give the elements in an increasing order."
    },
    {
        "id": 442,
        "Question": "4. What does the following piece of code do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span>Tree root<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tfunc<span class=\"br0\">(</span>root.<span class=\"me1\">left</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tfunc<span class=\"br0\">(</span>root.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>root.<span class=\"me1\">data</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Preorder traversal",
            "b) Inorder traversal",
            "c) Postorder traversal",
            "d) Level order traversal"
        ],
        "Answer": "Answer: a\nExplanation: As we know that the left child is lesser than the parent, if the root’s key is greater than the given key, we look  only into the left sub-tree, similarly for right sub-tree."
    },
    {
        "id": 443,
        "Question": "5. What does the following piece of code do?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span>Tree root<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>root.<span class=\"me1\">data</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tfunc<span class=\"br0\">(</span>root.<span class=\"me1\">left</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\tfunc<span class=\"br0\">(</span>root.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Preorder traversal",
            "b) Inorder traversal",
            "c) Postorder traversal",
            "d) Level order traversal"
        ],
        "Answer": "Answer: c\nExplanation: In a postorder traversal, first the left child is visited, then the right child and finally the parent."
    },
    {
        "id": 444,
        "Question": "What are the worst case and average case complexities of a binary search tree?",
        "Options": [
            "a) O(n), O(n)",
            "b) O(logn), O(logn)",
            "c) O(logn), O(n)",
            "d) O(n), O(logn)"
        ],
        "Answer": "Answer: c\nExplanation: Since all the elements greater than a given node are towards the right, iterating through the tree to the rightmost leaf of the root will give the maximum element in a binary search tree."
    },
    {
        "id": 445,
        "Question": "What are the conditions for an optimal binary search tree and what is its advantage?",
        "Options": [
            "a) The tree should not be modified and you should know how often the keys are accessed, it improves the lookup cost",
            "b) You should know the frequency of access of the keys, improves the lookup time",
            "c) The tree can be modified and you should know the number of elements in the tree before hand, it improves the deletion time",
            "d) The tree should be just modified and improves the lookup time"
        ],
        "Answer": "Answer: c\nExplanation: The property of a binary search tree is that the lesser elements are to the left and greater elements are to the right, we use this property here and iterate through the tree such that we reach a point where the 2 elements are on 2 different sides of the node, this becomes the least common ancestor of the 2 given elements."
    },
    {
        "id": 446,
        "Question": "What will be the height of a balanced full binary tree with 8 leaves?",
        "Options": [
            "a) 8",
            "b) 5",
            "c) 6",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: A balanced full binary tree with l leaves has height h, where h = log2l + 1.\nSo, the height of a balanced full binary tree with 8 leaves =  log28 + 1 = 3 + 1 = 4."
    },
    {
        "id": 447,
        "Question": "The balance factor of a node in a binary tree is defined as _____",
        "Options": [
            "a) addition of heights of left and right subtrees",
            "b) height of right subtree minus height of left subtree",
            "c) height of left subtree minus height of right subtree",
            "d) height of right subtree minus one"
        ],
        "Answer": "Answer: c\nExplanation: For a node in a binary tree, the difference between the heights of its left subtree and right subtree is known as balance factor of the node."
    },
    {
        "id": 448,
        "Question": "A binary tree is balanced if the difference between left and right subtree of every node is not more than ____",
        "Options": [
            "a) 1",
            "b) 3",
            "c) 2",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: Only the node P will become unbalanced, with balance factor +2."
    },
    {
        "id": 449,
        "Question": "Which of the following tree data structures is not a balanced binary tree?",
        "Options": [
            "a) AVL tree",
            "b) Red-black tree",
            "c) Splay tree",
            "d) B-tree"
        ],
        "Answer": "Answer: a\nExplanation: In a balanced binary tree the heights of two subtrees of every node never differ by more than 1."
    },
    {
        "id": 450,
        "Question": "Which of following figures is a balanced binary tree?",
        "Options": [
            "a)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/balanced-binary-tree-questions-answers-q6a.png\" alt=\"balanced-binary-tree-questions-answers-q6a\" width=\"127\" height=\"195\" class=\"alignnone size-full wp-image-218684\" />",
            "b) <img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/balanced-binary-tree-questions-answers-q6b.png\" alt=\"balanced-binary-tree-questions-answers-q6b\" width=\"187\" height=\"150\" class=\"alignnone size-full wp-image-218685\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/balanced-binary-tree-questions-answers-q6b.png 187w, https://www.sanfoundry.com/wp-content/uploads/2017/09/balanced-binary-tree-questions-answers-q6b-100x80.png 100w\" sizes=\"(max-width: 187px) 100vw, 187px\" />",
            "c)\t<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/balanced-binary-tree-questions-answers-q6c.png\" alt=\"balanced-binary-tree-questions-answers-q6c\" width=\"156\" height=\"198\" class=\"alignnone size-full wp-image-218686\" />",
            "d)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/balanced-binary-tree-questions-answers-q6d.png\" alt=\"balanced-binary-tree-questions-answers-q6d\" width=\"124\" height=\"163\" class=\"alignnone size-full wp-image-218687\" />"
        ],
        "Answer": "Answer: d\nExplanation: All the tree data structures given in options are balanced, but B-tree can have more than two children. "
    },
    {
        "id": 451,
        "Question": "Balanced binary tree with n items allows the lookup of an item in ____ worst-case time.",
        "Options": [
            "a) O(log n)",
            "b) O(nlog 2)",
            "c) O(n)",
            "d) O(1)"
        ],
        "Answer": "Answer: b\nExplanation: In Some tree diagrams, the root of tree has balance factor +2, so the tree is not balanced. If every node in the tree is balanced, then it’s a balanced tree. "
    },
    {
        "id": 452,
        "Question": "Which of the following data structures can be efficiently implemented using height balanced binary search tree?",
        "Options": [
            "a) sets",
            "b) priority queue",
            "c) heap",
            "d) both sets and priority queue"
        ],
        "Answer": "Answer: a\nExplanation: Searching an item in balanced binary is fast and worst-case time complexity of the search is O(log n)."
    },
    {
        "id": 453,
        "Question": "Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in ____ time.",
        "Options": [
            "a) O(m+n)",
            "b) O(mn)",
            "c) O(m)",
            "d) O(mlog n)"
        ],
        "Answer": "Answer: d\nExplanation: Height-Balanced binary search tree can provide an efficient implementation of sets, priority queues."
    },
    {
        "id": 454,
        "Question": "Which of the following is an advantage of balanced binary search tree, like AVL tree, compared to binary heap?",
        "Options": [
            "a) insertion takes less time",
            "b) deletion takes less time",
            "c) searching takes less time",
            "d) construction of the tree takes less time than binary heap"
        ],
        "Answer": "Answer: a\nExplanation: First we store the in-order traversals of both the trees in two separate arrays and then we can merge these sorted sequences in O(m+n) time. And then we construct the balanced tree from this final sorted array."
    },
    {
        "id": 455,
        "Question": "Which of the following is not the self balancing binary search tree?",
        "Options": [
            "a) AVL Tree",
            "b) 2-3-4 Tree",
            "c) Red – Black Tree",
            "d) Splay Tree"
        ],
        "Answer": "Answer: b\nExplanation: 2-3-4 Tree is balanced search trees. But it is not a binary tree. So, it is not a self balancing binary tree. AVL tree, Red-Black Tree and Splay tree are self balancing binary search tree."
    },
    {
        "id": 456,
        "Question": "The binary tree sort implemented using a self – balancing binary search tree takes ______ time is worst case.",
        "Options": [
            "a) O(n log n)",
            "b) O(n)",
            "c) O(n2)",
            "d) O(log n)"
        ],
        "Answer": "Answer: a\nExplanation: The worst case running time of the binary tree sort is O(n2). But, the worst case running time can be improved to the O(n log n) using a self – balancing binary search tree. "
    },
    {
        "id": 457,
        "Question": " An AVL tree is a self – balancing binary search tree, in which the heights of the two child sub trees of any node differ by _________",
        "Options": [
            "a) At least one",
            "b) At most one",
            "c) Two",
            "d) At most two"
        ],
        "Answer": "Answer: b\nExplanation: In an AVL tree, the difference between heights of the two child sub trees of any node is at most one. If the height differs by more than one, AVL tree performs rotations to balance the tree."
    },
    {
        "id": 458,
        "Question": "Associative arrays can be implemented using __________",
        "Options": [
            "a) B-tree",
            "b) A doubly linked list",
            "c) A single linked list",
            "d) A self balancing binary search tree"
        ],
        "Answer": "Answer: d\nExplanation: Associative arrays can be implemented using a self balancing binary search tree as the worst-case time performance of self – balancing binary search trees is O(log n)."
    },
    {
        "id": 459,
        "Question": "Which of the following is a self – balancing binary search tree?",
        "Options": [
            "a) 2-3 tree",
            "b) Threaded binary tree",
            "c) AA tree",
            "d) Treap"
        ],
        "Answer": "Answer: b\nExplanation: For lookup, insertion and deletion hash table take O(1) time in average-case while self – balancing binary search trees takes O(log n). Therefore, hash tables perform better in average-case."
    },
    {
        "id": 460,
        "Question": "A self – balancing binary search tree can be used to implement ________",
        "Options": [
            "a) Priority queue",
            "b) Hash table",
            "c) Heap sort",
            "d) Priority queue and Heap sort"
        ],
        "Answer": "Answer: c\nExplanation: An AA tree, which is a variation of red-black tree, is a self – balancing binary search tree. 2-3 is B-tree of order 3 and Treat is a randomized binary search tree. A threaded binary tree is not a balanced tree."
    },
    {
        "id": 461,
        "Question": "In which of the following self – balancing binary search tree the recently accessed element can be accessed quickly?",
        "Options": [
            "a) AVL tree",
            "b) AA tree",
            "c) Splay tree",
            "d) Red – Black tree"
        ],
        "Answer": "Answer: a\nExplanation: Self-balancing binary search trees can be used to construct and maintain ordered lists, to achieve the optimal worst case performance. So, self – balancing binary search tree can be used to implement a priority queue, which is ordered list."
    },
    {
        "id": 462,
        "Question": "The minimum height of self balancing binary search tree with n nodes is _____",
        "Options": [
            "a) log2(n)",
            "b) n",
            "c) 2n + 1",
            "d) 2n – 1"
        ],
        "Answer": "Answer: c\nExplanation: In a Splay tree, the recently accessed element can be accessed quickly. In Splay tree, the frequently accessed nodes are moved towards the root so they are quick to access again. "
    },
    {
        "id": 463,
        "Question": "Which of the following is not a random tree?",
        "Options": [
            "a) Treap",
            "b) Random Binary Tree",
            "c) Uniform Spanning Tree",
            "d) AVL Tree"
        ],
        "Answer": "Answer: d\nExplanation: Treap, also known as random binary search tree, Random binary tree and Uniform spanning tree are all random tree. Random tree is a tree formed by a random process of addition and deletion of nodes. AVL tree is a self – balanced binary search tree."
    },
    {
        "id": 464,
        "Question": "Which process forms the randomized binary search tree?",
        "Options": [
            "a) Stochastic Process",
            "b) Branching Process",
            "c) Diffusion Process",
            "d) Aggregation Process"
        ],
        "Answer": "Answer: a\nExplanation: The randomized binary search tree is formed by the stochastic process. The stochastic process or also called random process is a mathematical tool or object including random variables."
    },
    {
        "id": 465,
        "Question": "How many randomized binary search trees can be formed by the numbers (1, 3, 2)?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 6",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: As there are 3 numbers (1, 3, 2) so total of 6 combinations can be formed using three numbers but Since (2, 1, 3) and (2, 3, 1) are same so in total there are 5 randomized binary search tree that can be formed."
    },
    {
        "id": 466,
        "Question": "What is the expected depth of a node in a randomized binary search tree?",
        "Options": [
            "a) log n",
            "b) n!",
            "c) n2",
            "d) 2 log n + O(1)"
        ],
        "Answer": "Answer: d\nExplanation: The expected value of depth of a node that is for a node a, the expected value of length of path from root to node a is found to be at most 2 log n + O(1)."
    },
    {
        "id": 467,
        "Question": "What is the longest length path for a node x in random binary search tree for the insertion process?",
        "Options": [
            "a) log x",
            "b) x2",
            "c) x!",
            "d) 4.311 log x"
        ],
        "Answer": "Answer: d\nExplanation: Although it is difficult to find the length of the longest path in randomized binary search tree, but it has been found that the longest length is around 4.311 log x."
    },
    {
        "id": 468,
        "Question": "What is the range of β in finding the length of the longest path in a randomized binary search tree?",
        "Options": [
            "a) (-1, 0)",
            "b) (1, 0)",
            "c) (0, 5)",
            "d) (0, 1)"
        ],
        "Answer": "Answer: d\nExplanation: The longest path in a randomized binary search tree, but it has been found that the longest length is around 4.311 log x for node x. This is also equal to 1/β log x where β lies in the range (0, 1)."
    },
    {
        "id": 469,
        "Question": "What is the expected number of leaves in a randomized binary search tree?",
        "Options": [
            "a) n + 1",
            "b) (n + 1)/3",
            "c) (n + 1)/2",
            "d) n + 3"
        ],
        "Answer": "Answer: b\nExplanation: In a random mathematical model, the expected value of number of leaves in a randomized binary search tree is found to be exactly (n + 1)/3 using probability."
    },
    {
        "id": 470,
        "Question": "What is the probability of selecting a tree uniformly at random?",
        "Options": [
            "a) Equal to Catalan Number",
            "b) Less Than Catalan Number",
            "c) Greater than Catalan Number",
            "d) Reciprocal of Catalan Number"
        ],
        "Answer": "Answer: a\nExplanation: Treap is a type of data structure which is a combination of binary tree and heap. It is an example of a randomized binary search tree. It stores value in pairs."
    },
    {
        "id": 471,
        "Question": "AA Trees are implemented using?",
        "Options": [
            "a) Colors",
            "b) Levels",
            "c) Node size",
            "d) Heaps"
        ],
        "Answer": "Answer: b\nExplanation: AA Trees are implemented using levels instead of colors to overcome the disadvantages of Red-Black trees."
    },
    {
        "id": 472,
        "Question": "Which of the following is the correct definition for a horizontal link?",
        "Options": [
            "a) connection between node and a child of equal levels",
            "b) connection between two nodes",
            "c) connection between two child nodes",
            "d) connection between root node and leaf node"
        ],
        "Answer": "Answer: a\nExplanation: A horizontal link is a connection between a node and a child of equal levels."
    },
    {
        "id": 473,
        "Question": "How will you remove a left horizontal link in an AA-tree?",
        "Options": [
            "a) by performing right rotation",
            "b) by performing left rotation",
            "c) by deleting both the elements",
            "d) by inserting a new element"
        ],
        "Answer": "Answer: a\nExplanation: A left horizontal link is removed by right rotation.  A right horizontal link is removed by left rotation."
    },
    {
        "id": 474,
        "Question": "What are the two different operations done in an AA-Tree?",
        "Options": [
            "a) shift and color",
            "b) skew and split",
            "c) zig and zag",
            "d) enqueue and dequeue"
        ],
        "Answer": "Answer: b\nExplanation: A skew removes a left horizontal link by right rotation and a split removes a right horizontal link by left rotation."
    },
    {
        "id": 475,
        "Question": "How many different shapes does maintenance of AA-Tree need to consider?",
        "Options": [
            "a) 7",
            "b) 5",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: b\nExplanation: In an AA-tree, skew is processed first followed by a split."
    },
    {
        "id": 476,
        "Question": "What is the prime condition of AA-tree which makes it simpler than a red-black tree?",
        "Options": [
            "a) Only right children can be red",
            "b) Only left children can be red",
            "c) Right children should strictly be black",
            "d) There should be no left children"
        ],
        "Answer": "Answer: c\nExplanation: An AA-Tree needs to consider only two shapes unlike a red-black tree which needs to consider seven shapes of transformation."
    },
    {
        "id": 477,
        "Question": "Which of the following trees is similar to that of an AA-Tree?",
        "Options": [
            "a) Splay Tree",
            "b) B+ Tree",
            "c) AVL Tree",
            "d) Red-Black Tree"
        ],
        "Answer": "Answer: a\nExplanation: The prime condition of AA-Tree is that only the right children can be red to eliminate possible restructuring cases."
    },
    {
        "id": 478,
        "Question": "What is the worst case analysis of an AA-Tree?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O( N log N)",
            "d) O(N2)"
        ],
        "Answer": "Answer: d\nExplanation: AA- Tree is a small variation of Red-Black tree. AA-Trees overcome the complexity faced in performing insertion and deletion in Red-Black Trees."
    },
    {
        "id": 479,
        "Question": "Who is the inventor of AA-Tree?",
        "Options": [
            "a) Arne Anderson",
            "b) Daniel Sleator",
            "c) Rudolf Bayer",
            "d) Jon Louis Bentley"
        ],
        "Answer": "Answer: b\nExplanation: The worst case analysis of an AA-Tree is mathematically found to be O(log N)."
    },
    {
        "id": 480,
        "Question": "What should be the condition for the level of a left node?",
        "Options": [
            "a) It should be less than or equal to that of its parent",
            "b) It should be greater than that of its parent",
            "c) It should be strictly less than that of its parent",
            "d) The level should be equal to one"
        ],
        "Answer": "Answer: a\nExplanation: AA- trees make more rotations than a red-black tree since only two shapes are considered for an AA-Tree whereas seven shapes are considered in Red-Black trees."
    },
    {
        "id": 481,
        "Question": "Comparing the speed of execution of Red-Black trees and AA-trees, which one has the faster search time?",
        "Options": [
            "a) AA-tree",
            "b) Red-Black tree",
            "c) Both have an equal search time",
            "d) It depends"
        ],
        "Answer": "Answer: a\nExplanation: AA-tree is invented by Arne Anderson. Daniel Sleator invented Splay Tree. Rudolf Bayer invented a Red-Black tree. Jon Louis Bentley invented K-d tree."
    },
    {
        "id": 482,
        "Question": "What is an AVL tree?",
        "Options": [
            "a) a tree which is balanced and is a height balanced tree",
            "b) a tree which is unbalanced and is a height balanced tree",
            "c) a tree with three children",
            "d) a tree with atmost 3 children"
        ],
        "Answer": "Answer: a\nExplanation: It is a self balancing tree with height difference atmost 1."
    },
    {
        "id": 483,
        "Question": "Why we need to a binary tree which is height balanced?",
        "Options": [
            "a) to avoid formation of skew trees",
            "b) to save memory",
            "c) to attain faster memory access",
            "d) to simplify storing"
        ],
        "Answer": "Answer: a\nExplanation: In real world dealing with random values is often not possible, the probability that u are dealing with non random values(like sequential) leads to mostly skew trees, which leads to worst case. hence we make height balance by rotations."
    },
    {
        "id": 484,
        "Question": "What is the maximum height of an AVL tree with p nodes?",
        "Options": [
            "a) p",
            "b) log(p)",
            "c) log(p)/2",
            "d) p⁄2"
        ],
        "Answer": "Answer: b\nExplanation: The property of AVL tree is it is height balanced tree with difference of atmost 1 between left and right subtrees. All AVL trees are binary search tree."
    },
    {
        "id": 485,
        "Question": "Given an empty AVL tree, how would you construct AVL tree when a set of numbers are given without performing any rotations?",
        "Options": [
            "a) just build the tree with the given input",
            "b) find the median of the set of elements given, make it as root and construct the tree",
            "c) use trial and error",
            "d) use dynamic programming to build the tree"
        ],
        "Answer": "Answer: b\nExplanation: Consider height of tree to be ‘he’, then number of nodes which totals to p can be written in terms of height as N(he)=N(he-1)+1+N(he-2). since N(he) which is p can be written in terms of height as the beside recurrence relation which on solving gives N(he)= O(logp) as worst case height."
    },
    {
        "id": 486,
        "Question": "What maximum difference in heights between the leafs of a AVL tree is possible?",
        "Options": [
            "a) log(n) where n is the number of nodes",
            "b) n where n is the number of nodes",
            "c) 0 or 1",
            "d) atmost 1"
        ],
        "Answer": "Answer: a\nExplanation: It is interesting to note that after insertion, only the path from that point to node or only that subtrees are imbalanced interms of height."
    },
    {
        "id": 487,
        "Question": "What is missing?",
        "Options": [
            "a) Height(w-left), x-height",
            "b) Height(w-right), x-height",
            "c) Height(w-left), x",
            "d) Height(w-left)"
        ],
        "Answer": "Answer: b\nExplanation: Sort the given input, find the median element among them, make it as root and construct left and right subtrees with elements lesser and greater than the median element recursively. this ensures the subtrees differ only by height 1."
    },
    {
        "id": 488,
        "Question": "Why to prefer red-black trees over AVL trees?",
        "Options": [
            "a) Because red-black is more rigidly balanced",
            "b) AVL tree store balance factor in every node which costs space",
            "c) AVL tree fails at scale",
            "d) Red black is more efficient"
        ],
        "Answer": "Answer: a\nExplanation: At every level we can form a tree with difference in height between subtrees to be atmost 1 and so there can be log(n) such levels since height of AVL tree is log(n)."
    },
    {
        "id": 489,
        "Question": "What is a Cartesian tree?",
        "Options": [
            "a) a skip list in the form of tree",
            "b) a tree which obeys cartesian product",
            "c) a tree which obeys heap property and whose inorder traversal yields the given sequence",
            "d) a tree which obeys heap property only"
        ],
        "Answer": "Answer: c\nExplanation: A tree with heap property (parent is either small or big than children) and when traversed in inorder yields the given input sequence. refer below diagram question for clarity."
    },
    {
        "id": 490,
        "Options": [
            "2. Is the below tree representation of 50,100,400,300,280 correct way to represent cartesian tree?",
            "<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-cartesian-tree-q2.png\" alt=\"data-structure-questions-answers-cartesian-tree-q2\" width=\"265\" height=\"156\" class=\"aligncenter size-full wp-image-155654\" />",
            "a) true",
            "b) false"
        ],
        "Answer": "Answer: a\nExplanation: A tree with heap property (parent is either small or big than children) and when traversed in inorder yields the given input sequence is called as a cartesian tree. as the above figure satisies both the properties. note that even min heap tree can be generated. the above is a max heap tree."
    },
    {
        "id": 491,
        "Question": "What is the speciality of cartesian sorting?",
        "Options": [
            "a) it sorts partially sorted set of data quickly",
            "b) it considers cartesian product of elements",
            "c) it sorts elements in less than O(logn)",
            "d) it is a self balancing tree"
        ],
        "Answer": "Answer: a\nExplanation: A height balanced cartesian tree is not possible as seen in above question. also any time a unique sequnce possess a unique cartesian tree, this can be proven through induction."
    },
    {
        "id": 492,
        "Question": "Consider a sequence of numbers to have repetitions, how a cartesian tree can be constructed in such situations without violating any rules?",
        "Options": [
            "a) use any tie-breaking rule between repeated elements",
            "b) cartesian tree is impossible when repetitions are present",
            "c) construct a max heap in such cases",
            "d) construct a min heap in such cases"
        ],
        "Answer": "Answer: a\nExplanation: It can sort a set which requires only some sorting or displacements. for example consider 78, 79, 80, 82, 81, 83, In this only 81 and 82 must be swaped to make it a complete sorted set, in this case cartesian sort comes to the rescue."
    },
    {
        "id": 493,
        "Question": "Cartesian trees are most suitable for?",
        "Options": [
            "a) searching",
            "b) finding nth element",
            "c) minimum range query and lowest common ancestors",
            "d) self balancing a tree"
        ],
        "Answer": "Answer: a\nExplanation: Consider any of the tie breaking rules, for example the element which appears first can be taken as small among the same elements and then apply cartesian tree rules."
    },
    {
        "id": 494,
        "Question": "A treap is a cartesian tree with ___________",
        "Options": [
            "a) additional value, which is a priority value to the key generated randomly",
            "b) additional value, which is a priority value to the key generated sequentially",
            "c) additional heap rule",
            "d) additional operations like remove a range of elements"
        ],
        "Answer": "Answer: b\nExplanation: The above given steps are for sorting a cartesian tree. cartesian sort is benificial in case of partially sorted set of elements. a cartesian sort can be considered as a selection or heap sort maintaing a priority queue."
    },
    {
        "id": 495,
        "Question": "How to achieve the above operation efficiently?",
        "Options": [
            "a) use linked lists",
            "b) use avl trees",
            "c) use red-black trees",
            "d) use treaps (cartesian trees)"
        ],
        "Answer": "Answer: c\nExplanation: In a cartesian tree minimum value can be found by finding lowest common ancestor for the extreme elements. consider 11,9,19,16 the lowest element is 9 and is a lowest common ancestor for 11 and 16. and by applying few techniques cartesian tree can be used to even find lowest common ancestors efficiently.\nthese can be done in constant time. tree can be constructed in linear time (this is the most efficient time for any tree construction) and takes space as many elements are there."
    },
    {
        "id": 496,
        "Question": "What is a weight balanced tree?",
        "Options": [
            "a) A binary tree that stores the sizes of subtrees in nodes",
            "b) A binary tree with an additional attribute of weight",
            "c) A height balanced binary tree",
            "d) A normal binary tree"
        ],
        "Answer": "Answer: a\nExplanation: Unlike AVL and redblack trees which uses height and color as book keeping information, weight balanced trees use the size of subtrees."
    },
    {
        "id": 497,
        "Question": "What are the applications of weight balanced tree?",
        "Options": [
            "a) dynamic sets, dictionaries, sequences, maps",
            "b) heaps",
            "c) sorting",
            "d) storing strings"
        ],
        "Answer": "Answer: a\nExplanation: They are a type of self balancing trees which are mostly used in storing key-value pairs, which is mostly used in functional programming languages. they are very useful to maintain big set of ordered objects."
    },
    {
        "id": 498,
        "Question": "A node of the weight balanced tree has",
        "Options": [
            "a) key, left and right pointers, size",
            "b) key, value",
            "c) key, size",
            "d) key"
        ],
        "Answer": "Answer: a\nExplanation: As a weight balanced tree stores height of the subtrees, we need to use size as an additional attribute to every node. also value(for mappings) may be an optional attribute."
    },
    {
        "id": 499,
        "Question": "What is the condition for a tree to be weight balanced. where a is factor and n is a node?",
        "Options": [
            "a) weight[n.left] >= a*weight[n] and weight[n.right] >= a*weight[n].",
            "b) weight[n.left] >= a*weight[n.right] and weight[n.right] >= a*weight[n].",
            "c) weight[n.left] >= a*weight[n.left] and weight[n.right] >= a*weight[n].",
            "d) weight[n] is a non zero"
        ],
        "Answer": "Answer: a\nExplanation: Size of a node k is size[k] = size[k.left] + 1 + size[k.right] and based on this the weight will be given as weight[k] = size[k] + 1."
    },
    {
        "id": 500,
        "Question": "What are the operations that can be performed on weight balanced tree?",
        "Options": [
            "a) all basic operations and set intersection, set union and subset test",
            "b) all basic operations",
            "c) set intersection, set union and subset test",
            "d) only insertion and deletion"
        ],
        "Answer": "Answer: a\nExplanation: The tree is said to be a-balanced if the condition is satisfied. and ‘a’ value will be determined during tree formation. large value of ‘a’ is more effective."
    },
    {
        "id": 501,
        "Question": "Consider a weight balanced tree such that, the number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on k nodes can be described as",
        "Options": [
            "a) log2 n",
            "b) log4/3 n",
            "c) log3 n",
            "d) log3/2 n"
        ],
        "Answer": "Answer: a\nExplanation: The speciality of a weight balanced tree is a part from basic operations we can perform collective operations like set intersection, which helps in rapid prototyping in functional programming languages."
    },
    {
        "id": 502,
        "Question": "8. Why the below pseudo code where x is a value, wt is weight factor and t is root node can’t insert?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">WeightBalanceTreeNode insert<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> wt, WeightBalanceTreeNode k<span class=\"br0\">)</span> <span class=\"sy0\">:</span>\n&nbsp;\n           <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n                k <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> WeightBalanceTreeNode<span class=\"br0\">(</span>x, wt, <span class=\"kw2\">null</span>, <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n           <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> t.<span class=\"me1\">element</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span>\n&nbsp;\n                k.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> insert <span class=\"br0\">(</span>x, wt, k.<span class=\"me1\">left</span><span class=\"br0\">)</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k.<span class=\"me1\">left</span>.<span class=\"me1\">weight</span> <span class=\"sy0\">&lt;</span> k.<span class=\"me1\">weight</span><span class=\"br0\">)</span>\n                    k <span class=\"sy0\">=</span> rotateWithRightChild <span class=\"br0\">(</span>k<span class=\"br0\">)</span>\n&nbsp;\n            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> t.<span class=\"me1\">element</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span>\n&nbsp;\n                k.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> insert <span class=\"br0\">(</span>x, wt, k.<span class=\"me1\">right</span><span class=\"br0\">)</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k.<span class=\"me1\">right</span>.<span class=\"me1\">weight</span> <span class=\"sy0\">&lt;</span> k.<span class=\"me1\">weight</span><span class=\"br0\">)</span>\n                    k <span class=\"sy0\">=</span> rotateWithLeftChild <span class=\"br0\">(</span>k<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) when x>t. element Rotate-with-left-child should take place and vice versa",
            "b) the logic is incorrect",
            "c) the condition for rotating children is wrong",
            "d) insertion cannot be performed in weight balanced trees"
        ],
        "Answer": "Answer: d\nExplanation: Total number of nodes can be described by the recurrence T(n) = T((n-1)/3)) + T(2(n-1)/3) + 1 T(1) = 1. height of the tree will be H(n) = H(2/3(n-1)) + 1, H(1). drawing a recurrence tree and the cost at each level is 1 and the height will be log(3/2)n."
    },
    {
        "id": 503,
        "Question": "What is the special property of red-black trees and what root should always be?",
        "Options": [
            "a) a color which is either red or black and root should always be black color only",
            "b) height of the tree",
            "c) pointer to next node",
            "d) a color which is either green or black"
        ],
        "Answer": "Answer: a\nExplanation: An extra attribute which is a color red or black is used. root is black because if it is red then one of red-black tree property which states that number of black nodes from root to null nodes must be same, will be violated. "
    },
    {
        "id": 504,
        "Question": "What are the operations that could be performed in O(logn) time complexity by red-black tree?",
        "Options": [
            "a) insertion, deletion, finding predecessor, successor",
            "b) only insertion",
            "c) only finding predecessor, successor",
            "d) for sorting"
        ],
        "Answer": "Answer: a\nExplanation: We impose such restrictions to achieve self balancing trees with logarithmic complexities for insertions, deletions, search.\n"
    },
    {
        "id": 505,
        "Question": "Which of the following is an application of Red-black trees and why?",
        "Options": [
            "a) used to store strings efficiently",
            "b) used to store integers efficiently",
            "c) can be used in process schedulers, maps, sets",
            "d) for efficient sorting"
        ],
        "Answer": "Answer: a\nExplanation: Considering all the properties of red-black tree, 50 must be the black root and there are two possibilities for subtrees. one is option “50-black root, 18-red left subtree, 100-red right subtree” and other is making all nodes of the tree to be black."
    },
    {
        "id": 506,
        "Question": "When it would be optimal to prefer Red-black trees over AVL trees?",
        "Options": [
            "a) when there are more insertions or deletions",
            "b) when more search is needed",
            "c) when tree must be balanced",
            "d) when log(nodes) time complexity is needed"
        ],
        "Answer": "Answer: a\nExplanation: We impose restrictions to achieve logarithm time complexities.\nimpose restrictions are:\n . root property is black\n . every leaf is black\n . children of red node are black\n . all leaves have same black."
    },
    {
        "id": 507,
        "Question": "Why Red-black trees are preferred over hash tables though hash tables have constant time complexity?",
        "Options": [
            "a) no they are not preferred",
            "b) because of resizing issues of hash table and better ordering in redblack trees",
            "c) because they can be implemented using trees",
            "d) because they are balanced"
        ],
        "Answer": "Answer: c\nExplanation: RB tree is used for Linux kernel in the form of completely fair scheduler process scheduling algorithm. It is used for faster insertions, retrievals."
    },
    {
        "id": 508,
        "Question": "How can you save memory when storing color information in Red-Black tree?",
        "Options": [
            "a) using least significant bit of one of the pointers in the node for color information",
            "b) using another array with colors of each node",
            "c) storing color information in the node structure",
            "d) using negative and positive numbering"
        ],
        "Answer": "Answer: a\nExplanation: Though both trees are balanced, when there are more insertions and deletions to make the tree balanced, AVL trees should have more rotations, it would be better to use red-black. but if more search is required AVL trees should be used."
    },
    {
        "id": 509,
        "Question": "When to choose Red-Black tree, AVL tree and B-trees?",
        "Options": [
            "a) many inserts, many searches and when managing more items respectively",
            "b) many searches, when managing more items respectively and many inserts respectively",
            "c) sorting, sorting and retrieval respectively",
            "d) retrieval, sorting and retrieval respectively"
        ],
        "Answer": "Answer: b\nExplanation: Redblack trees have O(logn) for ordering elements in terms of finding first and next elements. also whenever table size increases or decreases in hash table you need to perform rehashing which can be very expensive in real time. also red black stores elements in sorted order rather than input order."
    },
    {
        "id": 510,
        "Question": "10. What is the below pseudo code trying to do, where pt is a node pointer and root pointer?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">  redblack<span class=\"br0\">(</span>Node root, Node pt<span class=\"br0\">)</span> <span class=\"sy0\">:</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>root <span class=\"sy0\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span>\n       <span class=\"kw1\">return</span> pt\n&nbsp;\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pt.<span class=\"me1\">data</span> <span class=\"sy0\">&lt;</span> root.<span class=\"me1\">data</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        root.<span class=\"me1\">left</span>  <span class=\"sy0\">=</span>   redblack<span class=\"br0\">(</span>root.<span class=\"me1\">left</span>, pt<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        root.<span class=\"me1\">left</span>.<span class=\"me1\">parent</span> <span class=\"sy0\">=</span> root\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pt.<span class=\"me1\">data</span> <span class=\"sy0\">&gt;</span> root.<span class=\"me1\">data</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        root.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> redblackt<span class=\"br0\">(</span>root.<span class=\"me1\">right</span>, pt<span class=\"br0\">)</span>\n        root.<span class=\"me1\">right</span>.<span class=\"me1\">parent</span> <span class=\"sy0\">=</span> root\n    <span class=\"br0\">}</span>\n   <span class=\"kw1\">return</span> root</pre></div></div></div></div></div></div>",
        "Options": [
            "a) insert a new node",
            "b) delete a node",
            "c) search a node",
            "d) count the number of nodes"
        ],
        "Answer": "Answer: a\nExplanation: The node pointers can be used to store color with the help of significant bits. the exceptions of this method are in languages like java where pointers are not used this may not work."
    },
    {
        "id": 511,
        "Question": "Which algorithm is used in the top tree data structure?",
        "Options": [
            "a) Divide and Conquer",
            "b) Greedy",
            "c) Backtracking",
            "d) Branch"
        ],
        "Answer": "Answer: a\nExplanation: Top tree is a type of data structure which is based on unrooted dynamic binary tree and is used to solve path related problems. It allows an algorithm called divide and conquer."
    },
    {
        "id": 512,
        "Question": "For how many vertices in a set, is top tree defined for underlying tree?",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 5",
            "d) 2"
        ],
        "Answer": "Answer: d\nExplanation: Top tree is defined for a set having a maximum of 2 vertices for its underlying tree. Those sets having at maximum 2 vertices is called External Boundary Vertices."
    },
    {
        "id": 513,
        "Question": "How many edges are present in path cluster?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 6",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: There are at least 2 edges present in path cluster. Cluster in data structure is defined as the subtree that is connect having maximum of 2 vertices known as Boundary Vertices."
    },
    {
        "id": 514,
        "Question": "How many edges does a leaf cluster contain?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: If a cluster has no edges and contains only one vertex known as boundary vertex then, it is known as leaf cluster. So a leaf cluster doesn’t contain any edges. It is also known as Point cluster."
    },
    {
        "id": 515,
        "Question": "How many edges are present in Edge cluster?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: A cluster containing only single edge is known as Edge cluster. So there are in total 1 edge present in edge cluster. Cluster in data structure is defined as the subtree that is connect having maximum of 2 vertices known as Boundary Vertices."
    },
    {
        "id": 516,
        "Question": "Which data structure is used to maintain a dynamic forest using a link or cut operation?",
        "Options": [
            "a) Top Tree",
            "b) Array",
            "c) Linked List",
            "d) Stack"
        ],
        "Answer": "Answer: a\nExplanation: Top tree data structure is used to maintain a dynamic forest using link or cut operations. Top tree is a type of data structure which is based on unrooted dynamic binary tree and is used to solve path related problems."
    },
    {
        "id": 517,
        "Question": "What is the time complexity for the initialization of top tree?",
        "Options": [
            "a) O (n)",
            "b) O (n2)",
            "c) O (log n)",
            "d) O (n!)"
        ],
        "Answer": "Answer: a\nExplanation: If A ꓵ B is a singleton set where A and B are two clusters, that is there are only one node that is common between the clusters then they are known as Merge able cluster."
    },
    {
        "id": 518,
        "Question": "How many top trees are there in a tree with single vertex?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: Top tree data structure is used to maintain a dynamic forest using link or cut operations. Top tree is a type of data structure which is based on unrooted dynamic binary tree and is used to solve path related problems."
    },
    {
        "id": 519,
        "Question": "Which property makes top tree a binary tree?",
        "Options": [
            "a) Nodes as Cluster",
            "b) Leaves as Edges",
            "c) Root is Tree Itself",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Generally, trees have weight on its edges. Also there is one to one correspondence of the edges with the top trees. Therefore, top trees can be initialized in O (n) time."
    },
    {
        "id": 520,
        "Question": "Which of the dynamic operations are used in Top Tree data structure implementation?",
        "Options": [
            "a) Link",
            "b) Cut",
            "c) Expose",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Tree having a single vertex has no clusters of tree present in the structure. Therefore, there are empty top trees in a tree having a single vertex. Trees with one node are single node."
    },
    {
        "id": 521,
        "Question": "Which of the following are used as an internal operation in Top tree?",
        "Options": [
            "a) Merge",
            "b) Cut",
            "c) Expose",
            "d) Link"
        ],
        "Answer": "Answer: d\nExplanation: Top tree can be considered as a binary tree if the nodes form a cluster, leaves act as an edge and the root of the top tree acts as a tree itself. Then the top tree is called binary tree."
    },
    {
        "id": 522,
        "Question": "What is the time complexity for maintaining a dynamic set of weighted trees?",
        "Options": [
            "a) O (n)",
            "b) O (n2)",
            "c) O (log n)",
            "d) O (n!)"
        ],
        "Answer": "Answer: d\nExplanation: Link returns a single tree having different vertices from top trees. Cut removes the edge from the top tree. Expose is used to implement queries on top trees. Hence all of the options are used as dynamic operations."
    },
    {
        "id": 523,
        "Question": "What are splay trees?",
        "Options": [
            "a) self adjusting binary search trees",
            "b) self adjusting binary trees",
            "c) a tree with strings",
            "d) a tree with probability distributions"
        ],
        "Answer": "Answer: a\nExplanation: Splay trees are height balanced, self adjusting BST’s."
    },
    {
        "id": 524,
        "Question": "Which of the following property of splay tree is correct?",
        "Options": [
            "a) it holds probability usage of the respective sub trees",
            "b) any sequence of j operations starting from an empty tree with h nodes atmost, takes O(jlogh) time complexity",
            "c) sequence of operations with h nodes can take O(logh) time complexity",
            "d) splay trees are unstable trees"
        ],
        "Answer": "Answer: b\nExplanation: This is a property of splay tree that ensures faster access. we push the most recently used nodes to top which leads to faster access to recently used values."
    },
    {
        "id": 525,
        "Question": "Why to prefer splay trees?",
        "Options": [
            "a) easier to program",
            "b) space efficiency",
            "c) easier to program and faster access to recently accessed items",
            "d) quick searching"
        ],
        "Answer": "Answer: c\nExplanation: Whenever you insert an element or remove or read an element that will be pushed or stored at the top which facilitates easier access or recently used stuff."
    },
    {
        "id": 526,
        "Question": "What is a splay operation?",
        "Options": [
            "a) moving parent node to down of child",
            "b) moving a node to root",
            "c) moving root to leaf",
            "d) removing leaf node"
        ],
        "Answer": "Answer: a\nExplanation: We go with amortized time complexity when we feel that not all operations are worst and some can be efficiently done. in splay trees not all splay operations will lead to O(logn) worst case complexity."
    },
    {
        "id": 527,
        "Question": "Which of the following options is an application of splay trees?",
        "Options": [
            "a) cache Implementation",
            "b) networks",
            "c) send values",
            "d) receive values"
        ],
        "Answer": "Answer: b\nExplanation: Splay trees mainly work using splay operations. wheneve we insert, delete and search for a node we splay the respective nodes to root. we have zig-zag and zig-zig operations."
    },
    {
        "id": 528,
        "Question": "When we have red-black trees and AVL trees that can perform most of operations in logarithmic times, then what is the need for splay trees?",
        "Options": [
            "a) no there is no special usage",
            "b) In real time it is estimated that 80% access is only to 20% data, hence most used ones must be easily available",
            "c) redblack and avl are not upto mark",
            "d) they are just another type of self balancing binary search trees"
        ],
        "Answer": "Answer: a\nExplanation: Splay trees can be used for faster access to recently accessed items and hence used for cache implementations."
    },
    {
        "id": 529,
        "Options": [
            "8. After the insertion operation, is the resultant tree a splay tee?",
            "<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-splay-tree-q8.png\" alt=\"data-structure-questions-answers-splay-tree-q8\" width=\"292\" height=\"241\" class=\"aligncenter size-full wp-image-155665\" />",
            "a) true",
            "b) false"
        ],
        "Answer": "Answer: b\nExplanation: May be the stats showing 80-20% may be not accurate, but in real time that is the widely spread scenario seen. If you are into this type of situation, you must choose implementing splay trees."
    },
    {
        "id": 530,
        "Question": "9.  What output does the below pseudo code produces?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">    Tree_node function<span class=\"br0\">(</span>Tree_node x<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        Tree_node y <span class=\"sy0\">=</span> x.<span class=\"me1\">left</span><span class=\"sy0\">;</span>\n        x.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> y.<span class=\"me1\">right</span><span class=\"sy0\">;</span>\n        y.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> y<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) right rotation of subtree",
            "b) left rotation of subtree",
            "c) zig-zag operation",
            "d) zig-zig operation"
        ],
        "Answer": "Answer: a\nExplanation: There is a zig-zag and right operation(zig) which gives the right hand side tree. refer splay operations for insertion in splay tree."
    },
    {
        "id": 531,
        "Question": "What is the disadvantage of using splay trees?",
        "Options": [
            "a) height of a splay tree can be linear when accessing elements in non decreasing order.",
            "b) splay operations are difficult",
            "c) no significant disadvantage",
            "d) splay tree performs unnecessary splay when a node is only being read"
        ],
        "Answer": "Answer: a\nExplanation: When a right rotation is done the parent of the rotating node becomes it’s right node and it’s child becomes it’s left child."
    },
    {
        "id": 532,
        "Question": "What is the space complexity of a treap algorithm?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(log N)",
            "d) O(N2)"
        ],
        "Answer": "Answer: a\nExplanation: The average case and worst case space complexity of a treap is mathematically found to be O(N)."
    },
    {
        "id": 533,
        "Question": "Which is the simplest of all binary search trees?",
        "Options": [
            "a) AVL tree",
            "b) Treap",
            "c) Splay tree",
            "d) Binary heap"
        ],
        "Answer": "Answer: b\nExplanation: A treap is a combination of a tree and a heap. The structure of a treap is determined by the fact that it is heap-ordered."
    },
    {
        "id": 534,
        "Question": "What is the reason behind the simplicity of a treap?",
        "Options": [
            "a) Each node has data and a pointer",
            "b) Each node is colored accordingly",
            "c) It is a binary search tree following heap principles",
            "d) Each node has a fixed priority field"
        ],
        "Answer": "Answer: b\nExplanation: A treap is the simplest of all binary search trees. Each node is given a numeric priority and implementation is non recursive."
    },
    {
        "id": 535,
        "Question": "What is the condition for priority of a node in a treap?",
        "Options": [
            "a) a node’s priority should be greater than its parent",
            "b) a node’s priority should be at least as large as its parent",
            "c) the priority is randomly assigned and can have any value",
            "d) a node’s priority is always given in decreasing order"
        ],
        "Answer": "Answer: d\nExplanation: A treap is the simplest of all because we don’t have to worry about adjusting the priority of a node."
    },
    {
        "id": 536,
        "Question": "What is the average running time of a treap?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(log N)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: b\nExplanation: A node’s priority should satisfy heap order. That is, any node’s priority should be at least as large as its parent."
    },
    {
        "id": 537,
        "Question": "Which node has the lowest priority in a treap?",
        "Options": [
            "a) root node",
            "b) leaf node",
            "c) null node",
            "d) centre node"
        ],
        "Answer": "Answer: a\nExplanation: Other than insertion, deletion and search operations, several operations like union, intersection and set difference can be done in treaps."
    },
    {
        "id": 538,
        "Question": "What is the priority of a null node?",
        "Options": [
            "a) 1",
            "b) 0",
            "c) random number",
            "d) infinity"
        ],
        "Answer": "Answer: c\nExplanation: The average case and worst case analysis of a treap are mathematically found to be O(log N)."
    },
    {
        "id": 539,
        "Question": "Who invented treaps?",
        "Options": [
            "a) Cecilia and Raimund",
            "b) Arne Andersson",
            "c) Donald Shell",
            "d) Harris and Ross"
        ],
        "Answer": "Answer: a\nExplanation: A root node has the lowest priority in a treap since the node’s priority is based on heap order."
    },
    {
        "id": 540,
        "Question": "What is a threaded binary tree traversal?",
        "Options": [
            "a) a binary tree traversal using stacks",
            "b) a binary tree traversal using queues",
            "c) a binary tree traversal using stacks and queues",
            "d) a binary tree traversal without using stacks and queues"
        ],
        "Answer": "Answer: d\nExplanation: This type of tree traversal will not use stack or queue."
    },
    {
        "id": 541,
        "Question": "What are the disadvantages of normal binary tree traversals?",
        "Options": [
            "a) there are many pointers which are null and thus useless",
            "b) there is no traversal which is efficient",
            "c) complexity in implementing",
            "d) improper traversals"
        ],
        "Answer": "Answer: a\nExplanation: As there are majority of pointers with null value going wasted we use threaded binary trees."
    },
    {
        "id": 542,
        "Question": "In general, the node content in a threaded binary tree is ________",
        "Options": [
            "a) leftchild_pointer, left_tag, data, right_tag, rightchild_pointer",
            "b) leftchild_pointer, left_tag",
            "c) leftchild_pointer, left_tag, right_tag, rightchild_pointer",
            "d) leftchild_pointer, left_tag, data"
        ],
        "Answer": "Answer: a\nExplanation: It contains additional 2 pointers over normal binary tree node structure."
    },
    {
        "id": 543,
        "Question": "What are null nodes filled with in a threaded binary tree?",
        "Options": [
            "a) inorder predecessor for left node and inorder successor for right node information",
            "b) right node with inorder predecessor and left node with inorder successor information",
            "c) they remain null",
            "d) some other values randomly"
        ],
        "Answer": "Answer: a\nExplanation: If preorder or postorder is used then the respective predecessor and successor info is stored."
    },
    {
        "id": 544,
        "Question": "Which of the following tree traversals work if the null left pointer pointing to the predecessor and null right pointer pointing to the successor in a binary tree?",
        "Options": [
            "a) inorder, postorder, preorder traversals",
            "b) inorder",
            "c) postorder",
            "d) preorder"
        ],
        "Answer": "Answer: a\nExplanation: In threaded binary trees, the null left pointer points to the predecessor and the right null pointer point to the successor. In threaded binary trees, we can use in-order, preorder and postorder traversals to visit every node in the tree."
    },
    {
        "id": 545,
        "Question": "What are double and single threaded trees?",
        "Options": [
            "a) when both left, right nodes are having null pointers and only right node is null pointer respectively",
            "b) having 2 and 1 node",
            "c) using single and double linked lists",
            "d) using heaps and priority queues"
        ],
        "Answer": "Answer: a\nExplanation: They are properties of double and single threaded binary trees respectively."
    },
    {
        "id": 546,
        "Question": "7. What is wrong with below code for inorder traversal of inorder threaded binary tree:<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">   inordertraversal<span class=\"br0\">(</span>threadedtreenode root<span class=\"br0\">)</span><span class=\"sy0\">:</span>\n   threadedtreenode q <span class=\"sy0\">=</span> inorderpredecessor<span class=\"br0\">(</span>root<span class=\"br0\">)</span>\n   <span class=\"kw1\">while</span><span class=\"br0\">(</span>q<span class=\"sy0\">!=</span>root<span class=\"br0\">)</span><span class=\"sy0\">:</span>\n   q<span class=\"sy0\">=</span>inorderpredecessor<span class=\"br0\">(</span>q<span class=\"br0\">)</span>\n   print q.<span class=\"me1\">data</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) inordersuccessor instead of inorderpredecessor must be done",
            "b) code is correct",
            "c) it is code for post order",
            "d) it is code for pre order"
        ],
        "Answer": "Answer: a\nExplanation: Property of inorder threaded binary tree is left node with inorder predecessor and right node with inorder successor information are stored."
    },
    {
        "id": 547,
        "Question": "Who developed the concept of tango tree?",
        "Options": [
            "a) Erik Demaine",
            "b) Mihai Patrascu",
            "c) John Lacono",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Erik Demaine is a well-known professor of Computer Science at MIT. John Lacono is an American computer scientist specialized in data structure and algorithm while Mihai Patrascu was a Romanian- American computer scientist. All of them together developed the concept of Tango tree."
    },
    {
        "id": 548,
        "Question": "Which type of tree is tango tree?",
        "Options": [
            "a) Ternary Tree",
            "b) AVL Tree",
            "c) Binary Search Tree",
            "d) K-ary Tree"
        ],
        "Answer": "Answer: c\nExplanation: Tango tree is an example of binary search tree which was developed by four famous scientists Erik Demaine, Mihai Patrascu, John Lacono and Harmon in the year 2004."
    },
    {
        "id": 549,
        "Question": "After which city is tango tree named?",
        "Options": [
            "a) Vatican City",
            "b) Buenos Aires",
            "c) New York",
            "d) California"
        ],
        "Answer": "Answer: b\nExplanation: Tango is a popular couple dance or partner dance that was originated in the 1880s somewhere between Argentina and Uruguay. Buenos Aires is a capital city off Argentina. Hence they named after Buenos Aires."
    },
    {
        "id": 550,
        "Question": "Which type of binary search tree or algorithm does tango tree use?",
        "Options": [
            "a) Online",
            "b) Offline",
            "c) Static",
            "d) Dynamic"
        ],
        "Answer": "Answer: d\nExplanation: Tango tree is an online binary search tree whose time complexity is O (log (log n)) when compared to the time complexity of offline binary search tree model. Online algorithm processes input or data provided piece by piece."
    },
    {
        "id": 551,
        "Question": "What is the time complexity of for achieving competitive ratio by tango tree?",
        "Options": [
            "a) O (log n)",
            "b) O (n2)",
            "c) O (n!)",
            "d) O (log (log n))"
        ],
        "Answer": "Answer: d\nExplanation: Tango tree is an online binary search tree whose time complexity is O (log (log n)) when compared to the time complexity of offline binary search tree model. Online algorithm processes input or data provided piece by piece."
    },
    {
        "id": 552,
        "Question": "Which type of binary search tree is imitated for construction of tango tree?",
        "Options": [
            "a) Complete Binary Search Tree",
            "b) Perfect Binary Search Tree",
            "c) Balanced Binary Search Tree",
            "d) Degenerate Binary Search Tree"
        ],
        "Answer": "Answer: a\nExplanation: Tango tree is constructed by simulating a complete binary search tree. This tree is also known as Reference tree, that contains all the elements of the tree. Also, the reference tree is never showed in actual implementation."
    },
    {
        "id": 553,
        "Question": "Which special balanced binary search tree is used to store the nodes of auxiliary tree?",
        "Options": [
            "a) Red – Black Tree",
            "b) Red – Brown Tree",
            "c) Red – Yellow Tree",
            "d) Red – Tango Tree"
        ],
        "Answer": "Answer: a\nExplanation: The path starting from the root and following the path of preferred child node till the end of leaf node is known as preferred path. Nodes are stored in Red – Black tree for the representation of the preferred path."
    },
    {
        "id": 554,
        "Question": "Which operation is used to combine two auxiliary trees?",
        "Options": [
            "a) Join",
            "b) Combinatorial",
            "c) Add",
            "d) Concatenation"
        ],
        "Answer": "Answer: a\nExplanation: Partitioning method is used by tango tree which partitions a binary search tree into small sets of paths and then storing them to auxiliary trees. Hence tango tree is represented as a tree of trees."
    },
    {
        "id": 555,
        "Question": "Which operation is used to break a preferred path into two sets of parts at a particular node?",
        "Options": [
            "a) Differentiate",
            "b) Cut",
            "c) Integrate",
            "d) Join"
        ],
        "Answer": "Answer: a\nExplanation: If the top node of one of the reference tree amongst the two, is the is the child of the bottom node of the other reference tree, then the join operation can be carried out to join the two auxiliary trees."
    },
    {
        "id": 556,
        "Question": "What is the upper bound for a tango tree if k is a number of interleaves?",
        "Options": [
            "a) k+2 O (log (log n))",
            "b) k O (log n)",
            "c) K2 O (log n)",
            "d) k+1 O (log (log n))"
        ],
        "Answer": "Answer: a\nExplanation: Partitioning method is used by tango tree which partitions a binary search tree into small sets of paths and then storing them to auxiliary trees. Hence tango tree is represented as a tree of trees."
    },
    {
        "id": 557,
        "Question": "What is the time complexity for searching k+1 auxiliary trees?",
        "Options": [
            "a) k+2 O (log (log n))",
            "b) k+1 O (log n)",
            "c) K+2 O (log n)",
            "d) k+1 O (log (log n))"
        ],
        "Answer": "Answer: b\nExplanation: A preferred path is broken into two parts. One of them is known as top part while other is known as bottom part. To break a preferred path into two sets, cut operation is used at a particular node."
    },
    {
        "id": 558,
        "Question": "What is the time complexity for the update cost on auxiliary trees?",
        "Options": [
            "a) O (log (log n))",
            "b) k-1 O (log n)",
            "c) K2 O (log n)",
            "d) k+1 O (log (log n))"
        ],
        "Answer": "Answer: d\nExplanation: Upper bound is found to analyze the work done by a tango tree on a given set of sequences. In order to connect to the tango tree, the upper bound is found to be k+1 O (log (log n))."
    },
    {
        "id": 559,
        "Question": "Which of the following is the self-adjusting binary search tree?",
        "Options": [
            "a) AVL Tree",
            "b) Splay Tree",
            "c) Top Tree",
            "d) Ternary Tree"
        ],
        "Answer": "Answer: d\nExplanation: Since each search operation in the auxiliary tree takes O (log (log n)) time as auxiliary tree size is bounded by the height of the reference tree that is log n. So for k+1 auxiliary trees, total search time is k+1 O (log (log n))."
    },
    {
        "id": 560,
        "Question": "Which of the following is also known as Rope data structure?",
        "Options": [
            "a) Cord",
            "b) String",
            "c) Array",
            "d) Linked List"
        ],
        "Answer": "Answer: a\nExplanation: Array is a linear data structure. Strings are a collection and sequence of codes, alphabets or characters. Linked List is a linear data structure having a node containing data input and the address of the next node. The cord is also known as the rope data structure."
    },
    {
        "id": 561,
        "Question": "Which type of data structure does rope represent?",
        "Options": [
            "a) Array",
            "b) Linked List",
            "c) Queue",
            "d) Binary Tree"
        ],
        "Answer": "Answer: d\nExplanation: Rope is a special binary tree in which the end nodes contain the string and its length. The array is a linear data structure. Linked List is a linear data structure having a node containing data input and the address of the next node. The queue is a data structure working on the principle of FIFO."
    },
    {
        "id": 562,
        "Question": "What is the time complexity for finding the node at x position where n is the length of the rope?",
        "Options": [
            "a) O (log n)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: In order to find the node at x position in a rope data structure where N is the length of the rope, we start a recursive search from the root node. So the time complexity for worst case is found to be O (log N)."
    },
    {
        "id": 563,
        "Question": "What is the time complexity for creating a new node and then performing concatenation in the rope data structure?",
        "Options": [
            "a) O (log n)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (1)"
        ],
        "Answer": "Answer: d\nExplanation: In order to perform the concatenation on the rope data structure, one can create two nodes S1 and S2 and then performing the operation in constant time that is the time complexity is O (1).\n"
    },
    {
        "id": 564,
        "Question": "What is the time complexity for splitting the string into two new string in the rope data structure?",
        "Options": [
            "a) O (n2)",
            "b) O (n!)",
            "c) O (log n)",
            "d) O (1)"
        ],
        "Answer": "Answer: c\nExplanation: In order to perform the splitting on the rope data structure, one can split the given string into two new string S1 and S2 in O (log n) time. So, the time complexity for worst case is O (log n)."
    },
    {
        "id": 565,
        "Question": "Which type of binary tree does rope require to perform basic operations?",
        "Options": [
            "a) Unbalanced",
            "b) Balanced",
            "c) Complete",
            "d) Full"
        ],
        "Answer": "Answer: b\nExplanation: To perform the basic operations on a rope data structure like insertion, deletion, concatenation and splitting, the rope should be a balanced tree. After performing the operations one should again re-balance the tree."
    },
    {
        "id": 566,
        "Question": "What is the time complexity for inserting the string and forming a new string in the rope data structure?",
        "Options": [
            "a) O (log n)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: In order to perform the insertion on the rope data structure, one can insert the given string at any position x to form a new string in O (log n) time. So, the time complexity for worst case is O (log n). This can be done by one split operation and two concatenation operations."
    },
    {
        "id": 567,
        "Question": "What is the time complexity for deleting the string to form a new string in the rope data structure?",
        "Options": [
            "a) O (n2)",
            "b) O (n!)",
            "c) O (log n)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: In order to perform the insertion on the rope data structure, the time complexity is O (log n). In order to perform the deletion on the rope data structure, the time complexity for worst case is O (log n). While for arrays the time complexity is O (n)."
    },
    {
        "id": 568,
        "Question": "Which of the following is the most widely used external memory data structure?",
        "Options": [
            "a) AVL tree",
            "b) B-tree",
            "c) Red-black tree",
            "d) Both AVL tree and Red-black tree"
        ],
        "Answer": "Answer: b\nExplanation: In external memory, the data is transferred in form of blocks. These blocks have data valued and pointers. And B-tree can hold both the data values and pointers. So B-tree is used as an external memory data structure."
    },
    {
        "id": 569,
        "Question": "B-tree of order n is a order-n multiway tree in which each non-root node contains __________",
        "Options": [
            "a) at most (n – 1)/2 keys",
            "b) exact (n – 1)/2 keys",
            "c) at least 2n keys",
            "d) at least (n – 1)/2 keys"
        ],
        "Answer": "Answer: d\nExplanation: A non-root node in a B-tree of order n contains at least (n – 1)/2 keys. And contains a maximum of (n – 1) keys and n sons."
    },
    {
        "id": 570,
        "Question": "A B-tree of order 4 and of height 3 will have a maximum of _______ keys.",
        "Options": [
            "a) 255",
            "b) 63",
            "c) 127",
            "d) 188"
        ],
        "Answer": "Answer: a\nExplanation:  A B-tree of order m of height h will have the maximum number of keys when all nodes are completely filled. So, the B-tree will have n = (mh+1 – 1) keys in this situation. So, required number of maximum keys = 43+1 – 1 = 256 – 1 = 255."
    },
    {
        "id": 571,
        "Question": "Five node splitting operations occurred when an entry is inserted into a B-tree. Then how many nodes are written?",
        "Options": [
            "a) 14",
            "b) 7",
            "c) 11",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: If s splits occur in a B-tree, 2s + 1 nodes are written (2 halves of each split and the parent of the last node split). So, if 5 splits occurred, then 2 * 5 + 1, i.e. 11 nodes are written."
    },
    {
        "id": 572,
        "Question": "2-3-4 trees are B-trees of order 4. They are an isometric of _____ trees.",
        "Options": [
            "a) AVL",
            "b) AA",
            "c) 2-3",
            "d) Red-Black"
        ],
        "Answer": "Answer: a\nExplanation: Both the B-tree and the AVL tree have O(log n) as worst case time complexity for insertion and deletion."
    },
    {
        "id": 573,
        "Question": "What is the best case height of a B-tree of order n and which has k keys?",
        "Options": [
            "a) logn (k+1) – 1",
            "b) nk",
            "c) logk (n+1) – 1",
            "d) klogn"
        ],
        "Answer": "Answer: d\nExplanation: 2-3-4 trees are isometric of Red-Black trees. It means that, for every 2-3-4 tree, there exists a Red-Black tree with data elements in the same order."
    },
    {
        "id": 574,
        "Question": "Which of the following is true?",
        "Options": [
            "a) larger the order of B-tree, less frequently the split occurs",
            "b) larger the order of B-tree, more frequently the split occurs",
            "c) smaller the order of B-tree, more frequently the split occurs",
            "d) smaller the order of B-tree, less frequently the split occurs"
        ],
        "Answer": "Answer: c\nExplanation: Each non-root in a B-tree of order 5 must contain at least 2 keys. Here, when the key 130 is deleted the node gets underflowed i.e. number of keys in the node drops below 2. So we combine the node with key 110 with it’s brother node having keys 144 and 156. And this combined node will also contain the separator key from parent i.e. key 140, leaving the root with two keys 110 and 160."
    },
    {
        "id": 575,
        "Question": "Which of the following is true?",
        "Options": [
            "a) B + tree allows only the rapid random access",
            "b) B + tree allows only the rapid sequential access",
            "c) B + tree allows rapid random access as well as rapid sequential access",
            "d) B + tree allows rapid random access and slower sequential access"
        ],
        "Answer": "Answer: b\nExplanation: In a B+ -tree, only the leaves have keys, and these keys are replicated in non-leaf nodes for defining the path for locating individual records."
    },
    {
        "id": 576,
        "Question": "A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?",
        "Options": [
            "a) 6",
            "b) 3",
            "c) 4",
            "d) 7"
        ],
        "Answer": "Answer: c\nExplanation: The B+ -tree being a variation of B-tree allows rapid random access. In a B+ -tree the leaves are linked together, so it also provides rapid sequential access. "
    },
    {
        "id": 577,
        "Question": "Which of the following is false?",
        "Options": [
            "a) A B+ -tree grows downwards",
            "b) A B+ -tree is balanced",
            "c) In a B+ -tree, the sibling pointers allow sequential searching",
            "d) B+ -tree is shallower than B-tree"
        ],
        "Answer": "Answer: b\nExplanation: Maximum number of pointers in a node is 7, i.e. the order of the B+ -tree is 7. In a  B+ tree of order n each leaf node contains at most n – 1 key and at least ⌈(n − 1)/2⌉ keys. Therefore, a minimum number of keys each leaf can have = ⌈(7 – 1)/2⌉ = 3."
    },
    {
        "id": 578,
        "Question": "A B+ -tree of order 3 is generated by inserting 89, 9 and 8. The generated B+ -tree is __________",
        "Options": [
            "a)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5a.png\" alt=\"bplus-tree-questions-answers-q5a\" width=\"268\" height=\"118\" class=\"alignnone size-full wp-image-218726\" />",
            "b)\t<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5b.png\" alt=\"bplus-tree-questions-answers-q5b\" width=\"300\" height=\"108\" class=\"alignnone size-full wp-image-218727\" />",
            "c)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5c.png\" alt=\"bplus-tree-questions-answers-q5c\" width=\"300\" height=\"106\" class=\"alignnone size-full wp-image-218728\" />",
            "d)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5d.png\" alt=\"bplus-tree-questions-answers-q5d\" width=\"273\" height=\"131\" class=\"alignnone size-full wp-image-218729\" />"
        ],
        "Answer": "Answer: a\nExplanation: A B+ -tree always grows upwards. And In a B+tree –  i)The path from the root to every leaf node is of the same length, so the tree is balanced. ii) Leaves are linked, so allow sequential searching. iii) An index is built with a single key per block of data rather than with one key per data record, so it is shallower than B-tree."
    },
    {
        "id": 579,
        "Question": "Efficiency of finding the next record in B+ tree is ____",
        "Options": [
            "a) O(n)",
            "b) O(log n)",
            "c) O(nlog n)",
            "d) O(1)"
        ],
        "Answer": "Answer: b\nExplanation:\n<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5exp.png\" alt=\"bplus-tree-questions-answers-q5exp\" width=\"585\" height=\"365\" class=\"alignnone size-full wp-image-218730\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5exp.png 585w, https://www.sanfoundry.com/wp-content/uploads/2017/09/bplus-tree-questions-answers-q5exp-300x187.png 300w\" sizes=\"(max-width: 585px) 100vw, 585px\" />\n"
    },
    {
        "id": 580,
        "Question": "What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?",
        "Options": [
            "a) 3",
            "b) 80",
            "c) 27",
            "d) 26"
        ],
        "Answer": "Answer: a\nExplanation: During the split, the middle key is retained in the right half node and also promoted to parent node. When a key is deleted from the leaf, it is retained in non-leaves, because it can be still a valid separator between keys in nodes below."
    },
    {
        "id": 581,
        "Question": "Which of the following is false?",
        "Options": [
            "a) Compared to B-tree, B+ -tree has larger fanout",
            "b) Deletion in B-tree is more complicated than in B+ -tree",
            "c) B+ -tree has greater depth than corresponding B-tree",
            "d) Both B-tree and B+ -tree have same search and insertion efficiencies"
        ],
        "Answer": "Answer: d\nExplanation: In a B+ -tree finding the next recored (successor) involves accessing an additional leaf at most. So, the efficiency of finding the next record is O(1)."
    },
    {
        "id": 582,
        "Question": "Which one of the following data structures are preferred in database-system implementation?",
        "Options": [
            "a) AVL tree",
            "b) B-tree",
            "c) B+ -tree",
            "d) Splay tree"
        ],
        "Answer": "Answer: d\nExplanation: A B+ tree of order n and height h can have at most nh – 1 keys. Therefore maximum number of keys = 33 -1 = 27 -1 = 26."
    },
    {
        "id": 583,
        "Question": "2-3 tree is a specific form of _________",
        "Options": [
            "a) B – tree",
            "b) B+ – tree",
            "c) AVL tree",
            "d) Heap"
        ],
        "Answer": "Answer: a\nExplanation: The 2-3 trees is a balanced tree. It is a specific form the B – tree. It is B – tree of order 3, where every node can have two child subtrees and one key or 3 child subtrees and two keys. "
    },
    {
        "id": 584,
        "Question": "Which of the following is the 2-3 tree?",
        "Options": [
            "a)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q2.png\" alt=\"data-structures-questions-answers-2-3-tree-q2\" width=\"229\" height=\"118\" class=\"alignnone size-full wp-image-218733\" />",
            "b)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q2a.png\" alt=\"data-structures-questions-answers-2-3-tree-q2a\" width=\"241\" height=\"130\" class=\"alignnone size-full wp-image-218734\" />",
            "c)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q2b.png\" alt=\"data-structures-questions-answers-2-3-tree-q2b\" width=\"241\" height=\"133\" class=\"alignnone size-full wp-image-218735\" />",
            "d)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q2c.png\" alt=\"data-structures-questions-answers-2-3-tree-q2c\" width=\"241\" height=\"141\" class=\"alignnone size-full wp-image-218737\" />"
        ],
        "Answer": "Answer: c\nExplanation: Tree should have two subtrees at node2, but it should not have three elements. The node with elements 11 and 15 should have three child subtrees."
    },
    {
        "id": 585,
        "Question": "The height of 2-3 tree with n elements is ______",
        "Options": [
            "a) between (n/2) and (n/3)",
            "b) (n/6)",
            "c) between (n) and log2(n + 1)",
            "d) between log3(n + 1) and log2(n + 1)"
        ],
        "Answer": "Answer: d\nExplanation: The number of elements in a 2-3 tree with height h is between 2h – 1 and 3h – 1. Therefore, the 2-3 tree with n elements will have the height between log3(n + 1) and log2(n + 1)."
    },
    {
        "id": 586,
        "Question": "Which of the following the BST is isometric with the 2-3 tree?",
        "Options": [
            "a) Splay tree",
            "b) AA tree",
            "c) Heap",
            "d) Red – Black tree"
        ],
        "Answer": "Answer: b\nExplanation: AA tree is isometric of the 2-3 trees. In an AA tree, we store each node a level, which is the height of the corresponding 2-3 tree node. So, we can convert a 2-3 tree to an AA tree."
    },
    {
        "id": 587,
        "Question": "Which of the following data structure can provide efficient searching of the elements?",
        "Options": [
            "a) unordered lists",
            "b) binary search tree",
            "c) treap",
            "d) 2-3 tree"
        ],
        "Answer": "Answer: c\nExplanation: When 110 is deleted the respective node becomes empty, so the 2-3 tree properties get violated. Hence, the element from its sibling node, 93 is moved to the root and root node element 100 is fed to the empty node. So, the resultant 2-3 tree will be, <img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q5c.png\" alt=\"data-structures-questions-answers-2-3-tree-q5c\" width=\"444\" height=\"258\" class=\"alignnone size-full wp-image-218742\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q5c.png 444w, https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q5c-300x174.png 300w\" sizes=\"(max-width: 444px) 100vw, 444px\" />"
    },
    {
        "id": 588,
        "Question": "Which of the following is not true about the 2-3 tree?",
        "Options": [
            "a) all leaves are at the same level",
            "b) it is perfectly balanced",
            "c) postorder traversal yields elements in sorted order",
            "d) it is B-tree of order 3"
        ],
        "Answer": "Answer: d\nExplanation: The average case time for lookup in a binary search tree, treap and 2-3 tree is O(log n) and in unordered lists it is O(n). But in the worst case, only the 2-3 trees perform lookup efficiently as it takes O(log n), while others take O(n)."
    },
    {
        "id": 589,
        "Question": "Which of the following is false?",
        "Options": [
            "a) 2-3 tree requires less storage than the BST",
            "b) lookup in 2-3 tree is more efficient than in BST",
            "c) 2-3 tree is shallower than BST",
            "d) 2-3 tree is a balanced tree"
        ],
        "Answer": "Answer: a\nExplanation: LLRB (Left Leaning Red Black tree)is the data structure which is used to implement the 2-3 tree with very basic code. The LLRB is like the 2-3 tree where each node has one key and two links. In LLRB the 3-node is implemented as two 2-nodes connected by the red link that leans left. Thus, LLRB maintains 1-1  correspondence with 2–3 tree.<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q7.png\" alt=\"data-structures-questions-answers-2-3-tree-q7\" width=\"700\" height=\"229\" class=\"alignnone size-full wp-image-218744\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q7.png 700w, https://www.sanfoundry.com/wp-content/uploads/2018/07/data-structures-questions-answers-2-3-tree-q7-300x98.png 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" />"
    },
    {
        "id": 590,
        "Question": "How many child nodes does each node of Ternary Tree contain?",
        "Options": [
            "a) 4",
            "b) 6",
            "c) 5",
            "d) 3"
        ],
        "Answer": "Answer: d\nExplanation: Each node of Ternary tree contains at most 3 nodes. So Ternary tree can have 1, 2 or 3 child nodes but not more than that."
    },
    {
        "id": 591,
        "Question": "Which of the following is the name of the node having child nodes?",
        "Options": [
            "a) Brother",
            "b) Sister",
            "c) Mother",
            "d) Parent"
        ],
        "Answer": "Answer: d\nExplanation: Parent node is the node having child nodes and child nodes may contain references to their parents. Parent node is a node connected by a directed edge to its child."
    },
    {
        "id": 592,
        "Question": "What is the depth of the root node of the ternary tree?",
        "Options": [
            "a) 2",
            "b) 1",
            "c) 0",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: Depth is defined as the length of the path from root to the node. So the depth of root node in ternary tree is 0."
    },
    {
        "id": 593,
        "Question": "What is the Height of the root node of ternary tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: d\nExplanation: Height of ternary tree is defined as the length of path from root to deepest node in tree. Therefore, height off root node in ternary tree is 0."
    },
    {
        "id": 594,
        "Options": [
            "8.  Is parent node of Node 3 and root node of the given ternary tree same?",
            " <img src=\"https://www.sanfoundry.com/wp-content/uploads/2019/03/ternary-tree-multiple-choice-questions-answers-mcqs-q7.png\" alt=\"ternary-tree-multiple-choice-questions-answers-mcqs-q7\" width=\"293\" height=\"192\" class=\"alignnone size-full wp-image-237271\" />",
            "a) True",
            "b) False"
        ],
        "Answer": "Answer: a\nExplanation: Node A is called the root node of the above ternary tree while the Node B, Node C, Node D are called Leaf node."
    },
    {
        "id": 595,
        "Question": "How many extra nodes are there in Full ternary tree than a complete ternary tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) Both have same number of nodes"
        ],
        "Answer": "Answer: d\nExplanation: Every Full ternary tree is also a complete ternary tree. Therefore, both have same number of nodes."
    },
    {
        "id": 596,
        "Options": [
            "2. Is Node A sibling of Node D in the given ternary tree?",
            "<img src=\"https://www.sanfoundry.com/wp-content/uploads/2019/03/ternary-tree-interview-questions-answers-q2.png\" alt=\"ternary-tree-interview-questions-answers-q2\" width=\"220\" height=\"125\" class=\"alignnone size-full wp-image-237290\" />",
            "a) True",
            "b) False"
        ],
        "Answer": "Answer: b\nExplanation: Node B, Node C are the siblings of Node D while Node A is the parent node of Node D."
    },
    {
        "id": 597,
        "Question": "Which of the following is the implementation of the ternary tree?",
        "Options": [
            "a) AVL Tree",
            "b) Ternary Heap",
            "c) Hash Table",
            "d) Dictionary"
        ],
        "Answer": "Answer: c\nExplanation: Size of the ternary tree is defined as the total number of nodes present in the tree. Since there are total of 6 nodes in the ternary tree. So the size of the ternary tree is 6."
    },
    {
        "id": 598,
        "Question": "How many child nodes does each node of K-ary Tree contain?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) more than k",
            "d) at most k"
        ],
        "Answer": "Answer: d\nExplanation: Each node of K-ary tree contains at most k nodes. While tree with 2 nodes is called Binary tree and tree with 3 nodes is called Ternary tree."
    },
    {
        "id": 599,
        "Question": "Which of the following is the name of the node having child nodes?",
        "Options": [
            "a) Brother",
            "b) Sister",
            "c) Mother",
            "d) Parent"
        ],
        "Answer": "Answer: d\nExplanation: Parent node is the node having child nodes and child nodes may contain references to their parents. Parent node is a node connected by a directed edge to its child."
    },
    {
        "id": 600,
        "Question": "What is the depth of the root node of K-ary tree?",
        "Options": [
            "a) 2",
            "b) 1",
            "c) 0",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: Depth is defined as the length of the path from root to the node. So the depth of root node in K-ary tree is 0."
    },
    {
        "id": 601,
        "Question": "What is the Height of the root node of K-ary tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: d\nExplanation: Height of K-ary tree is defined as the length of path from root to deepest node in tree. Therefore, height of root node in K-ary tree is 0."
    },
    {
        "id": 602,
        "Options": [
            "8.  Is parent node of Node 4 and root node of the given K-ary tree same?",
            "  <img src=\"https://www.sanfoundry.com/wp-content/uploads/2019/03/k-ary-tree-multiple-choice-questions-answers-mcqs-q7.png\" alt=\"k-ary-tree-multiple-choice-questions-answers-mcqs-q7\" width=\"297\" height=\"197\" class=\"alignnone size-full wp-image-237277\" />",
            "a) True",
            "b) False"
        ],
        "Answer": "Answer: a\nExplanation: Node A is called the root node of the above K-ary tree while the Node B, Node C, Node D are called Leaf node."
    },
    {
        "id": 603,
        "Question": "What is the upper bound for maximum leaves in K-ary tree with height h?",
        "Options": [
            "a) K*h",
            "b) K^h",
            "c) K+h",
            "d) K-h"
        ],
        "Answer": "Answer: c\nExplanation: Size of the K-ary tree is defined as the total number of nodes present in the tree. Since there are total of 6 nodes in the K-ary tree. So the size of the K-ary tree is 6."
    },
    {
        "id": 604,
        "Question": "What is the height of a K-ary tree having only root node?",
        "Options": [
            "a) 1",
            "b) 0",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: Ancestor node is a node that comes in between the path from the node to the root. Since Node D comes between node H and root, so Node D is called the ancestor node."
    },
    {
        "id": 605,
        "Question": "Which one of the following is the correct formulae to find the parent node at index I?",
        "Options": [
            "a) (I-1)/K",
            "b) (I+1)/K",
            "c) (I*1)/K",
            "d) (I-2)/K"
        ],
        "Answer": "Answer: d\nExplanation: Descendant node is a node which has a direct path from ancestor node. Since Node G is connected to C, so Node G is the descendant of Node C."
    },
    {
        "id": 606,
        "Question": "How many extra nodes are there in Full K-ary tree than complete K-ary tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) Both have same number of nodes"
        ],
        "Answer": "Answer: a\nExplanation: Size of node is defined as the total number of descendants of that node including itself. So, size of Node B is 1."
    },
    {
        "id": 607,
        "Options": [
            "12. Is Node A sibling of Node B in the given K-ary tree?",
            "<img src=\"https://www.sanfoundry.com/wp-content/uploads/2019/03/k-ary-tree-interview-questions-answers-q4.png\" alt=\"k-ary-tree-interview-questions-answers-q4\" width=\"219\" height=\"129\" class=\"alignnone size-full wp-image-237298\" />",
            "a) True",
            "b) False"
        ],
        "Answer": "Answer: a\nExplanation: Leaf node is a node that has no child. Since Leaf node will always be the node on the last level of k-ary tree, so it can be called child node of given parent node in K-ary tree."
    },
    {
        "id": 608,
        "Question": "What is the other name or Van Emde Boas Tree data structure?",
        "Options": [
            "a) Van Emde Boas Array",
            "b) Van Emde Boas Stack",
            "c) Van Emde Boas Priority Queue",
            "d) Van Emde Boas Heap"
        ],
        "Answer": "Answer: c\nExplanation: The Van Emde Boas Tree data structure is also popularly known as Van Emde Boas Priority Queue. This data structure implements the array associatively for the given integer keys. It was formulated by Peter Van Emde Boas."
    },
    {
        "id": 609,
        "Question": "Who Invented The vEB also known as Van Emde Boas Tree?",
        "Options": [
            "a) Peter Van Emde Boas",
            "b) Samuel F. B. Morse",
            "c) Friedrich Clemens Gerke",
            "d) Alexander Morse"
        ],
        "Answer": "Answer: d\nExplanation: The Van Emde Boas Tree data structure is also popularly known as Van Emde Boas Priority Queue. This data structure implements the array associatively for the given integer keys. It was formulated by Peter Van Emde Boas."
    },
    {
        "id": 610,
        "Question": "What is the time complexity for storing the maximum number of elements in Van Emde Boas tree if M is the maximum number of elements?",
        "Options": [
            "a) O (log M)",
            "b) O (M!)",
            "c) O (M)",
            "d) O (1)"
        ],
        "Answer": "Answer: c\nExplanation: In order to store the maximum number of elements in Van Emde Boas data structure where M is the maximum number of elements, the tree has great efficiency for storing them. So the time complexity for worst case is found to be O (M)."
    },
    {
        "id": 611,
        "Question": "What is the time complexity for searching a key or integer in Van Emde Boas data structure?",
        "Options": [
            "a) O (log M!)",
            "b) O (M!)",
            "c) O (M2)",
            "d) O (log (log M))"
        ],
        "Answer": "Answer: a\nExplanation: All the operations performed on the Van Emde Boas tree with an associative array like Insertion, Deletion, Searching and many more can be performed in O (log (log M)) time where M = 2m."
    },
    {
        "id": 612,
        "Question": "Which type of tree does Van Emde Boas require to perform basic operations?",
        "Options": [
            "a) Unbalanced",
            "b) Balanced",
            "c) Complete",
            "d) Non – Binary"
        ],
        "Answer": "Answer: d\nExplanation: In order to search a key or integer in the Van Emde Boas data structure, the operation can be performed on an associative array. Hence, the time complexity for searching a key or integer in Van Emde Boas data structure is O (log (log M))."
    },
    {
        "id": 613,
        "Question": "What is the time complexity for inserting a key or integer in Van Emde Boas data structure?",
        "Options": [
            "a) O (log M!)",
            "b) O (M!)",
            "c) O (M2)",
            "d) O (log (log M))"
        ],
        "Answer": "Answer: d\nExplanation: The Van Emde Boas Tree data structure is also popularly known as Van Emde Boas Priority Queue. This data structure implements the array associatively for the given integer keys. It was formulated by Peter Van Emde Boas. It is a non – binary type of tree."
    },
    {
        "id": 614,
        "Question": "In which year was Van Emde Boas tree invented?",
        "Options": [
            "a) 1972",
            "b) 1973",
            "c) 1974",
            "d) 1975"
        ],
        "Answer": "Answer: a\nExplanation: In order to insert a key or integer in the Van Emde Boas data structure, the operation can be performed on an associative array. Hence, the time complexity for inserting a key or integer in Van Emde Boas data structure is O (log (log M))."
    },
    {
        "id": 615,
        "Question": "What is the time complexity for deleting a key or integer in Van Emde Boas data structure?",
        "Options": [
            "a) O (log M!)",
            "b) O (log (log M))",
            "c) O (M!)",
            "d) O (M2)"
        ],
        "Answer": "Answer: d\nExplanation: The Van Emde Boas Tree data structure is also popularly known as Van Emde Boas Priority Queue. This data structure implements the array associatively for the given integer keys. It was formulated by Peter Van Emde Boas in 1975."
    },
    {
        "id": 616,
        "Question": "What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?",
        "Options": [
            "a) O (log M!)",
            "b) O (M!)",
            "c) O (1)",
            "d) O (log (log M))"
        ],
        "Answer": "Answer: b\nExplanation: In order to delete a key or integer in the Van Emde Boas data structure, the operation can be performed on an associative array. Hence, the time complexity for deleting a key or integer in Van Emde Boas data structure is O (log (log M))."
    },
    {
        "id": 617,
        "Question": "On which abstract data type does van Emde Boas tree performs the operation?",
        "Options": [
            "a) Tree",
            "b) Linked List",
            "c) Heap",
            "d) Associative Array"
        ],
        "Answer": "Answer: a\nExplanation: Since the Van Emde Boas data structure follows an associative array abstract data type to perform different operations. Hence, an operation like Find Next and Find Previous be implemented."
    },
    {
        "id": 618,
        "Question": "Which operation find the value associated with a given key?",
        "Options": [
            "a) Insert",
            "b) Find Next",
            "c) Look up",
            "d) Delete"
        ],
        "Answer": "Answer: c\nExplanation: In order to find a maximum or minimum integer in the Van Emde Boas data structure, the operation can be performed on an associative array. Hence, the time complexity for finding a maximum or minimum integer in Van Emde Boas data structure is O (1)."
    },
    {
        "id": 619,
        "Question": "How many properties will an equivalent relationship satisfy?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: An equivalent relationship will satisfy three properties – reflexive, symmetric and transitive."
    },
    {
        "id": 620,
        "Question": "A relation R on a set S, defined as x R y if and only if y R x. This is an example of?",
        "Options": [
            "a) reflexive relation",
            "b) symmetric relation",
            "c) transitive relation",
            "d) invalid relation"
        ],
        "Answer": "Answer: b\nExplanation: A symmetric property in an equivalence relation is defined as x R y if and only y R x."
    },
    {
        "id": 621,
        "Question": "What is the worst case efficiency for a path compression algorithm?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(N log N)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: a\nExplanation: Electrical connectivity is reflexive, symmetric and also transitive. Hence, electrical connectivity is an equivalence relation."
    },
    {
        "id": 622,
        "Question": "Path Compression algorithm performs in which of the following operations?",
        "Options": [
            "a) Create operation",
            "b) Insert operation",
            "c) Find operation",
            "d) Delete operation"
        ],
        "Answer": "Answer: d\nExplanation: The worst case efficiency for a path compression algorithm is mathematically found to be O(M log N)."
    },
    {
        "id": 623,
        "Question": "What is the definition for Ackermann’s function?",
        "Options": [
            "a) A(1,i) = i+1 for i>=1",
            "b) A(i,j) = i+j for i>=j",
            "c) A(i,j) = i+j for i = j",
            "d) A(1,i) = i+1 for i<1"
        ],
        "Answer": "Answer: c\nExplanation: Path compression algorithm is performed during find operation and is independent of the strategy used to perform unions."
    },
    {
        "id": 624,
        "Question": "___________ is one of the earliest forms of a self-adjustment strategy used in splay trees, skew heaps.",
        "Options": [
            "a) Union by rank",
            "b) Equivalence function",
            "c) Dynamic function",
            "d) Path compression"
        ],
        "Answer": "Answer: a\nExplanation: The Ackermann’s function is defined as A(1,i) = i+1 for i>=1. This form in text grows faster and the inverse is slower."
    },
    {
        "id": 625,
        "Question": "What is the depth of any tree if the union operation is performed by height?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(N log N)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: d\nExplanation: Path compression is one of the earliest forms of self-adjustment used in extremely important strategies using theoretical explanations."
    },
    {
        "id": 626,
        "Question": "What is the value for the number of nodes of rank r?",
        "Options": [
            "a) N",
            "b) N/2",
            "c) N/2r",
            "d) Nr"
        ],
        "Answer": "Answer: b\nExplanation: If the Unions are performed by height, the depth of any tree is calculated to be O(log N)."
    },
    {
        "id": 627,
        "Question": "What is the worst-case running time of unions done by size and path compression?",
        "Options": [
            "a) O(N)",
            "b) O(logN)",
            "c) O(N logN)",
            "d) O(M logN)"
        ],
        "Answer": "Answer: a\nExplanation: By the induction hypothesis, each tree has at least 2r – 1 descendants, giving a total of 2r and establishing the lemma."
    },
    {
        "id": 628,
        "Question": "In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?",
        "Options": [
            "a) leaf to root",
            "b) root to node",
            "c) root to leaf",
            "d) left subtree to right subtree"
        ],
        "Answer": "Answer: c\nExplanation: Each node of a rank r is the root of a subtree of at least 2r. Therefore, there are at most N/2r disjoint subtrees."
    },
    {
        "id": 629,
        "Question": "How many strategies are followed to solve a dynamic equivalence problem?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: The worst case running time of a union operation done by size and path compression is mathematically found to be  O(M logN).  "
    },
    {
        "id": 630,
        "Question": "What is the total time spent for N-1 merges in a dynamic equivalence problem?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(N log N)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: a\nExplanation: One of the lemmas state that, in the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from leaf to root."
    },
    {
        "id": 631,
        "Question": "What is the condition for an equivalence relation if two cities are related within a country?",
        "Options": [
            "a) the two cities should have a one-way connection",
            "b) the two cities should have a two-way connection",
            "c) the two cities should be in different countries",
            "d) no equivalence relation will exist between two cities"
        ],
        "Answer": "Answer: b\nExplanation: There are two strategies involved to solve a dynamic equivalence problem- executing find instruction in worst-case time and executing union instruction in worst-case time."
    },
    {
        "id": 632,
        "Question": "What is the use of the bin data structure?",
        "Options": [
            "a) to have efficient insertion",
            "b) to have efficient deletion",
            "c) to have efficient region query",
            "d) to have efficient traversal"
        ],
        "Answer": "Answer: c\nExplanation: Bin data structure allows us to have efficient region queries. A frequency of bin is increased by one each time a data point falls into a bin."
    },
    {
        "id": 633,
        "Question": "What is the worst case time complexity of query operation(n is the no. of candidates)?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Bin is an example of a range query data structure. It is because it efficiently answers any number of queries on any subset of the input."
    },
    {
        "id": 634,
        "Question": "What is the worst case time complexity of delete operation(n is the no. of candidates)?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: b\nExplanation: The worst case in a bin query occurs when all the candidates are concentrated in one bin. So in this case the time complexity is O(n)."
    },
    {
        "id": 635,
        "Question": "What is the worst case time complexity of insertion operation(n =no. of candidates)?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: b\nExplanation: The worst case in a bin delete operation occurs when all the candidates are concentrated in one bin. So in this case the time complexity is O(n)."
    },
    {
        "id": 636,
        "Question": "What is computational geometry?",
        "Options": [
            "a) study of geometry using a computer",
            "b) study of geometry",
            "c) study of algorithms",
            "d) study of algorithms related to geometry"
        ],
        "Answer": "Answer: a\nExplanation: The worst case in a bin insert operation occurs when all the candidates are concentrated in one bin. So in this case the time complexity is O(1)."
    },
    {
        "id": 637,
        "Question": "What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (k = number of bins query rectangle intersects)",
        "Options": [
            "a) O(1)",
            "b) O(k)",
            "c) O(k2)",
            "d) O(log k)"
        ],
        "Answer": "Answer: d\nExplanation: Computational geometry deals with the study of algorithms which can be expressed in terms of geometry. Bin data structure is an example of it."
    },
    {
        "id": 638,
        "Question": "What will be the time complexity of delete operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)",
        "Options": [
            "a) O(1)",
            "b) O(m)",
            "c) O(m2)",
            "d) O(log m)"
        ],
        "Answer": "Answer: b\nExplanation: The process of query becomes faster in a case when the number of candidates are equally distributed among the bins. In such a case the query operation becomes O(k)."
    },
    {
        "id": 639,
        "Question": "What will be the time complexity of insertion operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)",
        "Options": [
            "a) O(1)",
            "b) O(m)",
            "c) O(m2)",
            "d) O(log m)"
        ],
        "Answer": "Answer: b\nExplanation: The process of deletion becomes faster in a case when the number of candidates are equally distributed among the bins. In such a case the query operation becomes O(m). It is practically slower than insertion in this case."
    },
    {
        "id": 640,
        "Question": "Efficiency of bin depends upon ___________",
        "Options": [
            "a) size of query and candidates",
            "b) location of query and candidates",
            "c) location and size of query and candidates",
            "d) depends on the input"
        ],
        "Answer": "Answer: b\nExplanation: The process of insertion becomes faster in the case when the number of candidates are equally distributed among the bins. In such a case the query operation becomes O(m). It is practically faster than deletion in this case."
    },
    {
        "id": 641,
        "Question": "In what time can a 2-d tree be constructed?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(N2)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: b\nExplanation: A perfectly balanced 2-d tree can be constructed in O(N log N) time. This value is computed mathematically."
    },
    {
        "id": 642,
        "Question": "In a two-dimensional search tree, the root is arbitrarily chosen to be?",
        "Options": [
            "a) even",
            "b) odd",
            "c) depends on subtrees",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: Insertion of elements in a 2-d tree is similar to that of a binary search tree. Hence, it is a trivial extension of the binary search tree."
    },
    {
        "id": 643,
        "Question": "Which of the following is the simplest data structure that supports range searching?",
        "Options": [
            "a) Heaps",
            "b) binary search trees",
            "c) AA-trees",
            "d) K-d trees"
        ],
        "Answer": "Answer: b\nExplanation: In a two- dimensional k-d tree (i.e.) 2-d tree, the root is arbitrarily chosen to be an odd level and it applies to all 2-d trees."
    },
    {
        "id": 644,
        "Question": "In a k-d tree, k originally meant?",
        "Options": [
            "a) number of dimensions",
            "b) size of tree",
            "c) length of node",
            "d) weight of node"
        ],
        "Answer": "Answer: d\nExplanation: K-d trees are the simplest data structure that supports range searching and also it achieves the respectable running time."
    },
    {
        "id": 645,
        "Question": "Each level in a k-d tree is made of?",
        "Options": [
            "a) dimension only",
            "b) cutting and dimension",
            "c) color code of node",
            "d) size of the level"
        ],
        "Answer": "Answer: a\nExplanation: Initially, 2-d trees were created. Then, 3-d trees, 4-trees etc., where k meant the number of dimensions."
    },
    {
        "id": 646,
        "Question": "What is the worst case of finding the nearest neighbour?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O( log N)",
            "d) O(N3)"
        ],
        "Answer": "Answer: c\nExplanation: The correct sequence of insertion of the above given tree is (30,40),(5,25),(10,12),(70,70),(50,30),(35,45). The insertion is given by, first left, then right."
    },
    {
        "id": 647,
        "Question": "What is the run time of finding the nearest neighbour in a k-d tree?",
        "Options": [
            "a) O(2+ log N)",
            "b) O( log N)",
            "c) O(2d log N)",
            "d) O( N log N)"
        ],
        "Answer": "Answer: b\nExplanation: Each level in a k-d tree is made of dimensions and cutting. Cutting and dimensions are used for insertion, deletion and searching purposes."
    },
    {
        "id": 648,
        "Question": "How many prime concepts are available in nearest neighbour search in a kd tree?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: The worst case analysis of finding the nearest neighbour in a k-d tree is mathematically found to be O(N)."
    },
    {
        "id": 649,
        "Question": "Reducing search space by eliminating irrelevant trees is known as?",
        "Options": [
            "a) pruning",
            "b) partial results",
            "c) freeing space",
            "d) traversing"
        ],
        "Answer": "Answer: c\nExplanation: The run time of finding the nearest neighbour in a kd tree is given as O(2d log N) where 2d is the time taken to search the neighbourhood."
    },
    {
        "id": 650,
        "Question": "Several kinds of queries are possible on a k-d called as?",
        "Options": [
            "a) partial queries",
            "b) range queries",
            "c) neighbour queries",
            "d) search queries"
        ],
        "Answer": "Answer: c\nExplanation: Three important concepts are available in finding the nearest neighbour. They are partial results, pruning, traversal order."
    },
    {
        "id": 651,
        "Question": "What is the time taken for a range query for a perfectly balanced tree?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(√N+M)",
            "d) O(√N)"
        ],
        "Answer": "Answer: a\nExplanation: Pruning is eliminating irrelevant trees. Partial results are keeping best results and updating. Traversal is visiting all the nodes of a tree."
    },
    {
        "id": 652,
        "Question": "Who invented k-d trees?",
        "Options": [
            "a) Arne Andersson",
            "b) Jon Bentley",
            "c) Jon Von Newmann",
            "d) Rudolf Bayer"
        ],
        "Answer": "Answer: b\nExplanation: Several range queries are possible on a k-d tree. One of the range queries is known as a partial match query."
    },
    {
        "id": 653,
        "Question": "The leaves of an expression tree always contain?",
        "Options": [
            "a) operators",
            "b) operands",
            "c) null",
            "d) expression"
        ],
        "Answer": "Answer: b\nExplanation: The leaves of an expression tree always contain the result of a given expression (i.e.) operands."
    },
    {
        "id": 654,
        "Question": "What does the other nodes of an expression tree(except leaves) contain?",
        "Options": [
            "a) only operands",
            "b) only operators",
            "c) both operands and operators",
            "d) expression"
        ],
        "Answer": "Answer: a\nExplanation: It is possible for a node to have at least one child, as is the case with the unary minus operator."
    },
    {
        "id": 655,
        "Question": "An expression tree is a kind of?",
        "Options": [
            "a) Binary search tree",
            "b) Fibonacci tree",
            "c) Binary tree",
            "d) Treap"
        ],
        "Answer": "Answer: b\nExplanation: The nodes other than leaves always contain only operators. There cannot be any operand in those nodes."
    },
    {
        "id": 656,
        "Question": "The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?",
        "Options": [
            "a) prefix expression",
            "b) infix expression",
            "c) postfix expression",
            "d) paranthesized expression"
        ],
        "Answer": "Answer: c\nExplanation: The expression tree is a binary tree. It contains operands at leaf nodes and remaining nodes are filled with operators. The operands and the operators can be arranged in any order (ascending, descending)."
    },
    {
        "id": 657,
        "Question": "The average depth of a binary tree is given as?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(M log N)",
            "d) O(√N)"
        ],
        "Answer": "Answer: b\nExplanation: It is an infix expression because the format of an infix expression is given by operand-operator-operand."
    },
    {
        "id": 658,
        "Question": "An expression tree is created using?",
        "Options": [
            "a) postfix expression",
            "b) prefix expression",
            "c) infix expression",
            "d) paranthesized expression"
        ],
        "Answer": "Answer: d\nExplanation: The average depth of a binary expression tree is mathematically found to be O(√N)."
    },
    {
        "id": 659,
        "Question": "++a*bc*+defg is an?",
        "Options": [
            "a) postfix expression",
            "b) infix expression",
            "c) prefix expression",
            "d) invalid expression"
        ],
        "Answer": "Answer: b\nExplanation: All infix, prefix and postfix expressions can be made into an expression tree using appropriate algorithms."
    },
    {
        "id": 660,
        "Question": "An expression tree’s nodes can be deleted by calling?",
        "Options": [
            "a) malloc",
            "b) calloc",
            "c) delete",
            "d) free"
        ],
        "Answer": "Answer: a\nExplanation: A postfix expression is converted into an expression tree by reading one symbol at a time and constructing a tree respectively."
    },
    {
        "id": 661,
        "Question": "In an expression tree algorithm, what happens when an operand is encountered?",
        "Options": [
            "a) create one node pointing to a stack",
            "b) pop the nodes from the stack",
            "c) clear stack",
            "d) merge all the nodes"
        ],
        "Answer": "Answer: c\nExplanation: It is a prefix expression obtained from a preorder traversal since it is of the form operator-operand-operand."
    },
    {
        "id": 662,
        "Question": "In a max-heap, element with the greatest key is always in the which node?",
        "Options": [
            "a) Leaf node",
            "b) First node of left sub tree",
            "c) root node",
            "d) First node of right sub tree"
        ],
        "Answer": "Answer: c\nExplanation:  This is one of the property of max-heap that root node must have key greater than its children."
    },
    {
        "id": 663,
        "Question": "What is the complexity of adding an element to the heap.",
        "Options": [
            "a) O(log n)",
            "b) O(h)",
            "c) O(log n) & O(h)",
            "d) O(n)"
        ],
        "Answer": "Answer: a\nExplanation: Yes, because the leaf nodes are present at height h or h-1, which is a property of complete binary tree."
    },
    {
        "id": 664,
        "Question": "The worst case complexity of deleting any arbitrary node value element from heap is __________",
        "Options": [
            "a) O(logn)",
            "b) O(n)",
            "c) O(nlogn)",
            "d) O(n2)"
        ],
        "Answer": "Answer: c\nExplanation: The total possible operation in re locating the new location to a new element will be equal to height of the heap."
    },
    {
        "id": 665,
        "Question": "Heap can be used as ________________",
        "Options": [
            "a) Priority queue",
            "b) Stack",
            "c) A decreasing order array",
            "d) Normal Array"
        ],
        "Answer": "Answer: a\nExplanation: The total possible operation in deleting the existing node and re locating new position to all its connected nodes will be equal to height of the heap."
    },
    {
        "id": 666,
        "Question": "An array consists of n elements. We want to create a heap using the elements. The time complexity of building a heap will be in order of",
        "Options": [
            "a) O(n*n*logn)",
            "b) O(n*logn)",
            "c) O(n*n)",
            "d) O(n *logn *logn)"
        ],
        "Answer": "Answer: a\nExplanation:  The property of heap that the value of root must be either greater or less than both of its children makes it work like a priority queue."
    },
    {
        "id": 667,
        "Question": "What is the space complexity of searching in a heap?",
        "Options": [
            "a) O(logn)",
            "b) O(n)",
            "c) O(1)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: b\nExplanation: The space complexity of searching an element in heap is O (n). Heap consists of n elements and we need to compare every element. Here no addition or deletion of elements takes place. Hence space complexity is O (n)."
    },
    {
        "id": 668,
        "Question": "What is the best case complexity in building a heap?",
        "Options": [
            "a) O(nlogn)",
            "b) O(n2)",
            "c) O(n*longn *logn)",
            "d) O(n)"
        ],
        "Answer": "Answer: d\nExplanation:  The best case complexity occurs in bottom-up construction when we have a sortes array given."
    },
    {
        "id": 669,
        "Question": "3. Given the code, choose the correct option that is consistent with the code. (Here A is the heap)<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\tbuild<span class=\"br0\">(</span>A,i<span class=\"br0\">)</span>\n\tleft<span class=\"sy0\">-&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>i\n\tright<span class=\"sy0\">-&gt;</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span>\n\ttemp<span class=\"sy0\">-</span> <span class=\"sy0\">&gt;</span> i\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>left<span class=\"sy0\">&lt;=</span> heap_length<span class=\"br0\">[</span>A<span class=\"br0\">]</span> ans A<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>A<span class=\"br0\">[</span>temp<span class=\"br0\">]</span><span class=\"br0\">)</span>\n\ttemp <span class=\"sy0\">-&gt;</span> left\n\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>right <span class=\"sy0\">=</span> heap_length<span class=\"br0\">[</span>A<span class=\"br0\">]</span> and A<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> A<span class=\"br0\">[</span>temp<span class=\"br0\">]</span><span class=\"br0\">)</span>\n\ttemp<span class=\"sy0\">-&gt;</span>right\n\t<span class=\"kw1\">if</span> temp<span class=\"sy0\">!=</span> i\n\tswap<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,A<span class=\"br0\">[</span>temp<span class=\"br0\">]</span><span class=\"br0\">)</span>\n\tbuild<span class=\"br0\">(</span>A,temp<span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) It is the build function of max heap",
            "b) It is the build function of min heap",
            "c) It is general build function of any heap",
            "d) It is used to search element in any heap"
        ],
        "Answer": "Answer: a\nExplanation:  Since in every condition we are comparing the current value is less than the parent of that node. So this is build function of Max heap."
    },
    {
        "id": 670,
        "Question": "What is the location of a parent node for any arbitary node i?",
        "Options": [
            "a) (i/2) position",
            "b) (i+1)/ position",
            "c) floor(i/2) position",
            "d) ceil(i/2) position"
        ],
        "Answer": "Answer: c\nExplanation:  For any node child nodes are located at either 2*i, 2*i +1 So the parent node could be found by taking the floor of the half of child node."
    },
    {
        "id": 671,
        "Question": "5. State the complexity of algorithm given below.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\t<span class=\"kw4\">int</span> function<span class=\"br0\">(</span>vector<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> arr<span class=\"br0\">)</span>\n\t<span class=\"kw4\">int</span> len<span class=\"sy0\">=</span>arr.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>len<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n\ttemp<span class=\"sy0\">=</span>arr<span class=\"br0\">[</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n\tarr.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n\t<span class=\"kw1\">return</span> temp<span class=\"sy0\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) o(n)",
            "b) O(logn)",
            "c) O(1)",
            "d) O(n logn)"
        ],
        "Answer": "Answer: c\nExplanation:  Deletion in a min-heap is in O(1) time."
    },
    {
        "id": 672,
        "Question": "Given an array of element 5, 7, 9, 1, 3, 10, 8, 4. Which of the following are the correct sequences of elements after inserting all the elements in a min-heap?",
        "Options": [
            "a) 1,3,4,5,7,8,9,10",
            "b) 1,4,3,9,8,5,7,10",
            "c) 1,3,4,5,8,7,9,10",
            "d) 1,3,7,4,8,5,9,10"
        ],
        "Answer": "Answer: a\nExplanation: Building a min-heap the result will a sorted array so the 1, 3, 4, 5, 7, 8, 9, 10 is correct. If we change the implementation strategy 1, 4, 3, 8, 9, 5, 7, 10 is also correct. (First filling the right child rather than left child first)."
    },
    {
        "id": 673,
        "Question": "7. For construction of a binary heap with property that parent node has value less than child node. In reference to that which line is incorrect. Line indexed from 1.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\"><span class=\"nu0\">1</span>. <span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> k<span class=\"br0\">)</span>\n<span class=\"nu0\">2</span>. <span class=\"br0\">{</span>\n<span class=\"nu0\">3</span>.     <span class=\"me1\">heap_size</span><span class=\"sy0\">++;</span>\n<span class=\"nu0\">4</span>.     <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> heap_size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"nu0\">5</span>.     <span class=\"me1\">harr</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span>\n<span class=\"nu0\">6</span>.     <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> harr<span class=\"br0\">[</span>parent<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> harr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"nu0\">7</span>.     <span class=\"br0\">{</span>\n<span class=\"nu0\">8</span>.             <span class=\"me1\">swap</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>harr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"sy0\">&amp;</span>harr<span class=\"br0\">[</span>parent<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"nu0\">9</span>.             <span class=\"me1\">i</span> <span class=\"sy0\">=</span> parent<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"nu0\">10</span>.    <span class=\"br0\">}</span>\n<span class=\"nu0\">11</span>. <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Line – 3",
            "b) Line – 5",
            "c) Line – 6",
            "d) Line – 7"
        ],
        "Answer": "Answer: c\nExplanation: The condition under while condition is wrong for a (min) binary heap The correct condition should be while(i!=0 && harr[parent(i)] > harr[i]). Otherwise the constructed heap will be a max-binary heap."
    },
    {
        "id": 674,
        "Question": "Choose the correct properties of weak-heap.",
        "Options": [
            "a) Every node has value greater than the value of child node",
            "b) Every right child of node has greater value than parent node",
            "c) Every left child of node has greater value than parent node",
            "d) Every left and right child of node has same value as parent node"
        ],
        "Answer": "Answer: b\nExplanation: This is the property of a weak heap."
    },
    {
        "id": 675,
        "Question": "What is the other name of weak heap?",
        "Options": [
            "a) Min-heap",
            "b) Max-heap",
            "c) Relaxed -heap",
            "d) Leonardo heap"
        ],
        "Answer": "Answer: b\nExplanation: Weak heap has no left child."
    },
    {
        "id": 676,
        "Question": "What is the worst case time in searching minimum value in weak -heap?",
        "Options": [
            "a) O(log n)",
            "b) O(n)",
            "c) O(n logn)",
            "d) O(1)"
        ],
        "Answer": "Answer: c\nExplanation: Relaxed  heap is just another name of weak heap."
    },
    {
        "id": 677,
        "Question": "The total comparisons in finding both smallest and largest elements are",
        "Options": [
            "a) 2*n +2",
            "b) n + ((n+1)/2) -2",
            "c) n+logn",
            "d) n2"
        ],
        "Answer": "Answer: d\nExplanation: Weak heap is an array based form that supports the operation of finding a minimum in O(1)."
    },
    {
        "id": 678,
        "Question": "6. What is the complexity of given function of insertion.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\tinsert<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>buffer_size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span> maxi_biffer_size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\tbuffer_aar<span class=\"br0\">[</span>ind<span class=\"br0\">]</span><span class=\"sy0\">==</span>n<span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">else</span>\n\t\tmove_to_heap<span class=\"br0\">(</span>buffer,buffer<span class=\"sy0\">+</span>maxi_buffer_size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(logn)",
            "b) amortized O(1)",
            "c) O(n)",
            "d) O (n*logn)"
        ],
        "Answer": "Answer: b\nExplanation: The total comparisons in finding smallest and largest elements is n + ((n+1)/2) – 2. "
    },
    {
        "id": 679,
        "Question": "The  leaf node for a heap of height h will be at which position.",
        "Options": [
            "a) h",
            "b) h-1",
            "c) h or h-1",
            "d) h-2"
        ],
        "Answer": "Answer: b\nExplanation: Use a buffer array to store a fixed number of elements when the buffer is full the content of buffer is moved to heap.As a result the complexity\nis amotized O(1)."
    },
    {
        "id": 680,
        "Question": "The main distinguishable characterstic of a binomial heap from a binary heap is that",
        "Options": [
            "a) it allows union operations very efficiently",
            "b) it does not allow union operations that could easily be implemented in binary heap",
            "c) the heap structure is not similar to complete binary tree",
            "d) the location of child node is not fixed i.e child nodes could be at level (h-2) or (h-3), where h is height of heap and h>4"
        ],
        "Answer": "Answer: a\nExplanation: The main use of binomial heap is to unify two different heap efficiently."
    },
    {
        "id": 681,
        "Question": "The number of trees in a binomial heap with n nodes is",
        "Options": [
            "a) logn",
            "b) n",
            "c) nlogn",
            "d) n/2"
        ],
        "Answer": "Answer: a\nExplanation: At each depth there is a binomial tree in a binomial heap."
    },
    {
        "id": 682,
        "Question": "What is order of resultant heap after merging two tree of order k?",
        "Options": [
            "a) 2*k",
            "b) k+1",
            "c) k*k",
            "d) k+logk"
        ],
        "Answer": "Answer: b\nExplanation: Binomial tree used in making binomial heap follows min heap property."
    },
    {
        "id": 683,
        "Question": "Time taken in decreasing the node value in a binomial heap is",
        "Options": [
            "a) O(n)",
            "b) O(1)",
            "c) O(logn)",
            "d) O(nlogn)"
        ],
        "Answer": "Answer: a\nExplanation: Binomial heap has a property that root value is less than both the child node’s value. So the given function of merging two different heap is correct."
    },
    {
        "id": 684,
        "Question": "7. What does this pseudo_code return ?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\t<span class=\"kw4\">int</span> myfun<span class=\"br0\">(</span>heap_arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">int</span> mini<span class=\"sy0\">=</span>INF<span class=\"sy0\">;</span>\n\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>tot_node<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\t\tmini<span class=\"sy0\">=</span>min<span class=\"br0\">(</span>mini,heap_arr<span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">return</span> mini<span class=\"sy0\">;</span>\n\t<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Last added element to heap",
            "b) First element added to heap",
            "c) Root of the heap",
            "d) Leftmost node of the heap"
        ],
        "Answer": "Answer: b\nExplanation: This could be easily verified by looking at the structure of a binomial heap."
    },
    {
        "id": 685,
        "Question": "Which of these operations have same complexities?",
        "Options": [
            "a) Insertion, find_min",
            "b) Find_min, union",
            "c) Union, Insertion",
            "d) Deletion, Find _max"
        ],
        "Answer": "Answer: c\nExplanation: Decreasing a node value may result in violating the min property. As a result be there would be exchange in the value of parent and child which at max goes up to height of the heap."
    },
    {
        "id": 686,
        "Question": "Given a heap of n nodes.The maximum number of tree for building the heap is.",
        "Options": [
            "a) n",
            "b) n-1",
            "c) n/2",
            "d) logn"
        ],
        "Answer": "Answer: c\nExplanation: The function return minimum value in the heap_Array which is equal to the root value of the heap."
    },
    {
        "id": 687,
        "Question": "Choose the option with function having same complexity for a fibonacci heap.",
        "Options": [
            "a) Insertion, Union",
            "b) Insertion, Deletion",
            "c) extract_min, insertion",
            "d) Union, delete"
        ],
        "Answer": "Answer: c\nExplanation: With proper implementation using link list find_min and find_max operation can be done in O(1), while the remaining takes O(logn) time."
    },
    {
        "id": 688,
        "Question": "12. What is wrong with the following code of insertion in fibonacci heap.\nChoose the correct option<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\tFIB<span class=\"sy0\">-</span>INSERT<span class=\"br0\">(</span>H, x<span class=\"br0\">)</span>\n\tdegree<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n\tp<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">=</span>  NIL\n\tchild<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span>NIL\n\tleft<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span>x\n\tright<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span>x\n\tmark<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span><span class=\"kw2\">FALSE</span>\n\tconcatenate the root list containing x with root list H \n\t<span class=\"kw1\">if</span> min<span class=\"br0\">[</span>H<span class=\"br0\">]</span> <span class=\"sy0\">=</span> NIL or key<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> key<span class=\"br0\">[</span>min<span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"br0\">]</span>\n\tthen min<span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy0\">=</span> x\n\tn<span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy0\">=</span> n<span class=\"br0\">[</span>H<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Line -11",
            "b) Line -3",
            "c) Line 9",
            "d) Line 7"
        ],
        "Answer": "Answer: a\nExplanation: Overall complexity of insertion, merging, deleting is in order of O((a+b)logn) For Fibonacci the complexity reduces to O(a+ blogn)."
    },
    {
        "id": 689,
        "Question": "13. What will be the order of new heap created after union of heap H1 and H2 when created by the following code.Initially both are of the order n.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><pre class=\"de1\">\tFIB_UNION<span class=\"br0\">(</span>H1,H2<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tH <span class=\"sy0\">=</span>MAKE_HEAP<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t\tmin<span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy0\">=</span> min<span class=\"br0\">[</span>H1<span class=\"br0\">]</span>\n\t\tconcatenate the root list of H2 with the root list of H\n\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>min<span class=\"br0\">[</span>H1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> NIL<span class=\"br0\">)</span> or <span class=\"br0\">(</span>min<span class=\"br0\">[</span>H2<span class=\"br0\">]</span><span class=\"sy0\">!=</span> NIL and min<span class=\"br0\">[</span>H2<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> min<span class=\"br0\">[</span>H1<span class=\"br0\">]</span><span class=\"br0\">)</span>\n\t\tthen min<span class=\"br0\">[</span>H<span class=\"br0\">]</span> <span class=\"sy0\">=</span> min<span class=\"br0\">[</span>H2<span class=\"br0\">]</span>\n\t\tn<span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy0\">=</span>  n<span class=\"br0\">[</span>H1<span class=\"br0\">]</span> <span class=\"sy0\">+</span> n<span class=\"br0\">[</span>H2<span class=\"br0\">]</span>\n\t\tfree the objects H1 and H2\n\t\t<span class=\"kw1\">return</span> H\n\t<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) n+1",
            "b) n+n/2",
            "c) nlogn",
            "d) 2*n"
        ],
        "Answer": "Answer: a\nExplanation: Each node could be seen as a tree with only one node and as a result maximum subtree in the heap is equal to number of nodes in the heap."
    },
    {
        "id": 690,
        "Question": "d-heap is similar to that of a?",
        "Options": [
            "a) binary heap",
            "b) fibonacci heap",
            "c) leftist heap",
            "d) treap"
        ],
        "Answer": "Answer: a\nExplanation: A d-heap is similar to that of a binary heap except that binary heaps have two children and d-heaps have d children."
    },
    {
        "id": 691,
        "Question": "Which operation cannot be directly performed in a d-heap?",
        "Options": [
            "a) insert",
            "b) delete",
            "c) find",
            "d) create"
        ],
        "Answer": "Answer: a\nExplanation: d-heap is much shallower than a binary heap with respect to performance efficiency of insert and delete operations."
    },
    {
        "id": 692,
        "Question": "Which operation is not efficiently performed in a d-heap?",
        "Options": [
            "a) insert",
            "b) delete",
            "c) find",
            "d) merge"
        ],
        "Answer": "Answer: c\nExplanation: Find operation in a d-heap cannot be performed as in other heaps. This is the main weakness of d-heap."
    },
    {
        "id": 693,
        "Question": "What is the run time efficiency of an insertion algorithm in d-heap?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(logd N)",
            "d) O(Nd)"
        ],
        "Answer": "Answer: d\nExplanation: Unlike find operation, which cannot be performed in a d-heap, the task of merging two d-heaps is very difficult."
    },
    {
        "id": 694,
        "Question": "How many comparisons will occur while performing a delete-min operation?",
        "Options": [
            "a) d",
            "b) d-1",
            "c) d+1",
            "d) 1"
        ],
        "Answer": "Answer: c\nExplanation: The run time efficiency of an insertion algorithm in a d-heap is found to be O(logd N) where d is the number of children."
    },
    {
        "id": 695,
        "Question": "How many basic operations can be performed in a d-heap?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Since, the delete-min operation is more expensive and the heap is shallow, the minimum of d elements can be found using d-1 comparisons."
    },
    {
        "id": 696,
        "Question": "What is the run time efficiency of delete-min operation?",
        "Options": [
            "a) O(log N)",
            "b) O(logd N)",
            "c) O(d logd N)",
            "d) O(d)"
        ],
        "Answer": "Answer: b\nExplanation: The two basic operations performed in a d-heap are insert and delete-min operations."
    },
    {
        "id": 697,
        "Question": "How many secondary operations are performed in a d-heap?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: The run time efficiency of a delete-min algorithm using d-1 comparisons is mathematically found to be O(d logd N)."
    },
    {
        "id": 698,
        "Question": "On which data structure is a d-ary heap based?",
        "Options": [
            "a) stack",
            "b) queue",
            "c) linked list",
            "d) priority queue"
        ],
        "Answer": "Answer: a\nExplanation: The given heap is a d-heap since it looks like a binary heap with d- children. Here, d=3."
    },
    {
        "id": 699,
        "Question": "Which property should ternary heap hold for execution?",
        "Options": [
            "a) Associative",
            "b) Commutative",
            "c) Tree",
            "d) Heap"
        ],
        "Answer": "Answer: a\nExplanation: Ternary heap is a type of data structure in the field of computer science. It is a part of the Heap data structure family. Minimum ternary heap has the smallest element as its root node. The parent node is all either equal or less than children node in a minimum ternary heap."
    },
    {
        "id": 700,
        "Question": "What is the process of building a ternary heap called?",
        "Options": [
            "a) Heapify",
            "b) Hashing",
            "c) Linking",
            "d) Merging"
        ],
        "Answer": "Answer: a\nExplanation: Ternary heap is a type of data structure in the field of computer science. It is a part of the Heap data structure family. Maximum ternary heap has the highest element as its root node. The parent node is all either equal or greater than children node in a maximum ternary heap."
    },
    {
        "id": 701,
        "Question": "Which type of data structure is a ternary heap?",
        "Options": [
            "a) Array",
            "b) Hash",
            "c) Priority Queue",
            "d) Priority Stack"
        ],
        "Answer": "Answer: b\nExplanation: Minimum ternary heap has the smallest element as its root node. The parent node is all either equal or less than children node in a minimum ternary heap. In the above minimum ternary heap, the smallest element is 1 and its children are 10, 18, 20."
    },
    {
        "id": 702,
        "Question": "What is a ternary heap?",
        "Options": [
            "a) An array with three elements",
            "b) Linked list with three elements",
            "c) Tree with three children",
            "d) Heap with all nodes having three children"
        ],
        "Answer": "Answer: c\nExplanation: Maximum ternary heap has the highest element as its root node. The parent node is all either equal or greater than children node in a maximum ternary heap. The smallest element in the maximum ternary heap is 10 and its siblings are 18, 20."
    },
    {
        "id": 703,
        "Question": "Who invented d-ary heap?",
        "Options": [
            "a) Carl Rick",
            "b) Alan Turing",
            "c) Donald Johnson",
            "d) Euclid"
        ],
        "Answer": "Answer: a\nExplanation: Minimum ternary heap has the smallest element as its root node. The parent node is all either equal or less than children node in a minimum ternary heap. Height is the total length from the root node to the leaf node. So the height of the minimum ternary heap is 1."
    },
    {
        "id": 704,
        "Question": "What is the time complexity for inserting a new item in a ternary heap of n elements?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (n!)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: In order to insert a new item in a ternary heap data structure having n elements, the heap has great efficiency for inserting them. So the time complexity for worst case is found to be O (log n/ log 3)."
    },
    {
        "id": 705,
        "Question": "What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (n!)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: Ternary heap is a type of data structure in the field of computer science. It is a part of the Heap data structure family. Due to the swapping process, the decrease priority operation performs more quickly in a ternary heap."
    },
    {
        "id": 706,
        "Question": "What is the time complexity for increasing priority of key in a maximum ternary heap of n elements?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (n!)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: In order to decrease the priority of an item in a ternary heap data structure having n elements, the heap has great efficiency for decreasing them. So the time complexity for worst case is found to be O (log n/ log 3). This is due to the upwards swapping process."
    },
    {
        "id": 707,
        "Question": "What is the time complexity for deleting root key in a ternary heap of n elements?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (3log n/ log 3)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: In order to increase the priority of an item in a ternary heap data structure having n elements, it performs upwards swapping. So the time complexity for worst case is found to be O (log n/ log 3). "
    },
    {
        "id": 708,
        "Question": "What is the time complexity for increasing priority of key in a minimum ternary heap of n elements?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (3log n/ log 3)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: b\nExplanation: In order to delete a root key in a ternary heap data structure having n elements, it performs downward swapping. So the time complexity for worst case is found to be O (3log n/ log 3). "
    },
    {
        "id": 709,
        "Question": "What is the time complexity for decreasing priority of key in a maximum ternary heap of n elements?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (3log n/ log 3)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: b\nExplanation: In order to the increasing the priority of key in a minimum ternary heap data structure having n elements, it performs downward swapping. So the time complexity for worst case is found to be O (3log n/ log 3). "
    },
    {
        "id": 710,
        "Question": "What is the time complexity for creating a ternary heap using swapping?",
        "Options": [
            "a) O (log n/ log 3)",
            "b) O (n!)",
            "c) O (n)",
            "d) O (1)"
        ],
        "Answer": "Answer: b\nExplanation: In order to decrease the priority of key in a maximum ternary heap data structure having n elements, it performs downward swapping. So the time complexity for worst case is found to be O (3log n/ log 3). "
    },
    {
        "id": 711,
        "Question": "Which of the following is the application of minimum ternary heap?",
        "Options": [
            "a) Prim’s Algorithm",
            "b) Euclid’s Algorithm",
            "c) Eight Queen Puzzle",
            "d) Tree"
        ],
        "Answer": "Answer: a\nExplanation: Ternary heap is a type of data structure in the field of computer science. It is a part of the Heap data structure family. Due to the swapping process, they have better memory cache behavior."
    },
    {
        "id": 712,
        "Question": "What is the reason for the efficiency of a pairing heap?",
        "Options": [
            "a) simplicity",
            "b) time-efficient",
            "c) space-efficient",
            "d) advanced"
        ],
        "Answer": "Answer: a\nExplanation: The reason for the simplicity of a pairing heap is its simplicity as it is simpler and outperform other heap structures."
    },
    {
        "id": 713,
        "Question": "How is a pairing heap represented?",
        "Options": [
            "a) binary tree",
            "b) fibonacci tree",
            "c) heap ordered tree",
            "d) treap"
        ],
        "Answer": "Answer: c\nExplanation: A pairing heap is represented as a heap-ordered tree and the analysis of pairing heap is open."
    },
    {
        "id": 714,
        "Question": "Which node contains a pointer to its parent?",
        "Options": [
            "a) root node",
            "b) right most child",
            "c) left most child",
            "d) left sibling"
        ],
        "Answer": "Answer: b\nExplanation: The actual pairing heap implementation uses a left child and right sibling representation since it follows heap order property."
    },
    {
        "id": 715,
        "Question": "What is the basic operation performed in a pairing heap?",
        "Options": [
            "a) merge",
            "b) deletion",
            "c) insertion",
            "d) swapping"
        ],
        "Answer": "Answer: c\nExplanation: A node that is a leftmost node contains a pointer to its parent, otherwise, the node is a right sibling."
    },
    {
        "id": 716,
        "Question": "If there are c children of the root, how many calls to the merge procedure is required to reassemble the heap?",
        "Options": [
            "a) c",
            "b) c+1",
            "c) c-1",
            "d) 1"
        ],
        "Answer": "Answer: b\nExplanation: The above figure is a representation of a pairing heap because it has left children and right siblings."
    },
    {
        "id": 717,
        "Question": "Which of the following methods is the best choice for complex applications?",
        "Options": [
            "a) binary heap",
            "b) d-heap",
            "c) treap",
            "d) pairing heap"
        ],
        "Answer": "Answer: a\nExplanation: The basic operation performed in a pairing heap is merging. Insertion is also done by merging."
    },
    {
        "id": 718,
        "Question": "Pairing heaps time complexity was inspired by that of?",
        "Options": [
            "a) splay tree",
            "b) treap",
            "c) red-black tree",
            "d) avl tree"
        ],
        "Answer": "Answer: c\nExplanation: If there are c children of the root, then c-1 merges are required to reassemble the pairing heap."
    },
    {
        "id": 719,
        "Question": "The amortized time efficiency for performing deletion of a minimum element is?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(N2)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: d\nExplanation: Pairing heap is the best choice for complex applications because it is simple and better than the others."
    },
    {
        "id": 720,
        "Question": "Out of the following given options, which is the fastest algorithm?",
        "Options": [
            "a) fibonacci heap",
            "b) pairing heap",
            "c) d-ary heap",
            "d) binary heap"
        ],
        "Answer": "Answer: a\nExplanation: The pairing heaps insertion, deletion and search time complexity was initially inspired by that of splay trees."
    },
    {
        "id": 721,
        "Question": "What is the run time efficiency of an insertion algorithm?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(N2)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: b\nExplanation: The heap ordering property requires that all the root elements of the subtrees in the list are not smaller than the root element of the heap."
    },
    {
        "id": 722,
        "Question": "How many properties does a leftist heap support?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: Use of pointers for merging reduces the speed of other operations. This is the main drawback of all advanced data structures."
    },
    {
        "id": 723,
        "Question": "In a leftist heap, the null path length of a null node is defined as?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) null",
            "d) -1"
        ],
        "Answer": "Answer: c\nExplanation: A leftist heap supports two properties- structural property, ordering property and a heap order property."
    },
    {
        "id": 724,
        "Question": "How many nodes does a leftist tree with r nodes must have?",
        "Options": [
            "a) 2r",
            "b) 2r-1",
            "c) 2r",
            "d) 2r-1"
        ],
        "Answer": "Answer: d\nExplanation: In a leftist heap tree, the null path length of a null node with no children is defined as -1."
    },
    {
        "id": 725,
        "Question": "Which of the following operations does not destroy the leftist heap property?",
        "Options": [
            "a) insert",
            "b) merge",
            "c) delete",
            "d) swap"
        ],
        "Answer": "Answer: b\nExplanation: A leftist tree with r nodes on the right path is proved to have at least 2r-1 nodes. This theorem is proved by induction."
    },
    {
        "id": 726,
        "Question": "What is the fundamental operation on leftist heap?",
        "Options": [
            "a) insertion",
            "b) merging",
            "c) deletion",
            "d) swapping"
        ],
        "Answer": "Answer: c\nExplanation: Performing insert and merge operations on the right path could destroy the leftist heap property. It is extremely easy to restore that property."
    },
    {
        "id": 727,
        "Question": "What is the efficiency of merge used in leftist heaps?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(M log N)",
            "d) O(log N)"
        ],
        "Answer": "Answer: b\nExplanation: The fundamental operations on leftist heaps is merge. Insertion operation is a merge of a one-node heap with a larger heap."
    },
    {
        "id": 728,
        "Question": "What is the node path length of a node with 0 or 1 child?",
        "Options": [
            "a) 1",
            "b) -1",
            "c) 0",
            "d) null"
        ],
        "Answer": "Answer: a\nExplanation: A leftist heap has a structural property and an ordering property which is similar to that of a binary heap. Hence, leftist heap is also said to be binary heap."
    },
    {
        "id": 729,
        "Question": "Why is this heap named leftist heap?",
        "Options": [
            "a) only left subtrees exist",
            "b) the tree is biased to get deep down the left",
            "c) it is balanced",
            "d) right trees are unbalanced"
        ],
        "Answer": "Answer: d\nExplanation: The efficiency of merge operations in leftist heap is mathematically found to be O( log N) which is the same in binary heaps."
    },
    {
        "id": 730,
        "Question": "In a leftist heap, all the operations should be performed on?",
        "Options": [
            "a) left path",
            "b) centre path",
            "c) right path",
            "d) root"
        ],
        "Answer": "Answer: c\nExplanation: The length of the shortest path from a node to a node without two children is defined as 0."
    },
    {
        "id": 731,
        "Question": "What would be the result if the left subtree of the root has a null path length of 1 and the right subtree has a null path length of 2?",
        "Options": [
            "a) merge occurs without violation",
            "b) violation at left subtree",
            "c) violation at right subtree",
            "d) violation at the root"
        ],
        "Answer": "Answer: b\nExplanation: The heap is named as leftist heap because it tends to have deep left paths. It follows that the right path ought to be short."
    },
    {
        "id": 732,
        "Question": "What happens if the null path length is not updated?",
        "Options": [
            "a) error occurs",
            "b) all null path lengths will be 0",
            "c) all null path lengths will be -1",
            "d) all null path lengths will be 1"
        ],
        "Answer": "Answer: c\nExplanation: All the operations are performed on the right path because right paths are short. However, insertion and merges cannot be performed on the right path."
    },
    {
        "id": 733,
        "Question": "What is the time taken to delete a minimum element in a leftist heap?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(log N)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: d\nExplanation: When two leftist heaps are merged, if the left subtree of the root has a null path length of 1 and the right subtree has a null path length of 2, leftist property is violated at the root."
    },
    {
        "id": 734,
        "Question": "In what time can a leftist heap be built?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(log N)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: b\nExplanation: While performing insertion via merge operation in a leftist heap, if the null path length is not updated, all null path lengths will be 0."
    },
    {
        "id": 735,
        "Question": "___________ is a self-adjusting version of a leftist heap.",
        "Options": [
            "a) Rightist heap",
            "b) Skew heap",
            "c) d-heap",
            "d) Binary heap"
        ],
        "Answer": "Answer: b\nExplanation: A skew heap is a self-adjusting version of a leftist heap and it is simpler to implement."
    },
    {
        "id": 736,
        "Question": "The worst case running time of all operations in a skew heap is given as?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(N2)",
            "d) O(M log N)"
        ],
        "Answer": "Answer: a\nExplanation: The worst case running time of all operations in a skew heap is mathematically found to be O(N)."
    },
    {
        "id": 737,
        "Question": "What is the amortized cost per operation of a skew heap?",
        "Options": [
            "a) O(N)",
            "b) O(N log N)",
            "c) O(N2)",
            "d) O(log N)"
        ],
        "Answer": "Answer: d\nExplanation: The amortized cost per operation of a skew heap is O(log N) since the worst case analysis of skew heap is O(N) and splay tree is O(M log N)."
    },
    {
        "id": 738,
        "Question": "The relationship of skew heaps to leftist heaps is analogous to that of?",
        "Options": [
            "a) Splay tree and AVL tree",
            "b) Red black tree and AVL tree",
            "c) Binary tree and Splay tree",
            "d) Binary tree and Red black tree"
        ],
        "Answer": "Answer: a\nExplanation: Splay tree is a self -adjusting version of AVL tree. Similarly, skew heap is a self-adjusting version of leftist heap."
    },
    {
        "id": 739,
        "Question": "What is the fundamental operation performed in skew heaps?",
        "Options": [
            "a) intersection",
            "b) difference",
            "c) merging",
            "d) sorting"
        ],
        "Answer": "Answer: c\nExplanation: The fundamental operation of skew heaps is merging. Hence, it is similar to that of a leftist heap."
    },
    {
        "id": 740,
        "Question": "What is the time per operation of merging, insertion and deletion operations in a skew heap?",
        "Options": [
            "a) O(N)",
            "b) O(log N)",
            "c) O(N log N)",
            "d) O(N2)"
        ],
        "Answer": "Answer: b\nExplanation: Skew heaps support merging, insertion and deletion all effectively in O(log N) time per operation."
    },
    {
        "id": 741,
        "Question": "Why would a recursive implementation fail in skew heaps?",
        "Options": [
            "a) skew heaps are self adjusting",
            "b) efficiency gets reduced",
            "c) lack of stack space",
            "d) time complexity"
        ],
        "Answer": "Answer: c\nExplanation: In skew heaps, a recursive implementation could fail because of lack of stack space even though performance is acceptable."
    },
    {
        "id": 742,
        "Question": "Which of the following is difficult to determine the right path length?",
        "Options": [
            "a) Skew heaps",
            "b) Binomial tree",
            "c) Leftist heap",
            "d) d-heap"
        ],
        "Answer": "Answer: a\nExplanation: It is an open problem to determine precisely the expected right path length of both leftist and skew heaps and comparatively, the latter is difficult."
    },
    {
        "id": 743,
        "Question": "The worst case analysis for a naïve merge is given as?",
        "Options": [
            "a) O(N)",
            "b) O( log N)",
            "c) O( N log N)",
            "d) O(N2)"
        ],
        "Answer": "Answer: a\nExplanation: The worst-case analysis for the naïve merge is an insertion in a right heavy tree. So, insertion takes O(N)."
    },
    {
        "id": 744,
        "Question": "How many types of the merge are available in skew heaps?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Two kinds of the merge are available in skew heaps- naïve merge and skew merge."
    },
    {
        "id": 745,
        "Question": "What is the amortized efficiency of skew merge?",
        "Options": [
            "a) O(N)",
            "b) O( log N)",
            "c) O( N log N)",
            "d) O(N2)"
        ],
        "Answer": "Answer: b\nExplanation: One way of doing skew merge is to begin with naïve merge and then swapping the left and right children of the tree."
    },
    {
        "id": 746,
        "Question": "Descending priority queue can be implemented using ______",
        "Options": [
            "a) max heap",
            "b) min heap",
            "c) min-max heap",
            "d) trie"
        ],
        "Answer": "Answer: a\nExplanation: Descending priority queue arranges the elements based on their priority or value and allows removing the elements in descending order. So, it can be efficiently implemented using max heap."
    },
    {
        "id": 747,
        "Question": "Which of the following is the valid min heap?",
        "Options": [
            "a)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3a.png\" alt=\"min-max-heap-questions-answers-q3a\" width=\"488\" height=\"258\" class=\"alignnone size-full wp-image-218773\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3a.png 488w, https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3a-300x159.png 300w\" sizes=\"(max-width: 488px) 100vw, 488px\" />",
            "b)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3b.png\" alt=\"min-max-heap-questions-answers-q3b\" width=\"504\" height=\"271\" class=\"alignnone size-full wp-image-218774\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3b.png 504w, https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3b-300x161.png 300w\" sizes=\"(max-width: 504px) 100vw, 504px\" />",
            "c)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3c.png\" alt=\"min-max-heap-questions-answers-q3c\" width=\"497\" height=\"268\" class=\"alignnone size-full wp-image-218775\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3c.png 497w, https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3c-300x162.png 300w\" sizes=\"(max-width: 497px) 100vw, 497px\" />",
            "d)<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3d.png\" alt=\"min-max-heap-questions-answers-q3d\" width=\"496\" height=\"259\" class=\"alignnone size-full wp-image-218776\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3d.png 496w, https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q3d-300x157.png 300w\" sizes=\"(max-width: 496px) 100vw, 496px\" />"
        ],
        "Answer": "Answer: a\nExplanation: In min heap, the insertion and deletion operation takes O(logn) time. Therefore, a selection sort with n insertions and n deletions can be implemented using a min heap in O(nlogn) operations."
    },
    {
        "id": 748,
        "Question": "The ascending heap property is ___________",
        "Options": [
            "a) A[Parent(i)] =A[i] ",
            "b) A[Parent(i)] <= A[i] ",
            "c) A[Parent(i)] >= A[i] ",
            "d) A[Parent(i)] > 2 * A[i]"
        ],
        "Answer": "Answer: d\nExplanation: In min heap the smallest is located at the root and the largest elements are located at the leaf nodes. So, all leaf nodes need to be checked to find the largest element. "
    },
    {
        "id": 749,
        "Question": "The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in min heap take _________",
        "Options": [
            "a) logarithmic and linear time constant respectively",
            "b) constant and linear time respectively",
            "c) constant and quadratic time respectively",
            "d) constant and logarithmic time respectively"
        ],
        "Answer": "Answer: a\nExplanation: In TrickleDownMin() procedure, we maintain the min-ordering of the min heap. In this procedure, we locate the lowest child or grandchild of the element at positions i. If the lowest element is grandchild then we check that it is smaller than both, its parent and A[i]. "
    },
    {
        "id": 750,
        "Question": "Which one of the following array elements represents a binary min heap?",
        "Options": [
            "a) 12 10 8 25 14 17",
            "b) 8 10 12 25 14 17",
            "c) 25 17 14 12 10 8",
            "d) 14 17 25 10 12 8"
        ],
        "Answer": "Answer: b\nExplanation: The min heap is also known as ascending heap. Min heap of size n is an almost complete binary tree of n nodes such that the element at each node is greater than or equal to the element at its parent node. "
    },
    {
        "id": 751,
        "Question": "In a binary min heap containing n elements, the largest element can be found in __________ time.",
        "Options": [
            "a) O(n)",
            "b) O(nlogn)",
            "c) O(logn)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: In the min heap, the root is the maximum element in the tree. So, locating it takes constant time, but deleting it takes logarithmic time. Because after deleting it, the root is replaced with last element and then the procedure to maintain the min ordering is invoked. "
    },
    {
        "id": 752,
        "Question": "What will be the position of 5, when a max heap is constructed on the input elements 5, 70, 45, 7, 12, 15, 13, 65, 30, 25?",
        "Options": [
            "a) 5 will be at root",
            "b) 5 will be at last level",
            "c) 5 will be at second level",
            "d) 5 can be anywhere in heap"
        ],
        "Answer": "Answer: b\nExplanation: A tree is min heap when data at every node in the tree is smaller than or equal to it’s children’ s data. So, only 8 10 12 25 14 17 generates required tree.\n<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/min-max-heap-questions-answers-q7.png\" alt=\"min-max-heap-questions-answers-q7\" width=\"190\" height=\"144\" class=\"alignnone size-full wp-image-218777\" />"
    },
    {
        "id": 753,
        "Question": "Trie is also known as _________",
        "Options": [
            "a) Digital Tree",
            "b) Treap",
            "c) Binomial Tree",
            "d) 2-3 Tree"
        ],
        "Answer": "Answer: a\nExplanation: Trie is a very useful data structure which is based on the prefix of a string. Trie is used to represent the “Retrieval” of data and thus the name Trie. And it is also known as a digital tree. "
    },
    {
        "id": 754,
        "Question": "What traversal over trie gives the lexicographical sorting of the set of the strings?",
        "Options": [
            "a) postorder",
            "b) preorders",
            "c) inorder",
            "d) level order"
        ],
        "Answer": "Answer: c\nExplanation: In trie, we store the strings in such a way that there is one node for every common prefix. Therefore the inorder traversal over trie gives the lexicographically sorted set of strings."
    },
    {
        "id": 755,
        "Question": "Which of the following is the efficient data structure for searching words in dictionaries?",
        "Options": [
            "a) BST",
            "b) Linked List",
            "c) Balancded BST",
            "d) Trie"
        ],
        "Answer": "Answer: d\nExplanation: In a BST, as well as in a balanced BST searching takes time in order of mlogn, where m is the maximum string length and n is the number of strings in tree. But searching in trie will take O(m) time to search the key."
    },
    {
        "id": 756,
        "Question": "Which of the following special type of trie is used for fast searching of the full texts?",
        "Options": [
            "a) Ctrie",
            "b) Hash tree",
            "c) Suffix tree",
            "d) T tree"
        ],
        "Answer": "Answer: c\nExplanation: Suffix tree, a special type of trie, contains all the suffixes of the given text at the key and their position in the text as their values. So, suffix trees are used for fast searching of the full texts."
    },
    {
        "id": 757,
        "Question": "5. Following code snippet is the function to insert a string in a trie. Find the missing line.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"c\"><pre class=\"de1\">private <span class=\"kw4\">void</span> insert<span class=\"br0\">(</span>String str<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        TrieNode node <span class=\"sy0\">=</span> root<span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> length<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw4\">int</span> index <span class=\"sy0\">=</span> key.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span>\n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node.<span class=\"me1\">children</span><span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\n                node.<span class=\"me1\">children</span><span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> new TrieNode<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n&nbsp;\n            ________________________\n        <span class=\"br0\">}</span>\n&nbsp;\n        node.<span class=\"me1\">isEndOfWord</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) node = node.children[index];",
            "b) node = node.children[str.charAt(i + 1)];",
            "c) node = node.children[index++];",
            "d) node = node.children[index++];"
        ],
        "Answer": "Answer: a\nExplanation: In the insert() method we search if the string is present or not. If the string is not present, then we insert the string into the trie. If it is present as the prefix, we mark the leaf node. So, correct option is node = node.children[index];."
    },
    {
        "id": 758,
        "Question": "Which of the following is not true?",
        "Options": [
            "a) Trie requires less storage space than hashing",
            "b) Trie allows listing of all the words with same prefix",
            "c) Tries are collision free",
            "d) Trie is also known as prefix tree"
        ],
        "Answer": "Answer: a\nExplanation: Both the hashing and the trie provides searching in the linear time. But trie requires extra space for storage and it is collision free. And trie allows finding all the strings with same prefix, so it is also called prefix tree."
    },
    {
        "id": 759,
        "Question": "A program to search a contact from phone directory can be implemented efficiently using ______",
        "Options": [
            "a) a BST",
            "b) a trie",
            "c) a balanced BST",
            "d) a binary tree"
        ],
        "Answer": "Answer: b\nExplanation: Dictionaries, phone directories can be implemented efficiently using the trie. Because it trie provides the efficient linear time searching over the entries."
    },
    {
        "id": 760,
        "Question": "What can be the maximum depth of the trie with n strings and m as the maximum sting the length?",
        "Options": [
            "a) log2n",
            "b) log2m",
            "c) n",
            "d) m"
        ],
        "Answer": "Answer: d\nExplanation: In the trie, the strings are stored efficiently based on the common prefixes. And trie has maximum fan-out 26 if english alphabets are considered. Owing to this, the maximum depth is equal to the maximum string length."
    },
    {
        "id": 761,
        "Question": "Which of the following is true about the trie?",
        "Options": [
            "a) root is letter a",
            "b) path from root to the leat yields the string",
            "c) children of nodes are randomly ordered",
            "d) each node stores the associated keys"
        ],
        "Answer": "Answer: b\nExplanation: A trie is an ordered tree where (i) the root represents an empty string(“”) (ii) each node other than root is labeled with a character (iii) the children of a nodes are lexicographically ordered (iv) the paths from the leaves to the root yields the strings."
    },
    {
        "id": 762,
        "Question": "What is the other name for Suffix Tree?",
        "Options": [
            "a) Array",
            "b) Stack",
            "c) Priority Queue",
            "d) PAT Tree"
        ],
        "Answer": "Answer: d\nExplanation: In computer science, a suffix tree is also known as PAT tree or position tree. It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. "
    },
    {
        "id": 763,
        "Question": "Which tree allows fast implementation of string operation?",
        "Options": [
            "a) Rope Tree",
            "b) Suffix Tree",
            "c) Tango Tree",
            "d) Top Tree"
        ],
        "Answer": "Answer: b\nExplanation: In computer science, a suffix tree is also known as PAT tree or position tree. It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. It allows fast string operation to be carried out by the user."
    },
    {
        "id": 764,
        "Question": "How much time does construction of suffix tree take?",
        "Options": [
            "a) O (log M)",
            "b) O (M!)",
            "c) Exponential to Length of Tree",
            "d) Linear to Length of Tree"
        ],
        "Answer": "Answer: d\nExplanation: Suffix tree is also known as PAT tree or position tree. It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. It allows fast string operation. Total time taken for construction of suffix tree is linear to the length of the tree."
    },
    {
        "id": 765,
        "Question": "How much space does construction of suffix tree takes?",
        "Options": [
            "a) O (log M)",
            "b) Exponential to Length of Tree",
            "c) O (M!)",
            "d) Linear to Length of Tree"
        ],
        "Answer": "Answer: d\nExplanation: Suffix tree is also known as PAT tree or position tree. It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. It allows fast string operation. Total space taken for construction of a suffix tree is linear to the length of the tree."
    },
    {
        "id": 766,
        "Question": "Which tree provides a linear time solution for substring operation?",
        "Options": [
            "a) Rope Tree",
            "b) Suffix Tree",
            "c) Tango Tree",
            "d) Top Tree"
        ],
        "Answer": "Answer: b\nExplanation: It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. It allows fast string operation to be carried out by the user. The substring operation can be performed by suffix tree in linear time."
    },
    {
        "id": 767,
        "Question": "Who proposed the concept of Suffix Tree?",
        "Options": [
            "a) Weiner",
            "b) Samuel F. B. Morse",
            "c) Friedrich Clemens Gerke",
            "d) Alexander Morse"
        ],
        "Answer": "Answer: a\nExplanation: In computer science, a suffix tree is also known as PAT tree or position tree. It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. The concept of Suffix Tree was introduced by Weiner in 1973."
    },
    {
        "id": 768,
        "Question": "Who among the following provided the first online contribution of Suffix Tree?",
        "Options": [
            "a) Weiner",
            "b) Samuel F. B. Morse",
            "c) Ukkonen",
            "d) Alexander Morse"
        ],
        "Answer": "Answer: c\nExplanation: In computer science, a suffix tree is also known as PAT tree or position tree. The concept of Suffix Tree was introduced by Weiner in 1973. Ukkonen provided the first online contribution of Suffix tree which had the time complexity of the fastest algorithm of that period."
    },
    {
        "id": 769,
        "Question": "What is the time complexity of Uttkonen’s algorithm?",
        "Options": [
            "a) O (log n!)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (n log n)"
        ],
        "Answer": "Answer: d\nExplanation: The concept of Suffix Tree was introduced by Weiner in 1973. Ukkonen provided the first online contribution of Suffix tree which had the time complexity of the fastest algorithm of that period. Ukkonen’s algorithm had a time complexity of n log n."
    },
    {
        "id": 770,
        "Question": "Who among the following provided the first suffix tree contribution for all alphabet?",
        "Options": [
            "a) Weiner",
            "b) Farach",
            "c) Ukkonen",
            "d) Alexander Morse"
        ],
        "Answer": "Answer: b\nExplanation: The concept of Suffix Tree was introduced by Weiner in 1973. Ukkonen provided the first online contribution of Suffix tree which had the time complexity of the fastest algorithm of that period. Farach gave the first suffix tree contribution for all alphabets in 1997."
    },
    {
        "id": 771,
        "Question": "Who among the following algorithm is used in external memory and compression of the suffix tree?",
        "Options": [
            "a) Weiner’s algorithm",
            "b) Farach’s algorithm",
            "c) Ukkonen’s algorithm",
            "d) Alexander Morse"
        ],
        "Answer": "Answer: b\nExplanation: The concept of Suffix Tree was introduced by Weiner in 1973. Ukkonen provided the first online contribution of the Suffix tree. Farach gave the first suffix tree contribution for all alphabets in 1997. Farach’s algorithm is used in external memory and compression."
    },
    {
        "id": 772,
        "Question": "Which statement is correct of suffix tree with a string of length n?",
        "Options": [
            "a) The tree has n leaves.",
            "b) The tree has n roots",
            "c) Height of Tree is n",
            "d) Depth of tree is n"
        ],
        "Answer": "Answer: a\nExplanation: In computer science, a suffix tree is also known as PAT tree or position tree. It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. For a string of length n, the suffix tree has leaves equal to n."
    },
    {
        "id": 773,
        "Question": "Which tree allows fast implementation of a set of string operation?",
        "Options": [
            "a) Rope Tree",
            "b) Tango Tree",
            "c) Generalized Suffix Tree",
            "d) Top Tree"
        ],
        "Answer": "Answer: b\nExplanation: It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. All the nodes (internal) except for the root nodes have at least two children."
    },
    {
        "id": 774,
        "Question": "What is a time complexity for checking a string of length n is substring or not?",
        "Options": [
            "a) O (log n!)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (n)"
        ],
        "Answer": "Answer: b\nExplanation: It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. All the nodes (internal) except for the root nodes have at least two children. No two edges that are coming out of a node have labels of string beginning with the same character."
    },
    {
        "id": 775,
        "Question": "What is a time complexity for x pattern occurrence of length n?",
        "Options": [
            "a) O (log n!)",
            "b) Ɵ (n!)",
            "c) O (n2)",
            "d) Ɵ (n + x)"
        ],
        "Answer": "Answer: d\nExplanation: Suffix tree is also known as PAT tree or position tree. It allows fast string operation. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for x pattern occurrence of length n is Ɵ (n + x)."
    },
    {
        "id": 776,
        "Question": "What is a time complexity for finding the longest substring that is common in string S1 and S2 (n1 and n2 are the string lengths of strings s1, s2 respectively)?",
        "Options": [
            "a) O (log n!)",
            "b) Ɵ (n!)",
            "c) O (n2+ n1)",
            "d) Ɵ (n1 + n2)"
        ],
        "Answer": "Answer: d\nExplanation: Suffix Tree allows fast string operation. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding the longest substring that is common in string S1 and S2 is Ɵ (n1 + n2)."
    },
    {
        "id": 777,
        "Question": "What is a time complexity for finding the longest substring that is repeated in a string?",
        "Options": [
            "a) O (log n!)",
            "b) Ɵ (n!)",
            "c) O (n2+ n1)",
            "d) Ɵ (n)"
        ],
        "Answer": "Answer: d\nExplanation: Suffix Tree allows fast string operation. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding the longest substring that is repeated in a string is Ɵ (n)."
    },
    {
        "id": 778,
        "Question": "What is a time complexity for finding frequently occurring of a substring of minimum length in a string?",
        "Options": [
            "a) Ɵ (n)",
            "b) Ɵ (n!)",
            "c) O (n2+ n1)",
            "d) O (log n!)"
        ],
        "Answer": "Answer: a\nExplanation: Suffix Tree allows fast string operation. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding frequently occurring of a substring of minimum length in a string is Ɵ (n).\n"
    },
    {
        "id": 779,
        "Question": "What is a time complexity for finding the longest prefix that is common between suffix in a string?",
        "Options": [
            "a) Ɵ (n)",
            "b) Ɵ (n!)",
            "c) Ɵ (1)",
            "d) O (log n!)"
        ],
        "Answer": "Answer: c\nExplanation: Suffix Tree allows fast string operation. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding the longest prefix that is common between suffix in a string is Ɵ (1)."
    },
    {
        "id": 780,
        "Question": "What is a time complexity for finding all the maximal palindrome in a string?",
        "Options": [
            "a) Ɵ (n)",
            "b) Ɵ (n!)",
            "c) Ɵ (1)",
            "d) O (log n!)"
        ],
        "Answer": "Answer: a\nExplanation: Palindrome is a string that is the same when reading forward as well as backward. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding all the maximal palindrome in a string is Ɵ (n)."
    },
    {
        "id": 781,
        "Question": "What is a time complexity for finding all the tandem repeats?",
        "Options": [
            "a) Ɵ (n)",
            "b) Ɵ (n!)",
            "c) Ɵ (1)",
            "d) O (n log n + z)"
        ],
        "Answer": "Answer: a\nExplanation: Tandem Repeats are formed in DNA when the nucleotides pattern repeats more than once. To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding all the tandem repeats in a string is O (n log n + z)."
    },
    {
        "id": 782,
        "Question": "What is a time complexity for finding the longest palindromic substring in a string by using the generalized suffix tree?",
        "Options": [
            "a) Linear Time",
            "b) Exponential Time",
            "c) Logarithmic Time",
            "d) Cubic Time"
        ],
        "Answer": "Answer: a\nExplanation: Palindrome is a string that is same when reading forward as well as backward. The time complexity for finding the longest palindromic substring in a string by using generalized suffix tree is linear time."
    },
    {
        "id": 783,
        "Question": "Which of the following algorithm of data compression uses a suffix tree?",
        "Options": [
            "a) Weiner’s algorithm",
            "b) Farach’s algorithm",
            "c) Lempel – Ziv – Welch’s algorithm",
            "d) Alexander Morse’s algorithm"
        ],
        "Answer": "Answer: c\nExplanation: The concept of Suffix Tree was introduced by Weiner in 1973. Ukkonen provided the first online contribution of the Suffix tree. Farach gave the first suffix tree contribution for all alphabets in 1997. Lempel – Ziv – Welch’s algorithm of data compression uses a suffix tree."
    },
    {
        "id": 784,
        "Question": "Which of the following data clustering algorithm uses suffix tree in search engines?",
        "Options": [
            "a) Weiner’s algorithm",
            "b) Farach’s algorithm",
            "c) Lempel – Ziv – Welch’s algorithm",
            "d) Suffix Tree Clustering"
        ],
        "Answer": "Answer: d\nExplanation: The concept of Suffix Tree was introduced by Weiner in 1973. Ukkonen provided the first online contribution of Suffix. Farach gave the first suffix tree contribution for all alphabets in 1997. Suffix Tree Clustering is a data clustering algorithm that uses suffix tree in search engines."
    },
    {
        "id": 785,
        "Question": "What is a time complexity for finding the total length of all string on all edges of a tree?",
        "Options": [
            "a) Ɵ (n)",
            "b) Ɵ (n!)",
            "c) Ɵ (1)",
            "d) O (n2)"
        ],
        "Answer": "Answer: d\nExplanation: To check if a substring is present in a string of a length of n, the time complexity for such operation is found to be O (n). The time complexity for finding the total length of all string on all edges of a tree is O (n2)."
    },
    {
        "id": 786,
        "Question": "For what size of nodes, the worst case of usage of space in suffix tree seen?",
        "Options": [
            "a) n Nodes",
            "b) 2n Nodes",
            "c) 2n nodes",
            "d) n! nodes"
        ],
        "Answer": "Answer: a\nExplanation: It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. So, the suffix tree can be used in string problems occurring in a text editor. The time taken to solve the problem is linear to the length of the string."
    },
    {
        "id": 787,
        "Question": "What is a time complexity for inserting an alphabet in the tree using hash maps?",
        "Options": [
            "a) O (log n!)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (1)"
        ],
        "Answer": "Answer: a\nExplanation: It is a compressed search tree or prefix tree in which keys contain the suffix of text values as the text position. So, a suffix tree is used in bioinformatics problems and solutions like pattern searching in DNA and protein sequences."
    },
    {
        "id": 788,
        "Question": "What is a hash table?",
        "Options": [
            "a) A structure that maps values to keys",
            "b) A structure that maps keys to values",
            "c) A structure used for storage",
            "d) A structure used to implement stack and queue"
        ],
        "Answer": "Answer: b\nExplanation: A hash table is used to implement associative arrays which has a key-value pair, so the has table maps keys to values."
    },
    {
        "id": 789,
        "Question": "If several elements are competing for the same bucket in the hash table, what is it called?",
        "Options": [
            "a) Diffusion",
            "b) Replication",
            "c) Collision",
            "d) Duplication"
        ],
        "Answer": "Answer: c\nExplanation: In a hash table, if sevaral elements are computing for the same bucket then there will be a clash among elements. This condition is called Collision. The Collision is reduced by adding elements to a linked list and head address of linked list is placed in hash table. "
    },
    {
        "id": 790,
        "Question": "What is direct addressing?",
        "Options": [
            "a) Distinct array position for every possible key",
            "b) Fewer array positions than keys",
            "c) Fewer keys than array positions",
            "d) Same array position for all keys"
        ],
        "Answer": "Answer: a\nExplanation: Direct addressing is possible only when we can afford to allocate an array that has one position for every possible key."
    },
    {
        "id": 791,
        "Question": "What is the search complexity in direct addressing?",
        "Options": [
            "a) O(n)",
            "b) O(logn)",
            "c) O(nlogn)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: Since every key has a unique array position, searching takes a constant time."
    },
    {
        "id": 792,
        "Question": "What is a hash function?",
        "Options": [
            "a) A function has allocated memory to keys",
            "b) A function that computes the location of the key in the array",
            "c) A function that creates an array",
            "d) A function that computes the location of the values in the array"
        ],
        "Answer": "Answer: b\nExplanation: In a hash table, there are fewer array positions than the keys, so the position of the key in the array has to be computed, this is done using the hash function."
    },
    {
        "id": 793,
        "Question": "Which of the following is not a technique to avoid a collision?",
        "Options": [
            "a) Make the hash function appear random",
            "b) Use the chaining method",
            "c) Use uniform hashing",
            "d) Increasing hash table size"
        ],
        "Answer": "Answer: d\nExplanation: On increasing hash table size, space complexity will increase as we need to reallocate the memory size of hash table for every collision. It is not the best technique to avoid a collision. We can avoid collision by making hash function random, chaining method and uniform hashing. "
    },
    {
        "id": 794,
        "Question": "What is the load factor?",
        "Options": [
            "a) Average array size",
            "b) Average key size",
            "c) Average chain length",
            "d) Average hash table length"
        ],
        "Answer": "Answer: c\nExplanation: In simple chaining, load factor is the average number of elements stored in a chain, and is given by the ratio of number of elements stored to the number of slots in the array."
    },
    {
        "id": 795,
        "Question": "What is simple uniform hashing?",
        "Options": [
            "a) Every element has equal probability of hashing into any of the slots",
            "b) A weighted probabilistic method is used to hash elements into the slots",
            "c) Elements has Random probability of hashing into array slots",
            "d) Elements are hashed based on priority"
        ],
        "Answer": "Answer: a\nExplanation: In simple uniform hashing, any given element is equally likely to hash into any of the slots available in the array."
    },
    {
        "id": 796,
        "Question": "In simple uniform hashing, what is the search complexity?",
        "Options": [
            "a) O(n)",
            "b) O(logn)",
            "c) O(nlogn)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: There are two cases, once when the search is successful and when it is unsuccessful, but in both the cases, the complexity is O(1+alpha) where 1 is to compute the hash function and alpha is the load factor."
    },
    {
        "id": 797,
        "Question": "In simple chaining, what data structure is appropriate?",
        "Options": [
            "a) Singly linked list",
            "b) Doubly linked list",
            "c) Circular linked list",
            "d) Binary trees"
        ],
        "Answer": "Answer: b\nExplanation: Deletion becomes easier with doubly linked list, hence it is appropriate."
    },
    {
        "id": 798,
        "Question": "The case in which a key other than the desired one is kept at the identified location is called?",
        "Options": [
            "a) Hashing",
            "b) Collision",
            "c) Chaining",
            "d) Open addressing"
        ],
        "Answer": "Answer: b\nExplanation: When some other value is placed at a specified location other than the desired key, it is said to be a collision."
    },
    {
        "id": 799,
        "Question": "What data organization method is used in hash tables?",
        "Options": [
            "a) Stack",
            "b) Array",
            "c) Linked list",
            "d) Queue"
        ],
        "Answer": "Answer: c\nExplanation: The data structure used to organize data for hash tables is linked list. It contains a data field and a pointer field."
    },
    {
        "id": 800,
        "Question": "The task of generating alternative indices for a node is called?",
        "Options": [
            "a) Collision handling",
            "b) Collision detection",
            "c) Collision recovery",
            "d) Closed hashing"
        ],
        "Answer": "Answer: a\nExplanation: Collision handling involves the process of formulating alternative indices for a key. "
    },
    {
        "id": 801,
        "Question": "Which of the following is not a collision resolution technique?",
        "Options": [
            "a) Separate chaining",
            "b) Linear probing",
            "c) Quadratic probing",
            "d) Hashing"
        ],
        "Answer": "Answer: d\nExplanation: Hashing is a technique of placing data items in specific locations. Collision may occur in hashing but hashing is not a collision resolution technique."
    },
    {
        "id": 802,
        "Question": "In a hash table of size 10, where is element 7 placed?",
        "Options": [
            "a) 6",
            "b) 7",
            "c) 17",
            "d) 16"
        ],
        "Answer": "Answer: a\nExplanation: Hashing is a data structure which is used to locate data in a table based on a key value."
    },
    {
        "id": 803,
        "Question": "What should be the load factor for separate chaining hashing?",
        "Options": [
            "a) 0.5",
            "b) 1",
            "c) 1.5",
            "d) 2"
        ],
        "Answer": "Answer: b\nExplanation: The hash location is defined as hash(f)= key mod table_size.\n7 mod 10 gives 7. It is placed in 7th position."
    },
    {
        "id": 804,
        "Question": "Which of the following operations are done in a hash table?",
        "Options": [
            "a) Insert only",
            "b) Search only",
            "c) Insert and search",
            "d) Replace"
        ],
        "Answer": "Answer: b\nExplanation: For hashing using separate chaining method, the load factor should be maintained as 1. For open addressing method, it should not exceed 0.5."
    },
    {
        "id": 805,
        "Question": "Which of the following is identical to that of a separate chaining hash node?",
        "Options": [
            "a) Linked list",
            "b) Array",
            "c) Stack",
            "d) Queue"
        ],
        "Answer": "Answer: c\nExplanation: Hash tables are used to implement Insert and Find operations in constant average time. This is the prime purpose of hashing."
    },
    {
        "id": 806,
        "Question": "Which of the following is the hashing function for separate chaining?",
        "Options": [
            "a) H(x)=(hash(x)+f(i)) mod table size",
            "b) H(x)=hash(x)+i2  mod table size",
            "c) H(x)=x mod table size",
            "d) H(x)=x mod (table size * 2)"
        ],
        "Answer": "Answer: a\nExplanation: The hash node in separate chaining is similar to that of a linked list. The separate chaining hash table is an array of linked lists."
    },
    {
        "id": 807,
        "Question": "What is the correct notation for a load factor?",
        "Options": [
            "a) Ω",
            "b) ∞",
            "c) ∑",
            "d) ⅄"
        ],
        "Answer": "Answer: c\nExplanation: The hashing function for separate chaining is given by H(x)= key mod table size. H(x)=hash(x)+i2  mod table size defines quadratic probing."
    },
    {
        "id": 808,
        "Question": "In hash tables, how many traversal of links does a successful search require?",
        "Options": [
            "a) 1+⅄",
            "b) 1+⅄2",
            "c) 1+ (⅄/2)",
            "d) ⅄3"
        ],
        "Answer": "Answer: d\nExplanation: In general, load factor is denoted as ⅄. In separate chaining method, load factor is maintained as 1.0."
    },
    {
        "id": 809,
        "Question": "Which of the following is a disadvantage of using separate chaining using linked lists?",
        "Options": [
            "a) It requires many pointers",
            "b) It requires linked lists",
            "c) It uses array",
            "d) It does not resolve collision"
        ],
        "Answer": "Answer: c\nExplanation: A successful search requires about 1+ (⅄/2) links to be traversed. There is a guarantee that at least one link must be traversed."
    },
    {
        "id": 810,
        "Question": "What is the worst case search time of a hashing using separate chaining algorithm?",
        "Options": [
            "a) O(N log N)",
            "b) O(N)",
            "c) O(N2)",
            "d) O(N3)"
        ],
        "Answer": "Answer: a\nExplanation: One of the major disadvantages of using separate chaining is the requirement of pointers. If the number of elements are more, it requires more pointers."
    },
    {
        "id": 811,
        "Question": "Which of the following is used in hash tables to determine the index of any input record?",
        "Options": [
            "a) hash function",
            "b) hash linked list",
            "c) hash tree",
            "d) hash chaining"
        ],
        "Answer": "Answer: a\nExplanation: Hash table is an example of a data structure that is built for fast access of elements. Hash functions are used to determine the index of any input record in a hash table."
    },
    {
        "id": 812,
        "Question": "What is the advantage of a hash table as a data structure?",
        "Options": [
            "a) faster access of data",
            "b) easy to implement",
            "c) very efficient for less number of entries",
            "d) exhibit good locality of reference"
        ],
        "Answer": "Answer: a\nExplanation: Hash table is a data structure that has an advantage that it allows fast access of elements. Hash functions are used to determine the index of any input record in a hash table."
    },
    {
        "id": 813,
        "Question": "What is the use of a hash function?",
        "Options": [
            "a) to calculate and return the index of corresponding data",
            "b) to store data",
            "c) to erase data",
            "d) to change data"
        ],
        "Answer": "Answer: a\nExplanation: Hash function calculates and returns the index for corresponding data. This data is then mapped in a hash table."
    },
    {
        "id": 814,
        "Question": "What is the time complexity of insert function in a hash table using a doubly linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of insert function in a hash table is O(1). Condition is that the number of collisions should be low. "
    },
    {
        "id": 815,
        "Question": "What is the time complexity of search function in a hash table using a doubly linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of search function in a hash table is O(1). Condition is that the number of collisions should be low. "
    },
    {
        "id": 816,
        "Question": "What is the time complexity of delete function in the hash table using a doubly linked list?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of delete function in a hash table is O(1). Condition is that the hash function should be such that the number of collisions should be low."
    },
    {
        "id": 817,
        "Question": "What is the advantage of using a doubly linked list for chaining over singly linked list?",
        "Options": [
            "a) it takes less memory",
            "b) it is easy to implement",
            "c) it makes the process of insertion and deletion faster",
            "d) it causes less collisions"
        ],
        "Answer": "Answer: a\nExplanation: Hashing is also used in encryption algorithms. It is used for encryption and decryption of digital signatures."
    },
    {
        "id": 818,
        "Question": "Which of the following technique stores data in the hash table itself in case of a collision?",
        "Options": [
            "a) Open addressing",
            "b) Chaining using linked list",
            "c) Chaining using doubly linked list",
            "d) Chaining using binary tree"
        ],
        "Answer": "Answer: c\nExplanation: Using a doubly linked list reduces time complexity significantly. Though it uses more memory to store the extra pointer."
    },
    {
        "id": 819,
        "Question": "Which of the following technique stores data in a separate entity in case of a collision?",
        "Options": [
            "a) Open addressing",
            "b) Chaining using doubly linked list",
            "c) Linear probing",
            "d) Double hashing"
        ],
        "Answer": "Answer: a\nExplanation: Open addressing is used to store data in the table itself in case of a collision. Whereas chaining stores data in a separate entity. "
    },
    {
        "id": 820,
        "Question": "Which of the following variant of a hash table has the best cache performance?",
        "Options": [
            "a) hash table using a linked list for separate chaining",
            "b) hash table using binary search tree for separate chaining",
            "c) hash table using open addressing",
            "d) hash table using a doubly linked list for separate chaining"
        ],
        "Answer": "Answer: c\nExplanation: Implementation of the hash table using open addressing has a better cache performance as compared to separate chaining. It is because open addressing stores data in the same table without using any extra space."
    },
    {
        "id": 821,
        "Question": "What is the advantage of hashing with chaining?",
        "Options": [
            "a) cache performance is good",
            "b) uses less space",
            "c) less sensitive to hash function",
            "d) has a time complexity of O(n) in the worst case"
        ],
        "Answer": "Answer: c\nExplanation: Hashing with separate chaining has an advantage that it is less sensitive to a hash function. It is also easy to implement."
    },
    {
        "id": 822,
        "Question": "What is the disadvantage of hashing with chaining?",
        "Options": [
            "a) not easy to implement",
            "b) takes more space",
            "c) quite sensitive to hash function",
            "d) table gets filled up easily"
        ],
        "Answer": "Answer: b\nExplanation: Hashing with separate chaining has a disadvantage that it takes more space. This space is used for storing elements in case of a collision."
    },
    {
        "id": 823,
        "Question": "What is the time complexity of insert function in a hash table using a binary tree?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of insert function in a hash table is O(1) on an average. Condition is that the number of collisions should be low. "
    },
    {
        "id": 824,
        "Question": "What is the time complexity of the search function in a hash table using a binary tree?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of search function in a hash table is O(1). Condition is that the number of collisions should be low. "
    },
    {
        "id": 825,
        "Question": "What is the time complexity of the delete function in the hash table using a binary tree?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of delete function in a hash table is O(1). Condition is that the hash function should be such that the number of collisions should be low."
    },
    {
        "id": 826,
        "Question": "What is the advantage of a hash table over BST?",
        "Options": [
            "a) hash table has a better average time complexity for performing insert, delete and search operations",
            "b) hash table requires less space",
            "c) range query is easy with hash table",
            "d) easier to implement"
        ],
        "Answer": "Answer: a\nExplanation: Hash table and BST both are examples of data structures. Hash table has an advantage that it has a better time complexity for performing insert, delete and search operations."
    },
    {
        "id": 827,
        "Question": "What is the disadvantage of BST over the hash table?",
        "Options": [
            "a) BST is easier to implement",
            "b) BST can get the keys sorted by just performing inorder traversal",
            "c) BST can perform range query easily",
            "d) Time complexity of hash table in inserting, searching and deleting is less than that of BST"
        ],
        "Answer": "Answer: d\nExplanation: BST has an advantage that it is easier to implement, can get the keys sorted by just performing in-order traversal and can perform range query easily. Hash table has lesser time complexity for performing insert, delete and search operations."
    },
    {
        "id": 828,
        "Question": "Which of the following technique stores data separately in case of a collision?",
        "Options": [
            "a) Open addressing",
            "b) Double hashing",
            "c) Quadratic probing",
            "d) Chaining using a binary tree"
        ],
        "Answer": "Answer: d\nExplanation: Open addressing is used to store data in the table itself in case of a collision. Whereas chaining stores data in a separate entity. "
    },
    {
        "id": 829,
        "Question": "Which of the following helps keys to be mapped into addresses?",
        "Options": [
            "a) hash function",
            "b) separate chaining",
            "c) open addressing",
            "d) chaining using a linked list"
        ],
        "Answer": "Answer: a\nExplanation: Hash table is an example of a data structure that is built for fast access of elements. Hash functions are used to determine the index of any input record in a hash table."
    },
    {
        "id": 830,
        "Question": "What is the advantage of the hash table over a linked list?",
        "Options": [
            "a) faster access of data",
            "b) easy to implement",
            "c) very efficient for less number of entries",
            "d) exhibit good locality of reference"
        ],
        "Answer": "Answer: a\nExplanation: Hash table is a data structure that has an advantage that it allows fast access of elements. But linked list is easier to implement as compared to the hash table."
    },
    {
        "id": 831,
        "Question": "Which of the following trait of a hash function is most desirable?",
        "Options": [
            "a) it should cause less collisions",
            "b) it should cause more collisions",
            "c) it should occupy less space",
            "d) it should be easy to implement"
        ],
        "Answer": "Answer: a\nExplanation: Hash function calculates and returns the index for corresponding data. So the most important trait of a hash function is that it should cause a minimum number of collisions."
    },
    {
        "id": 832,
        "Question": "What is the time complexity of insert function in a hash table using list head?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of insert function in a hash table is O(1). Condition is that the number of collisions should be low. "
    },
    {
        "id": 833,
        "Question": "What is the time complexity of search function in a hash table using list head?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of search function in a hash table is O(1). Condition is that the number of collisions should be low. "
    },
    {
        "id": 834,
        "Question": "What is the time complexity of delete function in the hash table using list head?",
        "Options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "Answer": "Answer: a\nExplanation: Time complexity of delete function in a hash table is O(1). Condition is that the hash function should be such that the number of collisions should be low."
    },
    {
        "id": 835,
        "Question": "What is the advantage of using linked list over the doubly linked list for chaining?",
        "Options": [
            "a) it takes less memory",
            "b) it causes more collisions",
            "c) it makes the process of insertion and deletion faster",
            "d) it causes less collisions"
        ],
        "Answer": "Answer: a\nExplanation: A hash table may become full in the case when we use open addressing. But when we use separate chaining it does not happen."
    },
    {
        "id": 836,
        "Question": "What is the worst case time complexity of insert function in the hash table when the list head is used for chaining?",
        "Options": [
            "a) O(1)",
            "b) O(n log n)",
            "c) O(log n)",
            "d) O(n)"
        ],
        "Answer": "Answer: a\nExplanation: Singly linked list takes lesser space as compared to doubly linked list. But the time complexity of the singly linked list is more than a doubly linked list."
    },
    {
        "id": 837,
        "Question": "Which of the following technique is used for handling collisions in a hash table?",
        "Options": [
            "a) Open addressing",
            "b) Hashing",
            "c) Searching",
            "d) Hash function"
        ],
        "Answer": "Answer: d\nExplanation: Worst case time complexity of insert function in the hash table when the list head is used for chaining is O(n). It is caused when a number of collisions are very high."
    },
    {
        "id": 838,
        "Question": "Which of the following is an advantage of open addressing over separate chaining?",
        "Options": [
            "a) it is simpler to implement",
            "b) table never gets full",
            "c) it is less sensitive to hash function",
            "d) it has better cache performance"
        ],
        "Answer": "Answer: a\nExplanation: Open addressing is the technique which is used for handling collisions in a hash table. Separate chaining is another technique which is used for the same purpose."
    },
    {
        "id": 839,
        "Question": "Which of the following problems occur due to linear probing?",
        "Options": [
            "a) Primary collision",
            "b) Secondary collision",
            "c) Separate chaining",
            "d) Extendible hashing"
        ],
        "Answer": "Answer: a\nExplanation: Primary collision occurs due to linear probing technique. It is overcome using a quadratic probing technique."
    },
    {
        "id": 840,
        "Question": "How many probes are required on average for insertion and successful search?",
        "Options": [
            "a) 4 and 10",
            "b) 2 and 6",
            "c) 2.5 and 1.5",
            "d) 3.5 and 1.5"
        ],
        "Answer": "Answer: c\nExplanation: Using formula, the average number of probes required for insertion is 2.5 and for a successful search, it is 1.5."
    },
    {
        "id": 841,
        "Question": "What is the load factor for an open addressing technique?",
        "Options": [
            "a) 1",
            "b) 0.5",
            "c) 1.5",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: The load factor for an open addressing technique should be 0.5. For separate chaining technique, the load factor is 1."
    },
    {
        "id": 842,
        "Question": "Which of the following is not a collision resolution strategy for open addressing?",
        "Options": [
            "a) Linear probing",
            "b) Quadratic probing",
            "c) Double hashing",
            "d) Rehashing"
        ],
        "Answer": "Answer: d\nExplanation: Linear probing, quadratic probing and double hashing are all collision resolution strategies for open addressing whereas rehashing is a different technique."
    },
    {
        "id": 843,
        "Question": "Which of the following is the correct function definition for linear probing?",
        "Options": [
            "a) F(i)= 1",
            "b) F(i)=i",
            "c) F(i)=i2",
            "d) F(i)=i+1"
        ],
        "Answer": "  Answer: a\nExplanation: Using random collision resolution algorithm, the cost of an unsuccessful search can be used to compute the average cost of a successful search."
    },
    {
        "id": 844,
        "Question": "___________  is not a theoretical problem but actually occurs in real implementations of probing.",
        "Options": [
            "a) Hashing",
            "b) Clustering",
            "c) Rehashing",
            "d) Collision"
        ],
        "Answer": "Answer: b\nExplanation: The function used in linear probing is defined as, F(i)=I where i=0,1,2,3….,n."
    },
    {
        "id": 845,
        "Question": "What is the hash function used in linear probing?",
        "Options": [
            "a) H(x)= key mod table size",
            "b) H(x)= (key+ F(i2)) mod table size",
            "c) H(x)= (key+ F(i)) mod table size",
            "d) H(x)= X mod 17"
        ],
        "Answer": "Answer: b\nExplanation: Clustering is not a theoretical problem but it occurs in implementations of hashing. Rehashing is a kind of hashing."
    },
    {
        "id": 846,
        "Options": [
            "a) 7",
            "b) 6",
            "c) 2",
            "d) 0"
        ],
        "Answer": "Answer: c\nExplanation: The hash function used in linear probing is defined to be H(x)= (key+ F(i)) mod table size where i=0,1,2,3,…,n."
    },
    {
        "id": 847,
        "Question": "What is the formula to find the expected number of probes for an unsuccessful search in linear probing?",
        "Options": [
            "a) \\(\\frac{1}{2} \\frac{1+1}{(1-⅄)}\\) ",
            "b) \\(\\frac{1}{2}\\frac{1+1}{(1-⅄)^2}\\) ",
            "c) \\(\\frac{1}{2}\\frac{1+1}{(1+⅄)}\\) ",
            "d) \\(\\frac{1}{2}\\frac{1+1}{(1+⅄)(1-⅄)}\\)"
        ],
        "Answer": "Answer: a\nExplanation: If misspelling detection is important, an entire dictionary can be pre-hashed and words can be checked in constant time."
    },
    {
        "id": 848,
        "Question": "Which of the following schemes does quadratic probing come under?",
        "Options": [
            "a) rehashing",
            "b) extended hashing",
            "c) separate chaining",
            "d) open addressing"
        ],
        "Answer": "Answer: d\nExplanation: Quadratic probing comes under open addressing scheme to resolve collisions in hash tables."
    },
    {
        "id": 849,
        "Question": "What kind of deletion is implemented by hashing using open addressing?",
        "Options": [
            "a) active deletion",
            "b) standard deletion",
            "c) lazy deletion",
            "d) no deletion"
        ],
        "Answer": "Answer: a\nExplanation: Quadratic probing can overcome primary collision that occurs in linear probing but a secondary collision occurs in quadratic probing."
    },
    {
        "id": 850,
        "Question": "Which of the following is the correct function definition for quadratic probing?",
        "Options": [
            "a) F(i)=i2",
            "b) F(i)=i",
            "c) F(i)=i+1",
            "d) F(i)=i2+1"
        ],
        "Answer": "Answer: c\nExplanation: Standard deletion cannot be performed in an open addressing hash table, because the cells might have caused collision. Hence, the hash tables implement lazy deletion."
    },
    {
        "id": 851,
        "Question": "How many constraints are to be met to successfully implement quadratic probing?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: In quadratic probing, if the table size is prime, we can insert a new element even though table is exactly half filled. We can’t insert element if table size is more than half filled."
    },
    {
        "id": 852,
        "Question": " Which among the following is the best technique to handle collision?",
        "Options": [
            "a) Quadratic probing",
            "b) Linear probing",
            "c) Double hashing",
            "d) Separate chaining"
        ],
        "Answer": "Answer: a\nExplanation: The function of quadratic probing is defined as F(i)=i2. The function of linear probing is defined as F(i)=i."
    },
    {
        "id": 853,
        "Question": "Which of the following techniques offer better cache performance?",
        "Options": [
            "a) Quadratic probing",
            "b) Linear probing",
            "c) Double hashing",
            "d) Rehashing"
        ],
        "Answer": "Answer: b\nExplanation: 2 requirements are to be met with respect to table size. The table size should be a prime number and the table size should not be more than half full."
    },
    {
        "id": 854,
        "Question": "What is the formula used in quadratic probing?",
        "Options": [
            "a) Hash key = key mod table size",
            "b) Hash key=(hash(x)+F(i)) mod table size",
            "c) Hash key=(hash(x)+F(i2)) mod table size",
            "d) H(x) = x mod 17"
        ],
        "Answer": "Answer: a\nExplanation: Quadratic probing handles primary collision occurring in the linear probing method. Although secondary collision occurs in quadratic probing, it can be removed by extra multiplications and divisions."
    },
    {
        "id": 855,
        "Options": [
            "a) 1",
            "b) 2",
            "c) 7",
            "d) 6"
        ],
        "Answer": "Answer: b\nExplanation: Linear probing offers better cache performance than quadratic probing and also it preserves locality of reference."
    },
    {
        "id": 856,
        "Question": "Which scheme uses a randomization approach?",
        "Options": [
            "a) hashing by division",
            "b) hashing by multiplication",
            "c) universal hashing",
            "d) open addressing"
        ],
        "Answer": "Answer: c\nExplanation: Universal hashing scheme uses a randomization approach whereas hashing by division and hashing by multiplication are heuristic in nature."
    },
    {
        "id": 857,
        "Question": "Which hash function satisfies the condition of simple uniform hashing?",
        "Options": [
            "a) h(k) = lowerbound(km)",
            "b) h(k)= upperbound(mk)",
            "c) h(k)= lowerbound(k)",
            "d) h(k)= upperbound(k)"
        ],
        "Answer": "Answer: a\nExplanation: If the keys are known to be random real numbers k independently and uniformly distributed in the range 0<=k<=1, the hash function which satisfies the condition of simple uniform hashing is\n\t\th(k)= lowerbound(km)."
    },
    {
        "id": 858,
        "Options": [
            "a) 14963",
            "b) 14392",
            "c) 12784",
            "d) 14452"
        ],
        "Answer": "Answer: b\nExplanation: A hash value is expected to be unrelated or independent of any patterns in the distribution of keys."
    },
    {
        "id": 859,
        "Question": "What is the hash function used in the division method?",
        "Options": [
            "a) h(k) = k/m",
            "b) h(k) = k mod m",
            "c) h(k) = m/k",
            "d) h(k) = m  mod k"
        ],
        "Answer": "Answer: d\nExplanation: The given character string can be interpreted as (112,116) (Ascii values) then expressed as a radix-128 integer, hence the value is 112*128 + 116 = 14452."
    },
    {
        "id": 860,
        "Question": "What can be the value of m in the division method?",
        "Options": [
            "a) Any prime number",
            "b) Any even number",
            "c) 2p – 1",
            "d) 2p"
        ],
        "Answer": "Answer: b\nExplanation: In division method for creating hash functions,  k keys are mapped into one of m slots by taking the reminder of k divided by m."
    },
    {
        "id": 861,
        "Question": "Which scheme provides good performance?",
        "Options": [
            "a) open addressing",
            "b) universal hashing",
            "c) hashing by division",
            "d) hashing by multiplication"
        ],
        "Answer": "Answer: a\nExplanation: A prime number not too close to an exact power of 2 is often a good choice for m since it reduces the number of collisions which are likely to occur."
    },
    {
        "id": 862,
        "Question": "Using division method, in a given hash table of size 157, the key of value 172 be placed at position ____",
        "Options": [
            "a) 19",
            "b) 72",
            "c) 15",
            "d) 17"
        ],
        "Answer": "Answer: b\nExplanation: Universal hashing scheme provides better performance than other schemes because it uses a unique randomisation approach."
    },
    {
        "id": 863,
        "Question": "How many steps are involved in creating a hash function using a multiplication method?",
        "Options": [
            "a) 1",
            "b) 4",
            "c) 3",
            "d) 2"
        ],
        "Answer": "Answer: c\nExplanation: The key 172 can be placed at position 15 by using the formula\n\t\tH(k) = k mod m\n\t\tH(k) = 172 mod 157\n\t\tH(k) = 15."
    },
    {
        "id": 864,
        "Question": "What is the hash function used in multiplication method?",
        "Options": [
            "a) h(k) = floor( m(kA mod 1))",
            "b) h(k) = ceil( m(kA mod 1))",
            "c) h(k) = floor(kA mod m)",
            "d) h(k) = ceil( kA mod m)"
        ],
        "Answer": "Answer: d\nExplanation: In multiplication method 2 steps are involved. First multiplying the key value by a constant. Then multiplying this value by m."
    },
    {
        "id": 865,
        "Question": "What is the advantage of the multiplication method?",
        "Options": [
            "a) only 2 steps are involved",
            "b) using constant",
            "c) value of m not critical",
            "d) simple multiplication"
        ],
        "Answer": "Answer: a\nExplanation: The hash function can be computed by multiplying m with the fractional part of kA (kA mod 1) and then computing the floor value of the result."
    },
    {
        "id": 866,
        "Question": "What is the table size when the value of p is 7 in multiplication method of creating hash functions?",
        "Options": [
            "a) 14",
            "b) 128",
            "c) 49",
            "d) 127"
        ],
        "Answer": "Answer: c\nExplanation: The value of m can be simply in powers of 2 since we can easily implement the function in most computers. m=2p where p is an integer."
    },
    {
        "id": 867,
        "Question": "What is the average retrieval time when n keys hash to the same slot?",
        "Options": [
            "a) Theta(n)",
            "b) Theta(n2)",
            "c) Theta(nlog n)",
            "d) Big-Oh(n2)"
        ],
        "Answer": "Answer: b\nExplanation: In multiplication method of creating hash functions the table size can be taken in integral powers of 2.\n\t\tm = 2p\n\t\tm= 27\n\t\tm = 128."
    },
    {
        "id": 868,
        "Question": "What is the hash function used in Double Hashing?",
        "Options": [
            "a) (h1(k) – i*h2(k))mod m",
            "b) h1(k) + h2(k)",
            "c) (h1(k) + i*h2(k))mod m",
            "d) (h1(k) + h2(k))mod m"
        ],
        "Answer": "Answer: a\nExplanation: Double hashing is one of the best methods for open addressing because the permutations produced have many characteristics of randomly chosen permutations."
    },
    {
        "id": 869,
        "Question": "On what value does the probe sequence depend on?",
        "Options": [
            "a) c1",
            "b) k",
            "c) c2",
            "d) m"
        ],
        "Answer": "Answer: c\nExplanation: Double hashing uses a hash function of the form (h1(k) + i*h2(k))mod m where h1 and h2 are auxiliary hash functions and m is the size of the hash table."
    },
    {
        "id": 870,
        "Question": "Which technique has the greatest number of probe sequences?",
        "Options": [
            "a) Linear probing",
            "b) Quadratic probing",
            "c) Double hashing",
            "d) Closed hashing"
        ],
        "Answer": "Answer: b\nExplanation: The probe sequence depends in upon the key k since the initial probe position, the offset or both may vary."
    },
    {
        "id": 871,
        "Options": [
            "a) 3",
            "b) 10",
            "c) 4",
            "d) 6"
        ],
        "Answer": "Answer: b\nExplanation: The value h2(k) must be relatively prime to the hash table size m for the entire hash table to be searched. It can be ensured by having m in powers of 2 and designing h2 so that it produces an odd number."
    },
    {
        "id": 872,
        "Question": "",
        "Options": [
            "a) 2",
            "b) 9",
            "c) 4",
            "d) 8"
        ],
        "Answer": "Answer: d\nExplanation: The values h1(k) and h2(k) are k mod m and 1+(k mod m’) respectively where m is a prime number and m’ is chosen slightly less than m. (m’=m-1)."
    },
    {
        "id": 873,
        "Question": "What is the value of m’ if the value of m is 19?",
        "Options": [
            "a) 11",
            "b) 18",
            "c) 17",
            "d) 15"
        ],
        "Answer": "Answer: a\nExplanation: The running time of double hashing is Theta(m) since each possible (h1(k), h2(k)) pair yields a distinct probe sequence. Hence the performance of double hashing is better."
    },
    {
        "id": 874,
        "Question": "Hash tree is generalization of ______",
        "Options": [
            "a) Heap",
            "b) Hash list",
            "c) BST",
            "d) B – tree"
        ],
        "Answer": "Answer: b\nExplanation: Hash list is the list of hashes of the blocks in a set file. Hash tree is a generalization of the hash list in which leaves are labeled with the hash of a data block and every non-leaf node is hash of the labels of its children."
    },
    {
        "id": 875,
        "Question": "Which of the following is a widely used form of the hash tree?",
        "Options": [
            "a) B+ – tree",
            "b) T tree",
            "c) Tiger tree hash",
            "d) Htree"
        ],
        "Answer": "Answer: a\nExplanation: Hash trees are used in distributed systems for efficient data verification. Hash tree used hashes instead of the full files, hence they are efficient. Because Hashes are ways of encoding files that are much smaller than the actual file itself."
    },
    {
        "id": 876,
        "Question": "Which of the following is true for a Hash tree?",
        "Options": [
            "a) Hashing is used for sequential access",
            "b) Indexing is used for direct access",
            "c) Hash tree allows only sequential access",
            "d) Hashing is used for direct access"
        ],
        "Answer": " Answer: c\nExplanation: The general form the hash tree which is used widely is the Tiger tree hash. It uses a binary hash tree, usually has a data block size of 1024 bytes and uses the Tiger hash."
    },
    {
        "id": 877,
        "Question": "Hash tree is also known as _____",
        "Options": [
            "a) Merkle tree",
            "b) T -tree",
            "c) Hash table",
            "d) Bx-tree"
        ],
        "Answer": "Answer: d\nExplanation: Hash tree allows direct as well as sequential access of the records. Hashing is used for direct access and indexing is generally used for the sequential access."
    },
    {
        "id": 878,
        "Question": "What will be the height of the hash tree with branching factor 2 and with 8 records?",
        "Options": [
            "a) 3",
            "b) 5",
            "c) 4",
            "d) 6"
        ],
        "Answer": "Answer: a\nExplanation: Hash tree is generally known as Merkle tree after Ralph Merkle who patented it in 1979. Typically Merkle trees have a branching factor of 2, meaning that each node has up to 2 children."
    },
    {
        "id": 879,
        "Question": "Where is the hash tree used?",
        "Options": [
            "a) in digital currency",
            "b) in sorting of large data",
            "c) for indexing in databases",
            "d) in encryption of data"
        ],
        "Answer": "Answer: c\nExplanation: Consider 8 records A B C D E F G H. These records are stored in Hash tree in as shown in figure below.\n<img src=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/hash-tree-questions-answers-q6.png\" alt=\"hash-tree-questions-answers-q6\" width=\"528\" height=\"230\" class=\"alignnone size-full wp-image-218823\" srcset=\"https://www.sanfoundry.com/wp-content/uploads/2018/07/hash-tree-questions-answers-q6.png 528w, https://www.sanfoundry.com/wp-content/uploads/2018/07/hash-tree-questions-answers-q6-300x131.png 300w\" sizes=\"(max-width: 528px) 100vw, 528px\" />"
    },
    {
        "id": 880,
        "Question": "What is the worst case time complexity of the insertion in the hash tree?",
        "Options": [
            "a) O(logk(n))",
            "b) O(n2)",
            "c) O(nlogk(n))",
            "d) O(kn)"
        ],
        "Answer": "Answer: a\nExplanation: Using Hash tree the data verification, data synchronisation and the consistency verification can be done efficiently. So, the hash tree are digital currencies to organise the transactions."
    },
    {
        "id": 881,
        "Question": "Hash tree is used in data synchronisation. In the worst case the data synchronisation takes ______ time.",
        "Options": [
            "a) O(logn)",
            "b) O(n2)",
            "c) O(nlogn)",
            "d) O(n)"
        ],
        "Answer": "Answer: a\nExplanation: To insert a record in the hash tree the key is compressed and hashed to get the slot for the entry. So, a hash tree with branching factor k takes O(logk(n)) for insertion in worst case."
    },
    {
        "id": 882,
        "Question": "Which technique is used for finding similarity between two sets?",
        "Options": [
            "a) MinHash",
            "b) Stack",
            "c) Priority Queue",
            "d) PAT Tree"
        ],
        "Answer": "Answer: a\nExplanation: In computer science as well as data mining, to find the similarity between two given sets, a technique called MinHash or min-wise independent permutation scheme is used. It helps in the quick estimation of the similarity between two sets."
    },
    {
        "id": 883,
        "Question": "Who invented the MinHash technique?",
        "Options": [
            "a) Weiner",
            "b) Samuel F. B. Morse",
            "c) Friedrich Clemens Gerke",
            "d) Andrei Broder"
        ],
        "Answer": "Answer: d\nExplanation: In computer science as well as data mining, to find the similarity between two given sets, a technique called MinHash or min-wise independent permutation scheme is used. It helps in the quick estimation of the similarity between two sets. It was invented by Andrei Broder in 1997."
    },
    {
        "id": 884,
        "Question": "Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?",
        "Options": [
            "a) MinHash",
            "b) Stack",
            "c) Priority Queue",
            "d) PAT Tree"
        ],
        "Answer": "Answer: a\nExplanation: In computer science as well as data mining, to find the similarity between two given sets, a technique called MinHash or min-wise independent permutation scheme is used. It helps in the quick estimation of the similarity between two sets. It is used in removing duplicate web pages from search results in AltaVista search engine."
    },
    {
        "id": 885,
        "Question": "Which technique was firstly used clustering documents using the similarity of two words or strings?",
        "Options": [
            "a) MinHash",
            "b) Stack",
            "c) Priority Queue",
            "d) PAT Tree"
        ],
        "Answer": "Answer: a\nExplanation: In computer science as well as data mining, to find the similarity between two given sets, a technique called MinHash or min-wise independent permutation scheme is used. It helps in the quick estimation of similarity between two sets. It is used in clustering documents using the similarity of two words or strings."
    },
    {
        "id": 886,
        "Question": "Which indicator is used for similarity between two sets?",
        "Options": [
            "a) Rope Tree",
            "b) Jaccard Coefficient",
            "c) Tango Tree",
            "d) MinHash Coefficient"
        ],
        "Answer": "Answer: b\nExplanation: In computer science as well as data mining, to find the similarity between two given sets, a technique called MinHash or min-wise independent permutation scheme is used. It helps in the quick estimation of similarity between two sets. Jaccard Coefficient is used for similarity between two sets."
    },
    {
        "id": 887,
        "Question": "Which of the following is defined as the ratio of total elements of intersection and union of two sets?",
        "Options": [
            "a) Rope Tree",
            "b) Jaccard Coefficient Index",
            "c) Tango Tree",
            "d) MinHash Coefficient"
        ],
        "Answer": "Answer: b\nExplanation: MinHash helps in the quick estimation of similarity between two sets. Jaccard Coefficient is used for similarity between two sets. Jaccard Coefficient Index is defined as the ratio of total elements of intersection and union of two sets."
    },
    {
        "id": 888,
        "Question": "What is the value of the Jaccard index when the two sets are disjoint?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: d\nExplanation: MinHash helps in the quick estimation of similarity between two sets. Jaccard Coefficient is used for the similarity between two sets. Jaccard Coefficient Index is defined as the ratio of total elements of intersection and union of two sets. For two disjoint sets, the value of the Jaccard index is zero."
    },
    {
        "id": 889,
        "Question": "When are the members of two sets more common relatively?",
        "Options": [
            "a) Jaccard Index is Closer to 1",
            "b) Jaccard Index is Closer to 0",
            "c) Jaccard Index is Closer to -1",
            "d) Jaccard Index is Farther to 1"
        ],
        "Answer": "Answer: a\nExplanation: Jaccard Coefficient Index is defined as the ratio of total elements of intersection and union of two sets. For two disjoint sets, the value of the Jaccard index is zero. The members of two set more common relatively when the Jaccard Index is Closer to 1."
    },
    {
        "id": 890,
        "Question": "What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?",
        "Options": [
            "a) O (log k!)",
            "b) O (k!)",
            "c) O (k2)",
            "d) O (1/k½)"
        ],
        "Answer": "Answer: d\nExplanation: Jaccard Coefficient Index is defined as the ratio of total elements of intersection and union of two sets. For two disjoint sets, the value of the Jaccard index is zero. The expected error for estimating the Jaccard index using MinHash scheme for k different hash functions is O (1/k½)."
    },
    {
        "id": 891,
        "Question": "How many hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05?",
        "Options": [
            "a) 100",
            "b) 200",
            "c) 300",
            "d) 400"
        ],
        "Answer": "Answer: d\nExplanation: The expected error for estimating the Jaccard index using MinHash scheme for k different hash functions is O (1/k½). 400 hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05."
    },
    {
        "id": 892,
        "Question": "What is the expected error by the estimator Chernoff bound on the samples performed without replacement?",
        "Options": [
            "a) O (log k!)",
            "b) O (k!)",
            "c) O (k2)",
            "d) O (1/k½)"
        ],
        "Answer": "Answer: d\nExplanation: The expected error for estimating the Jaccard index using MinHash scheme for k different hash functions is O (1/k½). The expected error by the estimator Chernoff bound on the samples performed without replacement is O (1/k½)."
    },
    {
        "id": 893,
        "Question": "What is the time required for single variant hashing to maintain the minimum hash queue?",
        "Options": [
            "a) O (log n!)",
            "b) O (n!)",
            "c) O (n2)",
            "d) O (n)"
        ],
        "Answer": "Answer: d\nExplanation: The expected error for estimating the Jaccard index using MinHash scheme for k different hash functions is O (1/k½). The time required for single variant hashing to maintain the minimum hash queue is O (n)."
    },
    {
        "id": 894,
        "Question": "How many bits are needed to specify the single permutation by min-wise independent family?",
        "Options": [
            "a) O (log n!)",
            "b) O (n!)",
            "c) Ω (n2)",
            "d) Ω (n)"
        ],
        "Answer": "Answer: d\nExplanation: The time required for single variant hashing to maintain the minimum hash queue is O (n). Ω (n) bits are needed to specify the single permutation by min-wise independent family."
    },
    {
        "id": 895,
        "Question": "What is direct addressing?",
        "Options": [
            "a) Distinct array position for every possible key",
            "b) Fewer array positions than keys",
            "c) Fewer keys than array positions",
            "d) Distinct array positions for keys based on priority"
        ],
        "Answer": "Answer: a\nExplanation: Direct addressing is possible only when we can afford to allocate an array that has one position for every possible key."
    },
    {
        "id": 896,
        "Question": "When is it appropriate to use direct addressing?",
        "Options": [
            "a) When the array is comparatively large",
            "b) When the universe U of keys is reasonably small",
            "c) When the universe U of keys is reasonably large",
            "d) When the array is comparatively small"
        ],
        "Answer": "Answer: b\nExplanation: Since each key is associated with a slot in the array, it is better to use direct addressing when the universe of keys is small as the array size grows with the increase in number of keys."
    },
    {
        "id": 897,
        "Question": "What is the search complexity in direct addressing?",
        "Options": [
            "a) O(n)",
            "b) O(logn)",
            "c) O(nlogn)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: Since every key has a unique array position, searching takes a constant time."
    },
    {
        "id": 898,
        "Question": "What is the time complexity to insert an element into the direct address table?",
        "Options": [
            "a) O(n)",
            "b) O(logn)",
            "c) O(nlogn)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: As every key has a unique array position, it takes constant time to insert an element."
    },
    {
        "id": 899,
        "Question": "What is the advantage of using a dynamic set in direct addressing?",
        "Options": [
            "a) It saves time",
            "b) It saves space",
            "c) It saves both time and space",
            "d) It reduces code complexity"
        ],
        "Answer": "Answer: b\nExplanation: Using a dynamic set, the size of the array is restricted to the number of keys, hence saves space. The complexity to implement dynamic array is larger than in normal case. "
    },
    {
        "id": 900,
        "Question": "What is the time complexity to delete an element from the direct address table?",
        "Options": [
            "a) O(n)",
            "b) O(logn)",
            "c) O(nlogn)",
            "d) O(1)"
        ],
        "Answer": "Answer: d\nExplanation: As every key has a unique array position, it takes constant time to delete an element, although the deleted position must be specified by nil."
    },
    {
        "id": 901,
        "Question": "How is a bit vector better compared to a normal array for implementing the hash table?",
        "Options": [
            "a) It saves time",
            "b) It saves space",
            "c) It saves both time and space",
            "d) It reduces code complexity"
        ],
        "Answer": "Answer: b\nExplanation: A bit vector is an array of bits of only 0s and 1s, a bit vector of length m takes much less space than an array of m pointers. The complexity to implement bit vector is larger than in normal case. "
    },
    {
        "id": 902,
        "Question": "Which of the following statements for a simple graph is correct?",
        "Options": [
            "a) Every path is a trail",
            "b) Every trail is a path",
            "c) Every trail is a path as well as every path is a trail",
            "d) Path and trail have no relation"
        ],
        "Answer": "Answer: a\nExplanation: In a walk if the vertices are distinct it is called a path, whereas if the edges are distinct it is called a trail."
    },
    {
        "id": 903,
        "Question": " What is the number of edges present in a complete graph having n vertices?",
        "Options": [
            "a) (n*(n+1))/2",
            "b) (n*(n-1))/2",
            "c) n",
            "d) Information given is insufficient"
        ],
        "Answer": "Answer: d\nExplanation: After removing either B or C, the graph becomes disconnected."
    },
    {
        "id": 904,
        "Options": [
            "5. The given Graph is regular.",
            "<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-graph-q5.png\" alt=\"data-structure-questions-answers-graph-q5\" width=\"293\" height=\"186\" class=\"alignnone size-full wp-image-174355\" />",
            "a) True",
            "b) False"
        ],
        "Answer": "Answer: c\nExplanation: After removing vertices B and C, the graph becomes disconnected."
    },
    {
        "id": 905,
        "Question": "A connected planar graph having 6 vertices, 7 edges contains _____________ regions.",
        "Options": [
            "a) 15",
            "b) 3",
            "c) 1",
            "d) 11"
        ],
        "Answer": "Answer: b\nExplanation: Number of ways in which every vertex can be connected to each other is nC2. "
    },
    {
        "id": 906,
        "Question": "If a simple graph G, contains n vertices and m edges, the number of edges in the Graph G'(Complement of G) is  ___________",
        "Options": [
            "a) (n*n-n-2*m)/2",
            "b) (n*n+n+2*m)/2",
            "c) (n*n-n-2*m)/2",
            "d) (n*n-n+2*m)/2"
        ],
        "Answer": "Answer: a\nExplanation:  In a regular graph, degrees of all the vertices are equal. In the given \tgraph the degree of every vertex is 3."
    },
    {
        "id": 907,
        "Question": "Which of the following properties does a simple graph not hold?",
        "Options": [
            "a) Must be connected",
            "b) Must be unweighted",
            "c) Must have no loops or multiple edges",
            "d) Must have no multiple edges"
        ],
        "Answer": "Answer: b\nExplanation: The sum of the degrees of the vertices is equal to twice the number of edges."
    },
    {
        "id": 908,
        "Question": "What is the maximum number of edges in a bipartite graph having 10 \tvertices?",
        "Options": [
            "a) 24",
            "b) 21",
            "c) 25",
            "d) 16"
        ],
        "Answer": "Answer: b\nExplanation: By euler’s formula the relation between vertices(n), edges(q) and \tregions(r) is given by n-q+r=2. "
    },
    {
        "id": 909,
        "Question": "Which of the following is true?",
        "Options": [
            "a) A graph may contain no edges and many vertices",
            "b) A graph may contain many edges and no vertices",
            "c) A graph may contain no edges and no vertices",
            "d) A graph may contain no vertices and many edges"
        ],
        "Answer": "Answer: a\nExplanation: The union of G and G’ would be a complete graph so, the number of \tedges in G’= number of edges in the complete form of G(nC2)-edges in G(m)."
    },
    {
        "id": 910,
        "Question": "For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is true?",
        "Options": [
            "a) v=e",
            "b) v = e+1",
            "c) v + 1 = e",
            "d) v = e-1"
        ],
        "Answer": "Answer: a\nExplanation: A simple graph maybe connected or disconnected."
    },
    {
        "id": 911,
        "Question": "For which of the following combinations of the degrees of vertices would the connected graph be eulerian?",
        "Options": [
            "a) 1,2,3",
            "b) 2,3,4",
            "c) 2,4,5",
            "d) 1,3,5"
        ],
        "Answer": "Answer: c\nExplanation: Let one set have n vertices another set would contain 10-n vertices.\nTotal number of edges would be n*(10-n), differentiating with respect to n, would yield the answer. "
    },
    {
        "id": 912,
        "Question": "A graph with all vertices having equal degree is known as a __________",
        "Options": [
            "a) Multi Graph",
            "b) Regular Graph",
            "c) Simple Graph",
            "d) Complete Graph"
        ],
        "Answer": "Answer: b\nExplanation: A graph must contain at least one vertex. "
    },
    {
        "id": 913,
        "Question": "Which of the following ways can be used to represent a graph?",
        "Options": [
            "a) Adjacency List and Adjacency Matrix",
            "b) Incidence Matrix",
            "c) Adjacency List, Adjacency Matrix as well as Incidence Matrix",
            "d) No way to represent"
        ],
        "Answer": "Answer: b\nExplanation: For any connected graph with no cycles the equation holds true. "
    },
    {
        "id": 914,
        "Question": "The number of elements in the adjacency matrix of a graph having 7 vertices is __________",
        "Options": [
            "a) 7",
            "b) 14",
            "c) 36",
            "d) 49"
        ],
        "Answer": "Answer: d\nExplanation: There are n*n elements in the adjacency matrix of a graph with n vertices."
    },
    {
        "id": 915,
        "Question": "The time complexity to calculate the number of edges in a graph whose information in stored in form of an adjacency matrix is ____________",
        "Options": [
            "a) O(V)",
            "b) O(E2)",
            "c) O(E)",
            "d) O(V2)"
        ],
        "Answer": "Answer: b\nExplanation: Total number of values in the matrix is 4*4=16, out of which 6 entries are non zero."
    },
    {
        "id": 916,
        "Question": "For the adjacency matrix of a directed graph the row sum is the _________ degree and the column sum is the ________ degree.",
        "Options": [
            "a) in, out",
            "b) out, in",
            "c) in, total",
            "d) total, out"
        ],
        "Answer": "Answer: a\nExplanation: Only undirected graphs produce symmetric adjacency matrices."
    },
    {
        "id": 917,
        "Question": "What is the maximum number of possible non zero values in an adjacency matrix of a simple graph with n vertices?",
        "Options": [
            "a) (n*(n-1))/2",
            "b) (n*(n+1))/2",
            "c) n*(n-1)",
            "d) n*(n+1)"
        ],
        "Answer": "Answer: d\nExplanation: As V entries are 0, a total of V2-V entries are to be examined."
    },
    {
        "id": 918,
        "Question": "On which of the following statements does the time complexity of checking if an edge exists between two particular vertices is not, depends?",
        "Options": [
            "a) Depends on the number of edges",
            "b) Depends on the number of vertices",
            "c) Is independent of both the number of edges and vertices",
            "d) It depends on both the number of edges and vertices"
        ],
        "Answer": "Answer: b\nExplanation: Row number of the matrix represents the tail, while Column number represents the head of the edge."
    },
    {
        "id": 919,
        "Question": "In the given connected graph G, what is the value of rad(G) and diam(G)?",
        "Options": [
            "a) 2, 3",
            "b) 3, 2",
            "c) 2, 2",
            "d) 3, 3"
        ],
        "Answer": "Answer: c\nExplanation: Out of n*n possible values for a simple graph the diagonal values will always be zero."
    },
    {
        "id": 920,
        "Question": "Which of these adjacency matrices represents a simple graph?",
        "Options": [
            "a) [ [1, 0, 0], [0, 1, 0], [0, 1, 1] ] ",
            "b) [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] ",
            "c) [ [0, 0, 1], [0, 0, 0], [0, 0, 1] ] ",
            "d) [ [0, 0, 1], [1, 0, 1], [1, 0, 0] ]"
        ],
        "Answer": "Answer: c\nExplanation: To check if there is an edge between to vertices i and j, it is enough to see if the value of A[i][j] is 1 or 0, here A is the adjacency matrix."
    },
    {
        "id": 921,
        "Question": "Given an adjacency matrix A = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ], The total no. of ways in which every vertex can walk to itself using 2 edges is ________",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: Value of eccentricity for vertices A, C is 2 whereas for F, B, D, E it is 3."
    },
    {
        "id": 922,
        "Question": "If A[x+3][y+5] represents an adjacency matrix, which of these could be the value of x and y.",
        "Options": [
            "a) x=5, y=3",
            "b) x=3, y=5",
            "c) x=3, y=3",
            "d) x=5, y=5"
        ],
        "Answer": "Answer: d\nExplanation: A simple graph must have no-self loops, should be undirected."
    },
    {
        "id": 923,
        "Question": "Input Sequence:-<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">9 \n0 1 0 0 0 0 0 0 1    \n1 0 0 0 0 0 0 0 0 \n0 0 0 1 1 1 0 0 1 \n0 0 1 0 0 0 0 0 0 \n0 0 1 0 0 0 0 1 0 \n0 0 1 0 0 0 1 0 0 \n0 0 0 0 0 1 0 1 1 \n0 0 0 0 1 0 1 0 0 \n1 0 1 0 0 0 1 0 0</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 6",
            "c) 8",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: A2 = [ [2, 1, 1], [1, 2, 1], [1, 1, 2] ], all the 3 vertices can reach to themselves in 2 ways, hence a total of 3*2, 6 ways."
    },
    {
        "id": 924,
        "Question": "14. For which type of graph, the given program won’t run infinitely? The Input would be in the form of an adjacency Matrix and n is its dimension (1<n<10).<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;bits/stdc++.h&gt; </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> G<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> \n<span class=\"kw4\">void</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> num<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n\t<span class=\"kw4\">int</span> n<span class=\"sy4\">;</span> \n\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>n<span class=\"sy4\">;</span> \n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>n<span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n \t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>j<span class=\"sy1\">&lt;</span>n<span class=\"sy4\">;</span>j<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        \t\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>G<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span> \n    \tfun<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span>\t \n&nbsp;\n<span class=\"kw4\">void</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span> \n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>n<span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>j<span class=\"sy1\">&lt;</span>n<span class=\"sy4\">;</span>j<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>G<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \n\tj<span class=\"sy2\">--</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) All Fully Connected Graphs",
            "b) All Empty Graphs",
            "c) All Bipartite Graphs",
            "d) All simple graphs"
        ],
        "Answer": "Answer: a\nExplanation: All adjacency matrices are square matrices."
    },
    {
        "id": 925,
        "Question": "15. Given the following adjacency matrix of a graph(G) determine the number of \tcomponents in the G.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">[0 1 1 0 0 0], \n[1 0 1 0 0 0],\n[1 1 0 0 0 0],\n[0 0 0 0 1 0],\n[0 0 0 1 0 0],\n[0 0 0 0 0 0].</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: This is a property of isomorphic graphs."
    },
    {
        "id": 926,
        "Question": "The column sum in an incidence matrix for a simple graph is __________",
        "Options": [
            "a) depends on number of edges",
            "b) always greater than 2",
            "c) equal to 2",
            "d) equal to the number of edges"
        ],
        "Answer": "Answer: b\nExplanation:  For a graph having V vertices and E edges, Adjacency matrix have \tV*V elements while Incidence matrix have V*E elements. "
    },
    {
        "id": 927,
        "Question": "What are the dimensions of an incidence matrix?",
        "Options": [
            "a) Number of edges*number of edges",
            "b) Number of edges*number of vertices",
            "c) Number of vertices*number of vertices",
            "d) Number of edges * (1⁄2 * number of vertices)"
        ],
        "Answer": "Answer: c\nExplanation: For every edge only the vertices with which it is connected would have the value 1 in the matrix, as an edge connects two vertices sum will always be 2."
    },
    {
        "id": 928,
        "Question": "The column sum in an incidence matrix for a directed graph having no self loop is __________",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) equal to the number of edges"
        ],
        "Answer": "Answer: b\nExplanation: Columns may represent edges and vertices may be represented by the rows.\n"
    },
    {
        "id": 929,
        "Question": "Time complexity to check if an edge exists between two vertices would be ___________",
        "Options": [
            "a) O(V*V)",
            "b) O(V+E)",
            "c) O(1)",
            "d) O(E)"
        ],
        "Answer": "Answer: a\nExplanation: Under every edge column there would be either all 0 values or a pair of -1 and +1 value exists."
    },
    {
        "id": 930,
        "Question": "If a connected Graph (G) contains n vertices what would be the rank of its incidence matrix?",
        "Options": [
            "a) n-1",
            "b) values greater than n are possible",
            "c) values less than n-1 are possible",
            "d) insufficient Information is given"
        ],
        "Answer": "Answer: d\nExplanation: We have to check for all edges, in the worst case the vertices will have no common edge."
    },
    {
        "id": 931,
        "Question": "A Graph Structured Stack is a _____________",
        "Options": [
            "a) Undirected Graph",
            "b) Directed Graph",
            "c) Directed Acyclic Graph",
            "d) Regular Graph"
        ],
        "Answer": "Answer: a\nExplanation: Two graphs are isomorphic if their Incidence Matrices differ only by permutation of columns and rows."
    },
    {
        "id": 932,
        "Question": "If a Graph Structured Stack contains {1,2,3,4} {1,5,3,4} {1,6,7,4} and {8,9,7,4}, what would be the source and sink vertices of the DAC?",
        "Options": [
            "a) Source – 1, 8 Sink – 7,4",
            "b) Source – 1 Sink – 8,4",
            "c) Source – 1, 8 Sink – 4",
            "d) Source – 4, Sink – 1,8"
        ],
        "Answer": "Answer: a\nExplanation: Every column of the incidence matrix may contain only +1 and -1 as non zero entries rank would be less than n."
    },
    {
        "id": 933,
        "Question": "Graph Structured Stack finds its application in _____________",
        "Options": [
            "a) Bogo Sort",
            "b) Tomita’s Algorithm",
            "c) Todd–Coxeter algorithm",
            "d) Heap Sort"
        ],
        "Answer": "Answer: c\nExplanation: Path ADE, BDE and BCE are possible."
    },
    {
        "id": 934,
        "Question": "Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is ___________",
        "Options": [
            "a) O(E)",
            "b) O(V*V)",
            "c) O(E+V)",
            "d) O(V)"
        ],
        "Answer": "Answer: c\nExplanation: In an adjacency list for every vertex there is a linked list which have the values of the edges to which it is connected. "
    },
    {
        "id": 935,
        "Question": "Time complexity to find if there is an edge between 2 particular vertices is _________",
        "Options": [
            "a) O(V)",
            "b) O(E)",
            "c) O(1)",
            "d) O(V+E)"
        ],
        "Answer": "Answer: a\nExplanation: Space complexity for adjacency matrix is always O(V*V) while space complexity for adjacency list in this case would be O(V). "
    },
    {
        "id": 936,
        "Question": "Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is __________",
        "Options": [
            "a) O(V)",
            "b) O(E*E)",
            "c) O(E)",
            "d) O(E+V)"
        ],
        "Answer": "Answer: a\nExplanation: The maximum edges a vertex can have is V-1. "
    },
    {
        "id": 937,
        "Question": "6. Complete the given snippet of code for the adjacency list representation of a weighted directed graph.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">\t<span class=\"kw2\">class</span> neighbor\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">int</span> vertex, weight<span class=\"sy4\">;</span>\n\t\t____ next<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw2\">class</span> vertex\n        <span class=\"br0\">{</span>\n\t\tstring name<span class=\"sy4\">;</span>\n\t\t_____ adjlist<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\tvertex adjlists<span class=\"br0\">[</span><span class=\"nu0\">101</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) vertex, vertex",
            "b) neighbor, vertex",
            "c) neighbor, neighbor",
            "d) vertex, neighbor"
        ],
        "Answer": "Answer: a\nExplanation: i) takes v+4e, ii) takes v+2e, iii) takes v+3e, iv) takes v +6e space. "
    },
    {
        "id": 938,
        "Question": "In which case adjacency list is preferred in front of an adjacency matrix?",
        "Options": [
            "a) Dense graph",
            "b) Sparse graph",
            "c) Adjacency list is always preferred",
            "d) Complete graph"
        ],
        "Answer": "Answer: c\nExplanation: In an adjacency list for every vertex there is a linked list which have the values of the edges to which it is connected."
    },
    {
        "id": 939,
        "Question": "9. What would be the time complexity of the following function which adds an edge between two vertices i and j, with some weight ‘weigh’ to the graph having V vertices?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> adjacent<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"sy4\">;</span>\nvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> weight<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">void</span> addEdge<span class=\"br0\">(</span><span class=\"kw4\">int</span> i,<span class=\"kw4\">int</span> j,<span class=\"kw4\">int</span> weigh<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\t \n\tadjacent<span class=\"br0\">[</span>a<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n\tadjacent<span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n\tweight<span class=\"br0\">[</span>a<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>weigh<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n\tweight<span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>weigh<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) O(1)",
            "b) O(V)",
            "c) O(V*V)",
            "d) O(log V)"
        ],
        "Answer": "Answer: c\nExplanation: Vertex would have a name and a linked list attached to it. "
    },
    {
        "id": 940,
        "Question": "What would be the time complexity of the BFS traversal of a  graph with n vertices and n1.25 edges?",
        "Options": [
            "a) O(n)",
            "b) O(n1.25)",
            "c) O(n2.25)",
            "d) O(n*n)"
        ],
        "Answer": "Answer: b\nExplanation: In case of sparse graph most of the entries in the adjacency matrix would be 0, hence adjacency list would be preferred."
    },
    {
        "id": 941,
        "Question": " The number of possible undirected graphs which may have self loops but no multiple edges and have n vertices  is ________",
        "Options": [
            "a) 2((n*(n-1))/2)",
            "b) 2((n*(n+1))/2)",
            "c) 2((n-1)*(n-1))/2)",
            "d) 2((n*n)/2)"
        ],
        "Answer": "Answer: d\nExplanation: There can be at most, n*n edges in an undirected graph. "
    },
    {
        "id": 942,
        "Question": "Given a plane graph, G having 2 connected component, having 6 vertices, 7 edges and 4 regions. What will be the number of connected components?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Euler’s Identity says V – E + R  = 1+ number of connected components. "
    },
    {
        "id": 943,
        "Question": "Number of vertices with odd degrees in a graph having a eulerian  walk is ________",
        "Options": [
            "a) 0",
            "b) Can’t be predicted",
            "c) 2",
            "d) either 0 or 2"
        ],
        "Answer": "Answer: d\nExplanation: If the start and end vertices for the path are same the answer would be 0 otherwise 2. "
    },
    {
        "id": 944,
        "Question": "What is the number of vertices of degree 2 in a path graph having n vertices,here n>2.",
        "Options": [
            "a) n-2",
            "b) n",
            "c) 2",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: Statements iii) and v) are correct. "
    },
    {
        "id": 945,
        "Question": "What would the  time complexity to check if an undirected graph with V vertices and E edges is Bipartite or not given its adjacency matrix?",
        "Options": [
            "a) O(E*E)",
            "b) O(V*V)",
            "c) O(E)",
            "d) O(V)"
        ],
        "Answer": "Answer: b\nExplanation: Only paths and even cycles are bipartite graphs."
    },
    {
        "id": 946,
        "Question": "A graph having an edge from each vertex to every other vertex is called a ___________",
        "Options": [
            "a) Tightly Connected",
            "b) Strongly Connected",
            "c) Weakly Connected",
            "d) Loosely Connected"
        ],
        "Answer": "Answer: b\nExplanation: Dijkstra’s Algorithm assumes all weights to be non-negative."
    },
    {
        "id": 947,
        "Question": "What is the number of unlabeled simple directed graph that can be made with 1 or 2 vertices?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 5",
            "d) 9"
        ],
        "Answer": "Answer: a\nExplanation: This is a part of the nomenclature followed in Graph Theory."
    },
    {
        "id": 948,
        "Question": "Floyd Warshall Algorithm used to solve the shortest path problem has a time complexity of __________",
        "Options": [
            "a) O(V*V)",
            "b) O(V*V*V)",
            "c) O(E*V)",
            "d) O(E*E)"
        ],
        "Answer": "Answer: b\nExplanation:<img src=\"https://www.sanfoundry.com/wp-content/uploads/2017/08/data-structure-questions-answers-directed-graph-q3.png\" alt=\"data-structure-questions-answers-directed-graph-q3\" width=\"300\" height=\"40\" class=\"alignnone size-full wp-image-174369\" />"
    },
    {
        "id": 949,
        "Question": "Assuming value of every weight to be greater than 10, in which of the following cases the shortest path of a directed weighted graph from 2 vertices u and v will never change?",
        "Options": [
            "a) add all values by 10",
            "b) subtract 10 from all the values",
            "c) multiply all values by 10",
            "d) in both the cases of multiplying and adding by 10"
        ],
        "Answer": "Answer: b\nExplanation: The Algorithm uses Dynamic Programming and checks for every possible path."
    },
    {
        "id": 950,
        "Question": "What is the maximum possible number of edges in a directed graph with no self loops having 8 vertices?",
        "Options": [
            "a) 28",
            "b) 64",
            "c) 256",
            "d) 56"
        ],
        "Answer": "Answer: b\nExplanation: Same Graph may be drawn in different ways on paper."
    },
    {
        "id": 951,
        "Question": "What is the maximum number of edges present in a simple directed graph with 7 vertices if there exists no cycles in the graph?",
        "Options": [
            "a) 21",
            "b) 7",
            "c) 6",
            "d) 49"
        ],
        "Answer": "Answer: d\nExplanation: If a graph has V vertices than every vertex can be connected to a \tpossible of V-1 vertices."
    },
    {
        "id": 952,
        "Question": "With V(greater than 1) vertices, how many edges at most can a Directed Acyclic Graph possess?",
        "Options": [
            "a) (V*(V-1))/2",
            "b) (V*(V+1))/2",
            "c) (V+1)C2",
            "d) (V-1)C2"
        ],
        "Answer": "Answer: a\nExplanation: A sink vertex is a vertex which has an outgoing degree of zero."
    },
    {
        "id": 953,
        "Question": "The topological sorting of any DAG can be done in ________ time.",
        "Options": [
            "a) cubic",
            "b) quadratic",
            "c) linear",
            "d) logarithmic"
        ],
        "Answer": "Answer: d\nExplanation: Topological sorting is a linear arrangement of vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering. In A B C D F E, F comes before E in ordering. "
    },
    {
        "id": 954,
        "Question": "If there are more than 1 topological sorting of a DAG is possible, which of the following is true.",
        "Options": [
            "a) Many Hamiltonian paths are possible",
            "b) No Hamiltonian path is possible",
            "c) Exactly 1 Hamiltonian path is possible",
            "d) Given information is insufficient to comment anything"
        ],
        "Answer": "Answer: a\nExplanation: The first edge would have an outgoing degree of atmost V-1, the next edge would have V-2 and so on, hence V-1 + V-2…. +1 equals (V*(V-1))/2."
    },
    {
        "id": 955,
        "Question": "7. What would be the output of the following C++ program if the given input is<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>\n<span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>\n<span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>\n<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>\n<span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>\n&nbsp;\n<span class=\"co2\">#include &lt;bits/stdc++.h&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">bool</span> visited<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> G<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n\tvisited<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"kw2\">true</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>j<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span>j<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>visited<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy3\">&amp;&amp;</span>G<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n\t\t\tfun<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>   \n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>j<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span>j<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>G<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n&nbsp;\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\tvisited<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n&nbsp;\n\tfun<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0 2 3 1 4",
            "b) 0 3 2 4 1",
            "c) 0  2 3 4 1",
            "d) 0 3 2 1 4"
        ],
        "Answer": "Answer: c\nExplanation: Topological sorting can be done in O(V+E), here V and E represents number of vertices and number of edges respectively."
    },
    {
        "id": 956,
        "Question": "Which of the given statement is true?",
        "Options": [
            "a) All the Cyclic Directed Graphs have topological sortings",
            "b) All the Acyclic Directed Graphs have topological sortings",
            "c) All Directed Graphs have topological sortings",
            "d) All the cyclic directed graphs hace non topological sortings"
        ],
        "Answer": "Answer: b\nExplanation: For a Hamiltonian path to exist all the vertices must be connected with a path, had that happened there would have been a unique topological sort. "
    },
    {
        "id": 957,
        "Question": "What is the value of the sum of the minimum in-degree and maximum out-degree of an Directed Acyclic Graph?",
        "Options": [
            "a) Depends on a Graph",
            "b) Will always be zero",
            "c) Will always be greater than zero",
            "d) May be zero or greater than zero"
        ],
        "Answer": "Answer: c\nExplanation: In BFS nodes gets explored and then the neighbors of the current node gets explored, before moving on to the next levels."
    },
    {
        "id": 958,
        "Question": "In which of the following does a Directed Acyclic Word Graph finds its application in?",
        "Options": [
            "a) String Matching",
            "b) Number Sorting",
            "c) Manipulations on numbers",
            "d) Pattern Printing"
        ],
        "Answer": "Answer: a\nExplanation: A Directed Acyclic Word Graph is similar to suffix tree, it can be\tviewed as a Deterministic Finite Automata."
    },
    {
        "id": 959,
        "Question": "What is time complexity to check if a string(length S1) is a substring of another string(length S2) stored in a Directed Acyclic Word Graph, given S2 is greater than S1?",
        "Options": [
            "a) O(S1)",
            "b) O(S2)",
            "c) O(S1+S2)",
            "d) O(1)"
        ],
        "Answer": "Answer: b\nExplanation: Words namely BATS, BOTS, BAT and BOT can be formed."
    },
    {
        "id": 960,
        "Question": "In which of the following case does a Propositional Directed Acyclic Graph is used for?",
        "Options": [
            "a) Representation of Boolean Functions",
            "b) String Matching",
            "c) Searching",
            "d) Sorting of number"
        ],
        "Answer": "Answer: a\nExplanation: Starting from the initial state and choosing B, A, T, S respectively."
    },
    {
        "id": 961,
        "Options": [
            "a) iv) and v)",
            "b) iii) iv) and v)",
            "c) i) and ii)",
            "d) i) and iii)"
        ],
        "Answer": "Answer: a\nExplanation: For each check of a word of length  S1, we need to follow at most S1 edges."
    },
    {
        "id": 962,
        "Question": "",
        "Options": [
            "a) iv) and v)",
            "b) v)",
            "c) i) and iii)",
            "d) iii)"
        ],
        "Answer": "Answer: a\nExplanation: A Propositional Directed Acyclic Graph is used to represent a boolean function."
    },
    {
        "id": 963,
        "Question": "",
        "Options": [
            "a) iv) and v)",
            "b) v)",
            "c) i) and iii)",
            "d) ii)"
        ],
        "Answer": "Answer: c\nExplanation: The symbols Δ and ◊ represents logical AND and OR gates."
    },
    {
        "id": 964,
        "Question": "Which of the following statement is true.",
        "Options": [
            "a) There exists a Simple Graph having 10 vertices such that minimum degree of the graph is 0 and maximum degree is 9",
            "b) There exists a MultiGraph having 10 vertices such that minimum degree of the graph is 0 and maximum degree is 9",
            "c) There exists a MultiGraph as well as a Simple Graph having 10 vertices such \tthat minimum degree of the graph is 0 and maximum degree is 9",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In i) self loops exist for both the vertices, in iii) self loop exists in the second vertex."
    },
    {
        "id": 965,
        "Question": "Possible number of labelled simple Directed, Pseudo and Multigarphs \texist having 2 vertices?",
        "Options": [
            "a) 3, Infinite, 4",
            "b) 4, 3, Infinite",
            "c) 4, Infinite, infinite",
            "d) 4, Infinite, Infinite"
        ],
        "Answer": "Answer: a\nExplanation: Only graphs with every vertex having even degree have eulerian circuits or cycles.\n\t"
    },
    {
        "id": 966,
        "Question": "Which of the following is a HyperGraph, where V is the set of vertices, E is the set of edges?",
        "Options": [
            "a) V = {v1, v2, v3} E = {e1, e2} = {{v2, v3} {v1, v3}}",
            "b) V = {v1, v2} E = {e1} = {{v1, v2}}",
            "c) V = {v1, v2, v3} E = {e1, e2, e3} = {{v2, v3}{v3, v1}{v2, v1}}",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Sum of degrees of all the edges equal to 2 times the number of edges. 2*12=4*n, n=>6.\n"
    },
    {
        "id": 967,
        "Question": "Binary Decision Diagram is a type of __________",
        "Options": [
            "a) Multigraph",
            "b) Cyclic Graph",
            "c) Directed Acyclic Graph",
            "d) Directed Acyclic Word Graph"
        ],
        "Answer": "Answer: c\nExplanation: An Inverter is a directed graph which is used to solve Boolean expressions, hence have no loops."
    },
    {
        "id": 968,
        "Question": "In which of the following case does a Binary Decision Diagram is used for?",
        "Options": [
            "a) Representation of Boolean Functions",
            "b) String Matching",
            "c) Searching",
            "d) Sorting of number"
        ],
        "Answer": "Answer: a\nExplanation: A Binary Decision Diagram is used to represent a Boolean function. "
    },
    {
        "id": 969,
        "Question": "In a Binary Decision Diagram, how many types of terminal exists?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: In a BDD, 2 terminals namely terminal-0 and terminal-1 exists."
    },
    {
        "id": 970,
        "Question": "In a Binary Decision  Diagrams 0 values by a _________ line and the 1 values are represented by a _________ line.",
        "Options": [
            "a) dashed, bold",
            "b) bold, dashed",
            "c) dotted, bold",
            "d) dotted, dashed"
        ],
        "Answer": "Answer: c\nExplanation: It is used to distinguish between the 2 values without explicitly writing."
    },
    {
        "id": 971,
        "Question": "How many nodes are required to create a Binary Decision Tree having 4 variables?",
        "Options": [
            "a) 24",
            "b) 24-1",
            "c) 25",
            "d) 25-1"
        ],
        "Answer": "Answer: d\nExplanation: Binary Decision Trees are complete Binary Trees of level V + 1, here V is the number of variables."
    },
    {
        "id": 972,
        "Question": "Size of an And Inverter Graph is the number of _______ gates and the number of logic levels is number of ________ gates on the __________ path from a primary input to a primary output.",
        "Options": [
            "a) AND, AND, average",
            "b) AND, OR, longest",
            "c) OR, OR, shortest",
            "d) AND, AND, longest"
        ],
        "Answer": "Answer: a\nExplanation: And Inverter Graphs are not canonical in nature."
    },
    {
        "id": 973,
        "Question": "And Inverter Graph is a type of __________",
        "Options": [
            "a) Multigraph",
            "b) Cyclic Graph",
            "c) Directed Acyclic Graph",
            "d) Directed Acyclic Word Graph"
        ],
        "Answer": "Answer: d\nExplanation: The given statement forms the attributes of the And Inverter Graph."
    },
    {
        "id": 974,
        "Question": "Which of the following logical operation can’t be implemented by polynomial time graph manipulation algorithms using Binary Decision Diagrams?",
        "Options": [
            "a) Conjunction",
            "b) Disjunction",
            "c) Negation",
            "d) Tautology Checking"
        ],
        "Answer": "Answer: c\nExplanation: And Inverter is a directed graph which is used to solve boolean expressions, hence have no loops."
    }
]