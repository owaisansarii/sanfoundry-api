[
    {
        "id": 1,
        "Question": "Which of the following is the correct syntax of including a user defined header files in C++?",
        "Options": [
            "a) #include <userdefined.h>",
            "b) #include <userdefined>",
            "c) #include “userdefined”",
            "d) #include [userdefined]"
        ],
        "Answer": "Answer: c\nExplanation: C++ uses double quotes to include a user-defined header file. The correct syntax of including user-defined is #include “userdefinedname”."
    },
    {
        "id": 2,
        "Question": "Which of the following is a correct identifier in C++?",
        "Options": [
            "a) 7var_name",
            "b) 7VARNAME",
            "c) VAR_1234",
            "d) $var_name"
        ],
        "Answer": "Answer: c\nExplanation: The rules for writing an identifier is as follows:\ni) may contain lowercase/uppercase letters, digits or underscore(_) only\nii) should start with a non-digit character\niii) should not contain any special characters like @, $, etc."
    },
    {
        "id": 3,
        "Question": "Which of the following is called address operator?",
        "Options": [
            "a) *",
            "b) &",
            "c) _",
            "d) %"
        ],
        "Answer": "Answer: b\nExplanation: & operator is called address operator and is used to access the address of a variable."
    },
    {
        "id": 4,
        "Question": "Which of the following is used for comments in C++?",
        "Options": [
            "a) // comment",
            "b) /* comment */",
            "c) both // comment or /* comment */",
            "d) // comment */"
        ],
        "Answer": "Answer: c\nExplanation: Both the ways are used for commenting in C++ programming. // is used for single line comments and /* … */ is used for multiple line comments."
    },
    {
        "id": 5,
        "Question": "What are the actual parameters in C++?",
        "Options": [
            "a) Parameters with which functions are called",
            "b) Parameters which are used in the definition of a function",
            "c) Variables other than passed parameters in a function",
            "d) Variables that are never used in the function"
        ],
        "Answer": "Answer: a\nExplanation: Actual parameters are those using which a function call is made i.e. which are actually passed in a function when that function is called. "
    },
    {
        "id": 6,
        "Question": "What are the formal parameters in C++?",
        "Options": [
            "a) Parameters with which functions are called",
            "b) Parameters which are used in the definition of the function",
            "c) Variables other than passed parameters in a function",
            "d) Variables that are never used in the function"
        ],
        "Answer": "Answer: b\nExplanation: Formal parameters are those which are used in the definition of a function. They are the parameters that represent the actual parameters passed and they are the one which is used inside the function."
    },
    {
        "id": 7,
        "Question": "Which function is used to read a single character from the console in C++?",
        "Options": [
            "a) cin.get(ch)",
            "b) getline(ch)",
            "c) read(ch)",
            "d) scanf(ch)"
        ],
        "Answer": "Answer: a\nExplanation: C++ provides cin.get() function to read a single character from console whereas others are used to read either a single or multiple characters."
    },
    {
        "id": 8,
        "Question": "Which function is used to write a single character to console in C++?",
        "Options": [
            "a) cout.put(ch)",
            "b) cout.putline(ch)",
            "c) write(ch)",
            "d) printf(ch)"
        ],
        "Answer": "Answer: a\nExplanation: C++ provides cout.put() function to write a single character to console whereas others are used to write either a single or multiple characters."
    },
    {
        "id": 9,
        "Question": "What are the escape sequences?",
        "Options": [
            "a) Set of characters that convey special meaning in a program",
            "b) Set of characters that whose use are avoided in C++ programs",
            "c) Set of characters that are used in the name of the main function of the program",
            "d) Set of characters that are avoided in cout statements"
        ],
        "Answer": "Answer: a\nExplanation: Escape sequence is a set of characters that convey a special meaning to the program. They are used to convey a meaning which cannot be conveyed directly."
    },
    {
        "id": 10,
        "Question": "Which of the following escape sequence represents carriage return?",
        "Options": [
            "a) \\r",
            "b) \\n",
            "c) \\n\\r",
            "d) \\c"
        ],
        "Answer": "Answer: a\nExplanation: \\r is used to represent carriage return which means move the cursor to the beginning of the next line."
    },
    {
        "id": 11,
        "Question": "Which of the following escape sequence represents tab?",
        "Options": [
            "a) \\t",
            "b) \\t\\r",
            "c) \\b",
            "d) \\a"
        ],
        "Answer": "Answer: a\nExplanation: \\t is used to represent tab which means a set of blank spaces in a line."
    },
    {
        "id": 12,
        "Question": "Who created C++?",
        "Options": [
            "a) Bjarne Stroustrup",
            "b) Dennis Ritchie",
            "c) Ken Thompson",
            "d) Brian Kernighan"
        ],
        "Answer": "Answer: a\nExplanation: Bjarne Stroustrup is the original creator of C++ during 1979 at AT&T Bell Labs."
    },
    {
        "id": 13,
        "Question": "Which of the following is called insertion/put to operator?",
        "Options": [
            "a) <<",
            "b) >>",
            "c) >",
            "d) <"
        ],
        "Answer": "Answer: a\nExplanation: << operator is called insertion or put to operator i.e. insert/put things to console/files."
    },
    {
        "id": 14,
        "Question": "Which of the following is called extraction/get from operator?",
        "Options": [
            "a) <<",
            "b) >>",
            "c) >",
            "d) <"
        ],
        "Answer": "Answer: b\nExplanation: >> operator is called extraction or get from operator i.e. extract/get things from console/files."
    },
    {
        "id": 15,
        "Question": "A language which has the capability to generate new data types are called ________________",
        "Options": [
            "a) Extensible",
            "b) Overloaded",
            "c) Encapsulated",
            "d) Reprehensible"
        ],
        "Answer": "Answer: a\nExplanation: Languages that can produce/generate new data types are called extensible languages as they have the ability to handle new data types."
    },
    {
        "id": 16,
        "Question": "Wrapping data and its related functionality into a single entity is known as _____________",
        "Options": [
            "a) Abstraction",
            "b) Encapsulation",
            "c) Polymorphism",
            "d) Modularity"
        ],
        "Answer": "Answer: b\nExplanation: In OOPs, the property of enclosing data and its related functions into a single entity(in C++ we call them classes) is called encapsulation."
    },
    {
        "id": 17,
        "Question": "How structures and classes in C++ differ?",
        "Options": [
            "a) In Structures, members are public by default whereas, in Classes, they are private by default",
            "b) In Structures, members are private by default whereas, in Classes, they are public by default",
            "c) Structures by default hide every member whereas classes do not",
            "d) Structures cannot have private members whereas classes can have"
        ],
        "Answer": "Answer: a\nExplanation: Structure members are public by default whereas, class members are private by default. Both of them can have private and public members."
    },
    {
        "id": 18,
        "Question": "What does polymorphism in OOPs mean?",
        "Options": [
            "a) Concept of allowing overiding of functions",
            "b) Concept of hiding data",
            "c) Concept of keeping things in differnt modules/files",
            "d) Concept of wrapping things into a single unit"
        ],
        "Answer": "Answer: a\nExplanation: In OOPs, Polymorphism is the concept of allowing a user to override functions either by changing the types or number of parameters passed."
    },
    {
        "id": 19,
        "Question": "Which concept allows you to reuse the written code?",
        "Options": [
            "a) Encapsulation",
            "b) Abstraction",
            "c) Inheritance",
            "d) Polymorphism"
        ],
        "Answer": "Answer: c\nExplanation: Inheritance allows you to reuse your already written code by inheriting the properties of written code into other parts of the code, hence allowing you to reuse the already written code."
    },
    {
        "id": 20,
        "Question": "Which of the following shows multiple inheritances?",
        "Options": [
            "a) A->B->C",
            "b) A->B; A->C",
            "c) A,B->C",
            "d) B->A"
        ],
        "Answer": "Answer: c\nExplanation: In multiple inheritance, a single class is inherited from two classes. So in A,B->C, Class C is inherited from A and B, whereas in A->B->C, C from B and B from A called simple inheritance, in A->B; A->C, B and C are inherited from A which is called hierarchical inheritance."
    },
    {
        "id": 21,
        "Question": "How access specifiers in Class helps in Abstraction?",
        "Options": [
            "a) They does not helps in any way",
            "b) They allows us to show only required things to outer world",
            "c) They help in keeping things together",
            "d) Abstraction concept is not used in classes"
        ],
        "Answer": "Answer: b\nExplanation: Abstraction is the concept of hiding things from the outer world and showing only the required things to the world, which is where access specifiers private, protected and public helps in keeping our knowledge hidden from the world."
    },
    {
        "id": 22,
        "Question": "C++ is ______________",
        "Options": [
            "a) procedural programming language",
            "b) object oriented programming language",
            "c) functional programming language",
            "d) both procedural and object oriented programming language"
        ],
        "Answer": "Answer: d\nExplanation: C++ supports both procedural(step by step instruction) and object oriented programming(using concept of classes and objects)."
    },
    {
        "id": 23,
        "Question": "What does modularity mean?",
        "Options": [
            "a) Hiding part of program",
            "b) Subdividing program into small independent parts",
            "c) Overriding parts of program",
            "d) Wrapping things into single unit"
        ],
        "Answer": "Answer: b\nExplanation: Modularity means dividing a program into independent sub programs so that it can be invoked from other parts of the same program or any other program."
    },
    {
        "id": 24,
        "Question": "10. Which of the following feature of OOPs is not used in the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"hello\"</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy4\">;</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> j<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw4\">void</span> assign<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>j <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Abstraction",
            "b) Encapsulation",
            "c) Inheritance",
            "d) Polymorphism"
        ],
        "Answer": "Answer: c\nExplanation: Polymorphism means overriding the same function by changing types or number of arguments. So we have only two options which has the same function names, but as one can observe that in one option types, name and number of parameters all are same which will lead to an error. Hence that is wrong so the option having same name and different types or number of parameters is correct."
    },
    {
        "id": 25,
        "Question": "Which of the following class allows to declare only one object of it?",
        "Options": [
            "a) Abstract class",
            "b) Virtual class",
            "c) Singleton class",
            "d) Friend class"
        ],
        "Answer": "Answer: c\nExplanation: Singleton class allows the programmer to declare only one object of it, If one tries to declare more than one object the program results into error."
    },
    {
        "id": 26,
        "Question": "Which of the following is not a type of Constructor?",
        "Options": [
            "a) Friend constructor",
            "b) Copy constructor",
            "c) Default constructor",
            "d) Parameterized constructor"
        ],
        "Answer": "Answer: a\nExplanation: Friend function is not a constructor whereas others are a type of constructor used for object initialization."
    },
    {
        "id": 27,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) Base class pointer object cannot point to a derived class object",
            "b) Derived class pointer object cannot point to a base class object",
            "c) A derived class cannot have pointer objects",
            "d) A base class cannot have pointer objects"
        ],
        "Answer": "Answer: b\nExplanation: C++ does not allow a derived class pointer to point a base class pointer whereas Base class can point to a derived class object. Both base class and derived class can have pointer objects."
    },
    {
        "id": 28,
        "Question": "Out of the following, which is not a member of the class?",
        "Options": [
            "a) Static function",
            "b) Friend function",
            "c) Constant function",
            "d) Virtual function"
        ],
        "Answer": "Answer: b\nExplanation: Friend function is not a member of the class. They are given the same access rights as the class member function have but they are not actual members of the class."
    },
    {
        "id": 29,
        "Question": "What is the other name used for functions inside a class?",
        "Options": [
            "a) Member variables",
            "b) Member functions",
            "c) Class functions",
            "d) Class variables"
        ],
        "Answer": "Answer: b\nExplanation: Functions of a class are also known as member functions of a class. "
    },
    {
        "id": 30,
        "Question": "Which of the following cannot be a friend?",
        "Options": [
            "a) Function",
            "b) Class",
            "c) Object",
            "d) Operator function"
        ],
        "Answer": "Answer: c\nExplanation: Objects of any class cannot be made a friend of any other or same class whereas functions, classes and operator functions can be made a friend."
    },
    {
        "id": 31,
        "Question": "Why references are different from pointers?",
        "Options": [
            "a) A reference cannot be made null",
            "b) A reference cannot be changed once initialized",
            "c) No extra operator is needed for dereferencing of a reference",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: References cannot be made null whereas a pointer can be. References cannot be changed whereas pointers can be modified.\n Pointers need * operator to dereference the value present inside it whereas reference does not need an operator for dereferencing."
    },
    {
        "id": 32,
        "Question": "Which of the following provides a programmer with the facility of using object of a class inside other classes?",
        "Options": [
            "a) Inheritance",
            "b) Composition",
            "c) Abstraction",
            "d) Encapsulation"
        ],
        "Answer": "Answer: b\nExplanation: The concept of using objects of one class into another class is known as Composition."
    },
    {
        "id": 33,
        "Question": "How many types of polymorphism are there in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two types of polymorphism in C++ namely run-time and compile-time polymorphisms."
    },
    {
        "id": 34,
        "Question": "How run-time polymorphisms are implemented in C++?",
        "Options": [
            "a) Using Inheritance",
            "b) Using Virtual functions",
            "c) Using Templates",
            "d) Using Inheritance and Virtual functions"
        ],
        "Answer": "Answer: d\nExplanation: Run-time polymorphism is implemented using Inheritance and virtual in which object decides which function to call."
    },
    {
        "id": 35,
        "Question": "How compile-time polymorphisms are implemented in C++?",
        "Options": [
            "a) Using Inheritance",
            "b) Using Virtual functions",
            "c) Using Templates",
            "d) Using Inheritance and Virtual functions"
        ],
        "Answer": "Answer: c\nExplanation: Compile-time polymorphism is implemented using templates in which the types(which can be checked during compile-time) are used decides which function to be called."
    },
    {
        "id": 36,
        "Question": "Which of the following is an abstract data type?",
        "Options": [
            "a) int",
            "b) float",
            "c) class",
            "d) string"
        ],
        "Answer": "Answer: c\nExplanation: Class is used as an abstract data type as it can be used to give implementation independent view whereas no other data type can be used to provide this."
    },
    {
        "id": 37,
        "Question": "Which concept means the addition of new components to a program as it runs?",
        "Options": [
            "a) Data hiding",
            "b) Dynamic binding",
            "c) Dynamic loading",
            "d) Dynamic typing"
        ],
        "Answer": "Answer: c\nExplanation: Dynamic loading is the concept of adding new components to a program as it runs."
    },
    {
        "id": 38,
        "Question": "Which of the following explains the overloading of functions?",
        "Options": [
            "a) Virtual polymorphism",
            "b) Transient polymorphism",
            "c) Ad-hoc polymorphism",
            "d) Pseudo polymorphism"
        ],
        "Answer": "Answer: c\nExplanation: Ad-hoc polymorphism is a type of polymorphism in which a function denotes heterogeneous implementation depending upon the types of argument."
    },
    {
        "id": 39,
        "Question": "Which of the following approach is used by C++?",
        "Options": [
            "a) Top-down",
            "b) Bottom-up",
            "c) Left-right",
            "d) Right-left"
        ],
        "Answer": "Answer: b\nExplanation: C++ is an object-oriented language and OOL uses a bottom-up approach to solve/view a problem."
    },
    {
        "id": 40,
        "Question": "Which operator is overloaded for a cout object?",
        "Options": [
            "a) >>",
            "b) <<",
            "c) <",
            "d) >"
        ],
        "Answer": "Answer: b\nExplanation: cout in C++ uses << operator to print anything so << operator is overloaded for a cout object."
    },
    {
        "id": 41,
        "Question": "Which of the following cannot be used with the virtual keyword?",
        "Options": [
            "a) Class",
            "b) Member functions",
            "c) Constructors",
            "d) Destructors"
        ],
        "Answer": "Answer: c\nExplanation: Virtual keyword cannot be used with constructors as constructors are defined to initialized an object of particular class hence no other class needs constructor of other class."
    },
    {
        "id": 42,
        "Question": "Which concept is used to implement late binding?",
        "Options": [
            "a) Virtual functions",
            "b) Operator functions",
            "c) Constant functions",
            "d) Static functions"
        ],
        "Answer": "Answer: a\nExplanation: Virtual functions are used to implement the concept of late binding i.e. binding actual functions to their calls."
    },
    {
        "id": 43,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) C++ allows static type checking",
            "b) C++ allows dynamic type checking.",
            "c) C++ allows static member function to be of type const.",
            "d) C++ allows both static and dynamic type checking"
        ],
        "Answer": "Answer: d\nExplanation: C++ allows both static and dynamic type checking i.e. types are checked by the compiler."
    },
    {
        "id": 44,
        "Question": "Which of the following supports the concept that reusability is a desirable feature of a language?",
        "Options": [
            "a) It reduces the testing time",
            "b) It reduces maintenance cost",
            "c) It decreases the compilation time",
            "d) It reduced both testing and maintenance time"
        ],
        "Answer": "Answer: d\nExplanation: As we will be using the existing code therefore we don’t need to check the code again and again so testing and maintenance time decreases but the compiler time may increase or remains same because though we are reusing the code but every part needs to be compiled and extra include statement needs to be executed therefore compilation time may remain same or increases."
    },
    {
        "id": 45,
        "Question": "Which of the following is a static polymorphism mechanism?",
        "Options": [
            "a) Function overloading",
            "b) Operator overloading",
            "c) Templates",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All the options mentioned above uses static polymorphism mechanism. As the conflicts in all these types of functions are resolved during compile-time."
    },
    {
        "id": 46,
        "Question": "Which of the following is not a type of inheritance?",
        "Options": [
            "a) Multiple",
            "b) Multilevel",
            "c) Distributive",
            "d) Hierarchical"
        ],
        "Answer": "Answer: d\nExplanation: Both statements are false because all the operators of C++ cannot be overloaded and the basic meaning of an operator cannot be changed, we can only give new meaning to an operator."
    },
    {
        "id": 47,
        "Question": "What happens if a class does not have a name?",
        "Options": [
            "a) It will not have a constructor",
            "b) It will not have a destructor",
            "c) It is not allowed",
            "d) It will neither have a constructor or destructor"
        ],
        "Answer": "Answer: c\nExplanation: Distributive is not a type of inheritance whereas others are a type of inheritance having their own meaning."
    },
    {
        "id": 48,
        "Question": "Which members are inherited but are not accessible in any case?",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Protected",
            "d) Both private and protected"
        ],
        "Answer": "Answer: b\nExplanation: A class without a name will not have a destructor. The object is made so constructor is required but the destructor is not. Check the code below:\n\n\n\t\n\n#include <iostream>\nusing namespace std;\nclass\n{\n    public:\n\tvoid func()\n        {\n\t\tcout<<\"Hello world\";\n\t}\n}a;\nint main(int argc, char const *argv[])\n{\n\ta.func();\n\treturn 0;\n}\n\n\n"
    },
    {
        "id": 49,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) Friend functions can access public members of a class",
            "b) Friend functions can access protected members of a class",
            "c) Friend functions can access private members of a class",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In Procedural programming like C we don’t have the concept of polymorphism, therefore, all the function calls are resolved at the compile-time but in case of OOP languages sue to polymorphism concept all function calls are not resolved at compile-time."
    },
    {
        "id": 50,
        "Question": "Which of the following is correct in C++?",
        "Options": [
            "a) Classes cannot have protected data members",
            "b) Structures can have member functions",
            "c) Class members are public by default",
            "d) Structure members are private by default"
        ],
        "Answer": "Answer: a\nExplanation: Private members of a class are inherited to the child class but are not accessible from the child class."
    },
    {
        "id": 51,
        "Question": "Which of the following is used to make an abstract class?",
        "Options": [
            "a) By using virtual keyword in front of a class declaration",
            "b) By using an abstract keyword in front of a class declaration",
            "c) By declaring a virtual function in a class",
            "d) By declaring a pure virtual function in a class"
        ],
        "Answer": "Answer: d\nExplanation: Friend functions can access any member of a class without caring about the type of member i.e. without caring whether it is private, protected or public."
    },
    {
        "id": 52,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) A class is an instance of its objects",
            "b) An object is an instance of its class",
            "c) A class is an instance of the data type that the class have",
            "d) An object is an instance of the data type of the class"
        ],
        "Answer": "Answer: b\nExplanation: Though C does not allows member functions in structures but C++ allows structures to have member functions. Members of structures are public by default and those of classes are private by default. Classes can have protected data members."
    },
    {
        "id": 53,
        "Question": "Which of the following is correct about new and malloc?",
        "Options": [
            "a) Both are available in C",
            "b) Pointer object initialization of a class with both new and malloc calls the constructor of that class",
            "c) Pointer object initialization of a class using new involves constructor call whereas using malloc does not involve constructor call",
            "d) Pointer object initialization of a class using malloc involves constructor call whereas using new does not involve constructor call"
        ],
        "Answer": "Answer: c\nExplanation: Object initialization using new keyword involves constructor call whereas malloc does not involve constructor call. That’s why new is explicitly added in C++. Also, malloc is used to assign memory to any pointer hence it assigns memory equals to the size of the class however new keyword involves initialization also hence calls the constructor of that class."
    },
    {
        "id": 54,
        "Question": "What is virtual inheritance?",
        "Options": [
            "a) C++ technique to avoid multiple copies of the base class into children/derived class",
            "b) C++ technique to avoid multiple inheritances of classes",
            "c) C++ technique to enhance multiple inheritance",
            "d) C++ technique to ensure that a private member of the base class can be accessed somehow"
        ],
        "Answer": "Answer: a\nExplanation: Virtual inheritance is a C++ technique with which it ensures that a derived class contains only one copy of the base class’s variables. Refer Wikipedia for more info."
    },
    {
        "id": 55,
        "Question": "What is the difference between delete and delete[] in C++?",
        "Options": [
            "a) delete is used to delete normal objects whereas delete[] is used to pointer objects",
            "b) delete is a keyword whereas delete[] is an identifier",
            "c) delete is used to delete single object whereas delete[] is used to multiple(array/pointer of) objects",
            "d) delete is syntactically correct but delete[] is wrong and hence will give an error if used in any case"
        ],
        "Answer": "Answer: c\nExplanation: delete is used to delete a single object initiated using new keyword whereas delete[] is used to delete a group of objects initiated with the new operator."
    },
    {
        "id": 56,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Constructor called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t   <span class=\"br0\">}</span>\n\t~A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Destructor called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> A<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">delete</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) “Constructor called” five times and then “Destructor called” five times",
            "b) “Constructor called” five times and then “Destructor called” once",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: d\nExplanation: The program will result in segmentation fault as we are trying to delete only one pointer variable and leaving other variables as it is which will result in segmentation fault i.e. improper handling of memory."
    },
    {
        "id": 57,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Constructor called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t   <span class=\"br0\">}</span>\n\t~A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Destructor called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t    <span class=\"br0\">}</span> \n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> A<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) “Constructor called” five times and then “Destructor called” five times",
            "b) “Constructor called” five times and then “Destructor called” once",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: In the above program we have first initiated five-pointer variables using new keyword hence fives time constructor will be called after that as we using delete[](used for deleting multiple objects) to delete variables hence all the five objects created will be destroyed and hence five times destructor will be called."
    },
    {
        "id": 58,
        "Question": "What is the correct syntax of declaring array of pointers of integers of size 10 in C++?",
        "Options": [
            "a) int arr = new int[10];",
            "b) int **arr = new int*[10];",
            "c) int *arr = new int[10];",
            "d) int *arr = new int*[10];"
        ],
        "Answer": "Answer: b\nExplanation: In this case, we have made the destructor of base class virtual which will ensure that any derived class object which is pointed by a base class pointer object on deletion should call both base and derived class destructor."
    },
    {
        "id": 59,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> A \n<span class=\"br0\">{</span>\n   <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   A<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    A <span class=\"sy2\">*</span>obj <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> A<span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> obj<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Garbage value",
            "c) Compile-time error",
            "d) Run-time error"
        ],
        "Answer": "Answer: a\nExplanation: As we are storing a derived class object into base class pointer therefore when the object is destroyed the program has not called the Derived class destructor which shows that the object is not destroyed therefore the program may give unusual behaviour."
    },
    {
        "id": 60,
        "Question": "11. What happens if the following C++ statement is compiled and executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy4\">;</span>\n<span class=\"kw3\">delete</span> ptr<span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) The program compiled successfully but throws an error during run-time",
            "b) The program gives a compile-time error",
            "c) The program is not semantically correct",
            "d) The program is compiled and executed successfully"
        ],
        "Answer": "Answer: b\nExplanation: As we have to declare an array of pointers of integers therefore we need double pointer array in which each element is collection pointers to integers. Therefore the correct syntax is int **arr = new int*[10];"
    },
    {
        "id": 61,
        "Question": "12. What happens if a pointer is deleted twice in a program as shown in the following C++ statements?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"sy4\">;</span>\n<span class=\"kw3\">delete</span> ptr<span class=\"sy4\">;</span>\n<span class=\"kw3\">delete</span> ptr<span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Undefined behaviour",
            "b) Syntactically incorrect",
            "c) Semantically incorrect",
            "d) The program runs perfectly"
        ],
        "Answer": "Answer: d\nExplanation: All the statements about the new and malloc are correct. new is an operator whereas malloc() is a function. The constructor is called when new is used and new returns required type memory pointer."
    },
    {
        "id": 62,
        "Question": "1. What happens if the following program is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt; </span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n   foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>  \n<span class=\"kw4\">int</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n   <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>  \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Warning in both C and C++",
            "c) Error in C++ but Warning in C",
            "d) Error in C but Warning in C++"
        ],
        "Answer": "Answer: c\nExplanation: In C++ all the functions should be declared before it is called otherwise the C++ compiler will give an error but in case of C the compiler just gives a warning and the program can be executed."
    },
    {
        "id": 63,
        "Question": "2. What happens if the following program is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;stdio.h&gt; </span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span> \n\t<span class=\"kw4\">int</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>j<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"*ptr: %d<span class=\"es1\">\\n</span>\"</span>, <span class=\"sy2\">*</span>ptr<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Warning in both C and C++",
            "c) Error in C but Warning in C++",
            "d) Error in C++ but Warning in C"
        ],
        "Answer": "Answer: d\nExplanation: C++ is strict on the use of types of variables hence when the programmer tries to assign const int to a normal pointer the program gives error whereas C is not strict on types therefore it gives warning only."
    },
    {
        "id": 64,
        "Question": "3. What happens if the following line is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Warning in both C and C++",
            "c) Error in C++ and successful execution in C",
            "d) Error in C and successful execution in C++"
        ],
        "Answer": "Answer: c\nExplanation: C++ is strict in type check but C is not and as malloc returns a void* which we are trying to assign to an int*, therefore, the C++ compiler gives error whereas C compiler executes the program successfully."
    },
    {
        "id": 65,
        "Question": "4. What happens if the following line is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Warning in both C and C++",
            "c) Error in C and successful execution in C++",
            "d) Error in C++ and successful execution in C"
        ],
        "Answer": "Answer: d\nExplanation: C++ compiler does not allow the programmer to declare a constant variable without initializing it hence the C++ compiler gives an error whereas C allows such declaration, therefore, the program compiles and runs successfully."
    },
    {
        "id": 66,
        "Question": "5. What happens if the following program is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;stdio.h&gt; </span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> <span class=\"kw3\">new</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, <span class=\"kw3\">new</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) A successful run in both C and C++",
            "c) Error in C and successful execution in C++",
            "d) Error in C++ and successful execution in C"
        ],
        "Answer": "Answer: d\nExplanation: new is a keyword in C++, therefore, we cannot declare a variable with name new but as there is no such keyword new in C, therefore, the program is compiled and executed successfully in C."
    },
    {
        "id": 67,
        "Question": "6. What happens if the following program is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;stdio.h&gt; </span>\n<span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Successful run in both C and C++",
            "c) Error in C and successful execution in C++",
            "d) Error in C++ and successful execution in C"
        ],
        "Answer": "Answer: d\nExplanation: main() function in C++ must return int otherwise the C++ compiler gives the error whereas C does not forces such things on main() function. Thereas when we aremaking void main(){} function in this program the C++ compiler gives error whereas C compiler runs successfully."
    },
    {
        "id": 68,
        "Question": "7. What happens if the following program is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;stdio.h&gt; </span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\tfunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tfunc<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Outputs Hello twice in both C and C++",
            "c) Error in C and successful execution in C++",
            "d) Error in C++ and successful execution in C"
        ],
        "Answer": "Answer: a\nExplanation: As the func(void) needs no argument during its call, hence when we are calling func(2) with 2 as passed as a parameter then this statement gives the error in both C++ and C compiler."
    },
    {
        "id": 69,
        "Question": "8. What happens if the following program is executed in C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;stdio.h&gt; </span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\tfunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tfunc<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error in both C and C++",
            "b) Outputs Hello twice in both C and C++",
            "c) Error in C and Outputs Hello twice in C++",
            "d) Error in C++ and Outputs Hello twice in C"
        ],
        "Answer": "Answer: d\nExplanation: In C++ whenever a function without argument is declared it is equivalent to function with void arguments i.e. func() == func(void) whereas in C a function without argument is equivalent to func(…) i.e. it can take any number of arguments so func(2) call is also valid in C but not valid in C++. Hence it gives error in C++ whereas no error in C."
    },
    {
        "id": 70,
        "Question": "Which of the following type is provided by C++ but not C?",
        "Options": [
            "a) int",
            "b) bool",
            "c) float",
            "d) double"
        ],
        "Answer": "Answer: b\nExplanation: C++ provides the boolean type to handle true and false values whereas no such type is provided in C."
    },
    {
        "id": 71,
        "Question": "Which of the following feature is not provided by C?",
        "Options": [
            "a) Pointers",
            "b) Structures",
            "c) References",
            "d) Functions"
        ],
        "Answer": "Answer: c\nExplanation: References are introduced in C++. They are not present in C."
    },
    {
        "id": 72,
        "Question": "Which of the following is not a fundamental type is not present in C but present in C++?",
        "Options": [
            "a) int",
            "b) float",
            "c) bool",
            "d) void"
        ],
        "Answer": "Answer: c\nExplanation: Boolean type is not present as a fundamental type in C. int type is used as boolean in C whereas in C++ bool is defined as a fundamental type for handling boolean outputs."
    },
    {
        "id": 73,
        "Question": "What is the size of a boolean variable in C++?",
        "Options": [
            "a) 1 bit",
            "b) 1 byte",
            "c) 4 bytes",
            "d) 2 bytes"
        ],
        "Answer": "Answer: a\nExplanation: Boolean uses only 1 bit as it stores only truth values which can be true(1) or false(0)."
    },
    {
        "id": 74,
        "Question": "Which of the following is C++ equivalent for scanf()?",
        "Options": [
            "a) cin",
            "b) cout",
            "c) print",
            "d) input"
        ],
        "Answer": "Answer: a\nExplanation: C++ uses cin to read input form uses. However C++ also uses scanf(). "
    },
    {
        "id": 75,
        "Question": "Which of the following is C++ equivalent for printf()?",
        "Options": [
            "a) cin",
            "b) cout",
            "c) print",
            "d) input"
        ],
        "Answer": "Answer: b\nExplanation: C++ uses cout to print output to console. However C++ also uses printf(). "
    },
    {
        "id": 76,
        "Question": "Which of the following is the correct difference between cin and scanf()?",
        "Options": [
            "a) both are the same",
            "b) cin is a stream object whereas scanf() is a function",
            "c) scanf() is a stream object whereas cin is a function",
            "d) cin is used for printing whereas scanf() is used for reading input"
        ],
        "Answer": "Answer: b\nExplanation: cin is a stream object available in C++ whereas scanf() is a function available in both C and C++. both are used for reading input from users."
    },
    {
        "id": 77,
        "Question": "Which of the following is an exit-controlled loop?",
        "Options": [
            "a) for",
            "b) while",
            "c) do-while",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: do-while is called exit controlled loop because in do-while termination condition is checked when we have executed the body of the loop i.e. we are exiting the body and then checking the condition, therefore, it is called exit controlled loop."
    },
    {
        "id": 78,
        "Question": "Which of the following is an entry-controlled loop?",
        "Options": [
            "a) for",
            "b) while",
            "c) do-while",
            "d) both while and for"
        ],
        "Answer": "Answer: d\nExplanation: Both while and for loops are called entry controlled loop because in both of them the termination condition is checked before we enter the body of the loop hence they are called entry controlled loop."
    },
    {
        "id": 79,
        "Question": "What is dynamic binding?",
        "Options": [
            "a) The process of linking the actual code with a procedural call during run-time",
            "b) The process of linking the actual code with a procedural call during compile-time",
            "c) The process of linking the actual code with a procedural call at any-time",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In II part the termination condition of the for loop is checked. "
    },
    {
        "id": 80,
        "Question": "What is static binding?",
        "Options": [
            "a) The process of linking the actual code with a procedural call during run-time",
            "b) The process of linking the actual code with a procedural call during compile-time",
            "c) The process of linking the actual code with a procedural call at any-time",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Binding of calls and variables with actual code at run-time is called dynamic binding. For example in the concept of polymorphism types are decided are defined during the execution of code which leads to the different function calls depending upon the types used this is called dynamic binding. As the function call is decided during the run-time therefore dynamic binding happens at run-time."
    },
    {
        "id": 81,
        "Question": "What is name mangling in C++?",
        "Options": [
            "a) The process of adding more information to a function name so that it can be distinguished from other functions by the compiler",
            "b) The process of making common names for all the function of C++ program for better use",
            "c) The process of changing the names of variable",
            "d) The process of declaring variables of different types"
        ],
        "Answer": "Answer: b\nExplanation: Binding of calls and variables with actual code at compile-time is called static binding. For example normally whenever we declare a variable we define its type hence compiler knows what type should be binded to that variable i.e. compiler can decide about that variable this is called static binding."
    },
    {
        "id": 82,
        "Question": "12. What will be the output of the following program in both C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Output in C is 1 and in C++ is 4",
            "b) Output in C is 4 and in C++ is 1",
            "c) Output in C is 1 and in C++ is 1",
            "d) Output in C is 4 and in C++ is 4"
        ],
        "Answer": "Answer: a\nExplanation: Name mangling is the process of adding some more information to a function name so that it can be distinguished from other functions by the compiler. This is used when a programmer uses the concept of function overloading in his/her program."
    },
    {
        "id": 83,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> a <span class=\"sy1\">=</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Output in C is 1 and in C++ is 4",
            "b) Output in C is 4 and in C++ is 1",
            "c) Output in C is 1 and in C++ is 1",
            "d) Output in C is 4 and in C++ is 4"
        ],
        "Answer": "Answer: b\nExplanation: In C a character is stored as int therefore the size of ‘a’ is printed as 4 whereas in C++ it is stored as char only therefore in C++ it prints 1."
    },
    {
        "id": 84,
        "Question": "Which of the following syntax for declaring a variable of struct STRUCT can be used in both C and C++?",
        "Options": [
            "a) struct STRUCT S;",
            "b) STRUCT S;",
            "c) Both struct STRUCT S; and STRUCT S;",
            "d) Both C and C++ have different syntax"
        ],
        "Answer": "Answer: c\nExplanation: Both in C and C++ the type char has same size which is 1. But a character enclosed inside single quotes has difference sizes i.e. in case of char a; the size of a will be 1 in both C and C++ but in case of ‘a’ size will be 4 in case of C but 1 in case of C++."
    },
    {
        "id": 85,
        "Question": "What if we define the below structure in C and C++?",
        "Options": [
            "a) Error in C but not in C++",
            "b) Error in C++ but not in C",
            "c) No error in both C and C++",
            "d) Error in both C and C++"
        ],
        "Answer": "Answer: a\nExplanation: C program requires struct keyword while defining a variable of any structure, therefore, we cannot use the second STRUCT S; definition to declare a variable."
    },
    {
        "id": 86,
        "Question": "Which of the following is the scope resolution operator?",
        "Options": [
            "a) .",
            "b) *",
            "c) ::",
            "d) ~"
        ],
        "Answer": "Answer: c\nExplanation: :: operator is called scope resolution operator used for accessing a global variable from a function which is having the same name as the variable declared in the function."
    },
    {
        "id": 87,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span>\n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy4\">::</span><span class=\"me2\">x</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 123"
        ],
        "Answer": "Answer: a\nExplanation: While printing x we are using :: operator hence the refernce is given to global variable hence the global variable x = 1 is printed."
    },
    {
        "id": 88,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n  ~A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Destructor called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    A a<span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Destructor called",
            "b) Nothing will be printed",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Whenever a destructor is private then one should not define any normal object as it will be destroyed at the end of the program which will call destructor and as destructor is private the program gives error during compile while in case of pointer object the compiler at compile does not know about the object, therefore, does not gives compile error. Hence when the destructor is private then the programmer can declare pointer object but cannot declare a normal object."
    },
    {
        "id": 89,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> x<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"br0\">[</span><span class=\"nu0\">99</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Garbage value",
            "b) 0",
            "c) 99",
            "d) Error"
        ],
        "Answer": "Answer: d\nExplanation: The pointer object is created is not deleted hence the destructor for these objects is not called hence nothing is printed on the screen."
    },
    {
        "id": 90,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n   <span class=\"kw4\">int</span> <span class=\"kw3\">cin</span><span class=\"sy4\">;</span>\n   <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"kw3\">cin</span><span class=\"sy4\">;</span>\n   <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"cin: \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">cin</span><span class=\"sy4\">;</span>\n   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) cin: garbage value",
            "b) Error",
            "c) Segmentation fault",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: b\nExplanation: In C++ all the uninitialized variables are set to 0 therefore the value of all elements of the array is set to 0."
    },
    {
        "id": 91,
        "Question": "Which of the following operator has left to right associativity?",
        "Options": [
            "a) Unary operator",
            "b) Logical not",
            "c) Array element access",
            "d) addressof"
        ],
        "Answer": "Answer: a\nExplanation: cin is a variable hence overrides the cin object. cin >> cin has no meaning so no error."
    },
    {
        "id": 92,
        "Question": "Which of the following is accessed by a member function of a class?",
        "Options": [
            "a) The object of that class",
            "b) All members of a class",
            "c) The public part of a class",
            "d) The private part of a class"
        ],
        "Answer": "Answer: c\nExplanation: Array element has left to right associativity i.e. expressions are evaluated from left to right in case of array element access. "
    },
    {
        "id": 93,
        "Question": "What is the size of a character literal in C and C++?",
        "Options": [
            "a) 4 and 1",
            "b) 1 and 4",
            "c) 1 and 1",
            "d) 4 and 4"
        ],
        "Answer": "Answer: b\nExplanation: A member function of a class can access all the members of its class whether they are private, protected or public."
    },
    {
        "id": 94,
        "Question": "What is the size of a character type in C and C++?",
        "Options": [
            "a) 4 and 1",
            "b) 1 and 4",
            "c) 1 and 1",
            "d) 4 and 4"
        ],
        "Answer": "Answer: a\nExplanation: The size of a character literal is 4 in case of C but it is one in case of C++. You can do printf(“%d”, (int)sizeof(‘a’)); in both C and C++ to check this."
    },
    {
        "id": 95,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) struct tag is required in both C and C++ while declaring an object of the structure",
            "b) struct is not required in C but required in C++ while declaring an object of the structure",
            "c) struct is not required in C++ but required in C while declaring an object of the structure",
            "d) struct tag is not required in both C and C++ while declaring an object of the structure"
        ],
        "Answer": "Answer: c\nExplanation: The size of a character type in both C and C++ is 1. You can do printf(“%d”, (int)sizeof(char)); in both C and C++ to check this."
    },
    {
        "id": 96,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) struct cannot have member function in C but it can in C++",
            "b) struct cannot have member function in C++ but it can in C",
            "c) struct cannot have member function in both C and C++",
            "d) struct can have member function in both C and C++"
        ],
        "Answer": "Answer: c\nExplanation: C++ does not require struct keyword while declaring an object of the structure whereas in C we require struct tag for declaring an object."
    },
    {
        "id": 97,
        "Question": "13. What happens if we run the following code in both C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"kw4\">struct</span> STRUCT\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n  <span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n      <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"HELLO THIS IS STRUCTURE<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> STRUCT s<span class=\"sy4\">;</span>\n  s.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) The program runs fine and both prints output “HELLO THIS IS STRUCTURE”",
            "b) The program gives an error in case of C but runs perfectly in case of C++",
            "c) The program gives an error in case of C++ but runs perfectly in case of C",
            "d) The program gives an error in case of both C and C++"
        ],
        "Answer": "Answer: a\nExplanation: struct can have member function in C++ whereas member functions are not allowed in case of C."
    },
    {
        "id": 98,
        "Question": "14. What happens if we run the following code in both C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"kw4\">struct</span> STRUCT\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n  <span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n      <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> STRUCT s<span class=\"sy4\">;</span>\n  s.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) The program runs fine and both prints output “HELLO THIS IS STRUCTURE”",
            "b) The program gives an error in case of C but runs perfectly in case of C++",
            "c) The program gives an error in case of C++ but runs perfectly in case of C",
            "d) The program gives an error in case of both C and C++"
        ],
        "Answer": "Answer: b\nExplanation: As C does not allows the structure to have member functions, therefore, it gives an error in case of C but as C++ does allow structures to have member functions, therefore, the C++ does not give an error."
    },
    {
        "id": 99,
        "Question": "15. What happens if the following program is compiled in both C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"kw4\">struct</span> STRUCT\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> <span class=\"kw4\">static</span> a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> STRUCT s<span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) The program runs fine and both prints output “HELLO THIS IS STRUCTURE”",
            "b) The program gives an error in case of C but runs perfectly in case of C++",
            "c) The program gives an error in case of C++ but runs perfectly in case of C",
            "d) The program gives an error in case of both C and C++"
        ],
        "Answer": "Answer: b\nExplanation: As C does not allows to initialize any member inside the structure, therefore, the program gives error whereas in case of C++ this is allowed therefore the program does not give any error."
    },
    {
        "id": 100,
        "Question": "Which of the following statement is correct?",
        "Options": [
            "a) Structure in C allows Constructor definition",
            "b) Structure in C++ allows Constructor definition",
            "c) Both allow Constructor definition",
            "d) C allows constructor definition while C++ does not"
        ],
        "Answer": "Answer: b\nExplanation: As C does not allow the programmer to define a function inside a structure and constructor itself is a function, therefore, the constructor definition is not allowed in C whereas such definitions are allowed in C++."
    },
    {
        "id": 101,
        "Question": "2. What happens if the following code is compiled on both C and C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"kw4\">struct</span> STRUCT\n<span class=\"br0\">{</span>\n<span class=\"kw2\">private</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> STRUCT<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) The program runs fine and both prints output “HELLO THIS IS STRUCTURE”",
            "b) The program gives an error in case of C but runs perfectly in case of C++",
            "c) The program gives an error in case of C++ but runs perfectly in case of C",
            "d) The program gives an error in case of both C and C++"
        ],
        "Answer": "Answer: b\nExplanation: Access specifiers like private, protected and the public are used because the OOPs concept and as C is not an Object Oriented language, therefore, access specifiers are not defined in C and hence C gives error whereas C++ does not."
    },
    {
        "id": 102,
        "Question": "Which of the following is correct about this pointer in C++?",
        "Options": [
            "a) this pointer is passed as a hidden argument in all the functions of a class",
            "b) this pointer is passed as a hidden argument in all non-static functions of a class",
            "c) this pointer is passed as a hidden argument in all static functions of a class",
            "d) this pointer is passed as a hidden argument in all static variables of a class"
        ],
        "Answer": "Answer: b\nExplanation: As static functions are a type of global function for a class so all the object shares the common instance of that static function whereas all the objects have there own instance for non-static functions and hence they are passed as a hidden argument in all the non-static members but not in static members."
    },
    {
        "id": 103,
        "Question": "Which of the following operator is used with this pointer to access members of a class?",
        "Options": [
            "a) .",
            "b) !",
            "c) ->",
            "d) ~"
        ],
        "Answer": "Answer: c\nExplanation: this pointer is a type of pointer and as we know pointer object uses the arrow(->) operator to access the members of the class, therefore, this pointer uses -> operator."
    },
    {
        "id": 104,
        "Question": "Why this pointer is used?",
        "Options": [
            "a) To access the members of a class which have the same name as local variables in that scope",
            "b) To access all the data stored under that class",
            "c) To access objects of other class",
            "d) To access objects of other variables"
        ],
        "Answer": "Answer: a\nExplanation: this pointer is used to access the members of a class which have the same name as local variables in that part of the code."
    },
    {
        "id": 105,
        "Question": "How many types of polymorphism are there?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two types of polymorphism in C++ namely compile-time polymorphism and run-time polymorphism."
    },
    {
        "id": 106,
        "Question": "What is the other name of compile-time polymorphism?",
        "Options": [
            "a) Static polymorphism",
            "b) Dynamic polymorphism",
            "c) Executing polymorphism",
            "d) Non-executing polymorphism"
        ],
        "Answer": "Answer: a\nExplanation: Compile-time polymorphism is also known as static polymorphism as it is implemented during the compile-time."
    },
    {
        "id": 107,
        "Question": "What is the other name of run-time polymorphism?",
        "Options": [
            "a) Static polymorphism",
            "b) Dynamic polymorphism",
            "c) Executing polymorphism",
            "d) Non-executing polymorphism"
        ],
        "Answer": "Answer: b\nExplanation: Run-time polymorphism is also known as dynamic polymorphism as it is implemented during the run-time of the program."
    },
    {
        "id": 108,
        "Question": "Which of the following is correct about static polymorphism?",
        "Options": [
            "a) In static polymorphism, the conflict between the function call is resolved during the compile time",
            "b) In static polymorphism, the conflict between the function call is resolved during the run time",
            "c) In static polymorphism, the conflict between the function call is never resolved during the execution of a program",
            "d) In static polymorphism, the conflict between the function call is resolved only if it required"
        ],
        "Answer": "Answer: a\nExplanation: The conflict between which function to call is resolved during the compile time in static polymorphism i.e. before the execution of the program starts."
    },
    {
        "id": 109,
        "Question": "Which of the following is correct about dynamic polymorphism?",
        "Options": [
            "a) In dynamic polymorphism, the conflict between the function call is resolved during the compile time",
            "b) In dynamic polymorphism, the conflict between the function call is resolved during the run time",
            "c) In dynamic polymorphism, the conflict between the function call is never resolved during the execution of the program",
            "d) In dynamic polymorphism, the conflict between the function call is resolved at the beginning of the program"
        ],
        "Answer": "Answer: b\nExplanation: The conflict between which function to call is resolved during the run time in dynamic polymorphism i.e. the conflict is resolved when the execution reaches the function call statement."
    },
    {
        "id": 110,
        "Question": "What is std in C++?",
        "Options": [
            "a) std is a standard class in C++",
            "b) std is a standard namespace in C++",
            "c) std is a standard header file in C++",
            "d) std is a standard file reading header in C++"
        ],
        "Answer": "Answer: a\nExplanation: The only arithmetic operator that can be used with a pointer is – subtraction operator. No arithmetic operator can be used with pointers."
    },
    {
        "id": 111,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: std is a standard namespace present in C++ which contains different stream classes and objects like cin, cout, etc. and other standard functions."
    },
    {
        "id": 112,
        "Question": "Which of the following syntax can be used to use a member of a namespace without including that namespace?",
        "Options": [
            "a) namespace::member",
            "b) namespace->member",
            "c) namespace.member",
            "d) namespace~member"
        ],
        "Answer": "Answer: b\nExplanation: cout is defined under the namespace std and without including std namespace we cannot cout, therefore, the program gives an error."
    },
    {
        "id": 113,
        "Question": "15. Which of the following C++ code will give error on compilation?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">================</span>code <span class=\"nu0\">1</span><span class=\"sy1\">=================</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">========================================</span>\n<span class=\"sy1\">================</span>code <span class=\"nu0\">2</span><span class=\"sy1\">=================</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">========================================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Both code 1 and code 2",
            "b) Code 1 only",
            "c) Code 2 only",
            "d) Neither code 1 nor code 2"
        ],
        "Answer": "Answer: a\nExplanation: To use a member of a namespace without including the namespace is done by this syntax namespace::member."
    },
    {
        "id": 114,
        "Question": "1. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Test\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span>\n  <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    Test<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> x<span class=\"sy4\">;</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> Test<span class=\"sy4\">::</span><span class=\"me2\">x</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Test<span class=\"sy4\">::</span><span class=\"me2\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    Test t<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Test<span class=\"sy4\">::</span><span class=\"me2\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0 0",
            "b) 5 0",
            "c) 0 5",
            "d) 5 5"
        ],
        "Answer": "Answer: c\nExplanation: Static function can be called without using objects therefore the first call is fine. Next when we are creating 5 objects of the class then value of x is updated each time and as static variables are global to class therefore each updation of x is reflected back to each object hence value of x is 5."
    },
    {
        "id": 115,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Player\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">private</span><span class=\"sy4\">:</span>\n    <span class=\"kw4\">int</span> id<span class=\"sy4\">;</span>\n    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> next_id<span class=\"sy4\">;</span>\n  <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw4\">int</span> getID<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> id<span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n    Player<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span>  id <span class=\"sy1\">=</span> next_id<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> Player<span class=\"sy4\">::</span><span class=\"me2\">next_id</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  Player p1<span class=\"sy4\">;</span>\n  Player p2<span class=\"sy4\">;</span>\n  Player p3<span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p1.<span class=\"me1\">getID</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p2.<span class=\"me1\">getID</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p3.<span class=\"me1\">getID</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3",
            "b) 2 2 2",
            "c) 1 3 1",
            "d) 1 1 1"
        ],
        "Answer": "Answer: a\nExplanation: In this as next_id is a static variable so and initialized with 1 therefore the id value for 1st objects is 1 and next_id is updated to 2. In this way next_id is assigned to id in each object creation and updated by 1 so in this way value of each Id is updated."
    },
    {
        "id": 116,
        "Question": "Which of the following is correct about static variables?",
        "Options": [
            "a) Static functions do not support polymorphism",
            "b) Static data members cannot be accessed by non-static member functions",
            "c) Static data members functions can access only static data members",
            "d) Static data members functions can access both static and non-static data members"
        ],
        "Answer": "Answer: c\nExplanation: Static member functions can access static data members only. Static member functions can be overloaded. Static data members can be accessed by non-static member functions."
    },
    {
        "id": 117,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">private</span><span class=\"sy4\">:</span>\n     <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n     A<span class=\"br0\">(</span><span class=\"kw4\">int</span> _x<span class=\"br0\">)</span>  <span class=\"br0\">{</span>  x <span class=\"sy1\">=</span> _x<span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n     <span class=\"kw4\">int</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">static</span> A a<span class=\"sy4\">;</span>\n  <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n   <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span>\n   <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> a.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    B b<span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> b.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Garbage value",
            "b) Compile-time Error",
            "c) Run-time Error",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: b\nExplanation: Every static member function of a class must be initialized explicitly before use and a data member, a of class A declared inside class B is used without initializing ‘a’ therefore the program gives an error."
    },
    {
        "id": 118,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Test\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">private</span><span class=\"sy4\">:</span>\n     <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> count<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n     Test<span class=\"sy3\">&amp;</span> fun<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> Test<span class=\"sy4\">::</span><span class=\"me2\">count</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\nTest<span class=\"sy3\">&amp;</span> Test<span class=\"sy4\">::</span><span class=\"me2\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    Test<span class=\"sy4\">::</span><span class=\"me2\">count</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Test<span class=\"sy4\">::</span><span class=\"me2\">count</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    Test t<span class=\"sy4\">;</span>\n    t.<span class=\"me1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4 4 4 4",
            "b) 1 2 3 4",
            "c) 1 1 1 1",
            "d) 0 1 2 3"
        ],
        "Answer": "Answer: b\nExplanation: Here we are returning the reference of object by the function call fun() therefore this type of call is allowed. Also as count is static member of the class therefore updation is reflected to the whole class and to every object of the class. Therefore the four function calls to fun() function updates the value of count and prints."
    },
    {
        "id": 119,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">class</span> Test\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n     <span class=\"kw4\">void</span> fun<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Test<span class=\"sy4\">::</span><span class=\"me2\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span>   \n<span class=\"br0\">{</span>\n    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"fun() is static\"</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    Test<span class=\"sy4\">::</span><span class=\"me2\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>   \n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) fun() is static",
            "b) Compile-time Error",
            "c) Run-time Error",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: b\nExplanation: The prototype of the functions are not matched. The function declared inside a class does not have static linkage however the class defined outside the class has the static linkage, therefore, the program gives an error."
    },
    {
        "id": 120,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Point\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span>\n  <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n   Point<span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> j <span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n   <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> j<span class=\"sy4\">;</span>  <span class=\"br0\">}</span>\n   <span class=\"kw4\">int</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n   <span class=\"kw4\">int</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> y<span class=\"sy4\">;</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">const</span> Point t<span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> t.<span class=\"me1\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> t.<span class=\"me1\">gety</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0 0",
            "b) Garbage values",
            "c) Compile error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: const keyword can be applied to all of the following mentioned above."
    },
    {
        "id": 121,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n   <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span>\n   x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n   <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, x<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) Garbage value",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: C++ does not allows a constant object to access any non constant member functions and as getY() is a non constant function and t is a constant object therefore the program gives the error."
    },
    {
        "id": 122,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw4\">int</span> <span class=\"kw4\">const</span> s<span class=\"sy1\">=</span><span class=\"nu0\">9</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s<span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 9",
            "b) Garbage value",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: In C++, all the constant variables must be initialized while declaration and they cannot be modified later in the program. Now in this program as we have declared the constant variable x in first line and initializing it in the next line therefore the program gives the error."
    },
    {
        "id": 123,
        "Question": "What is the size of wchar_t in C++?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 2 or 4",
            "d) Based on the number of bits in the system"
        ],
        "Answer": " Answer: d\nExplanation: Compiler wants to make CPU as more efficient in accessing the next value. "
    },
    {
        "id": 124,
        "Question": "Pick the odd one out.",
        "Options": [
            "a) array type",
            "b) character type",
            "c) boolean type",
            "d) integer type"
        ],
        "Answer": " Answer: a\nExplanation: Array type is not the basic type and it is constructed using the basic type. "
    },
    {
        "id": 125,
        "Question": "Which data type is used to represent the absence of parameters?",
        "Options": [
            "a) int",
            "b) short",
            "c) void",
            "d) float"
        ],
        "Answer": " Answer: c\nExplanation: Because void specifies an empty set of values/parameters. "
    },
    {
        "id": 126,
        "Question": "What does ‘\\a’ escape code represent?",
        "Options": [
            "a) alert",
            "b) backslash",
            "c) tab",
            "d) form feed"
        ],
        "Answer": " Answer: a\nExplanation: Because \\a is used to produce a beep sound. "
    },
    {
        "id": 127,
        "Question": "Which type is best suited to represent the logical values?",
        "Options": [
            "a) integer",
            "b) boolean",
            "c) character",
            "d) float"
        ],
        "Answer": " Answer: b\nExplanation: Logical values can be either true or false, so the boolean type is suited for it. "
    },
    {
        "id": 128,
        "Question": "Identify the user-defined types from the following?",
        "Options": [
            "a) enumeration",
            "b) classes",
            "c) both enumeration and classes",
            "d) int"
        ],
        "Answer": " Answer: c\nExplanation: They must be defined by the users before use, unlike the other types which are readily available. "
    },
    {
        "id": 129,
        "Question": "7. Which of the following statements are true?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) f is a function taking an argument of type int and returning a floating point number",
            "b) f is a function taking an argument of type float and returning an integer",
            "c) f is a function of type float",
            "d) f is a function of type int"
        ],
        "Answer": " Answer: b\nExplanation: The argument that is passed to a function f is of float type and the function finally returns a value that id is of integer type. "
    },
    {
        "id": 130,
        "Question": "The value 132.54 can be represented using which data type?",
        "Options": [
            "a) double",
            "b) void",
            "c) int",
            "d) bool"
        ],
        "Answer": " Answer: a\nExplanation: The given value is with decimal points, so float or double can be used. "
    },
    {
        "id": 131,
        "Question": "When a language has the capability to produce new data type mean, it can be called as",
        "Options": [
            "a) overloaded",
            "b) extensible",
            "c) encapsulated",
            "d) reprehensible"
        ],
        "Answer": " Answer: b\nExplanation: Extensible is used to add new features to C++. "
    },
    {
        "id": 132,
        "Question": "Pick the odd one out.",
        "Options": [
            "a) integer, character, boolean, floating",
            "b) enumeration, classes",
            "c) integer, enum, void",
            "d) arrays, pointer, classes"
        ],
        "Answer": " Answer: c\nExplanation: integer, character, boolean & floating consists of all fundamental types, enumeration & classes consists of user-defined types and arrays, pointer & classes consists of derived types but integer, enum & void is a mixture. "
    },
    {
        "id": 133,
        "Question": "Is bool a fundamental data type in C++?",
        "Options": [
            "a) Yes",
            "b) No, it is a typedef of unsigned char",
            "c) No, it is an enum of {false, true}",
            "d) No, it is expanded from macros"
        ],
        "Answer": " Answer: a\nExplanation: C++ has bool as a fundamental data type. "
    },
    {
        "id": 134,
        "Question": "Find the odd one out.",
        "Options": [
            "a) std::vector<int>",
            "b) std::vector<short>",
            "c) std::vector<long>",
            "d) std::vector<bool>"
        ],
        "Answer": " Answer: d\nExplanation: std::vector<bool> is a specialized version of vector, which is used for elements of type bool and optimizes for space. It behaves like the unspecialized version of vector and the storage is not necessarily an array of bool values, but the library implementation may optimize storage so that each value is stored in a single bit. "
    },
    {
        "id": 135,
        "Question": "3. What is the value of the bool?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">bool</span> is_int<span class=\"br0\">(</span><span class=\"nu16\">789.54</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) True",
            "b) False",
            "c) 1",
            "d) 2"
        ],
        "Answer": " Answer: b\nExplanation: The given number is a double not an integer, so the function returns 0 which is boolean false."
    },
    {
        "id": 136,
        "Question": "What happens when a null pointer is converted into bool?",
        "Options": [
            "a) an error is flagged",
            "b) bool value evaluates to true",
            "c) bool value evaluates to false",
            "d) the statement is ignored"
        ],
        "Answer": " Answer: c\nExplanation: A pointer can be implicitly converted to a bool. A nonzero pointer converts to true and zero valued pointer converts to false."
    },
    {
        "id": 137,
        "Question": "Which of the following statements are false?",
        "Options": [
            "a) bool can have two values and can be used to express logical expressions",
            "b) bool cannot be used as the type of the result of the function",
            "c) bool can be converted into integers implicitly",
            "d) a bool value can be used in arithmetic expressions"
        ],
        "Answer": " Answer: b\nExplanation: Boolean can be used as a return value of a function. "
    },
    {
        "id": 138,
        "Question": "For what values of the expression is an if-statement block not executed?",
        "Options": [
            "a) 0 and all negative values",
            "b) 0 and -1",
            "c) 0",
            "d) 0, all negative values, all positive values except 1"
        ],
        "Answer": " Answer: c\nExplanation: The if-statement block is only not executed when the expression evaluates to 0. its just syntactic sugar for a branch-if-zero instruction."
    },
    {
        "id": 139,
        "Question": "Which of the two operators ++ and — work for the bool data type in C++?",
        "Options": [
            "a) None",
            "b) ++",
            "c) —",
            "d) ++ & —"
        ],
        "Answer": " Answer: b\nExplanation: Due to the history of using integer values as booleans, if an integer is used as a boolean, then incrementing will mean that whatever its truth value before the operation, it will have a truth-value of true after it. However, it is not possible to predict the result of — given knowledge only of the truth value of x, as it could result in false."
    },
    {
        "id": 140,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"kw4\">int</span> p, <span class=\"kw4\">int</span> q<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">&gt;</span> q<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> q<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> k<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> x <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> y <span class=\"sy1\">=</span> f<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        k <span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy2\">*</span> b<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>x <span class=\"sy2\">+</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> k<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 55",
            "b) 62",
            "c) 52",
            "d) 75"
        ],
        "Answer": " Answer: c\nExplanation: In this question, value of x = true and value of y will be also true as f(a,b) will return a non-zero value. Now when adding these values with integers, the implicit type conversion takes place hence converting both x and y to 1(integer equivalent of bool true value). So expression (a*b) + (x+y) is evaluated to 52. "
    },
    {
        "id": 141,
        "Question": "9. What is the value of p in the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> a <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> b <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy3\">|</span> y<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>a <span class=\"sy2\">+</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 16",
            "c) 12",
            "d) 2"
        ],
        "Answer": " Answer: b\nExplanation: | means bitwise OR operation so x | y (0101 | 1010) will be evaluated to 1111 which is integer 15 and as a is true and b is false so a+b(1 + 0) = 1. So final value of expression in line #10 will be 15 + 1 = 16. "
    },
    {
        "id": 142,
        "Question": "",
        "Options": [
            "a) 0",
            "b) 1",
            "c) false",
            "d) 2"
        ],
        "Answer": " Answer: b\nExplanation: The given expression is equivalent to\n[( false AND True) OR false OR true]\nThis is OR or three values so if any of them will be true then the whole exp will be true and as we have last value as true so the answer of expression will be TRUE. "
    },
    {
        "id": 143,
        "Question": "How many characters are specified in the ASCII scheme?",
        "Options": [
            "a) 64",
            "b) 128",
            "c) 256",
            "d) 24"
        ],
        "Answer": " Answer: b\nExplanation: There are 128 characters defined in the C++ ASCII list. "
    },
    {
        "id": 144,
        "Options": [
            "a) 1 is true but 2 is false",
            "b) 1 is false and 2 is true",
            "c) both 1 and 2 are true",
            "d) both 1 and 2 are false"
        ],
        "Answer": " Answer: c\nExplanation: Every character constant has an integer value. Also char belongs to the integral type hence arithmetic and logical operations can be performed on them. "
    },
    {
        "id": 145,
        "Question": "Which of the following belongs to the set of character types?",
        "Options": [
            "a) char",
            "b) wchar_t",
            "c) only a",
            "d) both wchar_t and char"
        ],
        "Answer": " Answer: d\nExplanation: wchar_t and char are used to represent wide character and character. "
    },
    {
        "id": 146,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">74</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) A",
            "b) N",
            "c) J",
            "d) I"
        ],
        "Answer": " Answer: c\nExplanation: The literal value for 74 is J. So it will be printing J. "
    },
    {
        "id": 147,
        "Question": "How do we represent a wide character of the form wchar_t?",
        "Options": [
            "a) L’a’",
            "b) l’a’",
            "c) L[a] ",
            "d) la"
        ],
        "Answer": " Answer: a\nExplanation: A wide character is always indicated by immediately preceding the character literal by an L."
    },
    {
        "id": 148,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> a <span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es5\">\\012</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">&nbsp;</pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, a<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Compiler error",
            "b) 12",
            "c) 10",
            "d) Empty"
        ],
        "Answer": " Answer: c\nExplanation: The value ‘\\012’ means the character with value 12 in octal, which is decimal 10. "
    },
    {
        "id": 149,
        "Question": "In C++, what is the sign of character data type by default?",
        "Options": [
            "a) Signed",
            "b) Unsigned",
            "c) Implementation dependent",
            "d) Unsigned Implementation"
        ],
        "Answer": " Answer: c\nExplanation: The standard does not specify if plain char is signed or unsigned. There are three distinct character types according to the standard: char, signed char and unsigned char."
    },
    {
        "id": 150,
        "Question": "Is the size of character literals different in C and C++?",
        "Options": [
            "a) Implementation defined",
            "b) Can’t say",
            "c) Yes, they are different",
            "d) No, they are not different"
        ],
        "Answer": " Answer: c\nExplanation: In C++, sizeof(‘a’) == sizeof(char) == 1. In C however, sizeof(‘a’) == sizeof(int). "
    },
    {
        "id": 151,
        "Question": "Suppose in a hypothetical machine, the size of char is 32 bits. What would sizeof(char) return?",
        "Options": [
            "a) 4",
            "b) 1",
            "c) Implementation dependent",
            "d) Machine dependent"
        ],
        "Answer": " Answer: b\nExplanation: The standard does NOT require a char to be 8-bits, but does require that sizeof(char) return 1."
    },
    {
        "id": 152,
        "Question": "What constant defined in <climits> header returns the number of bits in a char?",
        "Options": [
            "a) CHAR_SIZE",
            "b) SIZE_CHAR",
            "c) BIT_CHAR",
            "d) CHAR_BIT"
        ],
        "Answer": " Answer: d\nExplanation: CHAR_BIT is a macro constant defined in <climits> header file which expresses the number of bits in a character object in bytes. "
    },
    {
        "id": 153,
        "Question": "The size_t integer type in C++ is?",
        "Options": [
            "a) Unsigned integer of at least 64 bits",
            "b) Signed integer of at least 16 bits",
            "c) Unsigned integer of at least 16 bits",
            "d) Signed integer of at least 64 bits"
        ],
        "Answer": " Answer: c\nExplanation: The size_t type is used to represent the size of an object. Hence, it’s always unsigned. According to the language specification, it is at least 16 bits. "
    },
    {
        "id": 154,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">    \t<span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">&nbsp;</pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy1\">&gt;</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        \t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"x is greater\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    \t<span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">    \t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"y is greater\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    \t<span class=\"br0\">}</span>      </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) x is greater",
            "b) y is greater",
            "c) implementation defined",
            "d) arbitrary"
        ],
        "Answer": " Answer: a\nExplanation: x is promoted to unsigned int on comparison. On conversion x has all bits set, making it the bigger one. "
    },
    {
        "id": 155,
        "Question": "Which of these expressions will return true if the input integer v is a power of two?",
        "Options": [
            "a) (v | (v + 1)) == 0;",
            "b) (~v & (v – 1)) == 0;",
            "c) (v | (v – 1)) == 0;",
            "d) (v & (v – 1)) == 0;"
        ],
        "Answer": " Answer: d\nExplanation: Power of two integers have a single set bit followed by unset bits. "
    },
    {
        "id": 156,
        "Question": "4. What is the value of the following 8-bit integer after all statements are executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\"><span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">x <span class=\"sy1\">=</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">x <span class=\"sy1\">=</span> x <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) -1",
            "c) 127",
            "d) Implementation defined"
        ],
        "Answer": " Answer: d\nExplanation: Right shift of signed integers is undefined, and has implementation-defined behaviour. "
    },
    {
        "id": 157,
        "Question": "Which of these expressions will make the rightmost set bit zero in an input integer x?",
        "Options": [
            "a) x = x | (x-1)",
            "b) x = x & (x-1)",
            "c) x = x | (x+1)",
            "d) x = x & (x+2)"
        ],
        "Answer": " Answer: b\nExplanation: If x is odd the last bit will be 1 and last bit of x-1 will become 0. If x is even then last bit of x will be 0 and last bit of x-1 will become 1. In both case AND operation of 1 and 0 will be 0. Hence last bit of final x will be 0. "
    },
    {
        "id": 158,
        "Question": "Which of these expressions will isolate the rightmost set bit?",
        "Options": [
            "a) x = x & (~x)",
            "b) x = x ^ (~x)",
            "c) x = x & (-x)",
            "d) x = x ^ (-x)"
        ],
        "Answer": " Answer: c\nExplanation: Negative of a number is stores as 2;s complement in C++, so when you will take AND of x and (-x) the rightmost digit will be preserved.  "
    },
    {
        "id": 159,
        "Question": "0946, 786427373824, ‘x’ and 0X2f are _____ _____ ____ and _____ literals respectively.",
        "Options": [
            "a) decimal, character, octal, hexadecimal",
            "b) octal, hexadecimal, character, decimal",
            "c) hexadecimal, octal, decimal, character",
            "d) octal, decimal, character, hexadecimal"
        ],
        "Answer": " Answer: d\nExplanation: Literal integer constants that begin with 0x or 0X are interpreted as hexadecimal and the ones that begin with 0 as octal. The character literal are written within ”. "
    },
    {
        "id": 160,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"ANDing integer 'a' with 'true' :\"</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy3\">&amp;&amp;</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ANDing integer ‘a’ with ‘true’ :8",
            "b) ANDing integer ‘a’ with ‘true’ :0",
            "c) ANDing integer ‘a’ with ‘true’ :1",
            "d) ANDing integer ‘a’ with ‘true’ :9"
        ],
        "Answer": " Answer: a\nExplanation: The && operator in C++ uses short-circuit evaluation so that if bool1 evaluates to false it doesn’t bother evaluating bool2. So as here bool1 is 8 which is true as it is non-zero so C++ does not cares about the expression further and prints the answer of expression which is 8. If you write true && 8 then the output will be 1 because true is true and its integer equivalent is 1 so 1 will be printed. "
    },
    {
        "id": 161,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> i <span class=\"sy2\">/</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> k <span class=\"sy1\">=</span> i <span class=\"sy2\">%</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> l <span class=\"sy1\">&lt;&lt;</span> k<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) compile time error",
            "b) -1 1",
            "c) 1 -1",
            "d) implementation defined"
        ],
        "Answer": " Answer: b\nExplanation: Sign of result of mod operation on negative numbers is sign of the dividend. "
    },
    {
        "id": 162,
        "Question": "10. What will be the output of the following C++ function?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">register</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) Compiler error may be possible",
            "d) Runtime error may be possible"
        ],
        "Answer": " Answer: c\nExplanation: Using & on a register variable may be invalid, since the compiler may store the variable in a register, and finding the address of it is illegal. "
    },
    {
        "id": 163,
        "Question": "Which of the following is not one of the sizes of the floating point types?",
        "Options": [
            "a) short float",
            "b) float",
            "c) long double",
            "d) double"
        ],
        "Answer": " Answer: a\nExplanation: Floating point types occur in only three sizes-float, long double and double. "
    },
    {
        "id": 164,
        "Question": "Which of the following is a valid floating-point literal?",
        "Options": [
            "a) f287.333",
            "b) F287.333",
            "c) 287.e2",
            "d) 287.3.e2"
        ],
        "Answer": " Answer: c\nExplanation: To make a floating point literal, we should attach a suffix of ‘f’ or ‘F’ and there should not be any blank space. "
    },
    {
        "id": 165,
        "Question": "What is the range of the floating point numbers?",
        "Options": [
            "a) -3.4E+38 to +3.4E+38",
            "b) -3.4E+38 to +3.4E+34",
            "c) -3.4E+38 to +3.4E+36",
            "d) -3.4E+38 to +3.4E+32"
        ],
        "Answer": " Answer: a\nExplanation: This is the defined range of floating type number sin C++. Also range for +ve and -ve side should be same so the answer is -3.4E+38 to +3.4E+38. "
    },
    {
        "id": 166,
        "Question": "Which of three sizes of floating point types should be used when extended precision is required?",
        "Options": [
            "a) float",
            "b) double",
            "c) long double",
            "d) extended float"
        ],
        "Answer": " Answer: c\nExplanation: Float for single precision, double for double precision and long double for extended precision. "
    },
    {
        "id": 167,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> num1 <span class=\"sy1\">=</span> <span class=\"nu16\">1.1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> num2 <span class=\"sy1\">=</span> <span class=\"nu16\">1.1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num1 <span class=\"sy1\">==</span> num2<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">           <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"stanford\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">           <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"harvard\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) harvard",
            "b) stanford",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: Float store floating point numbers with 8 place accuracy and requires 4 bytes of Memory. Double has 16 place accuracy having the size of 8 bytes.\nOutput:\n\n\n\t\n\n$ g++ float3.cpp\n$ a.out\nharvard\n\n\n"
    },
    {
        "id": 168,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iomanip&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setprecision<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> d <span class=\"sy1\">=</span> <span class=\"nu16\">0.1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> d <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0.11",
            "b) 0.10000000000000001",
            "c) 0.100001",
            "d) compile time error"
        ],
        "Answer": " Answer: b\nExplanation: The double had to truncate the approximation due to its limited memory, which resulted in a number that is not exactly 0.1.\nOutput:\n\n\n$ g++ float2.out\n$ a.out\n0.10000000000000001\n\n\n"
    },
    {
        "id": 169,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> i <span class=\"sy1\">=</span> <span class=\"nu17\">123.0f</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 123.00",
            "b) 1.23",
            "c) 123",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: The value 123 is printed because of its precision.\n\n\n$ g++ float.cpp\n$ a.out\n123\n\n\n"
    },
    {
        "id": 170,
        "Question": "Which is used to indicate single precision value?",
        "Options": [
            "a) F or f",
            "b) L or l",
            "c) Either F or for L or l",
            "d) Neither F or for L or l"
        ],
        "Answer": " Answer: a\nExplanation: Either F or f can be used to indicate single precision values. "
    },
    {
        "id": 171,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> f1 <span class=\"sy1\">=</span> <span class=\"nu16\">0.5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> f2 <span class=\"sy1\">=</span> <span class=\"nu16\">0.5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f1 <span class=\"sy1\">==</span> <span class=\"nu17\">0.5f</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"equal\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"not equal\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) equal",
            "b) not equal",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: 0.5f results in 0.5 to be stored in floating point representations.\nOutput:\n\n\n$ g++ float.cpp\n$ a.out\nequal\n\n\n"
    },
    {
        "id": 172,
        "Question": "Which is correct with respect to the size of the data types?",
        "Options": [
            "a) char > int < float",
            "b) int < char > float",
            "c) char < int < float",
            "d) char < int < double"
        ],
        "Answer": " Answer: d\nExplanation: The char has less bytes than int and int has less bytes than double whereas int and float can potentially have same sizes. "
    },
    {
        "id": 173,
        "Question": "The size of an object or a type can be determined using which operator?",
        "Options": [
            "a) malloc",
            "b) sizeof",
            "c) malloc",
            "d) calloc"
        ],
        "Answer": " Answer: b\nExplanation: The sizeof operator gives the size of the object or type. "
    },
    {
        "id": 174,
        "Question": "It is guaranteed that a ____ has at least 8 bits and a ____ has at least 16 bits.",
        "Options": [
            "a) int, float",
            "b) char, int",
            "c) bool, char",
            "d) char, short"
        ],
        "Answer": " Answer: d\nExplanation: char types in C++ require atleast 8 bits and short requires atleast 16 bits, whereas for bool only 1 bit suffices and both int and float requires atleast 32 bits. "
    },
    {
        "id": 175,
        "Question": "Implementation dependent aspects about an implementation can be found in ____",
        "Options": [
            "a) <implementation>",
            "b) <limits>",
            "c) <limit>",
            "d) <numeric>"
        ],
        "Answer": " Answer: b\nExplanation: The limit header holds the details of the machine dependent details. "
    },
    {
        "id": 176,
        "Question": "Size of C++ objects are expressed in terms of multiples of the size of a ____ and the size of a char is _______",
        "Options": [
            "a) char, 1",
            "b) int, 1",
            "c) float, 8",
            "d) char, 4"
        ],
        "Answer": " Answer: a\nExplanation: Each object in C++ is expressed in terms of char type and size of char type is one byte. "
    },
    {
        "id": 177,
        "Question": "Identify the incorrect option.",
        "Options": [
            "a) 1 <= sizeof(bool) <= sizeof(long)",
            "b) sizeof(float) <= sizeof(double) <= sizeof(long double)",
            "c) sizeof(char) <= sizeof(long) <=sizeof(wchar_t)",
            "d) sizeof(N) = sizeof(signed N) = sizeof(unsigned N)"
        ],
        "Answer": " Answer: c\nExplanation: sizeof(char) <= sizeof(wchar_t) <= sizeof(long). "
    },
    {
        "id": 178,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"nu12\">0x20</span> <span class=\"sy2\">+</span> <span class=\"nu8\">020</span> <span class=\"sy2\">+</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 4",
            "c) Depends on compiler",
            "d) Garbage"
        ],
        "Answer": " Answer: c\nExplanation: The sum of three numbers are belongs to different number systems, so the result is type casted into integer.\nOutput:\n\n\n\t\n\n$ g++ size.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 179,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">static</span> <span class=\"kw4\">double</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 2",
            "c) 8",
            "d) garbage"
        ],
        "Answer": " Answer: c\nExplanation: The size of the double data type is 8.\n\n\n$ g++ size1.cpp\n$ a.out\n8\n\n\n"
    },
    {
        "id": 180,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num1 <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> num2 <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>num1 <span class=\"sy2\">+</span> num2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) garbage"
        ],
        "Answer": " Answer: b\nExplanation: In this program, integer is converted into float. Therefore the result of num1 and num2 is float. And it is returning the size of the float.\nOutput:\n\n\n$ g++ size2.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 181,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"sy2\">++</span>a <span class=\"sy2\">+</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2 6",
            "b) 4 6",
            "c) 2 5",
            "d) 4 5"
        ],
        "Answer": " Answer: d\nExplanation: The a as a integer will be converted to float while calculating the size. The value of any variable doesn’t modify inside sizeof operator. Hence value of variable a will remain 5.\nOutput:\n\n\n$ g++ size3.cpp\n$ a.out\n4 5\n\n\n "
    },
    {
        "id": 182,
        "Question": "10. What will be the output of the following C++ code (in 32-bit systems)?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 4 4",
            "b) 1 4 8",
            "c) 1 8 8",
            "d) 1 8 2"
        ],
        "Answer": " Answer: a\nExplanation: Character is 1 byte, integer 4 bytes and float 4 bytes."
    },
    {
        "id": 183,
        "Question": "Which of the following will not return a value?",
        "Options": [
            "a) null",
            "b) void",
            "c) empty",
            "d) free"
        ],
        "Answer": " Answer: b\nExplanation: Because void represents an empty set of values so nothing will be return. "
    },
    {
        "id": 184,
        "Question": "______________ have the return type void.",
        "Options": [
            "a) all functions",
            "b) constructors",
            "c) destructors",
            "d) none of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Constructor creates an Object and Destructor destroys the object. They are not supposed to return anything, not even void."
    },
    {
        "id": 185,
        "Question": "3. What does the following statement mean?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">void</span> a<span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) variable a is of type void",
            "b) a is an object of type void",
            "c) declares a variable with value a",
            "d) flags an error"
        ],
        "Answer": " Answer: d\nExplanation: There are no void objects. "
    },
    {
        "id": 186,
        "Question": "Choose the incorrect option.",
        "Options": [
            "a) void is used when the function does not return a value",
            "b) void is also used when the value of a pointer is null",
            "c) void is used as the base type for pointers to objects of unknown type",
            "d) void is a special fundamental type"
        ],
        "Answer": " Answer: b\nExplanation: void fundamental type is used in the cases of a and c. "
    },
    {
        "id": 187,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) compile time error",
            "c) runtime error",
            "d) 40"
        ],
        "Answer": " Answer: b\nExplanation: void will not accept any values to its type. "
    },
    {
        "id": 188,
        "Question": "Identify the incorrect option.",
        "Options": [
            "a) enumerators are constants",
            "b) enumerators are user-defined types",
            "c) enumerators are same as macros",
            "d) enumerator values start from 0 by default"
        ],
        "Answer": " Answer: c\nExplanation: Enumerators are used in order to create our own types whereas macros are textual substitutions. "
    },
    {
        "id": 189,
        "Question": "In which type do the enumerators are stored by the compiler?",
        "Options": [
            "a) string",
            "b) integer",
            "c) float",
            "d) string & float"
        ],
        "Answer": " Answer: b\nExplanation: In C++, enumerations are stored as integers by the compiler starting with 0."
    },
    {
        "id": 190,
        "Question": "To which of these enumerators can be assigned?",
        "Options": [
            "a) integer",
            "b) negative",
            "c) enumerator",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Since enumerators evaluate to integers, and integers can be assigned to enumerators, enumerators can be assigned to other enumerators. "
    },
    {
        "id": 191,
        "Question": "What will happen when defining the enumerated type?",
        "Options": [
            "a) it will not allocate memory",
            "b) it will allocate memory",
            "c) it will not allocate memory to its variables",
            "d) allocate memory to objects"
        ],
        "Answer": " Answer: a\nExplanation: Enumerator will allocate the memory when its variables are defined. "
    },
    {
        "id": 192,
        "Question": "Which variable does equals in size with enum variable?",
        "Options": [
            "a) int variable",
            "b) float variable",
            "c) string variable",
            "d) float & string variable"
        ],
        "Answer": " Answer: a\nExplanation: The enum variable is converted to an integer and stored by the compiler. So both are equal in size. "
    },
    {
        "id": 193,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">enum</span>  cat </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp <span class=\"sy1\">=</span> <span class=\"nu0\">7</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> age <span class=\"sy1\">=</span> <span class=\"nu0\">14</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        age <span class=\"sy2\">/</span><span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"If you were cat, you would be \"</span> <span class=\"sy1\">&lt;&lt;</span> age <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) If you were cat, you would be 5",
            "b) If you were cat, you would be 2",
            "c) If you were cat, you would be 7",
            "d) If you were cat, you would be 9"
        ],
        "Answer": " Answer: b\nExplanation:  The age will be divided by using compound assignment operator and so it will return the age of the cat according to your age.\n\n\n\t\n\n$ g++ enum1.cpp\n$ a.out\nIf you were cat, you would be 2\n\n\n"
    },
    {
        "id": 194,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">enum</span> test </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A <span class=\"sy1\">=</span> <span class=\"nu0\">32</span>, B, C</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> A <span class=\"sy1\">&lt;&lt;</span> B<span class=\"sy1\">&lt;&lt;</span> C<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 323334",
            "b) 323232",
            "c) 323130",
            "d) 323134"
        ],
        "Answer": " Answer: a\nExplanation: If we not assigned any value to enum variable means, then the next number to initialized number will be allocated to the variable.\nOutput:\n\n\n$ g++ enum2.cpp\n$ a.out\n323334\n\n\n"
    },
    {
        "id": 195,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">enum</span> colour </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        green, red, blue, white, yellow, pink</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> green<span class=\"sy1\">&lt;&lt;</span> red<span class=\"sy1\">&lt;&lt;</span> blue<span class=\"sy1\">&lt;&lt;</span> white<span class=\"sy1\">&lt;&lt;</span> yellow<span class=\"sy1\">&lt;&lt;</span> pink<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 012345",
            "b) 123456",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: The enumerator values start from zero if it is unassigned.\nOutput:\n\n\n$ g++ enum3.cpp\n$ a.out\n012345\n\n\n"
    },
    {
        "id": 196,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">enum</span> channel <span class=\"br0\">{</span>star, sony, zee<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">enum</span> symbol <span class=\"br0\">{</span>hash, star<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> star<span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> zee<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 012",
            "b) 123",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: c\nExplanation: Enumeration variable ‘star’ appears two times in main() which causes the error. An enumaration constant must be unique within the scope. "
    },
    {
        "id": 197,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">enum</span> month </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            JAN <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC</pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> MAR<span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> NOV<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 01234567891011",
            "b) 123456789101112",
            "c) 34567891011",
            "d) 123456789"
        ],
        "Answer": " Answer: c\nExplanation: We are getting the values from march to november and printing its concern number. "
    },
    {
        "id": 198,
        "Question": "1. Choose the correct option.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">    <span class=\"kw4\">extern</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n    <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) both 1 and 2 declare i",
            "b) 1 declares the variable i and 2 defines i",
            "c) 1 declares and defines i, 2 declares i",
            "d) 1 declares i,2 declares and defines i"
        ],
        "Answer": " Answer: d\nExplanation: The keyword extern is not a definition and is not allocated storage until it is initialized. "
    },
    {
        "id": 199,
        "Question": "2. Pick the right option.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">Statement 1: A definition is also a declaration.\nStatement 2: An identifier can be declared just once.</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Statement 1 is true, Statement 2 is false",
            "b) Statement 2 is true, Statement 1 is false",
            "c) Both are false",
            "d) Both are true"
        ],
        "Answer": " Answer:  b\nExplanation: An identifier can be declared many times must be defined just once. "
    },
    {
        "id": 200,
        "Question": "",
        "Options": [
            "a) iii and iv only",
            "b) ii and iii only",
            "c) only iv",
            "d) ii, iii and iv"
        ],
        "Answer": " Answer: c\nExplanation: No extern are allowed for class declarations. "
    },
    {
        "id": 201,
        "Question": "4. Pick the right option.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">Statement 1: Global values are not initialized by the stream.\nStatement 2: Local values are implicitly initialised to 0.</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Statement 1 is true, Statement 2 is false",
            "b) Statement 2 is true, Statement 1 is false",
            "c) Both are false",
            "d) Both are true"
        ],
        "Answer": " Answer: c\nExplanation: Global values are implicitly initialised to 0, but local values have to be initialised by the system. "
    },
    {
        "id": 202,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> g <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            b <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            a <span class=\"sy1\">=</span> <span class=\"nu0\">35</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            g <span class=\"sy1\">=</span> <span class=\"nu0\">65</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">           <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> g<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> g<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2035655065",
            "b) 2035655035",
            "c) 2035635065",
            "d) 2035645065"
        ],
        "Answer": " Answer: a\nExplanation: The local values of a and g within the block are more dominant than the global values.\nOutput:\n$ g++ dec1.cpp\n$ a.out\n2035655065 "
    },
    {
        "id": 203,
        "Question": "Can two functions declare variables(non static) with the same name?",
        "Options": [
            "a) No",
            "b) Yes",
            "c) Yes, but not a very efficient way to write programs",
            "d) No, it gives a runtime error"
        ],
        "Answer": " Answer: c\nExplanation: We can declare variables with the same name in two functions because their scope lies within the function. "
    },
    {
        "id": 204,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> addprint<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        s<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        addprint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        addprint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        addprint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 234",
            "b) 111",
            "c) 123",
            "d) 235"
        ],
        "Answer": " Answer: a\nExplanation: The variable that is declared as static has a file scope.\nOutput:\n\n\n$ g++ dec2.cpp\n$ a.out\n234\n\n\n"
    },
    {
        "id": 205,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">               <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0123456789",
            "b) 123456789",
            "c) 0",
            "d) error"
        ],
        "Answer": " Answer: d\nExplanation: We will get compilation error because ‘i’ is an undeclared identifier. "
    },
    {
        "id": 206,
        "Question": "9. Identify the incorrect statements.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">    <span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n    <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span><span class=\"br0\">(</span>var <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//statement 1</span>\n    <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>ptr2 <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>var<span class=\"sy4\">;</span> <span class=\"co1\">//statement 2</span>\n    <span class=\"sy3\">&amp;&amp;</span>var <span class=\"sy1\">=</span> <span class=\"nu0\">40</span><span class=\"sy4\">;</span> <span class=\"co1\">//statement 3</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Statement 1 and 2 are wrong",
            "b) Statement 2 and 3 are wrong",
            "c) Statement 1 and 3 are wrong",
            "d) Statement 1, 2 and 3 are wrong"
        ],
        "Answer": " Answer: c\nExplanation: In statement 1 lvalue is required as unary ‘&’ operand and in statement 3 lvalue is required as left operand."
    },
    {
        "id": 207,
        "Question": "10. Identify the type of variables.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">    <span class=\"kw4\">typedef</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> CHAR<span class=\"sy4\">;</span>\n    CHAR p,q<span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) char*",
            "b) char",
            "c) CHAR",
            "d) unknown"
        ],
        "Answer": " Answer: a\nExplanation: The statement makes CHAR a synonym for char*. "
    },
    {
        "id": 208,
        "Question": "1. What does the following statement mean?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>fp<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">)</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) pointer to a pointer",
            "b) pointer to an array of chars",
            "c) pointer to function taking a char* argument and returns an int",
            "d) function taking a char* argument and returning a pointer to int"
        ],
        "Answer": " Answer: c\nExplanation: The (*fn) represents a pointer to a function and char* as arguments and returning int from the function. So according to that, the above syntax represents a pointer to a function taking a char* as an argument and returning int. "
    },
    {
        "id": 209,
        "Question": "The operator used for dereferencing or indirection is ____",
        "Options": [
            "a) *",
            "b) &",
            "c) ->",
            "d) –>>"
        ],
        "Answer": " Answer: a\nExplanation: * is used as dereferencing operator, used to read value stored at the pointed address. "
    },
    {
        "id": 210,
        "Question": "",
        "Options": [
            "a) x is a pointer to a string, y is a string",
            "b) y is a pointer to a string, x is a string",
            "c) both x and y are pointers to string types",
            "d) y is a pointer to a string"
        ],
        "Answer": " Answer: a\nExplanation: * is to be grouped with the variables, not the data types. "
    },
    {
        "id": 211,
        "Question": "Which one of the following is not a possible state for a pointer.",
        "Options": [
            "a) hold the address of the specific object",
            "b) point one past the end of an object",
            "c) zero",
            "d) point to a type"
        ],
        "Answer": " Answer: d\nExplanation: A pointer can be in only 3 states a, b and c. "
    },
    {
        "id": 212,
        "Question": "Which of the following is illegal?",
        "Options": [
            "a) int *ip;",
            "b) string s, *sp = 0;",
            "c) int i; double* dp = &i;",
            "d) int *pi = 0;"
        ],
        "Answer": " Answer: c\nExplanation: dp is initialized int value of i. "
    },
    {
        "id": 213,
        "Question": "6. What will happen in the following C++ code snippet?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">100</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a, <span class=\"sy2\">*</span>q <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   p <span class=\"sy1\">=</span> q<span class=\"sy4\">;</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) b is assigned to a",
            "b) p now points to b",
            "c) a is assigned to b",
            "d) q now points to a"
        ],
        "Answer": " Answer: b\nExplanation: Assigning to reference changes the object to which the reference is bound. "
    },
    {
        "id": 214,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, c <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>arr<span class=\"br0\">[</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"sy3\">&amp;</span>a, <span class=\"sy3\">&amp;</span>b, <span class=\"sy3\">&amp;</span>c<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) 15",
            "d) it will return some random number"
        ],
        "Answer": " Answer: d\nExplanation: Array element cannot be address of auto variable. It can be address of static or extern variables. "
    },
    {
        "id": 215,
        "Question": "The correct statement for a function that takes pointer to a float, a pointer to a pointer to a char and returns a pointer to a pointer to a integer is ____________",
        "Options": [
            "a) int **fun(float**, char**)",
            "b) int *fun(float*, char*)",
            "c) int **fun(float*, char**)",
            "d) int ***fun(*float, **char)"
        ],
        "Answer": " Answer: c\nExplanation: Function that takes pointer to a float, a pointer to a pointer to a char and returns a pointer to a pointer to a integer is int **fun(float*, char**)."
    },
    {
        "id": 216,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> arr<span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"sy2\">*</span><span class=\"br0\">(</span>arr <span class=\"sy2\">+</span> i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">65</span> <span class=\"sy2\">+</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">*</span><span class=\"br0\">(</span>arr <span class=\"sy2\">+</span> i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> arr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ABCDEFGHIJ",
            "b) AAAAAAAAAA",
            "c) JJJJJJJJ",
            "d) AAAAAAJJJJ"
        ],
        "Answer": " Answer: a\nExplanation: Each time we are assigning 65 + i. In first iteration i = 0 and 65 is assigned. So it will print from A to J.\n$ g++ point1.cpp\n$ a.out\nABCDEFGHIJ\n"
    },
    {
        "id": 217,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> Str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"abcdefg\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ptr <span class=\"sy1\">=</span> Str<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ptr <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) fg",
            "b) cdef",
            "c) defg",
            "d) abcd"
        ],
        "Answer": " Answer: a\nExplanation: Pointer ptr points to string ‘fg’. So it prints fg.\nOutput:\n\n\n$ g++ point.cpp\n$ a.out\nfg\n\n\n"
    },
    {
        "id": 218,
        "Question": "Which of the following correctly declares an array?",
        "Options": [
            "a) int array[10];",
            "b) int array;",
            "c) array{10};",
            "d) array array[10];"
        ],
        "Answer": "  Answer: a\nExplanation: Because array variable and values need to be declared after the datatype only.\n"
    },
    {
        "id": 219,
        "Question": "What is the index number of the last element of an array with 9 elements?",
        "Options": [
            "a) 9",
            "b) 8",
            "c) 0",
            "d) Programmer-defined"
        ],
        "Answer": "  Answer: b\nExplanation: Because the first element always starts at 0. So it is on 8 position.\n"
    },
    {
        "id": 220,
        "Question": "What is the correct definition of an array?",
        "Options": [
            "a) An array is a series of elements of the same type in contiguous memory locations",
            "b) An array is a series of element",
            "c) An array is a series of elements of the same type placed in non-contiguous memory locations",
            "d) An array is an element of the different type"
        ],
        "Answer": " Answer: a\nExplanation: Correct definition of an array is An array is a series of elements of the same type in contiguous memory locations.\n"
    },
    {
        "id": 221,
        "Question": "Which of the following accesses the seventh element stored in array?",
        "Options": [
            "a) array[6];",
            "b) array[7];",
            "c) array(7);",
            "d) array;"
        ],
        "Answer": "  Answer: a\nExplanation: The array location starts from zero, So it can accessed by array[6].\n"
    },
    {
        "id": 222,
        "Question": "Which of the following gives the memory address of the first element in array?",
        "Options": [
            "a) array[0];",
            "b) array[1];",
            "c) array(2);",
            "d) array;"
        ],
        "Answer": " Answer: d\nExplanation: To get the address of ith index of an array, we use following syntax (arr + i). So as we need address of first index we will use (arr + 0) equivalent to arr.\n"
    },
    {
        "id": 223,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> array1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1200</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">2300</span>, <span class=\"nu0\">1230</span>, <span class=\"nu0\">1543</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> array2<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">12</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> temp, result <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>temp <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> temp <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> temp<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            result <span class=\"sy2\">+</span><span class=\"sy1\">=</span> array1<span class=\"br0\">[</span>temp<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>temp <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> temp <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> temp<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            result <span class=\"sy2\">+</span><span class=\"sy1\">=</span> array2<span class=\"br0\">[</span>temp<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6553",
            "b) 6533",
            "c) 6522",
            "d) 12200"
        ],
        "Answer": " Answer: b\nExplanation: In this program we are adding the every element of two arrays. Finally we got output as 6533.\nOutput:\n\n\n\t\n\n$ g++ array.cpp\n$ a.out\n6533\n\n\n"
    },
    {
        "id": 224,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> array<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n, result <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            result <span class=\"sy2\">+</span><span class=\"sy1\">=</span> array<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 25",
            "b) 26",
            "c) 27",
            "d) 21"
        ],
        "Answer": "  Answer: c\nExplanation: We are adding all the elements in the array and printing it. Total elements in the array is 7, but our for loop will go beyond 7 and add a garbage value.\n"
    },
    {
        "id": 225,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, c <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"sy3\">&amp;</span>a, <span class=\"sy3\">&amp;</span>b, <span class=\"sy3\">&amp;</span>c<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>arr<span class=\"br0\">[</span><span class=\"sy2\">*</span>arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">-</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 18",
            "c) garbage value",
            "d) compile time error"
        ],
        "Answer": "  Answer: d\nExplanation: The conversion is invalid in this array. So it will arise error. The following compilation error will be raised:\ncannot convert from ‘int *’ to ‘int’\nThis is because &a, &b and &c represent int* whereas the array defined is of int type.\n"
    },
    {
        "id": 226,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"ABC\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ABC",
            "b) ABCD",
            "c) AB",
            "d) AC"
        ],
        "Answer": "  Answer: a\nExplanation: We are just printing the values of first 3 values.\n\n\n$ g++ array.cpp\n$ a.out\nABC\n\n\n"
    },
    {
        "id": 227,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> array<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"br0\">[</span>array<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) -15",
            "b) -30",
            "c) compile time error",
            "d) garbage value"
        ],
        "Answer": "  Answer: b\nExplanation: It’s just printing the negative value of the concern element.\n\n\n$ g++ array.cpp\n$ a.out\n-30\n\n\n"
    },
    {
        "id": 228,
        "Options": [
            "a) p is pointer to function",
            "b) p is array of pointer to function",
            "c) p is pointer to such function which return type is the array",
            "d) p is pointer to array of function"
        ],
        "Answer": " Answer: b\nExplanation: In the above declaration the variable p is the array, not the pointer.\n"
    },
    {
        "id": 229,
        "Question": "What is size of generic pointer in C++ (in 32-bit platform)?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) 0"
        ],
        "Answer": " Answer: b\nExplanation: Size of any type of pointer is 4 bytes in 32-bit platforms.\n"
    },
    {
        "id": 230,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">21</span>, <span class=\"nu0\">24</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"br0\">(</span>a <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 15 18 21",
            "b) 21 21 21",
            "c) 24 24 24",
            "d) Compile time error"
        ],
        "Answer": " Answer: b\nExplanation: a[1][2] means 1 * (4)+2 = 6th element of an array starting from zero.\nOutput:\n\n\n        \n\n$ g++ point.cpp\n$ a.out\n21 21 21\n\n\n"
    },
    {
        "id": 231,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"C++\"</span>, <span class=\"st0\">\"Java\"</span>, <span class=\"st0\">\"VBA\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>ptr<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>arr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>ptr<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ava",
            "b) java",
            "c) c++",
            "d) compile time error"
        ],
        "Answer": " Answer: a\nExplanation: In this program we are moving the pointer from first position to second position and printing the remaining value.\nOutput:\n\n\n\t\n\n$ g++ point1.cpp\n$ a.out\nava\n\n\n"
    },
    {
        "id": 232,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"br0\">(</span>arr <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 6",
            "d) 7"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are making the pointer point to next value and printing it.\n\n\n$ g++ point3.cpp\n$ a.out\n5\n\n\n"
    },
    {
        "id": 233,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"br0\">(</span>arr <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> arr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 5",
            "c) address of arr",
            "d) 7"
        ],
        "Answer": " Answer: c\nExplanation: As we counted to print only arr, it will print the address of the array.\nOutput:\n\n\n$ g++ point2.cpp\n$ a.out\n0xbfb1cff\n\n\n"
    },
    {
        "id": 234,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> numbers<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       p <span class=\"sy1\">=</span> numbers<span class=\"sy4\">;</span>  <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       p<span class=\"sy2\">++</span><span class=\"sy4\">;</span>  <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>numbers<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>  <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       p <span class=\"sy1\">=</span> numbers <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span>  <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">40</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       p <span class=\"sy1\">=</span> numbers<span class=\"sy4\">;</span>  <span class=\"sy2\">*</span><span class=\"br0\">(</span>p <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">           <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numbers<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10,20,30,40,50,",
            "b) 1020304050",
            "c) compile error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are just assigning a value to the array and printing it and immediately dereferencing it.\nOutput:\n\n\n$ g++ point4.cpp\n$ a.out\n10,20,30,40,50,\n\n\n"
    },
    {
        "id": 235,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"br0\">(</span>arr <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>arr <span class=\"sy2\">+</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12",
            "b) 5",
            "c) 13",
            "d) error"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are adding the value 9 to the initial value of the array, So it’s printing as 13.\nOutput:\n\n\n$ g++ point5.cpp\n$ a.out\n13\n\n\n"
    },
    {
        "id": 236,
        "Question": "The constants are also called as _____________",
        "Options": [
            "a) const",
            "b) preprocessor",
            "c) literals",
            "d) variables"
        ],
        "Answer": " Answer: c\nExplanation: Other name for Constants are literals. "
    },
    {
        "id": 237,
        "Question": "What are the parts of the literal constants?",
        "Options": [
            "a) integer numerals",
            "b) floating-point numerals",
            "c) strings and boolean values",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Because these are the types used to declare variables and so these can be declared as constants. "
    },
    {
        "id": 238,
        "Question": "How are the constants declared?",
        "Options": [
            "a) const keyword",
            "b) #define preprocessor",
            "c) both const keyword and #define preprocessor",
            "d) $define"
        ],
        "Answer": " Answer: c\nExplanation: The const will declare with a specific type value and #define is used to declare user-defined constants. "
    },
    {
        "id": 239,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span>  <span class=\"kw4\">const</span>  p <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">++</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 6",
            "c) Error",
            "d) 8"
        ],
        "Answer": " Answer: c\nExplanation: We cannot modify a constant integer value. "
    },
    {
        "id": 240,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#define PI 3.14159</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> circle<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        circle <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy2\">*</span> PI <span class=\"sy2\">*</span> r<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> circle<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12.5664",
            "b) 13.5664",
            "c) 10",
            "d) 15"
        ],
        "Answer": "  Answer: a\nExplanation: In this program, we are finding the area of the circle by using concern formula.\nOutput:\n\n\n\t\n\n$ g++ cons.cpp\n$ a.out\n12.5664\n\n\n"
    },
    {
        "id": 241,
        "Question": "Which of the following statement is not true about preprocessor directives?",
        "Options": [
            "a) These are lines read and processed by the preprocessor",
            "b) They do not produce any code by themselves",
            "c) These must be written on their own line",
            "d) They end with a semicolon"
        ],
        "Answer": "  Answer: d\nExplanation: No terminating character required for preprocessor directives statements. "
    },
    {
        "id": 242,
        "Question": "",
        "Options": [
            "a) Declares a variable a with 100 as its initial value",
            "b) Declares a construction a with 100 as its initial value",
            "c) Declares a constant a whose value will be 100",
            "d) Constructs an integer type variable with an as identifier and 100 as the value"
        ],
        "Answer": "  Answer: c\nExplanation: Because the const is used to declare non-changeable values only. "
    },
    {
        "id": 243,
        "Question": "The difference between x and ‘x’ is?",
        "Options": [
            "a) The first one refers to a variable whose identifier is x and the second one refers to the character constant x",
            "b) The first one is a character constant x and the second one is the string literal x",
            "c) Both are same",
            "d) Both are string literal"
        ],
        "Answer": "  Answer: a\nExplanation: In a C++ code, names with quotes like ‘x’ represent a character or string(in case of a collection of characters) whereas without quotes they represent an identifier. "
    },
    {
        "id": 244,
        "Question": "How to declare a wide character in the string literal?",
        "Options": [
            "a) L prefix",
            "b) l prefix",
            "c) W prefix",
            "d) Z prefix"
        ],
        "Answer": "  Answer: a\nExplanation: It can turn this as the wide character instead of narrow characters. "
    },
    {
        "id": 245,
        "Question": "Which value can we not assign to reference?",
        "Options": [
            "a) integer",
            "b) floating",
            "c) unsigned",
            "d) null"
        ],
        "Answer": " Answer: d\nExplanation: If it can be assigned with a null value means, it is a copy of the pointer. "
    },
    {
        "id": 246,
        "Question": "Identify the incorrect statement.",
        "Options": [
            "a) Reference is the alternate name of the object",
            "b) A reference value once defined can be reassigned",
            "c) A reference value once defined cannot be reassigned",
            "d) Reference is the alternate name of the variable"
        ],
        "Answer": " Answer: b\nExplanation: Reference is a thing which points to the valid memory address, so it can’t be redesigned."
    },
    {
        "id": 247,
        "Question": "Which reference modifier is used to define the reference variable?",
        "Options": [
            "a) &",
            "b) $",
            "c) #",
            "d) @"
        ],
        "Answer": " Answer: a\nExplanation: & aka ‘ampersand’ used to define a reference variable. "
    },
    {
        "id": 248,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>a, <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        swap<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"In main \"</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>a, <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"In swap \"</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) In swap 105 In main 105",
            "b) In swap 105 In main 510",
            "c) In swap 510 In main 105",
            "d) In swap 510 In main 510"
        ],
        "Answer": " Answer: a\nExplanation: As the function is called by reference i.e. all the changes are done directly into the memories of a and b. Therefore changes made to a and b in swap function is reflected back to main function. Hence the values of a and b in swap as well as in main function is changed.\nOutput:\n\n\n        \n\n$ g++ ref.cpp\n$ a.out\nIn swap 105 In main 105\n\n\n"
    },
    {
        "id": 249,
        "Question": "What does a reference provide?",
        "Options": [
            "a) Alternate name for the class",
            "b) Alternate name for the variable",
            "c) Alternate name for the pointer",
            "d) Alternate name for the object"
        ],
        "Answer": " Answer: b\nExplanation: Because we are pointing memory address using the temp variable. "
    },
    {
        "id": 250,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span> aref <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The value of a is \"</span> <span class=\"sy1\">&lt;&lt;</span> aref<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 9",
            "b) 10",
            "c) error",
            "d) 11"
        ],
        "Answer": " Answer: b\nExplanation: The value is declared and it isincrementedrement, so it’s value is 10.\n\n\n$ g++ ref1.cpp\n$ a.out\n10\n\n\n "
    },
    {
        "id": 251,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> print <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy2\">*</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span> a <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello world\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        print<span class=\"br0\">(</span><span class=\"kw2\">const_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span> <span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Hello world",
            "b) Hello",
            "c) world",
            "d) compile time error"
        ],
        "Answer": " Answer: a\nExplanation: In this program we used the concept of constant casting to cast the variable and printing it.\nOutput:\n\n\n$ g++ ref2.cpp\n$ a.out\nHello world\n\n\n "
    },
    {
        "id": 252,
        "Question": "Identify the correct sentence regarding inequality between reference and pointer.",
        "Options": [
            "a) we can not create the array of reference",
            "b) we can create the Array of reference",
            "c) we can use reference to reference",
            "d) we can use variable"
        ],
        "Answer": " Answer: a\nExplanation: It is not allowed in C++ to make an array of references. To test check following array:\nint &arr[] = {&a, &b, &c};\nThis will give an error. "
    },
    {
        "id": 253,
        "Question": "What are the references in C++?",
        "Options": [
            "a) An alternative name for already existing variables",
            "b) A pointer to a variable",
            "c) A new type of variables",
            "d) A new type of constant variable"
        ],
        "Answer": "Answer: a\nExplanation: References are an alternative name for an already defined variable. They are different from pointers."
    },
    {
        "id": 254,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>q <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>q<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Run-time error",
            "c) Segmentation fault",
            "d) Compile-time error"
        ],
        "Answer": "Answer: d\nExplanation: References require are other names for variables not for a constant literal. No such assignment are allowed in C++. "
    },
    {
        "id": 255,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>p<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"sy3\">&amp;</span>p <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>p<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Every reference should be initialized during its declaration but as p is not initialized here therfore the program gives error."
    },
    {
        "id": 256,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>p <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>p<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Run-time error",
            "c) Segmentation fault",
            "d) Compile-time error"
        ],
        "Answer": "Answer: a\nExplanation: In this program, every thing is correct so the program runs perfectly and prints the 5 as output."
    },
    {
        "id": 257,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>q <span class=\"sy1\">=</span> p<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>p<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Run-time error",
            "c) Segmentation fault",
            "d) Compile-time error"
        ],
        "Answer": "Answer: d\nExplanation: A pointer cannot be directly assigned to references, because types of pointer(int*) and reference(int) are different here. You need to think before assigning two variable of different types otherwise the program throws error."
    },
    {
        "id": 258,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>q<span class=\"br0\">)</span> <span class=\"sy1\">=</span> p<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>q<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Address of pointer a",
            "c) Address of pointer p",
            "d) Error"
        ],
        "Answer": "Answer: b\nExplanation: The program is correct so the the program runs perfectly. It is way to assign pointers to references. The program prints the address of a because it is an alias for pointer p and pointer p stores the address of a therefore answer is address of a."
    },
    {
        "id": 259,
        "Question": "What is the difference between references and pointers?",
        "Options": [
            "a) References are an alias for a variable whereas pointer stores the address of a variable",
            "b) References and pointers are similar",
            "c) References stores address of variables whereas pointer points to variables",
            "d) Pointers are an alias for a variable whereas references stores the address of a variable"
        ],
        "Answer": "Answer: a\nExplanation: References are an alias/another name for a variable whereas pointer stores the address of a variable. Pointers need to be deference before use whereas references need not."
    },
    {
        "id": 260,
        "Question": "Pick the correct statement about references in C++.",
        "Options": [
            "a) References stores the address of variables",
            "b) References and variables both have the same address",
            "c) References use dereferencing operator(*) to access the value of variable its referencing",
            "d) References were also available in C"
        ],
        "Answer": "Answer: b\nExplanation: References and variable it is referring to shares the same address. References do not consume extra address. References do not store the address of other variables. No dereferencing operator required while using references. References are not available in C++."
    },
    {
        "id": 261,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>q <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>p<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>q<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Address of a followed by 5 in next line",
            "b) Address of p followed by 5 in next line",
            "c) Address of a followed by Address of a in next line",
            "d) Address of p followed by Address of q in next line"
        ],
        "Answer": "Answer: a\nExplanation: Pointer p stores the address of variable whereas q is alias for variable a therefore when p is printed it prints the address of a and when q is printed value of a is printed."
    },
    {
        "id": 262,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>q <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"sy2\">*</span>p<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"sy2\">*</span>q<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Address of a followed by 5 in next line",
            "b) Address of p followed by 5 in next line",
            "c) Run time error",
            "d) Compile time error"
        ],
        "Answer": "Answer: d\nExplanation: References uses no * operator to access the value of variables it is refering to therefore no program gives error as we are using * operator."
    },
    {
        "id": 263,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>q <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>q<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) NULL",
            "b) 0",
            "c) Address of NULL",
            "d) Error"
        ],
        "Answer": "Answer: d\nExplanation: Both variable and reference shares the same addres so the output will be two times the address of a, because references are other name for same variable not a new variable with separate memory."
    },
    {
        "id": 264,
        "Question": "Pick the correct statement about references.",
        "Options": [
            "a) References can be assigned value NULL",
            "b) References once assigned cannot be changed to refer another variable",
            "c) Reference should not be initialized when created",
            "d) Reference is the same as pointers"
        ],
        "Answer": "Answer: d\nExplanation: NULL cannot be assigned to references therefore the program gives error. Here it is an int reference and NULL is not an int therefore cannot be assigned to this reference."
    },
    {
        "id": 265,
        "Question": "Which of the following operator is used while declaring references?",
        "Options": [
            "a) *",
            "b) &",
            "c) ^",
            "d) ->"
        ],
        "Answer": "Answer: b\nExplanation: References are should be initialized during its creation and once assigned cannot be changed to refer another variable. References cannot be assigned NULL value. References and pointers are two different concepts."
    },
    {
        "id": 266,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> temp <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n\ta <span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\tfunc<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: & operator is used for assigning references."
    },
    {
        "id": 267,
        "Question": "1. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>x, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n   c  <span class=\"sy1\">=</span> c <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n   x <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n   <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x, c<span class=\"br0\">)</span> <span class=\"sy2\">*</span> x<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>f<span class=\"br0\">(</span>a,a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 343",
            "b) 336",
            "c) 120",
            "d) 840"
        ],
        "Answer": "Answer: a\nExplanation: In this program as one parametere is passed by value and other is passed by reference so after 4 calls when c == 0, then the value of x = 7 and as x is passed by reference so all the changes will be reflected back in all the previous calls hence the answer 1*7*7*7 = 343."
    },
    {
        "id": 268,
        "Question": "Which of the following is incorrect?",
        "Options": [
            "a) References cannot be NULL",
            "b) A reference must be initialized when declared",
            "c) Once a reference is declared, it cannot be modified later to reference another object i.e. it cannot be reset",
            "d) References cannot refer to a constant value"
        ],
        "Answer": "Answer: d\nExplanation: C++ allows references to refer to a constant value by making constant references. For example:\nconst int a = 5;\nconst int &ref = a;\nis an example of that."
    },
    {
        "id": 269,
        "Question": "Which of the following function must use reference.",
        "Options": [
            "a) Assignment operator function",
            "b) Copy Constructor",
            "c) Destructor",
            "d) Parameterized constructor"
        ],
        "Answer": "Answer: b\nExplanation: We don’t need references in case of assignment, destructor or constructor. But in case of a copy constructor, we need to call copy constructor because if we use pass by value then as copy constructor itself is a function. So if we pass an argument bypass by value method in a copy constructor, a call to copy constructor would be made to again call copy constructor which becomes an endless chain of calls. Therefore compiler doesn’t allow parameters to be passed by value."
    },
    {
        "id": 270,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>fun<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    fun<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> fun<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 30",
            "b) 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: A function returning value by reference can be used as lvalue i.e. it can be used on the left side of an expression. Here when we are doing fun() = 30 then we are changing the value of x(i.e. value returning) to and as x is static therefore it will not be initialized again so the value of x becomes 30 hence the output is 30."
    },
    {
        "id": 271,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>fun<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    fun<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> fun<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 30",
            "b) 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: d\nExplanation: In this case we are trying to assign 30 to a local variable which is returned form the function func() which will be destroyed after the function call hence next time this assignmnet is not correct hence segmentation fault."
    },
    {
        "id": 272,
        "Question": "How a reference is different from a pointer?",
        "Options": [
            "a) A reference cannot be null",
            "b) A reference once established cannot be changed",
            "c) The reference doesn’t need an explicit dereferencing mechanism",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: References can never be NULL. It is not allowed to change a reference once allocated. Referencing does not need an explicit referencing operator."
    },
    {
        "id": 273,
        "Question": "Which of the following statement(s) is/are correct?",
        "Options": [
            "a) * operator is used to declare a reference",
            "b) A reference variable defined to refer a particular variable can refer to any other variable also",
            "c) References must always be initialized inside classes",
            "d) A variable can have more than one references"
        ],
        "Answer": "Answer: d\nExplanation: A variable can have multiple references as references are nothing just another name for a variable hence a variable can more than one references. "
    },
    {
        "id": 274,
        "Question": "The void pointer can point to which type of objects?",
        "Options": [
            "a) int",
            "b) float",
            "c) double",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Because it doesn’t know the type of object it is pointing to, So it can point to all objects. "
    },
    {
        "id": 275,
        "Question": "When does the void pointer can be dereferenced?",
        "Options": [
            "a) when it doesn’t point to any value",
            "b) when it cast to another type of object",
            "c) using delete keyword",
            "d) using shift keyword"
        ],
        "Answer": " Answer: b\nExplanation: By casting the pointer to another data type, it can be dereferenced from the void pointer. "
    },
    {
        "id": 276,
        "Question": "The pointer can point to any variable that is not declared with which of these?",
        "Options": [
            "a) const",
            "b) volatile",
            "c) both const & volatile",
            "d) static"
        ],
        "Answer": " Answer: c\nExplanation: Pointer can point to any variable that is not declared with const & volatile.  "
    },
    {
        "id": 277,
        "Question": "A void pointer cannot point to which of these?",
        "Options": [
            "a) methods in c++",
            "b) class member in c++",
            "c) methods & class member in c++",
            "d) none of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: A void pointer can point to methods & class member in c++. "
    },
    {
        "id": 278,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy2\">*</span>Ptr<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Str <span class=\"sy1\">=</span> <span class=\"st0\">\"abcdefghij\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        func<span class=\"br0\">(</span>Str<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy2\">*</span>Ptr<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) abcdefghij",
            "b) address of string “abcdefghij”",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: b\nExplanation: Even though it is a void pointer, we gets the address.\nOutput:\n\n\n\t\n\n$ g++ b.cpp\n$ a.out\n0x8048714\n\n\n"
    },
    {
        "id": 279,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>vp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>vp <span class=\"sy1\">==</span> p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"equal\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) equal",
            "b) no output",
            "c) compile error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: The void pointer is easily converted to any other type of pointer, so these are equal.\nOutput:\n\n\n$ g++ poi4.cpp\n$ a.out\nequal\n\n\n "
    },
    {
        "id": 280,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>data<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"st0\">'d'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        data <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"the data points to the integer value\"</span> <span class=\"sy1\">&lt;&lt;</span> data<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        data <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"the data now points to the character\"</span> <span class=\"sy1\">&lt;&lt;</span> data<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2d",
            "b) two memory addresses",
            "c) 3d",
            "d) 4d"
        ],
        "Answer": " Answer: b\nExplanation: Because the data points to the address value of the variables only, So it is printing the memory address of these two variable.\nOutput:\n\n\n$ g++ poi2.cpp\n$ a.out\nthe data points to the integer value0xbfc81824 the data now points to the character0xbfc8182f\n\n\n"
    },
    {
        "id": 281,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>pi <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>pi <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 6",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: We just casted this from void to int, so it prints 5\nOutput:\n\n\n$ g++ poi1.cpp\n$ a.out\n5\n\n\n"
    },
    {
        "id": 282,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> b <span class=\"sy1\">=</span> <span class=\"nu16\">3.14</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy1\">&lt;&lt;</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 8, memory address",
            "b) 8.14",
            "c) memory address",
            "d) 12"
        ],
        "Answer": " Answer: a\nExplanation:  In this program, we are just adding the two values and printing it.\nOutput:\n\n\n$ g++ poi.cpp\n$ a.out\n8\n0xbfef0378\n\n\n"
    },
    {
        "id": 283,
        "Question": "What we can’t do on a void pointer?",
        "Options": [
            "a) pointer arithmetic",
            "b) pointer functions",
            "c) pointer objects",
            "d) pointer functions & objects"
        ],
        "Answer": " Answer: a\nExplanation: Because the void pointer is used to cast the variables only, So pointer arithmetic can’t be done in a void pointer. "
    },
    {
        "id": 284,
        "Question": "The data elements in the structure are also known as what?",
        "Options": [
            "a) objects",
            "b) members",
            "c) data",
            "d) objects & data"
        ],
        "Answer": " Answer: b\nExplanation: Variables declared inside a class are called as data elements or data members. "
    },
    {
        "id": 285,
        "Question": "What will be used when terminating a structure?",
        "Options": [
            "a) :",
            "b) }",
            "c) ;",
            "d) ;;"
        ],
        "Answer": "  Answer: c\nExplanation: While terminating a structure, a semicolon is used to end this up. "
    },
    {
        "id": 286,
        "Question": "What will happen when the structure is declared?",
        "Options": [
            "a) it will not allocate any memory",
            "b) it will allocate the memory",
            "c) it will be declared and initialized",
            "d) it will be declared"
        ],
        "Answer": " Answer: a\nExplanation: While the structure is declared, it will not be initialized, So it will not allocate any memory. "
    },
    {
        "id": 287,
        "Question": "The declaration of the structure is also called as?",
        "Options": [
            "a) structure creator",
            "b) structure signifier",
            "c) structure specifier",
            "d) structure creator & signifier"
        ],
        "Answer": " Answer: c\nExplanation: The structure declaration with open and close braces and with a semicolon is also called structure specifier. "
    },
    {
        "id": 288,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> Time </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> hours<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> minutes<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> seconds<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> toSeconds<span class=\"br0\">(</span>Time now<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Time t<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        t.<span class=\"me1\">hours</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        t.<span class=\"me1\">minutes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        t.<span class=\"me1\">seconds</span> <span class=\"sy1\">=</span> <span class=\"nu0\">45</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Total seconds: \"</span> <span class=\"sy1\">&lt;&lt;</span> toSeconds<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> toSeconds<span class=\"br0\">(</span>Time now<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">3600</span> <span class=\"sy2\">*</span> now.<span class=\"me1\">hours</span> <span class=\"sy2\">+</span> <span class=\"nu0\">60</span> <span class=\"sy2\">*</span> now.<span class=\"me1\">minutes</span> <span class=\"sy2\">+</span> now.<span class=\"me1\">seconds</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 19845",
            "b) 20000",
            "c) 15000",
            "d) 19844"
        ],
        "Answer": "  Answer: a\nExplanation: We are copying the value john to the name and then we are printing the values that are in the program.\nOutput:\n\n\n\t\n\n$ g++ stu.cpp\n$ a.out\n123\njohn\n\n\n "
    },
    {
        "id": 289,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">struct</span> ShoeType </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">           string style<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">           <span class=\"kw4\">double</span> price<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         ShoeType shoe1, shoe2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         shoe1.<span class=\"me1\">style</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Adidas\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         shoe1.<span class=\"me1\">price</span> <span class=\"sy1\">=</span> <span class=\"nu16\">9.99</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> shoe1.<span class=\"me1\">style</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" $ \"</span><span class=\"sy1\">&lt;&lt;</span> shoe1.<span class=\"me1\">price</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         shoe2 <span class=\"sy1\">=</span> shoe1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         shoe2.<span class=\"me1\">price</span> <span class=\"sy1\">=</span> shoe2.<span class=\"me1\">price</span> <span class=\"sy2\">/</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> shoe2.<span class=\"me1\">style</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" $ \"</span><span class=\"sy1\">&lt;&lt;</span> shoe2.<span class=\"me1\">price</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Adidas $ 9.99Adidas $ 1.11",
            "b) Adidas $ 9.99Adidas $ 9.11",
            "c) Adidas $ 9.99Adidas $ 11.11",
            "d) Adidas $ 11.11Adidas $ 11.11"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are just converting the given hours and minutes into seconds.\nOutput:\n\n\n$ g++ stu1.cpp\n$ a.out\nTotal seconds:19845\n\n\n"
    },
    {
        "id": 290,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> sec </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">struct</span> sec s <span class=\"sy1\">=</span><span class=\"br0\">{</span><span class=\"nu0\">25</span>,<span class=\"nu0\">50</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">struct</span> sec <span class=\"sy2\">*</span>ps <span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sec <span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"sy3\">&amp;</span>s<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ps<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>a <span class=\"sy1\">&lt;&lt;</span> ps<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 252",
            "b) 253",
            "c) 254",
            "d) 262"
        ],
        "Answer": "  Answer: a\nExplanation: We copied the value of shoe1 into shoe2 and divide the shoe2 value by 9, So this is the output.\nOutput:\n\n\n$ g++ stu2.cpp\n$ a.out\nAdidas $ 9.99\nAdidas $ 1.11\n\n\n"
    },
    {
        "id": 291,
        "Question": "Which of the following is a properly defined structure?",
        "Options": [
            "a) struct {int a;}",
            "b) struct a_struct {int a;}",
            "c) struct a_struct int a;",
            "d) struct a_struct {int a;};"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are dividing the values of a and b, printing it.\nOutput:\n\n\n$ g++ stu5.cpp\n$ a.out\n252\n\n\n "
    },
    {
        "id": 292,
        "Question": "Which of the following accesses a variable in structure *b?",
        "Options": [
            "a) b->var;",
            "b) b.var;",
            "c) b-var;",
            "d) b>var;"
        ],
        "Answer": "  Answer: d\nExplanation: option struct {int a;} is not correct because name of structure and ;(after declaration) are missing. In option struct a_struct {int a;} ; is missing. In option struct a_struct int a; {} are missing. "
    },
    {
        "id": 293,
        "Question": "Which function is used to check whether a character is an alphabet?",
        "Options": [
            "a) isalpha()",
            "b) isalnum()",
            "c) isdigit()",
            "d) isblank()"
        ],
        "Answer": "Answer: a\nExplanation: Character classification provides isalpha() function to check whether a character in C++ is an alphabet or not."
    },
    {
        "id": 294,
        "Question": "Which function is used to check whether a character is an alphabet or number?",
        "Options": [
            "a) isalpha()",
            "b) isalnum()",
            "c) isdigit()",
            "d) isblank()"
        ],
        "Answer": "Answer: b\nExplanation: Character classification provides isalnum() function to check whether a character in C++ is alphabet or number."
    },
    {
        "id": 295,
        "Question": "Which function is used to check whether a character is a number?",
        "Options": [
            "a) isalpha()",
            "b) isalnum()",
            "c) isdigit()",
            "d) isblank()"
        ],
        "Answer": "Answer: c\nExplanation: Character classification provides isdigit() function to check whether a character in C++ is number or not."
    },
    {
        "id": 296,
        "Question": "Which function is used to check whether a character is a tab or space?",
        "Options": [
            "a) isalpha()",
            "b) isalnum()",
            "c) isdigit()",
            "d) isblank()"
        ],
        "Answer": "Answer: d\nExplanation: Character classification provides isblank() function to check whether a character in C++ is space or tab."
    },
    {
        "id": 297,
        "Question": "Which function is used to check whether a character is tab or space or whitespace control code(\\n,\\r,etc.)?",
        "Options": [
            "a) isspace()",
            "b) isalnum()",
            "c) iscntrl()",
            "d) isblank()"
        ],
        "Answer": "Answer: a\nExplanation: Character classification provides isspace() function to check whether a character in C++ is tab or space or whitespace control code(\\n, \\r, etc.)."
    },
    {
        "id": 298,
        "Question": "Which function is used to check whether a character is tab or a control code?",
        "Options": [
            "a) isspace()",
            "b) isalnum()",
            "c) iscntrl()",
            "d) isblank()"
        ],
        "Answer": "Answer: c\nExplanation: Character classification provides iscntrl() function to check whether a character in C++ is tab or a control code."
    },
    {
        "id": 299,
        "Question": "Which function is used to check whether a character is printable on console?",
        "Options": [
            "a) isxdigit()",
            "b) isprint()",
            "c) iscntrl()",
            "d) ispunct()"
        ],
        "Answer": "Answer: b\nExplanation: Character classification provides isprint() function to check whether a character in C++ is printable on console."
    },
    {
        "id": 300,
        "Question": "Which function is used to check whether a character is hexadecimal?",
        "Options": [
            "a) isxdigit()",
            "b) isprint()",
            "c) iscntrl()",
            "d) ispunct()"
        ],
        "Answer": "Answer: a\nExplanation: Character classification provides isxdigit() function to check whether a character in C++ is hexadecimal."
    },
    {
        "id": 301,
        "Question": "Which function is used to check whether a character is punctuation mark?",
        "Options": [
            "a) isxdigit()",
            "b) isprint()",
            "c) iscntrl()",
            "d) ispunct()"
        ],
        "Answer": "Answer: d\nExplanation: Character classification provides ispunct() function to check whether a character in C++ is punctuation mark."
    },
    {
        "id": 302,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;cctype&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> arr<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">12</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"kw4\">bool</span><span class=\"br0\">)</span><span class=\"kw3\">isalpha</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 111110111110",
            "b) 111111111110",
            "c) 111000111110",
            "d) 111110000000"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are checking whether a character is an alphabet or not so in “Hello World” except space everything is alphabet, therefore, we have 11111011111 but it is followed by a 0 because every string is followed by a null character which is not alphabet, therefore, we have 0 at the of the binary string."
    },
    {
        "id": 303,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;cctype&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> arr<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"H3ll0<span class=\"es1\">\\t</span>W0r1d\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">12</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"kw4\">bool</span><span class=\"br0\">)</span><span class=\"kw3\">isprint</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 111000111110",
            "b) 111111111110",
            "c) 111110111110",
            "d) 111110000000"
        ],
        "Answer": "Answer: d\nExplanation: In this program, we are first checking the alphabets in the string then digits in the string so accordingly one can find the answer."
    },
    {
        "id": 304,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;cctype&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> arr<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"H3ll0<span class=\"es1\">\\t</span>W0r1d\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">12</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"kw4\">bool</span><span class=\"br0\">)</span><span class=\"kw3\">iscntrl</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 111111111110",
            "b) 000001000001",
            "c) 111000111110",
            "d) 111110000000"
        ],
        "Answer": "Answer: c\nExplanation: In this program we are checking the presence of alphabets and digits in the string so accordingly one can find the answer."
    },
    {
        "id": 305,
        "Question": "14. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;cctype&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> arr<span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"<span class=\"es1\">\\'</span>H3ll0<span class=\"es1\">\\'</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"kw4\">bool</span><span class=\"br0\">)</span><span class=\"kw3\">ispunct</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10000010",
            "b) 111111111110",
            "c) 111000111110",
            "d) 111110000000"
        ],
        "Answer": "Answer: b\nExplanation: In this program we are checking the presence of control codes i.e. \\n, \\r, \\r\\n, \\t, etc. in the string so accordingly one can find the answer."
    },
    {
        "id": 306,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;cctype&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> arr<span class=\"br0\">[</span><span class=\"nu0\">27</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">27</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"kw4\">bool</span><span class=\"br0\">)</span><span class=\"kw3\">isxdigit</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 111001100011110000000111100",
            "b) 101010101010101001010101010",
            "c) 111111000000000000000000000",
            "d) 111111111000001111011110111"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are checking the presence of punctuation characters like quotes(‘, “, etc.) in the string, so ispunct() returns 1 for single quote positions and returns 0 otherwise."
    },
    {
        "id": 307,
        "Question": "Which operator is having the right to left associativity in the following?",
        "Options": [
            "a) Array subscripting",
            "b) Function call",
            "c) Addition and subtraction",
            "d) Type cast"
        ],
        "Answer": " Answer: d\nExplanation: There are many rights to left associativity operators in C++, which means they are evaluation is done from right to left. Type Cast is one of them. Here is a link of the associativity of operators: https://github.com/MicrosoftDocs/cpp-docs/blob/master/docs/cpp/cpp-built-in-operators-precedence-and-associativity.md "
    },
    {
        "id": 308,
        "Question": "Which operator is having the highest precedence?",
        "Options": [
            "a) postfix",
            "b) unary",
            "c) shift",
            "d) equality"
        ],
        "Answer": " Answer: a\nExplanation: The operator which is having the highest precedence is postfix and lowest is equality. "
    },
    {
        "id": 309,
        "Question": "What is this operator called ?:?",
        "Options": [
            "a) conditional",
            "b) relational",
            "c) casting operator",
            "d) unrelational"
        ],
        "Answer": " Answer: a\nExplanation: In this operator, if the condition is true means, it will return the first operator, otherwise second operator. "
    },
    {
        "id": 310,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span> <span class=\"sy2\">+</span> <span class=\"nu0\">3</span> <span class=\"sy2\">*</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 35",
            "b) 20",
            "c) 25",
            "d) 30"
        ],
        "Answer": " Answer: b\nExplanation: Because the * operator is having highest precedence, So it is executed first and then the + operator will be executed.\nOutput:\n\n\n        \n\n$ g++ op1.cpp\n$ a.out\n20\n\n\n  "
    },
    {
        "id": 311,
        "Question": "What is the use of dynamic_cast operator?",
        "Options": [
            "a) it converts virtual base class to derived class",
            "b) it converts the virtual base object to derived objects",
            "c) it will convert the operator based on precedence",
            "d) it converts the virtual base object to derived class"
        ],
        "Answer": " Answer: a\nExplanation:  Because the dynamic_cast operator is used to convert from base class to derived class. "
    },
    {
        "id": 312,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">6</span>, c, d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a, b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        d <span class=\"sy1\">=</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5  6",
            "b) 6  5",
            "c) 6  7",
            "d) 6  8"
        ],
        "Answer": " Answer: a\nExplanation: It is a separator here. In C, the value a is stored in c and in d the value b is stored in d because of the bracket.\nOutput:\n\n\n$ g++ op3.cpp\n$ a.out\n5    6\n\n\n"
    },
    {
        "id": 313,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i, j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        j <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"br0\">(</span>j<span class=\"sy2\">++</span>, j <span class=\"sy2\">+</span> <span class=\"nu0\">100</span>, <span class=\"nu0\">999</span> <span class=\"sy2\">+</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1000",
            "b) 11",
            "c) 1010",
            "d) 1001"
        ],
        "Answer": " Answer: c\nExplanation: j starts with the value 10. j is then incremented to 11. Next, j is added to 100. Finally, j (still containing 11) is added to 999 which yields the result 1010.\nOutput:\n\n\n$ g++ op2.cpp\n$ a.out\n1010\n\n\n "
    },
    {
        "id": 314,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> <span class=\"sy2\">++</span>x <span class=\"sy2\">*</span> <span class=\"sy2\">++</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> x<span class=\"sy2\">++</span> <span class=\"sy2\">*</span> <span class=\"sy2\">++</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 749735",
            "b) 736749",
            "c) 367497",
            "d) 367597"
        ],
        "Answer": " Answer: a\nExplanation: Because of the precedence the pre-increment and post increment operator, we got the output as 749736.\nOutput:\n\n\n$ g++ op.cpp\n$ a.out\n749735\n\n\n"
    },
    {
        "id": 315,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">6</span>, c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> a <span class=\"sy4\">:</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 5",
            "c) 4",
            "d) 7"
        ],
        "Answer": " Answer: a\nExplanation: Here the condition is false on conditional operator, so the b value is assigned to c.\nOutput:\n\n\n$ g++ op1.cpp\n$ a.out\n6\n\n\n"
    },
    {
        "id": 316,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> a <span class=\"sy1\">=</span> <span class=\"nu16\">21.09399</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> b <span class=\"sy1\">=</span> <span class=\"nu16\">10.20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c ,d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        d <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c <span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">' '</span><span class=\"sy1\">&lt;&lt;</span> d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20 10",
            "b) 10 21",
            "c) 21 10",
            "d) 10 20"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are casting the operator to integer, So it is printing as 21 and 10.\nOutput:\n\n\n$ g++ op5.cpp\n$ a.out\n21\t10\n\n\n"
    },
    {
        "id": 317,
        "Question": "How are many sequences of statements present in c++?",
        "Options": [
            "a) 4",
            "b) 3",
            "c) 5",
            "d) 6"
        ],
        "Answer": " Answer: c\nExplanation: There are five sequences of statements. They are Preprocessor directives, Comments, Declarations, Function Declarations, Executable statements. "
    },
    {
        "id": 318,
        "Question": "The if..else statement can be replaced by which operator?",
        "Options": [
            "a) Bitwise operator",
            "b) Conditional operator",
            "c) Multiplicative operator",
            "d) Addition operator"
        ],
        "Answer": " Answer: b\nExplanation: In the conditional operator, it will predicate the output using the given condition."
    },
    {
        "id": 319,
        "Question": "The switch statement is also called as?",
        "Options": [
            "a) choosing structure",
            "b) selective structure",
            "c) certain structure",
            "d) bitwise structure"
        ],
        "Answer": " Answer: b\nExplanation: The switch statement is used to choose the certain code to execute, So it is also called as selective structure. "
    },
    {
        "id": 320,
        "Question": "The destination statement for the goto label is identified by what label?",
        "Options": [
            "a) $",
            "b) @",
            "c) *",
            "d) :"
        ],
        "Answer": " Answer: d\nExplanation: : colon is used at the end of labels of goto statements. "
    },
    {
        "id": 321,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n<span class=\"sy2\">--</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">break</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 543",
            "b) 54",
            "c) 5432",
            "d) 53"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are printing the numbers in reverse order but by using break statement we stopped printing on 3.\nOutput:\n\n\n\t\n\n$ g++ stat.cpp\n$ a.out\n543\n\n\n"
    },
    {
        "id": 322,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">time</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">goto</span> <span class=\"kw3\">time</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">break</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1010",
            "b) 10",
            "c) infinitely print 10",
            "d) compile time error"
        ],
        "Answer": " Answer: d\nExplanation: Because the break statement need to be presented inside a loop or a switch statement. "
    },
    {
        "id": 323,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"sy4\">;</span> <span class=\"sy4\">;</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) error",
            "b) 15",
            "c) infinite times of printing n",
            "d) none of the mentioned"
        ],
        "Answer": " Answer: c\nExplanation: There is not a condition in the for loop, So it will loop continuously. "
    },
    {
        "id": 324,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0123456789",
            "b) 10",
            "c) 012345678910",
            "d) compile time error"
        ],
        "Answer": " Answer: b\nExplanation: for loop with a semicolon is called as body less for loop. It is used only for incrementing the variable values. So in this program the value is incremented and printed as 10.\nOutput:\n\n\n$ g++ stat2.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 325,
        "Question": "How many types of loops are there in C++?",
        "Options": [
            "a) 4",
            "b) 2",
            "c) 3",
            "d) 1"
        ],
        "Answer": " Answer: a\nExplanation: There are four types of loop. They are the while, do while, nested, for the loop. "
    },
    {
        "id": 326,
        "Question": "Which looping process is best used when the number of iterations is known?",
        "Options": [
            "a) for",
            "b) while",
            "c) do-while",
            "d) all looping processes require that the iterations be known"
        ],
        "Answer": " Answer: a\nExplanation: Because in for loop we are allowed to provide starting and ending conditions of loops, hence fixing the number of iterations of loops, whereas no such things are provided by other loops. "
    },
    {
        "id": 327,
        "Question": "How many types of comments are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of comments in C++. Single line comments uses double slash //. Multiple line comments uses /* comment inside */. "
    },
    {
        "id": 328,
        "Question": "What is a comment in c++?",
        "Options": [
            "a) comments are parts of the source code disregarded by the compiler",
            "b) comments are executed by the compiler to find the meaning of the comment",
            "c) comments are executable",
            "d) comments are executed by the compiler"
        ],
        "Answer": " Answer: a\nExplanation: Comments are used to add meaning to the program. "
    },
    {
        "id": 329,
        "Question": "What type of comments does c++ support?",
        "Options": [
            "a) single line",
            "b) multiline",
            "c) single line and multi-line",
            "d) reusable line"
        ],
        "Answer": " Answer: c\nExplanation: C++ provides two types of comments in programs. They are single line(using //) or multiple line (using /*…… */) comments. "
    },
    {
        "id": 330,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"coMULTI\">/* this is comment*</span></pre></li><li class=\"li1\"><pre class=\"de1\"><span class=\"coMULTI\">&nbsp;       cout &lt;&lt; \"hello world\";</span></pre></li><li class=\"li1\"><pre class=\"de1\"><span class=\"coMULTI\">&nbsp;       return 0;</span></pre></li><li class=\"li1\"><pre class=\"de1\"><span class=\"coMULTI\">&nbsp;   }</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) hello world",
            "b) hello",
            "c) compile time error",
            "d) hellohello"
        ],
        "Answer": " Answer: c\nExplanation: Because the slash should need to be forward not backward. "
    },
    {
        "id": 331,
        "Question": "What is used to write multi line comment in c++?",
        "Options": [
            "a) /* …. */",
            "b) /$ ….  $/",
            "c) //",
            "d) /$ …. */"
        ],
        "Answer": " Answer: a\nExplanation: The /* is used to write the multi line comment. "
    },
    {
        "id": 332,
        "Question": "What is the use of the indentation in c++?",
        "Options": [
            "a) distinguishes between comments and code",
            "b) r distinguishes between comments and outer data",
            "c) distinguishes between comments and outer data",
            "d) r distinguishes between comments and inner data"
        ],
        "Answer": " Answer: a\nExplanation: To distinguish between different parts of the program like comments, codes, etc. "
    },
    {
        "id": 333,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">long</span> factorial <span class=\"br0\">(</span><span class=\"kw4\">long</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">*</span> factorial <span class=\"br0\">(</span>a <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">long</span> num <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"! = \"</span> <span class=\"sy1\">&lt;&lt;</span> factorial <span class=\"br0\">(</span> num <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 24",
            "c) segmentation fault",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: As we have given in the function as a+1, it will exceed the size and so it arises the segmentation fault.\nOutput:\n\n\n$ g++ arg3.cpp\n$ a.out\nsegmentation fault\n\n\n "
    },
    {
        "id": 334,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> square <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"sy2\">*</span>x <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>x <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        square<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>num<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) compile time error",
            "c) 144",
            "d) 110"
        ],
        "Answer": " Answer: d\nExplanation: We have increased the x value in operand as x + 1, so it will return as 110.\nOutput:\n\n\n$ g++ arg2.cpp\n$ a.out\n110\n\n\n "
    },
    {
        "id": 335,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, j <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> add<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 12",
            "c) 13",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: The value of a has been changed to 7, So it returns as 13.\nOutput:\n\n\n$ g++ arg1.cpp\n$ a.out\n13\n\n\n"
    },
    {
        "id": 336,
        "Question": "What will happen when we use void in argument passing?",
        "Options": [
            "a) It will not return value to its caller",
            "b) It will return value to its caller",
            "c) May or may not depend on the declared return type of the function, the passed arguments are different than the function return type",
            "d) It will return value"
        ],
        "Answer": " Answer: a\nExplanation: As void is not having any return value, it will not return the value to the caller. "
    },
    {
        "id": 337,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Sum<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b, <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> b <span class=\"sy2\">+</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, y <span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Sum<span class=\"br0\">(</span>x, y, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2 3",
            "b) 6 9",
            "c) 2 15",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: We have passed three values and it will manipulate according to the given condition and yield the result as 2 15.\nOutput:\n\n\n$ g++ arg.cpp\n$ a.out\n2 15\n\n\n"
    },
    {
        "id": 338,
        "Question": "Where does the execution of the program starts?",
        "Options": [
            "a) user-defined function",
            "b) main function",
            "c) void function",
            "d) else function"
        ],
        "Answer": " Answer: b\nExplanation: Normally the execution of the program in c++ starts from main only. "
    },
    {
        "id": 339,
        "Question": "What are mandatory parts in the function declaration?",
        "Options": [
            "a) return type, function name",
            "b) return type, function name, parameters",
            "c) parameters, function name",
            "d) parameters, variables"
        ],
        "Answer": " Answer: a\nExplanation: In a function, return type and function name are mandatory all else are just used as a choice. "
    },
    {
        "id": 340,
        "Question": "which of the following is used to terminate the function declaration?",
        "Options": [
            "a) :",
            "b) )",
            "c) ;",
            "d) ]"
        ],
        "Answer": " Answer: c\nExplanation: ; semicolon is used to terminate a function declaration statement in C++. "
    },
    {
        "id": 341,
        "Question": "How many can max number of arguments present in function in the c99 compiler?",
        "Options": [
            "a) 99",
            "b) 90",
            "c) 102",
            "d) 127"
        ],
        "Answer": " Answer: d\nExplanation: C99 allows to pass a maximum of 127 arguments in a function. "
    },
    {
        "id": 342,
        "Question": "Which is more effective while calling the functions?",
        "Options": [
            "a) call by value",
            "b) call by reference",
            "c) call by pointer",
            "d) call by object"
        ],
        "Answer": " Answer: b\nExplanation: In the call by reference, it will just passes the reference of the memory addresses of passed values rather than copying the value to new memories which reduces the overall time and memory use. "
    },
    {
        "id": 343,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> mani<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> mani<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"hai\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mani<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) hai",
            "b) haihai",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: c\nExplanation: We have to use the semicolon to declare the function in line 3. This is called a function declaration and a function declaration ends with a semicolon. "
    },
    {
        "id": 344,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        fun<span class=\"br0\">(</span>x, x<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) compile time error",
            "d) 30"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we called by value so the value will not be changed, So the output is 10\nOutput:\n\n\n$ g++ fun.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 345,
        "Question": "What is the scope of the variable declared in the user defined function?",
        "Options": [
            "a) whole program",
            "b) only inside the {} block",
            "c) the main function",
            "d) header section"
        ],
        "Answer": " Answer: b\nExplanation: The variable is valid only in the function block as in other. "
    },
    {
        "id": 346,
        "Question": "How many minimum number of functions should be present in a C++ program for its execution?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": " Answer: b\nExplanation: The execution of a C++ program starts from main function hence we require atleast 1 function to be present in a C++ program to execute and i.e. the main function. "
    },
    {
        "id": 347,
        "Question": "Which of the following is the default return value of functions in C++?",
        "Options": [
            "a) int",
            "b) char",
            "c) float",
            "d) void"
        ],
        "Answer": "Answer: a\nExplanation: C++ uses int as the default return values for functions. It also restricts that the return type of the main function must be int."
    },
    {
        "id": 348,
        "Question": "What happens to a function defined inside a class without any complex operations (like looping, a large number of lines, etc)?",
        "Options": [
            "a) It becomes a virtual function of the class",
            "b) It becomes a default calling function of the class",
            "c) It becomes an inline function of the class",
            "d) The program gives an error"
        ],
        "Answer": "Answer: c\nExplanation: Any function which is defined inside a class and has no complex operations like loops, a large number of lines then it is made inline."
    },
    {
        "id": 349,
        "Question": "What is an inline function?",
        "Options": [
            "a) A function that is expanded at each call during execution",
            "b) A function that is called during compile time",
            "c) A function that is not checked for syntax errors",
            "d) A function that is not checked for semantic analysis"
        ],
        "Answer": "Answer: a\nExplanation: Inline function is those which are expanded at each call during the execution of the program to reduce the cost of jumping during execution."
    },
    {
        "id": 350,
        "Question": "An inline function is expanded during ______________",
        "Options": [
            "a) compile-time",
            "b) run-time",
            "c) never expanded",
            "d) end of the program"
        ],
        "Answer": "Answer: a\nExplanation: An inline function is expanded during the compile-time of a program."
    },
    {
        "id": 351,
        "Question": "When we define the default values for a function?",
        "Options": [
            "a) When a function is defined",
            "b) When a function is declared",
            "c) When the scope of the function is over",
            "d) When a function is called"
        ],
        "Answer": "Answer: d\nExplanation: A function is not inline if it has static variables, loops or the function is having any recursive calls."
    },
    {
        "id": 352,
        "Question": "Where should default parameters appear in a function prototype?",
        "Options": [
            "a) To the rightmost side of the parameter list",
            "b) To the leftmost side of the parameter list",
            "c) Anywhere inside the parameter list",
            "d) Middle of the parameter list"
        ],
        "Answer": "Answer: b\nExplanation: Default values for a function is defined when the function is declared inside a program."
    },
    {
        "id": 353,
        "Question": "If an argument from the parameter list of a function is defined constant then _______________",
        "Options": [
            "a) It can be modified inside the function",
            "b) It cannot be modified inside the function",
            "c) Error occurs",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: Default parameters are defined to the rightmost side of parameter list in a function to differentiate between the normal and default parameters for example if a function is defined as fun(int x = 5, int y) then if we call fun(10) then 10 should be given to x or y because one can apply both logics like x = 10 already defined and 10 passed is for y but if compiler reads it from left to right it will think it is for x and no parameter is given for y, therefore, the compiler will give error."
    },
    {
        "id": 354,
        "Question": "Which of the following feature is used in function overloading and function with default argument?",
        "Options": [
            "a) Encapsulation",
            "b) Polymorphism",
            "c) Abstraction",
            "d) Modularity"
        ],
        "Answer": "Answer: b\nExplanation: A function is not allowed a constant member of the parameter list."
    },
    {
        "id": 355,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> z<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">+</span> z<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n   <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> fun<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 0",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: Both of the above types allows a function overloading which is the basic concept of Polymorphism."
    },
    {
        "id": 356,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">=</span><span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> fun<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x<span class=\"sy2\">+</span>y<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) -5",
            "b) 0",
            "c) 10",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: Default arguments should always be declared at the rightmost side of the parameter list but the above function has a normal variable at the rightmost side which is a syntax error, therefore the function gives an error."
    },
    {
        "id": 357,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">void</span> square <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>x, <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"sy2\">*</span>x <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>x<span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"sy2\">--</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>y<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span> <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> number <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span>\n\tsquare<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>number, <span class=\"sy3\">&amp;</span>number<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> number<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 870",
            "b) 30",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: As the object declared are of two types one is normal object and other is constant object So normal objects calls normal fun() whereas constant objects calls constant fun()."
    },
    {
        "id": 358,
        "Question": "From which function the execution of a C++ program starts?",
        "Options": [
            "a) start() function",
            "b) main() function",
            "c) new() function",
            "d) end() function"
        ],
        "Answer": "Answer: d\nExplanation: C++ allows to define such prototype of the function in which you are not required to give variable names only the default values. While in function definition you can provide the variable names corresponding to each parameter."
    },
    {
        "id": 359,
        "Question": "Which of the following is important in a function?",
        "Options": [
            "a) Return type",
            "b) Function name",
            "c) Both return type and function name",
            "d) The return type, function name and parameter list"
        ],
        "Answer": "Answer: a\nExplanation: As we are passing value by reference therefore the change in the value is reflected back to the passed variable number hence value of number is changed to 870."
    },
    {
        "id": 360,
        "Question": "How many ways of passing a parameter are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three ways of passing a parameter. They are pass by value,pass by reference and pass by pointer. "
    },
    {
        "id": 361,
        "Question": "Which is used to keep the call by reference value as intact?",
        "Options": [
            "a) static",
            "b) const",
            "c) absolute",
            "d) virtual"
        ],
        "Answer": " Answer: b\nExplanation: Because const will not change the value of the variables during the execution."
    },
    {
        "id": 362,
        "Question": "By default how the value are passed in c++?",
        "Options": [
            "a) call by value",
            "b) call by reference",
            "c) call by pointer",
            "d) call by object"
        ],
        "Answer": " Answer: a\nExplanation: None. "
    },
    {
        "id": 363,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> copy <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> b, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">3</span>, z <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        copy <span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"x =\"</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", y =\"</span> <span class=\"sy1\">&lt;&lt;</span> y <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", z =\"</span> <span class=\"sy1\">&lt;&lt;</span> z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2 5 10",
            "b) 2 4 5",
            "c) 2 6 14",
            "d) 2 4 9"
        ],
        "Answer": " Answer: c\nExplanation: Because we multiplied the values by 2 in the copy function.\nOutput:\n\n\n        \n\n$ g++ arg6.cpp\n$ a.out\nx = 2,y = 6,z = 14\n\n\n"
    },
    {
        "id": 364,
        "Question": "5. What will be the new value of x in the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> fun<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         fun<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"New value of x is \"</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 15",
            "d) 36"
        ],
        "Answer": " Answer: b\nExplanation: As the parameter is passed by reference, the value in the original memory of x is changed hence the output is printed as 20.\nOutput:\n\n\n\t\n\n$ g++ arg5.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 365,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">long</span> factorial <span class=\"br0\">(</span><span class=\"kw4\">long</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">*</span> factorial <span class=\"br0\">(</span>a <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">long</span> num <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"! = \"</span> <span class=\"sy1\">&lt;&lt;</span> factorial <span class=\"br0\">(</span> num <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 24",
            "c) segmentation fault",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: As we have given in the function as a+1, it will exceed the size and so it arises the segmentation fault.\nOutput:\n\n\n$ g++ arg3.cpp\n$ a.out\nsegmentation fault\n\n\n"
    },
    {
        "id": 366,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> square <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"sy2\">*</span>x <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>x <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        square<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>num<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) compile time error",
            "c) 144",
            "d) 110"
        ],
        "Answer": "Answer: d\nExplanation: We have increased the x value in operand as x+1, so it will return as 110.\nOutput:\n\n\n$ g++ arg2.cpp\n$ a.out\n110\n\n\n"
    },
    {
        "id": 367,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, j <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> add<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 12",
            "c) 13",
            "d) compile time error"
        ],
        "Answer": "Answer: c\nExplanation: The value of a has been changed to 7, So it returns as 13.\nOutput:\n\n\n$ g++ arg1.cpp\n$ a.out\n13\n\n\n"
    },
    {
        "id": 368,
        "Question": "What will happen when we use void in argument passing?",
        "Options": [
            "a) It will not return value to its caller",
            "b) It will return value to its caller",
            "c) Maybe or may not be return any value to its caller",
            "d) It will return value with help of object"
        ],
        "Answer": "Answer: a\nExplanation: As void is not having any return value, it will not return the value to the caller.\n"
    },
    {
        "id": 369,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Sum<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b, <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> b <span class=\"sy2\">+</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, y <span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Sum<span class=\"br0\">(</span>x, y, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2 3",
            "b) 6 9",
            "c) 2 15",
            "d) compile time error"
        ],
        "Answer": "Answer: c\nExplanation: We have passed three values and it will manipulate according to the given condition and yield the result as 2 15\nOutput:\n\n\n$ g++ arg.cpp\n$ a.out\n2 15\n\n\n"
    },
    {
        "id": 370,
        "Question": "How many types of returning values are present in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: The three types of returning values are return by value, return by reference and return by address. "
    },
    {
        "id": 371,
        "Question": "What will you use if you are not intended to get a return value?",
        "Options": [
            "a) static",
            "b) const",
            "c) volatile",
            "d) void"
        ],
        "Answer": " Answer: d\nExplanation: Void is used to not to return anything. "
    },
    {
        "id": 372,
        "Question": "Where does the return statement returns the execution of the program?",
        "Options": [
            "a) main function",
            "b) caller function",
            "c) same function",
            "d) block function"
        ],
        "Answer": " Answer: b\nExplanation: The execution of the program is returned to the point from where the function was called and the function from which this function was called is known as caller function.  "
    },
    {
        "id": 373,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> max<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span> a <span class=\"sy1\">&gt;</span> b <span class=\"sy4\">?</span> a <span class=\"sy4\">:</span> b <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> max<span class=\"br0\">(</span>i, j <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 7",
            "c) either 5 or 7",
            "d) 13"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are returning the maximum value by using conditional operator.\nOutput:\n\n\n        \n\n$ g++ ret.cpp\n$ a.out\n7\n\n\n "
    },
    {
        "id": 374,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> <span class=\"sy3\">&amp;</span> WeeklyHours<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> h <span class=\"sy1\">=</span> <span class=\"nu16\">46.50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> <span class=\"sy3\">&amp;</span>hours <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> hours<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> hours <span class=\"sy1\">=</span> WeeklyHours<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Weekly Hours: \"</span> <span class=\"sy1\">&lt;&lt;</span> hours<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 46.5",
            "b) 6.50",
            "c) compile time error",
            "d) 26.5"
        ],
        "Answer": " Answer: a\nExplanation: We are returning the value what we get as input.\nOutput:\n\n\n$ g++ ret1.cpp\n$ a.out\n46.5\n\n\n"
    },
    {
        "id": 375,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> mult <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>y <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            result <span class=\"sy1\">=</span> result <span class=\"sy2\">+</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            y <span class=\"sy1\">=</span> y <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> mult<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) 25",
            "c) 30",
            "d) 35"
        ],
        "Answer": " Answer: b\nExplanation:  We are multiplying these values by adding every values.\nOutput:\n\n\n$ g++ ret.cpp\n$ a.out\n25\n\n\n"
    },
    {
        "id": 376,
        "Question": "When will we use the function overloading?",
        "Options": [
            "a) same function name but different number of arguments",
            "b) different function name but same number of arguments",
            "c) same function name but same number of arguments",
            "d) different function name but different number of arguments"
        ],
        "Answer": " Answer: a\nExplanation: We use function overloading when we want the same name function to perform different procedure for different types of parameters or different number of parameters provided to the function. "
    },
    {
        "id": 377,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> gcd <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>b <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            temp <span class=\"sy1\">=</span> a <span class=\"sy2\">%</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            a <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            b <span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">15</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">25</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> gcd<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 25",
            "c) 375",
            "d) 5"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we are finding the gcd of the number.\nOutput:\n\n\n$ g++ ret5.cpp\n$ a.out\n5\n\n\n"
    },
    {
        "id": 378,
        "Question": "Which of the following permits function overloading on c++?",
        "Options": [
            "a) type",
            "b) number of arguments",
            "c) type & number of arguments",
            "d) number of objects"
        ],
        "Answer": " Answer: c\nExplanation: Both type and number of arguments permits function overloading in C++, like\nint func(int);\nfloat func(float, float)\nHere both type and number of arguments are different. "
    },
    {
        "id": 379,
        "Question": "In which of the following we cannot overload the function?",
        "Options": [
            "a) return function",
            "b) caller",
            "c) called function",
            "d) main function"
        ],
        "Answer": " Answer: a\nExplanation: While overloading the return function, it will rise a error, So we can’t overload the return function. "
    },
    {
        "id": 380,
        "Question": "Function overloading is also similar to which of the following?",
        "Options": [
            "a) operator overloading",
            "b) constructor overloading",
            "c) destructor overloading",
            "d) function overloading"
        ],
        "Answer": " Answer: b\nExplanation: In constructor overloading, we will be using the same options availed in function overloading. "
    },
    {
        "id": 381,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">double</span>  f<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> f<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        print<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        print<span class=\"br0\">(</span><span class=\"nu16\">500.263</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5500.263",
            "b) 500.2635",
            "c) 500.263",
            "d) 500.266"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are printing the values and the values will be print(5) will be printed first because of the order of the execution.\nOutput:\n\n\n        \n\n$ g++ over.cpp\n$ a.out\n5500.263\n\n\n"
    },
    {
        "id": 382,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> Add<span class=\"br0\">(</span><span class=\"kw4\">int</span> X, <span class=\"kw4\">int</span> Y, <span class=\"kw4\">int</span> Z<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> X <span class=\"sy2\">+</span> Y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> Add<span class=\"br0\">(</span><span class=\"kw4\">double</span> X, <span class=\"kw4\">double</span> Y, <span class=\"kw4\">double</span> Z<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> X <span class=\"sy2\">+</span> Y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Add<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Add<span class=\"br0\">(</span><span class=\"nu16\">5.5</span>, <span class=\"nu16\">6.6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 11 12.1",
            "b) 12.1 11",
            "c) 11 12",
            "d) compile time error"
        ],
        "Answer": " Answer: d\nExplanation: As one can observe that no function has declaration similar to that of called Add(int, int) and Add(double, double) functions. Therefore, error occurs. "
    },
    {
        "id": 383,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> operate <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">*</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">float</span> operate <span class=\"br0\">(</span><span class=\"kw4\">float</span> a, <span class=\"kw4\">float</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">/</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> n <span class=\"sy1\">=</span> <span class=\"nu16\">5.0</span>, m <span class=\"sy1\">=</span> <span class=\"nu16\">2.0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> operate<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> operate <span class=\"br0\">(</span>n, m<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10.0\t5.0",
            "b) 5.0\t2.5",
            "c) 10.0 5",
            "d) 10   2.5"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we are divide and multiply the values.\nOutput:\n\n\n$ g++ over3.cpp\n$ a.out\n10\t2.5\n\n\n"
    },
    {
        "id": 384,
        "Question": "Overloaded functions are ________________",
        "Options": [
            "a) Very long functions that can hardly run",
            "b) One function containing another one or more functions inside it",
            "c) Two or more functions with the same name but different number of parameters or type",
            "d) Very long functions"
        ],
        "Answer": " Answer: c\nExplanation: This is the definition of function overloading i.e. function having same name but different number of parameters and types. "
    },
    {
        "id": 385,
        "Question": "What will happen while using pass by reference?",
        "Options": [
            "a) The values of those variables are passed to the function so that it can manipulate them",
            "b) The location of variable in memory is passed to the function so that it can use the same memory area for its processing",
            "c) The function declaration should contain ampersand (& in its type declaration)",
            "d) The function declaration should contain $"
        ],
        "Answer": " Answer: b\nExplanation: In pass by reference, we can use the function to access the variable and it can modify it. Therefore we are using pass by reference. "
    },
    {
        "id": 386,
        "Question": "What should be passed in parameters when function does not require any parameters?",
        "Options": [
            "a) void",
            "b) blank space",
            "c) both void & blank space",
            "d) tab space"
        ],
        "Answer": " Answer: b\nExplanation: When we does not want to pass any argument to a function then we leave the parameters blank i.e. func() – function without any parameter. "
    },
    {
        "id": 387,
        "Question": "What are the advantages of passing arguments by reference?",
        "Options": [
            "a) Changes to parameter values within the function also affect the original arguments",
            "b) There is need to copy parameter values (i.e. less memory used)",
            "c) There is no need to call constructors for parameters (i.e. faster)",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: All the above mentioned are advantages and properties of call by reference. "
    },
    {
        "id": 388,
        "Question": "If the user did not supply the value, what value will it take?",
        "Options": [
            "a) default value",
            "b) rise an error",
            "c) both default value & rise an error",
            "d) error"
        ],
        "Answer": " Answer: a\nExplanation: If the user did not supply the value means, the compiler will take the given value in the argument list. "
    },
    {
        "id": 389,
        "Question": "Where can the default parameter be placed by the user?",
        "Options": [
            "a) leftmost",
            "b) rightmost",
            "c) both leftmost & rightmost",
            "d) topmost"
        ],
        "Answer": " Answer: b\nExplanation: To avoid the ambiguity between the non-default parameters and default parameters. "
    },
    {
        "id": 390,
        "Question": "Which value will it take when both user and default values are given?",
        "Options": [
            "a) user value",
            "b) default value",
            "c) custom value",
            "d) defined value"
        ],
        "Answer": " Answer: a\nExplanation: The default value will be used when the user value is not given, So in this case, the user value will be taken. "
    },
    {
        "id": 391,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">bool</span> flag <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>flag <span class=\"sy1\">==</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Flag is true. a = \"</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Flag is false. a = \"</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        func<span class=\"br0\">(</span><span class=\"nu0\">200</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Flag is true. a = 200",
            "b) Flag is false. a = 100",
            "c) Flag is false. a = 200",
            "d) Flag is true. a = 100"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are passing the value, as it evaluates to false, it produces the output as following.\nOutput:\n\n\n        \n\n$ g++ def.cpp\n$ a.out\nFlag is false. a = 200\n\n\n"
    },
    {
        "id": 392,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    string askNumber<span class=\"br0\">(</span>string prompt <span class=\"sy1\">=</span> <span class=\"st0\">\"Please enter a number: \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string number <span class=\"sy1\">=</span> askNumber<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Here is your number: \"</span> <span class=\"sy1\">&lt;&lt;</span> number<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    string askNumber<span class=\"br0\">(</span>string prompt<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string number<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> prompt<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> number<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> number<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 6",
            "c) the number you entered",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are getting a number and printing it.\nOutput:\n\n\n\t\n\n$ g++ def1.cpp\n$ a.out\nPlease enter a number:\n5\nHere is your number:5\n\n\n"
    },
    {
        "id": 393,
        "Question": "What we can’t place followed by the non-default arguments?",
        "Options": [
            "a) trailing arguments",
            "b) default arguments",
            "c) both trailing & default arguments",
            "d) leading arguments"
        ],
        "Answer": "  Answer: a\nExplanation: In this program, We are passing the values as by default values rules it is working.\nOutput:\n\n\n$ g++ def2.cpp\n$ a.out\n1st value: 1\n2nd value: 10\n1st value: 3\n2nd value: 4\n\n\n"
    },
    {
        "id": 394,
        "Question": "If we start our function call with default arguments means, what will be proceeding arguments?",
        "Options": [
            "a) user argument",
            "b) empty arguments",
            "c) default arguments",
            "d) user & empty arguments"
        ],
        "Answer": "  Answer: b\nExplanation: To avoid the ambiguity in arguments.\neg. if func(int a=3, int b);\nso if we call func(5), here will 5 will be value of a or b, because 5 is first parameter so a should be 5  but as only one argument is given b should be 5. So to remove such ambiguity default parameters are kept at the end or rightmost side. "
    },
    {
        "id": 395,
        "Question": "What is the default return type of a function?",
        "Options": [
            "a) int",
            "b) void",
            "c) float",
            "d) char"
        ],
        "Answer": "  Answer: c\nExplanation: As a rule, the default argument must be followed by default arguments only. "
    },
    {
        "id": 396,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> m <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> m <span class=\"sy2\">+</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> func<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 10",
            "c) compile time error",
            "d) 30"
        ],
        "Answer": "  Answer: b\nExplanation: void is the default return value of any function, to handle both empty and non-empty values. "
    },
    {
        "id": 397,
        "Question": "Which header file is used to pass unknown number of arguments to function?",
        "Options": [
            "a) stdlib.h",
            "b) string.h",
            "c) stdarg.h",
            "d) stdio.h"
        ],
        "Answer": " Answer: c\nExplanation: Because the cstdarg defines this header file to process the unknown number of arguments. "
    },
    {
        "id": 398,
        "Question": "How can you access the arguments that are manipulated in the function?",
        "Options": [
            "a) va_list",
            "b) arg_list",
            "c) both va_list & arg_list",
            "d) vg_list"
        ],
        "Answer": " Answer: a\nExplanation: va_list is provided by C++ to access manipulated arguments in function. "
    },
    {
        "id": 399,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdarg.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">float</span> avg<span class=\"br0\">(</span> <span class=\"kw4\">int</span> Count, ... <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">va_list</span> Numbers<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_start</span><span class=\"br0\">(</span>Numbers, Count<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> Sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> Count<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span><span class=\"br0\">(</span>Numbers, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_end</span><span class=\"br0\">(</span>Numbers<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Sum<span class=\"sy2\">/</span>Count<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> Average <span class=\"sy1\">=</span> avg<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Average of first 10 whole numbers : \"</span> <span class=\"sy1\">&lt;&lt;</span> Average<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 6",
            "d) 7"
        ],
        "Answer": "  Answer: a\nExplanation: We are just calculating the average of these numbers using cstdarg.\nOutput:\n\n\n        \n\n$ g++ uka.cpp\n$ a.out\nAverage of first 10 whole numbers 4\n\n\n "
    },
    {
        "id": 400,
        "Question": "What is the maximum number of arguments or parameters that can be present in one function call?",
        "Options": [
            "a) 64",
            "b) 256",
            "c) 255",
            "d) 16"
        ],
        "Answer": " Answer: b\nExplanation: C++ allows maximum number of 256 arguments in a function call. "
    },
    {
        "id": 401,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdarg.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> add <span class=\"br0\">(</span><span class=\"kw4\">int</span> num, ...<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">va_list</span> args<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_start</span> <span class=\"br0\">(</span>args,num<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> num<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span> <span class=\"br0\">(</span>args,<span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_end</span> <span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> total <span class=\"sy1\">=</span> add<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">12</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The result is \"</span> <span class=\"sy1\">&lt;&lt;</span> total<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 32",
            "b) 23",
            "c) 48",
            "d) compile time error"
        ],
        "Answer": " Answer: a\nExplanation: We are adding these numbers by using for statement and stdarg.\nOutput:\n\n\n$ g++ uka.cpp\n$ a.out\nThe result is 32\n\n\n"
    },
    {
        "id": 402,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdarg.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> dumplist<span class=\"br0\">(</span><span class=\"kw4\">int</span>, ...<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        dumplist<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        dumplist<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> dumplist<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, ...<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">va_list</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_start</span><span class=\"br0\">(</span>p, n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"sy2\">--</span><span class=\"sy1\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            i <span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span><span class=\"br0\">(</span>p, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_end</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2436",
            "b) 48697",
            "c) 1111111",
            "d) compile time error"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, we are eradicating the first value\nby comparing using while operator.\nOutput:\n\n\n$ g++ rka3.cpp\n$ a.out\n48697\n\n\n "
    },
    {
        "id": 403,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdarg.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> flue<span class=\"br0\">(</span><span class=\"kw4\">char</span> c,...<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> flue<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> flue<span class=\"br0\">(</span><span class=\"st0\">'1'</span>, <span class=\"nu16\">1.0</span>,<span class=\"nu0\">1</span>, <span class=\"st0\">'1'</span>, <span class=\"nu17\">1.0f</span>, <span class=\"nu0\">1l</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> flue<span class=\"br0\">(</span><span class=\"kw4\">char</span> c,...<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6549",
            "b) 4965",
            "c) 6646",
            "d) compile time error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are returning the ascii value of the character and printing it.\nOutput:\n\n\n$ g++ rka4.cpp\n$ a.out\n6549\n\n\n "
    },
    {
        "id": 404,
        "Question": "8. Which of the header file should be added in the following C++ code to properly run the program?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> print_all <span class=\"br0\">(</span><span class=\"kw4\">int</span> num, ...<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">va_list</span> args<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_start</span> <span class=\"br0\">(</span>args,num<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> num<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span> <span class=\"br0\">(</span>args,<span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>num<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_end</span> <span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        print_all<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">12</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) stdlib.h",
            "b) stdarg.h",
            "c) string.h",
            "d) stdpar.h"
        ],
        "Answer": " Answer: b\nExplanation: <stdarg.h> header provided to perform variable number of argument passing. "
    },
    {
        "id": 405,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdarg.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> fun<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> msg, ...<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        fun<span class=\"br0\">(</span><span class=\"st0\">\"IndiaBIX\"</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> fun<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> msg, ...<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">va_list</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_start</span><span class=\"br0\">(</span>ptr, msg<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num <span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span><span class=\"br0\">(</span>ptr, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num <span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span><span class=\"br0\">(</span>ptr, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 5",
            "c) 8",
            "d) 4"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we are moving the pointer to the second value and printing it.\nOutput:\n\n\n$ g++ uka6.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 406,
        "Question": "What will initialize the list of arguments in stdarg.h header file?",
        "Options": [
            "a) va_list",
            "b) va_start",
            "c) va_arg",
            "d) vg_arg"
        ],
        "Answer": "  Answer: b\nExplanation: va_start initialises the the list of arguments in <stdarg.h> header file. "
    },
    {
        "id": 407,
        "Question": "To which does the function pointer point to?",
        "Options": [
            "a) variable",
            "b) constants",
            "c) function",
            "d) absolute variables"
        ],
        "Answer": " Answer: c\nExplanation: A function pointer points to a function. "
    },
    {
        "id": 408,
        "Question": "What will we not do with function pointers?",
        "Options": [
            "a) allocation of memory",
            "b) deallocation of memory",
            "c) both allocation & deallocation of memory",
            "d) finds memory status"
        ],
        "Answer": " Answer: c\nExplanation: As it is used to execute a block of code, So we will not allocate or deallocate memory. "
    },
    {
        "id": 409,
        "Question": "What is the default calling convention for a compiler in c++?",
        "Options": [
            "a) __cdecl",
            "b) __stdcall",
            "c) __pascal",
            "d) __fastcall"
        ],
        "Answer": " Answer: a\nExplanation: __cdecl is the default calling convention for a compiler in c++."
    },
    {
        "id": 410,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> first, <span class=\"kw4\">int</span> second<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> first <span class=\"sy2\">+</span> second <span class=\"sy2\">+</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> operation<span class=\"br0\">(</span><span class=\"kw4\">int</span> first, <span class=\"kw4\">int</span> second, <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>functocall<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>functocall<span class=\"br0\">)</span><span class=\"br0\">(</span>first, second<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span>  a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span>  <span class=\"br0\">(</span><span class=\"sy2\">*</span>plus<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> add<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> operation<span class=\"br0\">(</span><span class=\"nu0\">15</span>, <span class=\"nu0\">10</span>, plus<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 25",
            "b) 35",
            "c) 40",
            "d) 45"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are adding two numbers with 15, So we got the output as 40.\nOutput:\n\n\n        \n\n$ g++ pfu2.cpp\n$ a.out\n40\n\n\n "
    },
    {
        "id": 411,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        n <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>func<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">(</span><span class=\"sy2\">*</span>n<span class=\"br0\">)</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        n<span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 20",
            "c) 21",
            "d) 22"
        ],
        "Answer": " Answer: d\nExplanation: As we are calling the function two times with the same value, So it is printing as 22.\nOutput:\n\n\n$ g++ pfu.cpp\n$ a.out\n22\n\n\n"
    },
    {
        "id": 412,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> func <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>ptr<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ptr <span class=\"sy1\">=</span> func<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        func<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ptr<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2323",
            "b) 232",
            "c) 23",
            "d) compile time error"
        ],
        "Answer": " Answer: a\nExplanation: As function pointer p is pointing to n(char, int), so for first call d9 will be printed for second call 10, which corresponds to ‘\\n’ character, and then 9 is printed.\nOutput:\n\n\n$ g++ pfu1.cpp\n$ a.out\nd9\n9\n\n\n"
    },
    {
        "id": 413,
        "Question": "What is the mandatory part to present in function pointers?",
        "Options": [
            "a) &",
            "b) return values",
            "c) data types",
            "d) $"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we can’t do the casting from char to int, So it is raising an error."
    },
    {
        "id": 414,
        "Question": "which of the following can be passed in function pointers?",
        "Options": [
            "a) variables",
            "b) data types",
            "c) functions",
            "d) objects"
        ],
        "Answer": " Answer: c\nExplanation: The data types are mandatory for declaring the variables in the function pointers. "
    },
    {
        "id": 415,
        "Question": "10. What is the meaning of the following declaration?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>ptr<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) ptr is pointer to function",
            "b) ptr is array of pointer to function",
            "c) ptr is pointer to such function which return type is array",
            "d) ptr is pointer to array of function"
        ],
        "Answer": " Answer: c\nExplanation: Only functions are passed in function pointers. "
    },
    {
        "id": 416,
        "Question": "which keyword is used to define the macros in c++?",
        "Options": [
            "a) macro",
            "b) define",
            "c) #define",
            "d) #macro"
        ],
        "Answer": " Answer: c\nExplanation: #define is the keyword which is used to define the macros in c++."
    },
    {
        "id": 417,
        "Question": "Which symbol is used to declare the preprocessor directives?",
        "Options": [
            "a) #",
            "b) $",
            "c) *",
            "d) ^"
        ],
        "Answer": " Answer: a\nExplanation: # symbol is used to declare the preprocessor directives."
    },
    {
        "id": 418,
        "Question": "How many types of macros are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of macros. They are object-like and function-like. "
    },
    {
        "id": 419,
        "Question": "What is the mandatory preprocessor directive for c++?",
        "Options": [
            "a) #define <iostream>",
            "b) #include <iostream>",
            "c) #undef <iostream>",
            "d) #macro <iostream>"
        ],
        "Answer": " Answer: b\nExplanation: For a c++ program to execute, we need #include<iostream>.  "
    },
    {
        "id": 420,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#define MIN(a,b) (((a)&lt;(b)) ? a : b)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> i, j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu16\">100.1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        j <span class=\"sy1\">=</span> <span class=\"nu16\">100.01</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"The minimum is \"</span> <span class=\"sy1\">&lt;&lt;</span> MIN<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100.01",
            "b) 100.1",
            "c) compile time error",
            "d) 100"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are getting the minimum number using conditional operator.\nOutput:\n\n\n\t\n\n$ g++ mac3.cpp\n$ a.out\nThe minimum value is 100.01\n\n\n"
    },
    {
        "id": 421,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Value of __LINE__ : \"</span> <span class=\"sy1\">&lt;&lt;</span> __LINE__ <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Value of __FILE__ : \"</span> <span class=\"sy1\">&lt;&lt;</span> __FILE__ <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Value of __DATE__ : \"</span> <span class=\"sy1\">&lt;&lt;</span> __DATE__ <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Value of __TIME__ : \"</span> <span class=\"sy1\">&lt;&lt;</span> __TIME__ <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) details about your file",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are using the macros to print the information about the file.\nOutput:\n\n\n$ g++ mac2.cpp\n$ a.out\nValue of __LINE__ : 5\nValue of __FILE__ : mac1.cpp\nValue of __DATE__ : Oct 10 2012\nValue of __TIME__ : 22:24:37\n\n\n"
    },
    {
        "id": 422,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#define SquareOf(x) x * x</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> SquareOf<span class=\"br0\">(</span>x <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 16",
            "b) 64",
            "c) compile time error",
            "d) 75386824"
        ],
        "Answer": " Answer: d\nExplanation: In this program, as we have not initialize the variable x, we will get a output of ending digit of 4.\nOutput:\n\n\n$ g++ mac1.cpp\n$ a.out\n75386824\n\n\n"
    },
    {
        "id": 423,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#define PR(id) cout &lt;&lt; \"The value of \" #id \" is \"&lt;&lt;id</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        PR<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 15",
            "c) 20",
            "d) 12"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are just printing the declared values.\nOutput:\n\n\n$ g++ mac.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 424,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#define MAX 10</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num <span class=\"sy1\">=</span> <span class=\"sy2\">++</span>MAX<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 10",
            "c) compile time error",
            "d) 13"
        ],
        "Answer": " Answer: c\nExplanation: Macro Preprocessor only replaces occurance of macro symbol with macro symbol value, So we can’t increment the value. "
    },
    {
        "id": 425,
        "Question": "What is the other name of the macro?",
        "Options": [
            "a) scripted directive",
            "b) executed directive",
            "c) link directive",
            "d) executed & link directive"
        ],
        "Answer": " Answer: a\nExplanation: When the compiler encounters a previously defined macro, it will take the result from that execution itself. "
    },
    {
        "id": 426,
        "Question": "which of the following is used to implement the c++ interfaces?",
        "Options": [
            "a) absolute variables",
            "b) abstract classes",
            "c) constant variables",
            "d) default variables"
        ],
        "Answer": "  Answer: b\nExplanation: Abstract classes in C++ are purposely defined for making base classes containing atleast one virtual function which can be overloaded on inheritance, which means single function name for different sub-classes, hence acts as an interface."
    },
    {
        "id": 427,
        "Question": "How many types do functions fall depends on modularization?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: c\nExplanation: Modularization is also similar to macros but it is used to build large projects. "
    },
    {
        "id": 428,
        "Question": "How many types of modularization are there in c++?",
        "Options": [
            "a) 4",
            "b) 3",
            "c) 1",
            "d) 2"
        ],
        "Answer": "  Answer: b\nExplanation: There are two types of functions. They are program control and specific task. "
    },
    {
        "id": 429,
        "Question": "What does the client module import?",
        "Options": [
            "a) macro",
            "b) records",
            "c) interface",
            "d) instance"
        ],
        "Answer": "  Answer: d\nExplanation: There are two types of modular programming. They are interface and implementation. "
    },
    {
        "id": 430,
        "Question": "Identify the correct statement.",
        "Options": [
            "a) c++ does not have built-in interfaces",
            "b) c++ does have built-in interfaces",
            "c) c++ have no concept of interfaces",
            "d) c++ does have built-in interfaces & classes"
        ],
        "Answer": "  Answer: c\nExplanation: Because they access the functions in the module user interface. "
    },
    {
        "id": 431,
        "Question": "What is similar to the interface in c++?",
        "Options": [
            "a) methods",
            "b) instance of a class",
            "c) pure abstract class",
            "d) methods & instance of a class"
        ],
        "Answer": " Answer: a\nExplanation: Unlike other programming languages like Java and others, C++ has no inbuilt interfaces. "
    },
    {
        "id": 432,
        "Question": "Which of the following implements the module in the program?",
        "Options": [
            "a) macro",
            "b) header files",
            "c) macro & header files",
            "d) interfaces"
        ],
        "Answer": "  Answer: c\nExplanation: Pure abstract classes in C++ are a type of interface because it contains only abstract member functions and no data or concrete member functions. "
    },
    {
        "id": 433,
        "Question": "Which operator is used to signify the namespace?",
        "Options": [
            "a) conditional operator",
            "b) ternary operator",
            "c) scope operator",
            "d) bitwise operator"
        ],
        "Answer": " Answer: c\nExplanation: Scope operator(::) is used in namespace syntax.\nGeneral syntax:\nnamespace X{ int  a;}\ncout<<X::a; "
    },
    {
        "id": 434,
        "Question": "Identify the correct statement.",
        "Options": [
            "a) Namespace is used to group class, objects and functions",
            "b) Namespace is used to mark the beginning of the program",
            "c) A namespace is used to separate the class, objects",
            "d) Namespace is used to mark the beginning & end of the program"
        ],
        "Answer": " Answer: a\nExplanation: Namespace allows you to group class, objects, and functions. It is used to divide the global scope into the sub-scopes. "
    },
    {
        "id": 435,
        "Question": "What is the use of Namespace?",
        "Options": [
            "a) To encapsulate the data",
            "b) To structure a program into logical units",
            "c) Encapsulate the data & structure a program into logical units",
            "d) It is used to mark the beginning of the program"
        ],
        "Answer": " Answer: b\nExplanation: The main aim of the namespace is to understand the logical units of the program and to make the program so robust. "
    },
    {
        "id": 436,
        "Question": "What is the general syntax for accessing the namespace variable?",
        "Options": [
            "a) namespace::operator",
            "b) namespace,operator",
            "c) namespace#operator",
            "d) namespace$operator"
        ],
        "Answer": " Answer: a\nExplanation: To access variables from namespace we use following syntax.\nnamespace :: variable;\nGeneral syntax:\nnamespace X{ int  a;}\ncout<<X::a; "
    },
    {
        "id": 437,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> first</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> second</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> var <span class=\"sy1\">=</span> <span class=\"nu16\">3.1416</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> first<span class=\"sy4\">::</span><span class=\"me2\">var</span> <span class=\"sy2\">+</span> second<span class=\"sy4\">::</span><span class=\"me2\">var</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 8.31416",
            "b) 8",
            "c) 9",
            "d) compile time error"
        ],
        "Answer": " Answer: b\nExplanation: As we are getting two variables from namespace variable and we are adding that.\nOutput:\n\n\n\t\n\n$ g++ name.cpp\n$ a.out\n8\n\n\n "
    },
    {
        "id": 438,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> first</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> second</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> x <span class=\"sy1\">=</span> <span class=\"nu16\">3.1416</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> y <span class=\"sy1\">=</span> <span class=\"nu16\">2.7183</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">using</span> first<span class=\"sy4\">::</span><span class=\"me2\">x</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">using</span> second<span class=\"sy4\">::</span><span class=\"me2\">y</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> a, b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> x <span class=\"sy1\">&gt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> first<span class=\"sy4\">::</span><span class=\"me2\">y</span> <span class=\"sy1\">&lt;</span> second<span class=\"sy4\">::</span><span class=\"me2\">x</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 01",
            "c) 00",
            "d) 10"
        ],
        "Answer": " Answer: d\nExplanation: We are inter mixing the variable and comparing it which is bigger and smaller and according to that we are printing the output.\nOutput:\n\n\n$ g++ name1.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 439,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> Box1</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> Box2</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">13</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box1<span class=\"sy4\">::</span><span class=\"me2\">a</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box2<span class=\"sy4\">::</span><span class=\"me2\">a</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 13",
            "c) 16",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: In this program,  as there is lot of variable a and it is printing the value inside the block because it got the highest priority.\nOutput:\n\n\n$ g++ name2.cpp\n$ a.out\n16\n\n\n"
    },
    {
        "id": 440,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> space</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> space</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        space<span class=\"sy4\">::</span><span class=\"me2\">x</span> <span class=\"sy1\">=</span> space<span class=\"sy4\">::</span><span class=\"me2\">y</span> <span class=\"sy1\">=</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> space<span class=\"sy4\">::</span><span class=\"me2\">x</span> <span class=\"sy1\">&lt;&lt;</span> space<span class=\"sy4\">::</span><span class=\"me2\">y</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1015",
            "b) 1510",
            "c) 55",
            "d) compile time error"
        ],
        "Answer": " Answer: c\nExplanation: We are overriding the value at the main function and so we are getting the output as 55.\nOutput:\n\n\n$ g++ name4.cpp\n$ a.out\n55\n\n\n "
    },
    {
        "id": 441,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">namespace</span> extra</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> i<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> extra<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">enum</span>  letter <span class=\"br0\">{</span> i, j<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">class</span> i <span class=\"br0\">{</span> letter j<span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy4\">::</span><span class=\"me2\">i</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 9",
            "b) 10",
            "c) compile time error",
            "d) 11"
        ],
        "Answer": " Answer: a\nExplanation: A scope resolution operator without a scope qualifier refers to the global namespace. "
    },
    {
        "id": 442,
        "Question": "Which keyword is used to access the variable in the namespace?",
        "Options": [
            "a) using",
            "b) dynamic",
            "c) const",
            "d) static"
        ],
        "Answer": " Answer: a\nExplanation: using keyword is used to specify the name of the namespace to which the variable belongs.\neg.\nnamespace A{ int a = 5;}\nnamespace B{ int a = 10;}\nusing namespace A;\ncout<<a;  // will print value of a from namespace A.\nusing namespace B;\ncout<<a;  // will print value of a from namespace B. "
    },
    {
        "id": 443,
        "Question": "Pick the incorrect statement for namespaces in C++.",
        "Options": [
            "a) Namespace declarations are always global scope",
            "b) Keyword namespace is used at the starting of a namespace definition",
            "c) Namespace has access specifiers like private or public",
            "d) Namespace definitions can be nested"
        ],
        "Answer": "Answer: c\nExplanation: Namespace does not have any specifiers associated with it like classes or structures."
    },
    {
        "id": 444,
        "Question": "Which operator is used for accessing a member of namespace?",
        "Options": [
            "a) :",
            "b) ::",
            "c) ->",
            "d) ."
        ],
        "Answer": "Answer: b\nExplanation: Scope resolution operator(::) is used for accessing a member of a namespace. example:\n\n\nnamespace A{\n\tint var;\n}\nA::var = 5;\n\n\n"
    },
    {
        "id": 445,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">namespace</span> A<span class=\"br0\">{</span>\n&nbsp;\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw2\">namespace</span> B<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> B<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>A<span class=\"sy4\">::</span><span class=\"me2\">var</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 5",
            "c) Error",
            "d) 105"
        ],
        "Answer": "Answer: c\nExplanation: A namespace definition always starts with the namespace keyword so definition with Namespace(capital N) is wrong. namespace does is not terminated by a semicolon hence the definition with a semicolon is wrong. every variable declaration in C++ should end with semicolon therefore namespace containing ‘int i’ without semicolon is wrong. "
    },
    {
        "id": 446,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">namespace</span> A<span class=\"br0\">{</span>\n&nbsp;\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw2\">namespace</span> B<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> B<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>var<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) Error",
            "d) Wrong use of namespace"
        ],
        "Answer": "Answer: c\nExplanation: Variable cout is defined in above defined namespace B and also in the inbuilt namespace std. So the compiler confuses and throws an error saying that cout is ambiguous i.e. which cout to use as it i available in both std and B namespace. "
    },
    {
        "id": 447,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">namespace</span> A<span class=\"br0\">{</span>\n&nbsp;\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw2\">namespace</span> B<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span>\n\t<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> B<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>var<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) 20",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: As we have mentioned that ‘using namespace B’ so now whereever var will be used it will be from namespace B. hence the output was the value of var from namespace B."
    },
    {
        "id": 448,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">namespace</span> \n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>var<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) Error",
            "c) Some garbage value",
            "d) Nothing but program runs perfectly"
        ],
        "Answer": "Answer: c\nExplanation: As var is already declared in this scope so that gets preference over others. Therefore 20 is printed which is the value assigned to var declared in this scope."
    },
    {
        "id": 449,
        "Question": "What is the correct syntax of defining a namespace?",
        "Options": [
            "a) namespace name{}",
            "b) Namespace name{};",
            "c) namespace name{};",
            "d) typedef namespace name{} NAME"
        ],
        "Answer": "Answer: a\nExplanation: A namespace without name is called unnamed namespace and is valid in that scope only. So its like global scope of variable. One can access that var from main() function."
    },
    {
        "id": 450,
        "Question": "9. How to print the value of the i variable inside namespace B?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">namespace</span> A<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> var <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n\t<span class=\"kw2\">namespace</span> B<span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) cout<<A::i;",
            "b) cout<<B::i;",
            "c) cout<<A::B::i;",
            "d) cout<<i;"
        ],
        "Answer": "Answer: a\nExplanation: A namespace:\n-Starts with keyword namespace\n-Followed by identifier\n-All members inside the braces{}\n-No semicolon at the end\nnamespace identifier{}."
    },
    {
        "id": 451,
        "Question": "10. What will be the output of following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">namespace</span> My_old_school_and_college_friends_number\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">long</span> <span class=\"kw4\">int</span> f1 <span class=\"sy1\">=</span> <span class=\"nu0\">9999999999</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">long</span> <span class=\"kw4\">int</span> f2 <span class=\"sy1\">=</span> <span class=\"nu0\">1111111111</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw2\">namespace</span> contacts <span class=\"sy1\">=</span> My_old_school_and_college_friends_number<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n&nbsp;\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>contacts<span class=\"sy4\">::</span><span class=\"me2\">f1</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 9999999999",
            "b) 1111111111",
            "c) error",
            "d) segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Here namespace B is nested inside the namespace A. Hence to access the variable i we need to mention through B and A. So it should A::B::i, which means i belongs to namespace B which is defined inside the namespace A."
    },
    {
        "id": 452,
        "Question": "13. What changes you can do in the header files to avoid the redefinition that compiler will give when both the header files are included in the same program keeping the declaration of both the functions same?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">Content of h1.<span class=\"me1\">h</span>\n<span class=\"sy2\">------------------------------------------------</span>\nh1.<span class=\"me1\">h</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Multiplied by 2\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy2\">*</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy2\">------------------------------------------------</span>\n&nbsp;\nContent of h2.<span class=\"me1\">h</span>\n<span class=\"sy2\">------------------------------------------------</span>\nh2.<span class=\"me1\">h</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"divided by 2\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> a<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy2\">------------------------------------------------</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Cannot be handled because C++ does not allow this",
            "b) Declare both the function inside different namespaces",
            "c) Include one header files where they are needed so that no clashes occur",
            "d) Make the header files name same"
        ],
        "Answer": "Answer: b\nExplanation: Here both the func() are available in different namespaces having same name but different types which is equivalent to function overloading. So no error will be there as function overloading is allowed in C++. "
    },
    {
        "id": 453,
        "Question": "To where does the program control transfers when the exception is arisen?",
        "Options": [
            "a) catch",
            "b) handlers",
            "c) throw",
            "d) try"
        ],
        "Answer": " Answer: b\nExplanation: When an exception is arisen mean, the exception is caught by handlers and then it decides the type of exception. "
    },
    {
        "id": 454,
        "Question": "Which keyword is used to check exception in the block of code?",
        "Options": [
            "a) catch",
            "b) throw",
            "c) try",
            "d) handlers"
        ],
        "Answer": " Answer: c\nExplanation: The try() statement is used for exceptions in c++. "
    },
    {
        "id": 455,
        "Question": "What will happen when the exception is not caught in the program?",
        "Options": [
            "a) error",
            "b) program will execute",
            "c) block of that code will not execute",
            "d) program will execute & displays wrong output"
        ],
        "Answer": " Answer: a\nExplanation: When exceptions are not caught in any program then program throws error. "
    },
    {
        "id": 456,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> age <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>age <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\"Positive Number Required\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> age<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Message<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: \"</span> <span class=\"sy1\">&lt;&lt;</span> Message<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) error:Positive Number Required",
            "c) compile time error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: As the zero marks the beginning of the positive number, it is printed as output\nOutput:\n\n\n        \n\n$ g++ excep.cpp\n$ a.out\n0\n\n\n"
    },
    {
        "id": 457,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> PrintSequence<span class=\"br0\">(</span><span class=\"kw4\">int</span> StopNum<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> Num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Num <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Num <span class=\"sy1\">&gt;=</span> StopNum<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> Num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Num<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            PrintSequence<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> ExNum<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught an exception with value: \"</span> <span class=\"sy1\">&lt;&lt;</span> ExNum<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) compile time error",
            "b) prints first 19 numbers",
            "c) prints first 19 numbers and throws exception at 20",
            "d) prints first 17 numbers"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are printing upto 19 numbers and when executing the 20, we are raising a exception.\nOutput:\n\n\n\t\n\n$ g++ excep1.cpp\n$ a.out\n12345678910111213141516171819Caught an exception with value: 20\n\n\n"
    },
    {
        "id": 458,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> division<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"st0\">\"Division by zero condition!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">/</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            z <span class=\"sy1\">=</span> division<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>msg<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> msg<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 25",
            "b) 20",
            "c) Division by zero condition!",
            "d) 35"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we resembling the division by using the exception handling.\nOutput:\n\n\n$ g++ excep2.cpp\n$ a.out\n25\n\n\n"
    },
    {
        "id": 459,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span><span class=\"sy2\">*</span> buff<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            buff <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>buff <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">               <span class=\"kw1\">throw</span> <span class=\"st0\">\"Memory allocation failure!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">               <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>buff<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Byte successfully allocated!\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy2\">*</span>strg<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Exception raised: \"</span><span class=\"sy1\">&lt;&lt;</span>strg<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4 Bytes allocated successfully",
            "b) 8 Bytes allocated successfully",
            "c) Memory allocation failure",
            "d) Depends on the size of the data type"
        ],
        "Answer": " Answer: d\nExplanation: As we are allocating the memory to the variables and if there are not sufficient size means, it will throw an exception.\nOutput:\n\n\n$ g++ excep3.cpp\n$ a.out\n4 Bytes allocated successfully\n\n\n "
    },
    {
        "id": 460,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Funct<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Funct<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"caught a double type...\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Funct<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) caught a double type",
            "b) compile time error",
            "c) abnormal program termination",
            "d) runtime error"
        ],
        "Answer": " Answer: c\nExplanation: As we are throwing integer to double it will raise as abnormal program after termination throw statement.\nOutput:\n\n\n$ g++ excep4.cpp\n$ a.out\nterminate called after throwing an instance of 'int'\nAborted\n\n\n"
    },
    {
        "id": 461,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> array1 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">100000000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> array2 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">100000000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> array3 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">100000000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> array4 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">100000000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Allocated successfully\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span>bad_alloc<span class=\"sy3\">&amp;</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error allocating the requested memory.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Allocated successfully",
            "b) Error allocating the requested memory",
            "c) Depends on the memory of the computer",
            "d) Error"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we allocating the memory to the arrays by using exception handling and we handled the exception by standard exception.\nOutput:\n\n\n$ g++ excep5.cpp\n$ a.out\nAllocated successfully\n\n\n"
    },
    {
        "id": 462,
        "Question": "What will happen when the handler is not found for an exception?",
        "Options": [
            "a) calls the standard library function terminate()",
            "b) raise an error",
            "c) executes the remaining block",
            "d) raise an error and executes the remaining block"
        ],
        "Answer": " Answer: a\nExplanation: None. "
    },
    {
        "id": 463,
        "Question": "How many types of linkages are there in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three types of linkage in c++. They are an internal linkage, external linkage, and no linkage. "
    },
    {
        "id": 464,
        "Question": "To use internal linkage we have to use which keyword?",
        "Options": [
            "a) static",
            "b) extern",
            "c) static or extern",
            "d) public"
        ],
        "Answer": " Answer: a\nExplanation: static keyword is used for internal linkage. "
    },
    {
        "id": 465,
        "Question": "Which one is used to refer to program elements in any translation units?",
        "Options": [
            "a) internal linkage",
            "b) external linkage",
            "c) no linkage",
            "d) internal & external linkage"
        ],
        "Answer": " Answer: b\nExplanation: In the external linkage, it is used to refer to identifiers in various programs. "
    },
    {
        "id": 466,
        "Question": "ii.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include \"exe.h\"</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> number<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 842",
            "b) 843",
            "c) compile time error",
            "d) 845"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we have created a header file and linked that into the source program and we post incrementing that because of that it is printed as 842.\nOutput:\n\n\n\t\n\n$ g++ link.cpp\n$ a.out\n842\n\n\n"
    },
    {
        "id": 467,
        "Question": "What is the default type of linkage that is available for identifiers?",
        "Options": [
            "a) internal",
            "b) external",
            "c) no linkage",
            "d) single linkage"
        ],
        "Answer": " Answer: b\nExplanation: external is the default type of linkage that is available for identifiers.  "
    },
    {
        "id": 468,
        "Question": "To use external linkage we have to use which keyword?",
        "Options": [
            "a) static",
            "b) extern",
            "c) const",
            "d) argc"
        ],
        "Answer": " Answer: b\nExplanation: Extern keyword is used to represent identifiers from other programs.  "
    },
    {
        "id": 469,
        "Question": "Which is used to use a function from one source file to another?",
        "Options": [
            "a) code",
            "b) declaration",
            "c) prototype",
            "d) variable"
        ],
        "Answer": " Answer: c\nExplanation: By defining a function’s prototype in another file means, we can inherit all the features from the source function.  "
    },
    {
        "id": 470,
        "Question": "What is the use of no linkage?",
        "Options": [
            "a) make the entity visible to other programs",
            "b) make the entity visible to other blocks in the same program",
            "c) make the entity visible only to that block",
            "d) make the entity invisible"
        ],
        "Answer": " Answer: c\nExplanation: None.  "
    },
    {
        "id": 471,
        "Question": "What is the user-defined header file extension in c++?",
        "Options": [
            "a) cpp",
            "b) h",
            "c) hf",
            "d) hg"
        ],
        "Answer": " Answer: b\nExplanation: .h extensions are used for user defined header files. To include a user defined header file one should use #include”name.h” i.e. enclosed within double quotes."
    },
    {
        "id": 472,
        "Question": "Which of the following keyword is used to declare the header file?",
        "Options": [
            "a) include",
            "b) exclude",
            "c) string",
            "d) namespace"
        ],
        "Answer": " Answer: a\nExplanation: The include keyword is used to include all the required things to execute the given code in the program. "
    },
    {
        "id": 473,
        "Question": "Identify the incorrect statement.",
        "Options": [
            "a) iostream is a standard header and iostream.h is a non-standard header",
            "b) iostream is a non-standard header and iostream.h is a non-standard header",
            "c) iostream is a standard header and iostream.h is a standard header",
            "d) iostream is a non-standard header"
        ],
        "Answer": " Answer: a\nExplanation: The iostream.h is used in the older versions of c++ and iostream is evolved from it in the std namespace. "
    },
    {
        "id": 474,
        "Question": "What does a default header file contain?",
        "Options": [
            "a) prototype",
            "b) implementation",
            "c) declarations",
            "d) pointing"
        ],
        "Answer": " Answer: c\nExplanation: In the header file, we define something that to be manipulated in the program.  "
    },
    {
        "id": 475,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> name<span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter name: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">gets</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Name: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">puts</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) jobsjobs",
            "b) jobs",
            "c) compile time error",
            "d) program will not run"
        ],
        "Answer": " Answer: c\nExplanation: This program will run on older version of C++ with the inclusion of #include header file, but for on new compiler C++14 and above the gets is removed from the header file so it will not run on them even after inclusion of cstdio header file. "
    },
    {
        "id": 476,
        "Question": "setprecision requires which of the following header file?",
        "Options": [
            "a) stdlib.h",
            "b) iomanip.h",
            "c) console.h",
            "d) conio.h"
        ],
        "Answer": " Answer: b\nExplanation: The iomanip header file is used to correct the precision of the values. "
    },
    {
        "id": 477,
        "Question": "Which of the following header file does not exist?",
        "Options": [
            "a) <iostream>",
            "b) <string>",
            "c) <sstring>",
            "d) <sstream>"
        ],
        "Answer": " Answer: c\nExplanation: There is no such header file <sstring> in C++. "
    },
    {
        "id": 478,
        "Question": "Which of the header file must be included to use stringstream?",
        "Options": [
            "a) <iostream>",
            "b) <string>",
            "c) <sstring>",
            "d) <sstream>"
        ],
        "Answer": " Answer: b\nExplanation: stringstream is available under the header file <string> in C++. "
    },
    {
        "id": 479,
        "Question": "Which of the following header files is required for creating and reading data files?",
        "Options": [
            "a) ofstream.h",
            "b) fstream.h",
            "c) ifstream.h",
            "d) console.h"
        ],
        "Answer": " Answer: b\nExplanation: In this fstream.h header file is used for accessing the files only. "
    },
    {
        "id": 480,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdarg.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">float</span> avg<span class=\"br0\">(</span> <span class=\"kw4\">int</span> Count, ... <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">va_list</span> Numbers<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_start</span><span class=\"br0\">(</span>Numbers, Count<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> Sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> Count<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"kw3\">va_arg</span><span class=\"br0\">(</span>Numbers, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">va_end</span><span class=\"br0\">(</span>Numbers<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Sum<span class=\"sy2\">/</span>Count<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> Average <span class=\"sy1\">=</span> avg<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Average<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 6",
            "d) compile time error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are finding the average of first 10 numbers using stdarg header file\nOutput:\n\n\n$ g++ std.cpp\n$ a.out\n4\n\n\n "
    },
    {
        "id": 481,
        "Question": "What does a class in C++ holds?",
        "Options": [
            "a) data",
            "b) functions",
            "c) both data & functions",
            "d) arrays"
        ],
        "Answer": " Answer: c\nExplanation: The classes in C++ encapsulates(i.e. put together) all the data and functions related to them for manipulation. "
    },
    {
        "id": 482,
        "Question": "How many specifiers are present in access specifiers in class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three types of access specifiers. They are public, protected and private. "
    },
    {
        "id": 483,
        "Question": "Which is used to define the member of a class externally?",
        "Options": [
            "a) :",
            "b) ::",
            "c) #",
            "d) !!$"
        ],
        "Answer": " Answer: b\nExplanation: :: operator is used to define the body of any class function outside the class. "
    },
    {
        "id": 484,
        "Question": "Which other keywords are also used to declare the class other than class?",
        "Options": [
            "a) struct",
            "b) union",
            "c) object",
            "d) both struct & union"
        ],
        "Answer": " Answer: d\nExplanation: Struct and union take the same definition of class but differs in the access techniques. "
    },
    {
        "id": 485,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> rect</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> val <span class=\"br0\">(</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy2\">*</span> y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> rect<span class=\"sy4\">::</span><span class=\"me2\">val</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect rect<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect.<span class=\"me1\">val</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"rect area: \"</span> <span class=\"sy1\">&lt;&lt;</span> rect.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) rect area: 24",
            "b) rect area: 12",
            "c) compile error because rect is as used as class name and variable name in line #20",
            "d) rect area: 56"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are calculating the area of rectangle based on given values.\nOutput:\n\n\n\t\n\n$ g++ class.cpp\n$ a.out\nrect area: 12\n\n\n"
    },
    {
        "id": 486,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> CDummy</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> isitme <span class=\"br0\">(</span>CDummy<span class=\"sy3\">&amp;</span> param<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> CDummy<span class=\"sy4\">::</span><span class=\"me2\">isitme</span> <span class=\"br0\">(</span>CDummy<span class=\"sy3\">&amp;</span> param<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>param <span class=\"sy1\">==</span> <span class=\"kw3\">this</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        CDummy a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        CDummy <span class=\"sy2\">*</span>b <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>isitme<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"execute\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"not execute\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) execute",
            "b) not execute",
            "c) error",
            "d) both execute & not execute"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are just pointing the pointer to a object and printing execute if it is correctly pointed.\nOutput:\n\n\n$ g++ class1.cpp\n$ a.out\nexecute\n\n\n"
    },
    {
        "id": 487,
        "Question": "Which of the following is a valid class declaration?",
        "Options": [
            "a) class A { int x; };",
            "b) class B { }",
            "c) public class A { }",
            "d) object A { int x; };"
        ],
        "Answer": " Answer: a\nExplanation: A class declaration terminates with semicolon and starts with class keyword. only option (a) follows these rules therefore class A { int x; }; is correct. "
    },
    {
        "id": 488,
        "Question": "The data members and functions of a class in C++ are by default ____________",
        "Options": [
            "a) protected",
            "b) private",
            "c) public",
            "d) public & protected"
        ],
        "Answer": " Answer: b\nExplanation: By default all the data members and member functions of class are private. "
    },
    {
        "id": 489,
        "Question": "Constructors are used to ____________",
        "Options": [
            "a) initialize the objects",
            "b) construct the data members",
            "c) both initialize the objects & construct the data members",
            "d) delete the objects"
        ],
        "Answer": " Answer: a\nExplanation: Once the object is declared means, the constructor are also declared by default. "
    },
    {
        "id": 490,
        "Question": "When struct is used instead of the keyword class means, what will happen in the program?",
        "Options": [
            "a) access is public by default",
            "b) access is private by default",
            "c) access is protected by default",
            "d) access is denied"
        ],
        "Answer": " Answer: a\nExplanation: For structures, by default all the data members and member functions are public. "
    },
    {
        "id": 491,
        "Question": "Which category of data type a class belongs to?",
        "Options": [
            "a) Fundamental data type",
            "b) Derived data type",
            "c) User defined derived data type",
            "d) Atomic data type"
        ],
        "Answer": "Answer: c\nExplanation: Fundamental/Atomic data type includes int, char, float, double and void. Derived data type includes arrays, pointers, references, function and constants. User defined derived data type includes class, structure, union and enumeration."
    },
    {
        "id": 492,
        "Question": "Which operator a pointer object of a class uses to access its data members and member functions?",
        "Options": [
            "a) .",
            "b) ->",
            "c) :",
            "d) ::"
        ],
        "Answer": "Answer: b\nExplanation: ->(arrow operator) is used by a pointer object to access members of its class."
    },
    {
        "id": 493,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n&nbsp;\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> assign<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> return_value<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA obj<span class=\"sy4\">;</span>\n\tobj.<span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>obj.<span class=\"me1\">return_value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: As the assign() is a constant function and a constant function cannot change the state of an object and as in the assign function we are trying to modify the member a of the object therefore the program gives error."
    },
    {
        "id": 494,
        "Question": "4. What is the correct syntax of accessing a static member of a Class?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy2\">---------------------------</span>\nExample <span class=\"kw2\">class</span><span class=\"sy4\">:</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> value<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy2\">---------------------------</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A.value",
            "b) A::value",
            "c) A->value",
            "d) A^value"
        ],
        "Answer": "Answer: b\nExplanation: Scope resolution operator(::) is used to access a static member of a class."
    },
    {
        "id": 495,
        "Question": "How the objects are self-referenced in a member function of that class.",
        "Options": [
            "a) Using a special keyword object",
            "b) Using this pointer",
            "c) Using * with the name of that object",
            "d) By passing self as a parameter in the member function"
        ],
        "Answer": "Answer: b\nExplanation: In Classes objects are self-referenced using this pointer inside the member functions. for example this->value to access the data member value of that object."
    },
    {
        "id": 496,
        "Question": "What does a mutable member of a class mean?",
        "Options": [
            "a) A member that can never be changed",
            "b) A member that can be updated only if it not a member of constant object",
            "c) A member that can be updated even if it a member of constant object",
            "d) A member that is global throughout the class"
        ],
        "Answer": "Answer: c\nExplanation: Mutable members are those which can be updated even if it a member of a constant object. You can change their value even from a constant member function of that class."
    },
    {
        "id": 497,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">mutable</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n&nbsp;\n        <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> assign<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> return_value<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA obj<span class=\"sy4\">;</span>\n\tobj.<span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>obj.<span class=\"me1\">return_value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Error",
            "c) Segmentation fault",
            "d) Undefined value"
        ],
        "Answer": "Answer: a\nExplanation: As a is mutable member of the class it’s value can be modified whether it is a part of constant object or not. It can be modified even inside a constant member function. Hence, the program tuns fine and does not gives any error."
    },
    {
        "id": 498,
        "Question": "Pick the incorrect statement about inline functions in C++?",
        "Options": [
            "a) They reduce function call overheads",
            "b) These functions are inserted/substituted at the point of call",
            "c) Saves overhead of a return call from a function",
            "d) They are generally very large and complicated function"
        ],
        "Answer": "Answer: d\nExplanation: Inline are functions that are expanded when it is called. The whole code of the inline function gets inserted/substituted at the point of call. In this, they help in reducing the function call overheads. Also they save overhead of a return call from a function. Inline functions are generally kept small."
    },
    {
        "id": 499,
        "Question": "Inline functions are avoided when ____________________________",
        "Options": [
            "a) function contains static variables",
            "b) function have recursive calls",
            "c) function have loops",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Inline functions are avoided in all the above cases as whole inline code is copied to the point of call so compiler avoids to make large functions as inline. Even if you yourself mention inline but the function is large compiler ignores your request of inline and treats that function as a normal function."
    },
    {
        "id": 500,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Macros and inline functions are same thing",
            "b) Macros looks like function calls but they are actually not",
            "c) Inline functions looks like function but they are not",
            "d) Inline function are always large"
        ],
        "Answer": "Answer: b\nExplanation: Macros in C++ looks like function calls but actually they are not function calls."
    },
    {
        "id": 501,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw2\">class</span> S \n<span class=\"br0\">{</span> \n\t<span class=\"kw4\">int</span> m<span class=\"sy4\">;</span> \n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\t<span class=\"co2\">#define MAC(S::m)</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Error",
            "c) Segmentation Fault",
            "d) Blank Space"
        ],
        "Answer": "Answer: b\nExplanation: Macros cannot access the private member of a class therefore #define MAC(S::m) will give an error."
    },
    {
        "id": 502,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n&nbsp;\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> change<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> value_of_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1 <span class=\"sy1\">=</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta1.<span class=\"me1\">change</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta1.<span class=\"me1\">value_of_a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Garbage value",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Every static member of a class is initialised before its use. As ‘a’ is a static member of the class and is not initialised so the program will give error. "
    },
    {
        "id": 503,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> change<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> value_of_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> A<span class=\"sy4\">::</span><span class=\"me2\">a</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1 <span class=\"sy1\">=</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tA a2 <span class=\"sy1\">=</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tA a3 <span class=\"sy1\">=</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta1.<span class=\"me1\">change</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta1.<span class=\"me1\">value_of_a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta2.<span class=\"me1\">value_of_a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta3.<span class=\"me1\">value_of_a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1055",
            "b) 555",
            "c) 101010",
            "d) 51010"
        ],
        "Answer": "Answer: c\nExplanation: As ‘a’ is a static member of the class so it is a type of global variable to the class i.e. any change made by one object is reflected back to all the other objects. Hence when a is changed to 10 by object a1, so value of ‘a’ becomes 10 for each object and 3 times 10 is printed."
    },
    {
        "id": 504,
        "Question": "14. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> change<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">void</span> value_of_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1 <span class=\"sy1\">=</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta1.<span class=\"me1\">change</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ta1.<span class=\"me1\">value_of_a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) Error",
            "c) Segmentation Fault",
            "d) 5"
        ],
        "Answer": "Answer: b\nExplanation: As value_of_a() is a static function and static member can access only static members therefore the program will give error."
    },
    {
        "id": 505,
        "Question": "Which functions of a class are called inline functions?",
        "Options": [
            "a) All the functions containing declared inside the class",
            "b) All functions defined inside or with the inline keyword",
            "c) All the functions accessing static members of the class",
            "d) All the functions that are defined outside the class"
        ],
        "Answer": "Answer: b\nExplanation: All the functions defined inside the class or functions having inline keyword before them are inline functions of a class provided they are small and simple otherwise compiler ignores the request of inline."
    },
    {
        "id": 506,
        "Question": "Which keyword is used to define the user defined data types?",
        "Options": [
            "a) def",
            "b) union",
            "c) typedef",
            "d) type"
        ],
        "Answer": " Answer: c\nExplanation: Typedef is used to define user defined datatypes.\neg:\ntypedef int INT;\nINT a;\nhere INT is used defined data type. "
    },
    {
        "id": 507,
        "Question": "Identify the correct statement.",
        "Options": [
            "a) typedef does not create different types. It only creates synonyms of existing types",
            "b) typedef create different types",
            "c) typedef create own types",
            "d) typedef will not creates synonyms of existing types"
        ],
        "Answer": " Answer: a\nExplanation: By using typedef, we can create a type of pre-existing type only not our own type of data. "
    },
    {
        "id": 508,
        "Question": "What does the data type defined by union will do?",
        "Options": [
            "a) It allow one different portion of memory to be accessed as same data types",
            "b) It allow one same portion of memory to be accessed as same data types",
            "c) It allow one different portion of memory to be accessed as different data types",
            "d) It allow one same portion of memory to be accessed as different data types"
        ],
        "Answer": " Answer: d\nExplanation: Union is used to define the data types of our choice and it will store the data type in one location make them accessible. "
    },
    {
        "id": 509,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b <span class=\"sy2\">+</span> a <span class=\"sy2\">-</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) 15",
            "c) 30",
            "d) 25"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are manipulating the numbers and printing the result using user-defined data types.\nOutput:\n\n\n        \n\n$ g++ user.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 510,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">enum</span> month </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,DEC</pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> JAN<span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> DEC<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 012345678910",
            "b) 0123456789",
            "c) 01234567891011",
            "d) 01234567891011122"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are defined the data types as enumerator and printing its value in a order.\nOutput:\n\n\n\t\n\n$ g++ user1.cpp\n$ a.out\n012345678910\n\n\n"
    },
    {
        "id": 511,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> num<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">typedef</span> <span class=\"kw4\">char</span> let<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        let w <span class=\"sy1\">=</span> <span class=\"st0\">\"steve\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> w<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10steve",
            "b) steve10",
            "c) compile time error",
            "d) compile but not run"
        ],
        "Answer": " Answer: c\nExplanation: Error: invalid conversion from ‘const char*’ to ‘let {aka char}’. "
    },
    {
        "id": 512,
        "Question": "What is the syntax of user-defined data types?",
        "Options": [
            "a) typedef ExistingDataType NameByUser",
            "b) typedef NameByUser ExistingDataType",
            "c) def NameByUser ExistingDataType",
            "d) def NameByUser ExistingData"
        ],
        "Answer": " Answer: a\nExplanation: correct syntax is typedef ExistingDataType NameByUser.\ntypedef int INT; (typedef existing-datatype New-name;). "
    },
    {
        "id": 513,
        "Question": "How many types of user-defined data type are in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three types of user-defined data types. They are typedef, union, enumerator. "
    },
    {
        "id": 514,
        "Question": "What is the scope of typedef defined data types?",
        "Options": [
            "a) inside that block only",
            "b) whole program",
            "c) outside the program",
            "d) main function"
        ],
        "Answer": " Answer: b\nExplanation: We are defining the user-defined data type to be availed only inside that program, if we want to use anywhere means we have to define those types in the header file. "
    },
    {
        "id": 515,
        "Question": "How many types of models are available to create the user-defined data type?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of models. They are references to built-in types and multipart types. "
    },
    {
        "id": 516,
        "Question": "Where does the object is created?",
        "Options": [
            "a) class",
            "b) constructor",
            "c) destructor",
            "d) attributes"
        ],
        "Answer": "  Answer: a\nExplanation: In class, only all the listed items except class will be declared. "
    },
    {
        "id": 517,
        "Question": "How to access the object in the class?",
        "Options": [
            "a) scope resolution operator",
            "b) ternary operator",
            "c) direct member access operator",
            "d) resolution operator"
        ],
        "Answer": " Answer: c\nExplanation: Objects in the method can be accessed using direct member access operator which is (.). "
    },
    {
        "id": 518,
        "Question": "Which of these following members are not accessed by using direct member access operator?",
        "Options": [
            "a) public",
            "b) private",
            "c) protected",
            "d) both private & protected"
        ],
        "Answer": "  Answer: d\nExplanation: Because of the access is given to the private and protected, We can’t access them by using direct member access operator."
    },
    {
        "id": 519,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Box</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span> <span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> length<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> breadth<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> height<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box Box1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> volume<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box1.<span class=\"me1\">height</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box1.<span class=\"me1\">length</span> <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box1.<span class=\"me1\">breadth</span> <span class=\"sy1\">=</span> <span class=\"nu16\">7.1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        volume <span class=\"sy1\">=</span> Box1.<span class=\"me1\">height</span> <span class=\"sy2\">*</span> Box1.<span class=\"me1\">length</span> <span class=\"sy2\">*</span> Box1.<span class=\"me1\">breadth</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Volume of Box1 : \"</span> <span class=\"sy1\">&lt;&lt;</span> volume <span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 210",
            "b) 213",
            "c) 215",
            "d) 217"
        ],
        "Answer": "  Answer: b\nExplanation: In the above program, we are calculating the area of the cube by using the cube formula\nOutput:\n\n\n        \n\n$ g++ obj1.cpp\n$ a.out\n213\n\n\n"
    },
    {
        "id": 520,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Rect</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> set_values <span class=\"br0\">(</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy2\">*</span> y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Rect<span class=\"sy4\">::</span><span class=\"me2\">set_values</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Rect recta, rectb<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        recta.<span class=\"me1\">set_values</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rectb.<span class=\"me1\">set_values</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"recta area: \"</span> <span class=\"sy1\">&lt;&lt;</span> recta.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"rectb area: \"</span> <span class=\"sy1\">&lt;&lt;</span> rectb.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) recta area: 30 rectb area: 42",
            "b) recta area: 20 rectb area: 34",
            "c) recta area: 30 rectb area: 21",
            "d) recta area: 30 rectb area: 33"
        ],
        "Answer": " Answer: a\nExplanation: We are calculating the area of rectangle by two objects.\n"
    },
    {
        "id": 521,
        "Question": "Pick out the other definition of objects.",
        "Options": [
            "a) member of the class",
            "b) associate of the class",
            "c) attribute of the class",
            "d) instance of the class"
        ],
        "Answer": " Answer: d\nExplanation: An Object represents an instance of a class i.e. a variable of that class type having access to its data members and member functions from outside if allowed. "
    },
    {
        "id": 522,
        "Question": "How many objects can present in a single class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) as many as possible"
        ],
        "Answer": " Answer: d\nExplanation: Because a class may contain any number of objects according to its compliance. "
    },
    {
        "id": 523,
        "Question": "Which special character is used to mark the end of class?",
        "Options": [
            "a) ;",
            "b) :",
            "c) #",
            "d) $"
        ],
        "Answer": " Answer: c\nExplanation: There is no member function var() in the class hence the program will through an error stating var is a private data member and it cannot be used as a function. "
    },
    {
        "id": 524,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> number</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> geti<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> puti<span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> number<span class=\"sy4\">::</span><span class=\"me2\">geti</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> number<span class=\"sy4\">::</span><span class=\"me2\">puti</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        number s<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        s.<span class=\"me1\">puti</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s.<span class=\"me1\">geti</span><span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 11",
            "c) 20",
            "d) 22"
        ],
        "Answer": " Answer: a\nExplanation: Similar to ending any statement, a class is also terminated with semicolon(;). "
    },
    {
        "id": 525,
        "Question": "Pick the other name of operator function.",
        "Options": [
            "a) function overloading",
            "b) operator overloading",
            "c) member overloading",
            "d) object overloading"
        ],
        "Answer": " Answer: b\nExplanation: Operator function means operation defined for that operator so if user defines a function for an operator then that is called operator overloading i.e. overloading already present operator function. "
    },
    {
        "id": 526,
        "Question": "Which of the following operators can’t be overloaded?",
        "Options": [
            "a) ::",
            "b) +",
            "c) –",
            "d) []"
        ],
        "Answer": " Answer: a\nExplanation: :: operator cannot be overloaded because this operator operates on names rather than values and C++ has no syntax for writing codes that works on names than values so using syntax these operators cannot be overloaded."
    },
    {
        "id": 527,
        "Question": "How to declare operator function?",
        "Options": [
            "a) operator sign",
            "b) operator",
            "c) name of the operator",
            "d) name of the class"
        ],
        "Answer": " Answer: a\nExplanation: We have to declare the operator function by using the operator, operator sign. Example “operator +” where the operator is a keyword and + is the symbol need to be overloaded."
    },
    {
        "id": 528,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"br0\">(</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample operator <span class=\"sy2\">+</span> <span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    sample<span class=\"sy4\">::</span><span class=\"me2\">sample</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    sample sample<span class=\"sy4\">::</span><span class=\"me2\">operator</span><span class=\"sy2\">+</span> <span class=\"br0\">(</span>sample param<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> param.<span class=\"me1\">x</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> param.<span class=\"me1\">y</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample a <span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample b <span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c.<span class=\"me1\">x</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span> <span class=\"sy1\">&lt;&lt;</span> c.<span class=\"me1\">y</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5, 5",
            "b) 7, 3",
            "c) 3, 7",
            "d) 3, 5"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are adding the first number of a with first number of b by using operator function and also we are adding second number by this method also.\nOutput:\n\n\n        \n\n$ g++ oper.cpp\n$ a.out\n7, 3\n\n\n"
    },
    {
        "id": 529,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> myclass</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myclass <span class=\"sy2\">*</span>operator<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"kw3\">this</span><span class=\"sy4\">;</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myclass ob<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ob<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ob.<span class=\"me1\">i</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> ob<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 10",
            "b) 11 11",
            "c) error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we finding the box3 area by adding box1 and box2.\nOutput:\n\n\n$ g++ oper1.cpp\n$ a.out\nVolume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400\n\n\n"
    },
    {
        "id": 530,
        "Question": "Which of the following statements is NOT valid about operator overloading?",
        "Options": [
            "a) Only existing operators can be overloaded",
            "b) The overloaded operator must have at least one operand of its class type",
            "c) The overloaded operators follow the syntax rules of the original operator",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: a\nExplanation: We are using two operator functions and executing them and the result is printed according to the order.\nOutput:\n\n\n$ g++ oper2.cpp\n$ a.out\noperator+\noperator+=\n\n\n"
    },
    {
        "id": 531,
        "Question": "Operator overloading is ___________",
        "Options": [
            "a) making c++ operator works with objects",
            "b) giving new meaning to existing operator",
            "c) making the new operator",
            "d) adding operation to the existing operators"
        ],
        "Answer": " Answer: a\nExplanation: In this program, -> operator is used to describe the member of the class and so we are getting this output.\nOutput:\n\n\n$ g++ char4.cpp\n$ a.out\n10 10\n\n\n"
    },
    {
        "id": 532,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    ostream <span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream <span class=\"sy3\">&amp;</span> i, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">5</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 6",
            "c) error",
            "d) runtime error"
        ],
        "Answer": " Answer: b\nExplanation: The overloaded operator must not have at least one operand of its class type.\n"
    },
    {
        "id": 533,
        "Question": "1. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> A<span class=\"sy4\">::</span><span class=\"me2\">a</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error as a private member a is referenced outside the class",
            "b) Segmentation fault",
            "c) No output",
            "d) Program compiles successfully but gives run-time error"
        ],
        "Answer": "Answer: c\nExplanation: As every static member must be initialized and we have initialized variable ‘a’ so no run time error. Also as variable ‘a’ is a static member and is referenced using the class for initialization therefore no compiler error."
    },
    {
        "id": 534,
        "Question": "2. What happens when objects s1 and s2 are added?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">string s1 <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello\"</span><span class=\"sy4\">;</span>\nstring s2 <span class=\"sy1\">=</span> <span class=\"st0\">\"World\"</span><span class=\"sy4\">;</span>\nstring s3 <span class=\"sy1\">=</span> <span class=\"br0\">(</span>s1<span class=\"sy2\">+</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error because s1+s2 will result into string and no string has substr() function",
            "b) Segmentation fault as two string cannot be added in C++",
            "c) The statements runs perfectly",
            "d) Run-time error"
        ],
        "Answer": "Answer: c\nExplanation: string is class in C++, therefore when we do (s1+s2) a temporary object is created which stores the result of s1+s2 and then that object calls the function substr() and as that is an object of string class hence substr is a callable function for that temporary string object."
    },
    {
        "id": 535,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Object of A is created<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1, a2<span class=\"sy4\">;</span>\n\tA a3 <span class=\"sy1\">=</span> a1 <span class=\"sy2\">+</span> a2<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Runs perfectly",
            "b) Run-time Error",
            "c) Segmentation fault",
            "d) Compile-time Error"
        ],
        "Answer": "Answer: d\nExplanation: As the programmer has not defined what action should be taken when two objects of class A are added, so the program doesn’t know and gives compile time error."
    },
    {
        "id": 536,
        "Question": "What is operator overloading in C++?",
        "Options": [
            "a) Overriding the operator meaning by the user defined meaning for user defined data type",
            "b) Redefining the way operator works for user defined types",
            "c) Ability to provide the operators with some special meaning for user defined data type",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Operator overloading helps programmer to give his/her own meaning to an operator for user defined data types(eg, classes)."
    },
    {
        "id": 537,
        "Question": "What is the syntax of overloading operator + for class A?",
        "Options": [
            "a) A operator+(argument_list){}",
            "b) A operator[+](argument_list){}",
            "c) int +(argument_list){}",
            "d) int [+](argument_list){}"
        ],
        "Answer": "Answer: a\nExplanation: The general syntax for operator overloading is:\n\treturn_type operator_keywordOperator(argument_list){}\neg.\n\tA opeartor+(argument_list){}"
    },
    {
        "id": 538,
        "Question": "How many approaches are used for operator overloading?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are 3 different approaches used for operator overloading:\ni. Overloading unary operator.\nii. Overloading binary operator.\niii. Overloading binary operator using a friend function."
    },
    {
        "id": 539,
        "Question": "Which of the following operator cannot be overloaded?",
        "Options": [
            "a) +",
            "b) ?:",
            "c) –",
            "d) %"
        ],
        "Answer": "Answer: b\nExplanation: ?:, :: and . cannot be overloaded +, -, % can be overloaded. "
    },
    {
        "id": 540,
        "Question": "Which of the following operator can be overloaded?",
        "Options": [
            "a) ?:",
            "b) ::",
            "c) .",
            "d) =="
        ],
        "Answer": "Answer: d\nExplanation: ?:, :: and . cannot be overloaded whereas == can be overloaded."
    },
    {
        "id": 541,
        "Question": "Which of the following operator cannot be used to overload when that function is declared as friend function?",
        "Options": [
            "a) -=",
            "b) ||",
            "c) ==",
            "d) []"
        ],
        "Answer": "Answer: d\nExplanation: When an operator overlaoded function is declared as friend function then [] cannot be overloaded."
    },
    {
        "id": 542,
        "Question": "Which of the following operator can be used to overload when that function is declared as friend function?",
        "Options": [
            "a) [] ",
            "b) ()",
            "c) ->",
            "d) |="
        ],
        "Answer": "Answer: d\nExplanation: When an operator overlaoded function is declared as friend function then [], () and -> cannot be overloaded."
    },
    {
        "id": 543,
        "Question": "In case of non-static member functions how many maximum object arguments a unary operator overloaded function can take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: d\nExplanation: In the case of non-static member functions unary operator overloaded function should not take any object argument."
    },
    {
        "id": 544,
        "Question": "In case of non-static member functions how many maximum object arguments a binary operator overloaded function can take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: a\nExplanation: In the case of non-static member functions binary operator overloaded function should take maximum one object argument only."
    },
    {
        "id": 545,
        "Question": "In the case of friend operator overloaded functions how many maximum object arguments a unary operator overloaded function can take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: a\nExplanation: In the case of friend operator overloaded functions unary operator overloaded function should take maximum one object argument only."
    },
    {
        "id": 546,
        "Question": "In the case of friend operator overloaded functions how many maximum object arguments a binary operator overloaded function can take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: In the case of friend operator overloaded functions binary operator overloaded function should take maximum two object argument."
    },
    {
        "id": 547,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n&nbsp;\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> operator.<span class=\"br0\">(</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Objects are added<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n     <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1, a2<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Run-time Error",
            "b) Runs perfectly",
            "c) Segmentation fault",
            "d) Compile-time error"
        ],
        "Answer": "Answer: d\nExplanation: .(dot) operator cannot be overloaded therefore the program gives error."
    },
    {
        "id": 548,
        "Question": "What is a binary operator?",
        "Options": [
            "a) Operator that performs its action on a single operand",
            "b) Operator that performs its action on two operand",
            "c) Operator that performs its action on three operand",
            "d) Operator that performs its action on any number of operands"
        ],
        "Answer": "Answer: b\nExplanation: As the word binary itself means 2 therefore a binary operator operates on two operands."
    },
    {
        "id": 549,
        "Question": "Which is the correct example of a binary operator?",
        "Options": [
            "a) ++",
            "b) —",
            "c) Dereferencing operator(*)",
            "d) +"
        ],
        "Answer": "Answer: d\nExplanation: +(adding two operands) requires two operands whereas ++(increases value by 1), –(decreases value by 1) and *(dereferencing operator used for accessing value of pointers) requires only one operand."
    },
    {
        "id": 550,
        "Question": "Which is the correct example of a unary operator?",
        "Options": [
            "a) &",
            "b) ==",
            "c) —",
            "d) /"
        ],
        "Answer": "Answer: c\nExplanation: &, == and / requires two operands whereas — requires only one operand, in general, it decreases the value of operand by 1."
    },
    {
        "id": 551,
        "Question": "Which is called ternary operator?",
        "Options": [
            "a) ?:",
            "b) &&",
            "c) |||",
            "d) ==="
        ],
        "Answer": "Answer: a\nExplanation: ?: is called ternary operator because it separates three expressions. exp1 ? exp2 : exp3."
    },
    {
        "id": 552,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> complex\n<span class=\"br0\">{</span>\n&nbsp;\n\t<span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> j<span class=\"sy4\">;</span>\n        <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tcomplex<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\ti <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t\tj <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\tcomplex operator<span class=\"sy2\">+</span><span class=\"br0\">(</span>complex c<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\tcomplex temp<span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i <span class=\"sy2\">+</span> c.<span class=\"me1\">i</span><span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">j</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>j <span class=\"sy2\">+</span> c.<span class=\"me1\">j</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw1\">return</span> temp<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Complex Number: \"</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" + i\"</span><span class=\"sy1\">&lt;&lt;</span>j<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex c1<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tcomplex c2<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tcomplex c3 <span class=\"sy1\">=</span> c1 <span class=\"sy2\">+</span> c2<span class=\"sy4\">;</span>\n\tc3.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4 + i6",
            "b) 2 + i2",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: In the operator overloaded function we are trying to call default constructor of the class complex but as we have overridden the constructor by our constructor therefore the default constructor cannot be called hence the program gives error."
    },
    {
        "id": 553,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> complex\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> j<span class=\"sy4\">;</span>\n        <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tcomplex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tcomplex<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t        i <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t\tj <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\tcomplex operator<span class=\"sy2\">+</span><span class=\"br0\">(</span>complex c<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\tcomplex temp<span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i <span class=\"sy2\">+</span> c.<span class=\"me1\">i</span><span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">j</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>j <span class=\"sy2\">+</span> c.<span class=\"me1\">j</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw1\">return</span> temp<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Complex Number: \"</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" + i\"</span><span class=\"sy1\">&lt;&lt;</span>j<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex c1<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tcomplex c2<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tcomplex c3 <span class=\"sy1\">=</span> c1 <span class=\"sy2\">+</span> c2<span class=\"sy4\">;</span>\n\tc3.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Complex Number: 4 + i6",
            "b) Complex Number: 2 + i2",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: As we have defined in the class complec that when we add the two objects of the class complex then add those two complex numbers and show() displays that result."
    },
    {
        "id": 554,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> complex\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> j<span class=\"sy4\">;</span>\n      <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tcomplex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tcomplex<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\ti <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t\tj <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\tcomplex operator<span class=\"sy2\">+</span><span class=\"br0\">(</span>complex c<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\tcomplex temp<span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i <span class=\"sy2\">+</span> c.<span class=\"me1\">i</span><span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">j</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>j <span class=\"sy2\">+</span> c.<span class=\"me1\">j</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw1\">return</span> temp<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw4\">void</span> operator<span class=\"sy2\">+</span><span class=\"br0\">(</span>complex c<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\tcomplex temp<span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i <span class=\"sy2\">+</span> c.<span class=\"me1\">i</span><span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">j</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>j <span class=\"sy2\">+</span> c.<span class=\"me1\">j</span><span class=\"sy4\">;</span>\n\t\ttemp.<span class=\"me1\">show_poss</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Complex Number: \"</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" + i\"</span><span class=\"sy1\">&lt;&lt;</span>j<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw4\">void</span> show_poss<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Your result after addition will be: \"</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" + i\"</span><span class=\"sy1\">&lt;&lt;</span>j<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex c1<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tcomplex c2<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tc1 <span class=\"sy2\">+</span> c2<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Complex Number: 4 + i6",
            "b) Complex Number: 2 + i2",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Each operator function can be defined only once in a class. So as in this program we are trying to define two functions for operator ‘+’ which is not allowed in C++ therefore program gives error."
    },
    {
        "id": 555,
        "Question": "Which is the correct statement about operator overloading?",
        "Options": [
            "a) Only arithmetic operators can be overloaded",
            "b) Only non-arithmetic operators can be overloaded",
            "c) Precedence of operators are changed after overlaoding",
            "d) Associativity and precedence of operators does not change"
        ],
        "Answer": "Answer: d\nExplanation: Both arithmetic and non-arithmetic operators can be overloaded. The precedence and associativity of operators remains the same after and before operator overloading."
    },
    {
        "id": 556,
        "Question": "Pick the incorrect statements out of the following.",
        "Options": [
            "a) Operator overloading does not disturbs the precedence of operators",
            "b) Arity of operators can be changed using operator overloading",
            "c) No new operators can be created",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Arity means a number of operands an operator requires to perform its action and operator overloading does not changes the arity of any operator."
    },
    {
        "id": 557,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n\tBox<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">double</span> capacity<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity <span class=\"sy1\">=</span> capacity<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBox b1<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tBox b2 <span class=\"sy1\">=</span> Box<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) Segmentation fault",
            "c) 4",
            "d) No output"
        ],
        "Answer": "Answer: a\nExplanation: As we need to give the result after comparing the capacity of two boxes. We use < operator and as this is the first operand and second operand is passed so we need to do this->capacity < b.capacity (passed object) to make the program run."
    },
    {
        "id": 558,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">bool</span> operator<span class=\"sy1\">&lt;</span><span class=\"br0\">(</span>Box b<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">capacity</span> <span class=\"sy4\">?</span> <span class=\"kw2\">true</span> <span class=\"sy4\">:</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tBox<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">double</span> capacity<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity <span class=\"sy1\">=</span> capacity<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBox b1<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tBox b2 <span class=\"sy1\">=</span> Box<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b1 <span class=\"sy1\">&lt;</span> b2<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Box 2 has large capacity.\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Box 1 has large capacity.\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) Segmentation fault",
            "c) Box 2 has large capacity",
            "d) No output"
        ],
        "Answer": "Answer: a\nExplanation: As constructors are defined private and we know objects cannot access private objects therefore program gives error. Also no class should have private constructor."
    },
    {
        "id": 559,
        "Question": "13. Which operator should be overloaded in the following code to make the program error free?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tBox<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">double</span> capacity<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity <span class=\"sy1\">=</span> capacity<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBox b1<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tBox b2 <span class=\"sy1\">=</span> Box<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b1 <span class=\"sy1\">==</span> b2<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Equal\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Not Equal\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) +",
            "b) ==",
            "c) =",
            "d) ()"
        ],
        "Answer": "Answer: a\nExplanation: As the operator overloaded function defined is private therfore on comparison the function cannot be called from outside therefore the program gives error."
    },
    {
        "id": 560,
        "Question": "14. Give the function prototype of the operator function which we need to define in this program so that the program has no errors.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tBox<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">double</span> capacity<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity <span class=\"sy1\">=</span> capacity<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBox b1<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tBox b2 <span class=\"sy1\">=</span> Box<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b1 <span class=\"sy1\">==</span> b2<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Equal\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Not Equal\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) bool operator==();",
            "b) bool operator==(Box b){}",
            "c) bool operator==(Box b);",
            "d) Box operator==();"
        ],
        "Answer": "Answer: b\nExplanation: As in the if block we are trying to compare two Box objects and no method is defined to tell compiler how the comparison should be done bwteen these two objects. Hence we need to overload the == operator."
    },
    {
        "id": 561,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tBox<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">double</span> capacity<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity <span class=\"sy1\">=</span> capacity<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">bool</span> operator<span class=\"sy1\">&lt;</span><span class=\"br0\">(</span>Box b<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> b.<span class=\"me1\">capacity</span> <span class=\"sy1\">&lt;</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>capacity<span class=\"sy4\">?</span> <span class=\"kw2\">true</span> <span class=\"sy4\">:</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBox b1<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tBox b2 <span class=\"sy1\">=</span> Box<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b1 <span class=\"sy1\">&lt;</span> b2<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"B1's capacity is small\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"B2's capacity is small\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) B1's capacity is small",
            "b) B2's capacity is small",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: In this question we are asked to give the function prototypr not the function definition so the answer should not contain {} braces. The correct overloaded function is bool operator==(Box b);"
    },
    {
        "id": 562,
        "Question": "Which header file is used to declare the complex number?",
        "Options": [
            "a) complexnum",
            "b) complex",
            "c) complex number",
            "d) complexarg"
        ],
        "Answer": " Answer: b\nExplanation: <complex> header file is used for declaring a complex number in C++.\n"
    },
    {
        "id": 563,
        "Question": "How to declare the complex number?",
        "Options": [
            "a) (3, 4)",
            "b) complex(3, 4)",
            "c) (3, 4i)",
            "d) (3, 4g)"
        ],
        "Answer": " Answer: b\nExplanation: We can declare the complex number by using complex(3,4) where 3 is a real number and 4 is imaginary part.\n"
    },
    {
        "id": 564,
        "Question": "How many real types are there in complex numbers?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three real types in complex numbers. They are float complex, double complex, long double complex.\n"
    },
    {
        "id": 565,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;complex&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> c1<span class=\"br0\">(</span><span class=\"nu16\">4.0</span>, <span class=\"nu16\">16.0</span><span class=\"br0\">)</span>, c2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       c2 <span class=\"sy1\">=</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span>c1, <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>          </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) (-240, 128)",
            "b) (240, 128)",
            "c) (240, 120)",
            "d) (240, -122)"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are finding the square of the complex number.\nOutput:\n\n\n        \n\n$ g++ comp.cpp\n$ a.out\n(-240,128)\n\n\n"
    },
    {
        "id": 566,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;complex&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> c_double<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> c_int<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c_double <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c_double <span class=\"sy1\">=</span> c_int<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c_double<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) (2, 3)",
            "b) (4, 5)",
            "c) (8, 15)",
            "d) (8, 10)"
        ],
        "Answer": " Answer: b\nExplanation: We are just copying the value of c_int into c_double, So it’s printing as (4,5).\nOutput:\n\n\n\t\n\n$ g++ comp1.cpp\n$ a.out\n(4,5)\n\n\n"
    },
    {
        "id": 567,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;complex&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> i<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> i <span class=\"sy2\">*</span> <span class=\"nu0\">6</span> <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) (4, 6)",
            "b) (2, 3)",
            "c) (6, 12)",
            "d) (6, 15)"
        ],
        "Answer": " Answer: a\nExplanation: We are multiplying the complex number by 2.\nOutput:\n\n\n$ g++ comp2.cpp\n$ a.out\n(4,6)\n\n\n"
    },
    {
        "id": 568,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;complex&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> c1<span class=\"br0\">(</span><span class=\"nu16\">4.0</span>,<span class=\"nu16\">3.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"c1: \"</span> <span class=\"sy1\">&lt;&lt;</span> c1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> c2<span class=\"br0\">(</span>polar<span class=\"br0\">(</span><span class=\"nu16\">5.0</span>,<span class=\"nu16\">0.75</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c1 <span class=\"sy2\">+</span> complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>c2.<span class=\"me1\">real</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,c2.<span class=\"me1\">imag</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) c1: (4,3)(7.65844,6.40819)",
            "b) c1: (4,3)(7,6)",
            "c) both c1: (4,3)(7.65844,6.40819) & c1: (4,3)(7,6)",
            "d) c1: (5,3)(7,6)"
        ],
        "Answer": " Answer: a\nExplanation: We are adding the two complex numbers and printing the result.\nOutput:\n\n\n$ g++ comp3.cpp\n$ a.out\nc1: (4,3)(7.65844,6.40819)\n\n\n"
    },
    {
        "id": 569,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;complex&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> c1<span class=\"br0\">(</span><span class=\"nu16\">4.0</span>, <span class=\"nu16\">3.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> c2<span class=\"br0\">(</span>polar<span class=\"br0\">(</span><span class=\"nu16\">5.0</span>, <span class=\"nu16\">0.75</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>c1 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) (4.0, 3.0)",
            "b) (6.12132, 3.70711)",
            "c) (5.0, 0.75)",
            "d) (5.0, 3.75)"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are adding both complex number and finding the square root of it.\nOutput:\n\n\n$ g++ comp4.cpp\n$ a.out\n(6.12132,3.70711)\n\n\n"
    },
    {
        "id": 570,
        "Question": "Which of the following is not a function of complex values?",
        "Options": [
            "a) real",
            "b) imag",
            "c) norm",
            "d) cartesian"
        ],
        "Answer": " Answer: d\nExplanation: Real is used for returning real part, imag for imaginary part and norm for calculating norm of a complex number. There is no such function Cartesian in complex header file.\n"
    },
    {
        "id": 571,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;complex&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> mycomplex <span class=\"br0\">(</span><span class=\"nu16\">20.0</span>, <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> imag<span class=\"br0\">(</span>mycomplex<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 20",
            "c) 40",
            "d) 30"
        ],
        "Answer": " Answer: a\nExplanation: imag part will return the imaginary part of the complex number.\nOutput:\n\n\n$ g++ comp5.cpp\n$ a.out\n2\n\n\n"
    },
    {
        "id": 572,
        "Question": "What is the return type of the conversion operator?",
        "Options": [
            "a) void",
            "b) int",
            "c) float",
            "d) no return type"
        ],
        "Answer": " Answer: d\nExplanation: Conversion operator doesn’t have any return type not even void.\n"
    },
    {
        "id": 573,
        "Question": "Why we use the “dynamic_cast” type conversion?",
        "Options": [
            "a) result of the type conversion is a valid",
            "b) to be used in low memory",
            "c) result of the type conversion is an invalid",
            "d) it is used for storage"
        ],
        "Answer": " Answer: a\nExplanation: It is used to check that operators and operands are compatible after conversion.\n"
    },
    {
        "id": 574,
        "Question": "How many parameters does a conversion operator may take?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) as many as possible"
        ],
        "Answer": " Answer: a\nExplanation: 0 parameters does a conversion operator will take.\n"
    },
    {
        "id": 575,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample1 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> i, j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample2 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample2 <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">             x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">             y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> result<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample1 d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample2 <span class=\"sy2\">*</span> padd<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        padd <span class=\"sy1\">=</span> <span class=\"br0\">(</span>sample2<span class=\"sy2\">*</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span>d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span> padd<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>result<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) runtime error",
            "c) random number",
            "d) runtime error or random number"
        ],
        "Answer": " Answer: d\nExplanation: As it assigns to a reference to an object of another incompatible type using explicit type-casting.\nOutput:\n\n\n        \n\n$ g++ con.cpp\n$ a.out\n14032334\n\n\n"
    },
    {
        "id": 576,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"sy4\">:</span> m_i<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> m_i <span class=\"sy2\">+</span> i<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        operator <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> m_i<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> m_i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">int</span> g<span class=\"br0\">(</span><span class=\"kw4\">const</span> sample<span class=\"sy3\">&amp;</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 5",
            "d) 6"
        ],
        "Answer": " Answer: b\nExplanation: In this program, we are adding its value with it itself, So only we got the output as 4.\nOutput:\n\n\n\t\n\n$ g++ con1.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 577,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cmath&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Complex</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> real<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> imag<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Complex<span class=\"br0\">(</span><span class=\"kw4\">double</span> r <span class=\"sy1\">=</span> <span class=\"nu16\">0.0</span>, <span class=\"kw4\">double</span> i <span class=\"sy1\">=</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> real<span class=\"br0\">(</span>r<span class=\"br0\">)</span>, imag<span class=\"br0\">(</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> mag<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> getMag<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        operator <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> getMag<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> getMag<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>real <span class=\"sy2\">*</span> real <span class=\"sy2\">+</span> imag <span class=\"sy2\">*</span> imag<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Complex com<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">4.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> com.<span class=\"me1\">mag</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> com<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 5",
            "b) 4 5",
            "c) 6 6",
            "d) 7 5"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are calculating the magnitude value by two ways.\nOutput:\n\n\n$ g++ con3.cpp\n$ a.out\n55\n\n\n"
    },
    {
        "id": 578,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> test</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        operator string <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"st0\">\"Converted\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        test t<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string s <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) converted",
            "b) error",
            "c) run time error",
            "d) convertedconverted"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We casted the string to the object of the class.\nOutput:\n\n\n$ g++ con4.cpp\n$ a.out\nconverted\n\n\n"
    },
    {
        "id": 579,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> a <span class=\"sy1\">=</span> <span class=\"nu16\">21.09399</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> b <span class=\"sy1\">=</span> <span class=\"nu16\">10.20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2110",
            "b) 1210",
            "c) 21",
            "d) 121"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we casted the data type to integer.\nOutput:\n\n\n$ g++ con5.cpp\n$ a.out\n2110\n\n\n"
    },
    {
        "id": 580,
        "Question": "How are types therein user-defined conversion?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of user-defined conversions. They are conversion by the constructor, Conversion functions.\n"
    },
    {
        "id": 581,
        "Question": "Pick out the correct syntax of operator conversion.",
        "Options": [
            "a) operator float()const",
            "b) operator float()",
            "c) operator const",
            "d) operator const()"
        ],
        "Answer": " Answer: a\nExplanation: The syntax of operator conversion is operator float()const.\n"
    },
    {
        "id": 582,
        "Question": "Which rule will not affect the friend function?",
        "Options": [
            "a) private and protected members of a class cannot be accessed from outside",
            "b) private and protected member can be accessed anywhere",
            "c) protected member can be accessed anywhere",
            "d) private member can be accessed anywhere"
        ],
        "Answer": " Answer: a\nExplanation: Friend is used to access private and protected members of a class from outside the same class.\n"
    },
    {
        "id": 583,
        "Question": "Which keyword is used to declare the friend function?",
        "Options": [
            "a) firend",
            "b) friend",
            "c) classfriend",
            "d) myfriend"
        ],
        "Answer": " Answer: b\nExplanation: friend keyword is used to declare a friend function in C++.\n"
    },
    {
        "id": 584,
        "Question": "What is the syntax of friend function?",
        "Options": [
            "a) friend class1 Class2;",
            "b) friend class;",
            "c) friend class",
            "d) friend class()"
        ],
        "Answer": " Answer: a\nExplanation: In option a, the class2 is the friend of class1 and it can access all the private and protected members of class1.\n"
    },
    {
        "id": 585,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Box</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> width<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> printWidth<span class=\"br0\">(</span> Box box <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> setWidth<span class=\"br0\">(</span> <span class=\"kw4\">double</span> wid <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Box<span class=\"sy4\">::</span><span class=\"me2\">setWidth</span><span class=\"br0\">(</span> <span class=\"kw4\">double</span> wid <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        width <span class=\"sy1\">=</span> wid<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> printWidth<span class=\"br0\">(</span> Box box <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        box.<span class=\"me1\">width</span> <span class=\"sy1\">=</span> box.<span class=\"me1\">width</span> <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Width of box : \"</span> <span class=\"sy1\">&lt;&lt;</span> box.<span class=\"me1\">width</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Box box<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        box.<span class=\"me1\">setWidth</span><span class=\"br0\">(</span><span class=\"nu16\">10.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        printWidth<span class=\"br0\">(</span> box <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 40",
            "b) 5",
            "c) 10",
            "d) 20"
        ],
        "Answer": " Answer: d\nExplanation: We are using the friend function for printwidth and multiplied the width value by 2, So we got the output as 20\nOutput:\n\n\n        \n\n$ g++ friend.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 586,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> width, height<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> set_values <span class=\"br0\">(</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>width <span class=\"sy2\">*</span> height<span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> sample duplicate <span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> sample<span class=\"sy4\">::</span><span class=\"me2\">set_values</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        width <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        height <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    sample duplicate <span class=\"br0\">(</span>sample rectparam<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample rectres<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rectres.<span class=\"me1\">width</span> <span class=\"sy1\">=</span> rectparam.<span class=\"me1\">width</span> <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rectres.<span class=\"me1\">height</span> <span class=\"sy1\">=</span> rectparam.<span class=\"me1\">height</span> <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>rectres<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample rect, rectb<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect.<span class=\"me1\">set_values</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rectb <span class=\"sy1\">=</span> duplicate <span class=\"br0\">(</span>rect<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> rectb.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) 16",
            "c) 24",
            "d) 18"
        ],
        "Answer": " Answer: c\nExplanation: In this program, we are using the friend function for duplicate function and calculating the area of the rectangle.\nOutput:\n\n\n\t\n\n$ g++ friend1.cpp\n$ a.out\n24\n\n\n"
    },
    {
        "id": 587,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample1 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> width, height<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>width <span class=\"sy2\">*</span> height<span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">void</span> convert <span class=\"br0\">(</span>sample a<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> side<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> set_side <span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            side <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw2\">class</span> sample1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> sample1<span class=\"sy4\">::</span><span class=\"me2\">convert</span> <span class=\"br0\">(</span>sample a<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        width <span class=\"sy1\">=</span> a.<span class=\"me1\">side</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        height <span class=\"sy1\">=</span> a.<span class=\"me1\">side</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample sqr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample1 rect<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sqr.<span class=\"me1\">set_side</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect.<span class=\"me1\">convert</span><span class=\"br0\">(</span>sqr<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> rect.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 24",
            "b) 35",
            "c) 16",
            "d) 36"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we are using the friend for the class and calculating the area of the square.\nOutput:\n\n\n$ g++ friend2.cpp\n$ a.out\n36\n\n\n"
    },
    {
        "id": 588,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> val1, val2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            val1 <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            val2 <span class=\"sy1\">=</span> <span class=\"nu0\">300</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">float</span> mean<span class=\"br0\">(</span>base ob<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">float</span> mean<span class=\"br0\">(</span>base ob<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"kw4\">float</span><span class=\"br0\">(</span>ob.<span class=\"me1\">val1</span> <span class=\"sy2\">+</span> ob.<span class=\"me1\">val2</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        base obj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mean<span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 200",
            "b) 150",
            "c) 100",
            "d) 300"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are finding the mean value by declaring the function mean as a friend of class base.\nOutput:\n\n\n$ g++ friend3.cpp\n$ a.out\n200\n\n\n"
    },
    {
        "id": 589,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            a <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            b <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">int</span> compute<span class=\"br0\">(</span>sample e1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> compute<span class=\"br0\">(</span>sample e1<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>e1.<span class=\"me1\">a</span> <span class=\"sy2\">+</span> e1.<span class=\"me1\">b</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample e<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        e.<span class=\"me1\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> compute<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) 300",
            "d) 295"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we are finding a value from the given function by using the friend for compute function.\nOutput:\n\n\n$ g++ friend4.cpp\n$ a.out\n295\n\n\n"
    },
    {
        "id": 590,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) A friend function may be a member of another class",
            "b) A friend function may not be a member of another class",
            "c) A friend function may or may not be a member of another class",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: c\nExplanation: A friend function may or may not be a member of another class is the correct statement.\n"
    },
    {
        "id": 591,
        "Question": "Where does keyword ‘friend’ should be placed?",
        "Options": [
            "a) function declaration",
            "b) function definition",
            "c) main function",
            "d) block function"
        ],
        "Answer": " Answer: a\nExplanation: The keyword friend is placed only in the function declaration of the friend function and not in the function definition because it is used toaccess the member of a class.\n"
    },
    {
        "id": 592,
        "Question": "What is a friend function in C++?",
        "Options": [
            "a) A function which can access all the private, protected and public members of a class",
            "b) A function which is not allowed to access any member of any class",
            "c) A function which is allowed to access public and protected members of a class",
            "d) A function which is allowed to access only public members of a class"
        ],
        "Answer": "Answer: a\nExplanation: Friend function in C++ is a function which can access all the private, protected and public members of a class."
    },
    {
        "id": 593,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">int</span> cap<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tcapacity <span class=\"sy1\">=</span> cap<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\t\n\tBox b<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Value of capacity is: \"</span><span class=\"sy1\">&lt;&lt;</span>b.<span class=\"me1\">capacity</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Value of capacity is: 10",
            "b) Value of capacity is: 100",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: As show() is a friend function of class Box hence any object from this function can access the private member of the class Box."
    },
    {
        "id": 594,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Box\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tBox<span class=\"br0\">(</span><span class=\"kw4\">int</span> cap<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tcapacity <span class=\"sy1\">=</span> cap<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> Box<span class=\"sy4\">::</span><span class=\"me2\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\t\n\tBox b<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Value of capacity is: \"</span><span class=\"sy1\">&lt;&lt;</span>b.<span class=\"me1\">capacity</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Value of capacity is: 10",
            "b) Value of capacity is: 100",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Though it is used to declare the friend functions inside classes they are not members of any class therefore when we giving the definition to friend function show() we should not use Box::show() way of defining it."
    },
    {
        "id": 595,
        "Question": "4. How many member functions are there in this C++ class excluding constructors and destructors?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> Box\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> capacity<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">bool</span> compare<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">bool</span> lost<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: A friend functions are not members of any class. Hence this class has only 2 member functions."
    },
    {
        "id": 596,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> C\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tC<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> B<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tC c<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"value of b is: \"</span><span class=\"sy1\">&lt;&lt;</span>c.<span class=\"me1\">b</span>.<span class=\"me1\">b</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) value of b is: 10",
            "b) value of b is: 12345435",
            "c) error",
            "d) segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: There is two error in the program. First the program doesn’t have a default constructor for the class B which is used when the object of B is declared inside the class C. Second show() is friend function of class C therefore it can access only private member of class C, not B therefore when we are doing c.b.b here the last b is private member of class B which is not accessible."
    },
    {
        "id": 597,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n     <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tB<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> C\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n     <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tC<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> B<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tC c<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"value of b is: \"</span><span class=\"sy1\">&lt;&lt;</span>c.<span class=\"me1\">b</span>.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) value of b is: 10",
            "b) value of b is: 12345435",
            "c) error",
            "d) segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: The program follows correct syntax and semantics hence no errors."
    },
    {
        "id": 598,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tB<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> C\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tC<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> B<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n&nbsp;\n\t\tC c<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"value of b is: \"</span><span class=\"sy1\">&lt;&lt;</span>c.<span class=\"me1\">b</span>.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) value of b is: 10",
            "b) value of b is: 12345435",
            "c) error",
            "d) segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: No function show() is defined in the scope of main() function."
    },
    {
        "id": 599,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n\tB<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> C\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tC<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tb <span class=\"sy1\">=</span> B<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n&nbsp;\n\t\tC c<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"value of b is: \"</span><span class=\"sy1\">&lt;&lt;</span>c.<span class=\"me1\">b</span>.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tC c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tc.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) value of b is: 10",
            "b) value of b is: 12345435",
            "c) error",
            "d) segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Friend functions are not members of any class therefore they should not be called using class objects."
    },
    {
        "id": 600,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Friend functions are in the scope of a class",
            "b) Friend functions can be called using class objects",
            "c) Friend functions can be invoked as a normal function",
            "d) Friend functions can access only protected members not the private members"
        ],
        "Answer": "Answer: c\nExplanation: Friend functions are not in the scope of a class and hence cannot be called through a class object. A friend function can access all types of members of the class. They can be invoked as a normal function."
    },
    {
        "id": 601,
        "Question": "Which of the following is correct about friend functions?",
        "Options": [
            "a) Friend functions use the dot operator to access members of a class using class objects",
            "b) Friend functions can be private or public",
            "c) Friend cannot access the members of the class directly",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Friend function can be declared either in private or public part of the class. A friend function cannot access the members of the class directly. They use the dot membership operator with a member name."
    },
    {
        "id": 602,
        "Question": "Which keyword is used to represent a friend function?",
        "Options": [
            "a) friend",
            "b) Friend",
            "c) friend_func",
            "d) Friend_func"
        ],
        "Answer": "Answer: a\nExplanation: friend keyword is used to declare a friend function."
    },
    {
        "id": 603,
        "Question": "How to store the large objects in c++ if it extends its allocated memory?",
        "Options": [
            "a) memory heap",
            "b) stack",
            "c) queue",
            "d) stack & queue"
        ],
        "Answer": " Answer: a\nExplanation: Memory heap will store the large objects in c++ if it extends its allocated memory.\n"
    },
    {
        "id": 604,
        "Question": "When we are using heap operations what do we need to do to save the memory?",
        "Options": [
            "a) rename the objects",
            "b) delete the objects after processing",
            "c) both rename & delete the objects",
            "d) add the objects"
        ],
        "Answer": " Answer: b\nExplanation: When you allocate memory from the heap, you must remember to clean up objects when you’re done! Failure to do so is called a memory leak.\n"
    },
    {
        "id": 605,
        "Question": "Which container in c++ will take large objects?",
        "Options": [
            "a) string",
            "b) class",
            "c) vector",
            "d) string & class"
        ],
        "Answer": " Answer: c\nExplanation: Because the vector is mainly used to store large objects for the game programming and other operations etc.\n"
    },
    {
        "id": 606,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"X::X()\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"br0\">(</span> sample <span class=\"kw4\">const</span> <span class=\"sy3\">&amp;</span> <span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"X::X( X const &amp; )\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span> sample <span class=\"kw4\">const</span> <span class=\"sy3\">&amp;</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"X::operator=(X const &amp;)\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    sample f<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample tmp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> tmp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample x <span class=\"sy1\">=</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) X::operator=(X const &)",
            "b) X::X( X const & )",
            "c) X::X()",
            "d) X::operator"
        ],
        "Answer": " Answer: c\nExplanation: As we are passing the object without any attributes it will return as X::X().\nOutput:\n\n\n        \n\n$ g++ large.cpp\n$ a.out\nX::X()\n\n\n"
    },
    {
        "id": 607,
        "Question": "How to stop your program from eating so much ram?",
        "Options": [
            "a) Find a way to work with the data one at a time",
            "b) Declare it in program memory, instead of on the stack",
            "c) Use the hard drive, instead of RAM",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Some of the ways to stop the program by consuming more ram. They are\ni) Find a way to work with the data one at a time\nii) Declare it in program memory, instead of on the stack\niii) Use the hard drive, instead of RAM\n"
    },
    {
        "id": 608,
        "Question": "Which option is best to eliminate the memory problem?",
        "Options": [
            "a) use smart pointers",
            "b) use raw pointers",
            "c) use virtual destructor",
            "d) use smart pointers & virtual destructor"
        ],
        "Answer": " Answer: d\nExplanation: Virtual destructor means is that the object is destructed in reverse order in which it was constructed and the smart pointer will delete the object from memory when the object goes out of scope.\n"
    },
    {
        "id": 609,
        "Question": "What is the size of the heap?",
        "Options": [
            "a) 10MB",
            "b) 500MB",
            "c) 1GB",
            "d) Size of the heap memory is limited by the size of the RAM and the swap memory"
        ],
        "Answer": " Answer: d\nExplanation: Size of the heap memory is limited by the size of the RAM and the swap memory.\n"
    },
    {
        "id": 610,
        "Question": "How to unlimit the size of the stack?",
        "Options": [
            "a) setrlimit()",
            "b) unlimit()",
            "c) both setrlimit() & unlimit()",
            "d) setflimit()"
        ],
        "Answer": " Answer: a\nExplanation: setrlimit() is used to unlimit the size of the stack.\n"
    },
    {
        "id": 611,
        "Question": "In Linux, how do the heaps and stacks are managed?",
        "Options": [
            "a) ram",
            "b) secondary memory",
            "c) virtual memory",
            "d) static memory"
        ],
        "Answer": " Answer: c\nExplanation: In virtual memory, We can keep track of all the objects and access them much faster than any another.\n"
    },
    {
        "id": 612,
        "Question": "Which is used to pass the large objects in c++?",
        "Options": [
            "a) pass by value",
            "b) pass by reference",
            "c) both pass by value & reference",
            "d) pass by name"
        ],
        "Answer": " Answer: b\nExplanation: Because by using pass by reference we need to pass only address location, So it can save a lot of memory.\n"
    },
    {
        "id": 613,
        "Question": "What are the essential operators in c++?",
        "Options": [
            "a) +",
            "b) |",
            "c) <=",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Essential operators in c++ are +, |, <=.\n"
    },
    {
        "id": 614,
        "Question": "In which direction does the assignment operation will take place?",
        "Options": [
            "a) left to right",
            "b) right to left",
            "c) top to bottom",
            "d) bottom to top"
        ],
        "Answer": " Answer: b\nExplanation: In assignment operation, the flow of execution will be from right to left only.\n"
    },
    {
        "id": 615,
        "Question": "Pick out the compound assignment statement.",
        "Options": [
            "a) a = a – 5",
            "b) a = a / b",
            "c) a -= 5",
            "d) a = a + 5"
        ],
        "Answer": " Answer: c\nExplanation: When we want to modify the value of a variable by performing an operation on the value currently stored,  We will use compound assignment statement. In this option, a -=5 is equal to a = a-5.\n"
    },
    {
        "id": 616,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span>         </pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>           </pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span>            </pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span>           </pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span>           </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"a:\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" b:\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) a:4 b:7",
            "b) a:10 b:4",
            "c) a:4 b:10",
            "d) a:4 b:6"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are reassigning the values of a and b because of this we got the output as a:4 b:7\nOutput:\n\n\n        \n\n$ g++ ess.cpp\n$ a.out\na:4 b:7\n\n\n"
    },
    {
        "id": 617,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a, b, c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> a <span class=\"sy4\">:</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 7",
            "c) 9",
            "d) 14"
        ],
        "Answer": " Answer: b\nExplanation: We are using the ternary operator to evaluate this expression. It will return first option, if first condition is true otherwise it will return second\nOutput:\n\n\n\t\n\n$ g++ ess1.cpp\n$ a.out\n7\n\n\n"
    },
    {
        "id": 618,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> a <span class=\"sy3\">&amp;&amp;</span> b <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"true\"</span><span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"false\"</span><span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) true",
            "b) false",
            "c) error",
            "d) 10"
        ],
        "Answer": " Answer: b\nExplanation: && is called as Logical AND operator, if there is no zero in the operand means, it will be true otherwise false.\nOutput:\n\n\n$ g++ ess2.cpp\n$ a.out\nfalse\n\n\n"
    },
    {
        "id": 619,
        "Question": "What is the associativity of add(+);?",
        "Options": [
            "a) right to left",
            "b) left to right",
            "c) right to left & left to right",
            "d) top to bottom"
        ],
        "Answer": " Answer: b\nExplanation: left to right is the associativity of add(+);.\n"
    },
    {
        "id": 620,
        "Question": "What is the name of | operator?",
        "Options": [
            "a) sizeof",
            "b) or",
            "c) and",
            "d) modulus"
        ],
        "Answer": " Answer: b\nExplanation: | operator is used to find the ‘or’ of given values.\n"
    },
    {
        "id": 621,
        "Question": "Which operator is having the highest precedence in c++?",
        "Options": [
            "a) array subscript",
            "b) Scope resolution operator",
            "c) static_cast",
            "d) dynamic_cast"
        ],
        "Answer": " Answer: b\nExplanation: Scope resolution operator is having the highest precedence in c++.\n"
    },
    {
        "id": 622,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> e<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        e <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> c <span class=\"sy2\">/</span> d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> e <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) 60",
            "c) 70",
            "d) 90"
        ],
        "Answer": " Answer: a\nExplanation: In this program, the value e is evaluated by precedence ad we got the output as 50.\nOutput:\n\n\n$ g++ ess4.cpp\n$ a.out\n50\n\n\n"
    },
    {
        "id": 623,
        "Question": "subscript operator is used to access which elements?",
        "Options": [
            "a) string",
            "b) char",
            "c) array",
            "d) float"
        ],
        "Answer": " Answer: c\nExplanation: To access any element of an array we use following syntax array[i], where i is called subscript representing the ith element of an array, whereas no such cases in char and strings.\n"
    },
    {
        "id": 624,
        "Question": "How many arguments will the subscript operator will take for overloading?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 0",
            "d) as many as possible"
        ],
        "Answer": " Answer: a\nExplanation: The subscript operator overload takes only one argument, but it can be of any type.\n"
    },
    {
        "id": 625,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) subscript operator has a higher precedence than the assignment operator",
            "b) subscript operator has a lower precedence than the assignment operator",
            "c) subscript operator is used with string elements",
            "d) subscript operator is used with char elements"
        ],
        "Answer": " Answer: a\nExplanation: Subscription operator has more precedence otherwise if that is not the case then the statement var = arr[i] will be meaningless and will have no effect.\n"
    },
    {
        "id": 626,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> numbers</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> m_nValues<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> operator<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nValue<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> numbers<span class=\"sy4\">::</span><span class=\"me2\">operator</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nValue<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> m_nValues<span class=\"br0\">[</span>nValue<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        numbers N<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        N<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span>  N<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 4",
            "c) 3",
            "d) 6"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are returning the elements in the specified array location and if it is out of bound means it will return the first element.\nOutput:\n\n\n\t\n\n$ g++ sub.cpp\n$ a.out\n5Index out of bounds\n0\n\n\n"
    },
    {
        "id": 627,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> limit <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> safearray</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span>limit<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> operator <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">==</span> limit <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw4\">int</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> limit<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>n <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> arr<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                        temp <span class=\"sy1\">=</span> arr<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                        arr<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">=</span> arr<span class=\"br0\">[</span>n <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                        arr<span class=\"br0\">[</span>n <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                    <span class=\"br0\">}</span>     </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"br0\">}</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> arr<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        safearray sa1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> limit<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sa1<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> j<span class=\"sy2\">*</span><span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> limit<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> temp <span class=\"sy1\">=</span> sa1<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Element \"</span> <span class=\"sy1\">&lt;&lt;</span> j <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy1\">&lt;&lt;</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0102030",
            "b) 1020300",
            "c) 3020100",
            "d) error"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are getting the values and returning it by overloading the subscript operator.\nOutput:\n\n\n$ g++ sub1.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 628,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> x<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> operator<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> operator<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"1\"</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">     <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"kw4\">const</span> A<span class=\"sy3\">&amp;</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> z <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A a<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>  <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> z <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        foo<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 110",
            "b) 111",
            "c) 011",
            "d) 001"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are returning the array element by the multiple of 10.\nOutput:\n\n\n$ g++ sub2.cpp\n$ a.out\n0102030\n\n\n"
    },
    {
        "id": 629,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~sample <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> operator <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> sample<span class=\"sy4\">::</span><span class=\"me2\">operator</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    sample<span class=\"sy4\">::</span><span class=\"me2\">sample</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span> <span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        j <span class=\"sy1\">=</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    sample<span class=\"sy4\">::</span>~sample <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample m <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        m <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">25</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        m <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        m <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        m <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        m <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> m <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 252015105",
            "b) 510152025",
            "c) 51015",
            "d) 51015210"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we overloading the operator[] by using subscript operator.\nOutput:\n\n\n$ g++ sub3.cpp\n$ a.out\n001\n\n\n"
    },
    {
        "id": 630,
        "Question": "What do we need to do to pointer for overloading the subscript operator?",
        "Options": [
            "a) reference pointer",
            "b) dereference pointer",
            "c) store it in heap",
            "d) memory locator"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are printing the array in the reverse order by using subscript operator.\nOutput:\n\n\n$ g++ sub4.cpp\n$ a.out\n252015105\n\n\n"
    },
    {
        "id": 631,
        "Question": "What do we need to use when we have multiple subscripts?",
        "Options": [
            "a) operator()",
            "b) operator[] ",
            "c) operator",
            "d) operator<>"
        ],
        "Answer": " Answer: b\nExplanation: If you have a pointer to an object of some class type that overloads the subscript operator, you have to dereference that pointer in order to free the memory.\n"
    },
    {
        "id": 632,
        "Question": "What is the use of function call operator?",
        "Options": [
            "a) overloading the methods",
            "b) overloading the objects",
            "c) overloading the parameters",
            "d) overloading the string"
        ],
        "Answer": " Answer: b\nExplanation: Overloading the objects is the use of function call operator.\n"
    },
    {
        "id": 633,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) virtual functions does not give the ability to write a templated function",
            "b) virtual functions does not give the ability to rewrite a templated function",
            "c) virtual functions does give the ability to write a templated function",
            "d) virtual functions does not give the ability to rewrite a simple function"
        ],
        "Answer": " Answer: a\nExplanation: Virtual functions does not give the ability to write a templated function.\n"
    },
    {
        "id": 634,
        "Question": "What will happen when the function call operator is overloaded?",
        "Options": [
            "a) It will not modify the functions",
            "b) It will modify the functions",
            "c) It will modify the object",
            "d) It will modify the operator to be interpreted"
        ],
        "Answer": " Answer: d\nExplanation: It will modifies how the operator is to be interpreted when applied to objects of a given type.\n"
    },
    {
        "id": 635,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> duplicate <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> b, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">3</span>, z <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        duplicate <span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> y <span class=\"sy1\">&lt;&lt;</span> z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1468",
            "b) 2812",
            "c) 2614",
            "d) 2713"
        ],
        "Answer": " Answer: a\nExplanation: We are calculating the foot and inches by using the function call operator.\nOutput:\n\n\n\t\n\n$ g++ call.cpp\n$ a.out\nFirst Distance : 1110\nSecond Distance :30120\n\n\n"
    },
    {
        "id": 636,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> three_d </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x, y, z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> y <span class=\"sy1\">=</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> j<span class=\"sy4\">;</span> z <span class=\"sy1\">=</span> k<span class=\"sy4\">;</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>three_d obj<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> ostream <span class=\"sy3\">&amp;</span>operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream <span class=\"sy3\">&amp;</span>strm, three_d op<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    three_d three_d<span class=\"sy4\">::</span><span class=\"me2\">operator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>three_d obj<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>x <span class=\"sy2\">+</span> obj.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>y <span class=\"sy2\">+</span> obj.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">z</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>z <span class=\"sy2\">+</span> obj.<span class=\"me1\">z</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    three_d three_d<span class=\"sy4\">::</span><span class=\"me2\">operator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        temp.<span class=\"me1\">z</span> <span class=\"sy1\">=</span> z <span class=\"sy2\">+</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> temp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ostream <span class=\"sy3\">&amp;</span>operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream <span class=\"sy3\">&amp;</span>strm, three_d op<span class=\"br0\">)</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        strm <span class=\"sy1\">&lt;&lt;</span> op.<span class=\"me1\">x</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> op.<span class=\"me1\">y</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> op.<span class=\"me1\">z</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> strm<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        three_d objA<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, objB<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span>, objC<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        objC <span class=\"sy1\">=</span> objA<span class=\"br0\">(</span>objB<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> objC<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 55, 106, 156",
            "b) 55, 106",
            "c) 55, 106, 159",
            "d) 55, 106, 158"
        ],
        "Answer": " Answer: c\nExplanation: We are passing the values by reference and modified the data on the function block.\nOutput:\n\n\n$ g++ call1.cpp\n$ a.out\n2614\n\n\n"
    },
    {
        "id": 637,
        "Question": "In which form does the function call operator can be overloaded?",
        "Options": [
            "a) static member function",
            "b) non-static member function",
            "c) dynamis_cast",
            "d) static_cast"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are returning the real and imaginary part of the complex number by using function call operator.\nOutput:\n\n\n$ g++ call3.cpp\n$ a.out\nc2=(9.7,8)\nc2=(5.1,5.3)\n\n\n"
    },
    {
        "id": 638,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> operate <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">*</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">float</span> operate <span class=\"br0\">(</span><span class=\"kw4\">float</span> a, <span class=\"kw4\">float</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">/</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> n <span class=\"sy1\">=</span> <span class=\"nu16\">5.0</span>, m <span class=\"sy1\">=</span> <span class=\"nu16\">2.0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> operate <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> operate <span class=\"br0\">(</span>n, m<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 119",
            "b) 102.5",
            "c) 123.4",
            "d) 128.4"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are using the function call operator to calculate the value of objc.\nOutput:\n\n\n$ g++ call2.cpp\n$ a.out\n55, 106, 156\n\n\n"
    },
    {
        "id": 639,
        "Question": "What is the use of functor?",
        "Options": [
            "a) It makes the object “callable” like a function",
            "b) It makes the class “callable” like a function",
            "c) It makes the attribute “callable” like a function",
            "d) It makes the argument “callable” like a function"
        ],
        "Answer": " Answer: b\nExplanation: In non-static member function, the function call operator can be overloaded.\n"
    },
    {
        "id": 640,
        "Question": "Which is used to tell the computer that where a pointer is pointing to?",
        "Options": [
            "a) dereference",
            "b) reference",
            "c) heap operations",
            "d) binary operations"
        ],
        "Answer": " Answer: a\nExplanation: dereference is used to tell the computer where a pointer is pointing to it.\n"
    },
    {
        "id": 641,
        "Question": "Which is used to do the dereferencing?",
        "Options": [
            "a) pointer without asterix",
            "b) value without asterix",
            "c) pointer with asterix",
            "d) value with asterix"
        ],
        "Answer": " Answer: c\nExplanation: Dereferencing is using a pointer with asterix. For example, *(abc).\n"
    },
    {
        "id": 642,
        "Question": "Pick out the correct option.",
        "Options": [
            "a) References automatically dereference without needing an extra character",
            "b) References automatically dereference with an extra character",
            "c) Reference will not dereference",
            "d) Reference automatically dereference with extra space and character"
        ],
        "Answer": " Answer: a\nExplanation: References automatically dereference without needing an extra character.\n"
    },
    {
        "id": 643,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">*</span>c <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>c <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100 200",
            "b) 100 0",
            "c) 200 200",
            "d) 100 100"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are making the assignments and invoking the both b and c values as 100 by dereference operator.\nOutput:\n\n\n        \n\n$ g++ def.cpp\n$ a.out\n100 100\n\n\n"
    },
    {
        "id": 644,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) memory address",
            "d) 15"
        ],
        "Answer": " Answer: a\nExplanation: In this program, we are copying the memory location of x into p and then printing the value in the address.\nOutput:\n\n\n\t\n\n$ g++ def1.cpp\n$ a.out\n5\n\n\n"
    },
    {
        "id": 645,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 2",
            "c) Depends on compiler",
            "d) 8"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are printing the values and memory address\nby using the pointer and dereference operator.\nOutput:\n\n\n$ g++ def2.cpp\n$ a.out\n1\n1\n0xbffc9924\n1\n\n\n"
    },
    {
        "id": 646,
        "Question": "What does the dereference operator will return?",
        "Options": [
            "a) rvalue equivalent to the value at the pointer address",
            "b) lvalue equivalent to the value at the pointer address",
            "c) it will return nothing",
            "d) it will return boolean values"
        ],
        "Answer": " Answer: c\nExplanation: The size of a data type mainly depends on compiler only.\nOutput:\n\n\n$ g++ def3.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 647,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) the null pointer dereference occurs where a pointer that is expected to be a valid address but instead is equal to null",
            "b) the null pointer dereference occurs where a pointer that is expected to be a valid address but instead is equal to the memory address",
            "c) rvalue equivalent to the value at the pointer address",
            "d) null pointer will not return anything"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are printing the values that are pointed by pointer and also the dereference operator.\nOutput:\n\n\n$ g++ def5.cpp\n$ a.out\n7\n0xbf99fc98\n8\n5\n14\n\n\n"
    },
    {
        "id": 648,
        "Question": "Which operator works only with integer variables?",
        "Options": [
            "a) increment",
            "b) decrement",
            "c) both increment & decrement",
            "d) binary operator"
        ],
        "Answer": "  Answer: c\nExplanation: Because increment and decrement operator increases increasing and decreasing values of values and no such things define in strings so cannot be used with strings. Also they cannot be used with floats and doubles because there is no way to fix how much the value should be increased or decreased if increment or decrement operator is applied on such variables. That’s why both these operators only works with integer values.\n"
    },
    {
        "id": 649,
        "Question": "How many types are there in increment/decrement operator?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: There are two types of increment/decrement. They are postfix and prefix.\n"
    },
    {
        "id": 650,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) Increment operator ++ adds 1 to its operand",
            "b) Increment operator ++ adds 2 to its operand",
            "c) Decrement operator ++ subtracts 1 to its operand",
            "d) Decrement operator ++ subtracts 3 to its operand"
        ],
        "Answer": "  Answer: a\nExplanation: Increment operator are used to increase the values of any integer variable by 1.\n"
    },
    {
        "id": 651,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">21</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c <span class=\"sy1\">=</span> a<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 21",
            "b) 22",
            "c) 23",
            "d) 20"
        ],
        "Answer": "  Answer: a\nExplanation: value of ‘a’ will be stored in c and then only it will be incremented.\nOutput:\n\n\n        \n\n$ g++ incre.cpp\n$ a.out\n21\n\n\n"
    },
    {
        "id": 652,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">++</span>x <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">--</span>y <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 55",
            "b) 64",
            "c) 46",
            "d) 45"
        ],
        "Answer": "  Answer: b\nExplanation: The values will be pre increment and pre decrement, So it will print as 64.\nOutput:\n\n\n\t\n\n$ g++ incre2.cpp\n$ a.out\n64\n\n\n"
    },
    {
        "id": 653,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"sy2\">++</span>x<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> <span class=\"sy2\">--</span>y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        z <span class=\"sy1\">=</span> x<span class=\"sy2\">++</span> <span class=\"sy2\">+</span> y<span class=\"sy2\">--</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 11",
            "c) 9",
            "d) 12"
        ],
        "Answer": "  Answer: a\nExplanation: In this program, the increment and decrement of evaluation of z will not be accounted because they are post.\nOutput:\n\n\n$ g++ incre3.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 654,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, y <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy1\">=</span> <span class=\"sy2\">++</span>x<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> <span class=\"sy2\">--</span>y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        z <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> <span class=\"sy2\">++</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 12",
            "c) 13",
            "d) 14"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, we are adding the x value after pre incrementing two times.\nOutput:\n\n\n$ g++ incre4.cpp\n$ a.out\n14\n\n\n"
    },
    {
        "id": 655,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num1 <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num2 <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num3 <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num1 <span class=\"sy1\">=</span> num2<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        num2 <span class=\"sy1\">=</span> <span class=\"sy2\">--</span>num3<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num1 <span class=\"sy1\">&lt;&lt;</span> num2 <span class=\"sy1\">&lt;&lt;</span> num3<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 532",
            "b) 235",
            "c) 312",
            "d) 311"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, We are pre increment and post incrementing the operands and saving it.\nOutput:\n\n\n$ g++ incre5.cpp\n$ a.out\n311\n\n\n"
    },
    {
        "id": 656,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) Pre Increment is faster than post-increment",
            "b) post-increment is faster than Pre Increment",
            "c) pre increment is slower than post-increment",
            "d) pre decrement is slower than post-increment"
        ],
        "Answer": "  Answer: a\nExplanation: Because Pre Increment take one-byte instruction & post increment takes two-byte instruction.\n"
    },
    {
        "id": 657,
        "Question": "Which concepts does the Pre Increment use?",
        "Options": [
            "a) call by value",
            "b) call by reference",
            "c) queue",
            "d) call by name"
        ],
        "Answer": "  Answer: b\nExplanation: call by reference because the changes are reflected back to the same memory cells/variables.\n"
    },
    {
        "id": 658,
        "Question": "How many types of representation are in the string?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: C++ provides the following two types of string representations. They are C-style character string and string class type with Standard C++.\n"
    },
    {
        "id": 659,
        "Question": "What is the header file for the string class?",
        "Options": [
            "a) #include<ios>",
            "b) #include<str>",
            "c) #include<string>",
            "d) #include<stio>"
        ],
        "Answer": "  Answer: c\nExplanation: #include<string> is the header file for the string class.\n"
    },
    {
        "id": 660,
        "Question": "Which is used to return the number of characters in the string?",
        "Options": [
            "a) length",
            "b) size",
            "c) both size & length",
            "d) name"
        ],
        "Answer": "  Answer: c\nExplanation: Both will return the number of characters that conform to the string’s content.\n"
    },
    {
        "id": 661,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstring&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str1<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str2<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"World\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str3<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span>  len <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">strcpy</span><span class=\"br0\">(</span> str3, str1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">strcat</span><span class=\"br0\">(</span> str1, str2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        len <span class=\"sy1\">=</span> <span class=\"kw3\">strlen</span><span class=\"br0\">(</span>str1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> len <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55",
            "c) 11",
            "d) 10"
        ],
        "Answer": "  Answer: d\nExplanation: In the program, We are concatenating the str1 and str2 and printing\nit’s total length. So the length is 10.\nOutput:\n\n\n        \n\n$ g++ stri.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 662,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"microsoft\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string<span class=\"sy4\">::</span><span class=\"me2\">reverse_iterator</span> r<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>r <span class=\"sy1\">=</span> str.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> str.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> r<span class=\"sy2\">++</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>r<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) microsoft",
            "b) micro",
            "c) tfosorcim",
            "d) tfos"
        ],
        "Answer": "  Answer: c\nExplanation: ‘rbegin’ is used to reverse the given the string.\nOutput:\n\n\n\t\n\n$ g++ stri1.cpp\n$ a.out\ntfosorcim\n\n\n"
    },
    {
        "id": 663,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">       string str <span class=\"br0\">(</span><span class=\"st0\">\"nobody does like this\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       string key <span class=\"br0\">(</span><span class=\"st0\">\"nobody\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw4\">size_t</span> f<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       f <span class=\"sy1\">=</span> str.<span class=\"me1\">rfind</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f <span class=\"sy3\">!</span><span class=\"sy1\">=</span> string<span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">           str.<span class=\"me1\">replace</span> <span class=\"br0\">(</span>f, key.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"everybody\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) nobody does like this",
            "b) nobody",
            "c) everybody",
            "d) everybody does like this"
        ],
        "Answer": " Answer: d\nExplanation: rfind is used to find the characters in the string and replace is used to replace with certain characters.\nOutput:\n\n\n$ g++ stri2.cpp\n$ a.out\neverybody does like this\n\n\n"
    },
    {
        "id": 664,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"steve jobs is legend\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, str.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>      </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) jobs is",
            "b) steve legend",
            "c) steve",
            "d) steve jobs is"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are leaving the first 5 characters and last 7 characters and we are erasing the remaining the characters.\nOutput:\n\n\n$ g++ stri3.cpp\n$ a.out\nsteve legend\n\n\n"
    },
    {
        "id": 665,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"Microsoft\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> str.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str.<span class=\"me1\">at</span><span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) M",
            "b) Microsoft",
            "c) Micro",
            "d) runtime error"
        ],
        "Answer": " Answer: d\nExplanation: This program will terminate because the cout element is out of range.\n"
    },
    {
        "id": 666,
        "Question": "Which method do we use to append more than one character at a time?",
        "Options": [
            "a) append",
            "b) operator+=",
            "c) data",
            "d) both append & operator+="
        ],
        "Answer": " Answer: d\nExplanation: str.capacity() returns the size of the storage space currently allocated for the string, expressed in terms of bytes and capacity of the string may be equal or greater. The max_size() returns the max size of the string.\nOutput:\n\n\n$ g++ stri5.cpp\n$ a.out\n15\n9223372036854775807\n\n\n"
    },
    {
        "id": 667,
        "Question": "What is string objects in C++?",
        "Options": [
            "a) Stream of alphabets",
            "b) A stream of well-defined characters",
            "c) Stream of characters",
            "d) A stream of characters terminated by \\0"
        ],
        "Answer": "Answer: b\nExplanation: String is defined as streams of characters, not necessarily terminated by \\0. Also, a string can contain characters other than alphabets."
    },
    {
        "id": 668,
        "Question": "What is Character-Array?",
        "Options": [
            "a) array of alphabets",
            "b) array of well-defined characters",
            "c) array of characters",
            "d) array of characters terminated by \\0"
        ],
        "Answer": "Answer: c\nExplanation: Character-Array is defined as an array of characters, not necessarily terminated by \\0. Also, a character-array can contain characters other than alphabets."
    },
    {
        "id": 669,
        "Question": "Pick the incorrect statement about Character-Array.",
        "Options": [
            "a) Character-Array can be terminated by a null character(‘\\0’)",
            "b) Character-Array has a static size",
            "c) Character-Array has a dynamic size",
            "d) Character-Array has a threat of array-decay"
        ],
        "Answer": "Answer: c\nExplanation: As Character-Array is an array, its size should be defined during its declaration hence the size of Character-Array is static. A Character-Array is not necessarily to be terminated by a null character. Also, it has a threat of array-decay."
    },
    {
        "id": 670,
        "Question": "Pick the correct statement about string objects in C++.",
        "Options": [
            "a) String objects must be terminated by a null character(‘\\0’)",
            "b) String objects have a static size",
            "c) String objects have a dynamic size",
            "d) String objects use extra memory than required."
        ],
        "Answer": "Answer: c\nExplanation: String objects are dynamic in nature i.e. their size varies as their value changes so they don’t use any extra memory and it is not necessary to terminate a string object by ‘\\0’."
    },
    {
        "id": 671,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring str<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>str<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>str<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) str",
            "b) Input provided by the user",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: There is no error in the program and as we are asking the user to enter a string and printing that string to console. Therefore output will be the string provided by the user."
    },
    {
        "id": 672,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) H",
            "b) e",
            "c) Error",
            "d) o"
        ],
        "Answer": "Answer: a\nExplanation: The program has no errors so and as str = “Hello World” and we are trying to print the first character of str. Hence “H” is the answer."
    },
    {
        "id": 673,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>str<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>str<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Compiler-time Error",
            "b) Run-time Error",
            "c) Input given by the user",
            "d) Depends on the length of the string entered by the user"
        ],
        "Answer": "Answer: d\nExplanation: As the character array size is 10 so if the string entered by the user is <= 10 then there will be no error and the program runs perfectly otherwise if the length is > 10 then the program gives a run-time error because the string crosses the allocated memory space.\nOutput:\nlength < 10\n\n$ ./a.out \nHello\nHello\n\nlength > 10\n$ ./a.out \nC++Programming\n*** stack smashing detected ***:  terminated\nAborted (core dumped)\n"
    },
    {
        "id": 674,
        "Question": "8. What will be the output of the following C++ code if the string entered by the user is “Hello World”?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring str<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>str<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>str<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Hello",
            "c) World",
            "d) Error"
        ],
        "Answer": "Answer: b\nExplanation: As cin considers \\n or space as the terminating symbols for the input so when the user enters “Hello World” so only “Hello” will be stored into the str variable as cin stops scanning input after space.\nOutput:\n$ ./a.out \nHello World \nHello\n"
    },
    {
        "id": 675,
        "Question": "Which header file is used to include the string object functions in C++?",
        "Options": [
            "a) #include <string.h>",
            "b) #include <cstring>",
            "c) #include <string>",
            "d) #include <string.cpp>"
        ],
        "Answer": "Answer: c\nExplanation: #include <string> header file is used as it contains all the string object functions."
    },
    {
        "id": 676,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">char</span> s1<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">char</span> s2<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">char</span> s3<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> s1 <span class=\"sy2\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy2\">+</span> s2<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>s3<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Hello",
            "c) World",
            "d) Error"
        ],
        "Answer": "Answer: d\nExplanation: There is no operation defined for the addition of character array in C++ hence the compiler throws an error as it does not understoods what to do about this expression."
    },
    {
        "id": 677,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring s1 <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello\"</span><span class=\"sy4\">;</span>\n\tstring s2 <span class=\"sy1\">=</span> <span class=\"st0\">\"World\"</span><span class=\"sy4\">;</span>\n\tstring s3 <span class=\"sy1\">=</span> s1 <span class=\"sy2\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy2\">+</span> s2<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>s3<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Hello",
            "c) World",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: The program runs perfectly as string class has defined the addition of two strings so when two strings are added then both the strings are concatenated. Hence the output is “Hello World”."
    },
    {
        "id": 678,
        "Question": "12. Which of the following is correct way of concatenating two string objects in C++?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">way <span class=\"nu0\">1</span><span class=\"sy4\">:</span>\nstring s1 <span class=\"sy1\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy4\">;</span>\nstring s2 <span class=\"sy1\">=</span> <span class=\"st0\">\"world\"</span><span class=\"sy4\">;</span>\nstring s3 <span class=\"sy1\">=</span> s1 <span class=\"sy2\">+</span> s2<span class=\"sy4\">;</span>\n&nbsp;\nway <span class=\"nu0\">2</span><span class=\"sy4\">:</span>\nstring s1 <span class=\"sy1\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy4\">;</span>\nstring s2 <span class=\"sy1\">=</span> <span class=\"st0\">\"world\"</span><span class=\"sy4\">;</span>\nstring s3 <span class=\"sy1\">=</span> s1.<span class=\"me1\">append</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n&nbsp;\nway <span class=\"nu0\">3</span><span class=\"sy4\">:</span>\nstring s1 <span class=\"sy1\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy4\">;</span>\nstring s2 <span class=\"sy1\">=</span> <span class=\"st0\">\"world\"</span><span class=\"sy4\">;</span>\nstring s3 <span class=\"sy1\">=</span> <span class=\"kw3\">strcat</span><span class=\"br0\">(</span>s1,s2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 and 2",
            "b) 2 and 3",
            "c) 1 and 3",
            "d) 1, 2 and 3"
        ],
        "Answer": "Answer: a\nExplanation: To concatenate two string objects we are provided with either direct addition or append() function in string class but strcat() is char* function hence they cannot be used to concatenate two string objects. "
    },
    {
        "id": 679,
        "Question": "Which of the following is not a modifier function in string class?",
        "Options": [
            "a) operator+=()",
            "b) operator[]()",
            "c) push_back()",
            "d) erase()"
        ],
        "Answer": "Answer: b\nExplanation: [] operator is used to access one of the characters of the string objects whereas other functions are used to modify the string in some way."
    },
    {
        "id": 680,
        "Question": "Which function is used to get the length of a string object?",
        "Options": [
            "a) str.length()",
            "b) str.size()",
            "c) str.max_size()",
            "d) both size() and length() function"
        ],
        "Answer": "Answer: d\nExplanation: Both size() and length() are used to get the size of the string objects."
    },
    {
        "id": 681,
        "Question": "What is the identifier given to string class to declare string objects?",
        "Options": [
            "a) String",
            "b) string",
            "c) STRING",
            "d) Any of the above can be used"
        ],
        "Answer": "Answer: b\nExplanation: string identifier is used as the name of the class string."
    },
    {
        "id": 682,
        "Question": "1. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstring&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>a <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello<span class=\"es5\">\\0</span>World\"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Hello",
            "c) World",
            "d) Error"
        ],
        "Answer": "Answer: b\nExplanation: char* are terminated by a ‘\\0’ character so the string “Hello\\0World” will be cut down to “Hello”."
    },
    {
        "id": 683,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstring&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring s<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>s<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) empty string",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: string class has a constructor for this call hence the string s will be assigned “a”."
    },
    {
        "id": 684,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstring&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring s<span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>s<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a",
            "b) empty string",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: The string class provides string(string s) as a constructor not the string(char) as a constructor therefore this assignment is not valid."
    },
    {
        "id": 685,
        "Question": "4. Which is the correct way of concatenating a character at the end of a string object?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">way <span class=\"nu0\">1</span><span class=\"sy4\">:</span>\nstring s<span class=\"sy4\">;</span>\ns <span class=\"sy1\">=</span> s <span class=\"sy2\">+</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span>\n&nbsp;\nway <span class=\"nu0\">2</span><span class=\"sy4\">:</span>\nstring s<span class=\"sy4\">;</span>\ns.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 only",
            "b) 2 only",
            "c) both of them",
            "d) both are wrong"
        ],
        "Answer": "Answer: c\nExplanation: string class provides the addition of char and string and also push_back(char) function to append a character at the end of a string."
    },
    {
        "id": 686,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> str <span class=\"br0\">(</span><span class=\"st0\">\"Sanfoundry.\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  str.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">'!'</span><span class=\"sy4\">;</span>\n  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Sanfoundry.!",
            "b) Sanfoundry.",
            "c) Sanfoundry!",
            "d) Sanfoundry!."
        ],
        "Answer": "Answer: c\nExplanation: back() function modifies the last character of the string with the character provided."
    },
    {
        "id": 687,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  string str <span class=\"br0\">(</span><span class=\"st0\">\"sanfoundry.\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  str.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">'S'</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Sanfoundry",
            "b) Sanfoundry.",
            "c) sanfoundry",
            "d) sanfoundry."
        ],
        "Answer": "Answer: b\nExplanation: front() modifies the first character of the string with the character provided."
    },
    {
        "id": 688,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  string str <span class=\"br0\">(</span><span class=\"st0\">\"sanfoundry.\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) foundry.",
            "b) dry.",
            "c) oundry.",
            "d) found"
        ],
        "Answer": "Answer: b\nExplanation: As we are first taking the substring of s from 3 to end then on that substring we are taking substr from 4 to end which is equal to “dry.”."
    },
    {
        "id": 689,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  string str <span class=\"sy1\">=</span> <span class=\"st0\">\"Sanfoundry!\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>str.<span class=\"me1\">capacity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>str.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1511",
            "b) 1111",
            "c) 1115",
            "d) 010"
        ],
        "Answer": "Answer: a\nExplanation: Capacity of a string object is defined as the length of string plus the extra space given to that object which will be used further if string is expanded."
    },
    {
        "id": 690,
        "Question": "What is the role of a constructor in classes?",
        "Options": [
            "a) To modify the data whenever required",
            "b) To destroy an object",
            "c) To initialize the data members of an object when it is created",
            "d) To call private functions from the outer world"
        ],
        "Answer": "Answer: c\nExplanation: A constructor is used in classes to initialize data members of class in order to avoid errors/segmentation faults."
    },
    {
        "id": 691,
        "Question": "Why constructors are efficient instead of a function init() defined by the user to initialize the data members of an object?",
        "Options": [
            "a) Because user may forget to call init() using that object leading segmentation fault",
            "b) Because user may call init() more than once which leads to overwriting values",
            "c) Because user may forget to define init() function",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: We cannot use init() because as mentioned in options that user may forget to initialize the members which will lead to a segmentation fault. Also if the user calls the init() function more than once it may overwrite the values and may result into disastrous results. Also if any user forgets to define init() function then no object will be initialized whereas if any constructor is not defined in any class the class provides a default constructor for initialization."
    },
    {
        "id": 692,
        "Question": "What is a copy constructor?",
        "Options": [
            "a) A constructor that allows a user to move data from one object to another",
            "b) A constructor to initialize an object with the values of another object",
            "c) A constructor to check the whether to objects are equal or not",
            "d) A constructor to kill other copies of a given object."
        ],
        "Answer": "Answer: b\nExplanation: Copy constructor allows the user to initialize an object with the values of another object instead of supplying the same set of values again to initialize the object."
    },
    {
        "id": 693,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> assign<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> return_value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA obj<span class=\"sy4\">;</span>\n\tobj.<span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>obj.<span class=\"me1\">return_value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55",
            "c) Error",
            "d) Segmentation Fault"
        ],
        "Answer": "Answer: c\nExplanation: As we have defined a constructor which takes an int parameter, so when we are trying to declare an object obj of class A without supplying any parameter then as a constructor is overwritten it will give an error saying that no matching function found. So whenever one writes a constructor then the default constructor is overwritten hence if you want to declare an object without parameter then you also have to define that constructor."
    },
    {
        "id": 694,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> assign<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> return_value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA obj<span class=\"sy4\">;</span>\n\tobj.<span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>obj.<span class=\"me1\">return_value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Here the constructor is made private and as no object can access any private object directly therefore the program will give error. One should always define a constructor as public."
    },
    {
        "id": 695,
        "Question": "6. In the following C++ code how many times the string “A’s constructor called” will be printed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"A's constructor called\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B<span class=\"br0\">{</span>\n\t<span class=\"kw4\">static</span> A a<span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"B's constructor called\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">static</span> A get<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\nA B<span class=\"sy4\">::</span><span class=\"me2\">a</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tA a1 <span class=\"sy1\">=</span> b.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tA a2 <span class=\"sy1\">=</span> b.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tA a3 <span class=\"sy1\">=</span> b.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 2",
            "d) 1"
        ],
        "Answer": "Answer: d\nExplanation: As the object is defined ony once in the program at line A B::a, so the constructor of A is called only once. For objects a1, a2 and a3 copy constructor is called so the string will not be printed for them."
    },
    {
        "id": 696,
        "Question": "What happens if a user forgets to define a constructor inside a class?",
        "Options": [
            "a) Error occurs",
            "b) Segmentation fault",
            "c) Objects are not created properly",
            "d) Compiler provides a default constructor to avoid faults/errors"
        ],
        "Answer": "Answer: d\nExplanation: The C++ compiler always provides a default constructor if one forgets to define a constructor inside a class."
    },
    {
        "id": 697,
        "Question": "How many parameters does a default constructor require?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 0",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: A default constructor does not require any parameters for object creation that’s why sometimes we declare an object without any parameters."
    },
    {
        "id": 698,
        "Question": "How constructors are different from other member functions of the class?",
        "Options": [
            "a) Constructor has the same name as the class itself",
            "b) Constructors do not return anything",
            "c) Constructors are automatically called when an object is created",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All the above mention are the reasons where constructor differs from other normal member functions of a class."
    },
    {
        "id": 699,
        "Question": "How many types of constructors are there in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three types of constructors in C++ namely default, parameterized and copy constructor."
    },
    {
        "id": 700,
        "Question": "What is the role of destructors in Classes?",
        "Options": [
            "a) To modify the data whenever required",
            "b) To destroy an object when the lifetime of an object ends",
            "c) To initialize the data members of an object when it is created",
            "d) To call private functions from the outer world"
        ],
        "Answer": "Answer: c\nExplanation: Here when we are declaring the object b1 of class B then first the constructor of class B will be called, in which first it will initialize all the members of class B and as obj from class A is member of class B and it should be initialized so the A’s default constructor will be called and terminates after that B’s constructor terminates hence A’s default constructor called is printed before B’s constructor called."
    },
    {
        "id": 701,
        "Question": "What is syntax of defining a destructor of class A?",
        "Options": [
            "a) A(){}",
            "b) ~A(){}",
            "c) A::A(){}",
            "d) ~A(){};"
        ],
        "Answer": "Answer: b\nExplanation: Destructors are used in Classes to destroy an object after its lifetime is over i.e. to free resources occupied by that object."
    },
    {
        "id": 702,
        "Question": "When destructors are called?",
        "Options": [
            "a) When a program ends",
            "b) When a function ends",
            "c) When a delete operator is used",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: A destructor starts with a ~(tilde) symbol, has the same name as the class."
    },
    {
        "id": 703,
        "Question": "What is the difference between constructors and destructors?",
        "Options": [
            "a) They have a different function name",
            "b) Constructors does not have return type whereas destructors do have",
            "c) Constructors allow function parameters whereas destructors do not",
            "d) Constructors does not function parameters"
        ],
        "Answer": "Answer: c\nExplanation: Both the constructors and destructors have the same function name and both of them do not have return type but constructors allow function parameters whereas destructors do not."
    },
    {
        "id": 704,
        "Question": "How many Destructors are allowed in a Class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) Any number"
        ],
        "Answer": "Answer: a\nExplanation: A class in C++ allows only one destructor, which is called whenever the lifetime of an object ends."
    },
    {
        "id": 705,
        "Question": "8. Which of the following represents the correct explicit call to a constructor of class A?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n\t\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\t        <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t\tA<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n\t\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t\t<span class=\"br0\">}</span>\n       <span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A a(5);",
            "b) A a;",
            "c) A a = A(5);",
            "d) A a = A();"
        ],
        "Answer": "Answer: c\nExplanation: The destructors for an object is called before the destructor of its data members or bases."
    },
    {
        "id": 706,
        "Question": "Which of the following constructors are provided by the C++ compiler if not defined in a class?",
        "Options": [
            "a) Default constructor",
            "b) Assignment constructor",
            "c) Copy constructor",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: If a programmer does not define the above constructors in a class the C++ compiler by default provides these constructors to avoid error on basic operations."
    },
    {
        "id": 707,
        "Question": "When a copy constructor is called?",
        "Options": [
            "a) When an object of the class is returned by value",
            "b) When an object of the class is passed by value to a function",
            "c) When an object is constructed based on another object of the same class",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Copy constructor is called in all the above-mentioned criteria because in all the above cases we are somehow trying to copy one object into another."
    },
    {
        "id": 708,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Constructor called\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Constructor called",
            "b) Nothing printed",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: No constructor should be made private because objects need to call them and as by default all the members of a class are private therefore constructor defined in the above program is private which is wrong therefore the compiler gives the error."
    },
    {
        "id": 709,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n&nbsp;\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Constructor called\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Constructor called",
            "b) Nothing printed",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: As we have declared a pointer variable for class A but we have not initialized the memory to that pointer and until the memory is not initialized the constructor for the pointer variable will not be called hence nothing is printed on the screen."
    },
    {
        "id": 710,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1 <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\tA a2 <span class=\"sy1\">=</span> a1<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a1.<span class=\"me1\">a</span><span class=\"sy1\">&lt;&lt;</span>a2.<span class=\"me1\">a</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1010",
            "b) 87368746",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: Although the declaration of object a1 looks erroneous but actually it is acceptable by the C++ compiler to take values for class objects as mentioned above. Next value of a1 is copied to a2 hence 1010 is printed.\nOutput:\n$ ./a.out\n1010"
    },
    {
        "id": 711,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\tA<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>a <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1, a2<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a2.<span class=\"me1\">a</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) Compile time error",
            "c) Run-time error",
            "d) No output"
        ],
        "Answer": "Answer: b\nExplanation: The declaration of object a1 needs a constructor without any arguments which is not available in the class as we have overwritten the default constructor, therefore, the program gives the error."
    },
    {
        "id": 712,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\tA<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>a <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a1, a2<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a2.<span class=\"me1\">a</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 010",
            "b) 100",
            "c) 001",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: As constructor is accepting default parameter therefore the declaration of a1 and a2 both are valid hence the program runs successfully."
    },
    {
        "id": 713,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Constructor called\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a1 <span class=\"sy1\">=</span> <span class=\"br0\">(</span>A<span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"kw3\">malloc</span><span class=\"br0\">(</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Constructor called",
            "b) Nothing printed",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: Unlike new malloc never calls the constructor of a class hence when we are assigning memory to an object of class A using malloc constructor is not called hence nothing is printed."
    },
    {
        "id": 714,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Constructor called\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span> a<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Constructor called",
            "b) Nothing printed",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: In this program, we have defined a global variable an outside main function for which constructor will be called hence the output is printed."
    },
    {
        "id": 715,
        "Question": "How destructor overloading is done?",
        "Options": [
            "a) By changing the number of parameters",
            "b) By changing the parameters type",
            "c) By changing both the number of parameters and their type",
            "d) No chance for destructor overloading"
        ],
        "Answer": "Answer: c\nExplanation: As constructor of class A is defined private and we are trying to define an object of class A which cannot call this constructor as it is private therefore the program gives an error."
    },
    {
        "id": 716,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) Destructors can be virtual",
            "b) There can be more than one destructor in a class",
            "c) Destructor definition starts with !",
            "d) Destructor is used to initialize objects"
        ],
        "Answer": "Answer: a\nExplanation: Now still the constructor of a class is private but class B is friend class of A hence it can access the private members of class A and as in the above program we defining an object of class A in class B only, therefore, the program runs fine."
    },
    {
        "id": 717,
        "Question": "Where is the derived class is derived from?",
        "Options": [
            "a) derived",
            "b) base",
            "c) both derived & base",
            "d) class"
        ],
        "Answer": " Answer: b\nExplanation: Because derived inherits functions and variables from base.\n"
    },
    {
        "id": 718,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) A derived class’s constructor cannot explicitly invokes its base class’s constructor",
            "b) A derived class’s destructor cannot invoke its base class’s destructor",
            "c) A derived class’s destructor can invoke its base class’s destructor",
            "d) A derived class’s destructor can invoke its base & derived class’s destructor"
        ],
        "Answer": " Answer: b\nExplanation: Destructors are automatically invoked when an object goes out of scope or when a dynamically allocated object is deleted. Inheritance does not change this behavior. This is the reason a derived destructor cannot invoke its base class destructor.\n"
    },
    {
        "id": 719,
        "Question": "Which of the following can derived class inherit?",
        "Options": [
            "a) members",
            "b) functions",
            "c) both members & functions",
            "d) classes"
        ],
        "Answer": " Answer: c\nExplanation: Both data members and member functions are inherited by derived class in C++.\n"
    },
    {
        "id": 720,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        B<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">double</span> d<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy4\">:</span> A<span class=\"br0\">(</span>n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> C<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> B</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        C<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">double</span> d, <span class=\"kw4\">char</span> ch<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy4\">:</span> B<span class=\"br0\">(</span>n, d<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span>ch<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        C c<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu16\">4.3</span>, <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 54.3R",
            "b) R4.35",
            "c) 4.3R5",
            "d) R2.6"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the value and manipulating by using the derived class.\nOutput:\n\n\n        \n\n$ g++ der.cpp\n$ a.out\n54.3R\n\n\n"
    },
    {
        "id": 721,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> BaseClass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        BaseClass<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            i <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~BaseClass<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedClass<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> BaseClass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedClass<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"sy4\">:</span> BaseClass<span class=\"br0\">(</span>y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            j <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~DerivedClass<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> j <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedClass ob<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ob.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3 4",
            "b) 4 3",
            "c) 4",
            "d) 3"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are passing the values and assigning it to i and j and we are printing it.\nOutput:\n\n\n\t\n\n$ g++ der1.cpp\n$ a.out\n4 3\n\n\n"
    },
    {
        "id": 722,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> X </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> m<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        X<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> m<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>                                                       </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        X<span class=\"br0\">(</span><span class=\"kw4\">int</span> mm<span class=\"br0\">)</span><span class=\"sy4\">:</span> m<span class=\"br0\">(</span>mm<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> getm<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> m<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Y <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> X </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Y<span class=\"br0\">(</span><span class=\"kw4\">int</span> nn<span class=\"br0\">)</span> <span class=\"sy4\">:</span> n<span class=\"br0\">(</span>nn<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>                                                </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> getn<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n<span class=\"sy4\">;</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Y yobj<span class=\"br0\">(</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> yobj.<span class=\"me1\">getm</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> yobj.<span class=\"me1\">getn</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 100",
            "b) 100 10",
            "c) 10 10",
            "d) 100 100"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are printing the execution order of the program.\nOutput:\n\n\n$ g++ der2.cpp\n$ a.out\nInstantiating Base\nBase\nInstantiating Derived\nBase\nDerived\n\n\n"
    },
    {
        "id": 723,
        "Question": "Which operator is used to declare the destructor?",
        "Options": [
            "a) #",
            "b) ~",
            "c) @",
            "d) $"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We got an error in overloading because we didn’t invoke the destructor of parent.\n"
    },
    {
        "id": 724,
        "Question": "Which constructor will initialize the base class data member?",
        "Options": [
            "a) derived class",
            "b) base class",
            "c) class",
            "d) derived & base class"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the value and getting the result by derived class.\nOutput:\n\n\n$ g++ der5.cpp\n$ a.out\n10 100\n\n\n"
    },
    {
        "id": 725,
        "Question": "Which class is used to design the base class?",
        "Options": [
            "a) abstract class",
            "b) derived class",
            "c) base class",
            "d) derived & base class"
        ],
        "Answer": " Answer: a\nExplanation: Abstract class is used to design base class because functions of abstract class can be overridden in derived class hence derived class from same base class can have common method with different implementation, hence forcing encapsulation.\n"
    },
    {
        "id": 726,
        "Question": "Which is used to create a pure virtual function?",
        "Options": [
            "a) $",
            "b) =0",
            "c) &",
            "d) !"
        ],
        "Answer": " Answer: b\nExplanation: For making a method as pure virtual function, We have to append ‘=0’ to the class or method.\n"
    },
    {
        "id": 727,
        "Question": "Which is also called as abstract class?",
        "Options": [
            "a) virtual function",
            "b) pure virtual function",
            "c) derived class",
            "d) base class"
        ],
        "Answer": " Answer: b\nExplanation: Classes that contain at least one pure virtual function are called as abstract base classes.\n"
    },
    {
        "id": 728,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> p </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> width, height<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> set_values <span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            width <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> r<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> p</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>width <span class=\"sy2\">*</span> height<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> t<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> p </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>width <span class=\"sy2\">*</span> height <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        r rect<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        t trgl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy2\">*</span> ppoly1 <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>rect<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy2\">*</span> ppoly2 <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>trgl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ppoly1<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>set_values <span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ppoly2<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>set_values <span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ppoly1 <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> area<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ppoly2 <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> area<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1020",
            "b) 20",
            "c) 10",
            "d) 2010"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are calculating the area of rectangle and\ntriangle by using abstract class.\nOutput:\n\n\n        \n\n$ g++ abs.cpp\n$ a.out\n2010\n\n\n"
    },
    {
        "id": 729,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> MyInterface </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> Display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Class1 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> MyInterface </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> Display<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span>  a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Class2 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> MyInterface </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> Display<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" 5\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Class1 obj1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj1.<span class=\"me1\">Display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Class2 obj2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj2.<span class=\"me1\">Display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) 5 5",
            "d) 15"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are displaying the data from the two classes\nby using abstract class.\nOutput:\n\n\n\t\n\n$ g++ abs1.cpp\n$ a.out\n5 5\n\n\n"
    },
    {
        "id": 730,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Ex1<span class=\"sy4\">:</span><span class=\"kw2\">public</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"ubuntu\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Ex2<span class=\"sy4\">:</span><span class=\"kw2\">public</span> sample</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is awesome\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sample<span class=\"sy2\">*</span> arra<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Ex1 e1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Ex2 e2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        arra<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"sy3\">&amp;</span>e1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        arra<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"sy3\">&amp;</span>e2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        arra<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        arra<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ubuntu",
            "b) is awesome",
            "c) ubuntu is awesome",
            "d) ubunt esome"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are combining the two statements from two classes and printing it by using abstract class.\nOutput:\n\n\n$ g++ abs3.cpp\n$ a.out\nubuntu is awesome\n\n\n"
    },
    {
        "id": 731,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedOne <span class=\"sy4\">:</span> <span class=\"kw2\">virtual</span> <span class=\"kw2\">public</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"1\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedTwo <span class=\"sy4\">:</span> <span class=\"kw2\">virtual</span> <span class=\"kw2\">public</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"2\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Multiple <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> DerivedOne, DerivedTwo</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            DerivedTwo<span class=\"sy4\">::</span><span class=\"me2\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Multiple both<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedOne one<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedTwo two<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base <span class=\"sy2\">*</span>array<span class=\"br0\">[</span> <span class=\"nu0\">3</span> <span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>both<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>one<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>two<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 121",
            "b) 212",
            "c) 12",
            "d) 215"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are executing these based on the condition given in array. So it is printing as 212.\nOutput:\n\n\n$ g++ abs4.cpp\n$ a.out\n212\n\n\n"
    },
    {
        "id": 732,
        "Question": "What is meant by pure virtual function?",
        "Options": [
            "a) Function which does not have definition of its own",
            "b) Function which does have definition of its own",
            "c) Function which does not have any return type",
            "d) Function which does not have any return type & own definition"
        ],
        "Answer": " Answer: a\nExplanation: As the name itself implies, it have to depend on other class only.\n"
    },
    {
        "id": 733,
        "Question": "Pick out the correct option.",
        "Options": [
            "a) We cannot make an instance of an abstract base class",
            "b) We can make an instance of an abstract base class",
            "c) We can make an instance of an abstract super class",
            "d) We can make an instance of an abstract derived class"
        ],
        "Answer": " Answer: a\nExplanation: We cannot make an instance of an abstract base class.\n"
    },
    {
        "id": 734,
        "Question": "Where does the abstract class is used?",
        "Options": [
            "a) base class only",
            "b) derived class",
            "c) both derived & base class",
            "d) virtual class"
        ],
        "Answer": " Answer: a\nExplanation: As base class only as it helps in encapsulation of similar functioning of derived classes.\n"
    },
    {
        "id": 735,
        "Question": "What is an abstract class in C++?",
        "Options": [
            "a) Class specifically used as a base class with atleast one virtual functions",
            "b) Class specifically used as a base class with atleast one pure virtual functions",
            "c) Class from which any class is derived",
            "d) Any Class in C++ is an abstract class"
        ],
        "Answer": "Answer: b\nExplanation: An abstract class is defined as a class which is specifically used as a base class. An abstract class should have atleast one pure virtual function."
    },
    {
        "id": 736,
        "Question": "What is a pure virtual function in C++?",
        "Options": [
            "a) A virtual function defined in a base class",
            "b) A virtual function declared in a base class",
            "c) Any function in a class",
            "d) A function without definition in a base class"
        ],
        "Answer": "Answer: b\nExplanation: Pure virtual function is a virtual function which has no definition/implementation in the base class."
    },
    {
        "id": 737,
        "Question": "Which is the correct syntax of defining a pure virtual function?",
        "Options": [
            "a) pure virtual return_type func();",
            "b) virtual return_type func() pure;",
            "c) virtual return_type func() = 0;",
            "d) virtual return_type func();"
        ],
        "Answer": "Answer: c\nExplanation: virtual return_type function_name(parameters) = 0; where {=0} is called pure specifier."
    },
    {
        "id": 738,
        "Question": "Which is the correct statement about pure virtual functions?",
        "Options": [
            "a) They should be defined inside a base class",
            "b) Pure keyword should be used to declare a pure virtual function",
            "c) Pure virtual function is implemented in derived classes",
            "d) Pure virtual function cannot implemented in derived classes"
        ],
        "Answer": "Answer: c\nExplanation: A pure virtual function does not have a definition corresponding to base class. All derived class may or may not have an implementation of a pure virtual function. there is no pure keyword in C++."
    },
    {
        "id": 739,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Pure virtual functions and virtual functions are the same",
            "b) Both Pure virtual function and virtual function have an implementation in the base class",
            "c) Pure virtual function has no implementation in the base class whereas virtual function may have an implementation in the base class",
            "d) The base class has no pure virtual function"
        ],
        "Answer": "Answer: c\nExplanation: Pure virtual function has no implementation in the base class whereas virtual function may have an implementation in the base class. The base class has at least one pure virtual function."
    },
    {
        "id": 740,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Class B\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\t\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Class B",
            "b) Error",
            "c) Segmentation fault",
            "d) No output"
        ],
        "Answer": "Answer: a\nExplanation: The program is correct so no error occurs hence the program runs successfully and b is calling is func() function therefore “Class B” is printed."
    },
    {
        "id": 741,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Class B\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\t\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a<span class=\"sy4\">;</span>\n\ta.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Class B",
            "b) Error",
            "c) Segmentation fault",
            "d) No output"
        ],
        "Answer": "Answer: b\nExplanation: The C++ does allows to declare a normal object for an astract class therefore the program throws an error as we are trying to declare an object of abstract class."
    },
    {
        "id": 742,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Class B\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\t\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a<span class=\"sy4\">;</span>\n\ta<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Class B",
            "b) Error",
            "c) Segmentation fault",
            "d) No output"
        ],
        "Answer": "Answer: c\nExplanation: As we are allowed to declare a pointer object of an abstract so the program does not give any compilation error but as there is no definition of func() function corresponding to class A, therefore, the program gives segmentation fault as it is not able to call such function from class A."
    },
    {
        "id": 743,
        "Question": "Which interface determines how your class will be used by another program?",
        "Options": [
            "a) public",
            "b) private",
            "c) protected",
            "d) void"
        ],
        "Answer": " Answer: a\nExplanation: If we invoked the interface as public means, We can access the program from other programs also.\n"
    },
    {
        "id": 744,
        "Question": "Pick out the correct statement about the override.",
        "Options": [
            "a) Overriding refers to a derived class function that has the same name and signature as a base class virtual function",
            "b) Overriding has different names",
            "c) Overriding refers to a derived class",
            "d) Overriding has different names & it refers to a derived class"
        ],
        "Answer": " Answer: a\nExplanation: Overriding refers to a derived class function that has the same name and signature as a base class virtual function.\n"
    },
    {
        "id": 745,
        "Question": "How many ways of reusing are there in the class hierarchy?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: Class hierarchies promote reuse in two ways. They are code sharing and interface sharing.\n"
    },
    {
        "id": 746,
        "Question": "How many types of class are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three types of classes. They are abstract base classes, concrete derived classes, standalone classes.\n"
    },
    {
        "id": 747,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> BaseClass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> setInt<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> getInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedClass <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> BaseClass</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> setJ<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> mul<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> BaseClass<span class=\"sy4\">::</span><span class=\"me2\">setInt</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> BaseClass<span class=\"sy4\">::</span><span class=\"me2\">getInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> DerivedClass<span class=\"sy4\">::</span><span class=\"me2\">setJ</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        j <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> DerivedClass<span class=\"sy4\">::</span><span class=\"me2\">mul</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> j <span class=\"sy2\">*</span> getInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedClass ob<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ob.<span class=\"me1\">setInt</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>       </pre></li><li class=\"li1\"><pre class=\"de1\">        ob.<span class=\"me1\">setJ</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>          </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ob.<span class=\"me1\">mul</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 4",
            "c) 40",
            "d) 30"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are multiplying the value 10 and 4 by using inheritance.\nOutput:\n\n\n\t\n\n$ g++ des.cpp\n$ a.out\n40\n\n\n"
    },
    {
        "id": 748,
        "Question": "Pick out the correct statement about multiple inheritances.",
        "Options": [
            "a) Deriving a class from one direct base class",
            "b) Deriving a class from more than one direct base class",
            "c) Deriving a class from more than one direct derived class",
            "d) Deriving a class from more than one direct derivedbase class"
        ],
        "Answer": " Answer: b\nExplanation: In multiple inheritances, We are able to derive a class from more than one base class.\n"
    },
    {
        "id": 749,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> BaseClass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> setx<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            x <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> showx<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedClass <span class=\"sy4\">:</span> <span class=\"kw2\">private</span> BaseClass</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> setxy<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> m<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            setx<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span>      </pre></li><li class=\"li1\"><pre class=\"de1\">            y <span class=\"sy1\">=</span> m<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> showxy<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            showx<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>       </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> y <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedClass ob<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ob.<span class=\"me1\">setxy</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ob.<span class=\"me1\">showxy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 1020",
            "d) 1120"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are passing the values from the main class and printing it on the inherited classes.\nOutput:\n\n\n$ g++ des2.cpp\n$ a.out\n1020\n\n\n"
    },
    {
        "id": 750,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> BaseClass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> myFunction<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"1\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedClass1 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> BaseClass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> myFunction<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"2\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"kw2\">class</span> DerivedClass2 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> DerivedClass1 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> myFunction<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"3\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        BaseClass <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        BaseClass ob<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedClass1 derivedObject1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedClass2 derivedObject2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>ob<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> myFunction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>derivedObject1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> myFunction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>derivedObject2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> myFunction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 123",
            "b) 12",
            "c) 213",
            "d) 321"
        ],
        "Answer": " Answer: a\nExplanation: We are passing the objects and executing them in a certain order and we are printing the program flow.\nOutput:\n\n\n$ g++ des3.cpp\n$ a.out\n123\n\n\n"
    },
    {
        "id": 751,
        "Question": "What does inheritance allow you to do?",
        "Options": [
            "a) create a class",
            "b) create a hierarchy of classes",
            "c) access methods",
            "d) create a method"
        ],
        "Answer": " Answer: b\nExplanation: Inheritance helps in creating hierarchy of classes by making connections between different classes in which one is called base class and other is class derived class.\n"
    },
    {
        "id": 752,
        "Question": "What is the syntax of inheritance of class?",
        "Options": [
            "a) class name",
            "b) class name: access specifier",
            "c) class name: access specifier class name",
            "d) access specifier class name"
        ],
        "Answer": " Answer: c\nExplanation: Syntax is:\nclass Class_Name: Access_Specifier Base_Class_Name\nexample:\nclass A{};\nclass B: public A{};\n"
    },
    {
        "id": 753,
        "Question": "How many kinds of classes are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two kinds of classes in c++. They are absolute class and the concrete class.\n"
    },
    {
        "id": 754,
        "Question": "What is meant by polymorphism?",
        "Options": [
            "a) class having many forms",
            "b) class having only single form",
            "c) class having two forms",
            "d) class having four forms"
        ],
        "Answer": " Answer: a\nExplanation: Polymorphism is literally meant class having many forms.\n"
    },
    {
        "id": 755,
        "Question": "How many types of inheritance are there in c++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": " Answer: d\nExplanation: There are five types of inheritance in c++. They are single, Multiple, Hierarchical, Multilevel, Hybrid.\n"
    },
    {
        "id": 756,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> stu</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> rno<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> get_no<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            rno <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> put_no<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> test<span class=\"sy4\">:</span><span class=\"kw2\">public</span> stu</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> part1,part2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> get_mark<span class=\"br0\">(</span><span class=\"kw4\">float</span> x, <span class=\"kw4\">float</span> y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            part1 <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            part2 <span class=\"sy1\">=</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> put_marks<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sports</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> score<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> getscore<span class=\"br0\">(</span><span class=\"kw4\">float</span> s<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            score <span class=\"sy1\">=</span> s<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> putscore<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> result<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> test, <span class=\"kw2\">public</span> sports</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> total<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> result<span class=\"sy4\">::</span><span class=\"me2\">display</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        total <span class=\"sy1\">=</span> part1 <span class=\"sy2\">+</span> part2 <span class=\"sy2\">+</span> score<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        put_no<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        put_marks<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        putscore<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Total Score=\"</span> <span class=\"sy1\">&lt;&lt;</span> total <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result stu<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stu.<span class=\"me1\">get_no</span><span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stu.<span class=\"me1\">get_mark</span><span class=\"br0\">(</span><span class=\"nu16\">27.5</span>, <span class=\"nu16\">33.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stu.<span class=\"me1\">getscore</span><span class=\"br0\">(</span><span class=\"nu16\">6.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stu.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 66.5",
            "b) 64.5",
            "c) 62.5",
            "d) 60.5"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the values by using different methods and totaling the marks to get the result.\nOutput:\n\n\n        \n\n$ g++ class.cpp\n$ a.out\nTotal Score=66.5\n\n\n"
    },
    {
        "id": 757,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> poly</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> width, height<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> set_values<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            width <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Coutput</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> output<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Coutput<span class=\"sy4\">::</span><span class=\"me2\">output</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> rect<span class=\"sy4\">:</span><span class=\"kw2\">public</span> poly, <span class=\"kw2\">public</span> Coutput</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span><span class=\"br0\">(</span>width <span class=\"sy2\">*</span> height<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> tri<span class=\"sy4\">:</span><span class=\"kw2\">public</span> poly, <span class=\"kw2\">public</span> Coutput</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> area<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span><span class=\"br0\">(</span>width <span class=\"sy2\">*</span> height <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect rect<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        tri trgl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect.<span class=\"me1\">set_values</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        trgl.<span class=\"me1\">set_values</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rect.<span class=\"me1\">output</span><span class=\"br0\">(</span>rect.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        trgl.<span class=\"me1\">output</span><span class=\"br0\">(</span>trgl.<span class=\"me1\">area</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1212",
            "b) 1210",
            "c) 1010",
            "d) 1250"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are calculating the area of rectangle and triangle by using multilevel inheritance.\n\n\n\t\n\n$ g++ class1.cpp\n$ a.out\n1210\n\n\n"
    },
    {
        "id": 758,
        "Question": "What is meant by container ship?",
        "Options": [
            "a) class contains objects of other class types as its members",
            "b) class contains objects of other class types as its objects",
            "c) class contains objects of other class types as its members 7 also objects",
            "d) class contains objects of other class types as its members 9 also objects"
        ],
        "Answer": " Answer: a\nExplanation: Container ship is a class contains objects of other class types as its members.\n"
    },
    {
        "id": 759,
        "Question": "How many types of the constructor are there in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three types of constructor in C++. They are the Default constructor, Parameterized constructor, Copy constructor.\n"
    },
    {
        "id": 760,
        "Question": "How many constructors can present in a class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) multiple"
        ],
        "Answer": " Answer: d\nExplanation: There can be multiple constructors of the same class, provided they have different signatures.\n"
    },
    {
        "id": 761,
        "Question": "What should be the name of the constructor?",
        "Options": [
            "a) same as the object",
            "b) same as the member",
            "c) same as the class",
            "d) same as the function"
        ],
        "Answer": " Answer: c\nExplanation: Constructor name should be same as the class name.\n"
    },
    {
        "id": 762,
        "Question": "What does derived class does not inherit from the base class?",
        "Options": [
            "a) constructor and destructor",
            "b) friends",
            "c) operator = () members",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: The derived class inherits everything from the base class except the given things.\n"
    },
    {
        "id": 763,
        "Question": "What is a template?",
        "Options": [
            "a) A template is a formula for creating a generic class",
            "b) A template is used to manipulate the class",
            "c) A template is used for creating the attributes",
            "d) A template is used to delete the class"
        ],
        "Answer": " Answer: a\nExplanation: Templates are used for creating generic classes to handle different types in single classes.\n"
    },
    {
        "id": 764,
        "Question": "Pick out the correct statement about string template.",
        "Options": [
            "a) It is used to replace a string",
            "b) It is used to replace a string with another string at runtime",
            "c) It is used to delete a string",
            "d) It is used to create a string"
        ],
        "Answer": " Answer: b\nExplanation: Every string template is used to replace the string with another string at runtime.\n"
    },
    {
        "id": 765,
        "Question": "How to declare a template?",
        "Options": [
            "a) tem",
            "b) temp",
            "c) template<>",
            "d) temp()"
        ],
        "Answer": " Answer: c\nExplanation: template<> syntax is used.\nAn example for calculating max of two ints, floats, doubles, or any other number type where T indicates the type of the parameters passes.\ntemplate <typename T>\nT max(T a, T b){\n    return a > b? a : b;\n}\n"
    },
    {
        "id": 766,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">inline</span> T square<span class=\"br0\">(</span>T x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        T result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    string square<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>string ss<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ss<span class=\"sy2\">+</span>ss<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>     </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">4</span>, ii<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string ww<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ii <span class=\"sy1\">=</span> square<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> ii<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> square<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ww<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 416AA",
            "b) 164AA",
            "c) AA416",
            "d) AA41A"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are using two template to calculate the square and to find the addition.\nOutput:\n\n\n        \n\n$ g++ tem.cpp\n$ a.out\n416AA\n\n\n"
    },
    {
        "id": 767,
        "Question": "How many types of templates are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: In this multiple templated types, We are passing two values of different types and producing the result.\nOutput:\n\n\n$ g++ tem1.cpp\n$ a.out\n24\n2.1 4.41\n\n\n"
    },
    {
        "id": 768,
        "Question": "Which are done by compiler for templates?",
        "Options": [
            "a) type-safe",
            "b) portability",
            "c) code elimination",
            "d) prototype"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the value to the template and printing it in the template.\nOutput:\n\n\n$ g++ tem2.cpp\n$ a.out\n5.5\nHello World\n\n\n"
    },
    {
        "id": 769,
        "Question": "What may be the name of the parameter that the template should take?",
        "Options": [
            "a) same as template",
            "b) same as class",
            "c) same as function",
            "d) same as member"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of templates. They are function template and class template.\n"
    },
    {
        "id": 770,
        "Question": "How many parameters are legal for non-type template?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: The compiler can determine at compile time whether the type associated with a template definition can perform all of the functions required by that template definition.\n"
    },
    {
        "id": 771,
        "Question": "What is a function template?",
        "Options": [
            "a) creating a function without having to specify the exact type",
            "b) creating a function with having an exact type",
            "c) creating a function without having blank spaces",
            "d) creating a function without class"
        ],
        "Answer": " Answer: a\nExplanation: Function template is used to create a function without having to specify the exact type.\n"
    },
    {
        "id": 772,
        "Question": "Which is used to describe the function using placeholder types?",
        "Options": [
            "a) template parameters",
            "b) template type parameters",
            "c) template type",
            "d) type parameters"
        ],
        "Answer": " Answer: b\nExplanation: During runtime, We can choose the appropriate type for the function and it is called as template type parameters.\n"
    },
    {
        "id": 773,
        "Question": "Pick out the correct statement.",
        "Options": [
            "a) you only need to write one function, and it will work with many different types",
            "b) it will take a long time to execute",
            "c) duplicate code is increased",
            "d) it will take a long time to execute & duplicate code is increased"
        ],
        "Answer": " Answer: a\nExplanation: Because of template type parameters, It will work with many types and saves a lot of time.\n"
    },
    {
        "id": 774,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    type Max<span class=\"br0\">(</span>type Var1, type Var2<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> Var1 <span class=\"sy1\">&gt;</span> Var2 <span class=\"sy4\">?</span> Var1<span class=\"sy4\">:</span>Var2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> Max<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) 300",
            "d) 100200"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are returning the maximum value by using function template.\nOutput:\n\n\n        \n\n$ g++ ftemp.cpp\n$ a.out\n200\n\n\n"
    },
    {
        "id": 775,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> TestVirt</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> type TestFunct<span class=\"br0\">(</span>type Var1<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> Var1 <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        TestVirt<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> Var1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Var1.<span class=\"me1\">TestFunct</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) 50",
            "d) 150"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the values and getting it back from template. And we are using the constructor and destructor for the function template.\nOutput:\n\n\n$ g++ ftemp1.cpp\n$ a.out\n200\n3.123\n\n\n"
    },
    {
        "id": 776,
        "Question": "What can be passed by non-type template parameters during compile time?",
        "Options": [
            "a) int",
            "b) float",
            "c) constant expression",
            "d) string"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the values and calculating the square of the value by using the function template.\nOutput:\n\n\n$ g++ ftemp4.cpp\n$ a.out\n2 4\n2.2 4.84\n\n\n"
    },
    {
        "id": 777,
        "Question": "From where does the template class derived?",
        "Options": [
            "a) regular non-templated C++ class",
            "b) templated class",
            "c) regular non-templated C++ class or templated class",
            "d) main function"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are using the for loop to increment the value by 1 in the function template.\nOutput:\n\n\n$ g++ ftemp5.cpp\n$ a.out\n2.1\n3.1\n4.1\n\n\n"
    },
    {
        "id": 778,
        "Question": "What are Templates in C++?",
        "Options": [
            "a) A feature that allows the programmer to write generic programs",
            "b) A feature that allows the programmer to write specific codes for a problem",
            "c) A feature that allows the programmer to make program modular",
            "d) A feature that does not add any power to the language"
        ],
        "Answer": "Answer: a\nExplanation: Templates are features in C++ that allows the programmer to write generic programs. for example, making the same function to take different types of arguments and perform the same action on them without specifying the type in the argument list."
    },
    {
        "id": 779,
        "Question": "In how many ways templates concept can be used?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Template concept can be used in two different ways. They are function templates used with functions and class templates used with classes."
    },
    {
        "id": 780,
        "Question": "What is the difference between normal function and template function?",
        "Options": [
            "a) The normal function works with any data types whereas template function works with specific types only",
            "b) Template function works with any data types whereas normal function works with specific types only",
            "c) Unlike a normal function, the template function accepts a single parameter",
            "d) Unlike the template function, the normal function accepts more than one parameters"
        ],
        "Answer": "Answer: b\nExplanation: As a template feature allows you to write generic programs. therefore a template function works with any type of data whereas normal function works with the specific types mentioned while writing a program. Both normal and template function accepts any number of parameters."
    },
    {
        "id": 781,
        "Question": "Templates simulate which of the following feature?",
        "Options": [
            "a) Polymorphism",
            "b) Abstraction",
            "c) Encapsulation",
            "d) Inheritance"
        ],
        "Answer": "Answer: a\nExplanation: Template function helps in writing functions that work with different types of parameters which is what polymorphism means i.e. using same function prototype to perform the same operations on different types of parameters."
    },
    {
        "id": 782,
        "Question": "Which keyword is used for the template?",
        "Options": [
            "a) Template",
            "b) template",
            "c) Temp",
            "d) temp"
        ],
        "Answer": "Answer: b\nExplanation: C++ uses template reserved keyword for defining templates."
    },
    {
        "id": 783,
        "Question": "What is the correct syntax of defining function template/template functions?",
        "Options": [
            "a) template <class T> void(T a){cout<<a;}",
            "b) Template <class T> void(T a){cout<<a;}",
            "c) template <T> void(T a){cout<<a;}",
            "d) Template <T> void(T a){cout<<a;}"
        ],
        "Answer": "Answer: a\nExplanation: Starts with keyword template and then <class VAR>, then use VAR as type anywhere in the function below."
    },
    {
        "id": 784,
        "Question": "7. What does this template function indicates?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">==================</span>\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span>T a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">==================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A function taking a single generic parameter and returning a generic type",
            "b) A function taking a single generic parameter and returning nothing",
            "c) A function taking single int parameter and returning a generic type",
            "d) A function taking a single generic parameter and returning a specific non-void type"
        ],
        "Answer": "Answer: b\nExplanation: As the return type of function is void therefore function is not returning anything. Now as the function is taking a template T as its argument which is a general type, therefore, it is accepting a single general type argument."
    },
    {
        "id": 785,
        "Question": "8. What does this template function indicates?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">==================</span>\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span>\nT func<span class=\"br0\">(</span>T a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">==================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A function taking a single generic parameter and returning a generic type",
            "b) A function taking a single generic parameter and returning nothing",
            "c) A function taking single int parameter and returning a generic type",
            "d) A function taking a single generic parameter and returning a specific non-void type"
        ],
        "Answer": "Answer: a\nExplanation: As the return type of function is template T, therefore, the function is returning a general type. Now as the function is taking a template T as its argument which is a general type, therefore, it is accepting a single general type argument."
    },
    {
        "id": 786,
        "Question": "9. What does this template function indicates?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">==================</span>\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T, <span class=\"kw2\">class</span> U<span class=\"sy1\">&gt;</span>\nU func<span class=\"br0\">(</span>T a, U b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">==================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A function taking a single generic parameter and returning a generic type which may be different from argument type",
            "b) A function taking a single generic parameter and returning a generic type which must be different from argument type",
            "c) A function taking a single generic parameter and returning a generic type which must have the same type as argument type",
            "d) A function taking a single generic parameter and returning a specific non-void type"
        ],
        "Answer": "Answer: a\nExplanation: As the return type of function is template U, therefore, the function is returning a general type. Now as the function is taking a template T as its argument which is a general type, therefore, it is accepting a single general type argument. But as U and T are different therefore return type and argument type may be the same or different. Same if U and T both have the same type and different if both have different types."
    },
    {
        "id": 787,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span>\nT func<span class=\"br0\">(</span>T a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> U<span class=\"sy1\">&gt;</span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span>U a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> func<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Template function cannot be overloaded as done in this program. They can be overloaded with normal functions or other templates."
    },
    {
        "id": 788,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span>\nT func<span class=\"br0\">(</span>T a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> func<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">float</span> c <span class=\"sy1\">=</span> func<span class=\"br0\">(</span><span class=\"nu16\">5.5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55.5",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: C++ allows to overload template functions with normal functions therefore the program does not gives any error. When program is executed then int b = func(a); calls the normal function whereas float c = func(5.5) calls the template function."
    },
    {
        "id": 789,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span>\nT func<span class=\"br0\">(</span>T a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">return</span> a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T, <span class=\"kw2\">class</span> U<span class=\"sy1\">&gt;</span>\nT func<span class=\"br0\">(</span>U a<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>T<span class=\"br0\">)</span>a<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> func<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> func<span class=\"br0\">(</span><span class=\"nu16\">5.5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy1\">&lt;&lt;</span>c<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: C++ allows such overlaoding of template functions therefore the program does not gives any error. The first template function returns the same parameter, whereas second template function returns type casted value."
    },
    {
        "id": 790,
        "Question": "14. What type can be used to replace templates from this function?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T, <span class=\"kw2\">class</span> U<span class=\"sy1\">&gt;</span>\nT func<span class=\"br0\">(</span>T a, T b, U c<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'+'</span> <span class=\"sy3\">||</span> c<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy2\">+</span>b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'-'</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> a<span class=\"sy2\">-</span>b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) replace templates T, U with auto keyword",
            "b) replace templates T, U with generic keyword",
            "c) replace templates T, U with temp keyword",
            "d) replace templates T, U with GEN_TEMP keyword"
        ],
        "Answer": "Answer: a\nExplanation: We need two templates one for handling numbers and other for operators. Here T handles numbers and U handles operators. T can take any number type, whereas U can take either char or bool type. The function takes numbers and operators and produces the result. The return type should be a number, therefore, the return type is T."
    },
    {
        "id": 791,
        "Question": "15. What is the syntax of an explicit call for a template? Assume the given template function.<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T, <span class=\"kw2\">class</span> U<span class=\"sy1\">&gt;</span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span>T a, U b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) func<int,char>(3,’a’);",
            "b) func(3,’a’)<int,char>;",
            "c) <int,char>func(3,’a’);",
            "d) func(<int>3,<char>’a’);"
        ],
        "Answer": "Answer: a\nExplanation: C++ allows use of auto keyword which helps in binding types dynamically. The modified without template version of above program is given below:\n\n\n========================================\nauto func(auto a, auto b, auto c)\n{\n\tif(c == '+' || c){\n\t\treturn a+b;\n\t}\n\telse if(c == '-' || !c){\n\t\treturn a-b;\n\t}\n}\n========================================\n\n\n"
    },
    {
        "id": 792,
        "Question": "What is the syntax of class template?",
        "Options": [
            "a) template <paramaters> class declaration",
            "b) Template <paramaters> class declaration",
            "c) temp <paramaters> class declaration",
            "d) Temp <paramaters> class declaration"
        ],
        "Answer": "Answer: a\nExplanation: Syntax involves template keyword followed by list of parameters in angular brackets and then class declaration. As follows template <paramaters> class declaration;"
    },
    {
        "id": 793,
        "Question": "How the template class is different from the normal class?",
        "Options": [
            "a) Template class generate objects of classes based on the template type",
            "b) Template class saves system memory",
            "c) Template class helps in making genetic classes",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In this program object of template class has an argument, therefore, the program does not give any error. Hence the program runs perfectly and the output is produced.\nOutput:\n$ ./a.out \nCreated\nDestroyed\n"
    },
    {
        "id": 794,
        "Question": "How many template parameters are allowed in template classes?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) one or more"
        ],
        "Answer": "Answer: a\nExplanation: As a1 object is defined with <int> as the template parameter therefore all the numbers passed to the func() are converted to integers and as integer division of 3 by 2 is 1 therefore the output is 1."
    },
    {
        "id": 795,
        "Question": "What is meant by the template parameter?",
        "Options": [
            "a) It can be used to pass a type as an argument",
            "b) It can be used to evaluate a type",
            "c) It can of no return type",
            "d) It can be used to delete a type"
        ],
        "Answer": " Answer: a\nExplanation: A template parameter is a special kind of parameter that can be used to pass a type as argument.\n"
    },
    {
        "id": 796,
        "Question": "Which keyword can be used in template?",
        "Options": [
            "a) class",
            "b) typename",
            "c) both class & typename",
            "d) function"
        ],
        "Answer": " Answer: c\nExplanation: Both keywords can be used as shown below:\ntemplate <class T> function declaration;\ntemplate <typename T> function declaration;\n"
    },
    {
        "id": 797,
        "Question": "What is the validity of template parameters?",
        "Options": [
            "a) inside that block only",
            "b) inside the class",
            "c) whole program",
            "d) inside the main class"
        ],
        "Answer": " Answer: a\nExplanation: Template parameters are valid inside a block only i.e. they have block scope.\n"
    },
    {
        "id": 798,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Test</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        type Funct1<span class=\"br0\">(</span>type Var1<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> Var1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        type Funct2<span class=\"br0\">(</span>type Var2<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> Var2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> Var1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> Var2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Var1.<span class=\"me1\">Funct1</span><span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Var2.<span class=\"me1\">Funct2</span><span class=\"br0\">(</span><span class=\"nu16\">3.123</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) 3.123",
            "d) 2003.123"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are printing the integer in the first function and float in the second function.\nOutput:\n\n\n\t\n\n$ g++ farg.cpp\n$ a.out\n100\n3.1416\n\n\n"
    },
    {
        "id": 799,
        "Question": "Why we use :: template-template parameter?",
        "Options": [
            "a) binding",
            "b) rebinding",
            "c) both binding & rebinding",
            "d) reusing"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are passing the value and returning it from template.\nOutput:\n\n\n$ g++ farg3.cpp\n$ a.out\n2003.123\n\n\n"
    },
    {
        "id": 800,
        "Question": "Which parameter is legal for non-type template?",
        "Options": [
            "a) pointer to member",
            "b) object",
            "c) class",
            "d) baseclass"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are using the non-type template parameter to increment the value in the function template.\nOutput:\n\n\n$ g++ farg4.cpp\n$ a.out\n2.1\n3.1\n4.1\n\n\n"
    },
    {
        "id": 801,
        "Question": "Which of the things does not require instantiation?",
        "Options": [
            "a) functions",
            "b) non virtual member function",
            "c) member class",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: c\nExplanation: It is used to adapt a policy into binary ones.\n"
    },
    {
        "id": 802,
        "Question": "What is meant by template specialization?",
        "Options": [
            "a) It will have certain data types to be fixed",
            "b) It will make certain data types to be dynamic",
            "c) Certain data types are invalid",
            "d) It will make all data types to be dynamic"
        ],
        "Answer": " Answer: a\nExplanation: In the template specialization, it will make the template to be specific for some data types.\n"
    },
    {
        "id": 803,
        "Question": "Which is similar to template specialization?",
        "Options": [
            "a) template",
            "b) function overloading",
            "c) function template overloading",
            "d) overloading"
        ],
        "Answer": " Answer: c\nExplanation: function template overloading is similar to template specialization.\n"
    },
    {
        "id": 804,
        "Question": "Which is called on allocating the memory for the array of objects?",
        "Options": [
            "a) destructor",
            "b) constructor",
            "c) method",
            "d) class"
        ],
        "Answer": " Answer: b\nExplanation: When you allocate memory for an array of objects, the default constructor must be called to construct each object. If no default constructor exists, you’re stuck needing a list of pointers to objects.\n"
    },
    {
        "id": 805,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">inline</span> T square<span class=\"br0\">(</span>T x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        T result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    string square<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>string ss<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ss<span class=\"sy2\">+</span>ss<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, ii<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string ww<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ii <span class=\"sy1\">=</span> square<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">&lt;&lt;</span> ii<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> square<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ww<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\":\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2: 4AA:",
            "b) 2:4",
            "c) AA",
            "d) 2:4A"
        ],
        "Answer": " Answer: a\nExplanation: Template specialization is used when a different and specific implementation is to be used for a specific data type. In this program, We are using integer and character.\nOutput:\n\n\n        \n\n$ g++ spec.cpp\n$ a.out\n2: 4AA:\n\n\n"
    },
    {
        "id": 806,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T <span class=\"sy1\">=</span> <span class=\"kw4\">float</span>, <span class=\"kw4\">int</span> count <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    T multIt<span class=\"br0\">(</span>T x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> ii <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> ii <span class=\"sy1\">&lt;</span> count<span class=\"sy4\">;</span> ii<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            x <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> xx <span class=\"sy1\">=</span> <span class=\"nu16\">2.1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> xx <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">&lt;&lt;</span> multIt<span class=\"sy1\">&lt;&gt;</span><span class=\"br0\">(</span>xx<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2.1",
            "b) 378.228",
            "c) 2.1: 378.228",
            "d) 376"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We specify the type in the template function. We need to compile this program by adding -std=c++0x.\nOutput:\n\n\n\t\n\n$ g++ -std=c++0x spec1.cpp\n$ a.out\n2.1: 378.228\n\n\n"
    },
    {
        "id": 807,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstring&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    type MyMax<span class=\"br0\">(</span><span class=\"kw4\">const</span> type Var1, <span class=\"kw4\">const</span> type Var2<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"no specialization\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> Var1 <span class=\"sy1\">&lt;</span> Var2 <span class=\"sy4\">?</span> Var2 <span class=\"sy4\">:</span> Var1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>MyMax<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Var1, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Var2<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw3\">strcmp</span><span class=\"br0\">(</span>Var1, Var2<span class=\"br0\">)</span><span class=\"sy1\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> Var2 <span class=\"sy4\">:</span> Var1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string Str1 <span class=\"sy1\">=</span> <span class=\"st0\">\"class\"</span>, Str2 <span class=\"sy1\">=</span> <span class=\"st0\">\"template\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Var3 <span class=\"sy1\">=</span> <span class=\"st0\">\"class\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Var4 <span class=\"sy1\">=</span> <span class=\"st0\">\"template\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>q <span class=\"sy1\">=</span> MyMax<span class=\"br0\">(</span>Var3, Var4<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> q <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) template",
            "b) class",
            "c) no specialization",
            "d) templateclass"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are passing the value of specified type and printing it by specialization.\nOutput:\n\n\n$ g++ spec2.cpp\n$ a.out\n1\n1\n1.2\n\n\n"
    },
    {
        "id": 808,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T <span class=\"sy1\">=</span> <span class=\"kw4\">float</span>, <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span> <span class=\"kw2\">class</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> value<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;&gt;</span> <span class=\"kw2\">class</span> A<span class=\"sy1\">&lt;&gt;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;&gt;</span> <span class=\"kw2\">class</span> A<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"nu0\">10</span><span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T, <span class=\"kw4\">int</span> i<span class=\"sy1\">&gt;</span> A<span class=\"sy1\">&lt;</span>T, i<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">A</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> value<span class=\"br0\">(</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> value<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    A<span class=\"sy1\">&lt;&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">A</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"default\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    A<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"nu0\">10</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">A</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"10\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"nu0\">6</span><span class=\"sy1\">&gt;</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy1\">&lt;&gt;</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"nu0\">10</span><span class=\"sy1\">&gt;</span> z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 10",
            "c) 6default10",
            "d) 6default"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are computing the result in the specialized block of the program.\nOutput:\n\n\n$ g++ spec3.cpp\n$ a.out\ntemplate\n\n\n"
    },
    {
        "id": 809,
        "Question": "How many types of specialization are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are defining three templates and specializing it and passing the values to it and printing it.\nOutput:\n\n\n$ g++ spec5.cpp\n$ a.out\n6default10\n\n\n"
    },
    {
        "id": 810,
        "Question": "What is another name of full specialization?",
        "Options": [
            "a) explicit specialization",
            "b) implicit specialization",
            "c) function overloading template",
            "d) overloading template"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of specialization. They are full specialization and partial specialization.\n"
    },
    {
        "id": 811,
        "Question": "Which is dependant on template parameter?",
        "Options": [
            "a) base class",
            "b) abstract class",
            "c) method",
            "d) static class"
        ],
        "Answer": " Answer: a\nExplanation: Base class is dependant on template parameter.\n"
    },
    {
        "id": 812,
        "Question": "Which value is placed in the base class?",
        "Options": [
            "a) derived values",
            "b) default type values",
            "c) both default type & derived values",
            "d) null value"
        ],
        "Answer": " Answer: b\nExplanation: We can place the default type values in a base class and overriding some of them through derivation.\n"
    },
    {
        "id": 813,
        "Question": "How many bits of memory needed for internal representation of class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 4",
            "d) no memory needed"
        ],
        "Answer": " Answer: d\nExplanation: classes that contain only type members, nonvirtual function members, and static data members do not require memory at run time.\n"
    },
    {
        "id": 814,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> class0 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> ~class0<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> getChar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> class1 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> class0 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> printChar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> class1<span class=\"sy4\">::</span><span class=\"me2\">printChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"True\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        class1 c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c.<span class=\"me1\">printChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) True",
            "b) error",
            "c) no output",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the values and inheriting it to the other class and printing the result.\n\n\n        \n\n$ g++ dert.cpp\n$ a.out\nTrue\n\n\n"
    },
    {
        "id": 815,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"sy4\">:</span> x<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        B<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">:</span> A<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">A</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy2\">*</span> <span class=\"nu0\">2</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        B<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> test<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) error",
            "d) runtime error"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are passing the values by using the template inheritance and printing it.\nOutput:\n\n\n$ g++ dert.cpp\n$ a.out\n42\nA\n\n\n"
    },
    {
        "id": 816,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Test</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        type Data<span class=\"br0\">(</span>type<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    type Test<span class=\"sy1\">&lt;</span>type<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Data</span><span class=\"br0\">(</span>type Var0<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> Var0<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    Test<span class=\"sy1\">&lt;</span>type<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Test</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> type<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    Test<span class=\"sy1\">&lt;</span>type<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span>~Test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> Var3<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Var3.<span class=\"me1\">Data</span><span class=\"br0\">(</span><span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) k",
            "b) l",
            "c) error",
            "d) runtime error"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are passing the values and manipulating it by using the template inheritance.\nOutput:\n\n\n$ g++ dert2.cpp\n$ a.out\n200\n\n\n"
    },
    {
        "id": 817,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"1\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Base <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"2\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Derived <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Derived  <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"3\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Derived <span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"4\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Derived x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1234",
            "b) 4321",
            "c) 1423",
            "d) 1342"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the values and printing it by using template inheritance.\nOutput:\n\n\n$ g++ dert3.cpp\n$ a.out\nk\n\n\n"
    },
    {
        "id": 818,
        "Question": "How many kinds of entities are directly parameterized in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are printing the order of execution of constructor and destructor in the class.\nOutput:\n\n\n$ g++ dert4.cpp\n$ a.out\n1342\n\n\n"
    },
    {
        "id": 819,
        "Question": "How many kinds of parameters are there in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 5"
        ],
        "Answer": " Answer: c\nExplanation: C++ allows us to parameterize directly three kinds of entities through templates: types, constants, and templates.\n"
    },
    {
        "id": 820,
        "Question": "What is the Standard Template Library?",
        "Options": [
            "a) Set of C++ template classes to provide common programming data structures and functions",
            "b) Set of C++ classes",
            "c) Set of Template functions used for easy data structures implementation",
            "d) Set of Template data structures only"
        ],
        "Answer": "Answer: a\nExplanation: STL expanded as Standard Template Library is set of C++ template classes to provide common programming data structures and functions."
    },
    {
        "id": 821,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) STL is a generalized library",
            "b) Components of STL are parameterized",
            "c) STL uses the concept of templates classes and functions to achieve generalized implementation",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: STL is a generalized library and components of STL are parameterized. STL uses the concept of templates classes and function to achieve generalized implementation."
    },
    {
        "id": 822,
        "Question": "How many components STL has?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: STL has four components namely Algorithms, Containers, Functors and Iterators."
    },
    {
        "id": 823,
        "Question": "What are the containers?",
        "Options": [
            "a) Containers store objects and data",
            "b) Containers stores all the algorithms",
            "c) Containers contain overloaded functions",
            "d) Containers contain set of Iterators"
        ],
        "Answer": "Answer: a\nExplanation: Containers is a component of STL which stores objects and data."
    },
    {
        "id": 824,
        "Question": "In how many categories, containers are divided?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: Containers are divided into 4 categories namely Sequence Containers, Associative Containers, Unordered Associative Containers and Container Adaptors."
    },
    {
        "id": 825,
        "Question": "What are the Sequence Containers?",
        "Options": [
            "a) Containers that implements data structures which can be accessed sequentially",
            "b) Containers that implements sorted data structures for fast search in O(logn)",
            "c) Containers that implements unsorted(hashed) data structures for quick search in O(1)",
            "d) Containers that implements data structures which can be accessed non-sequentially"
        ],
        "Answer": "Answer: a\nExplanation: Sequence Containers is the subset of Containers that implements data structures which can be accessed sequentially."
    },
    {
        "id": 826,
        "Question": "How many Sequence Containers are provided by C++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: C++ provides 5 types of Sequence Containers namely array, vector, deque, forward_list and list."
    },
    {
        "id": 827,
        "Question": "What are the Associative Containers?",
        "Options": [
            "a) Containers that implements data structures which can be accessed sequentially",
            "b) Containers that implements sorted data structures for fast search in O(logn)",
            "c) Containers that implements unsorted(hashed) data structures for quick search in O(1)",
            "d) Containers that implements data structures which can be accessed non-sequentially"
        ],
        "Answer": "Answer: b\nExplanation: Associative Containers is the subset of Containers that implements sorted data structures for fast search in O(logn)."
    },
    {
        "id": 828,
        "Question": "How many Associative Containers are provided by C++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: C++ provides 4 types of Associative Containers namely Set, Map, multiset and multimap."
    },
    {
        "id": 829,
        "Question": "What are Unordered Associative Containers?",
        "Options": [
            "a) Containers that implements data structures which can be accessed sequentially",
            "b) Containers that implements sorted data structures for fast search in O(logn)",
            "c) Containers that implements unsorted(hashed) data structures for quick search in O(1)",
            "d) Containers that implements data structures which can be accessed non-sequentially"
        ],
        "Answer": "Answer: c\nExplanation: Unordered Associative Containers is the subset of Containers that implements unsorted(hashed) data structures for quick search in O(1) amortized O(n) Worst case complexity."
    },
    {
        "id": 830,
        "Question": "What are Container Adaptors?",
        "Options": [
            "a) Containers that implements data structures which can be accessed sequentially",
            "b) Containers that implements sorted data structures for fast search in O(logn)",
            "c) Containers that implements unsorted(hashed) data structures for quick search in O(1)",
            "d) Containers that provide a different interface for sequential containers"
        ],
        "Answer": "Answer: d\nExplanation: Container Adaptors is the subset of Containers that provides a different interface for sequential containers."
    },
    {
        "id": 831,
        "Question": "How many Container Adaptors are provided by C++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: b\nExplanation: C++ provides 3 types of Container Adaptors namely Stack, Queue and Priority Queues."
    },
    {
        "id": 832,
        "Question": "What are Iterators?",
        "Options": [
            "a) Iterators are used to iterate over C-like arrays",
            "b) Iterators are used to iterate over pointers",
            "c) Iterators are used to point memory addresses of STL containers",
            "d) Iterators are used to iterate over functions"
        ],
        "Answer": "Answer: c\nExplanation: In C++, Iterators are provided to iterate over the STL containers."
    },
    {
        "id": 833,
        "Question": "How many types of Iterators are provided by C++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: d\nExplanation: There are five types of Iterators provided by C++ namely Input Iterators, Output Iterators, Forward Iterators, Bi-directional Iterators and Random-access Iterators."
    },
    {
        "id": 834,
        "Question": "Which header file is used for Iterators?",
        "Options": [
            "a) <iterator>",
            "b) <algorithm>",
            "c) <iter>",
            "d) <loopIter>"
        ],
        "Answer": "Answer: a\nExplanation: Iterators are present inside the <iterator> header file so this header file is needed to use Iterators."
    },
    {
        "id": 835,
        "Question": "Which of the following is used for generic programming?",
        "Options": [
            "a) Virtual functions",
            "b) Modules",
            "c) Templates",
            "d) Abstract Classes"
        ],
        "Answer": "Answer: c\nExplanation: Templates are used for generic programming. They help in making generic functions and classes hence achieving the generic codes."
    },
    {
        "id": 836,
        "Question": "Which of the following is correct about templates?",
        "Options": [
            "a) It is a type of compile time polymorphism",
            "b) It allows the programmer to write one code for all data types",
            "c) Helps in generic programming",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Templates are used for generic programming hence allowing to write a single function for all data types. It is a type of compile time polymorphism."
    },
    {
        "id": 837,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span>\nT max <span class=\"br0\">(</span>T <span class=\"sy3\">&amp;</span>a, T <span class=\"sy3\">&amp;</span>b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Template Called \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> b<span class=\"br0\">)</span><span class=\"sy4\">?</span> a <span class=\"sy4\">:</span> b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw2\">template</span> <span class=\"sy1\">&lt;&gt;</span>\n<span class=\"kw4\">int</span> max <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>a, <span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Called \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> b<span class=\"br0\">)</span><span class=\"sy4\">?</span> a <span class=\"sy4\">:</span> b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> max <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Template Called 20",
            "b) Called 20",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: As template is a type of polymorphism so count becomes 1 for int type because we have called the function for int twice but as we have called it only once for double therefore value of count is 0 for double i.e. for last call."
    },
    {
        "id": 838,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>  \n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> n<span class=\"sy1\">&gt;</span> \n<span class=\"kw4\">struct</span> funStruct\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> val <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy2\">*</span>funStruct<span class=\"sy1\">&lt;</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">val</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">template</span><span class=\"sy1\">&lt;&gt;</span> \n<span class=\"kw4\">struct</span> funStruct<span class=\"sy1\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy1\">&gt;</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> val <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> funStruct<span class=\"sy1\">&lt;</span><span class=\"nu0\">10</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">val</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 1024",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: d\nExplanation: Here in the template function as both the argument have same type T but in third called of max function we are using 2 types int and float while calling the function hence the program gives error."
    },
    {
        "id": 839,
        "Question": "Which keyword is used to handle the expection?",
        "Options": [
            "a) try",
            "b) throw",
            "c) catch",
            "d) handler"
        ],
        "Answer": " Answer: c\nExplanation: When we found a exception in the program, We need to throw that and we handle that by using the catch keyword.\n"
    },
    {
        "id": 840,
        "Question": "Which is used to throw a exception?",
        "Options": [
            "a) throw",
            "b) try",
            "c) catch",
            "d) handler"
        ],
        "Answer": " Answer: a\nExplanation: throw keyword is used to throw an exception.\neg: \nif(divisor == 0)\n{\n    throw \"Divide by zero error\";\n}\n"
    },
    {
        "id": 841,
        "Question": "What is the use of the ‘finally’ keyword?",
        "Options": [
            "a) It used to execute at the starting of the program",
            "b) It will be executed at the end of the program even if the exception arised",
            "c) It will be executed at the starting of the program even if the exception arised",
            "d) It will be executed at the middle of the program even if the exception arised"
        ],
        "Answer": " Answer: b\nExplanation: finally keyword will be executed at the end of all the exception.\n"
    },
    {
        "id": 842,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> division<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"st0\">\"Division by zero condition!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">/</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            z <span class=\"sy1\">=</span> division<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> z <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> msg<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> msg <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) 0",
            "c) Division by zero condition!",
            "d) Error"
        ],
        "Answer": " Answer: c\nExplanation: It’s a mathematical certainty, We can’t divide by zero, So we’re arising a exception.\nOutput:\n\n\n        \n\n$ g++ excep.cpp\n$ a.out\nDivision by zero condition!\n\n\n"
    },
    {
        "id": 843,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"An exception occurred \"</span> <span class=\"sy1\">&lt;&lt;</span> e <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) An exception occurred",
            "c) Error",
            "d) An exception occurred 20"
        ],
        "Answer": " Answer: d\nExplanation: We are handling the exception by throwing that number. So the output is printed with the given number.\nOutput:\n\n\n\t\n\n$ g++ excep1.cpp\n$ a.out\nAn exception occurred 20\n\n\n"
    },
    {
        "id": 844,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> myexception<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> exception</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> what<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"st0\">\"My exception\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> myex<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> myex<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Exception",
            "b) Error",
            "c) My exception",
            "d) Runtime error"
        ],
        "Answer": " Answer: c\nExplanation: This is a standard exception handler used in the class.\nOutput:\n\n\n$ g++ excep2.cpp\n$ a.out\nMy exception\n\n\n"
    },
    {
        "id": 845,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span><span class=\"sy2\">*</span> myarray <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"allocated\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Standard exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Allocated",
            "b) Standard exception",
            "c) Depends on the memory",
            "d) Error"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are allocating the memory for array. If it is allocated means, no exception will arise and if there is no size in memory means, Exception will arise.\nOutput:\n\n\n$ g++ excep3.cpp\n$ a.out\nallocated\n\n\n"
    },
    {
        "id": 846,
        "Question": "How do define the user-defined exceptions?",
        "Options": [
            "a) inheriting and overriding exception class functionality",
            "b) overriding class functionality",
            "c) inheriting class functionality",
            "d) delting and adding class member"
        ],
        "Answer": " Answer: c\nExplanation: We are defining the user-defined exception in this program.\nOutput:\n\n\n$ g++ excep4.cpp\n$ a.out\nC++ Exception\nException caught\n\n\n"
    },
    {
        "id": 847,
        "Question": "Which exception is thrown by dynamic_cast?",
        "Options": [
            "a) bad_cast",
            "b) bad_typeid",
            "c) bad_exception",
            "d) bad_alloc"
        ],
        "Answer": " Answer: a\nExplanation: User defined exceptions can be done by inheriting and overriding the exception class functionality.\n"
    },
    {
        "id": 848,
        "Question": "How many types of exception handling are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two types of exception handling in c++. They are synchronous exception handling and asynchronous exception handling.\n"
    },
    {
        "id": 849,
        "Question": "How many runtime error messages associated with exception?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 5",
            "d) infinite"
        ],
        "Answer": " Answer: b\nExplanation: There are four runtime error messages associated with exceptions. They are overflow_error, range_error, system_error and underflow_error.\n"
    },
    {
        "id": 850,
        "Question": "Which block should be placed after try block?",
        "Options": [
            "a) catch",
            "b) throw",
            "c) either catch or throw",
            "d) handler"
        ],
        "Answer": " Answer: a\nExplanation: Syntax of try catch block:\n\n\n\t\n\n        \n\ntry{\n    // do something\n}\ncatch{\n   // catch respective error.\n}\nfinally{\n   // do something after trying or catching error i.e. run this block in both cases.\n}\n\n\n"
    },
    {
        "id": 851,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, res<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> Operator <span class=\"sy1\">=</span> <span class=\"st0\">'/'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\"Division by zero not allowed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            res <span class=\"sy1\">=</span> a <span class=\"sy2\">/</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" / \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> res<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> Str<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span> Bad Operator: \"</span> <span class=\"sy1\">&lt;&lt;</span> Str<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 2",
            "c) Bad Operator",
            "d) 10 / 5 = 2"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are dividing the two variables and printing the result. If any one of the operator is zero means, it will arise a exception.\nOutput:\n\n\n\t\n\n$ g++ gex.cpp\n$ a.out\n10 / 5 =2\n\n\n"
    },
    {
        "id": 852,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"exception number:  \"</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"No exception \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) No exception",
            "b) exception number",
            "c) exception number: 1",
            "d) exception number: 5"
        ],
        "Answer": " Answer: c\nExplanation: If we caught a integer value means, there will be an exception, if it is not a integer, there will not be a exception.\nOutput:\n\n\n$ g++ gex1.cpp\n$ a.out\nexception number: 1\n\n\n"
    },
    {
        "id": 853,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">20</span>, c <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span>  d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy2\">-</span> b<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                d <span class=\"sy1\">=</span> c <span class=\"sy2\">/</span> <span class=\"br0\">(</span>a <span class=\"sy2\">-</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> d<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span><span class=\"br0\">(</span>a <span class=\"sy2\">-</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Answer is infinite \"</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) -3",
            "c) 15",
            "d) 17"
        ],
        "Answer": " Answer: b\nExplanation: We are manipulating the values, if there is any infinite value means, it will raise an exception.\nOutput:\n\n\n$ g++ gex2.cpp\n$ a.out\n-3\n\n\n"
    },
    {
        "id": 854,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">'x'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"integer:\"</span><span class=\"sy1\">&lt;&lt;</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"character:\"</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        test<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        test<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) integer:10character:x",
            "b) integer:10",
            "c) character:x",
            "d) character:10"
        ],
        "Answer": " Answer: a\nExplanation: We are passing the integer and character and catching it by using multiple catch statement.\nOutput:\n\n\n$ g++ gex3.cpp\n$ a.out\ninteger:10character:x\n\n\n"
    },
    {
        "id": 855,
        "Question": "Pick out the correct answer.",
        "Options": [
            "a) Exceptions are not suitable for critical points in code",
            "b) Exception are suitable for critical points in code",
            "c) Exceptions are used when postconditions of a function cannot be satisfied",
            "d) Throw block should be placed after try block"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are printing one and raising a exception at 2.\nOutput:\n\n\n$ g++ gex4.cpp\n$ a.out\n1\nexception: 2\n\n\n"
    },
    {
        "id": 856,
        "Question": "When exceptions are used?",
        "Options": [
            "a) To preserve the program",
            "b) Exceptions are used when postconditions of a function cannot be satisfied",
            "c) Exceptions are used when postconditions of a function can be satisfied",
            "d) Exceptions are used when preconditions of a function cannot be satisfied"
        ],
        "Answer": " Answer: a\nExplanation: If there is many number of exceptions in the program means, We have to use multiple catch statement and it is hard to keep track of the program.\n"
    },
    {
        "id": 857,
        "Question": "How many parameters does the throw expression can have?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: In c++ program, We can be able to throw only one error at a time.\n"
    },
    {
        "id": 858,
        "Question": "Where exception are handled?",
        "Options": [
            "a) inside the program",
            "b) outside the regular code",
            "c) both inside or outside",
            "d) main program"
        ],
        "Answer": " Answer: b\nExplanation: Exception are handled outside the regular code.\n"
    },
    {
        "id": 859,
        "Question": "Which is used to check the error in the block?",
        "Options": [
            "a) try",
            "b) throw",
            "c) catch",
            "d) handler"
        ],
        "Answer": " Answer: a\nExplanation: The try block is used to check for errors, if there is any error means, it can throw it to catch block.\n"
    },
    {
        "id": 860,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> myexception<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> exception</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> what<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"st0\">\"exception arised\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> myex<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> myex<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) exception arised",
            "b) error",
            "c) exception",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are arising a standard exception and catching that and returning a statement.\nOutput:\n\n\n        \n\n$ g++ goe.cpp\n$ a.out\nexception arised\n\n\n"
    },
    {
        "id": 861,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> age<span class=\"sy1\">=</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>age <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\"Positive Number Required\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> age <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> Message<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: \"</span> <span class=\"sy1\">&lt;&lt;</span> Message<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) 15",
            "d) Positive Number Required"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are checking the age of a person, If it is zero means, We will arise a exception.\nOutput:\n\n\n\t\n\n$ g++ goe1.cpp\n$ a.out\n5\n\n\n"
    },
    {
        "id": 862,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> division<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"st0\">\"Division by zero condition!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">/</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            z <span class=\"sy1\">=</span> division<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> z <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> msg<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> msg <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) 0",
            "c) Division by zero condition!",
            "d) 100"
        ],
        "Answer": " Answer: c\nExplanation: We are dividing the values and if one of the values is zero means, We are arising an exception.\nOutput:\n\n\n$ g++ goe2.cpp\n$ a.out\nDivision by zero condition!\n\n\n"
    },
    {
        "id": 863,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> Op1 <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, Op2 <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, Res<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> Op<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Op <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'+'</span> <span class=\"sy3\">&amp;&amp;</span> Op <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'-'</span> <span class=\"sy3\">&amp;&amp;</span> Op <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'*'</span> <span class=\"sy3\">&amp;&amp;</span> Op <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> Op<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">switch</span><span class=\"br0\">(</span>Op<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">                Res <span class=\"sy1\">=</span> Op1 <span class=\"sy2\">+</span> Op2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">break</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">                Res <span class=\"sy1\">=</span> Op1 <span class=\"sy2\">-</span> Op2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">break</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">                Res <span class=\"sy1\">=</span> Op1 <span class=\"sy2\">*</span> Op2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">break</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">case</span> <span class=\"st0\">'/'</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">                Res <span class=\"sy1\">=</span> Op1 <span class=\"sy2\">/</span> Op2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">break</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> Op1 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> Op <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">&lt;&lt;</span> Op2 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> Res<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> n<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">             <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is not a valid operator\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 5",
            "c) 2",
            "d) is not a valid operator"
        ],
        "Answer": " Answer: d\nExplanation: It will arise a exception because we missed a operator.\nOutput:\n\n\n$ g++ goe3.cpp\n$ a.out\nis not a valid operator\n\n\n"
    },
    {
        "id": 864,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include \"math.h\"</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> MySqrt<span class=\"br0\">(</span><span class=\"kw4\">double</span> d<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy1\">&lt;</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> <span class=\"st0\">\"Cannot take sqrt of negative number\"</span><span class=\"sy4\">;</span>     </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> MySqrt<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 2.236",
            "c) Error",
            "d) Cannot take sqrt of negative number"
        ],
        "Answer": " Answer: b\nExplanation: We are finding the square root of the number, if it is a positive number, it can manipulate, Otherwise it will arise a exception.\nOutput:\n\n\n$ g++ goe4.cpp\n$ a.out\n2.236\n\n\n"
    },
    {
        "id": 865,
        "Question": "How to handle the exception in constructor?",
        "Options": [
            "a) We have to throw an exception",
            "b) We have to return the exception",
            "c) We have to throw an exception & return the exception",
            "d) We have to catch an exception"
        ],
        "Answer": " Answer: a\nExplanation: As a constructor don’t have a return type, We have to throw the exception.\n"
    },
    {
        "id": 866,
        "Question": "What should present when throwing a object?",
        "Options": [
            "a) constructor",
            "b) copy-constructor",
            "c) destructor",
            "d) copy-destructor"
        ],
        "Answer": " Answer: b\nExplanation: copy-constructor is mandatory for throwing a object.\n"
    },
    {
        "id": 867,
        "Question": "What can go wrong in resource management on c++?",
        "Options": [
            "a) Leakage",
            "b) Exhaustion",
            "c) Dangling",
            "d) Exception"
        ],
        "Answer": " Answer: d\nExplanation: If there is any mishap in memory or resource management means, the problems that are mentioned above can happen.\n"
    },
    {
        "id": 868,
        "Question": "When do we call that resource is leaked?",
        "Options": [
            "a) Arise of compile time error",
            "b) It cannot be accessed by any standard mean",
            "c) Arise of runtime error",
            "d) It can be accessed by any standard mean"
        ],
        "Answer": " Answer: b\nExplanation: Resource is said to be leaked when it cannot be accessed by any means of standard mean.\n"
    },
    {
        "id": 869,
        "Question": "What kind of error can arise when there is a problem with memory?",
        "Options": [
            "a) Segmentation fault",
            "b) Produce an error",
            "c) Both Segmentation fault & Produce an error",
            "d) runtime error"
        ],
        "Answer": " Answer: a\nExplanation: segmentation fault error can arise when there is a problem with memory.\n"
    },
    {
        "id": 870,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;new&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i, n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p<span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"br0\">(</span>nothrow<span class=\"br0\">)</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: memory could not be allocated\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> n<span class=\"sy1\">&lt;</span>i<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                p<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> i<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 55",
            "c) 555",
            "d) Error: memory could not be allocated"
        ],
        "Answer": " Answer: b\nExplanation: As we had given i value as 2, It will print the 5 for two times.\nOutput:\n\n\n        \n\n$ g++ res.cpp\n$ a.out\n55\n\n\n"
    },
    {
        "id": 871,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>one <span class=\"sy1\">=</span> <span class=\"st0\">\"Test\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> one <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>two <span class=\"sy1\">=</span> one<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> two <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Test",
            "b) TestTest",
            "c) Te",
            "d) TestTe"
        ],
        "Answer": " Answer: b\nExplanation: We are copying the values from one variable to other, So it is printing is TestTest\nOutput:\n\n\n\t\n\n$ g++ res1.cpp\n$ a.out\nTestTest\n\n\n"
    },
    {
        "id": 872,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> funcstatic<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sum <span class=\"sy1\">=</span> sum <span class=\"sy2\">+</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">5</span>, s<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        s <span class=\"sy1\">=</span> funcstatic<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 15",
            "c) error",
            "d) 20"
        ],
        "Answer": " Answer: a\nExplanation: Even Though we passed the value, we didn’t caught to manipulate it, So it is printing as 10.\nOutput:\n\n\n$ g++ res2.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 873,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;string.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">strcpy</span><span class=\"br0\">(</span>p, <span class=\"st0\">\"How r u\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> exception<span class=\"sy3\">&amp;</span> er<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) How r u",
            "b) segmentation fault",
            "c) error",
            "d) runtime error"
        ],
        "Answer": " Answer: b\nExplanation: As we are using a pointer value to copy a string, So it will be producing a runtime error.\nOutput:\n\n\n$ g++ res3.cpp\n$ a.out\nsegmentation fault\n\n\n"
    },
    {
        "id": 874,
        "Question": "What is meant by garbage collection?",
        "Options": [
            "a) The form of manual memory management",
            "b) The form of automatic memory management",
            "c) Used to replace the variables",
            "d) Used to delete the variables"
        ],
        "Answer": " Answer: b\nExplanation: The garbage collection attempts to reclaim memory occupied by objects that are no longer in use by the program.\n"
    },
    {
        "id": 875,
        "Question": "What are the operators available in C++ for dynamic allocation and de-allocation of memories?",
        "Options": [
            "a) new",
            "b) delete",
            "c) compare",
            "d) both new & delete"
        ],
        "Answer": " Answer: d\nExplanation: new and delete operators are mainly used to allocate and deallocate during runtime.\n"
    },
    {
        "id": 876,
        "Question": "Which is used to solve the memory management problem in c++?",
        "Options": [
            "a) smart pointers",
            "b) arrays",
            "c) stack",
            "d) queue"
        ],
        "Answer": " Answer: a\nExplanation: In C++, smart pointers are used to manage memory issues like deallocate memory after use, checking bounds, etc.\n"
    },
    {
        "id": 877,
        "Question": "Which is used to handle the exceptions in c++?",
        "Options": [
            "a) catch handler",
            "b) handler",
            "c) exception handler",
            "d) throw"
        ],
        "Answer": " Answer: c\nExplanation: Exception handler is used to handle the exceptions in c++.\n"
    },
    {
        "id": 878,
        "Question": "Which type of program is recommended to include in try block?",
        "Options": [
            "a) static memory allocation",
            "b) dynamic memory allocation",
            "c) const reference",
            "d) pointer"
        ],
        "Answer": " Answer: b\nExplanation: While during dynamic memory allocation, Your system may not have sufficient resources to handle it, So it is better to use it inside the try block.\n"
    },
    {
        "id": 879,
        "Question": "Which statement is used to catch all types of exceptions?",
        "Options": [
            "a) catch()",
            "b) catch(Test t)",
            "c) catch(…)",
            "d) catch(Test)"
        ],
        "Answer": " Answer: c\nExplanation: This catch statement will catch all types of exceptions that arises in the program.\n"
    },
    {
        "id": 880,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception occurred: Thrown value is \"</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) -1",
            "b) 0",
            "c) Exception occurred: Thrown value is -1",
            "d) Error"
        ],
        "Answer": " Answer: c\nExplanation: As the given value is -1 and according to the condition, We are arising an exception.\nOutput:\n\n\n        \n\n$ g++ etae.cpp\n$ a.out\nException occurred: Thrown value is -1\n\n\n"
    },
    {
        "id": 881,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Polymorphic <span class=\"br0\">{</span><span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> Member<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Polymorphic <span class=\"sy2\">*</span> pb <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw2\">typeid</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>pb<span class=\"br0\">)</span><span class=\"sy4\">;</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"exception caught: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) exception caught: std::bad_typeid",
            "b) exception caught: std::bad_alloc",
            "c) exception caught: std::bad_cast",
            "d) exception caught: std::bad_id"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We used a bad type id for the polymorphic operator, So it is arising an bad_typeid exception.\nOutput:\n\n\n\t\n\n$ g++ etae.cpp\n$ a.out\nexception caught: std::bad_typeid\n\n\n"
    },
    {
        "id": 882,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> myunexpected <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"unexpected handler called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> myfunction <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span>,bad_exception<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> <span class=\"st0\">'x'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set_unexpected <span class=\"br0\">(</span>myunexpected<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myfunction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"caught int<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>bad_exception be<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"caught bad_exception<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"caught other exception <span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) unexpected handler called",
            "b) caught bad_exception",
            "c) caught other exception",
            "d) both unexpected handler called & caught bad_exception"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are calling set_unexpected and myfunction, So it is printing the output as the given.\nOutput:\n\n\n$ g++ etae.cpp\n$ a.out\nunexpected handler called\ncaught bad_exception\n\n\n"
    },
    {
        "id": 883,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ptr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ptr <span class=\"sy1\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\" ptr is NULL \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception occurred: exiting \"</span><span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) -1",
            "b) ptr is NULL",
            "c) exception occured: exiting",
            "d) 1"
        ],
        "Answer": " Answer: c\nExplanation: catch(…) is used to catch all types of exceptions arising in the program.\nOutput:\n\n\n$ g++ etea.cpp\n$ a.out\nException occured: exiting\n\n\n"
    },
    {
        "id": 884,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> myunexpected <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"unexpected called<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> myfunction <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> <span class=\"st0\">'x'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set_unexpected <span class=\"br0\">(</span>myunexpected<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myfunction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"caught int<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"caught other exception<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) caught other exception",
            "b) caught int",
            "c) unexpected called",
            "d) both caught int & unexpected called"
        ],
        "Answer": " Answer: d\nExplanation: As we are calling set_unexpected (myunexpected) function, this is printing as unexpected called and because of operator compliance it is arising an exception.\nOutput:\n\n\n$ g++ etea.cpp\n$ a.out\nunexpected called\ncaught int\n\n\n"
    },
    {
        "id": 885,
        "Question": "How to handle error in the destructor?",
        "Options": [
            "a) throwing",
            "b) terminate",
            "c) both throwing & terminate",
            "d) try"
        ],
        "Answer": " Answer: b\nExplanation: It will not throw an exception from the destructor but it will the process by using terminate() function.\n"
    },
    {
        "id": 886,
        "Question": "What kind of exceptions are available in c++?",
        "Options": [
            "a) handled",
            "b) unhandled",
            "c) static",
            "d) dynamic"
        ],
        "Answer": " Answer: b\nExplanation: unhandled kind of exceptions are available in c++.\n"
    },
    {
        "id": 887,
        "Question": "What is meant by exception specification?",
        "Options": [
            "a) A function is limited to throwing only a specified list of exceptions",
            "b) A catch can catch all types of exceptions",
            "c) A function can throw any type of exceptions",
            "d) A try can catch all types of exceptions"
        ],
        "Answer": " Answer: a\nExplanation: C++ provides a mechanism to ensure that a given function is limited to throwing only a specified list of exceptions. It is called an exception specification.\n"
    },
    {
        "id": 888,
        "Question": "Identify the correct statement about throw(type).",
        "Options": [
            "a) A function can throw any type of exceptions",
            "b) A function can throw an exception of certain type only",
            "c) A function can’t throw any type of exception",
            "d) A function can catch all types of exceptions"
        ],
        "Answer": " Answer: b\nExplanation: A function can throw an exception of certain type only.\n"
    },
    {
        "id": 889,
        "Question": "What will happen when a programs throws any other type of exception other than specified?",
        "Options": [
            "a) terminate",
            "b) arise an error",
            "c) run",
            "d) throw"
        ],
        "Answer": " Answer: b\nExplanation: Because there is no way defined to catch that exception and as we know if an exception is not caught then error arises.\n"
    },
    {
        "id": 890,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> empty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"In empty()\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> with_type<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Will throw an int\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            empty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            with_type<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught an int\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) In empty()",
            "b) Will throw an int",
            "c) Caught an int",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: It will print all three because we are calling all functions in the main().\nOutput:\n\n\n        \n\n$ g++ exs.cpp\n$ a.out\nIn empty()Will throw an intCaught an int\n\n\n"
    },
    {
        "id": 891,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Test1</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">int</span>  Funct<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Test1 <span class=\"sy2\">*</span> var <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw2\">typeid</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>var<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">exception</span><span class=\"sy3\">&amp;</span> typevar<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> typevar.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) NULL",
            "b) Exception:bad_alloc",
            "c) Exception:std:bad_typeid",
            "d) Exception:std:bad_type"
        ],
        "Answer": " Answer: c\nExplanation: As we are using a bad type on pointers, So it is arising an error.\nOutput:\n\n\n\t\n\n$ g++ exs1.cpp\n$ a.out\nException:std:bad_typeid\n\n\n"
    },
    {
        "id": 892,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            string strg1<span class=\"br0\">(</span><span class=\"st0\">\"Test\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            string strg2<span class=\"br0\">(</span><span class=\"st0\">\"ing\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            strg1.<span class=\"me1\">append</span><span class=\"br0\">(</span>strg2, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> strg1 <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception <span class=\"sy3\">&amp;</span>e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Type: \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) out of range",
            "b) bad type_id",
            "c) bad allocation",
            "d) bad typ"
        ],
        "Answer": " Answer: a\nExplanation: As we are using out of bound value on strings, So it arising an exception.\nOutput:\n\n\n$ g++ exs2.cpp\n$ a.out\nCaught: basic_string::append\nType: St12out_of_range\n#include <string>\n\n\n"
    },
    {
        "id": 893,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Myshape</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> myvirtualfunc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> mytriangle<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Myshape</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> myvirtualfunc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Myshape Myshape_instance<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Myshape <span class=\"sy3\">&amp;</span>ref_Myshape <span class=\"sy1\">=</span> Myshape_instance<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mytriangle <span class=\"sy3\">&amp;</span>ref_mytriangle <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>mytriangle<span class=\"sy3\">&amp;</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ref_Myshape<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>bad_cast<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Can't do the dynamic_cast lor!!!\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught: bad_cast exception. Myshape is not mytriangle.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Can’t do the dynamic_cast lor!!!",
            "b) Caught: bad_cast exception. Myshape is not mytriangle.",
            "c) Can’t able to create the dynamic instance for the triangle, So it is arising an exception",
            "d) Myshape is not mytriangle"
        ],
        "Answer": " Answer: c\nExplanation: As we can’t able to create the dynamic instance for the triangle, So it is arising an exception.\nOutput:\n\n\n$ g++ exs3.cpp\n$ a.out\nCan't do the dynamic_cast lor!!!\nCaught: bad_cast exception. Myshape is not mytriangle.\n\n\n"
    },
    {
        "id": 894,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span><span class=\"sy2\">*</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> Test <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> Test <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ptr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"kw4\">size_t</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">delete</span><span class=\"br0\">[</span> <span class=\"br0\">]</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>bad_alloc <span class=\"sy3\">&amp;</span>thebadallocation<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> thebadallocation.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 2",
            "c) bad_alloc",
            "d) depends on compiler"
        ],
        "Answer": " Answer: d\nExplanation: The size of unsigned long int always depends on compiler.\nOutput:\n\n\n$ g++ exs4.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 895,
        "Question": "What do you mean by “No exception specification”?",
        "Options": [
            "a) It throws nothing",
            "b) It can throw anything",
            "c) It can catch anything",
            "d) It can try anything"
        ],
        "Answer": " Answer: b\nExplanation: No exception specification that it can throw anything.\n"
    },
    {
        "id": 896,
        "Question": "Which operations don’t throw anything?",
        "Options": [
            "a) Operations which are reversible",
            "b) Operations which are irreversible",
            "c) Operations which are static",
            "d) Operations which are dynamic"
        ],
        "Answer": " Answer: b\nExplanation: Operations which are irreversible cannot throw anything.\n"
    },
    {
        "id": 897,
        "Question": "What happens if try catch block is not used?",
        "Options": [
            "a) arise an error",
            "b) program will run",
            "c) execute continuously",
            "d) wrong output"
        ],
        "Answer": " Answer: a\nExplanation: If try catch block is not used the exception thrown by the program will be uncaught hence will result into error(s).\n"
    },
    {
        "id": 898,
        "Question": "Which handler is used to handle all types of exception?",
        "Options": [
            "a) catch handler",
            "b) catch-all handler",
            "c) catch-none handler",
            "d) try-catch handler"
        ],
        "Answer": " Answer: b\nExplanation: To catch all types of exceptions, we use the catch-all handler.\n"
    },
    {
        "id": 899,
        "Question": "Which operator is used as catch-all handler?",
        "Options": [
            "a) ellipses operator",
            "b) ternary operator",
            "c) string operator",
            "d) unary operator"
        ],
        "Answer": " Answer: a\nExplanation: The ellipses operator can be represented as (…).\n"
    },
    {
        "id": 900,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            a <span class=\"sy1\">=</span> <span class=\"nu0\">34</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            a <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> ~Base<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"kw1\">throw</span> a<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">int</span> getA<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Base b<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> b.<span class=\"me1\">getA</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Illegal initialization\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Illegal initialization",
            "b) Terminate called after throwing an instance of ‘int’",
            "c) Illegal initialization & terminate called after throwing an instance",
            "d) initialization"
        ],
        "Answer": " Answer: b\nExplanation: As we are throwing a negative number and we are using the only integer, So it is arising an error.\nOutput:\n\n\n        \n\n$ g++ uce.cpp\n$ a.out\nterminate called after throwing an instance of 'int'\n\n\n"
    },
    {
        "id": 901,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> myterminate <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"terminate handler called\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">abort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set_terminate <span class=\"br0\">(</span>myterminate<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) terminate handler called",
            "b) aborted",
            "c) both terminate handler & Aborted",
            "d) runtime error"
        ],
        "Answer": " Answer: d\nExplanation: This program uses set_terminate as it is having an uncaught exception.\nOutput:\n\n\n$ g++ uce1.cpp\n$ a.out\none \nterminate\nAborted\n\n\n"
    },
    {
        "id": 902,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Test1 </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Test2 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Test1 <span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Funct<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Funct<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> Test1<span class=\"sy3\">&amp;</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught a exception\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Funct<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> Test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Caught an exception",
            "b) NULL",
            "c) Both Caught an exception & NULL",
            "d) Caught a exception"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are using set_terminate to abort the program.\nOutput:\n\n\n$ g++ uce2.cpp\n$ a.out\nterminate handler called\nAborted\n\n\n"
    },
    {
        "id": 903,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Funct<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Funct() was called by terminate().\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            set_terminate<span class=\"br0\">(</span>Funct<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"st0\">\"Out of memory!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Integer exception raised.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Integer exception raised",
            "b) Funct() was called by terminate()",
            "c) Integer exception not raised",
            "d) Integer exception raised."
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are arising with the exception by using the method in the class.\nOutput:\n\n\n$ g++ uce3.cpp\n$ a.out\nCaught a exception\n\n\n"
    },
    {
        "id": 904,
        "Question": "What function will be called when we have an uncaught exception?",
        "Options": [
            "a) catch",
            "b) throw",
            "c) terminate",
            "d) try"
        ],
        "Answer": " Answer: b\nExplanation: As there is no integer in this program, We are printing Funct() was called by terminate().\nOutput:\n\n\n$ g++ uce4.cpp\n$ a.out\nFunct() was called by terminate().\n\n\n"
    },
    {
        "id": 905,
        "Question": "What will not be called when the terminate() is raised in the constructor?",
        "Options": [
            "a) main()",
            "b) class",
            "c) destructor",
            "d) constructor"
        ],
        "Answer": " Answer: c\nExplanation: If we have an uncaught exception means, the compiler will throw the control of the program to terminate function.\n"
    },
    {
        "id": 906,
        "Question": "What will happen when we move to try block far away from catch block?",
        "Options": [
            "a) Reduces the amount of code in cache",
            "b) Increases the amount of code in cache",
            "c) Don’t alter anything",
            "d) Increases the amount of code"
        ],
        "Answer": " Answer: a\nExplanation: compilers may try to move the catch-code far away from the try-code, which reduces the amount of code to keep in cache normally, thus enhancing performance.\n"
    },
    {
        "id": 907,
        "Question": "What will happen if an exception that is thrown may cause a whole load of objects to go out of scope?",
        "Options": [
            "a) Terminate the program",
            "b) Produce a runtime error",
            "c) It will be added to the overhead",
            "d) Compilation error"
        ],
        "Answer": " Answer: c\nExplanation: It will be added to the overhead if an exception that is thrown may cause a whole load of objects to go out of scope.\n"
    },
    {
        "id": 908,
        "Question": "What operation can be performed by destructor?",
        "Options": [
            "a) Abort the program",
            "b) Resource cleanup",
            "c) Exit from the current block",
            "d) Terminate the program"
        ],
        "Answer": " Answer: b\nExplanation: It will be used to free all the resources that are used by the block of code during execution.\n"
    },
    {
        "id": 909,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">double</span><span class=\"sy2\">*</span> i<span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Memory allocated\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception arised: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Memory allocated",
            "b) Exception arised",
            "c) Depends on the computer memory",
            "d) Memory allocatedException arised"
        ],
        "Answer": " Answer: c\nExplanation: The value will be allocated, if there is enough memory in the system.\nOutput:\n\n\n        \n\n$ g++ expef.cpp\n$ a.out\nMemory allocated\n\n\n"
    },
    {
        "id": 910,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">'x'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Catch a integer and that integer is:\"</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Testing multiple catches<span class=\"es1\">\\n</span>:\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        test<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        test<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Catch a integer and that integer is:10",
            "b) Error",
            "c) Runtime error",
            "d) Catch a integer and that integer is:25"
        ],
        "Answer": " Answer: c\nExplanation: As the catch is created with a wrong type, So it will\narise a runtime error.\nOutput:\n\n\n\t\n\n$ g++ expef.cpp\n$ a.out\nTesting multiple catches\nterminate called after throwing an instance of 'int'\n:Aborted\n\n\n"
    },
    {
        "id": 911,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdexcept&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy1\">&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> invalid_argument<span class=\"br0\">(</span><span class=\"st0\">\"MyFunc argument too large.\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Executed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            func<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span>invalid_argument<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Invalid arguments",
            "b) Executed",
            "c) Error",
            "d) Runtime error"
        ],
        "Answer": " Answer: b\nExplanation: As we are throwing the function and catching it with a correct data type, So this program will execute.\nOutput:\n\n\n$ g++ expef.cpp\n$ a.out\nExecuted\n\n\n"
    },
    {
        "id": 912,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str_bad <span class=\"sy1\">=</span> <span class=\"st0\">\"wrong number used\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> num <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span>       </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> num <span class=\"sy1\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"nu17\">1.1f</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> num <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> num <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> str_bad<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception is: \"</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception is: \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> str_bad <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Exception is 5",
            "b) Exception is 1.1f",
            "c) Wrong number used",
            "d) Exception is 1.6g"
        ],
        "Answer": " Answer: c\nExplanation: As we are giving 3 to num, It is arising an exception named\n“wrong number used”.\nOutput:\n\n\n$ g++ expef.cpp\n$ a.out\nwrong number used\n\n\n"
    },
    {
        "id": 913,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">double</span> division<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"st0\">\"Division by zero condition!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy2\">/</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            z <span class=\"sy1\">=</span> division<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> z <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> msg<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> msg <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) 0",
            "c) Division by zero condition",
            "d) Error"
        ],
        "Answer": " Answer: d\nExplanation: As we missed the data type in the catch block, It will arise an error.\n"
    },
    {
        "id": 914,
        "Question": "What is the main purpose of the constructor?",
        "Options": [
            "a) Begin the execution of class",
            "b) Include the macros for the program",
            "c) Establish the class invariant",
            "d) Terminate the program"
        ],
        "Answer": " Answer: c\nExplanation: The purpose of a constructor is to establish the class invariant. To do that, it often needs to acquire system resources or in general perform an operation that may fail.\n"
    },
    {
        "id": 915,
        "Question": "Why is it expensive to use objects for the exception?",
        "Options": [
            "a) Exception object is created only if an error actually happens",
            "b) Because of execution time",
            "c) Memory space involved in creating an exception object",
            "d) Because of time and space"
        ],
        "Answer": " Answer: a\nExplanation: If an error occurs in the program, then only exception object is created otherwise, It will not be created. since throwing an exception triggers a bunch of actions during the stack unrolling, like invoking the the destructor of all the objects that has been created up to the point in which we are able to catch the exception, and invoking the destructor methods can imply flushing streams and freeing memory which can be expensive as well. Therefore, it’s expensive to use in the program.\n"
    },
    {
        "id": 916,
        "Question": "What is an exception in C++ program?",
        "Options": [
            "a) A problem that arises during the execution of a program",
            "b) A problem that arises during compilation",
            "c) Also known as the syntax error",
            "d) Also known as semantic error"
        ],
        "Answer": "Answer: a\nExplanation: An exception is defined as the problem in C++ program that arises during the execution of the program for example divide by zero error."
    },
    {
        "id": 917,
        "Question": "By default, what a program does when it detects an exception?",
        "Options": [
            "a) Continue running",
            "b) Results in the termination of the program",
            "c) Calls other functions of the program",
            "d) Removes the exception and tells the programmer about an exception"
        ],
        "Answer": "Answer: b\nExplanation: By default, whenever a program detects an exception the program crashes as it does not know how to handle it hence results in the termination of the program."
    },
    {
        "id": 918,
        "Question": "Why do we need to handle exceptions?",
        "Options": [
            "a) To avoid unexpected behaviour of a program during run-time",
            "b) To let compiler remove all exceptions by itself",
            "c) To successfully compile the program",
            "d) To get correct output"
        ],
        "Answer": "Answer: a\nExplanation: We need to handle exceptions in a program to avoid any unexpected behaviour during run-time because that behaviour may affect other parts of the program. Also, an exception is detected during run-time, therefore, a program may compile successfully even with some exceptions cases in your program."
    },
    {
        "id": 919,
        "Question": "How Exception handling is implemented in the C++ program?",
        "Options": [
            "a) Using Exception keyword",
            "b) Using try-catch block",
            "c) Using Exception block",
            "d) Using Error handling schedules"
        ],
        "Answer": "Answer: b\nExplanation: C++ provides a try-catch block to handle exceptions in your program."
    },
    {
        "id": 920,
        "Question": "Which part of the try-catch block is always fully executed?",
        "Options": [
            "a) try part",
            "b) catch part",
            "c) finally part",
            "d) throw part"
        ],
        "Answer": "Answer: a\nExplanation: Try-catch block has the following syntax:\n\n\ntry{\n\t// codes that needs to check for exceptions\n}\ncatch(Exception E1){\n      // codes for handling exception.... \n      // Exception E denotes the type of exception this block is handling.\n}\ncatch(Exception E2){\n\t// other exception that needs to be handled...\n}\n\n\nYou can have any number of catch blocks catching different exceptions….."
    },
    {
        "id": 921,
        "Question": "Which of the following is an exception in C++?",
        "Options": [
            "a) Divide by zero",
            "b) Semicolon not written",
            "c) Variable not declared",
            "d) An expression is wrongly written"
        ],
        "Answer": "Answer: c\nExplanation: finally part of the try-catch block is always executed whether exceptions are caught or not. "
    },
    {
        "id": 922,
        "Question": "What is an error in C++?",
        "Options": [
            "a) Violation of syntactic and semantic rules of a languages",
            "b) Missing of Semicolon",
            "c) Missing of double quotes",
            "d) Violation of program interface"
        ],
        "Answer": "Answer: a\nExplanation: Exceptions are those which are encountered during run-time of the program. semicolon, variable not declared and the wrong expression are compile-time errors, therefore, they are not exceptions. Divide by zero is the problem that is encountered during run-time, therefore, it is an exception."
    },
    {
        "id": 923,
        "Question": "What is the difference between error and exception?",
        "Options": [
            "a) Both are the same",
            "b) Errors can be handled at the run-time but the exceptions cannot",
            "c) Exceptions can be handled at the run-time but the errors cannot",
            "d) Both can be handled during run-time"
        ],
        "Answer": "Answer: a\nExplanation: An error occurs when rules and laws of a language is violated while writing programs in that language."
    },
    {
        "id": 924,
        "Question": "What are the different types of exceptions?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: Exceptions can be handled during run-time whereas errors cannot be because exceptions occur due to some unexpected conditions during run-time whereas about errors compiler is sure and tells about them during compile-time."
    },
    {
        "id": 925,
        "Question": "Which keyword is used to throw an exception?",
        "Options": [
            "a) try",
            "b) throw",
            "c) throws",
            "d) except"
        ],
        "Answer": "Answer: b\nExplanation: There are two types of exceptions: Synchronous and asynchronous exceptions. Synchronous exceptions that are caused by the event which can be controlled by the program whereas Asynchronous exceptions are those which are beyond the control of the program."
    },
    {
        "id": 926,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n&nbsp;\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">throw</span> <span class=\"st0\">\"This value of b will make the product zero. \"</span> \n                      <span class=\"st0\">\"So please provide positive values.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Product of \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" and  \"</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" is: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy2\">*</span>b<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span><span class=\"br0\">{</span>\n\t\tfunc<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> e<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>e<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 5",
            "c) This value of b will make the product zero. So please provide positive values.",
            "d) Product of 5 and  0 is: 0"
        ],
        "Answer": "Answer: b\nExplanation: ‘throw’ keyword is used to throw exceptions if something bad happens."
    },
    {
        "id": 927,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">throw</span> <span class=\"st0\">\"This value of b will make the product zero. \"</span> \n                       <span class=\"st0\">\"So please provide positive values.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Product of \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" and  \"</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" is: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy2\">*</span>b<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span><span class=\"br0\">{</span>\n\t\tfunc<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span> e<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>e<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) Aborted (core dumped)",
            "c) This value of b will make the product zero. So please provide positive values.",
            "d) Product of 5 and  0 is: 0"
        ],
        "Answer": "Answer: c\nExplanation: As the value of b = 0 is provided to the func() and the function is throwing an exception whenever the value of b = 0. Therefore the function throws the exception which will be printed on the screen.\nOutput:\n$ ./a.out \nThis value of b will make the product zero. So please provide positive values.\n"
    },
    {
        "id": 928,
        "Question": "What is Re-throwing an exception means in C++?",
        "Options": [
            "a) An exception that is thrown again as it is not handled by that catching block",
            "b) An exception that is caught twice",
            "c) An exception that is not handled in one caught hence thrown again",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: As the func() is throwing a const char* string but we the catch block is not catching any const char* exception i.e. exception thrown is not handled therefore the program results into Aborted(core dumped).\nOutput:\n$ ./a.out \nterminate called after throwing an instance of 'char const*'\nAborted (core dumped)\n"
    },
    {
        "id": 929,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">throw</span> b<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">else</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Product of \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" and  \"</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" is: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy2\">*</span>b<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">try</span>\n                <span class=\"br0\">{</span>\t\t\t\n\t\t    func<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> b<span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b<span class=\"sy1\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t\t\t<span class=\"kw1\">throw</span> <span class=\"st0\">\"value of b is zero<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t\t\t<span class=\"kw1\">else</span>\n\t\t\t\t<span class=\"kw1\">throw</span> <span class=\"st0\">\"value of b is less than zero<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> e<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>e<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) value of b is zero",
            "b) value of b is less than zero",
            "c) Product of 5 and  -1 is: -5",
            "d) Aborted(core dumped)"
        ],
        "Answer": "Answer: d\nExplanation: Exception that is caught by a catch block but not handled by that catch block can be re-thrown by that catch block to further try-catch block."
    },
    {
        "id": 930,
        "Question": "Where should we place catch block of the derived class in a try-catch block?",
        "Options": [
            "a) Before the catch block of Base class",
            "b) After the catch block of Base class",
            "c) Anywhere in the sequence of catch blocks",
            "d) After all the catch blocks"
        ],
        "Answer": "Answer: a\nExplanation: C++ asks the programmer to place the catch block of derived class before a catch block of the base class, otherwise derived catch block will never be executed."
    },
    {
        "id": 931,
        "Question": "2. What happens when this C++ program is compiled?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">throw</span> b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span><span class=\"br0\">{</span>\n\t\tfunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>A a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught A Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>B b<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught B Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) The program compiles successfully without any errors or warnings",
            "b) Compile-time error occurs",
            "c) The program compiles successfully with warnings",
            "d) The program gives both errors and warnings"
        ],
        "Answer": "Answer: c\nExplanation: Catch block of derived should always be placed before the catch block base class, hence the program gives warnings stating that exceptions of the derived class will be caught by the base class.\nOutput:\n$ g++ check.cpp\ncheck.cpp: In function ‘int main()’:\ncheck.cpp:33:2: warning: exception of type ‘B’ will be caught\n  catch(B b){\n  ^~~~~\ncheck.cpp:30:2: warning:    by earlier handler for ‘A’\n  catch(A a){\n  ^~~~~\n"
    },
    {
        "id": 932,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">throw</span> b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span><span class=\"br0\">{</span>\n\t\tfunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>A a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught A Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>B b<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught B Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Caught B Class",
            "b) Caught A Class",
            "c) Compile-time error",
            "d) Run-time error"
        ],
        "Answer": "Answer: b\nExplanation: As the catch block of the derived class is after the catch block of base class, therefore, all the exceptions of the derived class will be caught by the base class, Hence the output of catch block of class A is printed.\nOutput:\n$ ./a.out \nCaught A Class\n"
    },
    {
        "id": 933,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">throw</span> b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span><span class=\"br0\">{</span>\n\t\tfunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>B b<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught B Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>A a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught A Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Caught B Class",
            "b) Caught A Class",
            "c) Compile-time error",
            "d) Run-time error"
        ],
        "Answer": "Answer: a\nExplanation: In this as the catch block of the derived class is before the catch block of the base class so when func() throws the object of class B it is caught by the catch block of class B, Hence the output is printed as shown.\nOutput:\n$ ./a.out \nCaught B Class\n"
    },
    {
        "id": 934,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;cstdlib&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> b<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">throw</span> b<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">try</span><span class=\"br0\">{</span>\n\t\tfunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>B <span class=\"sy2\">*</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught B Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">catch</span><span class=\"br0\">(</span>A a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Caught A Class<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Caught B Class",
            "b) Caught A Class",
            "c) Compile-time error",
            "d) Run-time error"
        ],
        "Answer": "Answer: b\nExplanation: The func() throws the object of class B but as catch block is defined to catch the exception of class B, Therefore the exception is caught by the base class A. The programmer has defined the catch block for B*, therefore, the object B is not caught by the pointer object B*."
    },
    {
        "id": 935,
        "Question": "What id the syntax for catching any type of exceptions?",
        "Options": [
            "a) catch(Exception e)",
            "b) catch(…)",
            "c) catch(Exception ALL)",
            "d) catch(ALL)"
        ],
        "Answer": "Answer: b\nExplanation: catch(…) is used in C++ to catch all types of exceptions in a single catch block."
    },
    {
        "id": 936,
        "Question": "Uncaught exception leads to ______________",
        "Options": [
            "a) termination of program",
            "b) successful execution of programs",
            "c) no effect on the program",
            "d) execution of other functions of the program starts"
        ],
        "Answer": "Answer: b\nExplanation: Two try-catch blocks is declared each catching the respective exceptions from class A and B. But as we have defined catch all exceptions in the first case, therefore, the exception for class B is caught when thrown by the func1(), but in the second case, the try-catch block is catching only the exception for class B so when func2() throws class A exception and no catch block to catch that exception therefore program results into abort(core dumped)."
    },
    {
        "id": 937,
        "Question": "An uncaught handler returns to _______________",
        "Options": [
            "a) main function",
            "b) its caller",
            "c) its callee",
            "d) waits there for some time"
        ],
        "Answer": "Answer: a\nExplanation: Uncaught exceptions in a program leads to the termination of a program."
    },
    {
        "id": 938,
        "Question": "Header file used for exception handling in C++?",
        "Options": [
            "a) <cstdlib>",
            "b) <string>",
            "c) <handler>",
            "d) <exception>"
        ],
        "Answer": "Answer: c\nExplanation: Uncaught handler returns to its callee(i.e. the function it is called by)."
    },
    {
        "id": 939,
        "Question": "The C++ code which causes abnormal termination/behaviour of a program should be written under _________ block.",
        "Options": [
            "a) try",
            "b) catch",
            "c) finally",
            "d) throw"
        ],
        "Answer": "Answer: a\nExplanation: Code that leads to the abnormal termination of the program should be written under the try block."
    },
    {
        "id": 940,
        "Question": "Exception handlers are declared with ____________ keyword.",
        "Options": [
            "a) try",
            "b) catch",
            "c) throw",
            "d) finally"
        ],
        "Answer": "Answer: b\nExplanation: C++ uses catch block to handle any exceptions that occur during run-time of the program."
    },
    {
        "id": 941,
        "Options": [
            "a) i, iv, v",
            "b) i, ii, iii",
            "c) i, iv",
            "d) i, ii"
        ],
        "Answer": "Answer: c\nExplanation: A catch block should always be placed after the try block and there can be multiple catch block following a try block."
    },
    {
        "id": 942,
        "Question": "In nested try-catch block, if the inner catch block gets executed, then______________",
        "Options": [
            "a) Program stops immediately",
            "b) Outer catch block also executes",
            "c) Compiler jumps to the outer catch block and executes remaining statements of the main() function",
            "d) Compiler executes remaining statements of outer try-catch block and then the main() function"
        ],
        "Answer": "Answer: d\nExplanation: The inner catch block will be executed then remaining part of the outer try block will be executed and then the main bock will be executed."
    },
    {
        "id": 943,
        "Question": "If inner catch block is unable to handle the exception thrown then__________",
        "Options": [
            "a) The compiler looks for the outer try-catch block",
            "b) Program stops abnormally",
            "c) The compiler will check for appropriate catch handler of the outer try block",
            "d) The compiler will not check for appropriate catch handler of the outer try block"
        ],
        "Answer": "Answer: c\nExplanation: In such cases, the compiler will try to find an appropriate outer catch block to handle the exception otherwise if nothing is there then occurs the abnormal behaviour of the program."
    },
    {
        "id": 944,
        "Question": "In nested try catch blocks, if both inner and outer catch blocks are unable to handle the exception thrown, then ______________",
        "Options": [
            "a) Compiler executes only main()",
            "b) Compiler throws compile time errors about it",
            "c) Program will run without any interrupt",
            "d) Program will be termianted abnormally"
        ],
        "Answer": "Answer: d\nExplanation: If no inner/outer catch handler is avaliable to handle the exception then as usual the program will show abnormal behaviour."
    },
    {
        "id": 945,
        "Question": "Which function is invoked when an unhandled exception is thrown?",
        "Options": [
            "a) stop()",
            "b) aborted()",
            "c) terminate()",
            "d) abandon()"
        ],
        "Answer": "Answer: c\nExplanation: terminate() function is called/invoked incase any exception is not handled properly."
    },
    {
        "id": 946,
        "Question": "How one can restrict a function to throw particular exceptions only?",
        "Options": [
            "a) By defining multiple try-catch blocks inside a function",
            "b) By defining a generic function within a try-catch block",
            "c) By defining a function with throw clauses",
            "d) Not allowed in C++"
        ],
        "Answer": "Answer: c\nExplanation: We can use throw clause to mention the exceptions that a function can throw. Hence restricting the function to throw some particular exceptions only."
    },
    {
        "id": 947,
        "Question": "Which function is invoked when we try to throw an exception that is not supported by a function?",
        "Options": [
            "a) indeterminate()",
            "b) unutilized()",
            "c) unexpected()",
            "d) unpredicted()"
        ],
        "Answer": "Answer: c\nExplanation: As the exception is not supported by the function so it does not know what to do about the exception in that case it call the unexpected() function of the STL library."
    },
    {
        "id": 948,
        "Question": "Return type of uncaught_exception() is________________",
        "Options": [
            "a) int",
            "b) bool",
            "c) char *",
            "d) double"
        ],
        "Answer": "Answer: b\nExplanation: Return type of uncaught exceptions are bool."
    },
    {
        "id": 949,
        "Question": "14. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">try</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw2\">try</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw1\">throw</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Inner Catch<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n            <span class=\"kw1\">throw</span><span class=\"sy4\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Outer Catch<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) i, iii",
            "b) i, ii, iii",
            "c) i, ii",
            "d) ii, iii"
        ],
        "Answer": "Answer: a\nExplanation: “Inside try” will always be printed as we just entering try block then. Now as var < 0 therefore the try block will throw int var as exception hence “After throw” will not be printed) Now this exception will be caught by the catch handler printing “Exception caught” and at last after terminating the program “After catch” will be printed."
    },
    {
        "id": 950,
        "Question": "Which alternative can replace the throw statement?",
        "Options": [
            "a) for",
            "b) break",
            "c) return",
            "d) exit"
        ],
        "Answer": " Answer: c\nExplanation: throw and return does the same job as return a value. So it can be replaced.\n"
    },
    {
        "id": 951,
        "Question": "What are the disadvantages if use return keyword to return error codes?",
        "Options": [
            "a) You have to handle all exceptional cases explicitly",
            "b) Your code size increases dramatically",
            "c) The code becomes more difficult to read",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: As we are using return for each and every exception, It will definitely increase the code size.\n"
    },
    {
        "id": 952,
        "Question": "What is most suitable for returning the logical errors in the program?",
        "Options": [
            "a) Use constructor and destructor",
            "b) Set a global error indicator",
            "c) Use break keyword",
            "d) Use final keyword"
        ],
        "Answer": " Answer: b\nExplanation: Set a global error indicator is most suitable for returning the logical errors in the program.\n"
    },
    {
        "id": 953,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Division<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">double</span> a, <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> op1<span class=\"sy1\">=</span><span class=\"nu0\">0</span>, op2<span class=\"sy1\">=</span><span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Division<span class=\"br0\">(</span>op1, op2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> Str<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Bad Operator: \"</span> <span class=\"sy1\">&lt;&lt;</span> Str<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Division<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">double</span> a, <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> res<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> <span class=\"st0\">\"Division by zero not allowed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        res <span class=\"sy1\">=</span> a <span class=\"sy2\">/</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> res<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) Bad operator",
            "c) 10",
            "d) 15"
        ],
        "Answer": " Answer: a\nExplanation: We are checking the type id of char and float as they are not equal, We are printing c.\nOutput:\n\n\n\t\n\n$ g++ eal.cpp\n$ a.out\nc\n1A\n\n\n"
    },
    {
        "id": 954,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdexcept&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> MyFunc<span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy1\">&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> invalid_argument<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            MyFunc<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span>invalid_argument<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 256",
            "b) Invalid argument",
            "c) Error",
            "d) 246"
        ],
        "Answer": " Answer: a\nExplanation: We are dividing 0 and 10 in this program and we are using the throw statement in the function block.\nOutput:\n\n\n$ g++ eal.cpp\n$ a.out\n0\n\n\n"
    },
    {
        "id": 955,
        "Question": "What is the use of RAII in c++ programming?",
        "Options": [
            "a) Improve the exception safety",
            "b) Terminate the program",
            "c) Exit from the block",
            "d) Crash the compiler"
        ],
        "Answer": " Answer: c\nExplanation: We can’t return a statement by using the return keyword, So it is arising an error.\n"
    },
    {
        "id": 956,
        "Question": "How many levels are there in exception safety?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: RAII is used to improve the exception safety.\n"
    },
    {
        "id": 957,
        "Question": "Pick out the correct statement for error handling alternatives.",
        "Options": [
            "a) Terminate the program",
            "b) Use the stack",
            "c) Exit from the block",
            "d) Use the queue"
        ],
        "Answer": " Answer: c\nExplanation: The three levels of exception safety are basic, strong and no throw.\n"
    },
    {
        "id": 958,
        "Question": "What will happen when an exception is not processed?",
        "Options": [
            "a) It will eat up a lot of memory and program size",
            "b) Terminate the program",
            "c) Crash the compiler",
            "d) Displays proper output"
        ],
        "Answer": " Answer: b\nExplanation: When an error is raised means, it will be pushed into stack and it can be corrected later by the programmer.\n"
    },
    {
        "id": 959,
        "Question": "Which header file is used to declare the standard exception?",
        "Options": [
            "a) #include<exception>",
            "b) #include<except>",
            "c) #include<error>",
            "d) #include<exce>"
        ],
        "Answer": " Answer: a\nExplanation: #include<exception> is used to declare the standard exception.\n"
    },
    {
        "id": 960,
        "Question": "Where are standard exception classes grouped?",
        "Options": [
            "a) namespace std",
            "b) error",
            "c) catch",
            "d) final"
        ],
        "Answer": " Answer: a\nExplanation: As these are standard exceptions, they need to be defined in the standard block, So it is defined under namespace std.\n"
    },
    {
        "id": 961,
        "Question": "How many types of standard exception are there in c++?",
        "Options": [
            "a) 9",
            "b) 5",
            "c) 6",
            "d) 7"
        ],
        "Answer": " Answer: a\nExplanation: There are nine standard exceptions in c++. They are bad_alloc, bad_cast, bad_exception, bad_function_call, bad_typeid, bad_weak_ptr, ios_base::failure, logic_error and runtime_error. "
    },
    {
        "id": 962,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> myexc<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> exception</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> what<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"st0\">\"My exception\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> myex<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">throw</span> myex<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) My",
            "b) My exception",
            "c) No exception",
            "d) exception"
        ],
        "Answer": " Answer: b\nExplanation: This is a type of exception arising in the class. We can call this\nalso as a standard exception.\nOutput:\n\n\n        \n\n$ g++ std.cpp\n$ a.out\nMy exception\n\n\n"
    },
    {
        "id": 963,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span><span class=\"sy2\">*</span> myarray<span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Allocated\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Standard exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Allocated",
            "b) Standard exception:",
            "c) bad_alloc",
            "d) Depends on memory"
        ],
        "Answer": " Answer: d\nExplanation: Variable will be allocated depends on the available space in the memory, If there is no space means, It will throw an exception.\nOutput:\n\n\n\t\n\n$ g++ std1.cpp\n$ a.out\nAllocated\n\n\n"
    },
    {
        "id": 964,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span><span class=\"sy2\">*</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ptr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"kw4\">size_t</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">delete</span><span class=\"br0\">[</span> <span class=\"br0\">]</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span><span class=\"br0\">(</span>bad_alloc <span class=\"sy3\">&amp;</span>thebadallocation<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> thebadallocation.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 2",
            "c) bad_alloc",
            "d) depends on compiler"
        ],
        "Answer": " Answer: a\nExplanation: As we are dividing the zero by three, it is returning 0.\nOutput:\n\n\n$ g++ std2.cpp\n$ a.out\n0\n\n\n"
    },
    {
        "id": 965,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> shape</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> myvirtualfunc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> mytriangle<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> shape</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> myvirtualfunc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        shape shape_instance<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        shape <span class=\"sy3\">&amp;</span>ref_shape <span class=\"sy1\">=</span> shape_instance<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mytriangle <span class=\"sy3\">&amp;</span>ref_mytriangle <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>mytriangle<span class=\"sy3\">&amp;</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ref_shape<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>bad_cast<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught: bad_cast exception<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Caught standard exception",
            "b) No exception arises",
            "c) Caught: bad_cast exception",
            "d) Caught: cast"
        ],
        "Answer": " Answer: c\nExplanation: As we are not able to allocate the values by using dynamic cast,\nSo it is arising an exception.\nOutput:\n\n\n$ g++ std3.cpp\n$ a.out\nCaught: bad_cast exception\n\n\n"
    },
    {
        "id": 966,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Test</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> ~Test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Test <span class=\"sy2\">*</span>ptrvar <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>ptrvar<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>bad_typeid<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The object is null\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) No exception arises",
            "b) The object is null",
            "c) Error",
            "d) The object is"
        ],
        "Answer": " Answer: b\nExplanation: As there is no object in the class, It is arising an exception in the program.\nOutput:\n\n\n$ g++ std4.cpp\n$ a.out\nThe object is null\n\n\n"
    },
    {
        "id": 967,
        "Question": "Which of the following is best to include under try block?",
        "Options": [
            "a) static values",
            "b) const values",
            "c) dynamic allocations",
            "d) default values"
        ],
        "Answer": " Answer: c\nExplanation: Because the dynamic allocations can change at any time, So it is best to include in try block.\n"
    },
    {
        "id": 968,
        "Question": "What are the predefined exceptions in c++?",
        "Options": [
            "a) Memory allocation errors",
            "b) I/O errors",
            "c) Both Memory allocation errors & I/O errors",
            "d) static errors"
        ],
        "Answer": " Answer: c\nExplanation: Both Memory allocation errors & I/O errors are the predefined exceptions in c++.\n"
    },
    {
        "id": 969,
        "Question": "What will happen when introduce the interface of classes in a run-time polymorphic hierarchy?",
        "Options": [
            "a) Separation of interface from implementation",
            "b) Merging of interface from implementation",
            "c) Separation of interface from debugging",
            "d) Merging of interface from debugging"
        ],
        "Answer": " Answer: a\nExplanation: Separation of interface from implementation introduce the interface of classes in a run-time polymorphic hierarchy.\n"
    },
    {
        "id": 970,
        "Question": "Which classes are called as mixin?",
        "Options": [
            "a) Represent a secondary design",
            "b) Classes express functionality which represents responsibilities",
            "c) Standard logging stream",
            "d) Represent a priary design"
        ],
        "Answer": " Answer: b\nExplanation: A class that expresses functionality rather than its primary design role is called a mixin.\n"
    },
    {
        "id": 971,
        "Question": "What is the use of clog?",
        "Options": [
            "a) Standard logging stream",
            "b) Error stream",
            "c) Input stream",
            "d) output stream"
        ],
        "Answer": " Answer: a\nExplanation: clog is an object of class ostream that represents the standard logging stream. It is associated with the cstdio stream stderr, like cerr.\n"
    },
    {
        "id": 972,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;sstream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stringstream mys<span class=\"br0\">(</span>ios <span class=\"sy4\">::</span> <span class=\"me2\">in</span> <span class=\"sy3\">|</span> ios <span class=\"sy4\">::</span> <span class=\"me2\">out</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        std <span class=\"sy4\">::</span> <span class=\"me2\">string</span> dat<span class=\"br0\">(</span><span class=\"st0\">\"The double value is : 74.79 .\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mys.<span class=\"me1\">str</span><span class=\"br0\">(</span>dat<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mys.<span class=\"me1\">seekg</span><span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">7</span>, ios <span class=\"sy4\">::</span> <span class=\"me2\">end</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> val<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mys <span class=\"sy1\">&gt;&gt;</span> val<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        val <span class=\"sy1\">=</span> val<span class=\"sy2\">*</span>val<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mys.<span class=\"me1\">seekp</span><span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">7</span>,ios<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mys <span class=\"sy1\">&lt;&lt;</span> val<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        std <span class=\"sy4\">::</span> <span class=\"me2\">string</span> new_val <span class=\"sy1\">=</span> mys.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> new_val<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5593.54",
            "b) Error",
            "c) Runtime error",
            "d) 5463.54"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We have used the string hierarchy to compute the square of the number.\nOutput:\n\n\n        \n\n$ g++ class.cpp\n$ a.out\nThe double value is : 5593.54 .\n\n\n"
    },
    {
        "id": 973,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Base<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ~Base<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw2\">private</span><span class=\"sy4\">:</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Derived<span class=\"sy4\">:</span><span class=\"kw2\">public</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Derived<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            Derived<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The program exceuted\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) The program executed",
            "b) Error",
            "c) Runtime error",
            "d) program exceuted"
        ],
        "Answer": " Answer: b\nExplanation: We are allowed to overload constructor but in this case as both the constructor have no parameters which implies that both the constructor have same signature which is not allowed i.e. constructors can be overloaded but two overloaded constructors can not have same function signature.\n"
    },
    {
        "id": 974,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> MyException</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        MyException<span class=\"br0\">(</span><span class=\"kw4\">int</span> value<span class=\"br0\">)</span> <span class=\"sy4\">:</span> mValue<span class=\"br0\">(</span>value<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> mValue<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> MyDerivedException <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> MyException</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">            MyDerivedException<span class=\"br0\">(</span><span class=\"kw4\">int</span> value, <span class=\"kw4\">int</span> anotherValue<span class=\"br0\">)</span> <span class=\"sy4\">:</span> MyException<span class=\"br0\">(</span>value<span class=\"br0\">)</span>,    mAnotherValue<span class=\"br0\">(</span>anotherValue<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> mValue<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">int</span> mAnotherValue<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> doSomething<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">throw</span> MyDerivedException<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            doSomething<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>MyDerivedException <span class=\"sy3\">&amp;</span>exception<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Caught Derived Class Exception<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>MyException <span class=\"sy3\">&amp;</span>exception<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Caught Base Class Exception<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Caught Base Class Exception",
            "b) Caught Derived Class Exception",
            "c) Caught Base & Derived Class Exception",
            "d) Caught Base Class"
        ],
        "Answer": " Answer: b\nExplanation: As we are throwing the value from the derived class, it is arising an exception in derived class\nOutput:\n\n\n$ g++ class1.cpp\n$ a.out\nCaught Derived Class Exception\n\n\n"
    },
    {
        "id": 975,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string s <span class=\"sy1\">=</span> <span class=\"st0\">\"a long string\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        s.<span class=\"me1\">insert</span><span class=\"br0\">(</span>s.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, <span class=\"st0\">\" * \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) a long* string",
            "b) a long st*ring",
            "c) Depends on compiler",
            "d) a long string*"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are placing the string based on the size of the string and it is a string hierarchy.\nOutput:\n\n\n$ g++ class2.cpp\n$ a.out\na long* string\n\n\n"
    },
    {
        "id": 976,
        "Question": "How many types of guarantees are there in exception class can have?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three types of guarantees in c++. They are weak, strong and no-throw.\n"
    },
    {
        "id": 977,
        "Question": "Which operator is used to create the user-defined streams in c++?",
        "Options": [
            "a) >>",
            "b) <<",
            "c) &",
            "d) Both >> & <<"
        ],
        "Answer": " Answer: d\nExplanation: We can make user-defined types with streams by overloading the insertion operator (<<) to put objects into streams and the extraction operator (>>) to read objects from streams.\n"
    },
    {
        "id": 978,
        "Question": "What does the cerr represent?",
        "Options": [
            "a) Standard error stream",
            "b) Standard logging stream",
            "c) Input stream",
            "d) Output stream"
        ],
        "Answer": " Answer: a\nExplanation: cerr is an object of class ostream that represents the standard error stream. It is associated with the cstdio stream stderr.\n"
    },
    {
        "id": 979,
        "Question": "What is meant by multiple inheritance?",
        "Options": [
            "a) Deriving a base class  from derived class",
            "b) Deriving a derived class from base class",
            "c) Deriving a derived class from more than one base class",
            "d) Deriving a derived base class"
        ],
        "Answer": " Answer: c\nExplanation: Multiple inheritance enables a derived class to inherit members from more than one parent.\n"
    },
    {
        "id": 980,
        "Question": "Which symbol is used to create multiple inheritances?",
        "Options": [
            "a) Dot",
            "b) Comma",
            "c) Dollar",
            "d) star"
        ],
        "Answer": " Answer: b\nExplanation: For using multiple inheritance, simply specify each base class (just like in single inheritance), separated by a comma.\n"
    },
    {
        "id": 981,
        "Question": "Which of the following advantages we lose by using multiple inheritances?",
        "Options": [
            "a) Dynamic binding",
            "b) Polymorphism",
            "c) Both Dynamic binding & Polymorphism",
            "d) Constructor"
        ],
        "Answer": " Answer: c\nExplanation: The benefit of dynamic binding and polymorphism is that they help making the code easier to extend but by multiple inheritance it makes harder to track.\n"
    },
    {
        "id": 982,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedOne <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span>     </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"DerivedOne<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> DerivedTwo <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"DerivedTwo<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span>     </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Multiple <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> DerivedOne, <span class=\"kw2\">public</span> DerivedTwo</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            DerivedTwo <span class=\"sy4\">::</span> <span class=\"me2\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Multiple both<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedOne one<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        DerivedTwo two<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        Base <span class=\"sy2\">*</span>array<span class=\"br0\">[</span> <span class=\"nu0\">3</span> <span class=\"br0\">]</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>both<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>one<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>two<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        array<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) DerivedOne",
            "b) DerivedTwo",
            "c) Error",
            "d) DerivedThree"
        ],
        "Answer": " Answer: c\nExplanation: We are using the multiple inheritance to find the area of rectangle and triangle.\nOutput:\n\n\n\t\n\n$ g++ mul.cpp\n$ a.out\n20\n10\n\n\n"
    },
    {
        "id": 983,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> student</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> rno , m1 , m2 <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            rno <span class=\"sy1\">=</span> <span class=\"nu0\">15</span>, m1 <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, m2 <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sports</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sm<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> getsm<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sm <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> statement<span class=\"sy4\">:</span><span class=\"kw2\">public</span> student,<span class=\"kw2\">public</span> sports</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> tot,avg<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            tot <span class=\"sy1\">=</span> <span class=\"br0\">(</span>m1 <span class=\"sy2\">+</span> m2 <span class=\"sy2\">+</span> sm<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            avg <span class=\"sy1\">=</span> tot <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> tot<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> avg<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        statement obj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">getsm</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3100",
            "b) 3010",
            "c) 2010",
            "d) 1010"
        ],
        "Answer": " Answer: c\nExplanation: In this program, ‘Base’ is an ambiguous base of ‘Multiple’. So it is producing an error. And this program is a virtual base class.\n"
    },
    {
        "id": 984,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> a</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> count<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> b</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> value<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> c <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> a, <span class=\"kw2\">public</span> b</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c<span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Inherited\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Inherited",
            "b) Error",
            "c) Runtime error",
            "d) inherited"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are calculating the total and average marks of a student by using multiple inheritance.\nOutput:\n\n\n$ g++ mul1.cpp\n$ a.out\n3010\n\n\n"
    },
    {
        "id": 985,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base1</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> SampleDataOne<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base1<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            SampleDataOne <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Base1<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> SampleFunctOne<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> SampleDataOne<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Base2</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> SampleDataTwo<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base2<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            SampleDataTwo <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Base2<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> SampleFunctTwo<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> SampleDataTwo<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Derived1 <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base1, <span class=\"kw2\">public</span> Base2</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> MyData<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Derived1<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            MyData <span class=\"sy1\">=</span> <span class=\"nu0\">300</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ~Derived1<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> MyFunct<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>MyData <span class=\"sy2\">+</span> SampleDataOne <span class=\"sy2\">+</span> SampleDataTwo<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base1 SampleObjOne<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Base2 SampleObjTwo<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Derived1 SampleObjThree<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> SampleObjThree.<span class=\"me1\">Base1</span> <span class=\"sy4\">::</span> <span class=\"me2\">SampleFunctOne</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> SampleObjThree.<span class=\"me1\">Base2</span> <span class=\"sy4\">::</span> <span class=\"me2\">SampleFunctTwo</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) Both 100 & 200",
            "d) 150"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We apply the multiple inheritance to structure.\nOutput:\n\n\n$ g++ mul2.cpp\n$ a.out\nInherited\n\n\n"
    },
    {
        "id": 986,
        "Question": "Which design patterns benefit from the multiple inheritances?",
        "Options": [
            "a) Adapter and observer pattern",
            "b) Code pattern",
            "c) Glue pattern",
            "d) Star pattern"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are passing the values by using multiple inheritance and printing the derived values.\nOutput:\n\n\n$ g++ mul4.cpp\n$ a.out\n100\n200\n\n\n"
    },
    {
        "id": 987,
        "Question": "What are the things are inherited from the base class?",
        "Options": [
            "a) Constructor and its destructor",
            "b) Operator=() members",
            "c) Friends",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: a\nExplanation: Adapter and observer patterns benefit from the multiple inheritances.\n"
    },
    {
        "id": 988,
        "Question": "What is Inheritance in C++?",
        "Options": [
            "a) Wrapping of data into a single class",
            "b) Deriving new classes from existing classes",
            "c) Overloading of classes",
            "d) Classes with same names"
        ],
        "Answer": "Answer: b\nExplanation: Inheritance is the concept of OOPs in which new classes are derived from existing classes in order to reuse the properties of classes defined earlier."
    },
    {
        "id": 989,
        "Question": "How many specifiers are used to derive a class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are 3 specifiers used to derive a class. They are private, protected and public."
    },
    {
        "id": 990,
        "Question": "Which specifier makes all the data members and functions of base class inaccessible by the derived class?",
        "Options": [
            "a) private",
            "b) protected",
            "c) public",
            "d) both private and protected"
        ],
        "Answer": "Answer: a\nExplanation: Private access specifier is used to make all the data members and functions of the base class inaccessible."
    },
    {
        "id": 991,
        "Question": "If a class is derived privately from a base class then ______________________________",
        "Options": [
            "a) no members of the base class is inherited",
            "b) all members are accessible by the derived class",
            "c) all the members are inherited by the class but are hidden and cannot be accessible",
            "d) no derivation of the class gives an error"
        ],
        "Answer": "Answer: c\nExplanation: Whenever a class is derived, all the members of the base class is inherited by the derived class but are not accessible by the derived class."
    },
    {
        "id": 992,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">float</span> d<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> change<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> value_of_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">private</span> A\n<span class=\"br0\">{</span>\n&nbsp;\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 8",
            "b) 12",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: As class B is derived from class A and class A has three members with each of 4 bytes size hence size of B equal to 3 * 4 = 12 bytes."
    },
    {
        "id": 993,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">float</span> d<span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw4\">void</span> change<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> value_of_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">change</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">value_of_a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n&nbsp;\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1010",
            "b) 1510",
            "c) 1515",
            "d) 5110"
        ],
        "Answer": "Answer: b\nExplanation: When change() is called it sets parents class ‘a’ variable = 10. When print() is called then ‘a’ from class B is printed and wehn value_of_a() is called then ‘a’ from class A is printed."
    },
    {
        "id": 994,
        "Question": "What is a virtual function in C++?",
        "Options": [
            "a) Any member function of a class",
            "b) All functions that are derived from the base class",
            "c) All the members that are accessing base class data members",
            "d) All the functions which are declared in the base class and is re-defined/overridden by the derived class"
        ],
        "Answer": "Answer: a\nExplanation: When a derived class is declared it calls both its constructor and the base class constructor. It first calls the base class constructor and then its own constructor."
    },
    {
        "id": 995,
        "Question": "Which is the correct syntax of declaring a virtual function?",
        "Options": [
            "a) virtual int func();",
            "b) virtual int func(){};",
            "c) inline virtual func();",
            "d) inline virtual func(){};"
        ],
        "Answer": "Answer: d\nExplanation: Virtual function is a function that is declared inside the base class and is re-defined inside the derived class."
    },
    {
        "id": 996,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A<span class=\"br0\">{</span>\n\t<span class=\"kw4\">float</span> d<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello this is class A<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello this is class B<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello this is class B",
            "b) Hello this is class A",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: To make a function virtual function we just need to add virtual keyword at the starting of the function declaration."
    },
    {
        "id": 997,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">float</span> d<span class=\"sy4\">;</span>\n     <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello this is class A<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello this is class B<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a<span class=\"sy4\">;</span>\n\ta<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello this is class A",
            "b) Hello this is class B",
            "c) Error",
            "d) Segmentation Fault"
        ],
        "Answer": "Answer: a\nExplanation: Normal execution of the program and object calls func() from class B."
    },
    {
        "id": 998,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">float</span> d<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello this is class A<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Hello this is class B<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tB b<span class=\"sy4\">;</span>\n\ta <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>b<span class=\"sy4\">;</span>\n\ta<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello this is class A",
            "b) Hello this is class B",
            "c) Error",
            "d) Segmentation Fault"
        ],
        "Answer": "Answer: d\nExplanation: As object ‘a’ is a pointer object and we know every pointer needs to be initialised memory before use. Hence segmentation fault. Use A *a = new A(); to initialise memory to the object."
    },
    {
        "id": 999,
        "Question": "Which statement is incorrect about virtual function.",
        "Options": [
            "a) They are used to achieve runtime polymorphism",
            "b) They are used to hide objects",
            "c) Each virtual function declaration starts with the virtual keyword",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: As pointer object a is pointing to the object b hence the definition of virtual function defined inside the class B will be class. This is one of the use of virtual function."
    },
    {
        "id": 1000,
        "Question": "The concept of deciding which function to invoke during runtime is called ______________________",
        "Options": [
            "a) late binding",
            "b) dynamic linkage",
            "c) static binding",
            "d) both late binding and dynamic linkage"
        ],
        "Answer": "Answer: b\nExplanation: Virtual function are used to achieve runtime polymorphism by calling the right function during runtime. Their declaration starts with a virtual keyword."
    },
    {
        "id": 1001,
        "Question": "What is a pure virtual function?",
        "Options": [
            "a) A virtual function defined inside the base class",
            "b) A virtual function that has no definition relative to the base class",
            "c) A virtual function that is defined inside the derived class",
            "d) Any function that is made virtual"
        ],
        "Answer": "Answer: d\nExplanation: The concept of deciding which function to invoke during runtime is called late binding or dynamic linkage. Late binding because function binding to the object is done during runtime. Dynamic linkage because this binding is done during runtime."
    },
    {
        "id": 1002,
        "Question": "What is the order of Constructors call when the object of derived class B is declared, provided class B is derived from class A?",
        "Options": [
            "a) Constructor of A followed by B",
            "b) Constructor of B followed by A",
            "c) Constructor of A only",
            "d) Constructor of B only"
        ],
        "Answer": "Answer: a\nExplanation: As the Male class is derived from Human class and Human class is derived from the Mammal class. Therefore when an object of Male is declared then three constructors will be called namely Mammal(), Human() and Male() in the given order."
    },
    {
        "id": 1003,
        "Question": "What is the order of Destructors call when the object of derived class B is declared, provided class B is derived from class A?",
        "Options": [
            "a) Destructor of A followed by B",
            "b) Destructor of B followed by A",
            "c) Destructor of A only",
            "d) Destructor of B only"
        ],
        "Answer": "Answer: a\nExplanation: Firstly the Constructor of class A is called then class B because the Constructor of the base class is called before derived class."
    },
    {
        "id": 1004,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Mammal\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"I'm a Mammal<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> Human<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Mammal\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"I'm a Human<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> Male<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Human\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"I'm a Male<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> Female<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Human\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"I'm a Female<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tMammal <span class=\"sy2\">*</span>M<span class=\"sy4\">;</span>\n\tMale m<span class=\"sy4\">;</span>\n\tFemale f<span class=\"sy4\">;</span>\n\t<span class=\"sy2\">*</span>M <span class=\"sy1\">=</span> m<span class=\"sy4\">;</span>\n\tM<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) I’m a Male",
            "b) I’m a Mammal",
            "c) Error",
            "d) Segmentation Fault"
        ],
        "Answer": "Answer: b\nExplanation: Order of Destructor call is just reverse of the order of Destructors call. First, the destructor of the derived class is called then Destructor of the base class is called."
    },
    {
        "id": 1005,
        "Question": "Virtual functions in C++ tells the compiler to perform ______________________ on such functions.",
        "Options": [
            "a) static binding",
            "b) late binding",
            "c) compile time binding",
            "d) no binding"
        ],
        "Answer": "Answer: d\nExplanation: As the Mammal pointer *M is not Initialized memory therefore program results into segmentation faults. "
    },
    {
        "id": 1006,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Mammal\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"I'm a Mammal<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> Human<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Mammal\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">private</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"I'm a Human<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tMammal <span class=\"sy2\">*</span>M <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> Mammal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tHuman H<span class=\"sy4\">;</span>\n\tM <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>H<span class=\"sy4\">;</span>\n\tM<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>Define<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) Segmnetation fault",
            "c) I’m a Human",
            "d) Garbage Value"
        ],
        "Answer": "Answer: c\nExplanation: There is a difference between pointer and references. Pointer stores the address of a variable so we need dereferencing operator to access the pointed variable whereas references are another name for that variable so we don’t need any dereferencing operator, they are dereference by compiler itself therefore when we are using pointer then Mammal class definition is called and when reference is used then Male class definition is used."
    },
    {
        "id": 1007,
        "Question": "Which concept of OOPs is shown by Virtual Functions?",
        "Options": [
            "a) Inheritance",
            "b) Encapsulation",
            "c) Polymorphism",
            "d) Abstraction"
        ],
        "Answer": "Answer: b\nExplanation: Virtual function in C++ adds the power of late binding by deciding the type of object during run-time."
    },
    {
        "id": 1008,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\t<span class=\"kw2\">virtual</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"A's Constructor<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Present inside the class B<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA a<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) A’s Constructor",
            "b) Present inside the class B",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: Using base class pointer we can call private functions of derived by using virtual keyword because virtual function asks compiler performs late binding i.e. bind function at run-time and at run-time there is no checking of access specifiers. Hence it can access private members."
    },
    {
        "id": 1009,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\t<span class=\"kw2\">virtual</span> <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"class A<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"class B<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tA <span class=\"sy2\">*</span>a <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tB b<span class=\"sy4\">;</span>\n\ta <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>b<span class=\"sy4\">;</span>\n\ta<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) class B",
            "b) Error",
            "c) Segmentation fault",
            "d) class A"
        ],
        "Answer": "Answer: c\nExplanation: Virtual function allows us to give different definitions of the same function i.e. overloading of functions which is known as Polymorphism."
    },
    {
        "id": 1010,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">static</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n&nbsp;\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 0",
            "c) Segmentation fault",
            "d) Error"
        ],
        "Answer": "Answer: c\nExplanation: C++ does not allows programmers to make constructor a virtual function."
    },
    {
        "id": 1011,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) a: 1",
            "b) a: 0",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: A function cannot be made virtual and static at the same time."
    },
    {
        "id": 1012,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">private</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n&nbsp;\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) Segmentation fault",
            "c) a: 1",
            "d) a: 0"
        ],
        "Answer": "Answer: d\nExplanation: Non-static members of class cannot be used inside a static functions of class."
    },
    {
        "id": 1013,
        "Question": "14. What happens if the following C++ program is compiled?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> A\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span> \n\tA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\ta<span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw2\">class</span> B<span class=\"sy4\">:</span> <span class=\"kw2\">private</span> A\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tB b<span class=\"sy4\">;</span>\n\tb.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Error because of the conflicts between two show() function in class B",
            "b) Program will compile successfully",
            "c) Error due to self call in show() function",
            "d) Error because show() function from class A is derived privately"
        ],
        "Answer": "Answer: a\nExplanation: Though the constructor of class A is not called to initialize variable ‘a’ but as we know whenever we create an object of the derived class, constructors of both base and derived classes are called hence variable ‘a’ is initialized and program runs perfectly."
    },
    {
        "id": 1014,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Virtual function can have different names in the base and derived class",
            "b) Virtual function cannot be applied in Multiple Inheritance classes",
            "c) Virtual function are different in definitions only",
            "d) Virtual function does early binding"
        ],
        "Answer": "Answer: a\nExplanation: As class B is derived privately from A hence all the members of class A cannot be accessible by the object of class B hence the program gives error."
    },
    {
        "id": 1015,
        "Question": "Which access specifier is used where one wants data members to be accessed by other classes but not from outside objects?",
        "Options": [
            "a) private",
            "b) protected",
            "c) public",
            "d) both protected and public"
        ],
        "Answer": " Answer: b\nExplanation: Protected and public members are accessible from derived classes but public members can be accessed by objects of the class so protected specifier is the answer.\n"
    },
    {
        "id": 1016,
        "Question": "Which of the following describes the protected access specifier?",
        "Options": [
            "a) The variable is visible only outside inside the block",
            "b) The variable is visible everywhere",
            "c) The variable is visible to its block and to it’s derived class",
            "d) The variable is not visible to its block"
        ],
        "Answer": " Answer: c\nExplanation: Protected members are visible to its block and to the derived classes and not visible to outside objects or variables.\n"
    },
    {
        "id": 1017,
        "Question": "To which of the following access specifiers are applicable?",
        "Options": [
            "a) Member data",
            "b) Functions",
            "c) Both Member data & Functions",
            "d) Protected members"
        ],
        "Answer": " Answer: c\nExplanation: The access specifiers can be applicable to the member data and functions because they need to be accessed outside the block.\n"
    },
    {
        "id": 1018,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> student</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> rno , m1 , m2 <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">protected</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            rno <span class=\"sy1\">=</span> <span class=\"nu0\">15</span>, m1 <span class=\"sy1\">=</span> <span class=\"nu0\">10</span>, m2 <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> sports</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sm<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> getsm<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sm <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> statement <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> student, <span class=\"kw2\">public</span> sports</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> tot, avg<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            tot <span class=\"sy1\">=</span> <span class=\"br0\">(</span>m1 <span class=\"sy2\">+</span> m2 <span class=\"sy2\">+</span> sm<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            avg <span class=\"sy1\">=</span> tot <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> tot<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> avg<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> setObject<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            get<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        statement obj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">setObject</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">getsm</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        obj.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3010",
            "b) 1010",
            "c) 2100",
            "d) Error"
        ],
        "Answer": " Answer: a\nExplanation: In this program we setting values of m1 and m2 using obj.setObject() function derived from student class. setting calue of sm using getsm() derived from sports function and then displaying the outputs using display() function in statement class.\n"
    },
    {
        "id": 1019,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> f<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> A <span class=\"sy4\">::</span> <span class=\"me2\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> B </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> f<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> B <span class=\"sy4\">::</span> <span class=\"me2\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A a<span class=\"sy4\">;</span> B b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> b.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">j</span> <span class=\"sy1\">=</span> b.<span class=\"me1\">j</span> <span class=\"sy1\">=</span> <span class=\"st0\">'c'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">f</span> <span class=\"sy1\">=</span> b.<span class=\"me1\">f</span> <span class=\"sy1\">=</span> <span class=\"nu16\">3.14159</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b.<span class=\"me1\">func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Allocated\"</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Allocated",
            "b) Error",
            "c) 3.14159",
            "d) 1"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We used access specifiers for structures, As we declared all methods as public, The values can be allocated.\nOutput:\n\n\n\t\n\n$ g++ acc.cpp\n$ a.out\nAllocated\n\n\n"
    },
    {
        "id": 1020,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i, j, k<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> g<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> A <span class=\"sy4\">::</span> <span class=\"me2\">f</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i <span class=\"sy2\">+</span> j <span class=\"sy2\">+</span> k<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> A <span class=\"sy4\">::</span> <span class=\"me2\">g</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> j <span class=\"sy1\">=</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> B </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i, j, k<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> g<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> B <span class=\"sy4\">::</span> <span class=\"me2\">f</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i <span class=\"sy2\">+</span> j <span class=\"sy2\">+</span> k<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> B <span class=\"sy4\">::</span> <span class=\"me2\">g</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> j <span class=\"sy1\">=</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        B b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">f</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">g</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b.<span class=\"me1\">f</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        b.<span class=\"me1\">g</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Identical results would be produced\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) Identical results would be produced",
            "c) Error",
            "d) Runtime error"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We apply the access specifiers to both the class and the structure.\nOutput:\n\n\n$ g++ acc1.cpp\n$ a.out\n\n\nIdentical results would be produced\n"
    },
    {
        "id": 1021,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Cat</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> age<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> weight<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Cat f<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        f.<span class=\"me1\">age</span> <span class=\"sy1\">=</span> <span class=\"nu0\">56</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Gates is \"</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> f.<span class=\"me1\">age</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" years old.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Gates is",
            "b) Gates is 56 years old",
            "c) Error",
            "d) Gates is 53 years old"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We passed the value from main function to class and returning it to the main and then printing it.\nOutput:\n\n\n$ g++ acc2.cpp\n$ a.out\nGates is 56 years old\n\n\n"
    },
    {
        "id": 1022,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> Y </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> f<span class=\"br0\">(</span>X<span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> X </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> initialize<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> g<span class=\"br0\">(</span>X<span class=\"sy2\">*</span> , <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> Y <span class=\"sy4\">::</span> <span class=\"me2\">f</span><span class=\"br0\">(</span>X<span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">struct</span> Z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> h<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> X <span class=\"sy4\">::</span> <span class=\"me2\">initialize</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> g<span class=\"br0\">(</span>X<span class=\"sy2\">*</span> x, <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> i <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Y <span class=\"sy4\">::</span> <span class=\"me2\">f</span><span class=\"br0\">(</span>X <span class=\"sy2\">*</span> x<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">47</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> Z </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> initialize<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> g<span class=\"br0\">(</span>X<span class=\"sy2\">*</span> x<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Z<span class=\"sy4\">::</span><span class=\"me2\">initialize</span><span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        j <span class=\"sy1\">=</span> <span class=\"nu0\">99</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> Z<span class=\"sy4\">::</span><span class=\"me2\">g</span><span class=\"br0\">(</span>X<span class=\"sy2\">*</span> x<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> i <span class=\"sy2\">+</span><span class=\"sy1\">=</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> h<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        X x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        x.<span class=\"me1\">i</span> <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x.<span class=\"me1\">i</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        X x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Z z<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        z.<span class=\"me1\">g</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Data accessed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 99",
            "b) 47",
            "c) Data accessed",
            "d) 67"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are using the access specifiers to friend function to manipulate the values.\nOutput:\n\n\n$ g++ acc3.cpp\n$ a.out\nData accessed\n\n\n"
    },
    {
        "id": 1023,
        "Question": "Members of which access specifiers are not inherited?",
        "Options": [
            "a) Public",
            "b) Protected",
            "c) Private",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: All the data members and member functions of a class are private by default.\n"
    },
    {
        "id": 1024,
        "Question": "What is the importance of mutable keyword?",
        "Options": [
            "a) It allows the data member to change within a const member function",
            "b) It will not allow the data member to change within a const member function",
            "c) It will copy the values of the variable",
            "d) It allows the data member to change outside a const member function"
        ],
        "Answer": " Answer: a\nExplanation: Mutable keyword allows assigning values to a data member belonging to a class defined as “Const” or constant.\n"
    },
    {
        "id": 1025,
        "Question": "What is the Run-Time Type Information?",
        "Options": [
            "a) Information about an object’s data type at runtime",
            "b) Information about the variables",
            "c) Information about the given block",
            "d) Information about the functions"
        ],
        "Answer": " Answer: a\nExplanation: With the help of RTTI, We can get the information about the data type at the runtime.\n"
    },
    {
        "id": 1026,
        "Question": "Which operators are part of RTTI?",
        "Options": [
            "a) dynamic_cast()",
            "b) typeid",
            "c) both dynamic_cast<> & typeid",
            "d) dynamic_cast[]"
        ],
        "Answer": " Answer: c\nExplanation: The dynamic_cast<> operation and typeid operator in C++ are part of RTTI.\n"
    },
    {
        "id": 1027,
        "Question": "To which type of class, We can apply RTTI?",
        "Options": [
            "a) Encapsulation",
            "b) Polymorphic",
            "c) Derived",
            "d) Static"
        ],
        "Answer": " Answer: b\nExplanation: RTTI is available only for classes which are polymorphic, which means they have at least one virtual method.\n"
    },
    {
        "id": 1028,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> base <span class=\"br0\">{</span> <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> dummy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> derived<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> base <span class=\"br0\">{</span> <span class=\"kw4\">int</span> a<span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            base <span class=\"sy2\">*</span> pba <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> derived<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            base <span class=\"sy2\">*</span> pbb <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> base<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            derived <span class=\"sy2\">*</span> pd<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            pd <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>derived<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>pba<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pd <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Null pointer on first type-cast\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            pd <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>derived<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>pbb<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pd <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Null pointer on second type-cast\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Null pointer on first type-cast",
            "b) Null pointer on second type-cast",
            "c) Exception",
            "d) Null pointer on third type-cast"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We apply the dynamic cast to pd. Based on the value in the pd, it produces the output.\nOutput:\n\n\n        \n\n$ g++ rtti.cpp\n$ a.out\nNull pointer on second type-cast\n\n\n"
    },
    {
        "id": 1029,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">typeid</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Pi",
            "b) i",
            "c) Both pi & i",
            "d) f"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are finding the typeid of the given variables.\nOutput:\n\n\n\t\n\n$ g++ rtti1.cpp\n$ a.out\nPii\n\n\n"
    },
    {
        "id": 1030,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;exception&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> base </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> derived <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> base <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            base<span class=\"sy2\">*</span> a <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> base<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            base<span class=\"sy2\">*</span> b <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> derived<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>a<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\t</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>b<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception<span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) base*",
            "b) derived*",
            "c) 4base and 7derived",
            "d) Exception:derived"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We apply the typeid to the polymorphic class.\nOutput:\n\n\n$ g++ rtti2.cpp\n$ a.out\n4base    7derived\n\n\n"
    },
    {
        "id": 1031,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> ~A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy2\">*</span> a <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>a<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>bad_typeid<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Object is NULL\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) int",
            "b) float",
            "c) double",
            "d) object is NULL"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are using the bad typeid() for a. So it is arising an exception.\nOutput:\n\n\n$ g++ rtti3.cpp\n$ a.out\nobject is NULL\n\n\n"
    },
    {
        "id": 1032,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Class A\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> B <span class=\"sy4\">:</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Class B\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> C <span class=\"sy4\">:</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Class C\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> f<span class=\"br0\">(</span>A<span class=\"sy2\">*</span> arg<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        B<span class=\"sy2\">*</span> bp <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>B<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        C<span class=\"sy2\">*</span> cp <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>C<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bp<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            bp <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cp<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            cp <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            arg <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A aobj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        C cobj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy2\">*</span> ap <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>cobj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy2\">*</span> ap2 <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>aobj<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        f<span class=\"br0\">(</span>ap<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        f<span class=\"br0\">(</span>ap2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Class C",
            "b) Class A",
            "c) Both Class C & A",
            "d) Class D"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We applied the dynamic casting to structure and produced the output.\nOutput:\n\n\n$ g++ rtti4.cpp\n$ a.out\nClass C\nClass A\n\n\n"
    },
    {
        "id": 1033,
        "Question": "What is meant by type_info?",
        "Options": [
            "a) Used to hold the type information returned by the typeid operator",
            "b) Used to hold the type information returned by the dynamic_cast",
            "c) Used to hold the type information returned by the static_cast",
            "d) Used to hold the type information returned by the static_id"
        ],
        "Answer": " Answer: a\nExplanation: type_info is used to hold the type information returned by the typeid operator.\n"
    },
    {
        "id": 1034,
        "Question": "At which time does the static_cast can be applied?",
        "Options": [
            "a) Compile-time construct",
            "b) Runtime construct",
            "c) Both Compile-time & Runtime construct",
            "d) Runtime deconstruct"
        ],
        "Answer": " Answer: a\nExplanation: Static_cast can be applied to only compile-time construct and not during run time construct.\n"
    },
    {
        "id": 1035,
        "Question": "Which is referred by pointers to member?",
        "Options": [
            "a) Static members of class objects",
            "b) Non-static members of class objects",
            "c) Referring to whole class",
            "d) Dynamic members of class objects"
        ],
        "Answer": " Answer: b\nExplanation: We cannot use a pointer to member to point to a static class member because the address of a static member is not associated with any particular object.\n"
    },
    {
        "id": 1036,
        "Question": "What should be used to point to a static class member?",
        "Options": [
            "a) Smart pointer",
            "b) Dynamic pointer",
            "c) Normal pointer",
            "d) Static pointer"
        ],
        "Answer": " Answer: c\nExplanation: Normal pointer is sed to point to a static class member.\n"
    },
    {
        "id": 1037,
        "Question": "Which operator is used in pointer to member function?",
        "Options": [
            "a) .*",
            "b) ->*",
            "c) Both .* & ->*",
            "d) $*"
        ],
        "Answer": " Answer: c\nExplanation: The pointer to member operators .* and ->* are used to bind a pointer to a member of a specific class object.\n"
    },
    {
        "id": 1038,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Car</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> speed<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> Car <span class=\"sy4\">::</span> <span class=\"sy2\">*</span>pSpeed <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>Car <span class=\"sy4\">::</span> <span class=\"me2\">speed</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Car c1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c1.<span class=\"me1\">speed</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>           </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c1.<span class=\"me1\">speed</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        c1.<span class=\"sy2\">*</span>pSpeed <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span>     </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> c1.<span class=\"me1\">speed</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) Both 1 & 2",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are assigning 10 and printing it in the\nmain function and then for value 20, We are passing the value to class and\nprinting it.\nOutput:\n\n        \n\n\n$ g++ ptm.cpp\n$ a.out\n10\n20\n\n\n"
    },
    {
        "id": 1039,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Foo</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Foo<span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span> _i <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Executed\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> _i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Foo <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Executed",
            "b) Error",
            "c) Runtime error",
            "d) 10"
        ],
        "Answer": " Answer: d\nExplanation: In this program, As we are passing the value twice to the method\nin the class, It is printing the func1 twice and then it is printing the given\nvalue.\nOutput:\n\n\n$ g++ ptm1.cpp\n$ a.out\nfunc1\nfunc1\n1\n2\n\n\n"
    },
    {
        "id": 1040,
        "Question": "Which is the best design choice for using pointer to member function?",
        "Options": [
            "a) Interface",
            "b) Class",
            "c) Structure",
            "d) Block"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are printing the value by direct access and another one by using pointer to member.\nOutput:\n\n\n$ g++ ptm2.cpp\n$ a.out\n1\n2\n\n\n"
    },
    {
        "id": 1041,
        "Question": "What is the operation for .*?",
        "Options": [
            "a) It combines the first operand and the second operand",
            "b) It separates the first operand and the second operand",
            "c) It reduces the data size",
            "d) It combines the first operand and the second operand and terminates third operand"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are passing the value to the class and adding the values and printing it in the main.\nOutput:\n\n\n$ g++ ptm3.cpp\n$ a.out\nI have 4 apples\nI have 7 oranges\n\n\n"
    },
    {
        "id": 1042,
        "Question": "Which is used to allocate and deallocate storage for objects during the execution?",
        "Options": [
            "a) Stack",
            "b) Heap",
            "c) Freestore",
            "d) Queue"
        ],
        "Answer": " Answer: c\nExplanation: Free store is a pool of memory available for you to allocate and deallocate storage for objects during the execution of your program.\n"
    },
    {
        "id": 1043,
        "Question": "Which operators are used in the free store?",
        "Options": [
            "a) new",
            "b) delete",
            "c) both new & delete",
            "d) terminate"
        ],
        "Answer": " Answer: c\nExplanation: new and delete operators are used to allocate and deallocate the memory for the program.\n"
    },
    {
        "id": 1044,
        "Question": "What type of class member is operator new?",
        "Options": [
            "a) static",
            "b) dynamic",
            "c) const",
            "d) smart"
        ],
        "Answer": " Answer: a\nExplanation: static is a type of class member is operator new.\n"
    },
    {
        "id": 1045,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;new&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> ~A<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> operator <span class=\"kw3\">delete</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy2\">*</span> p<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"A :: operator delete\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> B <span class=\"sy4\">:</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> operator <span class=\"kw3\">delete</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy2\">*</span> p<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"B :: operator delete\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy2\">*</span> ap <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> B<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span> ap<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) A::operator delete",
            "b) B::operator delete",
            "c) Both A::operator delete & B::operator delete",
            "d) A:operator new"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are passing the value to the B, So we are printing B::operator delete.\nOutput:\n\n\n        \n\n$ g++ free.cpp\n$ a.out\nB::operator delete\n\n\n"
    },
    {
        "id": 1046,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> A</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">virtual</span> ~A<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"~A()\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> operator <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy2\">*</span> p, <span class=\"kw4\">size_t</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"A :: operator delete[]\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> B <span class=\"sy4\">:</span> A </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> operator <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy2\">*</span> p, <span class=\"kw4\">size_t</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"B :: operator delete[]\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        A<span class=\"sy2\">*</span> bp <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> B<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bp<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ~A()",
            "b) A :: operator delete[] ",
            "c) B :: operator delete[] ",
            "d) Warning"
        ],
        "Answer": " Answer: d\nExplanation: In this program, the behavior of the statement delete[] bp is undefined.\n\n\n\t\n\n$ g++ a.cpp\na.cpp: In static member function ‘static void A::operator delete [](void*, size_t)’:\na.cpp:12: warning: deleting ‘void*’ is undefined\na.cpp: In static member function ‘static void B::operator delete [](void*, size_t)’:\na.cpp:20: warning: deleting ‘void*’ is undefined\n \n$ a.out\n~A()\n~A()\n~A()\nA :: operator delete[].\n\n\n"
    },
    {
        "id": 1047,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> X </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span><span class=\"sy2\">*</span> operator <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> sz<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">void</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\"malloc() failed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> operator <span class=\"kw3\">delete</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy2\">*</span> p<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"X :: operator delete(void*)\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">free</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> Y </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> filler<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> operator <span class=\"kw3\">delete</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy2\">*</span> p, <span class=\"kw4\">size_t</span> sz<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Freeing \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" bytes\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">free</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        X<span class=\"sy2\">*</span> ptr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span> ptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Y<span class=\"sy2\">*</span> yptr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> Y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span> yptr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) X::operator delete(void*)",
            "b) Freeing 400 bytes",
            "c) Depends on the compiler",
            "d) Both X::operator delete(void*) & Depends on the compiler"
        ],
        "Answer": " Answer: d\nExplanation: The memory value allocated for the program depends on compiler only.\n\n\n$ g++ free2.cpp\n$ a.out\nX :: operator delete(void*)\nFreeing 400 bytes\n\n\n"
    },
    {
        "id": 1048,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;new&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> Node </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        X<span class=\"sy2\">*</span> data<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> filled<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        Node<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> filled<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> X </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">static</span> Node buffer<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> number<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> size <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span><span class=\"sy2\">*</span> operator <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> sz<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">void</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sz <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\"Error: malloc() failed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"X :: operator new(size_t)\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>operator <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> sz, <span class=\"kw4\">int</span> location<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"X :: operator new(size_t, \"</span> <span class=\"sy1\">&lt;&lt;</span> location <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\")\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">void</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>location <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> location <span class=\"sy1\">&gt;=</span> size <span class=\"sy3\">||</span> buffer<span class=\"br0\">[</span>location<span class=\"br0\">]</span>.<span class=\"me1\">filled</span> <span class=\"sy1\">==</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">throw</span> <span class=\"st0\">\"Error: buffer location occupied\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                p <span class=\"sy1\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                    <span class=\"kw1\">throw</span> <span class=\"st0\">\"Error: Creating X object failed\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                buffer<span class=\"br0\">[</span>location<span class=\"br0\">]</span>.<span class=\"me1\">filled</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                buffer<span class=\"br0\">[</span>location<span class=\"br0\">]</span>.<span class=\"me1\">data</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>X<span class=\"sy2\">*</span><span class=\"br0\">)</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> printbuffer<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">data</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>number <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    Node X<span class=\"sy4\">::</span><span class=\"me2\">buffer</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            X<span class=\"sy2\">*</span> ptr1 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            X<span class=\"sy2\">*</span> ptr2 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            X<span class=\"sy2\">*</span> ptr3 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            X<span class=\"sy2\">*</span> ptr4 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ptr2<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>number <span class=\"sy1\">=</span> <span class=\"nu0\">10000</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ptr3<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>number <span class=\"sy1\">=</span> <span class=\"nu0\">10001</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ptr4<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>number <span class=\"sy1\">=</span> <span class=\"nu0\">10002</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            X <span class=\"sy4\">::</span> <span class=\"me2\">printbuffer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            X<span class=\"sy2\">*</span> ptr5 <span class=\"sy1\">=</span> <span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> X<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> message<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> message <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) X::operator new(size_t)",
            "b) Error",
            "c) Runtime error",
            "d) operator new(size_d)"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are giving a location to two variables in the program, So it is arising an exception.\nOutput:\n\n\n$ g++ free3.cpp\n$ a.out\nX::operator new(size_t)\nX::operator new(size_t, 0)\nX::operator new(size_t, 1)\nX::operator new(size_t, 2)\n10000\n10001\n10002\nX::operator new(size_t, 0)\nError: buffer location occupied\n\n\n"
    },
    {
        "id": 1049,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;new&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> bsize <span class=\"sy1\">=</span> <span class=\"nu0\">512</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>pa<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> allocate <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> get_memory<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"free store exhausted\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> pa<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        allocate <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> eat_memory<span class=\"br0\">(</span><span class=\"kw4\">int</span> size<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>allocate<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            eat_memory<span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"free store addr = \"</span> <span class=\"sy1\">&lt;&lt;</span> p <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set_new_handler<span class=\"br0\">(</span>get_memory<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pa <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>bsize<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"free store addr = \"</span> <span class=\"sy1\">&lt;&lt;</span> pa <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        eat_memory<span class=\"br0\">(</span>bsize<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) free store addr",
            "b) Error",
            "c) Segmentation fault",
            "d) free store exhausted"
        ],
        "Answer": " Answer: c\nExplanation: In this program, The memory will go beyond the limit, So there will be exhaustion in memory.\nOutput:\n\n\n$ g++ free4.cpp\n$ a.out\nfree store addr = 0x80a8008\nSegmentation fault\n\n\n"
    },
    {
        "id": 1050,
        "Question": "What must be an operand of operator delete?",
        "Options": [
            "a) Pointer",
            "b) Array",
            "c) Stack",
            "d) Queue"
        ],
        "Answer": " Answer: a\nExplanation: The operand of delete must be a pointer returned by new.\n"
    },
    {
        "id": 1051,
        "Question": "How can object be allocated outside the object lifetime?",
        "Options": [
            "a) int",
            "b) float",
            "c) void*",
            "d) char$"
        ],
        "Answer": " Answer: c\nExplanation: void* object can be allocated outside the object lifetime.\n"
    },
    {
        "id": 1052,
        "Question": "Pick out the wrong header file about strings.",
        "Options": [
            "a) <string>",
            "b) <regex>",
            "c) <ios>",
            "d) <reg>"
        ],
        "Answer": " Answer: c\nExplanation: The standard header files for string is string and regex. So the wrong one presented here is ios.\n"
    },
    {
        "id": 1053,
        "Question": "Which is best for coding the standard library for c++?",
        "Options": [
            "a) no trailing underscores on names",
            "b) complex objects are returned by value",
            "c) have a member-swap()",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: Best coding for the standard library for c++ is:\n-> No trailing underscores on names\n-> Complex objects are returned by value\n-> It should have a member-swap().\n"
    },
    {
        "id": 1054,
        "Question": "What is meant by vector in the container library contains?",
        "Options": [
            "a) It is a sequence container that encapsulates dynamic size arrays",
            "b) It is a sequence container that encapsulates static size arrays",
            "c) It manages the memory",
            "d) It manages the length and size"
        ],
        "Answer": " Answer: a\nExplanation: Vector in the container library contains sequence container that manipulates and encapsulates dynamic size arrays.\n"
    },
    {
        "id": 1055,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">assign</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">42</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> v.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 42",
            "b) 42 42",
            "c) 424",
            "d) 42 for 10 times"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We used the vector to print the 42 for 10 times.\nOutput:\n\n\n        \n\n$ g++ std.cpp\n$ a.out\n42 42 42 42 42 42 42 42 42 42\n\n\n"
    },
    {
        "id": 1056,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;list&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;queue&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        queue<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> q<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        q.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        q.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"st0\">'b'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        q.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"st0\">'c'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> q.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        q.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> q.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        q.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> q.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        q.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ab",
            "b) abc",
            "c) a",
            "d) error"
        ],
        "Answer": " Answer: b\nExplanation: We are using queue in this program and queue follows FIFO strategy to handle data hence the following output pattern is observed.\nOutput:\n\n\n\t\n\n$ g++ std1.cpp\n$ a.out\nabc\n\n\n"
    },
    {
        "id": 1057,
        "Question": "Pick out the wrong header file.",
        "Options": [
            "a) <algorithm>",
            "b) <containers>",
            "c) <iterators>",
            "d) <process>"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We used the list to manipulate the given value.\nOutput:\n\n\n$ g++ std3.cpp\n$ a.out\ntest: one\n two\ntest: one\n two\ntest: three\n three\n three\ntest: three\n three\n\n\n"
    },
    {
        "id": 1058,
        "Question": "What is meant by standard c++ library?",
        "Options": [
            "a) It is the collection of class definitions for standard data structures and a collection of algorithms",
            "b) It is a header file",
            "c) Collection of algorithms",
            "d) Step by step process"
        ],
        "Answer": " Answer: d\nExplanation: There is no header file named <process> in C++.\n"
    },
    {
        "id": 1059,
        "Question": "Pick out parameter for rehash method in unordered_set in c++?",
        "Options": [
            "a) count",
            "b) size",
            "c) hash",
            "d) type"
        ],
        "Answer": " Answer: a\nExplanation: It is the collection of class definitions for standard data structures. This part of the library was derived from the Standard Template Library.\n"
    },
    {
        "id": 1060,
        "Question": "What is the use of <exception> header",
        "Options": [
            "a) Contains the standard exception files",
            "b) Contains the standard library files",
            "c) It is used to arise an exception in the program",
            "d) Reduce the memory size"
        ],
        "Answer": " Answer: a\nExplanation: count is used to return the new number of buckets.\n"
    },
    {
        "id": 1061,
        "Question": "How many sets of requirements are need in designing a container?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three sets of requirements. They are container interface requirements, Allocator interface requirements and iterator requirements.\n"
    },
    {
        "id": 1062,
        "Question": "Which interface in the container is required for storage management?",
        "Options": [
            "a) Memory management",
            "b) Allocator interface",
            "c) Memory interface",
            "d) Storage interface"
        ],
        "Answer": " Answer: b\nExplanation: Allocator interface in the container is required for storage management.\n"
    },
    {
        "id": 1063,
        "Question": "Which is present in the basic interface of the allocator interface?",
        "Options": [
            "a) Set of typedefs",
            "b) A pair of allocation functions",
            "c) allocate()",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: The basic interface of an allocator class consists of a set of typedefs, a pair of allocation functions, allocate() and deallocate() and a pair of construction/destruction members, construct() and destroy().\n"
    },
    {
        "id": 1064,
        "Question": "Which container provides random access iterators?",
        "Options": [
            "a) vector",
            "b) deque",
            "c) sort",
            "d) both vector & deque"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are choosing and printing the numbers based on the certain limit and this is a composite design pattern.\nOutput:\n\n\n        \n\n$ g++ cont.cpp\n$ a.out\n0 1 2 3 4 5 6 7 8 9 10 11 \n3 4 5 \n6 7 8 \n9 10 11\n\n\n"
    },
    {
        "id": 1065,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stddef.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> myType<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> SimpleContainer</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        SimpleContainer<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> xDim, <span class=\"kw4\">size_t</span> yDim, myType <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> defaultValue<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy4\">:</span> objectData<span class=\"br0\">(</span>xDim <span class=\"sy2\">*</span> yDim, defaultValue<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        , xSize<span class=\"br0\">(</span>xDim<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        , ySize<span class=\"br0\">(</span>yDim<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myType<span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> x, <span class=\"kw4\">size_t</span> y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> objectData<span class=\"br0\">[</span>y <span class=\"sy2\">*</span> xSize <span class=\"sy2\">+</span> x<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myType <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> x, <span class=\"kw4\">size_t</span> y<span class=\"br0\">)</span> <span class=\"kw4\">const</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> objectData<span class=\"br0\">[</span>y <span class=\"sy2\">*</span> xSize <span class=\"sy2\">+</span> x<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> getSize<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> objectData.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> inputEntireVector<span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span>myType<span class=\"sy1\">&gt;</span> inputVector<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            objectData.<span class=\"me1\">swap</span><span class=\"br0\">(</span>inputVector<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">void</span> printContainer<span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> stream<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            copy<span class=\"br0\">(</span>objectData.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, objectData.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,</pre></li><li class=\"li1\"><pre class=\"de1\">            ostream_iterator<span class=\"sy1\">&lt;</span>myType<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>stream, <span class=\"st0\">\"\"</span><span class=\"coMULTI\">/*No Space*/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">private</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span>myType<span class=\"sy1\">&gt;</span> objectData<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">size_t</span>  xSize<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">size_t</span>  ySize<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> myType<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">inline</span> ostream<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> stream, SimpleContainer<span class=\"sy1\">&lt;</span>myType<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> object<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        object.<span class=\"me1\">printContainer</span><span class=\"br0\">(</span>stream<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> stream<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> sampleContainerInterfacing<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sampleContainerInterfacing<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> sampleContainerInterfacing<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> <span class=\"kw4\">const</span> ConsoleWidth  <span class=\"sy1\">=</span> <span class=\"nu0\">80</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> <span class=\"kw4\">const</span> ConsoleHeight <span class=\"sy1\">=</span> <span class=\"nu0\">25</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">size_t</span> width  <span class=\"sy1\">=</span> ConsoleWidth<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">size_t</span> height <span class=\"sy1\">=</span> ConsoleHeight<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        SimpleContainer<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mySimpleContainer<span class=\"br0\">(</span>width, height, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mySimpleContainer.<span class=\"me1\">getSize</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mySimpleContainer<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2000",
            "b) No Space",
            "c) Error",
            "d) Depends on the compiler"
        ],
        "Answer": " Answer: d\nExplanation: Vector & deque container provides random access iterators.\n"
    },
    {
        "id": 1066,
        "Question": "Which is used for manually writing lookup table?",
        "Options": [
            "a) std:map",
            "b) std:lookup",
            "c) std:find",
            "d) std:lock"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We formed a simple container and got the size of it and printing it.\nOutput:\n\n\n$ g++ cont1.cpp\n$ a.out\n200\n\n\n"
    },
    {
        "id": 1067,
        "Question": "How can the member functions in the container be accessed?",
        "Options": [
            "a) Iterator",
            "b) Indirect",
            "c) Both Iterator & Indirect",
            "d) Vector"
        ],
        "Answer": " Answer: a\nExplanation: Lookup table means storing values in a table with unique keys for each value so that can be checked in future easily. So for such lookup tables maps are used in C++.\n"
    },
    {
        "id": 1068,
        "Question": "Which of the following type does the container should define?",
        "Options": [
            "a) Iterator type",
            "b) Vector type",
            "c) Storage type",
            "d) Memory type"
        ],
        "Answer": " Answer: a\nExplanation: The container manages the storage space for its elements and provides member functions to access them, either directly or through iterators which reference objects with similar properties to pointers.\n"
    },
    {
        "id": 1069,
        "Question": "Which are the parameters for the content of the buffer?",
        "Options": [
            "a) start",
            "b) finish",
            "c) both start & finish",
            "d) pause"
        ],
        "Answer": " Answer: a\nExplanation: Every container must define an iterator type. Iterators allow algorithms to iterate over the container’s contents.\n"
    },
    {
        "id": 1070,
        "Question": "What do vectors represent?",
        "Options": [
            "a) Static arrays",
            "b) Dynamic arrays",
            "c) Stack",
            "d) Queue"
        ],
        "Answer": " Answer: b\nExplanation: Vectors are sequence containers representing arrays that can change in size.\n"
    },
    {
        "id": 1071,
        "Question": "In which type of storage location are the vector members stored?",
        "Options": [
            "a) Contiguous storage locations",
            "b) Non-contiguous storage locations",
            "c) Contiguous & Non-contiguous storage locations",
            "d) Memory storage locations"
        ],
        "Answer": " Answer: a\nExplanation: Vectors use contiguous storage locations for their elements, which means that their elements can also be accessed using offsets on regular pointers to its elements\n"
    },
    {
        "id": 1072,
        "Question": "How many vector container properties are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three container properties in c++. They are sequence, Dynamic array and allocator-aware.\n"
    },
    {
        "id": 1073,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> first<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> second <span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> third <span class=\"br0\">(</span>second.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, second.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> fourth <span class=\"br0\">(</span>third<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">16</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">77</span>, <span class=\"nu0\">29</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> fifth <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>myints<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> fifth.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> fifth.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 16",
            "b) 16 2",
            "c) 16 2 77",
            "d) 16 2 77 29"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We got the values and printing it by using the vector and we are contructing vectors.\nOutput:\n\n\n        \n\n$ g++ vect.cpp\n$ a.out\n16 2 77 29\n\n\n"
    },
    {
        "id": 1074,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>myvector.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> sum <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 500",
            "b) 600",
            "c) 700",
            "d) Error"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are forming a stack and adding the elements    and We are finding the total number of elements that are in stack.\nOutput:\n\n\n\t\n\n$ g++ vect1.cpp\n$ a.out\n600\n\n\n"
    },
    {
        "id": 1075,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> first<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        first.<span class=\"me1\">assign</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it<span class=\"sy1\">=</span>first.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1776</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span>first.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 9",
            "c) 8",
            "d) 7"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are finding the size of the vector elements.\nOutput:\n\n\n$ g++ vect2.cpp\n$ a.out\nSize of a 0\nSize of b 3\n\n\n"
    },
    {
        "id": 1076,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> myvector.<span class=\"me1\">data</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">++</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">*</span>p <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> myvector.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> myvector<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 20 0 100 0",
            "b) 10 20 0 100",
            "c) 10 20 0",
            "d) 10 20"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are finding the size of the vector elements and resizing it.\nOutput:\n\n\n$ g++ vect3.cpp\n$ a.out\n7\n\n\n"
    },
    {
        "id": 1077,
        "Question": "Pick out the correct statement about vector.",
        "Options": [
            "a) vector<int> values (5)",
            "b) vector values (5)",
            "c) vector<int> (5)",
            "d) vector<5>"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are allocating the values to the vector and unallocated values are left as zero.\nOutput:\n\n\n$ g++ vect4.cpp\n$ a.out\n10 20 0 100 0\n\n\n"
    },
    {
        "id": 1078,
        "Question": "Which is optional in the declaration of vector?",
        "Options": [
            "a) Type",
            "b) Name",
            "c) Vector",
            "d) Number_of_elements"
        ],
        "Answer": " Answer: a\nExplanation: The syntax for declaring the vector element is vector<type> variable_name (number_of_elements);\n"
    },
    {
        "id": 1079,
        "Question": "How many items are there in sequence container?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": " Answer: d\nExplanation: There are five items in sequence container. They are array, vector, list, forward_list and dequeue.\n"
    },
    {
        "id": 1080,
        "Question": "Which of the following class template are based on arrays?",
        "Options": [
            "a) vector",
            "b) list",
            "c) dequeue",
            "d) both vector & dequeue"
        ],
        "Answer": " Answer: d\nExplanation: Class template vector and class template dequeue both are based on arrays.\n"
    },
    {
        "id": 1081,
        "Question": "Which of the following will return the new element at the end of container?",
        "Options": [
            "a) front",
            "b) back",
            "c) push_back",
            "d) pop_back"
        ],
        "Answer": " Answer: b\nExplanation: Q3: back() in containers are used to access the last element of the sequence.\n"
    },
    {
        "id": 1082,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;deque&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mydeque <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">reverse_iterator</span> rit <span class=\"sy1\">=</span> mydeque.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>rit <span class=\"sy1\">=</span> mydeque.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> rit<span class=\"sy3\">!</span><span class=\"sy1\">=</span> mydeque.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>rit<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"sy2\">*</span>rit <span class=\"sy1\">=</span> <span class=\"sy2\">++</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mydeque.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mydeque.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12345",
            "b) 1234",
            "c) 54321",
            "d) 43210"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We used the operation of rbegin and rend on dequeue and produced the result.\nOutput:\n\n\n        \n\n$ g++ seq.cpp\n$ a.out\n5 4 3 2 1\n\n\n"
    },
    {
        "id": 1083,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;deque&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> a <span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> b <span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">swap</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"a contains:\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"b contains:\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> b.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) a contains: 200 200 200 200 200b contains: 100 100 100",
            "b) a contains: 100 100 100 100 100b contains: 200 200 200",
            "c) a contains: 200 200 200 200 200b contains: 200 200 200",
            "d) a contains: 200 200 200 200 200b contains: 100 200 150"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We swapped the values of both dequeues and printing the dequeues.\nOutput:\n\n\n\t\n\n$ g++ seq1.cpp\n$ a.out\na contains: 200 200 200 200 200b contains: 100 100 100\n\n\n"
    },
    {
        "id": 1084,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;deque&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mydeque<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span>deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mydeque.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mydeque.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">110</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span><span class=\"nu0\">220</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span>deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mydeque.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mydeque.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 110",
            "b) 220",
            "c) Both 110 & 220",
            "d) 330"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We cleared the old values presented in the dequeue with the new values.\nOutput:\n\n\n$ g++ seq2.cpp\n$ a.out\n110 220\n\n\n"
    },
    {
        "id": 1085,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> myvector.<span class=\"me1\">get_allocator</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">allocate</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">get_allocator</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">construct</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">get_allocator</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">destroy</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">get_allocator</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">deallocate</span><span class=\"br0\">(</span>p, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 0 1 2 3 4",
            "c) 1 2 3 4",
            "d) 5 4 3 2 1"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We allocated the values to the vector by using get allocater and then we are destroying it.\nOutput:\n\n\n$ g++ seq3.cpp\n$ a.out\n0 1 2 3 4\n\n\n"
    },
    {
        "id": 1086,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cmath&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;list&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> same_integral_part <span class=\"br0\">(</span><span class=\"kw4\">double</span> first, <span class=\"kw4\">double</span> second<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> is_near </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> first, <span class=\"kw4\">double</span> second<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw3\">fabs</span><span class=\"br0\">(</span>first <span class=\"sy2\">-</span> second<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> mydoubles<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu16\">12.15</span>,  <span class=\"nu16\">2.72</span>, <span class=\"nu16\">73.0</span>,  <span class=\"nu16\">12.77</span>,  <span class=\"nu16\">3.14</span>, <span class=\"nu16\">12.77</span>, <span class=\"nu16\">73.35</span>, <span class=\"nu16\">72.25</span>, <span class=\"nu16\">15.3</span>,  <span class=\"nu16\">72.25</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> mylist <span class=\"br0\">(</span>mydoubles, mydoubles <span class=\"sy2\">+</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mylist.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mylist.<span class=\"me1\">unique</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mylist.<span class=\"me1\">unique</span> <span class=\"br0\">(</span>same_integral_part<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mylist.<span class=\"me1\">unique</span> <span class=\"br0\">(</span>is_near<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>list<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mylist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mylist.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2.72 12.15 72.25",
            "b) 12.15 73.0 12.77",
            "c) 73.35",
            "d) 74.45"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are eliminating the values by using the unique operation in the list.\nOutput:\n\n\n$ g++ seq4.cpp\n$ a.out\n2.72 12.15 72.25\n\n\n"
    },
    {
        "id": 1087,
        "Question": "How the list containers are implemented?",
        "Options": [
            "a) Using Double linked list",
            "b) Using Single linked list",
            "c) Using Single & Double linked list",
            "d) Using linear linked list"
        ],
        "Answer": " Answer: a\nExplanation: List containers are implemented as doubly-linked lists. Doubly linked lists can store each of the elements they contain in different and unrelated storage locations.\n"
    },
    {
        "id": 1088,
        "Question": "Which of the following does not support any insertion or deletion?",
        "Options": [
            "a) Array",
            "b) Vector",
            "c) Dequeue",
            "d) List"
        ],
        "Answer": " Answer: a\nExplanation: Because array is not dynamic in nature, So they can’t be manipulated.\n"
    },
    {
        "id": 1089,
        "Question": "What do container adapter provide to interface?",
        "Options": [
            "a) Restricted interface",
            "b) More interface",
            "c) No interface",
            "d) Memory interface"
        ],
        "Answer": " Answer: a\nExplanation: A container adapter provides a restricted interface to a container.In particular, adapters do not provide iterators; they are intended to be used only through their specialized interfaces.\n"
    },
    {
        "id": 1090,
        "Question": "What does the sequence adaptor provide?",
        "Options": [
            "a) Insertion",
            "b) Deletion",
            "c) Interface to sequence container",
            "d) Insertion & Deletion"
        ],
        "Answer": " Answer: c\nExplanation: Sequence adaptor provides interface to sequence container.\n"
    },
    {
        "id": 1091,
        "Question": "Which are presented in the container adaptors?",
        "Options": [
            "a) stack",
            "b) queue",
            "c) priority_queue",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: These mentioned things are presented in container adapters.\n"
    },
    {
        "id": 1092,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;queue&gt;  </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        queue<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myqueue<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myqueue.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myqueue.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">75</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        myqueue.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span><span class=\"sy1\">=</span> myqueue.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> myqueue.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12",
            "b) 75",
            "c) 63",
            "d) 74"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We used the queue operation and performed the back operation. Because of that operation, We got the output as 63.\nOutput:\n\n\n        \n\n$ g++ sca.cpp\n$ a.out\n63\n\n\n"
    },
    {
        "id": 1093,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;queue&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        queue<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myqueue<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            myqueue.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>myqueue.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> myqueue.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myqueue.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> sum <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 51",
            "b) 52",
            "c) 54",
            "d) 55"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We used the push and pop operation of quueue to find out the total of all the number from 1 to 10.\nOutput:\n\n\n\t\n\n$ g++ sca1.cpp\n$ a.out\n55\n\n\n"
    },
    {
        "id": 1094,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;queue&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        priority_queue<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mypq<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>mypq.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> mypq.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mypq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100 40 30 25",
            "b) 100 40 30",
            "c) 100 40",
            "d) 100 30 25"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We used priority_queue and with that we are pushing and popping out the elements.\nOutput:\n\n\n$ g++ sca2.cpp\n$ a.out\n100 40 30 25\n\n\n"
    },
    {
        "id": 1095,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stack&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stack<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myints<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> myints.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> myints.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> myints.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 05",
            "b) 15",
            "c) 24",
            "d) 102"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We declared myints and not initialized in first option, So it’s value is 0 and on another, We are pushing 5 values, So it’s size is 5.\nOutput:\n\n\n$ g++ sca3.cpp\n$ a.out\n05\n\n\n"
    },
    {
        "id": 1096,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stack&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stack<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mystack<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mystack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mystack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mystack.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mystack.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 13",
            "d) 15"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We used top option and this will return the reference to the next element.\nOutput:\n\n\n$ g++ sca4.cpp\n$ a.out\n15\n\n\n"
    },
    {
        "id": 1097,
        "Question": "In which context does the stack operates?",
        "Options": [
            "a) FIFO",
            "b) LIFO",
            "c) Both FIFO & LIFO",
            "d) LIFI"
        ],
        "Answer": " Answer: b\nExplanation: A stack is a container where elements operate in a LIFO context, where elements are inserted (pushed) and removed (popped) from the end of the container.\n"
    },
    {
        "id": 1098,
        "Question": "Which operator is used in priority queue?",
        "Options": [
            "a) operator<",
            "b) operator>",
            "c) operator)",
            "d) operator!"
        ],
        "Answer": " Answer: a\nExplanation: It is used to decide the priority of two elements to be inserted in the queue.\n"
    },
    {
        "id": 1099,
        "Question": "What do associate containers implement?",
        "Options": [
            "a) Arrays",
            "b) Associative arrays",
            "c) Functional Arrays",
            "d) Static arrays"
        ],
        "Answer": " Answer: b\nExplanation: Associative containers refer to a group of class templates in the standard library of the C++ programming language that implements ordered associative arrays.\n"
    },
    {
        "id": 1100,
        "Question": "By using which of the following the elements in the associate container can be efficiently accessed?",
        "Options": [
            "a) Key",
            "b) Position",
            "c) Both Key & Position",
            "d) Value"
        ],
        "Answer": " Answer: a\nExplanation: Associative containers are designed to be especially efficient in accessing its elements by their key, as opposed to sequence containers which are more efficient in accessing elements by their position.\n"
    },
    {
        "id": 1101,
        "Question": "How many items are presented in the associate container?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": " Answer: c\nExplanation: There are 4 items presented in the associate container. They are set, multiset, map and multimap.\n"
    },
    {
        "id": 1102,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;bitset&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string mystring<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        bitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy1\">&gt;</span> mybits<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        mybits.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mystring <span class=\"sy1\">=</span> mybits.<span class=\"me1\">to_string</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, char_traits<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span>, </pre></li><li class=\"li1\"><pre class=\"de1\">        allocator<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mystring <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0000",
            "b) 0001",
            "c) 0011",
            "d) 1111"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We converted the bitset values to string and printing it.\nOutput:\n\n\n$ g++ asc.cpp\n$ a.out\n1111\n\n\n"
    },
    {
        "id": 1103,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;set&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myset<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myset.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myset.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myset.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>myset.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>myset.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myset.<span class=\"me1\">erase</span><span class=\"br0\">(</span>myset.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 30",
            "d) 10 20 30"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We swapped the values according to their position.\nOutput:\n\n\n$ g++ asc1.cpp\n$ a.out\nfirst contains: 10 33 33 33 10\nsecond contains: 10 10 10 33 33\n\n\n"
    },
    {
        "id": 1104,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;set&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mymultiset<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> mymultiset.<span class=\"me1\">insert</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">key_compare</span> mycomp <span class=\"sy1\">=</span> mymultiset.<span class=\"me1\">key_comp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> highest <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>mymultiset.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mymultiset.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">do</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>mycomp<span class=\"br0\">(</span><span class=\"sy2\">*</span>it<span class=\"sy2\">++</span>, highest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12345",
            "b) 01234",
            "c) 1234",
            "d) 0123"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We used the map template and then we used the begin operation and then we are printing the elements.\nOutput:\n\n\n$ g++ asc2.cpp\n$ a.out\na => 200\nb => 100\nc => 300\n\n\n"
    },
    {
        "id": 1105,
        "Question": "How many instances are allowed by map and set while inserting an element into container?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) Multiple"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We used the set template and then we are initializing the values and then we are erasing it.\nOutput:\n\n\n$ g++ asc3.cpp\n$ a.out\n 10 20 30\n\n\n"
    },
    {
        "id": 1106,
        "Question": "What do maps and sets support?",
        "Options": [
            "a) Single directional iterators",
            "b) Bi-directional iterators",
            "c) Single & Bi-directional directional iterators",
            "d) functional iterators"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We used the set template and then we compared the keys and printing the result.\nOutput:\n\n\n$ g++ asc4.cpp\n$ a.out\n0 1 2 3 4\n\n\n"
    },
    {
        "id": 1107,
        "Question": "What kind of library is Standard Template Library?",
        "Options": [
            "a) Polymorphic",
            "b) Generic",
            "c) Both Polymorphic & Generic",
            "d) Virtual"
        ],
        "Answer": " Answer: b\nExplanation: The STL is a generic library, meaning that its components are heavily parameterized.\n"
    },
    {
        "id": 1108,
        "Question": "To what type of object does the container can be instantiated?",
        "Options": [
            "a) int",
            "b) float",
            "c) double",
            "d) any type of object"
        ],
        "Answer": " Answer: d\nExplanation: All type of object does the container can be instantiated.\n"
    },
    {
        "id": 1109,
        "Question": "What type of class template is list?",
        "Options": [
            "a) Class-based",
            "b) Node-based",
            "c) Method-based",
            "d) size-based"
        ],
        "Answer": " Answer: b\nExplanation: It is node-based because it allows for efficient insertion anywhere in the program.\n"
    },
    {
        "id": 1110,
        "Question": "What type of access does deque and vector provide?",
        "Options": [
            "a) Linear access",
            "b) Parallel access",
            "c) Random access",
            "d) Memory access"
        ],
        "Answer": " Answer: c\nExplanation: Because they can manipulate the values on anywhere in the program, So it is providing random access.\n"
    },
    {
        "id": 1111,
        "Question": "Where does the vector add the item?",
        "Options": [
            "a) End",
            "b) Insert",
            "c) Middle",
            "d) Start"
        ],
        "Answer": " Answer: a\nExplanation: Vector allows insertion of element at the end.\n"
    },
    {
        "id": 1112,
        "Question": "Which are not full container classes in c++?",
        "Options": [
            "a) Sequence container",
            "b) Associative container",
            "c) Container adaptor",
            "d) iterative container"
        ],
        "Answer": " Answer: c\nExplanation: Container adaptors are not full container classes, but classes that provide a specific interface relying on an object of one of the container classes such as deque or list to handle the elements.\n"
    },
    {
        "id": 1113,
        "Question": "What is the lifetime of the element in container?",
        "Options": [
            "a) Whole program",
            "b) Outside the block",
            "c) Everywhere",
            "d) Only on that container"
        ],
        "Answer": " Answer: d\nExplanation: A Container “owns” its elements: the lifetime of an element stored in a container cannot exceed that of the Container itself.\n"
    },
    {
        "id": 1114,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;map&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        multimap<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mymultimap<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mymultimap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>make_pair<span class=\"br0\">(</span><span class=\"st0\">'x'</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mymultimap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>make_pair<span class=\"br0\">(</span><span class=\"st0\">'y'</span>, <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mymultimap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>make_pair<span class=\"br0\">(</span><span class=\"st0\">'y'</span>, <span class=\"nu0\">350</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mymultimap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>make_pair<span class=\"br0\">(</span><span class=\"st0\">'z'</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mymultimap.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 4",
            "d) 3"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are counting the number of elements in the map.\nOutput:\n\n\n\t\n\n$ g++ alc.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 1115,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;queue&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        priority_queue<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mypq<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mypq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> mypq.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 20",
            "c) 10",
            "d) Error"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We used the queue template and the top method is used to retain the last but before element.\nOutput:\n\n\n$ g++ alc1.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 1116,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;map&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        multimap<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mymultimap<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mymultimap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>make_pair<span class=\"br0\">(</span><span class=\"st0\">'y'</span>, <span class=\"nu0\">202</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mymultimap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>make_pair<span class=\"br0\">(</span><span class=\"st0\">'y'</span>, <span class=\"nu0\">252</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pair<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> highest <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>mymultimap.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        multimap<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mymultimap.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">do</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>it<span class=\"br0\">)</span>.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" =&gt; \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>it<span class=\"br0\">)</span>.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> mymultimap.<span class=\"me1\">value_comp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>it<span class=\"sy2\">++</span>, highest<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) y => 202",
            "b) y => 252",
            "c) y => 202 & y => 252",
            "d) y => 205"
        ],
        "Answer": " Answer: a\nExplanation: In this program, the method rbegin is used to return the first element in the map.\nOutput:\n\n\n$ g++ alc2.cpp\n$ a.out\ny = &gt; 202\n\n\n"
    },
    {
        "id": 1117,
        "Question": "What do all STL containers define?",
        "Options": [
            "a) Iterator types",
            "b) Begin methods",
            "c) End methods",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: All the STL containers define the iterator types for that container, e.g., iterator and const_iterator, e.g., vector::iterator and the begin/end methods for that container, e.g., begin() and end().\n"
    },
    {
        "id": 1118,
        "Question": "What do we return if we use simple array on a internal container?",
        "Options": [
            "a) Methods",
            "b) Pointers",
            "c) Objects",
            "d) Values"
        ],
        "Answer": " Answer: b\nExplanation: Pointers are legal iterators, so if your internal container is a simple C array, then all you need to do is return the pointers.\n"
    },
    {
        "id": 1119,
        "Question": "What is mandatory for designing a new container?",
        "Options": [
            "a) Classes",
            "b) Iterators",
            "c) Container",
            "d) Variables"
        ],
        "Answer": " Answer: b\nExplanation: Iterators are used to increase the generality of an algorithm. Otherwise, we need to define the algorithm for each types.\n"
    },
    {
        "id": 1120,
        "Question": "What are the design requirements for building a container from the sratch?",
        "Options": [
            "a) Container interface requirements",
            "b) Allocator interface requirements",
            "c) Iterator requirements",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: These are the design specific requirements for building a container from the scratch.\n"
    },
    {
        "id": 1121,
        "Question": "How many iterators are needed for the defining a new container?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three main iterators needed for designing a container. They are const iterator, Reverse iterator and Iterator traits.\n"
    },
    {
        "id": 1122,
        "Question": "What is the use of the allocator interface in the user-defined container?",
        "Options": [
            "a) Storage management",
            "b) Memory management",
            "c) Storage & Memory management",
            "d) Iterator management"
        ],
        "Answer": " Answer: a\nExplanation: Storage management is the use of the allocator interface in the user-defined container.\n"
    },
    {
        "id": 1123,
        "Question": "How many types of container classes are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) As many as possible"
        ],
        "Answer": " Answer: b\nExplanation: There are two type of container classes in c++. They are value containers and reference containers.\n"
    },
    {
        "id": 1124,
        "Question": "What is the name of the container which contains group of multiple objects?",
        "Options": [
            "a) Heterogeneous container",
            "b) Homogeneous container",
            "c) Both Homogeneous & Heterogeneous container",
            "d) Sequence container"
        ],
        "Answer": " Answer: a\nExplanation: Heterogeneous container is the name of the container which contains group of multiple objects.\n"
    },
    {
        "id": 1125,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string s <span class=\"sy1\">=</span> <span class=\"st0\">\"spaces in text\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        s.<span class=\"me1\">erase</span><span class=\"br0\">(</span><span class=\"kw3\">remove</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span> <span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) spaces",
            "b) spaces in",
            "c) spaces in text",
            "d) spacesintext"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We formed a algorithm to remove spaces in the string.\nOutput:\n\n\n$ g++ dan.cpp\n$ a.out\nspacesintext\n\n\n"
    },
    {
        "id": 1126,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> square<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> i <span class=\"sy2\">*</span> i<span class=\"sy4\">;</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> V, V2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        V.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        V.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        V.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        transform<span class=\"br0\">(</span>V.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, V.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"br0\">(</span>V2<span class=\"br0\">)</span>, square<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        copy<span class=\"br0\">(</span>V2.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, V2.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, ostream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 0 1 4"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We formed an algorithm to find the square of the given number.\nOutput:\n\n\n$ g++ dan1.cpp\n$ a.out\n0 1 4\n\n\n"
    },
    {
        "id": 1127,
        "Question": "What is sequence container arrays?",
        "Options": [
            "a) C-like arrays",
            "b) Template class sequence container, alternative for C-like arrays",
            "c) Collection of data of the same type",
            "d) Collection of objects"
        ],
        "Answer": "Answer: b\nExplanation: Sequence Containers arrays are an alternative for C-like arrays. It is a static continuous array that uses template classes with extended features for array implementation."
    },
    {
        "id": 1128,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Sequence Container arrays know (somehow stores within) its size whereas C-like arrays do not",
            "b) Sequence Container arrays have no advantage over C-like arrays",
            "c) Sequence Container arrays are same as C-like arrays",
            "d) Sequence Container arrays are also present in C"
        ],
        "Answer": "Answer: a\nExplanation: Sequence Containers Arrays stores its size within itself so need to pass extra size parameter when passing this array as an argument."
    },
    {
        "id": 1129,
        "Question": "Which of the following is/are advantage(s) of Sequence Container arrays over C-like arrays?",
        "Options": [
            "a) Sequence Container arrays store its size within itself whereas C-like arrays do not",
            "b) Sequence Container arrays are more efficient",
            "c) Sequence Container arrays have no array decay problem whereas C-like arrays do have",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Sequence Container arrays(a.k.a Array classes) somehow stores its size and it can be implemented efficiently. Also, Array classes do not have Array decay problem."
    },
    {
        "id": 1130,
        "Question": "Which of the follwoing function(s) of Array classes are similar to [] operator?",
        "Options": [
            "a) at()",
            "b) get()",
            "c) both at() and get()",
            "d) front()"
        ],
        "Answer": "Answer: c\nExplanation: Both at() and get() function are used to access the elements stored at i’th position of the array."
    },
    {
        "id": 1131,
        "Question": "How many different ways are there to access an element of array classes at the ith position?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three ways of accessing Array classes as mentioned below:\ni. using [] operator(same as C-like arrays)\nii. using at() function available in array classes.\niii. using get() function not a member of the array class."
    },
    {
        "id": 1132,
        "Question": "What header file is included to use array classes?",
        "Options": [
            "a) <array>",
            "b) <Array>",
            "c) <algorithm>",
            "d) <ARRAY>"
        ],
        "Answer": "Answer: a\nExplanation: <array> header file is provided by the C++ to use array classes."
    },
    {
        "id": 1133,
        "Question": "What is the correct syntax of declaring an array class?",
        "Options": [
            "a) array<type> arr;",
            "b) array<type,size> arr;",
            "c) Array<type> arr;",
            "d) Array<type,size> arr;"
        ],
        "Answer": "Answer: b\nExplanation: The declaration of array class starts with a keyword array followed by <> specifying the type and size of array and then the name of the identifier. Example: array<int, 10> arr; arr is an array class of type in with size = 10."
    },
    {
        "id": 1134,
        "Question": "What is the syntax of printing the first element of an array Arr using get() function?",
        "Options": [
            "a) Arr.get(0)",
            "b) get<0>(Arr)",
            "c) Arr.get[0] ",
            "d) get<0>[Arr]"
        ],
        "Answer": "Answer: b\nExplanation: In this program we are trying to print the array first using [] operator then using the at() function of the array class.\nOutput:\n$ ./a.out \nPrinting Using [] operator: 1 2 3 4 5 \nPrinting Using at() function: 1 2 3 4 5\n"
    },
    {
        "id": 1135,
        "Question": "Which header file is required to use get() function?",
        "Options": [
            "a) <array>",
            "b) <tuple>",
            "c) <Array>",
            "d) <access>"
        ],
        "Answer": "Answer: b\nExplanation: To access the first element of an array class Arr using get() function, we use the following get<index>(Arr) where index is an integer constant number, not an identifier."
    },
    {
        "id": 1136,
        "Question": "What is the difference between get() and at()?",
        "Options": [
            "a) at() is available under <array> header file whereas get() is available under <tuple> header file",
            "b) at() is a member function of array class whereas get() is not",
            "c) get() takes array class as a parameter whereas at() takes a constant integer(i.e. index) as a parameter",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: <tuple> header file is required to use the get() function for accessing an element."
    },
    {
        "id": 1137,
        "Question": "Which function is used to access the first element of an array class?",
        "Options": [
            "a) front()",
            "b) start()",
            "c) back()",
            "d) first()"
        ],
        "Answer": "Answer: d\nExplanation: get() and at() differ in various ways. get() is not a part of array class, get is available under <tuple> header and get() takes array class also as a parameter to access the element."
    },
    {
        "id": 1138,
        "Question": "Which function is used to access the last element of an array class?",
        "Options": [
            "a) end()",
            "b) start()",
            "c) back()",
            "d) last()"
        ],
        "Answer": "Answer: a\nExplanation: Array class provides front() function to access the first element of the array class."
    },
    {
        "id": 1139,
        "Question": "Which of the following function(s) is/are used to get the size of the array class?",
        "Options": [
            "a) size()",
            "b) max_size()",
            "c) both size() and max_size()",
            "d) get_size()"
        ],
        "Answer": "Answer: c\nExplanation: Array class provides back() function to access the last element of the array class."
    },
    {
        "id": 1140,
        "Question": "What is the use of swap() function in array class?",
        "Options": [
            "a) Swaps two elements of an array given elements",
            "b) Swaps two arrays",
            "c) Swaps two elements given indices of elements",
            "d) Swaps same elements of the array if required"
        ],
        "Answer": "Answer: b\nExplanation: swap() function is used to swap elements of two array classes provided the size of both arrays classes are same."
    },
    {
        "id": 1141,
        "Question": "What is the syntax of swap()?",
        "Options": [
            "a) swap(arr1, arr2);",
            "b) arr1.swap(arr2);",
            "c) swap<int, int>(arr1, arr2);",
            "d) swap[arr1, arr2];"
        ],
        "Answer": "Answer: b\nExplanation: The correct syntax of swap function is arr1.swap(arr2) i.e. one array calling swap() function with second array as parameter to swap function. Also swap is a function therefore [] operator cannot be used to call swap function. "
    },
    {
        "id": 1142,
        "Question": "What is the use of empty() function in array classes?",
        "Options": [
            "a) To check whether the size of an array is zero or not",
            "b) To check whether an array is empty or not",
            "c) To check how many elements are there in the array",
            "d) To check whether an array contains negative elements or not"
        ],
        "Answer": "Answer: a\nExplanation: arr1 has elements from 1-5 and arr2 has elements 6-10 initially. After swapping arr1 has elements from 6-10 and arr2 has elements from 1-5. Therefore output is 6 7 8 9 10 then 1 2 3 4 5.\nOutput: \n$ ./a.out \n6 7 8 9 10 \n1 2 3 4 5\n"
    },
    {
        "id": 1143,
        "Question": "What is the use of fill() function in array class?",
        "Options": [
            "a) To fill an array with a given single value",
            "b) To delete all the elements that are equal to the given value",
            "c) To replace all the elements of the array which are equal to the given value",
            "d) To check whether given element fills the array or not"
        ],
        "Answer": "Answer: c\nExplanation: As the size of both the array classes is not equal therefore the swap function gives an error stating that no matching function available."
    },
    {
        "id": 1144,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;array&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tarray<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span> arr1<span class=\"sy4\">;</span>\n\tarr1.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>arr1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 22222",
            "b) 20000",
            "c) 00002",
            "d) 20002"
        ],
        "Answer": "Answer: a\nExplanation: empty() function is used to check whether the size of an array class is zero or not. It is not used to check whether an array is empty or not. The function true only if size/max_size of an array is zero otherwise it returns false."
    },
    {
        "id": 1145,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;array&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tarray<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span> arr1<span class=\"sy4\">;</span>\n\tarr1.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>get<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>arr1<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: fill() function is used to fill an array class with the given single value."
    },
    {
        "id": 1146,
        "Question": "10. What happens when both of the following C++ programs are compiled and executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">=====</span> Program <span class=\"nu0\">1</span> <span class=\"sy1\">=====</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;array&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tarray<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span> arr1<span class=\"sy4\">;</span>\n\tarr1.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>get<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>arr1<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">=====================</span>\n<span class=\"sy1\">=====</span> Program <span class=\"nu0\">2</span> <span class=\"sy1\">=====</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;array&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tarray<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"nu0\">5</span><span class=\"sy1\">&gt;</span> arr1<span class=\"sy4\">;</span>\n\tarr1.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>arr1.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">=====================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Program 1 gives compile-time error and Program 2 gives run-time error",
            "b) Program 1 gives run-time error and Program 2 gives compile-time error",
            "c) Both programs results into compile-time error",
            "d) Both programs results into run-time error"
        ],
        "Answer": "Answer: a\nExplanation: fill() function sets the value of each element equal to the value passed as parameter to the function."
    },
    {
        "id": 1147,
        "Question": "What are the vectors?",
        "Options": [
            "a) Arrays with dynamic size",
            "b) Arrays with different types of elements",
            "c) Same as array classes",
            "d) Arrays with static size but use template classes"
        ],
        "Answer": "Answer: a\nExplanation: Vectors are just like arrays with the ability to resize itself whenever an element is added to or deleted from it."
    },
    {
        "id": 1148,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Vectors have dynamic size whereas Array classes have a static size",
            "b) Both vectors and Array classes have a dynamic size",
            "c) Both vectors and Array classes have a static size",
            "d) Vectors have static size whereas Array classes have a dynamic size"
        ],
        "Answer": "Answer: a\nExplanation: Vectors are implemented in a way so that it can handle any number of elements at a time means the size of a vector can vary, whereas Array classes have fixed size."
    },
    {
        "id": 1149,
        "Question": "Pick the incorrect statement.",
        "Options": [
            "a) Vectors have a dynamic size",
            "b) Vectors are placed in contiguous storage",
            "c) Insertion in vectors always takes constant time",
            "d) Vectors insert the element at the end"
        ],
        "Answer": "Answer: c\nExplanation: Insertion in vectors are not always constant. When we are inserting an element at the end of the vector then if a vector is full then it needs to size itself which takes time to resize and time to insert element else just time for inserting that element at the end. Hence the insertion time is not constant always. Vectors have a dynamic size. They are placed in contiguous memory for easy access.  "
    },
    {
        "id": 1150,
        "Question": "Which of the following header file is needed to use vectors in your program?",
        "Options": [
            "a) <array>",
            "b) <vector>",
            "c) <containers>",
            "d) <stdio>"
        ],
        "Answer": "Answer: b\nExplanation: Header file <vector> contains all the implementation of vector methods, hence we need to include this header file."
    },
    {
        "id": 1151,
        "Question": "Which of the following(s) can be used to access the first element of a vector v?",
        "Options": [
            "a) v.begin()",
            "b) v.cbegin()",
            "c) v[0] ",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To access the first element of a vector we can use the following things:\ni) v.begin()\nii) v.cbegin()\niii) v[0] \niv) v.at(0)"
    },
    {
        "id": 1152,
        "Question": "Which of the following(s) can be used to access the last element of a vector v?",
        "Options": [
            "a) v.end()",
            "b) v.cend()",
            "c) both v.end() and v.cend()",
            "d) vectors do not have a function to access the last element"
        ],
        "Answer": "Answer: d\nExplanation: There are no function to access the last element of the vector. The end() and cend() returns the iterator to an element which is kept at the last of the vector to keep the knowledge about the end of a vector. In order to access the last element, you can first find the size and then can use v[size-1] or v.at(size – 1) to access the last element."
    },
    {
        "id": 1153,
        "Question": "What is the difference between begin() and cbegin() in vectors?",
        "Options": [
            "a) both are same",
            "b) begin() returns iterator to first element and cbegin() returns iterator to last element",
            "c) begin() returns an iterator to first element whereas cbegin() returns constant iterator to first element",
            "d) begin() returns returns first element cbegin() returns void"
        ],
        "Answer": "Answer: c\nExplanation: Both begin() and cbegin() are used to access the first element of the vector. The function begin() returns an iterator to first element whereas cbegin() returns a constant iterator to first element."
    },
    {
        "id": 1154,
        "Question": "What is the difference between begin() and rbegin()?",
        "Options": [
            "a) both are the same",
            "b) begin() returns an iterator to the first element and rbegin() returns an iterator to an element kept at the end of the vector",
            "c) begin() returns an iterator to first element whereas rbegin() returns constant iterator to first element",
            "d) begin() returns returns first element rbegin() returns void"
        ],
        "Answer": "Answer: b\nExplanation: begin() is used to return the iterator to the first element of the vector whereas rbegin() is used to return the an element stored at in the last of a vector."
    },
    {
        "id": 1155,
        "Question": "Which is the following is syntactically correct for vector<int> v?",
        "Options": [
            "a) vector <int> :: const_iterator itr = v.rbegin();",
            "b) vector <int> :: reverse_iterator itr = v.begin();",
            "c) vector <int> :: iterator itr = v.begin();",
            "d) vector <int> :: iterator itr = v.cbegin();"
        ],
        "Answer": "Answer: c\nExplanation: v.rbegin() returns itertor of reverse iterator therefore cannot be stored in const_iterator(type mismatch). Similarly v.begin() returns normal iterator therefore cannot be stored in reverse_iterator and v.cbegin() returns the const_iterator therefore cannot be stored in normal iterator. "
    },
    {
        "id": 1156,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n&nbsp;\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n&nbsp;\n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">const_iterator</span> i<span class=\"sy4\">;</span>\n   \t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> \n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n&nbsp;\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 1 3 5",
            "c) 1 4 5",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: A normal iterator can be stored in const_iterator therefore program does not gives any error hence will be executed perfectly.\nOutput:\n$ ./a.out \n1 2 3 4 5\n"
    },
    {
        "id": 1157,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n&nbsp;\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n&nbsp;\n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> i<span class=\"sy4\">;</span>\n    i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"sy2\">*</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span>\n   \t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> \n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n&nbsp;\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 3 2 3 4 5",
            "c) 5 4 3 2 1",
            "d) 3 3 3 3 3"
        ],
        "Answer": "Answer: b\nExplanation: We have changed the value of 0th element of vector from 1 to 3 therefore the output is as follows.\nOutput:\n$ ./a.out \n3 2 3 4 5\n"
    },
    {
        "id": 1158,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n&nbsp;\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n&nbsp;\n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">const_iterator</span> i<span class=\"sy4\">;</span>\n    i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"sy2\">*</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span>\n   \t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> \n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n&nbsp;\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 3 2 3 4 5",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: As i is a constant iterator therefore value stored in it is read-only therefore cannot be updated. Therefore the program gives an error."
    },
    {
        "id": 1159,
        "Question": "Which of the following function is used to get the actual number of elements stored in vector?",
        "Options": [
            "a) v.size()",
            "b) v.capacity()",
            "c) v.max_size()",
            "d) v.no_of_elements()"
        ],
        "Answer": "Answer: a\nExplanation: To get the number of elements stored in the vector v we use the function v.size(). It returns how many elements are currently in the vector excluding the void places."
    },
    {
        "id": 1160,
        "Question": "Which function is used to get the total capacity of a vector?",
        "Options": [
            "a) v.size()",
            "b) v.capacity()",
            "c) v.max_size()",
            "d) v.no_of_elements()"
        ],
        "Answer": "Answer: b\nExplanation: capacity() function is used to get the total number of elements that can be stored at present in the vector."
    },
    {
        "id": 1161,
        "Question": "How the size of a vector increases once it is full?",
        "Options": [
            "a) Vector increases its capacity one by one",
            "b) Vector doubles its capacity after it is full",
            "c) Vector increases its capacity by half of its previous size",
            "d) Vector increases its capacity by a constant factor"
        ],
        "Answer": "Answer: b\nExplanation: Once the vector is full i.e. number of elements in the vector becomes equal to the capacity of the vector then vector doubles its capacity i.e. if previous capacity was 2 then new capacity becomes 2 * 2 = 4 or 2 + 2 = 4."
    },
    {
        "id": 1162,
        "Question": "Which function is used to check whether the vector is empty or not?",
        "Options": [
            "a) empty()",
            "b) isempty()",
            "c) haveElements()",
            "d) none()"
        ],
        "Answer": "Answer: b\nExplanation: The size() returns the number of elements in the vector and capacity() returns the total number of elements that this vector can hold. Hence as the number of elements in vector is 5 and size is increased by 2 times. Therefore output is 5 and 8\nOutput:\n$ ./a.out \n5\n8\n"
    },
    {
        "id": 1163,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n&nbsp;\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n    v.<span class=\"me1\">resize</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span> \n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 1 2 3 4",
            "c) 2 3 4 5",
            "d) error"
        ],
        "Answer": "Answer: a\nExplanation: empty() function is provided by the vector container to check whether it is empty or not."
    },
    {
        "id": 1164,
        "Question": "7. What will be the capacity of the vector after 10 is pushed into the vector in the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> \n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v.<span class=\"me1\">capacity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n    v.<span class=\"me1\">shrink_to_fit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v.<span class=\"me1\">capacity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n    v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 8",
            "b) 10",
            "c) 5",
            "d) 6"
        ],
        "Answer": "Answer: b\nExplanation: resize() function is used to resize a vector container. It updates the size of vector and removes all the elements after n if new size(n) is less than previous size. Hence in the program initially the vector has 5 elements but after resizing the vector to 4 it has only 4 elements as 5 is removed.\nOutput:\n\n\t\n$ ./a.out \n1 2 3 4\n"
    },
    {
        "id": 1165,
        "Question": "8. What will be the capacity of vector at the end in the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    v.<span class=\"me1\">reserve</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v.<span class=\"me1\">capacity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 8",
            "c) 50",
            "d) 60"
        ],
        "Answer": "Answer: a\nExplanation: Intitally the size of the vector is 5 as it contains only 5 elements. After resizing the elements 5 is terminated so only 4 remains therfore the size becomes 4. Hence out is as follow.\nOutput: \n$ ./a.out \n5\n4\n"
    },
    {
        "id": 1166,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw4\">int</span> <span class=\"sy2\">*</span>pos <span class=\"sy1\">=</span> v.<span class=\"me1\">data</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"sy2\">*</span><span class=\"br0\">(</span>pos <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 1",
            "c) 4",
            "d) 3"
        ],
        "Answer": "Answer: b\nExplanation: The capacity denotes how many elements a avector can hold. On resizing a vector the capacity of a vector is not changed hence the capacity before and after is same. Therefore the output is as follows.\nOutput: \n$ ./a.out \n8\n8\n"
    },
    {
        "id": 1167,
        "Question": "Which of the following function is used to insert an element at the end of a vector?",
        "Options": [
            "a) push_back()",
            "b) pop_back()",
            "c) front()",
            "d) end()"
        ],
        "Answer": "Answer: b\nExplanation: Initially we have 5 elements in the vector therefore the capacity of the vector is 8(one can observe that as capacity doubles after vector is full). Now the function shrink_to_fit() makes the capacity of vector equal to its size hence removing the extra space occupied by the vector. Therefore as only 5 elements were there in the vectore therefore the capacity becomes 8.\nOutput:\n$ ./a.out \n8\n5\n"
    },
    {
        "id": 1168,
        "Question": "Which function is used to swap two vectors?",
        "Options": [
            "a) swap()",
            "b) change()",
            "c) merge()",
            "d) exchange()"
        ],
        "Answer": "Answer: b\nExplanation: After shrinking the capacity of vector the capacity of vector becomes 5. Now when a new element i.e. 10 is inserted into the vector then the capacity of the vector will double i.e. it will become 10. hence the final capacity will be 10."
    },
    {
        "id": 1169,
        "Question": "14. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v1<span class=\"sy4\">;</span>\n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> v2<span class=\"sy4\">;</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v1.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v2.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    v1.<span class=\"me1\">swap</span><span class=\"br0\">(</span>v2<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>v1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    \t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>v2.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    \t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5 6 7 8 9 10",
            "b) 6 7 8 9 10 1 2 3 4 5",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: In this program reserve(n) function is used which is used to reserve the space for n elements in vector. Hence when the reserve(50) function is called for vector v then the we are trying to reserve memory for 50 elements, hence the capacity of vector v becomes 50."
    },
    {
        "id": 1170,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v1<span class=\"sy4\">;</span>\n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v2<span class=\"sy4\">;</span> \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v1.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> \n        v2.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    v1.<span class=\"me1\">swap</span><span class=\"br0\">(</span>v2<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>v1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    \t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>v2.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    \t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5 6 7 8 9 10",
            "b) 6 7 8 9 10 1 2 3 4 5",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: data() function in vector returns the direct pointer to the memory array which the vector has used to store its elements. Hence a pointer to vector is returned. So when we are accessing *(pos + 3) we are trying to do v[3] which is 4. Hence the output is as follows.\nOutput: \n$ ./a.out \n4\n"
    },
    {
        "id": 1171,
        "Question": "How many list sequence containers are provided by STL?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two list sequence containers are provided by STL namely forward_list and list."
    },
    {
        "id": 1172,
        "Question": "Which type of list a Forward_list sequence container implements?",
        "Options": [
            "a) Singly Linked List",
            "b) Doubly Linked List",
            "c) Both type of list",
            "d) A simple sequence of array"
        ],
        "Answer": "Answer: a\nExplanation: Forward_list sequence container implements a Singly Linked List."
    },
    {
        "id": 1173,
        "Question": "Which type of list a List sequence container implements?",
        "Options": [
            "a) Singly Linked List",
            "b) Doubly Linked List",
            "c) Both type of list",
            "d) A simple sequence of array"
        ],
        "Answer": "Answer: b\nExplanation: List sequence container implements Doubly Linked List."
    },
    {
        "id": 1174,
        "Question": "Which of the following header file is required for forwawrd_list?",
        "Options": [
            "a) <forward_list>",
            "b) <list>",
            "c) <f_list>",
            "d) <Forward_List>"
        ],
        "Answer": "Answer: a\nExplanation: One needs to implement <forward_list> header file to use forward_list in a program."
    },
    {
        "id": 1175,
        "Question": "Which of the following(s) is/are the correct way of assigning values to a forward_list f?",
        "Options": [
            "a) f.assign({1,2,3,4,5})",
            "b) f.assign(10,5)",
            "c) both f.assign({1,2,3,4,5}) and f.assign(10,5)",
            "d) f.assign(1,1,1,1)"
        ],
        "Answer": "Answer: c\nExplanation: Both f.assign({1,2,3,4,5}) and f.assign(10,5) are correct way of assigning values to a forward_list. The first assignment initializes the list with the elements 1,2,3,4 and 5 whereas the second assignment initializes the list 10 elements with value 5 i.e. 5 10 times."
    },
    {
        "id": 1176,
        "Question": "How the list differs from vectors?",
        "Options": [
            "a) Vector is contiguous whereas List is non-contiguous",
            "b) Insertion in the list takes constant time whereas it is not constant in vectors",
            "c) There is no capacity defined for list",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: List is non-contiguous that means elements of a list are not the contiguous manner in memory. Insertion in a list is constant for because we are not increasing the size of the list anywhere which was the case of a vector. Vectors have a capacity defined whereas there is no such capacity defined for Lists."
    },
    {
        "id": 1177,
        "Question": "What is the syntax of declaraing a forward_list?",
        "Options": [
            "a) forward_list f;",
            "b) forward_list<type> f;",
            "c) forward_list f<type>;",
            "d) forward_list<type,size> f;"
        ],
        "Answer": "Answer: b\nExplanation: forward_list<type> f; is the correct syntax of declaring a forward-list."
    },
    {
        "id": 1178,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n<span class=\"co2\">#include &lt;forward_list&gt;  </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    forward_list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> fl1 <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    forward_list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> fl2 <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    fl1.<span class=\"me1\">splice_after</span><span class=\"br0\">(</span>fl1.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, fl2<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span>c <span class=\"sy4\">:</span> fl1<span class=\"br0\">)</span>  \n        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 1 2 3 4 5 6 7 8 9 10",
            "c) 1 7 8 9 10",
            "d) 2 3 4 5 6"
        ],
        "Answer": "Answer: a\nExplanation: The program is syntactically correct therefore no error and also memory are handled carefully therefore no segmentaion fault. Hence the program runs perfectly. The insert_after() function inserts the elements provided at the position mention in the first argument."
    },
    {
        "id": 1179,
        "Question": "What is a pair?",
        "Options": [
            "a) Container consisting of two data elements of the same type",
            "b) Container consisting of two data elements of different type",
            "c) Container consisting of one header and two data elements of the same type",
            "d) Container consisting of two data elements can have the same or different type"
        ],
        "Answer": "Answer: d\nExplanation: Pair is a container defined in STL which consist of two elements which can be of same or different types."
    },
    {
        "id": 1180,
        "Question": "Which header file is required to use pair container in your program?",
        "Options": [
            "a) <algorihtm>",
            "b) <utility>",
            "c) <pair>",
            "d) <utitityPair>"
        ],
        "Answer": "Answer: b\nExplanation: Pair container is defined under the header file <utility> therefore one should include  header before using pair container."
    },
    {
        "id": 1181,
        "Question": "Which of the following is the correct syntax of using pair p?",
        "Options": [
            "a) pair <type,type> p;",
            "b) pair p <type,type>;",
            "c) pair [type,type] p;",
            "d) pair p [type,type];"
        ],
        "Answer": "Answer: a\nExplanation: A pair is declared using the this syntax pair <type, type> identifier."
    },
    {
        "id": 1182,
        "Question": "Which of the following operations can be performed on a pair?",
        "Options": [
            "a) Assignment of pairs",
            "b) Copying of one pair to another",
            "c) Comparison of two pairs",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A pair can be assigned, copied or can be compared. Hence all the above operations can e performed on pairs."
    },
    {
        "id": 1183,
        "Question": "Which operator is used to access the first or second element of a pair?",
        "Options": [
            "a) ->",
            "b) .",
            "c) *",
            "d) []"
        ],
        "Answer": "Answer: b\nExplanation: .(dot) operator is used to access the first or second element of a pair. For example, if p = (1,2) is a pair then 2 can be accessed by using p.first and 2 can be accessed using p.second."
    },
    {
        "id": 1184,
        "Question": "Which of the following is the correct syntax of accessing the first element of a pair p?",
        "Options": [
            "a) p.first",
            "b) p.second",
            "c) p[0] ",
            "d) p[1]"
        ],
        "Answer": "Answer: a\nExplanation: To access the first element of a pair we use first. for example, if p = (1,2) is a pair then we will use p.first to access the first element of the pair."
    },
    {
        "id": 1185,
        "Question": "Which of the following is the correct syntax of accessing the second element of a pair p?",
        "Options": [
            "a) p.first",
            "b) p.second",
            "c) p[0] ",
            "d) p[1]"
        ],
        "Answer": "Answer: b\nExplanation: To access the second element of a pair we use second. for example, if p = (1,2) is a pair then we will use p.second to access the second element of the pair."
    },
    {
        "id": 1186,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"co2\">#include &lt;utility&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  pair <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> p<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Pair(first,second) = (\"</span><span class=\"sy1\">&lt;&lt;</span>p.<span class=\"me1\">first</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\",\"</span><span class=\"sy1\">&lt;&lt;</span>p.<span class=\"me1\">second</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\")<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Pair(first,second) = (1,2)",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Assignment is not correct"
        ],
        "Answer": "Answer: a\nExplanation: This is a way of assigning a pair therefore the program is correct hence the program runs perfectly and outputs the value as follows.\nOutput:\n$ ./a.out \nPair(first,second) = (1,2)\n"
    },
    {
        "id": 1187,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"co2\">#include &lt;utility&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  pair p<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Pair(first,second) = (\"</span><span class=\"sy1\">&lt;&lt;</span>p.<span class=\"me1\">first</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\",\"</span><span class=\"sy1\">&lt;&lt;</span>p.<span class=\"me1\">second</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\")<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Pair(first,second) = (1,2)",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Assignment is not correct"
        ],
        "Answer": "Answer: b\nExplanation: A pair always expects tempalte arguments i.e. types of first and second during declaration of pair. In this program as we have not mentioned the template arguments i.e. types of first and second therefore the program gives and error."
    },
    {
        "id": 1188,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"co2\">#include &lt;utility&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  pair <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span>p<span class=\"sy4\">;</span>\n  p <span class=\"sy1\">=</span> make_pair<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Pair(first,second) = (\"</span><span class=\"sy1\">&lt;&lt;</span>p.<span class=\"me1\">first</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\",\"</span><span class=\"sy1\">&lt;&lt;</span>p.<span class=\"me1\">second</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\")<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Pair(first,second) = (1,2)",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Assignment is not correct"
        ],
        "Answer": "Answer: a\nExplanation: make_pair() is a function provied to define the values for a pair. Hence the program is correct therefore the program runs successfully.\nOutput:\n$ ./a.out \nPair(first,second) = (1,2)\n"
    },
    {
        "id": 1189,
        "Question": "Which of the following is correct way of copying the values of pair p1 into other pair p2?",
        "Options": [
            "a) pair <type,type> p2 = p1;",
            "b) pair <type,type> p2(p1);",
            "c) Both pair <type,type> p2 = p1; and pair <type,type> p2(p1);",
            "d) Pair <int,int> p2.copy(p1);"
        ],
        "Answer": "Answer: c\nExplanation: Both pair <type,type> p2 = p1; and pair <type,type> p2(p1); can be used to copy the data of one pair into other pair."
    },
    {
        "id": 1190,
        "Question": "What happens if a pair is not initialized?",
        "Options": [
            "a) Both first and second part is initialized to zero or null",
            "b) Both first and second part is initialized a garbage value",
            "c) First is initialized to zero or null and second is initialized a garbage value",
            "d) Second is initialized to zero or null and first is initialized a garbage value"
        ],
        "Answer": "Answer: a\nExplanation: If a pair is not initialized then by default both parts of the pair is initialized to zero. "
    },
    {
        "id": 1191,
        "Question": "Which of the following Operator cannot be used with pairs?",
        "Options": [
            "a) +",
            "b) ==",
            "c) =",
            "d) !="
        ],
        "Answer": "Answer: a\nExplanation: We can use only assignment and logical operators with pairs."
    },
    {
        "id": 1192,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"co2\">#include &lt;utility&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  pair <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> p1<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  pair <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> p2<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">if</span><span class=\"br0\">(</span>p1 <span class=\"sy1\">&lt;=</span> p2<span class=\"br0\">)</span>\n  \t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"P1 is small\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">else</span>\n  \t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"P2 is small\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) P1 is small",
            "b) P2 is small",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: Inititally the pair p1 = (1,2) therefore Pair(first,second) = (1,2) is printed and when we have used swap function to swap p1 with p2 the p1 and p2 is swapped therefore next time Pair(first,second) = (3,4) is printed.\nOutput:\n$ ./a.out \nPair(first,second) = (1,2)\nPair(first,second) = (3,4)\n"
    },
    {
        "id": 1193,
        "Question": "What is any in C++?",
        "Options": [
            "a) STL container used to store a single value of any type",
            "b) Exception class in C++",
            "c) Fundamental type provided by C++",
            "d) Template data type"
        ],
        "Answer": "Answer: a\nExplanation: Any is an STL container provided by C++ to store value or objects of any type."
    },
    {
        "id": 1194,
        "Question": "In how many different ways any-container can be constructed?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three basic ways of constructing any variable. They are done using copy initialization, using the constructor or using an assignment operator."
    },
    {
        "id": 1195,
        "Question": "Which of the following syntax is used to convert any variable to its original type?",
        "Options": [
            "a) any_cast<variable_name>();",
            "b) any_cast(variable_name);",
            "c) <original_type>(variable_name);",
            "d) any_cast<original_type>(variable_name);"
        ],
        "Answer": "Answer: a\nExplanation: To initialize an any variable using copy initialization we use the following syntax:\nany variable_name = value;\n"
    },
    {
        "id": 1196,
        "Question": "Which header file is required to use any container?",
        "Options": [
            "a) <any>",
            "b) <stl>",
            "c) <container-any>",
            "d) <containers>"
        ],
        "Answer": "Answer: b\nExplanation: To initialize an any variable using parameterized constructor we use the following syntax:\nany variable_name(value);\n"
    },
    {
        "id": 1197,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;any&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\tany var <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>var<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: b\nExplanation: To initialize an any variable using assignment operator we use the following syntax:\nany variable_name;\nvariable_name = value;\n"
    },
    {
        "id": 1198,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;any&gt;</span>\n<span class=\"co2\">#include&lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring s <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\tany var<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>any_cast<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>var<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Run-time error",
            "b) Compile-time error",
            "c) Hello World",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: d\nExplanation: The syntax used to convert the any variable to its original type is as follows:\nany_cast(variable_name);\n"
    },
    {
        "id": 1199,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;any&gt;</span>\n<span class=\"co2\">#include&lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tstring s <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy4\">;</span>\n\tany var<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>any_cast<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>var<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hello World",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: a\nExplanation: <any> header file is required to use any container and its realted functions."
    },
    {
        "id": 1200,
        "Question": "Which exception is thrown if the typecasting is not done properly?",
        "Options": [
            "a) bad_type_cast",
            "b) bad_any_cast",
            "c) type_mismatched",
            "d) bad_cast_mismatched"
        ],
        "Answer": "Answer: b\nExplanation: bad_any_cast exception is thrown when typecasting is not done properly by the user i.e. if any is storing int value and we are trying to cast it into a string then the program will throw bad_any_cast exception."
    },
    {
        "id": 1201,
        "Question": "What is the use of emplace() function?",
        "Options": [
            "a) Used to change the object any container is holding",
            "b) Used to add more item to the any list",
            "c) Used to empty any container value",
            "d) Used to check the type of any variable"
        ],
        "Answer": "Answer: a\nExplanation: emplace() function is used to change the object contained in any container i.e destroying the present object and creating the new object for the value given by the user."
    },
    {
        "id": 1202,
        "Question": "What is the use of type() function in any container?",
        "Options": [
            "a) Used to destroys the contained object in any variable",
            "b) Used to change the object any container is holding",
            "c) Used to return the type information about the any container",
            "d) Used to check whether a container is empty or not"
        ],
        "Answer": "Answer: c\nExplanation: In this program we are using emplace() function to change the any variable contents and this is allowed in C++ therefore the program runs fine."
    },
    {
        "id": 1203,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;any&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">float</span> val <span class=\"sy1\">=</span> <span class=\"nu16\">5.5</span><span class=\"sy4\">;</span>\n\tany var<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>var.<span class=\"me1\">type</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) f",
            "b) d",
            "c) Pkc",
            "d) u"
        ],
        "Answer": "Answer: c\nExplanation: type() function is used to check the type of data/value the container object is holding. "
    },
    {
        "id": 1204,
        "Question": "What is the use of has_value() function in any container?",
        "Options": [
            "a) Used to destroys the contained object in any variable",
            "b) Used to change the object any container is holding",
            "c) Used to return the type information about the any container",
            "d) Used to check whether any container is empty or not"
        ],
        "Answer": "Answer: a\nExplanation: The type function is used to get information about the data stored in the any container variable. name() attribute is used to print the type id of the data. Now as the data stored in any variable is float therefore the program outputs f as f is the type id for float."
    },
    {
        "id": 1205,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;any&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">float</span> val <span class=\"sy1\">=</span> <span class=\"nu16\">5.5</span><span class=\"sy4\">;</span>\n\tany var<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>var.<span class=\"me1\">has_value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Var is not Empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Var is Empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n        <span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Var is Empty",
            "b) Var is not Empty",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: d\nExplanation: has_value() function is provided to check whether a given any container is empty or not. "
    },
    {
        "id": 1206,
        "Question": "What is the use of reset() function?",
        "Options": [
            "a) Used to destroys the contained object in any variable",
            "b) Used to change the object any container is holding",
            "c) Used to empty any container value",
            "d) Used to check the type of any variable"
        ],
        "Answer": "Answer: b\nExplanation: As the variable is containing the information about the float value val = 5.5 therefore the container is not empty therefore the program outputs “Var is not Empty”."
    },
    {
        "id": 1207,
        "Question": "In how many ways we can handle errors in any class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: As the program uses reset() function which resets/destroys an object contained inside the any container therefore var becomes empty hence the program outputs “var is empty”."
    },
    {
        "id": 1208,
        "Question": "Which type of heap is implemented in STL heap?",
        "Options": [
            "a) max heap",
            "b) min heap",
            "c) middle heap",
            "d) close heap"
        ],
        "Answer": "Answer: a\nExplanation: C++ STL-heap implements max heap i.e. the front of heap contains the maximum of all the elements in a range."
    },
    {
        "id": 1209,
        "Question": "Which function is used to construct heap from given sequence of numbers?",
        "Options": [
            "a) create_heap()",
            "b) make_heap()",
            "c) construct_heap()",
            "d) start_heap()"
        ],
        "Answer": "Answer: b\nExplanation: C++ STL-heap container provides make_heap() function to convert a given range of number into heap."
    },
    {
        "id": 1210,
        "Question": "What is the use of front() function in heap?",
        "Options": [
            "a) Returns the element closest to the median of a sequence",
            "b) Returns the last element of the heap",
            "c) Returns the first element of the heap",
            "d) Returns the element closest to mean of a sequence"
        ],
        "Answer": "Answer: c\nExplanation: C++ STL-heap container provides the front() function that returns the first element of the heap i.e. the maximum number of the sequence."
    },
    {
        "id": 1211,
        "Question": "Which function is used to insert an element into heap?",
        "Options": [
            "a) push_back()",
            "b) push_heap()",
            "c) pop_back()",
            "d) pop_heap()"
        ],
        "Answer": "Answer: b\nExplanation: C++ STL-heap container provides push_heap() function that inserts a new element to the constructed heap."
    },
    {
        "id": 1212,
        "Question": "Elements in STL heap are removed in ________________________",
        "Options": [
            "a) decreasing order",
            "b) increasing order",
            "c) alternate i.e. once max element then min element",
            "d) input order"
        ],
        "Answer": "Answer: a\nExplanation: C++ STL-heap simulates the max heap i.e. the maximum element is at the top/front of the heap hence on poping we pop the first element which is always the maximum number in the sequence."
    },
    {
        "id": 1213,
        "Question": "Which header file is required to use heap in your program?",
        "Options": [
            "a) <heap>",
            "b) <algorithm>",
            "c) <vector>",
            "d) <map>"
        ],
        "Answer": "Answer: b\nExplanation: <algorithm> header file is required to use the functionality of the heap container provided by C++."
    },
    {
        "id": 1214,
        "Question": "Which of the following is correct syntax of making heap from a vector v?",
        "Options": [
            "a) make_heap(v.elements);",
            "b) make_heap(v);",
            "c) make_heap(v.end(), v.begin());",
            "d) make_heap(v.begin(), v.end());"
        ],
        "Answer": "Answer: d\nExplanation: To construct heap usng the vector elements one need to use the following syntax make_heap(v.begin(), v.end()); which is taking the iterator to first and last element of the vector using which elements of vector can be accessed and heap can be constructed."
    },
    {
        "id": 1215,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;vector&gt;</span>\n<span class=\"co2\">#include &lt;algorithm&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tvector <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">23</span>,<span class=\"nu0\">90</span>,<span class=\"nu0\">15</span>,<span class=\"nu0\">35</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\tmake_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 23",
            "b) 1",
            "c) 35",
            "d) 90"
        ],
        "Answer": "Answer: a\nExplanation: The heap C++ construct is max heap so when we are trying to print the front of heap the maximum element of the sequence will be printed as that will be at the top of heap."
    },
    {
        "id": 1216,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;vector&gt;</span>\n<span class=\"co2\">#include &lt;algorithm&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tvector <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">23</span>,<span class=\"nu0\">90</span>,<span class=\"nu0\">15</span>,<span class=\"nu0\">35</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\tmake_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tv.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">110</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tpush_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 90",
            "b) 1",
            "c) 110",
            "d) 23"
        ],
        "Answer": "Answer: c\nExplanation: In this program we are trying to construct heap using the given vector after which we are inserting 110 into the heap which is now the maximum element in the heap so the answer will be 110."
    },
    {
        "id": 1217,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;vector&gt;</span>\n<span class=\"co2\">#include &lt;algorithm&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tvector <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">23</span>,<span class=\"nu0\">90</span>,<span class=\"nu0\">15</span>,<span class=\"nu0\">35</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\tmake_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tv.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">110</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tpush_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tpop_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tv.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>v.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 90",
            "b) 1",
            "c) 110",
            "d) 23"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to construct heap using the given vector after which we are inserting 110 into the heap and then we are poping one element from the heap and as 110 is at the top of the heap so it will be popped out and we will have 90n at the top of heap so the answer will be 90."
    },
    {
        "id": 1218,
        "Question": "What is the use of sort_heap() function in heap?",
        "Options": [
            "a) To sort the elements in the heap into descending order",
            "b) To sort the elements in the heap into ascending order",
            "c) To sort the first half of the heap",
            "d) To sort the second half of the heap"
        ],
        "Answer": "Answer: b\nExplanation: C++ STL-heap container provides sort_heap() function to sort the heap into ascending order which will no longer remain a heap. "
    },
    {
        "id": 1219,
        "Question": "Which function is used to check whether a given sequence is heap or not?",
        "Options": [
            "a) sort_heap()",
            "b) is_heap()",
            "c) is_heap_until()",
            "d) check_heap()"
        ],
        "Answer": "Answer: b\nExplanation: C++ STL-heap container provides is_heap() function to check whether a given sequence of elements represents a heap or not. Descending order of elements represents a valid heap."
    },
    {
        "id": 1220,
        "Question": "What is the use of is_heap_until() function?",
        "Options": [
            "a) Returns the iterator of the last element of the sequence always",
            "b) Returns the iterator to the position from where the sequence is a heap",
            "c) Returns the iterator of the position till that the sequence is a heap",
            "d) Returns the iterator of the first element of the sequence"
        ],
        "Answer": "Answer: c\nExplanation: C++ STL-heap container provides is_heap_until() function which returns the iterator to the position till the container is a heap. For example, we have 7 5 3 1 10 12 so till 1 the sequence forms a heap so this function will return the iterator to the position of element 1."
    },
    {
        "id": 1221,
        "Question": "14. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;vector&gt;</span>\n<span class=\"co2\">#include &lt;algorithm&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tvector <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">23</span>,<span class=\"nu0\">90</span>,<span class=\"nu0\">15</span>,<span class=\"nu0\">35</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tmake_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_heap<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 00",
            "b) 01",
            "c) 10",
            "d) 11"
        ],
        "Answer": "Answer: b\nExplanation: Initially the sequence V is not a heap therefore the function returns 0 after make_heap() function the vector is converted into heap therefore the function returns 1 this time."
    },
    {
        "id": 1222,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;vector&gt;</span>\n<span class=\"co2\">#include &lt;algorithm&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tvector <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">90</span>, <span class=\"nu0\">47</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">35</span>, <span class=\"nu0\">67</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> is_heap_until<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> it<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"sy2\">*</span>i<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 90 67 47 35 34 23 4",
            "b) 90 47 34 23 4 35",
            "c) 90 47 34 23 4 35 67",
            "d) 90 47 34 23 4"
        ],
        "Answer": "Answer: d\nExplanation: is_heap_till() returns pointer till the sequence is heap so as vector v is heap till 4 so the iterator of 4 is returned therefore the sequence is printed till 4."
    },
    {
        "id": 1223,
        "Question": "What is vtable in C++?",
        "Options": [
            "a) Lookup table to resolve function calls in dynamic manners",
            "b) Lookup table to resolve function calls in static manners",
            "c) Lookup table to see which are the functions available for calls throughout the program",
            "d) Lookup table to check how many functions are there int he program"
        ],
        "Answer": "Answer: a\nExplanation: vtable is a lookup table that is used to resolve the function calls in dynamic/late binding manners."
    },
    {
        "id": 1224,
        "Question": "Which classes can have vtable?",
        "Options": [
            "a) Classes having friend functions",
            "b) Classes having virtual functions",
            "c) Classes having static functions",
            "d) All classes have a vtable"
        ],
        "Answer": "Answer: b\nExplanation: Classes having virtual functions only need vtable because in those cases only we need to resolve function calls in a dynamic manner."
    },
    {
        "id": 1225,
        "Question": "What is the full form of vtable?",
        "Options": [
            "a) V type table",
            "b) Vector table",
            "c) Virtual table",
            "d) Virtual-vector table"
        ],
        "Answer": "Answer: c\nExplanation: Full form of vtable is a virtual table. This is called so because it stores the information about virtual functions of a class."
    },
    {
        "id": 1226,
        "Question": "What is vptr?",
        "Options": [
            "a) A hidden pointer in a class that points to a virtual table of that class",
            "b) A hidden pointer in a class that points to virtual functions of that class",
            "c) A hidden pointer in a class that points to virtual members of the class of that class",
            "d) A pointer in a class that points to other class"
        ],
        "Answer": "Answer: a\nExplanation: vptr is a hidden pointer available with classes which are used to point to the virtual table of a class."
    },
    {
        "id": 1227,
        "Question": "What is the full form of vptr?",
        "Options": [
            "a) Vector Pointer",
            "b) Virtual Pointer",
            "c) V type Pointer",
            "d) Virtual-vector Pointer"
        ],
        "Answer": "Answer: a\nExplanation: vptr is abbreviated for a virtual pointer which is used to point virtual tables of a class."
    },
    {
        "id": 1228,
        "Question": "vptr is _______________",
        "Options": [
            "a) a real pointer",
            "b) like this pointer of class",
            "c) passed as a parameter to all functions of class",
            "d) used to resolve self-references"
        ],
        "Answer": "Answer: a\nExplanation: Unlike this pointer, vptr is a real pointer that points to the virtual table of a class."
    },
    {
        "id": 1229,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;type_traits&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBase b<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 16",
            "b) 4",
            "c) 8",
            "d) 1"
        ],
        "Answer": "Answer: d\nExplanation: As the class is simple containing no variables therefore no member that requires size so the size of class is 1 hence the output is 1."
    },
    {
        "id": 1230,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;type_traits&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Base\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBase b<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 16",
            "b) 4",
            "c) 1",
            "d) 8"
        ],
        "Answer": "Answer: c\nExplanation: In ths case the class has two member functions but no variable sinside classes which requires space hence the size of class is 1 ans so the output."
    },
    {
        "id": 1231,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include&lt;type_traits&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Base\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tBase b<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 4",
            "c) 8",
            "d) 16"
        ],
        "Answer": "Answer: c\nExplanation: This class has two virtual functions defined. A class having virtual functions by default has a real pointer vptr. Therefore though not mentioned the class has a real pointer ptr which is of size 8 hence the output is 8. The pointer size differs depending on the system, therefore the output may vary in different systems."
    },
    {
        "id": 1232,
        "Question": "10. Given below classes which of the following are the possible row entries in vtable of Base class?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> D1<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> D2<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Base::function1() and Base::function2()",
            "b) Base::function1() and D1::function2()",
            "c) D1::function1() and Base::function2()",
            "d) D1::function1() and D1::function2() or D2::function1() and D2::function2()"
        ],
        "Answer": "Answer: a\nExplanation: Base class cannot access the members of derived classes therefore there is no conflict of function in Base class. The vtable of this class will contain two entries for both the virtual functions Base::function1() and Base::function2(). Here Base:: tells that the call will use the definition of Base class."
    },
    {
        "id": 1233,
        "Question": "11. Given below classes which of the following are the possible row entries in vtable of D1 class?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> D1<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> D2<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Base::function1() and Base::function2()",
            "b) D1::function1() and Base::function2()",
            "c) Base::function1() and D1::function2()",
            "d) D1::function1() and D1::function2()"
        ],
        "Answer": "Answer: b\nExplanation: In this program as D1 class is inherited from Base class it inherits both the virtual function of Base class but as the class has not overriden the function2() therefore the Base class definition of function2() will be followed. Therefore the class will have 2 entries corresponding to each function as D1::function1() because it is defined in Class D1 and Base::function2() because function2() is not defined in Class D1."
    },
    {
        "id": 1234,
        "Question": "12. Given below classes which of the following are the possible row entries in vtable of D2 class?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> D1<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> D2<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Base\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> function2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Base::function1() and Base::function2()",
            "b) D2::function1() and Base::function2()",
            "c) Base::function1() and D2::function2()",
            "d) D2::function1() and D2::function2()"
        ],
        "Answer": "Answer: c\nExplanation: In this program as D2 class is inherited from Base class it inherits both the virtual function of Base class but as the class has not overriden the function1() therefore the Base class definition of function1() will be followed. Therefore the class will have 2 entries corresponding to each function as Base::function1() because it is not defined in Class D2 and D2::function2() because function2() is defined in Class D2."
    },
    {
        "id": 1235,
        "Question": "What are the Generators in C++?",
        "Options": [
            "a) An object that generates uniformly distributed numbers",
            "b) An object that generates a number from a given sequence",
            "c) An object that generates the smallest number from a given range",
            "d) An object that generates unique numbers"
        ],
        "Answer": "Answer: a\nExplanation: Generators are objects that generates uniformly distributed numbers which help in generating random numbers."
    },
    {
        "id": 1236,
        "Question": "What are Distributions in C++?",
        "Options": [
            "a) Objects that converts a sequence into a sequence having an ascending order",
            "b) Objects that converts a sequence into a sequence having specific random variable distribution",
            "c) Objects that converts a sequence into a sequence having a descending order",
            "d) Objects that converts a sequence into a sequence having only the smallest, largest and median"
        ],
        "Answer": "Answer: b\nExplanation: Distributions are objects that convert the sequence generated by the generator into a sequence which has a specific random variable distribution like uniform, normal, binomial, etc."
    },
    {
        "id": 1237,
        "Question": "Which header file is used for generating random numbers?",
        "Options": [
            "a) <gen_dist>",
            "b) <distribution>",
            "c) <generator>",
            "d) <random>"
        ],
        "Answer": "Answer: d\nExplanation: <random> header file is required for using generators and distributions which helps in generating random numbers in a program."
    },
    {
        "id": 1238,
        "Question": "What is Pseudo-random number engines?",
        "Options": [
            "a) Uses user input for random number generation",
            "b) Uses an algorithm that does not require any initial seed to generate random numbers",
            "c) Uses initial seed based algorithm to generate random numbers",
            "d) Random number generates depends on the program"
        ],
        "Answer": "Answer: c\nExplanation: Pseudo-random number engines are used to generate random numbers based on an initial seed provided to them."
    },
    {
        "id": 1239,
        "Question": "How many Pseudo-random number engines are there?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three types of Pseudo-random number engines based on the algorithm they use. They are linear_congruential_engine, mersenne_twister_engine and subtract_with_carry_engine."
    },
    {
        "id": 1240,
        "Question": "What is linear_congruential_engine?",
        "Options": [
            "a) Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm",
            "b) Pseudo-random number engine that generates random unsigned integers",
            "c) Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using lagged Fibonacci generator",
            "d) Pseudo-random number engine that generates random signed integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm"
        ],
        "Answer": "Answer: b\nExplanation: linear_congruential_engine is a simple Pseudo-random number engine that generates random unsigned integer using the basic algorithm."
    },
    {
        "id": 1241,
        "Question": "What are different operations are used in Pseudo-random number engines?",
        "Options": [
            "a) operator()",
            "b) min()",
            "c) max()",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Pseudo-random number engines use three operations operator() that generates a random number, min() that returns minimum value returned by member operator() and max() returns the maximum value."
    },
    {
        "id": 1242,
        "Question": "What is mersenne_twister_engine?",
        "Options": [
            "a) Pseudo-random number engine that generates random unsigned integers",
            "b) Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm",
            "c) Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using lagged Fibonacci generator",
            "d) Pseudo-random number engine that generates random signed integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm"
        ],
        "Answer": "Answer: b\nExplanation: mersenne_twister_engine is a Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm."
    },
    {
        "id": 1243,
        "Question": "What is subtract_with_carry_engine?",
        "Options": [
            "a) Pseudo-random number engine that generates random unsigned integers",
            "b) Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm",
            "c) Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using lagged Fibonacci generator",
            "d) Pseudo-random number engine that generates random signed integers in the range [0, 2w-1] for some w using Mersenne Twister algorithm"
        ],
        "Answer": "Answer: c\nExplanation: subtract_with_carry_engine is a Pseudo-random number engine that generates random unsigned integers in the range [0, 2w-1] for some w using lagged Fibonacci generator."
    },
    {
        "id": 1244,
        "Question": "What is a Random number generator?",
        "Options": [
            "a) A generator that generates deterministic random numbers",
            "b) A generator that generates both non-deterministic random numbers and deterministic random numbers",
            "c) A generator that generates non-deterministic random numbers",
            "d) A generator that generates a simple random number"
        ],
        "Answer": "Answer: c\nExplanation: Random number generator is a random number generator which generates non-deterministic random numbers."
    },
    {
        "id": 1245,
        "Question": "What is random_device?",
        "Options": [
            "a) A pseudo-random number generator",
            "b) Time-dependent random number generator",
            "c) Simple random number generator",
            "d) A true random number generator"
        ],
        "Answer": "Answer: d\nExplanation: random_device is a true random number generator not the pseudo random number generator."
    },
    {
        "id": 1246,
        "Question": "Which algorithm is used in subtract_with_carry_engine?",
        "Options": [
            "a) Mersenne Twister algorithm",
            "b) Lagged fibonacci generator algorithm",
            "c) Either the Mersenne Twister algorithm or Lagged fibonacci generator algorithm",
            "d) Fibonacci generator"
        ],
        "Answer": "Answer: b\nExplanation:  The algorithm used in subtract_with_carry_engine is lagged fibonacci generator, with state sequences."
    },
    {
        "id": 1247,
        "Question": "What is the default random engine?",
        "Options": [
            "a) Random number engine that generates pseudo-random numbers",
            "b) Mersenne Twister 19937 generator generating 32-bit true random number",
            "c) Random number engine that generates true random numbers",
            "d) Mersenne Twister 19937 generator generating 32-bit pseudo random number"
        ],
        "Answer": "Answer: a\nExplanation: Default random engine is a random number engine that generates pseudo random numbers."
    },
    {
        "id": 1248,
        "Question": "What are Engine Adaptors?",
        "Options": [
            "a) Class template that adopts a pseudo-random number generator engine",
            "b) Class template that adopts a pseudo-random number generator engine to produce numbers with a given numbers of bits",
            "c) Random number engine that generates pseudo-random numbers",
            "d) Mersenne Twister 19937 generator generating 32-bit true random number"
        ],
        "Answer": "Answer: b\nExplanation: Engine adaptor is a class template that adapts a pseudo-random number generator to produce random number having a specific number of bits."
    },
    {
        "id": 1249,
        "Question": "How many Engine Adaptors are there in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three types of Engine adaptors in C++, namely discard_block_engine, independent_bits_engine and shuffle_order_engine."
    },
    {
        "id": 1250,
        "Question": "Which of the header file is used for array type manipulation?",
        "Options": [
            "a) <array>",
            "b) <type_traits>",
            "c) <iostream>",
            "d) std namespace"
        ],
        "Answer": "Answer: d\nExplanation: Array type manipulation functions are declared incside the namespace std so you can use namespace std to use these functions."
    },
    {
        "id": 1251,
        "Question": "What is the use of is_array() function in C++?",
        "Options": [
            "a) To check if a variable is array type or not",
            "b) To check if a variable is 1-D array type or not",
            "c) To check if a variable is 2-D array type or not",
            "d) To check if a variable is 1-D or 2-D array type or not"
        ],
        "Answer": "Answer: a\nExplanation: is_array() function is used to check whether a given variable is of array type or not."
    },
    {
        "id": 1252,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_array<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_array<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_array<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 010",
            "b) 101",
            "c) 001",
            "d) 110"
        ],
        "Answer": "Answer: a\nExplanation: As int and string are not of array type therefore 0 is printed corresponding to them and char[10] is an array of character of size 10 therefore 1 is printed corresponding to this. Hence answer is 010."
    },
    {
        "id": 1253,
        "Question": "What is the use of is_same() function in C++?",
        "Options": [
            "a) To check if a variable is array type or not",
            "b) To check whether two variables have the same characteristics",
            "c) To check if two variable is of array type or not",
            "d) To check whether two variables are different or not"
        ],
        "Answer": "Answer: b\nExplanation: is_same() function is used to check whether two variables have the same characteristics or not."
    },
    {
        "id": 1254,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_same<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_same<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>, <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>is_same<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>, string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 011",
            "b) 101",
            "c) 010",
            "d) 110"
        ],
        "Answer": "Answer: c\nExplanation: In 1st and 3rd case both the variables passed to is_same() function are different whereas for 2nd they are same. Hence the answer is 010."
    },
    {
        "id": 1255,
        "Question": "What is the use of rank() function in C++?",
        "Options": [
            "a) Returns size of each dimension",
            "b) Returns how many total elements can be stored in an array",
            "c) Returns how many elements are in array currently",
            "d) Returns the dimension of an array"
        ],
        "Answer": "Answer: d\nExplanation: rank() function returns the rank of the array i.e. the dimension of an array. For example, int arr[10][10] has rank 2."
    },
    {
        "id": 1256,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>rank<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>rank<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>rank<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 111",
            "b) 123",
            "c) 321",
            "d) 121"
        ],
        "Answer": "Answer: b\nExplanation: In this program first array has the single dimension, second one has two dimensions and third one has three dimension therefore the program prints 123."
    },
    {
        "id": 1257,
        "Question": "Which of the following is correct about extent() function?",
        "Options": [
            "a) Returns how many elements are in array currently",
            "b) Returns the size of the 1st dimension",
            "c) Returns how many total elements can be stored in an array",
            "d) Returns the size of a given dimension"
        ],
        "Answer": "Answer: d\nExplanation: The extent() function takes two parameters one denoting the array other showing the dimension for which the size we want to know. "
    },
    {
        "id": 1258,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span>, <span class=\"nu0\">0</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span>, <span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span>, <span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 101010",
            "b) 102030",
            "c) 302010",
            "d) 102010"
        ],
        "Answer": "Answer: b\nExplanation: In first cout we are passing 0 and size of first dimension of array is 10 therefore 10 is printed. In following cases we have passed 1 and 2 therefore 20 and 30 are printed respectively."
    },
    {
        "id": 1259,
        "Question": "Which of the following is correct about remove_extent() function?",
        "Options": [
            "a) Removes the given dimension from an array",
            "b) Removes the first dimension from the right of the array",
            "c) Removes the first dimension from the left of the array",
            "d) Removes the last dimension from the left of the array"
        ],
        "Answer": "Answer: c\nExplanation: remove_extent() function removes the first dimension i.e. the first dimension from the given array. "
    },
    {
        "id": 1260,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>rank<span class=\"sy1\">&lt;</span>remove_extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">type</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>rank<span class=\"sy1\">&lt;</span>remove_extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">type</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 12",
            "c) 21",
            "d) 22"
        ],
        "Answer": "Answer: b\nExplanation: As we are removing the dimensions from these array and then printing the rank of arrays. Therefore as initially they have 2 and 3 as their rank so after deleting the rank becomes 1 and 2 hence the output is 12."
    },
    {
        "id": 1261,
        "Question": "Which of the following is correct about remove_all_extents() function?",
        "Options": [
            "a) Removes the all dimension from an array",
            "b) Removes the first dimension from the left of the array",
            "c) Removes the first dimension from the right of the array",
            "d) Removes the last dimension from the left of the array"
        ],
        "Answer": "Answer: a\nExplanation: As the name suggests remove_all_extent() function removes all the dimensions from the array. So rank os array after this operation becomes 0."
    },
    {
        "id": 1262,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>rank<span class=\"sy1\">&lt;</span>remove_all_extents<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">type</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 0",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: As we ahve deleted all the dimensions of this array therefore the rank of the array becomes zero hence the output is 0."
    },
    {
        "id": 1263,
        "Question": "14. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>extent<span class=\"sy1\">&lt;</span>remove_extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">type</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>extent<span class=\"sy1\">&lt;</span>remove_extent<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">type</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1010",
            "b) 1020",
            "c) 2020",
            "d) 2030"
        ],
        "Answer": "Answer: c\nExplanation: As we are deleting the first dimension from both the arrays and then printing the extent i.e. size of dimension therefore the answer is 2020 as both the array have 20 as the size of their second dimension."
    },
    {
        "id": 1264,
        "Question": "15. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>extent<span class=\"sy1\">&lt;</span>remove_all_extents<span class=\"sy1\">&lt;</span>string<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">type</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) 10",
            "c) Error",
            "d) 0"
        ],
        "Answer": "Answer: d\nExplanation: As we have removed all the dimensions from the array therefore the output of extent is 0."
    },
    {
        "id": 1265,
        "Question": "What are the tuples in C++?",
        "Options": [
            "a) Objects that can hold more than one element of different types",
            "b) Objects that can hold a single element of complex type",
            "c) Objects that can hold more than one element of the same types",
            "d) Objects that can hold a single element of fundamental type"
        ],
        "Answer": "Answer: a\nExplanation: Object that can hold more than one elements having different types. For example, an object holding int, float and char types."
    },
    {
        "id": 1266,
        "Question": "Which of the following is correct about tuples?",
        "Options": [
            "a) A tuple can hold more than one element",
            "b) A tuple can hold elements having different types",
            "c) Elements of tuples are initialized in order",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A tuple can hold more than one element of different types. The order of initialization must be the same as the order of declaration."
    },
    {
        "id": 1267,
        "Question": "Which header file is required to use tuples in your program?",
        "Options": [
            "a) <stl>",
            "b) <array>",
            "c) <slgorithm>",
            "d) <tuple>"
        ],
        "Answer": "Answer: d\nExplanation: <tuple> header file is required to use tuples in your program. This header file contains all the related functions about tuples."
    },
    {
        "id": 1268,
        "Question": "Which of the following is the correct way of declaring a tuple?",
        "Options": [
            "a) tuple tp<type1, type2, type3>;",
            "b) tuple tp = new tuple<type1, type2, type3>;",
            "c) tuple <type1, type2, type3> tp;",
            "d) Tuple <type1, type2, type3> tp;"
        ],
        "Answer": "Answer: c\nExplanation: The correct syntax of declaring tuple is tuple <type1, type2, type3> tp; Lowercase tuple is used to declare to tuples therefore Tuple <type1, type2, type3> tp; is wrong. "
    },
    {
        "id": 1269,
        "Question": "Which of the following function is used to initialize a tuple?",
        "Options": [
            "a) make()",
            "b) make_pair()",
            "c) make_tuple()",
            "d) make_Tuple()"
        ],
        "Answer": "Answer: c\nExplanation: make_tuple() function is available under the header file  which is used to initialize a tuple."
    },
    {
        "id": 1270,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;tuple&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\ttuple <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">char</span>, string<span class=\"sy1\">&gt;</span> tp <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"Hello\"</span>, <span class=\"nu0\">1</span>, <span class=\"st0\">'s'</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Nothing is printed",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Exception occurs"
        ],
        "Answer": "Answer: b\nExplanation: As the order of initialization is different from the order of declaration therefore the program gives compile error."
    },
    {
        "id": 1271,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;tuple&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\ttuple <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">char</span>, string<span class=\"sy1\">&gt;</span> tp<span class=\"sy4\">;</span>\n\ttp <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Nothing is printed",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Exception occurs"
        ],
        "Answer": "Answer: a\nExplanation: The program is correct hence the program is successfully executed. However nothing is printed because we have written any print statement."
    },
    {
        "id": 1272,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;tuple&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\ttuple <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">char</span>, string<span class=\"sy1\">&gt;</span> tp<span class=\"sy4\">;</span>\n\ttp <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">'c'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Nothing is printed",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Exception occurs"
        ],
        "Answer": "Answer: b\nExplanation: In this case the order of initialization is different from the order of declaration therefore the program gives compile error."
    },
    {
        "id": 1273,
        "Question": "What is the use of get() function in tuples?",
        "Options": [
            "a) To access an element of a tuple",
            "b) To print an element of a tuple",
            "c) To check whether the element of the tuple is empty",
            "d) To delete an element"
        ],
        "Answer": "Answer: a\nExplanation: get() function is provided with  header file to access an element of a tuple."
    },
    {
        "id": 1274,
        "Question": "Which of the following is correct about tuple_size?",
        "Options": [
            "a) Returns the number of elements in a tuple",
            "b) Returns the maximum sized type element",
            "c) Returns the total number of bits used by the tuple",
            "d) Returns the sum of non-string values"
        ],
        "Answer": "Answer: a\nExplanation: tuple_size is used to get the number of elements inside a tuple. For example the tuple_size of tp = {1, 4, “hello”} is 3."
    },
    {
        "id": 1275,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;tuple&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\ttuple <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">char</span>, string<span class=\"sy1\">&gt;</span> tp<span class=\"sy4\">;</span>\n\ttp <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>tuple_size<span class=\"sy1\">&lt;</span><span class=\"kw2\">decltype</span><span class=\"br0\">(</span>tp<span class=\"br0\">)</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 11",
            "b) 5",
            "c) 4",
            "d) 3"
        ],
        "Answer": "Answer: d\nExplanation: As the number of elements in the tuple is 3 therefore the tuple_size of the tuple is 3 hence the output is 3."
    },
    {
        "id": 1276,
        "Question": "Which of the following is correct about swap()?",
        "Options": [
            "a) Swaps first element of both tuples",
            "b) Swaps two tuples",
            "c) Swaps elements of a tuple alternatively",
            "d) Swaps last elements of two tuples"
        ],
        "Answer": "Answer: b\nExplanation: swap() function is used to swap two tuples. For example t1 = {1,2} and t2 = {‘a’,’b’} then after swapping both the tuples becomes t1 = {‘a’,’b’} and t2 = {1,2}."
    },
    {
        "id": 1277,
        "Question": "What is the use of tie() function?",
        "Options": [
            "a) Used to replace elements",
            "b) Used to delete elements",
            "c) Used to unpack the values of a tuple",
            "d) Used to check whether two tuples are the same or not"
        ],
        "Answer": "Answer: a\nExplanation: In this program initially the tuples were as given which is printed and after swapping the elements of tuples are swapped therefore the tuples are swapped."
    },
    {
        "id": 1278,
        "Question": "How many variants of tie() function is there?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: tie() function of  header file is used to unpack the elements of a tuple into different variables."
    },
    {
        "id": 1279,
        "Question": "Which word is used to stop the unpacking of a value in a tuple?",
        "Options": [
            "a) stop",
            "b) ignore",
            "c) cancel",
            "d) remain"
        ],
        "Answer": "Answer: b\nExplanation: There are two variants of tie() function one with ignore word and other without ignore word. The ignore word is used to ignore the unpacking of a particular element."
    },
    {
        "id": 1280,
        "Question": "What is the use of tuple_cat() function?",
        "Options": [
            "a) Takes the union of two tuples",
            "b) Takes the intersection of two tuples",
            "c) Concatenates two tuples",
            "d) Removes elements of the second tuple from first"
        ],
        "Answer": "Answer: d\nExplanation: We have used the tie() function to unpack the values of the tuple. The values are then stored into x, y and z respectively. "
    },
    {
        "id": 1281,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;string&gt;</span>\n<span class=\"co2\">#include &lt;tuple&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\ttuple <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, string<span class=\"sy1\">&gt;</span> tp1<span class=\"sy4\">;</span>\n\ttuple <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, string<span class=\"sy1\">&gt;</span> tp2<span class=\"sy4\">;</span>\n\ttp1 <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\ttp2 <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"World\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> tp3 <span class=\"sy1\">=</span> tuple_cat<span class=\"br0\">(</span>tp1, tp2<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"(\"</span><span class=\"sy1\">&lt;&lt;</span>get<span class=\"sy1\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>tp3<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\", \"</span><span class=\"sy1\">&lt;&lt;</span>get<span class=\"sy1\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>tp3<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\", \"</span><span class=\"sy1\">&lt;&lt;</span>get<span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>tp3<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\", \n        \"</span><span class=\"sy1\">&lt;&lt;</span>get<span class=\"sy1\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>tp3<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\")\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (0, Hello, 1, World)",
            "b) ()",
            "c) (0, 1)",
            "d) (Hello, World)"
        ],
        "Answer": "Answer: b\nExplanation: Ignore word is used to ignore the unpacking of some elements of a tuple."
    },
    {
        "id": 1282,
        "Question": "Which header file is required to use complex class in your program?",
        "Options": [
            "a) <complex>",
            "b) <math>",
            "c) <complex_math>",
            "d) <algorithm>"
        ],
        "Answer": "Answer: a\nExplanation: <complex> header file is required to use the functionalitites of complex numbers."
    },
    {
        "id": 1283,
        "Question": "Which of the following is the correct syntax of declaring a complex number?",
        "Options": [
            "a) complex variable_name<type>;",
            "b) complex<type> variable_name;",
            "c) Complex<type> variable_name;",
            "d) Complex variable_name<type>;"
        ],
        "Answer": "Answer: b\nExplanation: The correct syntax of declaring a complex number object is complex<type> variable_name."
    },
    {
        "id": 1284,
        "Question": "Which function is used to get the real part of the complex number?",
        "Options": [
            "a) img_p()",
            "b) imag_p()",
            "c) real()",
            "d) real_p()"
        ],
        "Answer": "Answer: c\nExplanation: The real() function is provided by the complex <header> to access the real part of a complex number object."
    },
    {
        "id": 1285,
        "Question": "Which function is used to get the imaginary part of the complex number?",
        "Options": [
            "a) real()",
            "b) imag()",
            "c) imag_p()",
            "d) real_p()"
        ],
        "Answer": "Answer: b\nExplanation: The imag() function is provided by the complex <header> to access the imaginary part of a complex number object."
    },
    {
        "id": 1286,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Complex number is: \"</span><span class=\"sy1\">&lt;&lt;</span>real<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" + \"</span><span class=\"sy1\">&lt;&lt;</span>imag<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"i\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Complex number is: 3 + 5i",
            "b) Complex number is: 5 + 3i",
            "c) Complex number is: 9 + 25i",
            "d) Complex number is: 3 – 5i"
        ],
        "Answer": "Answer: a\nExplanation: The first part in the constructor of complex object denotes real part and second part denotes the imaginary part hence the complex number is 3 + 5i."
    },
    {
        "id": 1287,
        "Question": "Which function is used to get the absolute of a complex number?",
        "Options": [
            "a) ret()",
            "b) norm()",
            "c) mod()",
            "d) abs()"
        ],
        "Answer": "Answer: d\nExplanation: abs() function is provided by the  header to calculate the absolute value of a complex number."
    },
    {
        "id": 1288,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Absolute value is: \"</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Absolute value is: 4",
            "b) Absolute value is: 5",
            "c) Absolute value is: 3",
            "d) Absolute value is: 5.83095"
        ],
        "Answer": "Answer: d\nExplanation: In this program we are trying to print the absolute value of a complex number using abs() function of <complex> header."
    },
    {
        "id": 1289,
        "Question": "Which function is used to get the argument of a complex number?",
        "Options": [
            "a) abs()",
            "b) norm()",
            "c) arg()",
            "d) argu()"
        ],
        "Answer": "Answer: c\nExplanation: The argument of a complex is calculated using the arg() function of the <complex> header."
    },
    {
        "id": 1290,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>arg<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1.03038",
            "b) 0",
            "c) Not defined",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to print the argument value of a complex number using arg() function of <complex> header."
    },
    {
        "id": 1291,
        "Question": "What is the use of polar function?",
        "Options": [
            "a) Used to construct a complex number from the real and imaginary part",
            "b) Used to construct a complex number from magnitude and phase angle",
            "c) Used to construct a complex number from the magnitude and real part",
            "d) Used to construct a complex number from argument and phase angle"
        ],
        "Answer": "Answer: b\nExplanation: The polar() function of a complex header is used to construct the complex number using the magnitude and phase angle."
    },
    {
        "id": 1292,
        "Question": "1. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Complex number with magnitude \"</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \n        and phase angle \"</span><span class=\"sy1\">&lt;&lt;</span>arg<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" is: \n        \"</span><span class=\"sy1\">&lt;&lt;</span>polar<span class=\"br0\">(</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>cn<span class=\"br0\">)</span>, arg<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Complex number with magnitude 5.83095 and phase angle 1.03038 is: (3,5)",
            "b) Complex number with magnitude 1.03038 and phase angle 5.83095 is: (3,5)",
            "c) Complex number with magnitude 5.83095 and phase angle 5.83095 is: (3,5)",
            "d) Complex number with magnitude 1.03038 and phase angle 1.03038 is: (3,5)"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to costruct a complex number using polar() function of <complex> header."
    },
    {
        "id": 1293,
        "Question": "Which function is used to calculate the norm of a complex number?",
        "Options": [
            "a) abs()",
            "b) norm()",
            "c) mod()",
            "d) square_sum()"
        ],
        "Answer": "Answer: b\nExplanation: <complex> header provides norm() function to calculate the norm of a complex number."
    },
    {
        "id": 1294,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">4.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Norm is: \"</span><span class=\"sy1\">&lt;&lt;</span>norm<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 9",
            "b) 16",
            "c) 25",
            "d) 5"
        ],
        "Answer": "Answer: c\nExplanation: In this program we are trying to calculate the norm of a complex number using norm() function of <complex> header."
    },
    {
        "id": 1295,
        "Question": "Which function is used to calculate the conjugate of a complex number?",
        "Options": [
            "a) conj()",
            "b) reverse()",
            "c) opp()",
            "d) find_conj()"
        ],
        "Answer": "Answer: a\nExplanation: <complex> header provides conj() function to calculate the conjugate of a complex number."
    },
    {
        "id": 1296,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">4.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> cnj <span class=\"sy1\">=</span> conj<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Conjugate of \"</span><span class=\"sy1\">&lt;&lt;</span>real<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"+(\"</span><span class=\"sy1\">&lt;&lt;</span>imag<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\")i is: \"</span><span class=\"sy1\">&lt;&lt;</span>real<span class=\"br0\">(</span>cnj<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"\n        +(\"</span><span class=\"sy1\">&lt;&lt;</span>imag<span class=\"br0\">(</span>cnj<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\")i\"</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Conjugate of 3+(4)i is: 3+(4)i",
            "b) Conjugate of 3+(4)i is: 3-(-4)i",
            "c) Conjugate of 3+(4)i is: 3-(+4)i",
            "d) Conjugate of 3+(4)i is: 3+(-4)i"
        ],
        "Answer": "Answer: d\nExplanation: The complex conjugate of a+ib is a-ib so conj() of 3+4i = 3-4i or conj(complex(3,4)) = complex(3,-4)."
    },
    {
        "id": 1297,
        "Question": "What is the use of proj() function?",
        "Options": [
            "a) Used to calculate the argument of a complex number",
            "b) Used to calculate the conjugate of a complex number",
            "c) Used to calculate the negative of a complex number",
            "d) Used to calculate the projection of a complex number"
        ],
        "Answer": "Answer: d\nExplanation: <complex> header provides proj() function to calculate the projection of a complex number a + ib."
    },
    {
        "id": 1298,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">4.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"proj\"</span><span class=\"sy1\">&lt;&lt;</span>cn<span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" : \"</span><span class=\"sy1\">&lt;&lt;</span>proj<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) proj(3,4) : (3,4)",
            "b) proj(3,4) : (4,3)",
            "c) proj(3,4) : (-3,-4)",
            "d) proj(3,4) : (-3,4)"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to calculate the projection of a complex number complex(3,4) using proj() function of <complex> header the answer to which is (3,4)."
    },
    {
        "id": 1299,
        "Question": "What is the use of log() function in a complex?",
        "Options": [
            "a) To calculate the log of the imaginary part of a complex number",
            "b) To calculate the log of rethe al part of a complex number",
            "c) To calculate the log of a complex number",
            "d) To calculate the log of the argument of a complex number"
        ],
        "Answer": "Answer: c\nExplanation: <complex> header provides log() function to calculate the logarithm of a complex number a + ib."
    },
    {
        "id": 1300,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">4.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1.60944",
            "b) (1.60944,0.927295)",
            "c) 0.927295",
            "d) 1.60944 + 0.927295"
        ],
        "Answer": "Answer: b\nExplanation: In this program we are trying to calculate the logarithm of a complex number complex(3,4) using log() function of <complex> header the answer to which is (1.60944,0.927295)."
    },
    {
        "id": 1301,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;complex&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tcomplex <span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cn<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">4.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"kw3\">sin</span><span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) (3.85374,-27.0168)",
            "b) 3.85374",
            "c) -27.0168",
            "d) 3.85374 – 27.0168"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to calculate the sine of a complex number complex(3,4) using sin() function of <complex> header the answer to which is (3.85374,-27.0168)."
    },
    {
        "id": 1302,
        "Question": "What is Valarray in C++?",
        "Options": [
            "a) Container for efficient operations on an array",
            "b) Container for efficient printing of the array",
            "c) Container for efficient value conversion of array",
            "d) Container for efficient type conversion of array"
        ],
        "Answer": "Answer: a\nExplanation: Valarray is a special container provided by C++ to hold and perform mathematical operations on array efficiently."
    },
    {
        "id": 1303,
        "Question": "Which of the following is correct about Valarray?",
        "Options": [
            "a) Supports element-wise mathematical operations",
            "b) Slower than a normal array",
            "c) Harder to use",
            "d) Can have only integer Valarrays"
        ],
        "Answer": "Answer: a\nExplanation: Valarray is good at performing mathematical operations. Also, Valarray supports element-wise mathematical operations. They are easier to use and can be of any type."
    },
    {
        "id": 1304,
        "Question": "Which header file is required for using Valarray?",
        "Options": [
            "a) <array>",
            "b) <Valarray>",
            "c) <stl>",
            "d) <algorithm>"
        ],
        "Answer": "Answer: b\nExplanation: <Valarray> header file is required to use the functionalities of Valarrays. "
    },
    {
        "id": 1305,
        "Question": "What is the use of apply() function in Valarray?",
        "Options": [
            "a) Returns new array after shifting elements by the given number",
            "b) Returns the summation of all elements of the Valarray",
            "c) Applies the manipulation provided to all the elements of the array",
            "d) Returns new array after circular shifting elements by the given number"
        ],
        "Answer": "Answer: c\nExplanation: <Valarray> header provides apply() function to apply any manipulation passed to the function to all the elements in the Valarray."
    },
    {
        "id": 1306,
        "Question": "What is the use of sum() function in Valarray?",
        "Options": [
            "a) Applies the manipulation provided to all the elements of the array",
            "b) Returns the summation of all elements of Valarray",
            "c) Returns new array after shifting elements by the given number",
            "d) Returns new array after circular shifting elements by the given number"
        ],
        "Answer": "Answer: a\nExplanation: In this program, we are trying to manipulate the Valarray by adding 5 to all the elements of the Valarray. So first we are printing the original array and then manipulated array."
    },
    {
        "id": 1307,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;valarray&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tvalarray<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> varr <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">30</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Sum of array: \"</span><span class=\"sy1\">&lt;&lt;</span>varr.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Sum of array: 20",
            "b) Sum of array: 53",
            "c) Sum of array: 12",
            "d) Sum of array: 63"
        ],
        "Answer": "Answer: b\nExplanation: <Valarray> header provides sum() function to sum all the elements in the Valarray and returns the total sum."
    },
    {
        "id": 1308,
        "Question": "What is the function of shift()?",
        "Options": [
            "a) Applies the manipulation provided to all the elements of the array",
            "b) Returns the summation of all elements of Valarray",
            "c) Returns new array after shifting elements by the given number",
            "d) Returns new array after circular shifting elements by the given number"
        ],
        "Answer": "Answer: d\nExplanation: In this program we are trying to sum up all the elements of Valarray using the sum() function of the complex header."
    },
    {
        "id": 1309,
        "Question": "Which of the following is correct about the shift?",
        "Options": [
            "a) Returns new array after shifting elements by the given number",
            "b) Shifts the elements towards left if the argument supplied is positive",
            "c) Shifts the elements towards the right if the argument supplied is negative",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: <Valarray> header provides shift() function to shift all the elements of the Valarray by a given number either to the left or to the right."
    },
    {
        "id": 1310,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;Valarray&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tValarray<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> varr <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>x<span class=\"sy4\">:</span> varr<span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\tvarr <span class=\"sy1\">=</span> varr.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy3\">&amp;</span>x<span class=\"sy4\">:</span> varr<span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2 only",
            "b) 1 only",
            "c) Both 1 and 2",
            "d) Neither 1 nor 2"
        ],
        "Answer": "Answer: d\nExplanation: shift() function is used to shift all the elements of the Valarray by a given number. the elements are shifted towards left if the number if positive and towards the right if the number if negative."
    },
    {
        "id": 1311,
        "Question": "Which function is used to swap two Valarray?",
        "Options": [
            "a) max()",
            "b) min()",
            "c) swap()",
            "d) change()"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to shift elements of Valarray towards left by 2 using the shift() function of the complex header."
    },
    {
        "id": 1312,
        "Question": "Which function is used to print the maximum element from Valarray?",
        "Options": [
            "a) change()",
            "b) min()",
            "c) swap()",
            "d) max()"
        ],
        "Answer": "Answer: b\nExplanation: In this program we are trying to shift elements of Valarray towards right by 3 using the shift() function of the complex header."
    },
    {
        "id": 1313,
        "Question": "What is bitset in C++?",
        "Options": [
            "a) An array of bools consuming one bit per element",
            "b) Vector of bools",
            "c) C-like arrays of bool elements",
            "d) Template class"
        ],
        "Answer": "Answer: a\nExplanation: Bitset is a collection of bool variables with each element consuming only one bit. They are introduced for efficient use of memories."
    },
    {
        "id": 1314,
        "Question": "Which of the following is correct about bitset and vector of bools?",
        "Options": [
            "a) Space consumed by bitset is less than vector<bool>",
            "b) Bitset consume only 1 bit per element",
            "c) Number of elements in bitset should be known at compile time whereas vector can have a dynamic size",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Bitset consumes less space compared to bool vector however the size for bitset is static whereas for bool vector size is dynamic."
    },
    {
        "id": 1315,
        "Question": "Which of the following is the limitation of bitset over vector bool?",
        "Options": [
            "a) Space",
            "b) Size",
            "c) Type",
            "d) Speed"
        ],
        "Answer": "Answer: b\nExplanation: Bitset size is static whereas vector size is dynamic therefore the size of a vector can be increased or decreased which is not possible in bitset."
    },
    {
        "id": 1316,
        "Question": "Which operator is used to access the nth bit in a bitset?",
        "Options": [
            "a) ->",
            "b) [] ",
            "c) .",
            "d) *"
        ],
        "Answer": "Answer: b\nExplanation: [] operator is used to access the nth bit of a bitset from the right side. For example, if my bitset b is 1010 then b[0] represents 0 and b[1] represents 1."
    },
    {
        "id": 1317,
        "Question": "How many ways are there for constructing a bitset?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three ways of constructing a bitset. Direct construction, using integer number and using binary string."
    },
    {
        "id": 1318,
        "Question": "Which is the correct syntax of constructing a bitset?",
        "Options": [
            "a) bitset<size> b;",
            "b) bitset<size> b(12);",
            "c) bitset<size> b(string(“1100”));",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All of the above mentioned are correct syntax of constructing a bitset. However each has different way of interpretation."
    },
    {
        "id": 1319,
        "Question": "Which of the following is corect way of constructing bitset using integer number?",
        "Options": [
            "a) bitset<size> b;",
            "b) bitset<size> b(12);",
            "c) bitset<size> b(string(“1100”));",
            "d) bitset<size> b(float(12));"
        ],
        "Answer": "Answer: b\nExplanation: The correct way of constructing bitset using integer number is as follows:\nbitset<size> b(integer_number);"
    },
    {
        "id": 1320,
        "Question": "Which of the following is corect way of constructing bitset using binary string?",
        "Options": [
            "a) bitset<size> b;",
            "b) bitset<size> b(12);",
            "c) bitset<size> b(string(“1100”));",
            "d) bitset<size> b(float(12));"
        ],
        "Answer": "Answer: c\nExplanation: The correct way of constructing bitset using binary string is as follows:\nbitset<size> b(string(“1100”));"
    },
    {
        "id": 1321,
        "Question": "What is the default value of a bitset?",
        "Options": [
            "a) All bits are 0",
            "b) All bits are 1",
            "c) Leftmost bit is 0",
            "d) Rightmost bit is 0"
        ],
        "Answer": "Answer: a\nExplanation: By default, all the bits of a bitset variable is set to 0 i.e. the value of bitset variable is 0."
    },
    {
        "id": 1322,
        "Question": "Which header file is required for using bitset in your program?",
        "Options": [
            "a) <bit>",
            "b) <bitset>",
            "c) <bits>",
            "d) <BitSet>"
        ],
        "Answer": "Answer: b\nExplanation: <bitset> header file is required to use the functionality of bitsets in your program i.e. use of binary string in your program."
    },
    {
        "id": 1323,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 00001111",
            "b) 1111",
            "c) 11110000",
            "d) 0000000000001111"
        ],
        "Answer": "Answer: a\nExplanation: As the size provided to bitset variable is 8, therefore, the number of bits that this variable will have is equal to 8. Now as 15 is 1111 so the least most significant digits will be 1111 to make it represent 15. Hence the answer is 00001111."
    },
    {
        "id": 1324,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span>string<span class=\"br0\">(</span><span class=\"st0\">\"15\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 00001111",
            "b) Compile-time error",
            "c) 11110000",
            "d) Run-time error"
        ],
        "Answer": "Answer: d\nExplanation: As we are using binary string way of constructing bitset and as 15 is not a binary string therfore the program gives an error."
    },
    {
        "id": 1325,
        "Question": "Indexing of bitset variables starts from ___________",
        "Options": [
            "a) leftmost bit",
            "b) rightmost bit",
            "c) same as in an array",
            "d) front"
        ],
        "Answer": "Answer: b\nExplanation: The indexing of bitset variable starts from rightmost bit i.e. if you have b = 1100 as your bitset then b[0] = 0, not 1."
    },
    {
        "id": 1326,
        "Question": "What is the use of count() function in bitset?",
        "Options": [
            "a) To count the number of 0’s",
            "b) To count the number of 1’s",
            "c) To count the number of total bits in a bitset",
            "d) To count the number of low bits"
        ],
        "Answer": "Answer: b\nExplanation: <bitset> header provides the count() function to count the number of 1’s or high bits in the bitset variable."
    },
    {
        "id": 1327,
        "Question": "What does size() function returns?",
        "Options": [
            "a) To count the number of 0’s",
            "b) To count the number of 1’s",
            "c) To count the number of total bits used by bitset variable",
            "d) To count the number of low bits"
        ],
        "Answer": "Answer: c\nExplanation: <bitset> header provides the size() function to count the number of bits used by the bitset variable. For example, if bitset variable is 1010 then size() function returns 4."
    },
    {
        "id": 1328,
        "Question": "1. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1.<span class=\"me1\">test</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1.<span class=\"me1\">test</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 01",
            "b) 00",
            "c) 10",
            "d) 11"
        ],
        "Answer": "Answer: a\nExplanation: The test() function is used to check whether a bit is set to one. So as 20 is equivalent to 10100 which has bit at index 1 as 0 and bit at index 2 as 1 therefore the the output 0 for test(1) and 1 for test(2)."
    },
    {
        "id": 1329,
        "Question": "Which of the following is correct about any() function in bitset?",
        "Options": [
            "a) Returns true if the number of 1’s equal to the number of 0’s",
            "b) Returns true if any bit is set 0",
            "c) Returns true if any bit is set 1",
            "d) Returns true only if all bits are 1"
        ],
        "Answer": "Answer: c\nExplanation: <bitset> header provides the any() function which returns true if any of the bit is set to 1 in the bitset variable."
    },
    {
        "id": 1330,
        "Question": "Which of the following is correct about none() function in bitset?",
        "Options": [
            "a) Returns true if any bits is set 1",
            "b) Returns true if all bits is set 0",
            "c) Returns true if the number of 1’s equal to the number of 0’s",
            "d) Returns true only if all bits are 1"
        ],
        "Answer": "Answer: b\nExplanation: <bitset> header provides the any() function which returns true if none of the bit is set to 1 in the bitset variable."
    },
    {
        "id": 1331,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1.<span class=\"me1\">none</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1.<span class=\"me1\">any</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 01",
            "b) 00",
            "c) 10",
            "d) 11"
        ],
        "Answer": "Answer: a\nExplanation: As 20 is equivalent to 10100 which has two bits which are 1 therefore none() fucntion will return false i.e. 0 and any() function will return true i.e. 1."
    },
    {
        "id": 1332,
        "Question": "What is the use of the set() function in bitset?",
        "Options": [
            "a) Used to make alternate bits zero",
            "b) Used to make a bit 0 in a bitset",
            "c) Used to make all bits zero",
            "d) Used to set bit(s) in a bitset"
        ],
        "Answer": "Answer: d\nExplanation: <bitset> header provides the set() function to set bit(s) to 1 in a bitset variable."
    },
    {
        "id": 1333,
        "Question": "What happens when no argument is supplied to set() function?",
        "Options": [
            "a) All alternate bits are set to 1 in a bitset",
            "b) All bits are set to 0 in a bitset",
            "c) All bits are set to 1 in a bitset",
            "d) First bit is set to 1"
        ],
        "Answer": "Answer: c\nExplanation: When no argument is supplied to set() function i.e. function is called with empty parameters then all the bits of the bitset is set to 1."
    },
    {
        "id": 1334,
        "Question": "What happens when only one argument is supplied to set() function?",
        "Options": [
            "a) All bits are set to 1 in a bitset",
            "b) Bit corresponding to an argument is set to 1",
            "c) All alternate bits are set to 1 in a bitset",
            "d) First bit is set to 1"
        ],
        "Answer": "Answer: b\nExplanation: When only one argument is supplied to set() function then bit corresponding to that index is set to 1."
    },
    {
        "id": 1335,
        "Question": "What is the use of reset function in bitset?",
        "Options": [
            "a) Used to make alternate bits zero",
            "b) Used to make a bit 0 in a bitset",
            "c) Used to make all bits 1",
            "d) Used to make a bit(s) 0 in a bitset"
        ],
        "Answer": "Answer: d\nExplanation: <bitset> header provides the reset() function to set bit(s) to 0 in a bitset variable."
    },
    {
        "id": 1336,
        "Question": "What happens when no argument is supplied to reset() function?",
        "Options": [
            "a) All bits are set to 1 in a bitset",
            "b) All bits are set to 0 in a bitset",
            "c) All alternate bits are set to 0 in a bitset",
            "d) First bit is set to 0"
        ],
        "Answer": "Answer: b\nExplanation: When no argument is supplied to reset() function i.e. function is called with empty parameters then all the bits of the bitset is set to 0."
    },
    {
        "id": 1337,
        "Question": "What happens when only one argument is supplied to reset() function?",
        "Options": [
            "a) Bit corresponding to an argument is set to 0",
            "b) All bits are set to 0 in a bitset",
            "c) All alternate bits are set to 0 in a bitset",
            "d) First bit is set to 0"
        ],
        "Answer": "Answer: a\nExplanation: When only one argument is supplied to reset() function then bit corresponding to that index is set to 0."
    },
    {
        "id": 1338,
        "Question": "What is the use of the flip function in bitset?",
        "Options": [
            "a) Used to flip bit(s) in a bitset",
            "b) Used to flip a bit in a bitset",
            "c) Used to flip all bits to 1",
            "d) Used to flip alternate bits"
        ],
        "Answer": "Answer: a\nExplanation: <bitset> header provides the flip() function to flip bit(s) in a bitset variable i.e. change the bits in a bitset for example 1100 on flipping becomes 0011."
    },
    {
        "id": 1339,
        "Question": "What happens when no argument is supplied to flip() function?",
        "Options": [
            "a) All alternate bits are flipped in a bitset",
            "b) All bits are flipped to 1 in a bitset",
            "c) All bits are flipped in a bitset",
            "d) First bit is flipped"
        ],
        "Answer": "Answer: c\nExplanation: When no argument is supplied to flip() function i.e. function is called with empty parameters then all the bits of the bitset variable is flipped."
    },
    {
        "id": 1340,
        "Question": "What happens when only one argument is supplied to flip() function?",
        "Options": [
            "a) All bits are flipped in a bitset",
            "b) Bit corresponding to argument bit is flipped",
            "c) All alternate bits are flipped in a bitset",
            "d) First bit is flipped"
        ],
        "Answer": "Answer: b\nExplanation: When only one argument is supplied to flip() function then bit corresponding to that index only is flipped."
    },
    {
        "id": 1341,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span><span class=\"nu0\">95</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b2<span class=\"br0\">(</span><span class=\"nu0\">46</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>b1<span class=\"sy3\">^</span>b2<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 00001101",
            "b) 11111000",
            "c) 01111111",
            "d) 01110001"
        ],
        "Answer": "Answer: d\nExplanation: ^ operator is used to take xor of two bitset variables i.e. if ith bit in both varaibles are either 1 or 0 then answer is 0 otherwise answer is 1. "
    },
    {
        "id": 1342,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span><span class=\"nu0\">95</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b2 <span class=\"sy1\">=</span> b1 <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b2<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 01110001",
            "b) 11111000",
            "c) 01111111",
            "d) 00001101"
        ],
        "Answer": "Answer: b\nExplanation: << operator is used to shift bits towards left side so if we have 1111 then on shifting this by 2 i.e. 1111 << 2 will result into 1100."
    },
    {
        "id": 1343,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"co2\">#include &lt;bitset&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b1<span class=\"br0\">(</span><span class=\"nu0\">95</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\tbitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span> b2 <span class=\"sy1\">=</span> b1 <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>b1<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy1\">&lt;&lt;</span>b2<span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 00001011",
            "b) 11111000",
            "c) 01111111",
            "d) 00001101"
        ],
        "Answer": "Answer: a\nExplanation: >> operator is used to shift bits towards right side so if we have 1111 then on shifting this by 2 i.e. 1111 >> 2 will result into 0011."
    },
    {
        "id": 1344,
        "Question": "Which operator is used as not operator in bitset?",
        "Options": [
            "a) |",
            "b) &",
            "c) ~",
            "d) ^"
        ],
        "Answer": "Answer: c\nExplanation: ~ operator is used as not operator i.e. the negation of a bit for bitset variables in C++."
    },
    {
        "id": 1345,
        "Question": "Which operator is used to take AND of two bitset variables?",
        "Options": [
            "a) ~",
            "b) &",
            "c) |",
            "d) ^"
        ],
        "Answer": "Answer: b\nExplanation: & operator is used as AND operator for bitset variables in C++. ANDing of two bits are 1 only if both are 1."
    },
    {
        "id": 1346,
        "Question": "Which operator is used to take OR of two bitset variables?",
        "Options": [
            "a) ~",
            "b) &",
            "c) |",
            "d) ^"
        ],
        "Answer": "Answer: c\nExplanation: | operator is used as OR operator for bitset variables in C++. ORing of two bits are 0 only if both are 0."
    },
    {
        "id": 1347,
        "Question": "What is the class relationship?",
        "Options": [
            "a) A relationship between classes that tells how they are related",
            "b) A relationship between classes that tells how much power one class has over other class",
            "c) A relationship between classes that tells which parts of a class is visible to other classes",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The Class relationship is a concept that helps us in differentiating how one class is related to other classes, the power of one over other and which part one class can be accessed by other class. "
    },
    {
        "id": 1348,
        "Question": "How many types of class relationships are there?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: There are basically four types of class relationships namely Inheritance, Aggregation, Composition and Association relationships between classes."
    },
    {
        "id": 1349,
        "Question": "Which type of relationship is modelled by Inheritance?",
        "Options": [
            "a) Is-A relationship",
            "b) Has-A relationship",
            "c) Part-Of relationship",
            "d) Belongs-to relationship"
        ],
        "Answer": "Answer: a\nExplanation: Inheritance models Is-A type of relationship between classes. This is because in this case derived class inherits all property of the base class and Is-A type of B class."
    },
    {
        "id": 1350,
        "Question": "How the relationship is made in Association?",
        "Options": [
            "a) Through the objects of classes",
            "b) Through constructor",
            "c) Through destructor",
            "d) Through class Names"
        ],
        "Answer": "Answer: a\nExplanation: Association relationship between classes is made using the objects of classes like we have a bank object denoting ABC bank and some objects of Employee class XYZ1, XYZ2 and so on. So, in this case, XYZ1 is an employee in ABC bank so there is a relationship between these two objects."
    },
    {
        "id": 1351,
        "Question": "How many types of Association can be there between classes?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: There can be four types of an association relationship between classes namely one-to-one, one-to-many, many-to-one and many-to-many."
    },
    {
        "id": 1352,
        "Question": "Why do we need relationships between classes?",
        "Options": [
            "a) To use the functionality of one class into other",
            "b) To enhance the communication between classes",
            "c) To increase code re-usability",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Relationships are needed to increase the use of features of one class into the other classes i.e. increasing the re-usability of codes and increasing communication between classes."
    },
    {
        "id": 1353,
        "Question": "Composition is also a type of _______________ relationship.",
        "Options": [
            "a) Aggregation",
            "b) Association",
            "c) Inheritance",
            "d) Both Aggregation an Association"
        ],
        "Answer": "Answer: b\nExplanation: Composition is also a type of Both Aggregation and Association relationship. Composition relationships are string relationships whereas others are a superset of this relationship."
    },
    {
        "id": 1354,
        "Question": "Which type of relationship is modelled by Composition?",
        "Options": [
            "a) Is-A relationship",
            "b) Has-A relationship",
            "c) Part-Of relationship",
            "d) Have-A relationship"
        ],
        "Answer": "Answer: c\nExplanation: Composition models the part-of relationship between classes. In this children cannot exits without a parent, therefore, they are part of each other."
    },
    {
        "id": 1355,
        "Question": "Which type of relationship is modelled by Aggregation?",
        "Options": [
            "a) Is-A relationship",
            "b) Has-A relationship",
            "c) Part-Of relationship",
            "d) Have-A relationship"
        ],
        "Answer": "Answer: b\nExplanation: Aggregation models the has-a relationship between classes. In this children can exist without a parent, therefore, they have a relationship."
    },
    {
        "id": 1356,
        "Question": "Which of the following relationships is uni-directional?",
        "Options": [
            "a) Aggregation",
            "b) Association",
            "c) Composition",
            "d) Both Aggregation and Composition"
        ],
        "Answer": "Answer: d\nExplanation: Both Association and composition are uni-directional relationships. For example, departments can have students but another way around is not possible."
    },
    {
        "id": 1357,
        "Question": "In which of the following relationship objects of related classes can occur independently?",
        "Options": [
            "a) Aggregation",
            "b) Association",
            "c) Composition",
            "d) Both Aggregation an Association"
        ],
        "Answer": "Answer: d\nExplanation: In both Aggregations and Association of objects of related classes can occur independently. For example, an employee can have a bank and a bank can have an employee. Also, Association is a superset of Aggregation, therefore, it also follows the same."
    },
    {
        "id": 1358,
        "Question": "In which of the following relationship objects of related classes are strongly dependent?",
        "Options": [
            "a) Aggregation",
            "b) Association",
            "c) Composition",
            "d) Both Composition an Association"
        ],
        "Answer": "Answer: d\nExplanation: In both Composition and Association, objects of related classes are strongly dependent. For example, books will be destroyed if the library does not exist (talking about objects of classes)."
    },
    {
        "id": 1359,
        "Question": "Composition is a __________ type of Association relationship.",
        "Options": [
            "a) strong",
            "b) weak",
            "c) unnecessary",
            "d) necessary"
        ],
        "Answer": "Answer: a\nExplanation: Composition is a strong type of Association relationship because in this case, objects are strongly dependent on each other. For example, human and heart cannot exist without each other."
    },
    {
        "id": 1360,
        "Question": "Aggregation is a __________ type of Association relationship.",
        "Options": [
            "a) strong",
            "b) weak",
            "c) unnecessary",
            "d) necessary"
        ],
        "Answer": "Answer: b\nExplanation: Aggregation is a weak type of Association relationship because in this case objects of related classes can occur independently. For example, bank and employee can occur independently."
    },
    {
        "id": 1361,
        "Question": "Which type of relationship is modelled by Association?",
        "Options": [
            "a) Is-A relationship",
            "b) Has-A relationship",
            "c) Part-Of relationship",
            "d) Have-A relationship"
        ],
        "Answer": "Answer: b\nExplanation: Association models the has-a relationship between classes. Similar to aggregation, in this children can exist without a parent, therefore, they have a relationship."
    },
    {
        "id": 1362,
        "Question": "Which container is used to store elements as key-value pair?",
        "Options": [
            "a) map",
            "b) multimap",
            "c) unordered map",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: C++ provides these three containers(map, multimap and unordered map) to store elements as key-value pair."
    },
    {
        "id": 1363,
        "Question": "Which container can have the same keys?",
        "Options": [
            "a) map",
            "b) multimap",
            "c) unordered map",
            "d) set"
        ],
        "Answer": "Answer: b\nExplanation: C++ provide multimap container that is used to make map that can contain same keys i.e. {a: 5} and {a:10} both can exist."
    },
    {
        "id": 1364,
        "Question": "Which container is best to keep the collection of distinct elements?",
        "Options": [
            "a) multimap",
            "b) heap",
            "c) set",
            "d) queue"
        ],
        "Answer": "Answer: c\nExplanation: C++ provides a set container to store a collection of distinct elements. This container behaves similar to mathematical sets."
    },
    {
        "id": 1365,
        "Question": "Which container is used to keep priority based elements?",
        "Options": [
            "a) queue",
            "b) stack",
            "c) set",
            "d) priority queue"
        ],
        "Answer": "Answer: d\nExplanation: C++ provides priority queue container that stores elements based on their priority. For example, if the absolute value is the priority then -6 will be kept before 4 in the priority queue."
    },
    {
        "id": 1366,
        "Question": "Sets are implemented using _______________________",
        "Options": [
            "a) binary search tree",
            "b) red black tree",
            "c) avl tree",
            "d) heap"
        ],
        "Answer": "Answer: a\nExplanation: Sets are implemented using the search tree so that we can check the presence of any element to be inserted in O(logn) time in order to remove conflicts between elements."
    },
    {
        "id": 1367,
        "Question": "Unordered map is implemented using _________________",
        "Options": [
            "a) binary search tree",
            "b) red black tree",
            "c) heap",
            "d) hash table"
        ],
        "Answer": "Answer: d\nExplanation: As unordered map has no order of keys therefore hash table is used to store key-value pairs in a hash table."
    },
    {
        "id": 1368,
        "Question": "Map is implemented using ____________________",
        "Options": [
            "a) binary search tree",
            "b) red black tree",
            "c) heap",
            "d) hash table"
        ],
        "Answer": "Answer: b\nExplanation: The map has some order of stored keys therefore red black tree is used to maintain that order and access the elements as soon as possible."
    },
    {
        "id": 1369,
        "Question": "Which of the following is correct about the map and unordered map?",
        "Options": [
            "a) Ordering of keys in maps whereas no such order in the unordered map",
            "b) Maps are implemented red-black trees whereas unordered map are implemented using hash tables",
            "c) Average search time in the unordered map is O(1) whereas it is O(logn) in case of maps",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All the above mentioned points are correct about maps and unordered maps. Maps uses red-black tree whereas unordered map uses hash tables therefore the average search time for the unordered map is O(1) whereas it is O(logn) in case of maps."
    },
    {
        "id": 1370,
        "Question": "Which of the following queue container can expand or shrink from both directions?",
        "Options": [
            "a) deque",
            "b) queue",
            "c) priority queue",
            "d) stack"
        ],
        "Answer": "Answer: a\nExplanation: Deque is a short form for a doubly ended queue which can be expanded and shrinked from any side of the queue either from the front or from the back."
    },
    {
        "id": 1371,
        "Question": "Which of the following is correct about map and multimap?",
        "Options": [
            "a) Map can have same keys whereas multimap cannot",
            "b) Implementation of maps and multimap are different",
            "c) Multimap can have same keys whereas the map cannot",
            "d) Average search time of map is greater than multimap"
        ],
        "Answer": "Answer: c\nExplanation: Multimap is similar to map, the only difference that they have is that in multimap elements can have the same keys where in the map we have only one to one key-value pair correspondence."
    },
    {
        "id": 1372,
        "Question": "What is the header file used for declaring the standard library algorithms?",
        "Options": [
            "a) container",
            "b) algorithm",
            "c) library",
            "d) iterator"
        ],
        "Answer": " Answer: b\nExplanation: C++ Standard Library, algorithms are components that perform algorithmic operations on containers and other sequences. For this operation, We have to use <algorithm> header file.\n"
    },
    {
        "id": 1373,
        "Question": "Pick out the correct method in the c++ standard library algorithm.",
        "Options": [
            "a) mismatch",
            "b) maximum",
            "c) minimum",
            "d) maxmatch"
        ],
        "Answer": " Answer: a\nExplanation: It is a method in the search operation in standard library algorithms.\n"
    },
    {
        "id": 1374,
        "Question": "What is the use of make_heap in the heap operation?",
        "Options": [
            "a) Rearrange a heap",
            "b) Deform a heap",
            "c) Form a heap",
            "d) Delete a heap"
        ],
        "Answer": " Answer: c\nExplanation: It is used to rearranges a range so that it becomes a heap.\n"
    },
    {
        "id": 1375,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> first<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">25</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> second<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">50</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>      </pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>first, first <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>second, second <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        it <span class=\"sy1\">=</span> set_union <span class=\"br0\">(</span>first, first <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, second, second <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>it <span class=\"sy2\">-</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 7",
            "c) 8",
            "d) 9"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We used the union function to find the number of elements.\nOutput:\n\n\n        \n\n$ g++ sla.cpp\n$ a.out\n8\n\n\n"
    },
    {
        "id": 1376,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        fill <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        fill <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3 4",
            "b) 3 4 4",
            "c) 3 4 & 3 4 4",
            "d) 3 4 4 0"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We filled out the vector values by using criteria in the for loop.\nOutput:\n\n\n\t\n\n$ g++ sla1.cpp\n$ a.out\n3 4 4 0\n\n\n"
    },
    {
        "id": 1377,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        reverse<span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4 5",
            "b) 5 4 3 2 1",
            "c) 0 1 2 3 4",
            "d) 5 4 1 2 3"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We reversed the vector values by using the reverse function.\nOutput:\n\n\n$ g++ sla2.cpp\n$ a.out\n5 4 3 2 1\n\n\n"
    },
    {
        "id": 1378,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> mycount <span class=\"sy1\">=</span> count <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">8</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"10 appears \"</span> <span class=\"sy1\">&lt;&lt;</span> mycount <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" times.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span>myints, myints<span class=\"sy2\">+</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mycount <span class=\"sy1\">=</span> count <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"20 appears \"</span> <span class=\"sy1\">&lt;&lt;</span> mycount  <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" times.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3 3",
            "b) 3 1",
            "c) 8",
            "d) 9"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are counting the number of 10’s and 20’s in the myints.\nOutput:\n\n\n$ g++ sla3.cpp\n$ a.out\n10 appears 3 times\n20 appears 3 times\n\n\n"
    },
    {
        "id": 1379,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> pbegin <span class=\"sy1\">=</span> myints<span class=\"sy4\">;</span>                      </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> pend <span class=\"sy1\">=</span> myints <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>myints<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pend <span class=\"sy1\">=</span> <span class=\"kw3\">remove</span> <span class=\"br0\">(</span>pbegin, pend, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>      </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> pbegin<span class=\"sy4\">;</span> p <span class=\"sy3\">!</span><span class=\"sy1\">=</span> pend<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>p<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10, 20, 30, 30, 20, 10, 10, 20",
            "b) 10, 30, 30, 10, 10",
            "c) 10, 20, 20, 10, 10, 10, 20",
            "d) 10, 20, 20, 10, 30, 10, 15"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are removing all the 20’s and then we are\nprinting the remaining.\nOutput:\n\n\n$ g++ sla4.cpp\n$ a.out\n10, 30, 30, 10, 10\n\n\n"
    },
    {
        "id": 1380,
        "Question": "What is the type of the first item in the heap?",
        "Options": [
            "a) Bigger than others",
            "b) Lower than others",
            "c) Mean value of the heap",
            "d) Equal to others"
        ],
        "Answer": " Answer: a\nExplanation: In C++, when we say heap we mean max heap and first element of max is bigger than others.\n"
    },
    {
        "id": 1381,
        "Question": "Pick out the correct library in the following choices.",
        "Options": [
            "a) Search",
            "b) Generate",
            "c) Numeric",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: These are the available libraries in C++.\n"
    },
    {
        "id": 1382,
        "Question": "What kind of iteration does forward_list provide in C++?",
        "Options": [
            "a) Uni-directional",
            "b) Bi-directional",
            "c) Multi-directional",
            "d) Bi-directional & Multi-directional"
        ],
        "Answer": " Answer: a\nExplanation: The forward_list uses singly linked list hence it is uni-directional. In the forward_list, the container provides insertion and removal at anywhere in the program.\n"
    },
    {
        "id": 1383,
        "Question": "What does the size of the vector refers to in c++?",
        "Options": [
            "a) Size of vector",
            "b) Type of vector",
            "c) Number of elements",
            "d) Name of vector"
        ],
        "Answer": " Answer: c\nExplanation: In vectors, by size we mean the number of elements in that vector array.\n"
    },
    {
        "id": 1384,
        "Question": "Subsequent elements are moved in terms of _____ when an element in inserted in vector?",
        "Options": [
            "a) Assignment Operator",
            "b) Copy constructor",
            "c) Both assignment operator and copy constructor",
            "d) destructor"
        ],
        "Answer": " Answer: c\nExplanation: The vector maintains a certain order of its elements, so that when a new element is inserted at the beginning or in the middle of the vector, Subsequent elements are moved backwards in terms of their assignment operator or copy constructor.\n"
    },
    {
        "id": 1385,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> myvector.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">at</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> myvector.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> myvector.<span class=\"me1\">at</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3",
            "b) 0 1 2",
            "c) 1 2 3 4",
            "d) 1 3 5 9"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are pushing the values into the vector from 0 to 3 by using for loop.\nOutput:\n\n\n        \n\n$ g++ seqc.cpp\n$ a.out\n0 1 2\n\n\n"
    },
    {
        "id": 1386,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">78</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> myvector.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 78",
            "b) 16",
            "c) 94",
            "d) 86"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We added all the values in the vector by using front and back operation.\nOutput:\n\n\n\t\n\n$ g++ seqc1.cpp\n$ a.out\n94\n\n\n"
    },
    {
        "id": 1387,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;list&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mylist<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it1, it2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> mylist.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            it1 <span class=\"sy1\">=</span> it2 <span class=\"sy1\">=</span> mylist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        advance <span class=\"br0\">(</span>it2, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">++</span>it1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it1 <span class=\"sy1\">=</span> mylist.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>it1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it2 <span class=\"sy1\">=</span> mylist.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>it2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">++</span>it1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">--</span>it2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mylist.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>it1, it2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>it1 <span class=\"sy1\">=</span> mylist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it1 <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mylist.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it1<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 3 6",
            "b) 8 9",
            "c) 1 3 6 8 9",
            "d) 4 6 8 9"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are comparing the values in both lists and erasing it according to certain condition.\nOutput:\n\n\n$ g++ seqc2.cpp\n$ a.out\n1 3 6 8 9\n\n\n"
    },
    {
        "id": 1388,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;deque&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mydeque<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"nu0\">200</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"nu0\">300</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>it <span class=\"sy1\">=</span> mydeque.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mydeque.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mydeque.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 200",
            "c) 300",
            "d) error"
        ],
        "Answer": " Answer: d\nExplanation: Segmentation fault will occur as we are trying to access the freed memory cell i.e. we are trying to access the element which is already deleted.\n"
    },
    {
        "id": 1389,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;deque&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        deque<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mydeque<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> sum <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mydeque.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"nu0\">30</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>mydeque.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> mydeque.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mydeque.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> sum <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 30",
            "d) 60"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are adding all the values in the queue.\nOutput:\n\n\n$ g++ seqc3.cpp\n$ a.out\n60\n\n\n"
    },
    {
        "id": 1390,
        "Question": "What is the use of adapter in STL in c++?",
        "Options": [
            "a) To provide interface",
            "b) To manipulate the data",
            "c) To extract the data",
            "d) To delete the data"
        ],
        "Answer": " Answer: a\nExplanation: Adapters are data types from STL that adapt a container to provide specific interface.\n"
    },
    {
        "id": 1391,
        "Question": "Which is used to iterate over container?",
        "Options": [
            "a) Associated iterator type",
            "b) Data type of objects",
            "c) Return type of variables",
            "d) Name of the variables"
        ],
        "Answer": " Answer: a\nExplanation: Associated iterator type is used to iterate over container.\n"
    },
    {
        "id": 1392,
        "Question": "What does the function objects implement?",
        "Options": [
            "a) operator",
            "b) operator()",
            "c) operand",
            "d) operand<>"
        ],
        "Answer": " Answer: b\nExplanation: Function objects are objects specifically designed to be used with a syntax similar to that of functions.\n"
    },
    {
        "id": 1393,
        "Question": "What are the two advantage of function objects than the function call?",
        "Options": [
            "a) It contains a state",
            "b) It is a type",
            "c) It contains a state & It is a type",
            "d) It contains a prototype"
        ],
        "Answer": " Answer: c\nExplanation: A function object can contain state. The second is that a function object is a type and therefore can be used as a template parameter.\n"
    },
    {
        "id": 1394,
        "Question": "Which header is need to be used with function objects?",
        "Options": [
            "a) <function>",
            "b) <functional>",
            "c) <funct>",
            "d) <functionstream>"
        ],
        "Answer": " Answer: b\nExplanation: <functional> header is need to be used with function objects.\n"
    },
    {
        "id": 1395,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> first<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">90</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> second<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> results<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        transform <span class=\"br0\">(</span> first, first <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, second, results, divides<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> results<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 20",
            "b) 20 30",
            "c) 10 20 30",
            "d) 20 40"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are dividing the first with the second by using function objects.\nOutput:\n\n\n        \n\n$ g++ funo.cpp\n$ a.out\n10 20 30\n\n\n"
    },
    {
        "id": 1396,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> numbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"sy2\">-</span><span class=\"nu0\">4</span>, <span class=\"sy2\">-</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        transform <span class=\"br0\">(</span> numbers, numbers <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>, numbers, negate<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) -3",
            "b) 3 4 5",
            "c) 3 -4 5",
            "d) -3 4 5"
        ],
        "Answer": " Answer: d\nExplanation: In this program, we have passed “numbers + 3” in transform function. The results of the transform function are stored in numbers(3rd parameter in func) array whose size is 3.\nOutput:\n\n\n\t\n\n$ g++ funo1.cpp\n$ a.out\n-3 4 5\n\n\n"
    },
    {
        "id": 1397,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector <span class=\"sy1\">&lt;</span>string<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span> numbers<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        numbers.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"kw3\">new</span> string <span class=\"br0\">(</span><span class=\"st0\">\"one\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        numbers.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"kw3\">new</span> string <span class=\"br0\">(</span><span class=\"st0\">\"two\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        numbers.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span> <span class=\"kw3\">new</span> string <span class=\"br0\">(</span><span class=\"st0\">\"three\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> lengths <span class=\"br0\">(</span> numbers.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        transform <span class=\"br0\">(</span>numbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, numbers.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, lengths.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, </pre></li><li class=\"li1\"><pre class=\"de1\">        mem_fun<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>string <span class=\"sy4\">::</span> <span class=\"me2\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> lengths<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 335",
            "b) 225",
            "c) 334",
            "d) 224"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We calculated the number of letters in every string by using function objects.\nOutput:\n\n\n$ g++ funo2.cpp\n$ a.out\n335\n\n\n"
    },
    {
        "id": 1398,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> numbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"sy2\">-</span><span class=\"nu0\">20</span>, <span class=\"sy2\">-</span><span class=\"nu0\">30</span>, <span class=\"nu0\">40</span>, <span class=\"sy2\">-</span><span class=\"nu0\">50</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> cx<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        cx <span class=\"sy1\">=</span> count_if <span class=\"br0\">(</span> numbers, numbers <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, bind2nd<span class=\"br0\">(</span>less<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> cx<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: d\nExplanation: Running the program will show above behaviour because we have given the value in for loop as 5 instead of 3.\n"
    },
    {
        "id": 1399,
        "Question": "Which are instances of a class with member function operator() when it is defined?",
        "Options": [
            "a) function objects",
            "b) member",
            "c) methods",
            "d) iterators"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are calculating the number of negative elements present in the program by using function objects.\nOutput:\n\n\n$ g++ funo3.cpp\n$ a.out\n3\n\n\n"
    },
    {
        "id": 1400,
        "Question": "How many parameters does a operator() in a function object shoud take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: Function objects are instances of a class with member function operator() defined. This member function allows the object to be used with the same syntax as a regular function call.\n"
    },
    {
        "id": 1401,
        "Question": "How does a sequence of objects are accessed in c++?",
        "Options": [
            "a) Iterators",
            "b) Pointers",
            "c) Both Iterators & Pointers",
            "d) Objects"
        ],
        "Answer": "Answer: c\nExplanation: A range is any sequence of objects that can be accessed through iterators or pointers, such as an array or an instance of some of the STL containers.\n"
    },
    {
        "id": 1402,
        "Question": "How many parameters are present in mismatch method in non-sequence modifying algorithm?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 3 or 4"
        ],
        "Answer": "Answer: d\nExplanation:  There are two definitions of mismatch with either three or four parameters. They are first1, last1, first2 and optional predicate.\n"
    },
    {
        "id": 1403,
        "Question": "What will happen in ‘all_of’ method if the range is empty?",
        "Options": [
            "a) Return true",
            "b) Return false",
            "c) Return nothing",
            "d) Return error"
        ],
        "Answer": "Answer: a\nExplanation: Returns true if pred returns true for all the elements in the range [first, last) or if the range is empty, and false otherwise.\n"
    },
    {
        "id": 1404,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> IsOdd <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy2\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">55</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> find_if <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, </pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, IsOdd<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 25",
            "c) 40",
            "d) 55"
        ],
        "Answer": "Answer: b\nExplanation: In this program, We are finding the elements which are mismatching in both the variables.\nOutput:\n\n\n\t\n\n$ g++ non.cpp\n$ a.out\n50\n1024\n\n\n"
    },
    {
        "id": 1405,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rotate<span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3 4",
            "b) 4 3 2 1",
            "c) 3 4 2 1",
            "d) 4 1 2 3"
        ],
        "Answer": "Answer: b\nExplanation: In this program, We used find_if method and returned the first odd value in the vector.\nOutput:\n\n\n$ g++ non1.cpp\n$ a.out\n25\n\n\n"
    },
    {
        "id": 1406,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> myfunction <span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i<span class=\"sy1\">==</span>j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it <span class=\"sy1\">=</span> unique <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>                                </pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">resize</span><span class=\"br0\">(</span> distance<span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, it<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        unique <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myfunction<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 20 30 20 10",
            "b) 10 20 30",
            "c) 30 20 10",
            "d) 40 20 30"
        ],
        "Answer": "Answer: d\nExplanation: In this program, We are rotating the vector values by 3, So it is printing this option.\nOutput:\n\n\n$ g++ non2.cpp\n$ a.out\n4 1 2 3\n\n\n"
    },
    {
        "id": 1407,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> mycount <span class=\"sy1\">=</span> count <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">8</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mycount<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mycount <span class=\"sy1\">=</span> count <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mycount<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 33",
            "b) 44",
            "c) 22",
            "d) 55"
        ],
        "Answer": "Answer: a\nExplanation: In this program, We are printing only the unique values by comparing every value.\nOutput:\n\n\n$ g++ non3.cpp\n$ a.out\n10 20 30 20 10\n\n\n"
    },
    {
        "id": 1408,
        "Question": "To what kind of elements does non-modifying sequence algorithm can be applied?",
        "Options": [
            "a) Range",
            "b) Vector",
            "c) List",
            "d) Methods"
        ],
        "Answer": "Answer: a\nExplanation: In this program, We are counting the number of 10’s and 20’s in the program.\nOutput:\n\n\n$ g++ non4.cpp\n$ a.out\n33\n\n\n"
    },
    {
        "id": 1409,
        "Question": "Pick out the incorrect method in non-modifying sequence algorithm?",
        "Options": [
            "a) find-if",
            "b) none-of",
            "c) any-of",
            "d) like"
        ],
        "Answer": "Answer: a\nExplanation: Non-modifying sequence algorithm can be applied to list and vector for example the “find” function can be applied to list and vector.\n"
    },
    {
        "id": 1410,
        "Question": "What is the use of middle parameter in the rotate method?",
        "Options": [
            "a) Marks the begining of a sequence",
            "b) Marks the ending of a sequence",
            "c) Marks the elements in a sequence",
            "d) Marks the digits in a sequence"
        ],
        "Answer": "Answer: c\nExplanation: Forward iterator pointing to the element within the range and that can be moved to the first position in the range.\n"
    },
    {
        "id": 1411,
        "Question": "What kind of object is modifying sequence algorithm?",
        "Options": [
            "a) Function template",
            "b) Class template",
            "c) Method",
            "d) Iterator"
        ],
        "Answer": "Answer: a\nExplanation: It is a group of functions and implemented under algorithm header file.\n"
    },
    {
        "id": 1412,
        "Question": "How the sequence of objects can be accessed?",
        "Options": [
            "a) Iterators",
            "b) Pointers",
            "c) Both Iterators & Pointers",
            "d) Library"
        ],
        "Answer": "Answer: c\nExplanation: A range is any sequence of objects that can be accessed through iterators or pointers, such as an array or an instance of some of the STL containers.\n"
    },
    {
        "id": 1413,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        fill <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        fill <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>,myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 5 5 5 0",
            "b) 8 8 8 8 0",
            "c) 5 8 5 8 0",
            "d) 5 5 5 5 5"
        ],
        "Answer": "Answer: a\nExplanation: In this program, We filled up all the vector values by using fill method.\nOutput:\n\n\n        \n\n$ g++ msa.cpp\n$ a.out\n5 5 5 5 0\n\n\n"
    },
    {
        "id": 1414,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"br0\">{</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">50</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        iter_swap<span class=\"br0\">(</span>myints, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        iter_swap<span class=\"br0\">(</span>myints <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>,myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 10 40",
            "c) 10 99 40 99",
            "d) 99 40 10"
        ],
        "Answer": "Answer: c\nExplanation: In this program, We are swapping the certain values in two vectors by using iter_swap.\nOutput:\n\n\n\t\n\n$ g++ msa1.cpp\n$ a.out\n10 99 40 99\n\n\n"
    },
    {
        "id": 1415,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> op_increase <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"sy2\">++</span>i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        a.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        b.<span class=\"me1\">resize</span><span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        transform <span class=\"br0\">(</span>a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, op_increase<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        transform <span class=\"br0\">(</span>a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, plus<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 21",
            "b) 41",
            "c) 61",
            "d) 21 41 61"
        ],
        "Answer": "Answer: d\nExplanation: In this program, We allocated the values to the vector and then by using transform function, We increased the values.\nOutput:\n\n\n$ g++ msa2.cpp\n$ a.out\n21 41 61\n\n\n"
    },
    {
        "id": 1416,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> pbegin <span class=\"sy1\">=</span> myints<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span><span class=\"sy2\">*</span> pend <span class=\"sy1\">=</span> myints <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>myints<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pend <span class=\"sy1\">=</span> <span class=\"kw3\">remove</span> <span class=\"br0\">(</span>pbegin, pend, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> pbegin<span class=\"sy4\">;</span> p <span class=\"sy3\">!</span><span class=\"sy1\">=</span> pend<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>p<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 20 30",
            "b) 10 30 30 10 10",
            "c) 10 20 30 30",
            "d) 40 20 10 20"
        ],
        "Answer": "Answer: b\nExplanation: In this program, We removed the values in the vector by using the remove method.\nOutput:\n\n\n$ g++ msa3.cpp\n$ a.out\n10 30 30 10 10\n\n\n"
    },
    {
        "id": 1417,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span> ,<span class=\"nu0\">40</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> find <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy2\">--</span>p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>p <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 30",
            "d) 40"
        ],
        "Answer": "Answer: b\nExplanation: In this program, We used the find method to find the value before 20.\nOutput:\n\n\n$ g++ msa4.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 1418,
        "Question": "How many kind of operation can be applied to transform method in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two kinds of operations. They are unary and binary operation.\n"
    },
    {
        "id": 1419,
        "Question": "What operator is used to remove the dupplicates in the range?",
        "Options": [
            "a) )",
            "b) ^",
            "c) %",
            "d) =="
        ],
        "Answer": "Answer: d\nExplanation: The function uses operator== to compare the pairs of elements.\n"
    },
    {
        "id": 1420,
        "Question": "What is meant by sequence point?",
        "Options": [
            "a) Represent the point of execution in the program",
            "b) Represent the whole program",
            "c) Represent the beginning of the program",
            "d) Represent the end of the program"
        ],
        "Answer": "Answer: a\nExplanation: A sequence point defines any point in a computer program’s execution at which it is guaranteed that all side effects of previous evaluations have been performed.\n"
    },
    {
        "id": 1421,
        "Question": "Pick out the correct statement about sequence point.",
        "Options": [
            "a) Sequence point will compile the program",
            "b) Sequence point will resolve all the side effects",
            "c) Sequence point will save the program for execution",
            "d) Sequence point will delete the program for execution"
        ],
        "Answer": "Answer: b\nExplanation: Sequence point is a point in time at which the dust has settled and all side effects which have been seen so far are guaranteed to be complete.\n"
    },
    {
        "id": 1422,
        "Question": "In sequence point, how will the overloaded operators behave like?",
        "Options": [
            "a) Function",
            "b) Objects",
            "c) Instance variable",
            "d) Container"
        ],
        "Answer": "Answer: a\nExplanation: In sequence point, the overloaded operators behave like a function.\n"
    },
    {
        "id": 1423,
        "Question": "What do input and output objects support?",
        "Options": [
            "a) Terminated sequences",
            "b) Extracted sequences",
            "c) Null-terminated sequences",
            "d) Terminated & Extracted sequences"
        ],
        "Answer": "Answer: c\nExplanation: cin and cout support null-terminated sequences as valid containers for sequences of characters.\n"
    },
    {
        "id": 1424,
        "Question": "What kind of execution does sequence point allow?",
        "Options": [
            "a) Non-overlap",
            "b) Overlap",
            "c) Concurrent",
            "d) Sequence"
        ],
        "Answer": "Answer: a\nExplanation: To resolve all the side-effects in the program, the sequence point should not be overlapped.\n"
    },
    {
        "id": 1425,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string mys<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> mya<span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy1\">=</span> <span class=\"st0\">\"Hello world\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mys <span class=\"sy1\">=</span> mya<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mys <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Hello world",
            "b) Hello",
            "c) Error",
            "d) Runtime error"
        ],
        "Answer": "Answer: a\nExplanation: In this program, We converted the char values into the string.\nOutput:\n\n\n\t\n\n$ g++ sts.cpp\n$ a.out\nHello world\n\n\n"
    },
    {
        "id": 1426,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> IsOdd <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy2\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> bound<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        bound <span class=\"sy1\">=</span> partition <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, IsOdd<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> bound<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 3 5",
            "b) 1 3 9",
            "c) 1 9 3 7",
            "d) 1 9 3 7 5"
        ],
        "Answer": "Answer: d\nExplanation: In this program, We are finding the odd values in the sequence.\nOutput:\n\n\n$ g++ sts1.cpp\n$ a.out\n1 9 3 7 5\n\n\n"
    },
    {
        "id": 1427,
        "Question": "When does the next sequence point start?",
        "Options": [
            "a) At the beginning",
            "b) After a terminating semicolon",
            "c) It is a beginning statement",
            "d) At the end"
        ],
        "Answer": "Answer: b\nExplanation: After a terminating semicolon the next sequence point start.\n"
    },
    {
        "id": 1428,
        "Question": "What is meant by heap?",
        "Options": [
            "a) Used for fast retrieval of elements",
            "b) Used for organising the elements",
            "c) Used for fast retrieval & organising the elements",
            "d) Used for deleting the elements"
        ],
        "Answer": "Answer: c\nExplanation: A heap is a way to organize the elements of a range that allows for fast retrieval of the element.\n"
    },
    {
        "id": 1429,
        "Question": "Which value is pointed out first in heap?",
        "Options": [
            "a) Lowest value",
            "b) Highest value",
            "c) First value",
            "d) Third value"
        ],
        "Answer": "Answer: b\nExplanation: The element with the highest value is always pointed by first.\n"
    },
    {
        "id": 1430,
        "Question": "Which operator is used to compare the elements in heap?",
        "Options": [
            "a) >>",
            "b) comp",
            "c) <",
            "d) Both comp &<"
        ],
        "Answer": "Answer: d\nExplanation: The elements in the heap are compared using operator< (for the first version), or comp (for the second version).\n"
    },
    {
        "id": 1431,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">15</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        make_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pop_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> v.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> push_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> v.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 10",
            "b) 5 10 15 20",
            "c) 5 10 15 20 99",
            "d) 10 15 20 65"
        ],
        "Answer": "Answer: c\nExplanation: In this program, We popped out 30 and pushed 99 and then we are sorting that value, So it is printing it.\nOutput:\n\n\n        \n\n$ g++ heap.cpp\n$ a.out\n5 10 15 20 99\n\n\n"
    },
    {
        "id": 1432,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span> ,<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        push_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> v.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 33",
            "c) 3",
            "d) 44"
        ],
        "Answer": "Answer: b\nExplanation: In this program, We are pushing a new value into heap and printing it.\nOutput:\n\n\n\t\n\n$ g++ heap1.cpp\n$ a.out\n33\n\n\n"
    },
    {
        "id": 1433,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        make_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> v.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 4",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: In this program, We are printing the maximum value in the heap.\nOutput:\n\n\n$ g++ heap2.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 1434,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> myfunction <span class=\"br0\">(</span><span class=\"kw4\">int</span> i,<span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i<span class=\"sy1\">&lt;</span>j<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">9</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        partial_sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        partial_sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, </pre></li><li class=\"li1\"><pre class=\"de1\">        myfunction<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 6 7",
            "b) 5 6 7 9 8",
            "c) 9 8 7 6 5",
            "d) 8 5 6 7 4"
        ],
        "Answer": "Answer: b\nExplanation: In this program, We are partitioning the value by using the partial_sort method.\nOutput:\n\n\n$ g++ heap3.cpp\n$ a.out\n5 6 7 9 8\n\n\n"
    },
    {
        "id": 1435,
        "Question": "How to protect the heap from affecting the memory?",
        "Options": [
            "a) Avoid using pointers for associating two data structures",
            "b) Embed pointed child objects into the parent object",
            "c) Allocate objects in chunks",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Steps to protect the heap from affecting the memory.\n-> Avoid using pointers for associating two data structures\n-> Embed pointed child objects into the parent object\n-> Allocate objects in chunks.\n"
    },
    {
        "id": 1436,
        "Question": "In what form does the STL provides heap?",
        "Options": [
            "a) queue",
            "b) list",
            "c) vector",
            "d) priority_queue"
        ],
        "Answer": "Answer: d\nExplanation: STL does provide a heap in the form of a std::priority_queue.\n"
    },
    {
        "id": 1437,
        "Question": "How many types are there in binary heaps?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two types of heaps. They are min and max heap.\n"
    },
    {
        "id": 1438,
        "Question": "Which keyword is used to declare the min and max functions?",
        "Options": [
            "a) iostream",
            "b) string",
            "c) algorithm",
            "d) iterator"
        ],
        "Answer": " Answer: c\nExplanation: Algorithm header file contains the supporting files needed for the execution of these functions.\n"
    },
    {
        "id": 1439,
        "Question": "What kind of functions are min and max in c++?",
        "Options": [
            "a) Type specific",
            "b) Variable specific",
            "c) Type & Variable specific",
            "d) Iterator"
        ],
        "Answer": " Answer: a\nExplanation: The min/max functions are type specific but they will not force everything to be converted to/from floating point. The functions that will force everything to be converted to/from floating point are fmin/fmax.\n"
    },
    {
        "id": 1440,
        "Question": "How many parameters are needed for minmax function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) All of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: The “minmax” function can take the following:\n1 parameter: An initializer_list object.\n2 parameters: Values to compare.\n2 parameters: An initializer_list object. and comparison function\n3 parameters: Values to compare. and comparison function\n"
    },
    {
        "id": 1441,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;   </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;  </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"max(1, 2) == \"</span> <span class=\"sy1\">&lt;&lt;</span> max<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"max('a', 'z') == \"</span> <span class=\"sy1\">&lt;&lt;</span> max<span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'z'</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2z",
            "b) 2a",
            "c) Error",
            "d) 2y"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We found the max value in the given value by using max function.\nOutput:\n\n\n        \n\n$ g++ max.cpp\n$ a.out\nmax(1, 2) == 2\nmax('a', 'z') == z\n\n\n"
    },
    {
        "id": 1442,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> myfn<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> i <span class=\"sy1\">&lt;</span> j<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span>  <span class=\"sy2\">*</span>min_element<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">7</span>, myfn<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>max_element<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">7</span>, myfn<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2 9",
            "b) 2 7",
            "c) 3 9",
            "d) 3 5"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We found out the minimum value and maximum value\nof a range.\nOutput:\n\n\n\t\n\n$ g++ max1.cpp\n$ a.out\n2 \n9\n\n\n"
    },
    {
        "id": 1443,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> low, up<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        low <span class=\"sy1\">=</span> lower_bound <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        up <span class=\"sy1\">=</span> upper_bound <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>low <span class=\"sy2\">-</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>up <span class=\"sy2\">-</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3 6",
            "b) 2 5",
            "c) 2 6",
            "d) 2 4"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are finding the upper bound and lower bound values by using lower_bound and upper_bound methods.\nOutput:\n\n\n$ g++ max2.cpp\n$ a.out\n3 6\n\n\n"
    },
    {
        "id": 1444,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> min<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> min<span class=\"br0\">(</span><span class=\"st0\">'m'</span>,<span class=\"st0\">'m'</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) Runtime error",
            "c) 1 m",
            "d) 5 m"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are finding the minimum value by using min method.\nOutput:\n\n\n$ g++ max3.cpp\n$ a.out\n1 m\n\n\n"
    },
    {
        "id": 1445,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> mygreater <span class=\"br0\">(</span><span class=\"kw4\">int</span> i,<span class=\"kw4\">int</span> j<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&gt;</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pair<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span>, vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span><span class=\"sy1\">&gt;</span> bounds<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        bounds <span class=\"sy1\">=</span> equal_range <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>bounds.<span class=\"me1\">first</span> <span class=\"sy2\">-</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>bounds.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3 and 6",
            "b) 2 and 5",
            "c) 3 and 5",
            "d) 2 and 4"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are finding out the equal range in the vector.\nOutput:\n\n\n$ g++ max4.cpp\n$ a.out\n3 and 6\n\n\n"
    },
    {
        "id": 1446,
        "Question": "Which function is used to return the minimum element in the range?",
        "Options": [
            "a) min",
            "b) minimum",
            "c) min_element",
            "d) max_element"
        ],
        "Answer": " Answer: c\nExplanation: The min_element is used to compare the range of elements and it can find out the minimum element.\n"
    },
    {
        "id": 1447,
        "Question": "Which operator is used to compare the values to find min and max?",
        "Options": [
            "a) <",
            "b) >",
            "c) <<",
            "d) >>"
        ],
        "Answer": " Answer: a\nExplanation: Less than(<) operator is sufficient to compare any two elements in heap and construct respective min or max heap accordingly.\n"
    },
    {
        "id": 1448,
        "Question": "What is meant by permutation in c++?",
        "Options": [
            "a) To find all the values in the range",
            "b) To find all the combination of the range",
            "c) To find all the values & combination in the range",
            "d) To delete all the values"
        ],
        "Answer": " Answer: b\nExplanation: The permutation is used to find all the combination of numbers in the range.\n"
    },
    {
        "id": 1449,
        "Question": "How the different permutations are ordered in c++?",
        "Options": [
            "a) Compare lexicographically to each other elements",
            "b) By finding the highest element in the range",
            "c) By finding the lowest element in the range",
            "d) By deleting the lowest element in the range"
        ],
        "Answer": " Answer: a\nExplanation: In c++ permutations can be ordered by comparing lexicographically to each other elements.\n"
    },
    {
        "id": 1450,
        "Question": "Pick out the correct statement about permutation.",
        "Options": [
            "a) If the function can determine the next higher permutation, Returns false",
            "b) If the function can determine the next higher permutation, Returns true",
            "c) If the function can’t determine the next higher permutation, Returns true",
            "d) If the function can determine the lower higher permutation, Returns true"
        ],
        "Answer": "Answer: b\nExplanation: If the function can determine the next higher permutation, it rearranges the elements as such and returns true.\n"
    },
    {
        "id": 1451,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> string_permutation<span class=\"br0\">(</span> string<span class=\"sy3\">&amp;</span> orig, string<span class=\"sy3\">&amp;</span> perm <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>orig.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>perm<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> orig.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            string orig2 <span class=\"sy1\">=</span> orig<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            orig2.<span class=\"me1\">erase</span><span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            string perm2 <span class=\"sy1\">=</span> perm<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            perm2 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> orig.<span class=\"me1\">at</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            string_permutation<span class=\"br0\">(</span>orig2, perm2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string orig <span class=\"sy1\">=</span> <span class=\"st0\">\"ter\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string perm<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string_permutation<span class=\"br0\">(</span>orig, perm<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ter",
            "b) ert",
            "c) ret",
            "d) returns all the combination of ter"
        ],
        "Answer": " Answer: d\nExplanation: In the program, We used string permutation to find out all the combination.\nOutput:\n\n\n        \n\n$ g++ perm.cpp\n$ a.out\nter\ntre\netr\nert\nrte\nret\n\n\n"
    },
    {
        "id": 1452,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">do</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> next_permutation<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> myints<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> myints<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> myints<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 2 3",
            "b) 3 2 1",
            "c) 2 1 3",
            "d) 1 3 2"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are doing the permutation in the do while loop and then printing last permuted value.\nOutput:\n\n\n\t\n\n$ g++ perm1.cpp\n$ a.out\n1 2 3\n\n\n"
    },
    {
        "id": 1453,
        "Question": "What is the header file for vector permutation?",
        "Options": [
            "a) vector_permutation.h",
            "b) vector_perm",
            "c) <algorithm>",
            "d) vector_permutation"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We find out the permutation of two numbers by using sort.\nOutput:\n\n\n$ g++ perm3.cpp\n$ a.out\n5 3\n3 5\n\n\n"
    },
    {
        "id": 1454,
        "Question": "How many parameters are required for next_permutation?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 2 or 3",
            "d) 3"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are finding the permutation for the given value.\nOutput:\n\n\n$ g++ perm4.cpp\n$ a.out\n355\n535\n553\n\n\n"
    },
    {
        "id": 1455,
        "Question": "Pick out the in correct type of function in <algorithm> header file.",
        "Options": [
            "a) Partitions",
            "b) Sort",
            "c) Merge",
            "d) Join"
        ],
        "Answer": " Answer: d\nExplanation: First three type of options are available in <algorithm> header file.\n"
    },
    {
        "id": 1456,
        "Question": "What type of algorithm is not available in creating our own STL style algorithms?",
        "Options": [
            "a) copy_if()",
            "b) remove_copy_if()",
            "c) sort",
            "d) remove_copy()"
        ],
        "Answer": " Answer: a\nExplanation: copy_if() algorithm is not available in creating our own STL style algorithms.\n"
    },
    {
        "id": 1457,
        "Question": "What is meant by hash tables in C++?",
        "Options": [
            "a) Array data structure",
            "b) Keyed array data structure",
            "c) Data structure",
            "d) Linear probing"
        ],
        "Answer": " Answer: b\nExplanation: In hash table, every value will have a key, So that it can be accessed easily.\n"
    },
    {
        "id": 1458,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">15</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        make_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pop_heap <span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> v.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 30",
            "d) 5"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are forming a heap with the vector and then we are popping one element and finding the maximum element in the heap.\nOutput:\n\n\n        \n\n$ g++ style.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 1459,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> first<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">25</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> second<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">50</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>first, first <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>second, second <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it <span class=\"sy1\">=</span> set_union <span class=\"br0\">(</span>first, first <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, second, second <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">resize</span><span class=\"br0\">(</span>it<span class=\"sy2\">-</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>it <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 10 15",
            "b) 20 25 30",
            "c) 40 50",
            "d) 20 25"
        ],
        "Answer": " Answer: d\nExplanation: In this kind of style algorithm, We are finding the elements in the both the vector by using set_union function.\nOutput:\n\n\n\t\n\n$ g++ style1.cpp\n$ a.out\n5 10 15 20 25 30 40 50\n\n\n"
    },
    {
        "id": 1460,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> myfunction <span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> myclass <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> myobject<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myfunction<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myobject<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 8 9 10",
            "b) 10 8 9",
            "c) 9 8 10",
            "d) 10 8 8"
        ],
        "Answer": " Answer: a\nExplanation: In this style algorithm, We have sorted the elements in the vector by using the sort method.\nOutput:\n\n\n$ g++ style2.cpp\n$ a.out\n8 9 10\n\n\n"
    },
    {
        "id": 1461,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">bool</span> myfunction <span class=\"br0\">(</span><span class=\"kw4\">int</span> i,<span class=\"kw4\">int</span> j<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> j<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> myints<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">9</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector <span class=\"br0\">(</span>myints, myints <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        partial_sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        partial_sort <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,</pre></li><li class=\"li1\"><pre class=\"de1\">        myfunction<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6 7 8 9",
            "b) 9 8 6 7",
            "c) 6 7 9 8",
            "d) 9 8 5 7"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are partial sorting the vector by using the partial sort method.\nOutput:\n\n\n$ g++ style3.cpp\n$ a.out\n6 7 9 8\n\n\n"
    },
    {
        "id": 1462,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> first<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> second<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">50</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">30</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>first, first <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        sort <span class=\"br0\">(</span>second, second <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it <span class=\"sy1\">=</span> set_symmetric_difference <span class=\"br0\">(</span>first, first <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, second, second <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, </pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        v.<span class=\"me1\">resize</span><span class=\"br0\">(</span>it <span class=\"sy2\">-</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>it <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 10",
            "b) 30 40",
            "c) 50 40",
            "d) 5 10 30 40"
        ],
        "Answer": " Answer: d\nExplanation: In this style algorithm, We are finding the symmetric difference between the vectors and printing it.\nOutput:\n\n\n$ g++ style4.cpp\n$ a.out\n5 10 30 40\n\n\n"
    },
    {
        "id": 1463,
        "Question": "What is the use of includes function in c++?",
        "Options": [
            "a) Compares two ranges of data",
            "b) Compares two sorted ranges of data",
            "c) Includes a new element in the range",
            "d) Includes a new element in the end"
        ],
        "Answer": " Answer: b\nExplanation: Returns true if the first sorted range contains all the elements in the second sorted range.\n"
    },
    {
        "id": 1464,
        "Question": "How many parameters are required for sort_heap function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 2 or 3",
            "d) 3"
        ],
        "Answer": " Answer: c\nExplanation: There are three parameters required for sort_heap. There are first element in heap and last element in heap and an optional compare.\n"
    },
    {
        "id": 1465,
        "Question": "How many categories of iterators are there in c++?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 5",
            "d) 3"
        ],
        "Answer": " Answer: c\nExplanation: There are five types of iterators. They are Output, Input, Forward, Random access and Bi-directional.\n"
    },
    {
        "id": 1466,
        "Question": "Which of the following can serve as random-access iterator?",
        "Options": [
            "a) Memory pointer",
            "b) Object pointer",
            "c) Class pointer",
            "d) Memory & Class pointer"
        ],
        "Answer": " Answer: b\nExplanation: Because of this, It can serve as any category of iterator.\n"
    },
    {
        "id": 1467,
        "Question": "What kind of pattern is iterator pattern?",
        "Options": [
            "a) Design pattern",
            "b) Sequence pattern",
            "c) Adapter pattern",
            "d) Star pattern"
        ],
        "Answer": " Answer: a\nExplanation: Iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container’s elements.\n"
    },
    {
        "id": 1468,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;set&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> tst<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        tst.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        tst.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        tst.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        tst.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        set<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">const_iterator</span> pos<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span>pos <span class=\"sy1\">=</span> tst.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> pos <span class=\"sy3\">!</span><span class=\"sy1\">=</span> tst.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>pos<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>pos <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12 21 32 31",
            "b) 12 21 31 32",
            "c) 12 21 32",
            "d) 12 21 31"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are using const_iterator to sort the data\nin the set.\nOutput:\n\n\n        \n\n$ g++ itr.cpp\n$ a.out\n12 21 31 32\n\n\n"
    },
    {
        "id": 1469,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        myvector.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> myvector.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> myvector<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5 6 7 8 9",
            "b) 5 6 8 9 10",
            "c) 6 7 8 9 10",
            "d) 4 7 5 9 10"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are erasing the values in the vector based on the given condition.\nOutput:\n\n\n\t\n\n$ g++ itr1.cpp\n$ a.out\n5 6 8 9 10\n\n\n"
    },
    {
        "id": 1470,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;list&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mylist<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        mylist.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> mylist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        advance <span class=\"br0\">(</span>it, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>  <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 30",
            "b) 40",
            "c) 50",
            "d) 60"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are printing the sixth element in the list.\nOutput:\n\n\n$ g++ itr2.cpp\n$ a.out\n50\n\n\n"
    },
    {
        "id": 1471,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;list&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> firstlist, secondlist<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>  </pre></li><li class=\"li1\"><pre class=\"de1\">            firstlist.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            secondlist.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        it <span class=\"sy1\">=</span> firstlist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        advance <span class=\"br0\">(</span>it, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        copy <span class=\"br0\">(</span>secondlist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, secondlist.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, inserter<span class=\"br0\">(</span>firstlist, it<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> it <span class=\"sy1\">=</span> firstlist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> firstlist.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10 20 1 2",
            "b) 10 20",
            "c) 1 2",
            "d) 1 10"
        ],
        "Answer": " Answer: a\nExplanation: In this iterator, We are copying the first list into second and printing it.\nOutput:\n\n\n$ g++ itr3.cpp\n$ a.out\n10 20 1 2\n\n\n"
    },
    {
        "id": 1472,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;list&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mylist<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            mylist.<span class=\"me1\">push_back</span> <span class=\"br0\">(</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> first <span class=\"sy1\">=</span> mylist.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        list<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> last <span class=\"sy1\">=</span> mylist.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> distance<span class=\"br0\">(</span>first, last<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 20",
            "b) 100",
            "c) 5",
            "d) 15"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are printing the number of elements in the list by using distance method.\nOutput:\n\n\n$ g++ itr4.cpp\n$ a.out\n5\n\n\n"
    },
    {
        "id": 1473,
        "Question": "In which type of semantics does c++ implements iterator?",
        "Options": [
            "a) Memory",
            "b) Size",
            "c) Pointer",
            "d) Value"
        ],
        "Answer": " Answer: c\nExplanation: C++ uses pointer arithmetic/semantic to implement iterators.\n"
    },
    {
        "id": 1474,
        "Question": "What is the use of checked iterators?",
        "Options": [
            "a) Overwrite the bounds of your container",
            "b) Not allow you to overwrite the bounds of your container",
            "c) It will check the list value",
            "d) Overwrite the bounds of your iterators"
        ],
        "Answer": " Answer: b\nExplanation: Checked iterators ensure that you do not overwrite the bounds of your container.\n"
    },
    {
        "id": 1475,
        "Question": "What will happen if the iterator is unchecked?",
        "Options": [
            "a) Arising of compiler warnings",
            "b) Unchecked behavior on program",
            "c) Nothing will execute",
            "d) Arising of compiler warnings & Unchecked behavior on program"
        ],
        "Answer": " Answer: d\nExplanation: We will get unchecked behavior on calls to an unchecked function and Calls to the standard function will result in compiler warnings.\n"
    },
    {
        "id": 1476,
        "Question": "How many adaptors support the checked iterators?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two adaptors that support checked iterators. They are checked_array_iterator class, Checked_iterator class.\n"
    },
    {
        "id": 1477,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;typeinfo&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdexcept&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> vec<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> vec<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            i <span class=\"sy1\">=</span> vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>exception <span class=\"sy3\">&amp;</span>e<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Caught: \"</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Type: \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span> e <span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Unknown exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 100",
            "c) Exception",
            "d) Error"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are pushing the 10th element and printing it.\nOutput:\n\n\n        \n\n$ g++ chei.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 1478,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;map&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            map<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mymap<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            map<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mymap<span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mymap<span class=\"br0\">[</span><span class=\"st0\">'b'</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mymap<span class=\"br0\">[</span><span class=\"st0\">'c'</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">150</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mymap<span class=\"br0\">[</span><span class=\"st0\">'d'</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            it <span class=\"sy1\">=</span> mymap.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">'b'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mymap.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            mymap.<span class=\"me1\">erase</span> <span class=\"br0\">(</span>mymap.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">'d'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mymap.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> second <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Unknown exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) 100",
            "c) 150",
            "d) Exception"
        ],
        "Answer": " Answer: a\nExplanation: In this program ,We are finding the element a and printing it.\nOutput:\n\n\n\t\n\n$ g++ chei1.cpp\n$ a.out\n50\n\n\n"
    },
    {
        "id": 1479,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">try</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw4\">double</span> value1, value2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            istream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> eos<span class=\"sy4\">;</span>       </pre></li><li class=\"li1\"><pre class=\"de1\">            istream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> iit <span class=\"br0\">(</span><span class=\"kw3\">cin</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>   </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iit <span class=\"sy3\">!</span><span class=\"sy1\">=</span> eos<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                value1 <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>iit<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            iit<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iit <span class=\"sy3\">!</span><span class=\"sy1\">=</span> eos<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                value2 <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>iit<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>value1 <span class=\"sy2\">*</span> value2<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>...<span class=\"br0\">)</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Unknown exception: \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">   <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 45",
            "c) It will print the multiplied value of the input",
            "d) Exception"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We got the input by using istream iterator and we are manipulating in.\nOutput:\n\n\n$ g++ chei2.cpp\n$ a.out\n3\n4\n12\n\n\n"
    },
    {
        "id": 1480,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ostream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> out_it <span class=\"br0\">(</span><span class=\"kw3\">cout</span>,<span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        copy <span class=\"br0\">(</span> myvector.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, myvector.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, out_it <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10, 20, 30",
            "b) 10, 20",
            "c) 10, 20, 30,",
            "d) 30, 15, 10"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are producing the values by vector and printing it by using ostream iterator.\nOutput:\n\n\n$ g++ chei3.cpp\n$ a.out\n10, 20, 30,\n\n\n"
    },
    {
        "id": 1481,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iterator&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> myvector<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            myvector.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">typedef</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> iter_int<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        reverse_iterator<span class=\"sy1\">&lt;</span>iter_int<span class=\"sy1\">&gt;</span> rev_iterator<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        rev_iterator <span class=\"sy1\">=</span> myvector.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>rev_iterator <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are using the referencing operator and it can print the value currently pointing it.\nOutput:\n\n\n$ g++ chei4.cpp\n$ a.out\n3\n\n\n"
    },
    {
        "id": 1482,
        "Question": "What does the checked iterator allow you to find?",
        "Options": [
            "a) Warnings",
            "b) Compile time error",
            "c) Run time error",
            "d) Warnings & Run time error"
        ],
        "Answer": " Answer: c\nExplanation: Checked iterator allow you to find Run time error.\n"
    },
    {
        "id": 1483,
        "Question": "What kind of errors do checked iterators detect?",
        "Options": [
            "a) Uninitialized iterators",
            "b) Initialized iterators",
            "c) Range access",
            "d) Both Uninitialized iterators and range access"
        ],
        "Answer": " Answer: d\nExplanation: Checked iterators can easily detect the errors in Uninitialized iterators as well as Range of access.\n"
    },
    {
        "id": 1484,
        "Question": "Where are allocators used?",
        "Options": [
            "a) Allocation of memory",
            "b) Deallocation of memory",
            "c) Used for pointers",
            "d) Both Allocation & Deallocation of memory"
        ],
        "Answer": " Answer: d\nExplanation: Allocators handle all the request for allocation and deallocation of memory for the container.\n"
    },
    {
        "id": 1485,
        "Question": "Where are allocators implemented?",
        "Options": [
            "a) Template library",
            "b) Standard library",
            "c) C++ code library",
            "d) String library"
        ],
        "Answer": " Answer: b\nExplanation: Allocators are implemented in C++ standard library but it is used for C++ template library.\n"
    },
    {
        "id": 1486,
        "Question": "Which operator is used to allocate the memory?",
        "Options": [
            "a) =",
            "b) +",
            "c) new",
            "d) free"
        ],
        "Answer": " Answer: c\nExplanation: The default allocator uses operator new to allocate memory.\n"
    },
    {
        "id": 1487,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;memory&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;algorithm&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> numbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pair <span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span>, <span class=\"kw4\">ptrdiff_t</span><span class=\"sy1\">&gt;</span> result <span class=\"sy1\">=</span> get_temporary_buffer<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result.<span class=\"me1\">second</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            uninitialized_copy <span class=\"br0\">(</span>numbers, numbers <span class=\"sy2\">+</span> result.<span class=\"me1\">second</span>, result.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            sort <span class=\"br0\">(</span>result.<span class=\"me1\">first</span>, result.<span class=\"me1\">first</span> <span class=\"sy2\">+</span> result.<span class=\"me1\">second</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> result.<span class=\"me1\">second</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result.<span class=\"me1\">first</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            return_temporary_buffer <span class=\"br0\">(</span>result.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 5 5 4",
            "b) 5 5 4 1",
            "c) 1 4 5 5",
            "d) 1 4 5 2"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are sorting the array by using the allocator.\nOutput:\n\n\n        \n\n$ g++ all.cpp\n$ a.out\n1 4 5 5\n\n\n"
    },
    {
        "id": 1488,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;memory&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string numbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"steve\"</span>, <span class=\"st0\">\"jobs\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pair <span class=\"sy1\">&lt;</span>string<span class=\"sy2\">*</span>, <span class=\"kw4\">ptrdiff_t</span><span class=\"sy1\">&gt;</span> result <span class=\"sy1\">=</span> get_temporary_buffer<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result.<span class=\"me1\">second</span><span class=\"sy1\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            uninitialized_copy <span class=\"br0\">(</span> numbers, numbers <span class=\"sy2\">+</span> result.<span class=\"me1\">second</span>, result.<span class=\"me1\">first</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> result.<span class=\"me1\">second</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result.<span class=\"me1\">first</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            return_temporary_buffer<span class=\"br0\">(</span>result.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) steve",
            "b) jobs",
            "c) jobs steve",
            "d) steve jobs"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are storing the string and retrieving the string by using get_temporary_method.\nOutput:\n\n\n\t\n\n$ g++ all1.cpp\n$ a.out\nsteve jobs\n\n\n"
    },
    {
        "id": 1489,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;memory&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pair <span class=\"sy1\">&lt;</span>string<span class=\"sy2\">*</span>, <span class=\"kw4\">ptrdiff_t</span><span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">       result <span class=\"sy1\">=</span> get_temporary_buffer<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result.<span class=\"me1\">second</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            uninitialized_fill <span class=\"br0\">(</span> result.<span class=\"me1\">first</span>, result.<span class=\"me1\">first</span> <span class=\"sy2\">+</span> result.<span class=\"me1\">second</span>, </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"st0\">\"Hai\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span>result.<span class=\"me1\">second</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result.<span class=\"me1\">first</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            return_temporary_buffer<span class=\"br0\">(</span>result.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Hai",
            "b) HaiHai",
            "c) HaiHaiHai",
            "d) HaiH"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We storing the string in the string buffer and then we are printing it.\nOutput:\n\n\n$ g++ all2.cpp\n$ a.out\nHaiHaiHai\n\n\n"
    },
    {
        "id": 1490,
        "Question": "Which operator is used to deallocate the memory?",
        "Options": [
            "a) destroy",
            "b) free",
            "c) empty",
            "d) insert"
        ],
        "Answer": " Answer: b\nExplanation: free operator is used to deallocate the memory.\n"
    },
    {
        "id": 1491,
        "Question": "Which header file is used to manipulate the allocater?",
        "Options": [
            "a) allocater",
            "b) memory",
            "c) object",
            "d) iterator"
        ],
        "Answer": " Answer: b\nExplanation: Because all the memory allocation and deallocation libraries are declared in <memory>.\n"
    },
    {
        "id": 1492,
        "Question": "What is the use of reference member type in allocator?",
        "Options": [
            "a) Point to an element",
            "b) Quantities of element",
            "c) Reference to an element",
            "d) Sequence of an element"
        ],
        "Answer": " Answer: c\nExplanation: free() function is used to free the memory used by the program.\neg,\nint *p = (int*) malloc(sizeof(int));  //allocation of memory.\nfree(p);    // freeing the memory occupied by pointer p.\n"
    },
    {
        "id": 1493,
        "Question": "What is the correct syntax for declaring an allocator?",
        "Options": [
            "a) template  < class T  > class allocator;",
            "b) template  < class T  > class;",
            "c) template class allocator;",
            "d) template class()"
        ],
        "Answer": " Answer: a\nExplanation: It is a type of syntax for declaring the allocater.\n"
    },
    {
        "id": 1494,
        "Question": "What are Iterators?",
        "Options": [
            "a) STL component used to point a memory address of a container",
            "b) STL component used for vectors",
            "c) STL component used to call functions efficiently",
            "d) STL component used to define template classes"
        ],
        "Answer": "Answer: a\nExplanation: Iterators are STL components used to point a memory address of a container. They are used to iterate over container classes."
    },
    {
        "id": 1495,
        "Question": "Which function is used increment the iterator by a particular value?",
        "Options": [
            "a) next()",
            "b) advance()",
            "c) prev()",
            "d) move()"
        ],
        "Answer": "Answer: b\nExplanation: advance() function is used to increment an iterator by a given value. "
    },
    {
        "id": 1496,
        "Question": "3. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt; </span>\n<span class=\"co2\">#include&lt;iterator&gt; </span>\n<span class=\"co2\">#include&lt;vector&gt; </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ar <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> ptr <span class=\"sy1\">=</span> ar.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n    advance<span class=\"br0\">(</span>ptr, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> \n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5"
        ],
        "Answer": "Answer: b\nExplanation: Initially the ptr is pointing to first element of vector and now as we are advancing the iterator by 2 which takes the iterator the value 3. Hence the output is 3.\nOutput:\n$ ./a.out \n3\n"
    },
    {
        "id": 1497,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt; </span>\n<span class=\"co2\">#include&lt;iterator&gt; </span>\n<span class=\"co2\">#include&lt;vector&gt; </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ar <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> ptr <span class=\"sy1\">=</span> ar.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n    ptr <span class=\"sy1\">=</span> advance<span class=\"br0\">(</span>ptr, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> \n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: advance() function is used to increment/decrement the iterator by a given value so it does not returns any thing. So when we are doing ptr = advance(ptr, 2); we are expecting the advance() function to return some value but as it doesn’t returns anything therefore compiler throws an error."
    },
    {
        "id": 1498,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt; </span>\n<span class=\"co2\">#include&lt;iterator&gt; </span>\n<span class=\"co2\">#include&lt;vector&gt; </span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span> \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ar <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span> \n    vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> ptr <span class=\"sy1\">=</span> ar.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n    ptr <span class=\"sy1\">=</span> next<span class=\"br0\">(</span>ptr, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>ptr <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> \n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> \n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: d\nExplanation: next() function returns an iterator to the position which is ahead of current iterator by a distance of given value. Hence when we are calling the function next(ptr,3); then we are storing the result into ptr which is now an iterator pointing to 4.\nOutput:\n$ ./a.out \n4\n"
    },
    {
        "id": 1499,
        "Question": "How many types of Iterators are there?",
        "Options": [
            "a) 5",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: There are 5 types of iterators discussed under STL namely:\ni) Input Iterators\nii) Output Iterators\niii) Forward Iterators\niv) Bi-directional Iterators\nv) Random-access Iterators."
    },
    {
        "id": 1500,
        "Question": "Pick the correct statement.",
        "Options": [
            "a) Input iterator moves sequentially forward",
            "b) Input iterator moves sequentially backward",
            "c) Input iterator moves in both direction",
            "d) Input iterator moves sequentially downwards"
        ],
        "Answer": "Answer: a\nExplanation: By definition Input iterators moves sequentially forward. "
    },
    {
        "id": 1501,
        "Question": "Which of the following is correct about Input Iterators?",
        "Options": [
            "a) Input iterators can be used with all relational operators",
            "b) Input iterators can work with arithmetic operators",
            "c) No value can be assigned to the location pointed by Input Iterator",
            "d) Input iterators can work with sequence operators"
        ],
        "Answer": "Answer: c\nExplanation: Values cannot be assigned to the location pointed by input operators. Input operators cannot be used with all relational and arithmetic operators."
    },
    {
        "id": 1502,
        "Question": "Which of the following is correct about Input Iterators?",
        "Options": [
            "a) They cannot be decremented",
            "b) Cannot be used in multi-pass algorithms",
            "c) Can only be incremented",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Input iterators can only be incremented and as it cannot be decremented it can be used in single-pass algorithms only."
    },
    {
        "id": 1503,
        "Question": "Which of the following is correct?",
        "Options": [
            "a) Input Iterators are used for assigning",
            "b) Output Iterators are used for assigning",
            "c) Both Input and Output Iterators are used for accessing",
            "d) Both Input and Output Iterators are used for assigning"
        ],
        "Answer": "Answer: b\nExplanation: Input Iterators are used for accessing and Output Iterators are used for assigning."
    },
    {
        "id": 1504,
        "Question": "11. What type of Iterator i1 is in the following C++ code snipet?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">================</span> code <span class=\"sy1\">================</span>\nvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i1<span class=\"sy4\">;</span> \n<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i1<span class=\"sy1\">=</span>v1.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>i1<span class=\"sy3\">!</span><span class=\"sy1\">=</span>v1.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"sy2\">++</span>i1<span class=\"br0\">)</span> \n\t<span class=\"sy2\">*</span>i1 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n<span class=\"sy1\">======================================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Input Iterator",
            "b) Output Iterator",
            "c) Both Input and Output Iterator",
            "d) Neither Input nor Output Iterator"
        ],
        "Answer": "Answer: b\nExplanation: As i1 iterator is used for assigning values to the vector elements therefore it it an output iterator."
    },
    {
        "id": 1505,
        "Question": "12. If i1 is Input Iterator and i2 is Output Iterator, then which of the following things are correct?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\">i<span class=\"br0\">)</span> <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"sy2\">*</span>i1<span class=\"sy4\">;</span>\nii<span class=\"br0\">)</span> i2 can be used with <span class=\"sy1\">==</span> operator\niii<span class=\"br0\">)</span> <span class=\"sy2\">*</span>i1 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>\niv<span class=\"br0\">)</span> i2<span class=\"sy2\">--</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) i and ii",
            "b) i only",
            "c) i, ii and iv",
            "d) iii and iv"
        ],
        "Answer": "Answer: b\nExplanation: Input iterators are used for accessing containers, therefore *i1 = 1 is wrong. Both Input and Output iterators cannot be decremented therefore i2– is also wrong. Output iterators cannot be used with == operator, therefore, that is also wrong. So only cout<<*i1 is correct."
    },
    {
        "id": 1506,
        "Question": "Which of the following is an advantage of Forward iterator over input and output iterator?",
        "Options": [
            "a) Can be used as both accessing and assigning iterator",
            "b) Forward iterator can be incremented or decremented",
            "c) Can be used with relational operators also",
            "d) Can be used with arithmetic operators also"
        ],
        "Answer": "Answer: a\nExplanation: Forward iterator is a combination of both input and output iterator, therefore, can be used as both accessing and assigning iterator. Just like Input and output iterator this can also be not used with all relational and arithmetic operators and can be incremented only."
    },
    {
        "id": 1507,
        "Question": "What are Bi-directional iterators?",
        "Options": [
            "a) Iterator same as Forward Iterator",
            "b) Forward Iterator that can be used in both directions",
            "c) Iterator that can only be used to access the sequence from both sides",
            "d) Iterator that can only be used to assign the sequence from both sides"
        ],
        "Answer": "Answer: b\nExplanation: Bi-directional iterator is a type of forward iterators that can be used for both directions access and assign."
    },
    {
        "id": 1508,
        "Question": "What are Random-access Iterators?",
        "Options": [
            "a) Iterators that can be used to access elements at an arbitrary offset position",
            "b) Same as Bi-directional iterator",
            "c) Input iterator with the additional property of random access",
            "d) Output iterator with the additional property of random access"
        ],
        "Answer": "Answer: a\nExplanation: Random access iterators are those iterators that can be used to access elements at an arbitrary offset position relative to the memory that the iterator points."
    },
    {
        "id": 1509,
        "Question": "Which of the header file is used to implement algorithms provided by C++ STL?",
        "Options": [
            "a) <algorithm>",
            "b) <header>",
            "c) <algos>",
            "d) <Algorithm>"
        ],
        "Answer": "Answer: a\nExplanation: <algorithm> header is provided by the C++ to use STL algorithms."
    },
    {
        "id": 1510,
        "Question": "2. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;vector&gt; </span>\n<span class=\"co2\">#include &lt;algorithm&gt; </span>\n<span class=\"co2\">#include &lt;iostream&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span> \n\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> \n\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>all_of<span class=\"br0\">(</span>v.<span class=\"me1\">cbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">cend</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">return</span> i <span class=\"sy2\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \n\t<span class=\"br0\">{</span> \n\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"All numbers are even<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> \n\t<span class=\"br0\">}</span> \n\t<span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"All numbers are not even<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> \n\t<span class=\"br0\">}</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) All numbers are even",
            "b) All numbers are not even",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: In this program, we are using all_of() function to check whether all the members of the vector are even or not. As all the numbers in a vector are 10, therefore, the program output “All numbers are even”.\nOutput:\n$ ./a.out \nAll numbers are even\n"
    },
    {
        "id": 1511,
        "Question": "How many types of sequence operations are provided by the C++ algorithm STL?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two main types of sequence operations are provided by the C++ algorithm STL namely Non-modifying sequence operations and Modifying sequence operations."
    },
    {
        "id": 1512,
        "Question": "Which of the following is a Modifying Sequence Operation?",
        "Options": [
            "a) all_of()",
            "b) any_of()",
            "c) equal()",
            "d) swap()"
        ],
        "Answer": "Answer: d\nExplanation: swap() is a Modifying sequence operation. One can observe from the name itself as equal, all_of and any_of are by name states that they will be used for comparison whereas swap is trying to modify the sequence by changing locations of a sequence."
    },
    {
        "id": 1513,
        "Question": "Which of the following is a Non-modifying Sequence Operation?",
        "Options": [
            "a) swap()",
            "b) transform()",
            "c) remove()",
            "d) search()"
        ],
        "Answer": "Answer: d\nExplanation: search() is Non-modifying sequence operation because while searching we never change anything whereas swapping, transforming and removing involves modifying the sequence in some way."
    },
    {
        "id": 1514,
        "Question": "What is the use of random_shuffle() function of STL algorithm?",
        "Options": [
            "a) To generate the random sequence in a range",
            "b) To generate a sequence in a given range and arrange them in random order",
            "c) To rearrange given sequence randomly",
            "d) To select any random number from the given sequence."
        ],
        "Answer": "Answer: c\nExplanation: random_shuffle() function is used to re-arrange a given sequence of elements in a range."
    },
    {
        "id": 1515,
        "Question": "What is the property of stable sort function provided by the STL algorithm?",
        "Options": [
            "a) sorts the elements of a sequence in ascending order preserving the relative order of equivalent elements",
            "b) sorts the elements of a sequence in descending order preserving the relative order of equivalent elements",
            "c) arranges the sequence randomly preserving the relative order of equivalent elements",
            "d) same as sort function of STL algorithm"
        ],
        "Answer": "Answer: a\nExplanation: partition() function is used to separate a given list into two parts one part is stored in the original container and other is stored in the newly passed container. So, in this case, we are using IsOdd() function to separate elements from each other which will separate odd and even numbers and as partition function is taking odd function and returning value to bound container, therefore, the odd number sequence will be stored in the bound container and even number sequence will be stored in the original v container.\nOutput:\n$ ./a.out \n1 9 3 7 5\n6 4 8 2 10\n"
    },
    {
        "id": 1516,
        "Question": "What is the property of partial sort function provided by the STL algorithm?",
        "Options": [
            "a) sorts the elements before the middle element in ascending order and remaining elements are left without any specific order",
            "b) sorts the elements before the middle element in descending order and remaining elements are left without any specific order",
            "c) sorts the elements after the middle element in ascending order and remaining elements are left without any specific order",
            "d) sorts the elements after the middle element in descending order and remaining elements are left without any specific order"
        ],
        "Answer": "Answer: a\nExplanation: sort() function is used to sort a given sequence of numbers hence the program takes the vecto and sorts the numbers of the vector.\nOutput: \n$ ./a.out \n4 2 10 5 1 8 \n1 2 4 5 8 10\n"
    },
    {
        "id": 1517,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"co2\">#include &lt;algorithm&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n  sort<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>binary_search<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"found.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> \n  <span class=\"kw1\">else</span> \n  \t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"not found.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) found.",
            "b) not found.",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: In this program we have made a vector og numbers from 1-10 and then applied random_shuffle() function on that sequence of numbers, hence after after applying the function the sequence is arranged in a random sequence which is printed. The order of numbers in second sequence may vary when executed several times.\nOutput:\n$ ./a.out \n1 2 3 4 5 6 7 8 9 10 \n5 4 8 9 1 6 3 2 7 10\n"
    },
    {
        "id": 1518,
        "Question": "13. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include &lt;iostream&gt;  </span>\n<span class=\"co2\">#include &lt;algorithm&gt; </span>\n<span class=\"co2\">#include &lt;vector&gt; </span>\n&nbsp;\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n&nbsp;\n<span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>binary_search<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"found.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> \n  <span class=\"kw1\">else</span> \n  \t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"not found.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) found.",
            "b) not found.",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: a\nExplanation: stable sort is used to sort the elements of a sequence also preserving the relative order of the equivalent elements."
    },
    {
        "id": 1519,
        "Question": "Which function can be used to find the sum of a vector container?",
        "Options": [
            "a) findsum()",
            "b) accumulate()",
            "c) calcsum()",
            "d) checksum()"
        ],
        "Answer": "Answer: a\nExplanation: partial sort of STL algorithm is used to sort the given elements before the middle element in ascending order without any specific order of elements after the middle element."
    },
    {
        "id": 1520,
        "Question": "Which header file is required to use accumulate() function?",
        "Options": [
            "a) <algorithm>",
            "b) <numeric>",
            "c) <vector>",
            "d) <iostream>"
        ],
        "Answer": "Answer: a\nExplanation: In this program, we are using trying to search element 4 in the given vector using binary search and as element 4 is present in the vector, therefore, the function prints “found!”.\nOutput:\n$ ./a.out \nfound!\n"
    },
    {
        "id": 1521,
        "Question": "What are functors in C++?",
        "Options": [
            "a) Objects of a class which are treated as functions",
            "b) Objects that are used to call the function of other classes",
            "c) Functions that are called using pointer objects",
            "d) Functions that are called only once in a program"
        ],
        "Answer": "Answer: a\nExplanation: Functors are objects of a class that are treated like function i.e. they can also be used as function calls."
    },
    {
        "id": 1522,
        "Question": "Which of the following operators are overloaded for functors?",
        "Options": [
            "a) [] ",
            "b) ()",
            "c) <<",
            "d) >>"
        ],
        "Answer": "Answer: b\nExplanation: () operator is overloaded to use functor property in a C++ program because this is the only operator used for a function call."
    },
    {
        "id": 1523,
        "Question": "What is the correct function prototype of () operator overloading?",
        "Options": [
            "a) return_type operator(arguments)();",
            "b) return_type operator(arguments);",
            "c) return_type operator()(arguments);",
            "d) return_type operator(Class_name)(arguments);"
        ],
        "Answer": "Answer: c\nExplanation: The correct syntax of overloading a () operator in a class is as follows:\nreturn_type operator()(arguments){}"
    },
    {
        "id": 1524,
        "Question": "Which of the following is correct about Functors?",
        "Options": [
            "a) Functors should not be declared outside the main function",
            "b) Overloaded operator () function is not a member of the class",
            "c) Functors should be declared global",
            "d) Functors have a state"
        ],
        "Answer": "Answer: d\nExplanation: Functors are objects of a class which also have other members and member functions which can be used to save states of that functors hence functors have a state. Functors can be declared anywhere in a program."
    },
    {
        "id": 1525,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Print\n<span class=\"br0\">{</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\t<span class=\"kw4\">void</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tPrint print<span class=\"sy4\">;</span>\n\tprint<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) Compile-time error",
            "c) Run-time error",
            "d) Nothing is printed"
        ],
        "Answer": "Answer: a\nExplanation: As we have overloaded the () operator inside the class Print, therefore, the print object is a functor, therefore, can be used as a function which is just printing the value passed as a parameter."
    },
    {
        "id": 1526,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw2\">class</span> Add\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> x<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tAdd<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>x <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> x<span class=\"sy2\">+</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tAdd add_5<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>add_5<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: As add_5 is a functor whose x value is initialized as 5 therefore it adds 5 to the value passed as parameter and returns the sum."
    },
    {
        "id": 1527,
        "Question": "7. Given the below class, what is the correct syntax of declaring a functor that adds 10 to each of the passed argument?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"kw2\">class</span> Add\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> x<span class=\"sy4\">;</span>\n   <span class=\"kw2\">public</span><span class=\"sy4\">:</span>\n\tAdd<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\tthis<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>x <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">int</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">return</span> x<span class=\"sy2\">+</span>a<span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Add add_10(10);",
            "b) Add add_10(10);",
            "c) Add add_10(10);",
            "d) Add add_10(5);"
        ],
        "Answer": "Answer: c\nExplanation: Given the above class, we can declare an object of this class, which will be a functor that adds 10 to every value passed to it, like this Add add_10(10); where 10 in bracket shows that the variable 10 is intialized to class member x which will be used to add 10 to every argument."
    },
    {
        "id": 1528,
        "Question": "Which of te following is a built-in example of functors in C++?",
        "Options": [
            "a) mltiplication<T> f(a1, a2);",
            "b) add<T> f(a1, a2);",
            "c) subtract<T> f(a1, a2);",
            "d) plus<T> f(a1, a2);"
        ],
        "Answer": "Answer: d\nExplanation: plus<T> f(a1, a2); is one of the correct in-built functor available."
    },
    {
        "id": 1529,
        "Question": "Which of the following header file is required to use in-bulit functors of C++?",
        "Options": [
            "a) <any>",
            "b) <fucntional>",
            "c) <functor>",
            "d) <function>"
        ],
        "Answer": "Answer: b\nExplanation: <functional> header file is required to use the fuctionality of in-built functors provided by C++."
    },
    {
        "id": 1530,
        "Question": "What are unary functors?",
        "Options": [
            "a) Functors that accepts only one parameter",
            "b) Functors that accepts two parameters",
            "c) Functors that accepts more than one parameters",
            "d) Functors that accepts other than a specific type of parameter"
        ],
        "Answer": "Answer: a\nExplanation: Unary functors are those which accepts only one argument as a parameter in a functor."
    },
    {
        "id": 1531,
        "Question": "What are binary functors?",
        "Options": [
            "a) Functors that accepts only one parameter",
            "b) Functors that accepts more than one parameters",
            "c) Functors that accepts two parameters",
            "d) Functors that accepts other than a specific type of parameter"
        ],
        "Answer": "Answer: c\nExplanation: Binary functors are those which accepts two arguments as a parameter in a functor."
    },
    {
        "id": 1532,
        "Question": "How many ways are there to use functors?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: There are two ways of using functors one like function calls and other like normal class objects."
    },
    {
        "id": 1533,
        "Question": "Which of the following is a logical unary functor?",
        "Options": [
            "a) logical_or<T> f;",
            "b) logical_and<T> f;",
            "c) logical_not<T> f;",
            "d) negate<T> f;"
        ],
        "Answer": "Answer: c\nExplanation: logical_and and logical_or requires two arguments to act upon whereas negate and logical_not requires only one argument but negate also produces non-logical results like negate of a number, therefore, it is not logical hence logical_not<T> f; is an only logical functor."
    },
    {
        "id": 1534,
        "Question": "Which of the following is an arithmetic unary functor?",
        "Options": [
            "a) logical_not<T> f;",
            "b) logical_and<T> f;",
            "c) logical_or<T> f;",
            "d) negate<T> f;"
        ],
        "Answer": "Answer: d\nExplanation: logical_and and logical_or requires two arguments to act upon whereas negate and logical_not requires only one argument but logical_not produces only logical results, therefore, will not work on arithmetic values whereas negate works with all types of values."
    },
    {
        "id": 1535,
        "Question": "where f is a functor and arg1 and arg2 are the arguments required by the functors?",
        "Options": [
            "a) f.call(arg1, arg2);",
            "b) f.operator()(arg1, arg2);",
            "c) f.operator(arg1, arg2);",
            "d) f.operator(arg1, arg2)();"
        ],
        "Answer": "Answer: b\nExplanation: f(arg1, arg2) means we are calling the overlaoded () operator method which can be called using object f as follows f.operator()(arg1,arg2); In general, object.operator()(argument_lists);"
    },
    {
        "id": 1536,
        "Question": "Which is an instantiation of the basic_string class template?",
        "Options": [
            "a) Character",
            "b) String class",
            "c) Memory",
            "d) Iterator"
        ],
        "Answer": " Answer: b\nExplanation: The string class is an instantiation of the basic_string class template.\n"
    },
    {
        "id": 1537,
        "Question": "Which character is used to terminate the string?",
        "Options": [
            "a) $",
            "b) Null",
            "c) Empty",
            "d) @"
        ],
        "Answer": " Answer: b\nExplanation: A string of characters is stored in successive elements of a character array are terminated by the NULL character.\n"
    },
    {
        "id": 1538,
        "Question": "How does the strings are stored in the memory?",
        "Options": [
            "a) Contiguous",
            "b) Non-contiguous",
            "c) Null",
            "d) sequence"
        ],
        "Answer": " Answer: a\nExplanation: The characters of a string are stored contiguously in the memory.\n"
    },
    {
        "id": 1539,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str2<span class=\"sy1\">=</span><span class=\"st0\">\"Steve jobs\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str3<span class=\"sy1\">=</span><span class=\"st0\">\"He founded apple\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">append</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">append</span><span class=\"br0\">(</span>str3, <span class=\"nu0\">6</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">append</span><span class=\"br0\">(</span>str3.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">6</span>, str3.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu12\">0x2e</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Steve jobs",
            "b) He founded apple",
            "c) Steve",
            "d) Steve jobsndended apple….."
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are adding characters to the string, So the output will as follows after addition of characters.\nOutput:\n\n\n        \n\n$ g++ str.cpp\n$ a.out\nSteve jobsndended apple.....\n\n\n"
    },
    {
        "id": 1540,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"Test string\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> string <span class=\"sy4\">::</span> <span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Test",
            "b) string",
            "c) Test string",
            "d) Error"
        ],
        "Answer": " Answer: d\nExplanation: In the for loop, We are not allowed to give a numeric value in string, So it is arising an error.\n"
    },
    {
        "id": 1541,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string name <span class=\"br0\">(</span><span class=\"st0\">\"Jobs\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string family <span class=\"br0\">(</span><span class=\"st0\">\"Steve\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        name <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\" Apple \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        name <span class=\"sy2\">+</span><span class=\"sy1\">=</span> family<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        name <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> name<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Steve Jobs",
            "b) Apple",
            "c) Jobs Apple Steve",
            "d) Apple Steve"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are adding the characters at the end of the current value.\nOutput:\n\n\n$ g++ str1.cpp\n$ a.out\nJobs Apple Steve\n\n\n"
    },
    {
        "id": 1542,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str<span class=\"sy1\">=</span><span class=\"st0\">\"Steve Jobs founded the apple\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str2 <span class=\"sy1\">=</span> str.<span class=\"me1\">substr</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> pos <span class=\"sy1\">=</span> str.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"the\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str3 <span class=\"sy1\">=</span> str.<span class=\"me1\">substr</span> <span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str2 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> str3 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Jobs the apple",
            "b) the apple",
            "c) Steve",
            "d) Jobs"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are finding the substring of the string by using the substr function.\nOutput:\n\n\n$ g++ str2.cpp\n$ a.out\nJobs the apple\n\n\n"
    },
    {
        "id": 1543,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"Steve jobs\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 8",
            "b) 10",
            "c) 12",
            "d) 9"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are finding the length of the string.\nOutput:\n\n\n$ g++ str3.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 1544,
        "Question": "Where are the strings stored?",
        "Options": [
            "a) Stack",
            "b) Heap",
            "c) Both Stack & Heap",
            "d) Queue"
        ],
        "Answer": " Answer: c\nExplanation: Dynamic strings(dynamic length) are stored in heap and static string(with fixed size) are stored in stack.\n"
    },
    {
        "id": 1545,
        "Question": "What will happen if a string is empty?",
        "Options": [
            "a) It can’t be created",
            "b) Raises an error",
            "c) It can be used",
            "d) It cannot be used"
        ],
        "Answer": " Answer: c\nExplanation: An empty string is a character array with the NULL character in the zeroth index position.\n"
    },
    {
        "id": 1546,
        "Question": "Which header file is used to manipulate the string?",
        "Options": [
            "a) iostream",
            "b) iomanip",
            "c) string",
            "d) container"
        ],
        "Answer": " Answer: c\nExplanation: To use the string class, We have to use #include<string> header file.\n"
    },
    {
        "id": 1547,
        "Question": "How many maximum number of parameters does a string constructor can take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: string(other_string, position, count). It is a type of constructor for the string.\n"
    },
    {
        "id": 1548,
        "Question": "Which constant member functions does not modify the string?",
        "Options": [
            "a) bool empty()",
            "b) assign",
            "c) append",
            "d) delete"
        ],
        "Answer": " Answer: a\nExplanation: Because bool empty is a constant member function, So it can’t be modified.\n"
    },
    {
        "id": 1549,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"I like to code in C\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> sz <span class=\"sy1\">=</span> str.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">resize</span> <span class=\"br0\">(</span>sz <span class=\"sy2\">+</span> <span class=\"nu0\">2</span>, <span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        str.<span class=\"me1\">resize</span> <span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) I like to code in c",
            "b) I like to code",
            "c) I like to code in c++",
            "d) I like to codeI like to code"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are resizing the string by adding + and then we are resizing it to 14.\nOutput:\n\n\n        \n\n$ g++ basicst.cpp\n$ a.out\nI like to code\n\n\n"
    },
    {
        "id": 1550,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"Steve jobs\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str.<span class=\"me1\">capacity</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 9",
            "b) 10",
            "c) 11",
            "d) Not Fix"
        ],
        "Answer": " Answer: d\nExplanation: str.capacity() returns the size of the storage space currently allocated for the string, expressed in terms of bytes and capacity of the string may be equal or greater. So the answer is not fix, depends on the compiler.\nOutput:\n\n\n\t\n\n$ g++ basicst1.cpp\n$ a.out\n10\n\n\n"
    },
    {
        "id": 1551,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"Steve jobs founded the apple\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str2 <span class=\"br0\">(</span><span class=\"st0\">\"apple\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> found <span class=\"sy1\">=</span> str.<span class=\"me1\">find</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>found <span class=\"sy3\">!</span><span class=\"sy1\">=</span> string <span class=\"sy4\">::</span> <span class=\"me2\">npos</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> found <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) apple",
            "b) 12",
            "c) 23",
            "d) Steve jobs founded the"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are finding a string by using the find method.\nOutput:\n\n\n$ g++ basicst2.cpp\n$ a.out\n23\n\n\n"
    },
    {
        "id": 1552,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string str <span class=\"br0\">(</span><span class=\"st0\">\"Steve jobs\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> found <span class=\"sy1\">=</span> str.<span class=\"me1\">find_first_of</span><span class=\"br0\">(</span><span class=\"st0\">\"aeiou\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>found <span class=\"sy3\">!</span><span class=\"sy1\">=</span> string <span class=\"sy4\">::</span> <span class=\"me2\">npos</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            str<span class=\"br0\">[</span>found<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'*'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            found <span class=\"sy1\">=</span> str.<span class=\"me1\">find_first_of</span><span class=\"br0\">(</span><span class=\"st0\">\"aeiou\"</span>, found <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Steve",
            "b) jobs",
            "c) St*v* j*bs",
            "d) St*v*"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are replacing the vowels with a asterisk by using find_first_of method.\nOutput:\n\n\n$ g++ basicst3.cpp\n$ a.out\nSt*v* j*bs\n\n\n"
    },
    {
        "id": 1553,
        "Question": "What is the difference between unsigned int length() and unsigned int size()?",
        "Options": [
            "a) Returns a different value",
            "b) They are same",
            "c) Returns a different value but they are same",
            "d) Returns a length"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are breaking up the strings into the form of tokens.\nOutput:\n\n\n$ g++ basicst4.cpp\n$ a.out\nSteve \njobs\n\n\n"
    },
    {
        "id": 1554,
        "Question": "How many parameters can a resize method take?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 1 or 2",
            "d) 2"
        ],
        "Answer": " Answer: b\nExplanation: Both of them will return the length of strings in the same notations.\n"
    },
    {
        "id": 1555,
        "Question": "Where are standard C libraries defined in C++?",
        "Options": [
            "a) Container",
            "b) std namespace",
            "c) list",
            "d) iterators"
        ],
        "Answer": " Answer: b\nExplanation: Every element of the c library is defined within the std namespace.\n"
    },
    {
        "id": 1556,
        "Question": "Which of the following have their changes in their declaration related to constness of parameter?",
        "Options": [
            "a) strchr",
            "b) string",
            "c) memory",
            "d) strcybrk"
        ],
        "Answer": " Answer: a\nExplanation: These are the items which will have their change in declaration related to constness of parameter. They are strchr, strpbrk, strrchr, strstr, memchr.\n"
    },
    {
        "id": 1557,
        "Question": "How many elements does a floating point number is composed of?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: d\nExplanation: The floating point number composed of four elements. They are sign, Base, Significand and Exponent.\n"
    },
    {
        "id": 1558,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;    </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdlib.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> s<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"365.24 29.53\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span><span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> d1, d2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        d1 <span class=\"sy1\">=</span> <span class=\"kw3\">strtod</span> <span class=\"br0\">(</span>s, <span class=\"sy3\">&amp;</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        d2 <span class=\"sy1\">=</span> <span class=\"kw3\">strtod</span> <span class=\"br0\">(</span>p, <span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%.2f<span class=\"es1\">\\n</span>\"</span>, d1<span class=\"sy2\">/</span>d2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12",
            "b) 12.37",
            "c) 13",
            "d) 15"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are calculating the double value by using the floating point number and we are using the function strtod.\nOutput:\n\n\n        \n\n$ g++ cinc.cpp\n$ a.out\n12.37\n\n\n"
    },
    {
        "id": 1559,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdlib.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> compareints <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy2\">*</span> a, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy2\">*</span> b<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span><span class=\"br0\">)</span>a <span class=\"sy2\">-</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span><span class=\"br0\">)</span>b <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> values<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">50</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">60</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">30</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> key <span class=\"sy1\">=</span> <span class=\"nu0\">40</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">qsort</span><span class=\"br0\">(</span>values, <span class=\"nu0\">6</span>, <span class=\"kw3\">sizeof</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>, compareints<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy2\">*</span><span class=\"br0\">)</span> <span class=\"kw3\">bsearch</span> <span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>key, values, <span class=\"nu0\">6</span>, <span class=\"kw3\">sizeof</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>, compareints<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>,<span class=\"sy2\">*</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 40",
            "d) 30"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are searching for the element and then we are printing it.\nOutput:\n\n\n\t\n\n$ g++ cinc1.cpp\n$ a.out\n40\n\n\n"
    },
    {
        "id": 1560,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;    </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdlib.h&gt;   </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n, m<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        n <span class=\"sy1\">=</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        m <span class=\"sy1\">=</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, m<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 23-11",
            "b) 1123",
            "c) 2311",
            "d) 4325"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are finding the absolute value of the n.\nOutput:\n\n\n$ g++ cinc2.cpp\n$ a.out\n2311\n\n\n"
    },
    {
        "id": 1561,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;math.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"The value of -3.1416 is %lf<span class=\"es1\">\\n</span>\"</span>, <span class=\"kw3\">fabs</span> <span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu16\">3.1416</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3.1416",
            "b) -3.1416",
            "c) -3.141600",
            "d) 3.141600"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are finding the absolute value of a floating point value.\nOutput:\n\n\n$ g++ cinc3.cpp\n$ a.out\n3.141600\n\n\n"
    },
    {
        "id": 1562,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdlib.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">div_t</span> divresult<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">&nbsp;</pre></li><li class=\"li1\"><pre class=\"de1\">        divresult <span class=\"sy1\">=</span> <span class=\"kw3\">div</span> <span class=\"br0\">(</span><span class=\"nu0\">38</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, divresult.<span class=\"me1\">rem</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 7",
            "b) 3",
            "c) 4",
            "d) 9"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are finding the remainder of a number by using div function.\nOutput:\n\n\n$ g++ cinc4.cpp\n$ a.out\n3\n\n\n"
    },
    {
        "id": 1563,
        "Question": "How does the limits.h header file can be represented in C++?",
        "Options": [
            "a) limits",
            "b) limit",
            "c) climits",
            "d) dlimits"
        ],
        "Answer": " Answer: c\nExplanation: Any standard library of C can be written in C++ by using ‘c’ in front of header file name and omitting the ‘.h’. for example <limits.h> can be written as <climits>.\n"
    },
    {
        "id": 1564,
        "Question": "Pick out the correct syntax of the header file that can be used with C++.",
        "Options": [
            "a) #include <float>",
            "b) #include <float.h>",
            "c) Both #include <float> & #include <float.h>",
            "d) #include <flot.h>"
        ],
        "Answer": " Answer: b\nExplanation: The C header file that is ending with h can only be used in C++.\n"
    },
    {
        "id": 1565,
        "Question": "How many groups of output of operation are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: b\nExplanation: There are two groups of output operation in c++. They are formatted output and unformatted output.\n"
    },
    {
        "id": 1566,
        "Question": "Pick out the correct objects about the instantiation of output stream.",
        "Options": [
            "a) cout",
            "b) cerr",
            "c) clog",
            "d) all of the mentioned"
        ],
        "Answer": " Answer: d\nExplanation: cout, cerr and clog are the standard objects for the instantiation of output stream class.\n"
    },
    {
        "id": 1567,
        "Question": "What is meant by ofstream in c++?",
        "Options": [
            "a) Writes to a file",
            "b) Reads from a file",
            "c) Writes to a file &  Reads from a file",
            "d) delete a file"
        ],
        "Answer": " Answer: a\nExplanation: ofstream is a stream class to write on files.\n"
    },
    {
        "id": 1568,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Steve jobs\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> val <span class=\"sy1\">=</span> <span class=\"nu0\">65</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> ch <span class=\"sy1\">=</span> <span class=\"st0\">'A'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>.<span class=\"me1\">width</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> right<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> val <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Steve jobs",
            "b) A",
            "c) 65",
            "d)      65"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are printing the five spaces and then we are printing the value of 65.\nOutput:\n\n\n        \n\n$ g++ ous\n.cpp\n$ a.out\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;65\n\n\n"
    },
    {
        "id": 1569,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        n <span class=\"sy1\">=</span> <span class=\"nu0\">43</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> hex <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2c",
            "b) 2b",
            "c) 20",
            "d) 50"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are printing the hexadecimal value of the given decimal number by using hex function.\nOutput:\n\n\n\t\n\n$ g++ ous1.cpp\n$ a.out\n2b\n\n\n"
    },
    {
        "id": 1570,
        "Question": "6. What is the output of this C++ program in the “test.txt” file?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;fstream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">long</span> pos<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ofstream outfile<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        outfile.<span class=\"me1\">open</span> <span class=\"br0\">(</span><span class=\"st0\">\"test.txt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        outfile.<span class=\"me1\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"This is an apple\"</span>,<span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pos <span class=\"sy1\">=</span> outfile.<span class=\"me1\">tellp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        outfile.<span class=\"me1\">seekp</span> <span class=\"br0\">(</span>pos <span class=\"sy2\">-</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        outfile.<span class=\"me1\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\" sam\"</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        outfile.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) This is an apple",
            "b) apple",
            "c) sample",
            "d) This is a sample"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are changing the ap to sam by using the pos function.\nOutput:\n\n\n$ g++ ous2.cpp\n$ a.out\nThis is a sample\n\n\n"
    },
    {
        "id": 1571,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        n <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">77</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>.<span class=\"me1\">width</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> internal <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 77",
            "b) -77",
            "c) – 77",
            "d) None of the mentioned"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are using the internal function and moving the 77 to one position.\nOutput:\n\n\n$ g++ ous3.cpp\n$ a.out\n- 77\n\n\n"
    },
    {
        "id": 1572,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;locale&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        locale mylocale<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>.<span class=\"me1\">imbue</span><span class=\"br0\">(</span> mylocale <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> <span class=\"nu16\">3.14159</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 3.14",
            "b) 3.14159",
            "c) Error",
            "d) 3.69"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are using the locale and then assigning the type to the value.\nOutput:\n\n\n$ g++ ous4.cpp\n$ a.out\n3.14159\n\n\n"
    },
    {
        "id": 1573,
        "Question": "How many types of output stream classes are there in c++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: c\nExplanation: There are three output stream classes in c++. They are ostream, ofstream and ostrstream.\n"
    },
    {
        "id": 1574,
        "Question": "What must be specified when we construct an object of class ostream?",
        "Options": [
            "a) stream",
            "b) streambuf",
            "c) memory",
            "d) steamostream"
        ],
        "Answer": " Answer: b\nExplanation: If you construct an object of class ostream, you must specify a streambuf object to the constructor.\n"
    },
    {
        "id": 1575,
        "Question": "Which operator is used for input stream?",
        "Options": [
            "a) >",
            "b) >>",
            "c) <",
            "d) <<"
        ],
        "Answer": " Answer: b\nExplanation: The operator of extraction is >> and it is used on the standard input stream.\n"
    },
    {
        "id": 1576,
        "Question": "Where does a cin stops it extraction of data?",
        "Options": [
            "a) By seeing a blank space",
            "b) By seeing (",
            "c) By seeing a blank space & (",
            "d) By seeing <"
        ],
        "Answer": " Answer: a\nExplanation: cin will stop its extraction when it encounters a blank space.\n"
    },
    {
        "id": 1577,
        "Question": "Which is used to get the input during runtime?",
        "Options": [
            "a) cout",
            "b) cin",
            "c) coi",
            "d) cinout"
        ],
        "Answer": " Answer: b\nExplanation: cin is mainly used to get the input during the runtime.\n"
    },
    {
        "id": 1578,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Please enter an integer value: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 73",
            "b) your value + 4",
            "c) Error",
            "d) 63"
        ],
        "Answer": " Answer: c\nExplanation: We are not allowed to do addition operation on cin.\n"
    },
    {
        "id": 1579,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;string&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;sstream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        string mystr<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> price <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> quantity <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter price: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        getline <span class=\"br0\">(</span><span class=\"kw3\">cin</span>, mystr<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stringstream<span class=\"br0\">(</span>mystr<span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> price<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter quantity: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        getline <span class=\"br0\">(</span><span class=\"kw3\">cin</span>, mystr<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        stringstream<span class=\"br0\">(</span>mystr<span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> quantity<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Total price: \"</span> <span class=\"sy1\">&lt;&lt;</span> price <span class=\"sy2\">*</span> quantity <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 50",
            "b) Depends on value you enter",
            "c) Error",
            "d) 100"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are getting the input on runtime and manipulating the value.\nOutput:\n\n\n\t\n\n$ g++ inp.cpp\n$ a.out\nEnter price: 3\nEnter quantity: 4\nTotal price: 12\n\n\n"
    },
    {
        "id": 1580,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ios&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;istream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> CharT<span class=\"sy1\">&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> ignore_line <span class=\"br0\">(</span> basic_istream<span class=\"sy1\">&lt;</span>CharT<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> in <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        in.<span class=\"me1\">ignore</span> <span class=\"br0\">(</span> numeric_limits<span class=\"sy1\">&lt;</span>streamsize<span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, in.<span class=\"me1\">widen</span> <span class=\"br0\">(</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"First input: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Clearing cin.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span>.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ignore_line <span class=\"br0\">(</span> <span class=\"kw3\">cin</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"All done.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) First input",
            "b) Clearing cin",
            "c) Error",
            "d) Second input"
        ],
        "Answer": " Answer: d\nExplanation: In this program, We are getting the input and clearing all the values.\nOutput:\n\n\n$ g++ inp1.cpp\n$ a.out\nFirst input: 4\nClearing cin.\nAll done.\n\n\n"
    },
    {
        "id": 1581,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> line<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span>.<span class=\"me1\">getline</span><span class=\"br0\">(</span> line, <span class=\"nu0\">100</span>, <span class=\"st0\">'t'</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> line<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) t",
            "c) It will print what we enter till character t is encountered in the input data",
            "d) 200"
        ],
        "Answer": " Answer: c\nExplanation: The program will store all strings entered and will print them only when the character ‘t’ is encountered.\nInput >> coding\nInput >> is fun\nInput >> t\nOutput:\ncoding\nis fun\n"
    },
    {
        "id": 1582,
        "Question": "How many parameters are there in getline function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 2 or 3",
            "d) 3"
        ],
        "Answer": " Answer: c\nExplanation: There are two or three parameters in getline() function. They are a pointer to an array of characters and maximum number of characters and an optional delimiter.\n"
    },
    {
        "id": 1583,
        "Question": "What can be used to input a string with blank space?",
        "Options": [
            "a) inline",
            "b) getline",
            "c) putline",
            "d) setline"
        ],
        "Answer": " Answer: b\nExplanation: If a user wants to input a sentence with blank spaces, then he may use the function getline.\n"
    },
    {
        "id": 1584,
        "Question": "When will the cin can start processing of input?",
        "Options": [
            "a) After pressing return key",
            "b) BY pressing blank space",
            "c) After pressing return key & BY pressing blank space",
            "d) BY pressing delete space"
        ],
        "Answer": " Answer: a\nExplanation: When you give some input to console the processing of the input starts when the user presses enter/return key.\n"
    },
    {
        "id": 1585,
        "Question": "Which is used for formatting purpose in c++?",
        "Options": [
            "a) Whitespace",
            "b) Container",
            "c) &",
            "d) Vector"
        ],
        "Answer": " Answer: a\nExplanation: Whitespace is a term that refers to characters like spaces, tabs, and newlines that are used for formatting purposes.\n"
    },
    {
        "id": 1586,
        "Question": "How many number of spaces should be set in default tab?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: d\nExplanation: The default number of spaces is 4 in programming.\n"
    },
    {
        "id": 1587,
        "Question": "What can be improved by formatting the source code?",
        "Options": [
            "a) Memory",
            "b) Address",
            "c) User interface",
            "d) Iterator"
        ],
        "Answer": " Answer: c\nExplanation: By formatting your code, the user can easily understand it and can upgrade it without any complexity.\n"
    },
    {
        "id": 1588,
        "Question": "Choose the correct formatted code.",
        "Options": [
            "a) int a = 5;",
            "b) int a=5;",
            "c) int a =5;",
            "d) int a5;"
        ],
        "Answer": " Answer: b\nExplanation: If a long line that is broken into pieces is broken with an operator, the operator should be placed at the end of the line, not the start of the next line.\n"
    },
    {
        "id": 1589,
        "Question": "Which function allows you to set minimum width for the next input?",
        "Options": [
            "a) setfill",
            "b) setw",
            "c) setwidth",
            "d) setheight"
        ],
        "Answer": " Answer: a\nExplanation: Variable initialization should be done with one space on left and right of equal operator.\n"
    },
    {
        "id": 1590,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iomanip&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">void</span> showDate<span class=\"br0\">(</span><span class=\"kw4\">int</span> m, <span class=\"kw4\">int</span> d, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setfill<span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> m <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'/'</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> d <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'/'</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> y <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        showDate<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2013</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1,1,2013",
            "b) 2013",
            "c) 01/01/2013",
            "d) 1120"
        ],
        "Answer": " Answer: b\nExplanation: The braces that tell where a function begins and ends should be aligned with the function name and be on their own lines.\n"
    },
    {
        "id": 1591,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">64</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> oct <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 64100",
            "b) 48",
            "c) 345",
            "d) 496"
        ],
        "Answer": " Answer: b\nExplanation: setw function of iomanip header file allows you to set minimum width for the next input.\n"
    },
    {
        "id": 1592,
        "Question": "What is the use of the function \"showbase\"?",
        "Options": [
            "a) Indicate the base used",
            "b) Indicate the variable",
            "c) Indicate the base used & variable",
            "d) Indicate the derived"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are using the setw function to print the date in correct format.\nOutput:\n\n\n$ g++ form.cpp\n$ a.out\n01/01/2013\n\n\n"
    },
    {
        "id": 1593,
        "Question": "Which operator is used to insert the data into file?",
        "Options": [
            "a) >>",
            "b) <<",
            "c) <",
            "d) >"
        ],
        "Answer": "  Answer: b\nExplanation: You can write information to a file from your program using the stream insertion operator <<.\n"
    },
    {
        "id": 1594,
        "Question": "Which function is used to position back from the end of file object?",
        "Options": [
            "a) seekg",
            "b) seekp",
            "c) both seekg & seekp",
            "d) seekf"
        ],
        "Answer": "  Answer: a\nExplanation: The member function seekg is used to position back from the end of file object.\n"
    },
    {
        "id": 1595,
        "Question": "How many objects are used for input and output to a string?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: c\nExplanation: The stringstream, ostringstream, and istringstream objects are used for input and output to a string.\n"
    },
    {
        "id": 1596,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;fstream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> length<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> <span class=\"sy2\">*</span> buffer<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ifstream is<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        is.<span class=\"me1\">open</span> <span class=\"br0\">(</span><span class=\"st0\">\"sample.txt\"</span>, ios <span class=\"sy4\">::</span> <span class=\"me2\">binary</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        is.<span class=\"me1\">seekg</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, ios <span class=\"sy4\">::</span> <span class=\"me2\">end</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        length <span class=\"sy1\">=</span> is.<span class=\"me1\">tellg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        is.<span class=\"me1\">seekg</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, ios <span class=\"sy4\">::</span> <span class=\"me2\">beg</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        buffer <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">char</span> <span class=\"br0\">[</span>length<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        is.<span class=\"me1\">read</span> <span class=\"br0\">(</span>buffer, length<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        is.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span>.<span class=\"me1\">write</span> <span class=\"br0\">(</span>buffer, length<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> buffer<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) This is sample",
            "b) sample",
            "c) Error",
            "d) Runtime error"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, if the file exist, it will read the file. Otherwise it will throw an exception. A runtime error will occur because the value of the length variable will be “-1” if file doesn’t exist and in line 13 we are trying to allocate an array of size “-1”.\n"
    },
    {
        "id": 1597,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> first, second<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter a word: \"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        first <span class=\"sy1\">=</span> <span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cin</span>.<span class=\"me1\">sync</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        second <span class=\"sy1\">=</span> <span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> first <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> second <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) first",
            "b) second",
            "c) returns first 2 letter or number from the entered word",
            "d) third"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are using the sync function to return the first two letters of the entered word.\nOutput:\n\n\n\t\n\n$ g++ stream.cpp\n$ a.out\nEnter a word: steve\ns\nt\n\n\n"
    },
    {
        "id": 1598,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include&lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;fstream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ofstream outfile <span class=\"br0\">(</span><span class=\"st0\">\"test.txt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            outfile <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            outfile.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Done\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        outfile.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Done",
            "b) Error",
            "c) Runtime error",
            "d) DoneDoneDone"
        ],
        "Answer": "  Answer: a\nExplanation: In this program, We are using the flush function to update the contents in a file.\nOutput:\n\n\n$ g++ stream1.cpp\n$ a.out\nDone\n\n\n"
    },
    {
        "id": 1599,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> b <span class=\"sy1\">=</span> <span class=\"nu16\">3.14</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy2\">*</span> b<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        endl <span class=\"br0\">(</span><span class=\"kw3\">cout</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 3.14",
            "c) 314",
            "d) All of the mentioned"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, We are printing the given value and manipulating the given value by using endl.\nOutput:\n\n\n$ g++ stream2.cpp\n$ a.out\n100\n3.14\n314\n\n\n"
    },
    {
        "id": 1600,
        "Question": "8. By seeing which operator thus this C++ program stops getting the input?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;fstream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> ch<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        streambuf <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        ofstream os <span class=\"br0\">(</span><span class=\"st0\">\"test.txt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pbuf <span class=\"sy1\">=</span> os.<span class=\"me1\">rdbuf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">do</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ch <span class=\"sy1\">=</span> <span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            p <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> sputc<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>ch <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        os.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) dot operator",
            "b) insertion operator",
            "c) $ symbol",
            "d) @ symbol"
        ],
        "Answer": "  Answer: a\nExplanation: This program will stop getting the input, When it occurs the dot(.) operator.\nOutput:\n\n\n$ g++ stream3.cpp\n$ a.out\nSteve.\n\n\n"
    },
    {
        "id": 1601,
        "Question": "Which member function is used to determine whether the stream object is currently associated with a file?",
        "Options": [
            "a) is_open",
            "b) buf",
            "c) string",
            "d) is_out"
        ],
        "Answer": "  Answer: a\nExplanation: The member function is_open can be used to determine whether the stream object is currently associated with a file.\n"
    },
    {
        "id": 1602,
        "Question": "Which header file is used for reading and writing to a file?",
        "Options": [
            "a) #include<iostream>",
            "b) #include<fstream>",
            "c) #include<file>",
            "d) #include<fe>"
        ],
        "Answer": "  Answer: b\nExplanation: <fstream> header file contains all the file reading and writing functions. Also <ifstream> and <ofstream> contains functions only reading and only writing to files related functions respectively.\n"
    },
    {
        "id": 1603,
        "Question": "Which one is always faster in writing on C++?",
        "Options": [
            "a) Writing to a file",
            "b) Writing to memory",
            "c) Reading from the network",
            "d) Deleting a file"
        ],
        "Answer": "  Answer: b\nExplanation: For the stand of file operations, writing to memory (RAM) is always faster than writing to the file on the disk directly.\n"
    },
    {
        "id": 1604,
        "Question": "How many tests are available in read and write operations?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: There are two types of read and write tests. They are throughput in random reads and throughput in contiguous reads.\n"
    },
    {
        "id": 1605,
        "Question": "What will act as a intermediate between i/o operations and physical file?",
        "Options": [
            "a) Memory",
            "b) Ram",
            "c) Stream buffer",
            "d) Storage"
        ],
        "Answer": "  Answer: c\nExplanation: A stream buffer is a block of data that acts as intermediary between the i/o operations and the physical file associated to the stream.\n"
    },
    {
        "id": 1606,
        "Question": "4. What will be the output of the following C++ code in text files?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span><span class=\"kw2\">BUFSIZ</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span>p1, <span class=\"sy2\">*</span>p2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p1 <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"myfile.txt\"</span>, <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p2 <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"myfile2.txt\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">setbuf</span> <span class=\"br0\">(</span> p1 , buffer <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fputs</span> <span class=\"br0\">(</span><span class=\"st0\">\"Buffered stream\"</span>, p1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fflush</span> <span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">setbuf</span> <span class=\"br0\">(</span> p2 , <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fputs</span> <span class=\"br0\">(</span><span class=\"st0\">\"Unbuffered stream\"</span>, p2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Buffered stream",
            "b) Unbuffered stream",
            "c) Error",
            "d) Buffered & Unbuffered stream"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, the fopen will create the file and send the text to both of the files.\nOutput:\n\n\n        \n\n$ g++ buf.cpp\n$ a.out\n\"Buffered stream\" in myfile.txt\n\"Unbuffered stream\" in myfile2.txt\n\n\n"
    },
    {
        "id": 1607,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">long</span> size<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"test.txt\"</span>, <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">perror</span> <span class=\"br0\">(</span><span class=\"st0\">\"Error opening file\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">fseek</span> <span class=\"br0\">(</span>p, <span class=\"nu0\">0</span>, <span class=\"kw2\">SEEK_END</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            size <span class=\"sy1\">=</span> <span class=\"kw3\">ftell</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\" %ld<span class=\"es1\">\\n</span>\"</span>, size<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 20",
            "c) 5",
            "d) Depends upon the file"
        ],
        "Answer": "  Answer: d\nExplanation: This program will return the size of the file in bytes.\nOutput:\n\n\n\t\n\n$ g++ buf1.cpp\n$ a.out\n20\n\n\n"
    },
    {
        "id": 1608,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">freopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"myfile.txt\"</span>, <span class=\"st0\">\"w\"</span>, <span class=\"kw2\">stdout</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"This sentence is redirected to a file\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span><span class=\"kw2\">stdout</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) This sentence",
            "b) This sentence is redirected",
            "c) This sentence is redirected to a file",
            "d) This sentence to a file"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are sending the text to the file by opening the file using the function freopen.\nOutput:\n\n\n$ g++ buf2.cpp\n$ a.out\n\n\nThis sentence is redirected to a file\n"
    },
    {
        "id": 1609,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> buffer <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"myfile.txt\"</span>, <span class=\"st0\">\"w+\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> n <span class=\"sy1\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'D'</span> <span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fputc</span> <span class=\"br0\">(</span> n, p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">rewind</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fread</span> <span class=\"br0\">(</span>buffer, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        buffer<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">puts</span> <span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ABCD",
            "b) ABC",
            "c) ABCDE",
            "d) ADCA"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, We are setting the buffer size upto 3 only, So it is printing ABC.\nOutput:\n\n\n$ g++ buf3.cpp\n$ a.out\nABC\n\n\n"
    },
    {
        "id": 1610,
        "Question": "8. What will be the output of the following C++ code in text file?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'x'</span> , <span class=\"st0\">'y'</span> , <span class=\"st0\">'z'</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span> <span class=\"st0\">\"myfile.txt\"</span> , <span class=\"st0\">\"wb\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fwrite</span> <span class=\"br0\">(</span>buffer , <span class=\"nu0\">1</span> , <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span> , p <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) xyz",
            "b) zyx",
            "c) yxz",
            "d) yyx"
        ],
        "Answer": "  Answer: a\nExplanation: In this program, We are writing into the file by using the function fwrite.\nOutput:\n\n\n$ g++ buf4.cpp\n$ a.out\nxyz\n\n\n"
    },
    {
        "id": 1611,
        "Question": "By using which function does the buffer are automatically flushed?",
        "Options": [
            "a) fopen",
            "b) copy",
            "c) compare",
            "d) fclose"
        ],
        "Answer": "  Answer: d\nExplanation: fclose() is used to close the file and flush it out of memory for safe closing of files opened during the execution of program. In short to avoid memory faults during the execution of the program.\n"
    },
    {
        "id": 1612,
        "Question": "How many parameters are available in the function setbuf?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: There are two parameters that are used in setbuf. They are stream and buffer.\n"
    },
    {
        "id": 1613,
        "Question": "What is the main feature of locale in C++?",
        "Options": [
            "a) Sustainability",
            "b) Portability",
            "c) Reliability",
            "d) Sustainability & Reliability"
        ],
        "Answer": "  Answer: b\nExplanation: A locale is a set of features that are culture-specific, which can be used by programs to be more portable internationally.\n"
    },
    {
        "id": 1614,
        "Question": "Which objects information is loaded in locale object?",
        "Options": [
            "a) facet object",
            "b) instead object",
            "c) Both facet & instead object",
            "d) secant object"
        ],
        "Answer": "  Answer: a\nExplanation: A locale object contains information about which facet objects constitute a locale, and is each one of these facet objects that implements specific features as member functions.\n"
    },
    {
        "id": 1615,
        "Question": "How many categories are available in facets?",
        "Options": [
            "a) 4",
            "b) 5",
            "c) 6",
            "d) 3"
        ],
        "Answer": "  Answer: c\nExplanation: There are 6 categories of facet in c++. They are collate, ctype, monetary, numeric, time and messages.\n"
    },
    {
        "id": 1616,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctype.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Steve Jobs<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            c <span class=\"sy1\">=</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">islower</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                c <span class=\"sy1\">=</span> <span class=\"kw3\">toupper</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">putchar</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            i<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Steve jobs",
            "b) STEVE JOBS",
            "c) Steve",
            "d) JOBS"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, We have converted the lower case letters to uppercase letters by using toupper function.\nOutput:\n\n\n        \n\n$ g++ loc.cpp\n$ a.out\nSTEVE JOBS\n\n\n"
    },
    {
        "id": 1617,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctype.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"C\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">isalpha</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"alphabetic\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"not alphabetic\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            i<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) alphabetic",
            "b) not alphabetic",
            "c) Error",
            "d) alphabeticnot alphabetic"
        ],
        "Answer": "  Answer: a\nExplanation: In this program, We are checking whether the character is alphabetic or not alphabetic by using the function isalpha.\nOutput:\n\n\n\t\n\n$ g++ loc1.cpp\n$ a.out\nalphabetic\n\n\n"
    },
    {
        "id": 1618,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctype.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"jobs...\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw3\">isalnum</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            i<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\" %d<span class=\"es1\">\\n</span>\"</span>,i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, We are counting the number of alphanumeric values by using the function isalnum.\nOutput:\n\n\n$ g++ loc2.cpp\n$ a.out\n4\n\n\n"
    },
    {
        "id": 1619,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctype.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> cx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello, welcome!\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">ispunct</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> cx<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                i<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, cx<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, We are counting the number of special characters in the program by using the function ispunct.\nOutput:\n\n\n$ g++ loc3.cpp\n$ a.out\n2\n\n\n"
    },
    {
        "id": 1620,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdlib.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctype.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"ffff\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> number<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">isxdigit</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            number <span class=\"sy1\">=</span> <span class=\"kw3\">strtol</span> <span class=\"br0\">(</span>str, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%ld<span class=\"es1\">\\n</span>\"</span>, number<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 64345",
            "b) 21312",
            "c) 65535",
            "d) Error"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are converting the hexadecimal number to decimal number.\nOutput:\n\n\n$ g++ loc4.cpp\n$ a.out\n65535\n\n\n"
    },
    {
        "id": 1621,
        "Question": "What kind of locale does every program is having in C++?",
        "Options": [
            "a) local locale",
            "b) global locale",
            "c) temp locale",
            "d) set locale"
        ],
        "Answer": "  Answer: b\nExplanation: Every program has a single locale object which is its global locale.\n"
    },
    {
        "id": 1622,
        "Question": "What will the monetary facet will do?",
        "Options": [
            "a) Handle formatting and parsing of monetary values",
            "b) Handle formatting and parsing of character values",
            "c) Parsing of character values",
            "d) Deleting a character values"
        ],
        "Answer": " Answer: a\nExplanation: Monetary facet will handle formatting and parsing of monetary values.\n"
    },
    {
        "id": 1623,
        "Question": "Which header file is used with input and output operations of C in C++?",
        "Options": [
            "a) stdio.h",
            "b) cstdio",
            "c) iostream",
            "d) streamio"
        ],
        "Answer": "  Answer: b\nExplanation:  Input and Output operations of c can be performed in C++ using the C Standard Input and Output Library.\n"
    },
    {
        "id": 1624,
        "Question": "Which will be used with physical devices to interact from C++ program?",
        "Options": [
            "a) Programs",
            "b) Library",
            "c) Streams",
            "d) Iterators"
        ],
        "Answer": "  Answer:  c\nExplanation:  C++ library uses streams to operate with physical devices such as Keyboards, Printers, Terminals or with any other type of files supported by the system.\n"
    },
    {
        "id": 1625,
        "Question": "How many streams are automatically created when executing a program?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer:  c\nExplanation:  There are streams that are automatically created when executing a program. They are stdin, stdout and stderr.\n"
    },
    {
        "id": 1626,
        "Question": "4. What will be the output of the following C++ code by manipulating the text file?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">remove</span><span class=\"br0\">(</span> <span class=\"st0\">\"myfile.txt\"</span> <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">perror</span><span class=\"br0\">(</span> <span class=\"st0\">\"Error\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">puts</span><span class=\"br0\">(</span> <span class=\"st0\">\"Success\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Error",
            "b) Success",
            "c) Runtime Error",
            "d) Can’t say"
        ],
        "Answer": "  Answer:  d\nExplanation:  If myfile.txt exists, then it will delete the file. Else it will print an error message.\nOutput:\n\n\n        \n\n$ g++ out.cpp\n$ a.out\nSuccess\n\n\n"
    },
    {
        "id": 1627,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"myfile.txt\"</span>, <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">perror</span> <span class=\"br0\">(</span><span class=\"st0\">\"Error opening file\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">do</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                c <span class=\"sy1\">=</span> <span class=\"kw3\">getc</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">                    n<span class=\"sy2\">++</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>c <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"kw2\">EOF</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Count of ‘$’ symbol",
            "b) Error opening file",
            "c) Count of ‘$’ symbol or Error opening file",
            "d) Error"
        ],
        "Answer": "  Answer:  c\nExplanation:   Anyone is possible – Either the file doesn’t exist or If exist, it will print the total number of ‘$’ character.\n"
    },
    {
        "id": 1628,
        "Question": "6. What will be the output of the following C++ code in the text file?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span> pFile<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        pFile <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span><span class=\"br0\">(</span><span class=\"st0\">\"sample.txt\"</span>, <span class=\"st0\">\"wt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy1\">=</span> <span class=\"st0\">'A'</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'E'</span><span class=\"sy4\">;</span> c<span class=\"sy2\">++</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span>    </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">putc</span> <span class=\"br0\">(</span>c, pFile<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>pFile<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) ABCD",
            "b) ABC",
            "c) ABCDE",
            "d) ADC"
        ],
        "Answer": "  Answer:  c\nExplanation:  In this program, We are printing from A to E by using the putc function.\nOutput:\n\n\n$ g++ out2.cpp\n$ a.out\nABCDE\n\n\n"
    },
    {
        "id": 1629,
        "Question": "7. What is the name of the myfile2 file after executing the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> oldname<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"myfile2.txt\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">char</span> newname<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"newname.txt\"</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result <span class=\"sy1\">=</span> <span class=\"kw3\">rename</span><span class=\"br0\">(</span>oldname, newname <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">puts</span> <span class=\"br0\">(</span> <span class=\"st0\">\"success\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">perror</span><span class=\"br0\">(</span> <span class=\"st0\">\"Error\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) name",
            "b) new",
            "c) newname",
            "d) Error"
        ],
        "Answer": "  Answer:  c\nExplanation:  In this program, We are renaming the myfile2 to newname by using the function rename.\nOutput:\n\n\nmyfile2.txt is renamed to newname.txt\n\n\n"
    },
    {
        "id": 1630,
        "Question": "8. How are many number of characters available in newname.txt?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">FILE</span> <span class=\"sy2\">*</span> p<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        p <span class=\"sy1\">=</span> <span class=\"kw3\">fopen</span> <span class=\"br0\">(</span><span class=\"st0\">\"newname.txt\"</span>, <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">==</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">perror</span> <span class=\"br0\">(</span><span class=\"st0\">\"Error opening file\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw3\">fgetc</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"kw2\">EOF</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"sy2\">++</span>n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">feof</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">else</span></pre></li><li class=\"li1\"><pre class=\"de1\">                <span class=\"kw3\">puts</span> <span class=\"br0\">(</span><span class=\"st0\">\"End-of-File was not reached.\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">fclose</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 15",
            "c) Depends on the text file",
            "d) 34"
        ],
        "Answer": "  Answer:  c\nExplanation:  In this program, We are reading the number of characters in the program by using the function feof.\nOutput:\n\n\n$ g++ out4.cpp\n$ a.out\n162\n\n\n"
    },
    {
        "id": 1631,
        "Question": "How many indicators are available in c++?",
        "Options": [
            "a) 4",
            "b) 3",
            "c) 2",
            "d) 1"
        ],
        "Answer": "  Answer:  b\nExplanation:  There are three indicators are available in C++. They are Error indicator, End-Of-File indicator and Position indicator.\n"
    },
    {
        "id": 1632,
        "Question": "What is the benefit of c++ input and output over c input and output?",
        "Options": [
            "a) Type safety",
            "b) Exception",
            "c) Both Type safety & Exception",
            "d) Sequence container"
        ],
        "Answer": "  Answer:  a\nExplanation:  C++ input and output are type safety that means we don’t need to specify the type of variable we are printing.\neg:\nin C we need to specify %d showing that an integer will be printed, whereas in C++ we just cout the variable.\nprintf(“%d”, a);\ncout<<a;\n"
    },
    {
        "id": 1633,
        "Question": "To which type does the numeric limits are suitable?",
        "Options": [
            "a) Character types",
            "b) Mixed type",
            "c) Arithmetic types",
            "d) Relational types"
        ],
        "Answer": "  Answer: c\nExplanation: Numeric limits provides the information about the properties of arithmetic types.\n"
    },
    {
        "id": 1634,
        "Question": "Where does the member should be defined if it is used in the program?",
        "Options": [
            "a) Namespace scope",
            "b) Character scope",
            "c) Namespace & Character scope",
            "d) Directional scope"
        ],
        "Answer": "  Answer: a\nExplanation: The member shall still be defined in a namespace scope if it is used in the program.\n"
    },
    {
        "id": 1635,
        "Question": "What will the max function in the numeric limit will return for type float?",
        "Options": [
            "a) Maximum finite value for a float type",
            "b) Maximum finite value",
            "c) Minimum finite value",
            "d) Minimum float value"
        ],
        "Answer": "  Answer: a\nExplanation: Max function in the numeric limit will return the maximum finite value for a float type.\n"
    },
    {
        "id": 1636,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> boolalpha<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">has_infinity</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 53234",
            "b) false",
            "c) true",
            "d) 32564"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, We are checking whether the integer has limit or not by using has_infinity function.\nOutput:\n\n\n        \n\n$ g++ num.cpp\n$ a.out\nfalse\n\n\n"
    },
    {
        "id": 1637,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">short</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 53723",
            "b) 32423",
            "c) 32767",
            "d) 4668"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are finding the max range for short int by using max function.\nOutput:\n\n\n\t\n\n$ g++ num1.cpp\n$ a.out\n32767\n\n\n"
    },
    {
        "id": 1638,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">is_exact</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">is_exact</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">is_exact</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">is_exact</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 0010",
            "b) 0012",
            "c) 1100",
            "d) 0011"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, We are finding whether the types are free of rounding errors by using the function is_exact.\nOutput:\n\n\n$ g++ num2.cpp\n$ a.out\n0011\n\n\n"
    },
    {
        "id": 1639,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;limits&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> numeric_limits<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::</span> <span class=\"me2\">min_exponent</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 125",
            "b) -125",
            "c) 123",
            "d) 521"
        ],
        "Answer": "  Answer: d\nExplanation: In this program, We are finding the number of decimal points that the type can represent without loss of precision.\nOutput:\n\n\n$ g++ num3.cpp\n$ a.out\n6 \n15\n100000000\n\n\n"
    },
    {
        "id": 1640,
        "Question": "Which header file is used for the numeric limits in C++?",
        "Options": [
            "a) <iostream>",
            "b) <limits>",
            "c) <number>",
            "d) <digit>"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, We are finding the minimum radix of a type by using min_exponent function.\nOutput:\n\n\n$ g++ num4.cpp\n$ a.out\n-125\n\n\n"
    },
    {
        "id": 1641,
        "Question": "Pick out the incorrect static function member in numeric limits.",
        "Options": [
            "a) denorm_min",
            "b) digits",
            "c) infinity",
            "d) max_finite"
        ],
        "Answer": "  Answer: b\nExplanation: <limits> header file will be used for numeric limits in C++.\n"
    },
    {
        "id": 1642,
        "Question": "With which does the trigonometric functions work with angles in c++?",
        "Options": [
            "a) Degrees",
            "b) Radians",
            "c) Both Degrees & Radians",
            "d) Celsius"
        ],
        "Answer": "  Answer: b\nExplanation: The trigonometric functions work with angles in radians rather than degrees.\n"
    },
    {
        "id": 1643,
        "Question": "Which header file is required for manipulation of math functions in c++?",
        "Options": [
            "a) cmath",
            "b) maths",
            "c) math",
            "d) dmath"
        ],
        "Answer": "  Answer: a\nExplanation: #include is a header file required for manipulation of math functions.\n"
    },
    {
        "id": 1644,
        "Question": "How many macros are used by mathematical functions in the header file <cerrno>?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: c\nExplanation: There are three macros used in mathematical functions. They are HUGE_VAL, EDOM, ERANGE.\n"
    },
    {
        "id": 1645,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;math.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> param, result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        param <span class=\"sy1\">=</span> <span class=\"nu16\">8.0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result <span class=\"sy1\">=</span> <span class=\"kw3\">frexp</span> <span class=\"br0\">(</span>param , <span class=\"sy3\">&amp;</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d <span class=\"es1\">\\n</span>\"</span>, param<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 7",
            "c) 8",
            "d) 9"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are breaking out the number by using the frexp function.\nOutput:\n\n\n        \n\n$ g++ math.cpp\n$ a.out\n8\n\n\n"
    },
    {
        "id": 1646,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;math.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">double</span> param, result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        param <span class=\"sy1\">=</span> <span class=\"nu16\">5.5</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result <span class=\"sy1\">=</span> <span class=\"kw3\">log</span> <span class=\"br0\">(</span>param<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span>, result <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 5.5",
            "b) 3.14",
            "c) 1.704",
            "d) 2.4656"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are finding out the log value of param by using param function.\nOutput:\n\n\n\t\n\n$ g++ math1.cpp\n$ a.out\n1.704748\n\n\n"
    },
    {
        "id": 1647,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;math.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span>, <span class=\"kw3\">pow</span> <span class=\"br0\">(</span><span class=\"nu16\">7.0</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 343",
            "b) 343.00",
            "c) 334",
            "d) 324"
        ],
        "Answer": "  Answer: b\nExplanation: In this program, We are calculating the 7 power of 3 by using the powfunction. As we are using 7.0, it is producing the result in 343.00\nOutput:\n\n\n$ g++ math2.cpp\n$ a.out\n343.000000\n\n\n"
    },
    {
        "id": 1648,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;math.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span>, <span class=\"kw3\">fabs</span> <span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu16\">10.6</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) -10",
            "c) 10.600000",
            "d) -25"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are finding the remainder of the given values by using fmod function.\nOutput:\n\n\n$ g++ math3.cpp\n$ a.out\n1.300000\n1.700000\n\n\n"
    },
    {
        "id": 1649,
        "Question": "Which of the following mathematical function is overloaded in <complex> and <valarray>?",
        "Options": [
            "a) cos",
            "b) tan",
            "c) sin",
            "d) mod"
        ],
        "Answer": "  Answer: c\nExplanation: In this program, We are finding the absolute value of -10.6 by using abs function.\nOutput:\n\n\n$ g++ math4.cpp\n$ a.out\n10.600000\n\n\n"
    },
    {
        "id": 1650,
        "Question": "How many parameters are used in frexp function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "  Answer: b\nExplanation: Because tan has more different definition in normal case and in case of complex number i.e. tan = sin/cos(normally) and tan = y/x in complex numbers.\n"
    },
    {
        "id": 1651,
        "Question": "Which of the following library is used to do vector arithmetic?",
        "Options": [
            "a) Boost",
            "b) Time",
            "c) OpenGL",
            "d) OpenDL"
        ],
        "Answer": " Answer: a\nExplanation: Boost package has a linear algebra package that may well suits for vector arithmetic.\n"
    },
    {
        "id": 1652,
        "Question": "Which header file is used to manipulate the vector algebra in c++?",
        "Options": [
            "a) math",
            "b) cmath",
            "c) vmath",
            "d) dmath"
        ],
        "Answer": " Answer: c\nExplanation: vmath is set of C++ classes for Vector and Matrix algebra used in the programs.\n"
    },
    {
        "id": 1653,
        "Question": "What type of reference should be used in vector arithmetic?",
        "Options": [
            "a) dynamic",
            "b) const",
            "c) both dynamic & const",
            "d) static"
        ],
        "Answer": " Answer: b\nExplanation: As we are using the vector and it will give accurate result if we use const reference.\n"
    },
    {
        "id": 1654,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">class</span> vec</pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw2\">public</span><span class=\"sy4\">:</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec<span class=\"br0\">(</span><span class=\"kw4\">float</span> f1, <span class=\"kw4\">float</span> f2<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            x <span class=\"sy1\">=</span> f1<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            y <span class=\"sy1\">=</span> f2<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> x<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">float</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    vec addvectors<span class=\"br0\">(</span>vec v1, vec v2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec v1<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec v2<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec v3 <span class=\"sy1\">=</span> addvectors<span class=\"br0\">(</span>v1, v2<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> v3.<span class=\"me1\">x</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> v3.<span class=\"me1\">y</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    vec addvectors<span class=\"br0\">(</span>vec v1, vec v2<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vec result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> v1.<span class=\"me1\">x</span> <span class=\"sy2\">+</span> v2.<span class=\"me1\">x</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        result.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> v1.<span class=\"me1\">y</span> <span class=\"sy2\">+</span> v2.<span class=\"me1\">y</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4, 5",
            "b) 4, 4",
            "c) 5, 4",
            "d) 5, 5"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are adding two vectors by using standalone function and printing it.\nOutput:\n\n\n        \n\n$ g++ vecar.cpp\n$ a.out\n5, 4\n\n\n"
    },
    {
        "id": 1655,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;vector&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span> mask<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mask.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        mask.<span class=\"me1\">flip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> boolalpha<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> mask.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mask.<span class=\"me1\">at</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) false",
            "b) true",
            "c) false & true",
            "d) alpha"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are flipping the vector values by using flip function.\nOutput:\n\n\n\t\n\n$ g++ vecar1.cpp\n$ a.out\nfalse\n\n\n"
    },
    {
        "id": 1656,
        "Question": "What will be the type of output of vector cross product?",
        "Options": [
            "a) Scalar",
            "b) Vector",
            "c) Both Scalar & Vector",
            "d) Linear"
        ],
        "Answer": " Answer: b\nExplanation: Cross product of two vectors results into a vector.\n"
    },
    {
        "id": 1657,
        "Question": "Which function is used to optimize the space in vector?",
        "Options": [
            "a) at",
            "b) bool",
            "c) operator",
            "d) operand"
        ],
        "Answer": " Answer: b\nExplanation: This is a specialized version of vector, which is used for elements of type bool and optimizes for space.\n"
    },
    {
        "id": 1658,
        "Question": "What is the use of vector arithmetic in c++?",
        "Options": [
            "a) Computer graphics",
            "b) Computer booting",
            "c) Both Computer graphics & Computer booting",
            "d) Computer Networks"
        ],
        "Answer": " Answer: a\nExplanation: Computer graphics is the use of vector arithmetic in c++.\n"
    },
    {
        "id": 1659,
        "Question": "Which header file is used to operate on numeric sequences?",
        "Options": [
            "a) number",
            "b) numeric",
            "c) algorithm",
            "d) digit"
        ],
        "Answer": " Answer: b\nExplanation: header file is used to operate on numeric sequences that support certain operations.\n"
    },
    {
        "id": 1660,
        "Question": "Which mathematics library is used for vector manipulation in c++?",
        "Options": [
            "a) cli++",
            "b) vec++",
            "c) blitz++",
            "d) stac+++"
        ],
        "Answer": " Answer: c\nExplanation: Blitz++ is a high-performance vector mathematics library written in C++.\n"
    },
    {
        "id": 1661,
        "Question": "What is the use of accumulate function in a numeric library?",
        "Options": [
            "a) Returns the number",
            "b) Returns the result of accumulating all the values in the range",
            "c) Returns the number & result",
            "d) Return the characters"
        ],
        "Answer": " Answer: b\nExplanation: Returns the result of accumulating all the values in the range from first to last.\n"
    },
    {
        "id": 1662,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;numeric&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> myop <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> val<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> result<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        adjacent_difference <span class=\"br0\">(</span>val, val <span class=\"sy2\">+</span> <span class=\"nu0\">7</span>, result<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">' '</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 1 1 2",
            "b) 1 2 3 1",
            "c) 1 2 3 5",
            "d) 1 2 5 6"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are calculating the adjacent difference of the given range by using function adjacent_difference.\nOutput:\n\n\n        \n\n$ g++ gnl.cpp\n$ a.out\n1 1 1 2\n\n\n"
    },
    {
        "id": 1663,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;numeric&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> myfunction <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"sy2\">*</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> myclass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">3</span> <span class=\"sy2\">*</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> myobject<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> init <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> numbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> accumulate<span class=\"br0\">(</span>numbers, numbers <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>, init<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 100",
            "b) 140",
            "c) 160",
            "d) 180"
        ],
        "Answer": " Answer: c\nExplanation: In this program, We are calculating the product of every number in the given range by using accumulate function.\nOutput:\n\n\n\t\n\n$ g++ gnl1.cpp\n$ a.out\n160\n\n\n"
    },
    {
        "id": 1664,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;numeric&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> myop <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> y <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> val<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> result<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        partial_sum <span class=\"br0\">(</span>val, val <span class=\"sy2\">+</span> <span class=\"nu0\">5</span>, result<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1 3 6",
            "b) 1 3 6 10 15",
            "c) 1 3 6 10 16",
            "d) 1 10 5 6 4"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are calculating the sum of the given range by using partial_sum function.\nOutput:\n\n\n$ g++ gnl2.cpp\n$ a.out\n1 3 6 10 15\n\n\n"
    },
    {
        "id": 1665,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;numeric&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> myfunction <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"sy2\">*</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">struct</span> myclass </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">3</span> <span class=\"sy2\">*</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span> myobject<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> init <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> numbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> accumulate <span class=\"br0\">(</span>numbers, numbers <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>, init, minus<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 40",
            "b) 100",
            "c) 140",
            "d) 524"
        ],
        "Answer": " Answer: a\nExplanation: In this program, We are finding the difference between the init and the total of numbers range.\nOutput:\n\n\n$ g++ gnl3.cpp\n$ a.out\n40\n\n\n"
    },
    {
        "id": 1666,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;functional&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;numeric&gt; </span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> myaccumulator <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x <span class=\"sy2\">-</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> myproduct <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> y<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> </pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> series1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> series2<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> inner_product<span class=\"br0\">(</span>series1, series1 <span class=\"sy2\">+</span> <span class=\"nu0\">3</span>, series2, a ,myaccumulator, </pre></li><li class=\"li1\"><pre class=\"de1\">        myproduct<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 40",
            "b) 34",
            "c) 32",
            "d) 20"
        ],
        "Answer": " Answer: b\nExplanation: In this program, We are forming the custom function from two ranges by using inner_product function.\nOutput:\n\n\n$ g++ gnl4.cpp\n$ a.out\n34\n\n\n"
    },
    {
        "id": 1667,
        "Question": "How many parameters are available in partial_sum function in c++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 2 or 3",
            "d) 3 or 4"
        ],
        "Answer": " Answer: d\nExplanation: There are three or four parameters available in partial_sum function in C++. They are first and last element, result and an optional binary operator.\n"
    },
    {
        "id": 1668,
        "Question": "What is the default operation of adjacent_difference function in numeric library?",
        "Options": [
            "a) Difference",
            "b) Addition",
            "c) Multiplication",
            "d) Subtraction"
        ],
        "Answer": " Answer: a\nExplanation: The default operation is to calculate the difference, but some other operation can be specified as binary operator instead.\n"
    },
    {
        "id": 1669,
        "Question": "Which header file is used to create the pseudo random generator?",
        "Options": [
            "a) random",
            "b) cstdlib",
            "c) rand",
            "d) both random and cstdlib"
        ],
        "Answer": " Answer: d\nExplanation:  cstdlib header file is used to create pseudo random number. C++11 standard added random header file as well to generate random numbers.\n"
    },
    {
        "id": 1670,
        "Question": "Which is a constant defined in <cstdlib> header file?",
        "Options": [
            "a) RAND_MAX",
            "b) Rand",
            "c) Srand",
            "d) Blitz"
        ],
        "Answer": " Answer: a\nExplanation: RAND_MAX is a constant defined in <cstdlib> for deciding the maximum random number that can be produced.\n"
    },
    {
        "id": 1671,
        "Question": "How many parameters are available in srand function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: There is one parameter available in srand function. That is an integer value to be used as seed by the pseudo-random number generator algorithm.\n"
    },
    {
        "id": 1672,
        "Question": "4. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> ran <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ran <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Any number",
            "b) 89",
            "c) 0​ to RAND_MAX",
            "d) 79"
        ],
        "Answer": " Answer: c\nExplanation: As the declared number is integer, It will produce the random number from 0​ to RAND_MAX. The value of RAND_MAX is library-dependent, but is guaranteed to be at least 32767 on any standard library implementation.\nOutput:\n\n\n        \n\n$ g++ rand.cpp\n$ a.out\n574\n\n\n"
    },
    {
        "id": 1673,
        "Question": "5. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">RAND_MAX</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 4385234",
            "b) 12321412",
            "c) Depends on the compiler",
            "d) 32564789"
        ],
        "Answer": " Answer: c\nExplanation: RAND_MAX is a function used by the compiler to create a maximum random number.\nOutput:\n\n\n\t\n\n$ g++ rand1.cpp\n$ a.out\n2147483647\n\n\n"
    },
    {
        "id": 1674,
        "Question": "6. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdio.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;stdlib.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;time.h&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">srand</span> <span class=\"br0\">(</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"Random number: %d<span class=\"es1\">\\n</span>\"</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">srand</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 12",
            "b) 23",
            "c) 33",
            "d) Any number from 0 to 99"
        ],
        "Answer": " Answer: d\nExplanation: This program will create a random number based on time function using srand function.\nOutput:\n\n\n$ g++ rand2.cpp\n$ a.out\n23\n\n\n"
    },
    {
        "id": 1675,
        "Question": "7. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctime&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> ran<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ran <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ran<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 2 4",
            "b) 10 20",
            "c) Any two number from 1 to 10",
            "d) 50 6"
        ],
        "Answer": " Answer: c\nExplanation: In this program, It will produce two numbers from 1 to 10 by using srand function.\nOutput:\n\n\n$ g++ rand3.cpp\n$ a.out\n4 5\n\n\n"
    },
    {
        "id": 1676,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><ol><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;iostream&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;ctime&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"co2\">#include &lt;cstdlib&gt;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> ran<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> low <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, high <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw4\">int</span> range <span class=\"sy1\">=</span> <span class=\"br0\">(</span>high <span class=\"sy2\">-</span> low<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> index <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> index <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> index<span class=\"sy2\">++</span><span class=\"br0\">)</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">            ran <span class=\"sy1\">=</span> low <span class=\"sy2\">+</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>range <span class=\"sy2\">*</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"br0\">(</span><span class=\"kw2\">RAND_MAX</span> <span class=\"sy2\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ran <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">        <span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">    <span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": " Answer: a\nExplanation: In this program the output will always be 1 because as one can observe from the formula used in line #13 that the term inside int() will always be zero. Hence the output will always be 1.\nOutput:\n\n\n$ g++ rand4.cpp\n$ a.out\n1\n\n\n"
    },
    {
        "id": 1677,
        "Question": "Which operator is used to produce a certain number in a specific range?",
        "Options": [
            "a) $",
            "b) %",
            "c) modulo operator",
            "d) both % and modulo operator"
        ],
        "Answer": " Answer: d\nExplanation: In C++, modulo operator is denoted by %.\n"
    },
    {
        "id": 1678,
        "Question": "Which can be used to create a random number without duplication?",
        "Options": [
            "a) Character",
            "b) Time",
            "c) Both Character & Time",
            "d) Date"
        ],
        "Answer": " Answer: b\nExplanation: Time can be used to create a random number without duplication.\n"
    },
    {
        "id": 1679,
        "Question": "Which header file is required to use file I/O operations?",
        "Options": [
            "a) <ifstream>",
            "b) <ostream>",
            "c) <fstream>",
            "d) <iostream>"
        ],
        "Answer": "Answer: c\nExplanation: <fstream> header file is needed to use file I/O operations in C++. This header file contains all the file I/O operations definition."
    },
    {
        "id": 1680,
        "Question": "Which of the following is used to create an output stream?",
        "Options": [
            "a) ofstream",
            "b) ifstream",
            "c) iostream",
            "d) fsstream"
        ],
        "Answer": "Answer: a\nExplanation: ofstream is used to create an output stream in C++ file handling operations. Ofstream objects are used to read files."
    },
    {
        "id": 1681,
        "Question": "Which of the following is used to create a stream that performs both input and output operations?",
        "Options": [
            "a) ofstream",
            "b) ifstream",
            "c) iostream",
            "d) fstream"
        ],
        "Answer": "Answer: d\nExplanation: fstream is used to create a stream that performs both input and output operations in C++ file handling."
    },
    {
        "id": 1682,
        "Question": "Which of the following is not used as a file opening mode?",
        "Options": [
            "a) ios::trunc",
            "b) ios::binary",
            "c) ios::in",
            "d) ios::ate"
        ],
        "Answer": "Answer: a\nExplanation: ios::trunc is used to truncate a file if it exists. It is not a file opening mode."
    },
    {
        "id": 1683,
        "Options": [
            "a) 1, 3",
            "b) 2, 3",
            "c) 3 only",
            "d) 1, 2"
        ],
        "Answer": "Answer: a\nExplanation: C++ allows to use one or more file opening mode in a single open() method. ios::in and ios::out are input and output file opening mode respectively."
    },
    {
        "id": 1684,
        "Question": "By default, all the files in C++ are opened in _________ mode.",
        "Options": [
            "a) Text",
            "b) Binary",
            "c) ISCII",
            "d) VTC"
        ],
        "Answer": "Answer: a\nExplanation: By default, all the files in C++ are opened in text mode. They read the file as normal text."
    },
    {
        "id": 1685,
        "Question": "What is the use of ios::trunc mode?",
        "Options": [
            "a) To open a file in input mode",
            "b) To open a file in output mode",
            "c) To truncate an existing file to half",
            "d) To truncate an existing file to zero"
        ],
        "Answer": "Answer: d\nExplanation: In C++ file handling, ios::trunc mode is used to truncate an existing file to zero length."
    },
    {
        "id": 1686,
        "Question": "Which of the following is the default mode of the opening using the ofstream class?",
        "Options": [
            "a) ios::in",
            "b) ios::out",
            "c) ios::app",
            "d) ios::trunc"
        ],
        "Answer": "Answer: b\nExplanation: By default, the file is opened in ios::out mode if the file object we are using is of ofstream class."
    },
    {
        "id": 1687,
        "Question": "What is the return type open() method?",
        "Options": [
            "a) int",
            "b) char",
            "c) bool",
            "d) float"
        ],
        "Answer": "Answer: c\nExplanation: open() method returns a bool value indicating whether the file is opened or some error has occurred."
    },
    {
        "id": 1688,
        "Question": "Which of the following is not used to seek file pointer?",
        "Options": [
            "a) ios::set",
            "b) ios::end",
            "c) ios::cur",
            "d) ios::beg"
        ],
        "Answer": "Answer: a\nExplanation: ios::set is not used to seek file pointer. ios::end is used to seek from the end of the file. ios::curr from the current position. ios::beg from the beginning."
    },
    {
        "id": 1689,
        "Question": "Which of the following is the default mode of the opening using the ifstream class?",
        "Options": [
            "a) ios::in",
            "b) ios::out",
            "c) ios::app",
            "d) ios::trunc"
        ],
        "Answer": "Answer: a\nExplanation: By default, the file is opened in ios::in mode if the file object we are using is of ifstream class."
    },
    {
        "id": 1690,
        "Question": "Which of the following is the default mode of the opening using the fstream class?",
        "Options": [
            "a) ios::in",
            "b) ios::out",
            "c) ios::in|ios::out",
            "d) ios::trunc"
        ],
        "Answer": "Answer: c\nExplanation: By default, the file is opened in ios::in|ios::out mode if the file object we are using is of fstream class."
    },
    {
        "id": 1691,
        "Question": "Which function is used in C++ to get the current position of file pointer in a file?",
        "Options": [
            "a) tell_p()",
            "b) get_pos()",
            "c) get_p()",
            "d) tell_pos()"
        ],
        "Answer": "Answer: a\nExplanation: C++ provides tell_p() function to get the current position of the file pointer in a file."
    },
    {
        "id": 1692,
        "Question": "Which function is used to reposition the file pointer?",
        "Options": [
            "a) moveg()",
            "b) seekg()",
            "c) changep()",
            "d) go_p()"
        ],
        "Answer": "Answer: b\nExplanation: seekg() function is used to reposition a file pointer in a file. The function takes the offset and relative position from where we need to shift out pointer."
    },
    {
        "id": 1693,
        "Question": "Which of the following is used to move the file pointer to start of a file?",
        "Options": [
            "a) ios::beg",
            "b) ios::start",
            "c) ios::cur",
            "d) ios::first"
        ],
        "Answer": "Answer: a\nExplanation: ios::beg is used to reposition the file pointer to the beginning of the file. It is whenever you want to reposition the pointer at the beginning from any point to the start of the file."
    },
    {
        "id": 1694,
        "Question": "What is lambda expression in C++?",
        "Options": [
            "a) A technique of C++ that allows us to write inline functions without a name",
            "b) A technique of C++ that allows us to write overloaded functions",
            "c) A technique of C++ that allows us to write functions that are called more than once",
            "d) A technique of C++ that allows us to write functions without parameters"
        ],
        "Answer": "Answer: a\nExplanation: Lambda expression is a technique available in C++ that helps the programmer to write inline functions that will be used once in a program and so there is no need of providing names top them. Hence they are a type of inline functions without names."
    },
    {
        "id": 1695,
        "Question": "What is the syntax of defining lambda expression?",
        "Options": [
            "a) [capture clause](parameters) -> return_type { body of the function }",
            "b) [parameters](capture clause) -> return_type { body of the function }",
            "c) [parameters:capture clause]() -> return_type { body of the function }",
            "d) [capture clause:parameters]() -> return_type { body of the function }"
        ],
        "Answer": "Answer: a\nExplanation: The correct syntax of defining a lambda expression is given below:\n\n\n[capture clause](parameters) -> return_type \n{ \n\tthe body of the function \n}\n\n\n"
    },
    {
        "id": 1696,
        "Question": "What is the correct statement about lambda expression?",
        "Options": [
            "a) The return type of lambda expression can be neglected in some cases",
            "b) The return type of lambda expression must be specified in all cases",
            "c) Lambda expression should be very large functions",
            "d) Lambda expression is also available in C"
        ],
        "Answer": "Answer: a\nExplanation: Return type in lambda expression can be ignored in some cases as the compiler will itself figure that out but not in all cases. Lambda expression is used to define small functions, not large functions. Lambda expression is introduced in C++."
    },
    {
        "id": 1697,
        "Question": "In how many ways we can capture the external variables in the lambda expression?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three ways in which we can capture the external variables inside the lambda expression namely capture by reference, capture by value and capture by both that is mixed capture."
    },
    {
        "id": 1698,
        "Question": "Which of the following operator is used to capture all the external variable by reference?",
        "Options": [
            "a) &",
            "b) =",
            "c) *",
            "d) &&"
        ],
        "Answer": "Answer: a\nExplanation: The lambda expression uses & operator to capture the external variable by reference."
    },
    {
        "id": 1699,
        "Question": "Which of the following operator is used to capture all the external variable by value?",
        "Options": [
            "a) &",
            "b) =",
            "c) *",
            "d) &&"
        ],
        "Answer": "Answer: b\nExplanation: The lambda expression uses = operator to capture the external variable by value."
    },
    {
        "id": 1700,
        "Question": "Which is the correct syntax of capturing a variable ‘X’ by reference and other variable ‘Y’ by value in lambda expression?",
        "Options": [
            "a) [&X, Y] ",
            "b) [X, &y] ",
            "c) [X, Y] ",
            "d) [&x, &Y]"
        ],
        "Answer": "Answer: a\nExplanation: In order to capture a variable by reference we use & operator whereas when we capture a single variable by value then we just write the name of that variable without any operator preceding it, So the correct way of capturing the variables X and Y, in this case, is [&X, Y]."
    },
    {
        "id": 1701,
        "Question": "8. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> check <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> <span class=\"kw4\">bool</span> \n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>check<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 1",
            "b) 0",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: The above code gives an error because x is neither passed as a parameter in lambda expression nor it is declared as a local variable inside the expression. So the only x that will be referred is the outside x but as the lambda expression does not capture any variable, therefore, it is also not allowed to access the external variable x hence as variable x is not defined therefore the program gives the error."
    },
    {
        "id": 1702,
        "Question": "9. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> check <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> \n        <span class=\"br0\">{</span>\n\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span>\n\t\t<span class=\"kw1\">else</span>\n\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>check<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: The program is correct. In this program you can observe that we have specified the return type of the expression though also the program runs fine because compiler is able to find out the return type of the expression."
    },
    {
        "id": 1703,
        "Question": "10. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> check <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"sy1\">=</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> \n        <span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\tcheck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Value of a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Value of a: 5",
            "b) Value of a: 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: As this lambda expression is capturing the extrenal variable by value therefore the value of a cannot be changes inside the lambda expression hence the program gives error."
    },
    {
        "id": 1704,
        "Question": "11. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> check <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> \n        <span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span><span class=\"sy4\">;</span>\n\tcheck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Value of a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Value of a: 5",
            "b) Value of a: 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: b\nExplanation: As this lambda expression is capturing the extrenal variable by reference therefore the change in value of a will be reflected back outside the expression therefore the value of a will now be 10 and 10 is printed."
    },
    {
        "id": 1705,
        "Question": "12. What will be the output of the following C++ code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"co2\">#include&lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span>\n\t<span class=\"kw4\">auto</span> check <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>a<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> \n        <span class=\"br0\">{</span>\n\t\ta <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n\t\tb <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n\t<span class=\"br0\">}</span>\n\tcheck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Value of a: \"</span><span class=\"sy1\">&lt;&lt;</span>a<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"Value of b: \"</span><span class=\"sy1\">&lt;&lt;</span>b<span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span>\n\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Value of a: 5",
            "b) Value of a: 10",
            "c) Error",
            "d) Segmentation fault"
        ],
        "Answer": "Answer: c\nExplanation: As this lambda expression is not capturing variable b but trying to access the external variable b hence the program gives an error."
    },
    {
        "id": 1706,
        "Question": "What are command line arguments?",
        "Options": [
            "a) Arguments passed to main() function",
            "b) Arguments passed to any function",
            "c) Arguments passed to class functions",
            "d) Arguments passed to structure functions"
        ],
        "Answer": "Answer: a\nExplanation: Command line arguments are the arguments that passed to the main function when the program is starting its execution."
    },
    {
        "id": 1707,
        "Question": "To use command line arguments in C++, how many parameters are passed to the main function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: 2 arguments are needed to be passed to main() function while using command line arguments. The first one represents a number of strings in the argument list and the second list represents the list of string arguments."
    },
    {
        "id": 1708,
        "Question": "What is the signature of math in function using command line arguments?",
        "Options": [
            "a) int main(int argc, char const *argv[]);",
            "b) int main(int argc, char const **argv);",
            "c) int main(int argc, char **argv);",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Any of the above signature can be used while using command line arguments in C++ programs."
    },
    {
        "id": 1709,
        "Question": "What does the first parameter of the main function represent?",
        "Options": [
            "a) Number of command line arguments",
            "b) List of command line arguments",
            "c) Dictionary of command line arguments",
            "d) Stack of command line arguments"
        ],
        "Answer": "Answer: a\nExplanation: The first argument of the main() function represents the number of command line arguments that are passed."
    },
    {
        "id": 1710,
        "Question": "What does the second parameter of the main function represent?",
        "Options": [
            "a) Number of command line arguments",
            "b) List of command line arguments",
            "c) Dictionary of command line arguments",
            "d) Stack of command line arguments"
        ],
        "Answer": "Answer: b\nExplanation: The second argument of the main() function represents the list of command line arguments that are passed."
    },
    {
        "id": 1711,
        "Question": "Which of the following is correct about the first parameter of the main function?",
        "Options": [
            "a) First argument is of int type",
            "b) Stores the count of command line arguments",
            "c) First argument is non-negative",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All of the statements about the first parameter is correct. The first parameter is of non-negative integer type and stores the count of command line arguments."
    },
    {
        "id": 1712,
        "Question": "Which of the following is correct about the second parameter of the main function?",
        "Options": [
            "a) Second parameter is an array of character pointers",
            "b) First string of the list is the name of the program’s output fle",
            "c) The string in the list are separated by space in the terminal",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All of the statements about the second parameter is correct. It is the collection of character pointers which of which the first represents the name of the program file."
    },
    {
        "id": 1713,
        "Question": "Which of the following gives the name of the program if the second parameter to the main fucntion is char **argv?",
        "Options": [
            "a) argv[3] ",
            "b) argv[1] ",
            "c) argv[0] ",
            "d) argv[2]"
        ],
        "Answer": "Answer: c\nExplanation: The first string in the list of command line arguments represents the name of the program which can be accessed by using argv[0]."
    },
    {
        "id": 1714,
        "Question": "Which character is used to separate different arguments?",
        "Options": [
            "a) #",
            "b) $",
            "c) space",
            "d) |"
        ],
        "Answer": "Answer: a\nExplanation: In this program we are trying to print all the command line arguments. Hence as the list contains [“./output”, “Hello”, “World”] so the output is as shown. The first string is not program.cpp because the first string represents the name of the output file of the program."
    },
    {
        "id": 1715,
        "Question": "Which is the correct way of handling arguments with spaces?",
        "Options": [
            "a) Use single quotes",
            "b) Either single or double quotes",
            "c) Use double quotes",
            "d) There is no way of handling arguments with space"
        ],
        "Answer": "Answer: c\nExplanation: Command line arguments are separated by space. So if you write\n./output This is a single parameter\nthen they will interpreted as 5 command line arguments as shown : [“./output”, “This”, “is”, “single”, “parameter”]."
    },
    {
        "id": 1716,
        "Question": "9. What will be the output of the following C++ code if the following arguments are executed on terminal?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"cpp\"><pre class=\"de1\"><span class=\"sy1\">================</span>program.<span class=\"me1\">cpp</span><span class=\"sy1\">================</span>\n<span class=\"co2\">#include &lt;iostream&gt;</span>\n<span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>argc<span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"sy1\">=======================================</span>\n<span class=\"sy1\">================</span>commands<span class=\"sy1\">===============</span>\n$ g<span class=\"sy2\">++</span> program.<span class=\"me1\">cpp</span> <span class=\"sy2\">-</span>o output\n$ .<span class=\"sy2\">/</span>output Hello World\n<span class=\"sy1\">=======================================</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Only 1",
            "b) Only 2",
            "c) Both 1 and 2",
            "d) Neither 1 nor 2"
        ],
        "Answer": "Answer: b\nExplanation: One can use either single or double quotes to handle command line argument with spaces in-between. For example, ./output “Hello World” has 2 command line argument “./output” and “Hello World”."
    }
]