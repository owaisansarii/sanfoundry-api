[
    {
        "id": 1,
        "Question": "Operation code field is present in :",
        "Options": [
            "a) programming language instruction",
            "b) assembly language instruction",
            "c) machine language instruction",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Machine language instruction format has one or more fields. The first one is the operation code field."
    },
    {
        "id": 2,
        "Question": "A machine language instruction format consists of",
        "Options": [
            "a) Operand field",
            "b) Operation code field",
            "c) Operation code field & operand field",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Machine language instruction format has both the fields."
    },
    {
        "id": 3,
        "Question": "The length of the one-byte instruction is",
        "Options": [
            "a) 2 bytes",
            "b) 1 byte",
            "c) 3 bytes",
            "d) 4 bytes"
        ],
        "Answer": "Answer: b\nExplanation: This format is only one byte long."
    },
    {
        "id": 4,
        "Question": "The instruction format ‘register to register’ has a length of",
        "Options": [
            "a) 2 bytes",
            "b) 1 byte",
            "c) 3 bytes",
            "d) 4 bytes"
        ],
        "Answer": "Answer: a\nExplanation: This format is 2 bytes long."
    },
    {
        "id": 5,
        "Question": "The R/M field in a machine instruction format specifies",
        "Options": [
            "a) another register",
            "b) another memory location",
            "c) other operands",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The LSBs(least significant bits) from 0 to 3 represent R/M field that specifies another register or memory location i.e. the other operand."
    },
    {
        "id": 6,
        "Question": "In a machine instruction format, S-bit is the",
        "Options": [
            "a) status bit",
            "b) sign bit",
            "c) sign extension bit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The S-bit known as sign extension bit is used along with W-bit to show the type of operation."
    },
    {
        "id": 7,
        "Question": "The bit which is used by the ‘REP’ instruction is",
        "Options": [
            "a) W-bit",
            "b) S-bit",
            "c) V-bit",
            "d) Z-bit"
        ],
        "Answer": "Answer: d\nExplanation: The Z-bit is used by the REP instruction to control the loop."
    },
    {
        "id": 8,
        "Question": "If a W-bit value is ‘1’ then the operand is of",
        "Options": [
            "a) 8 bits",
            "b) 4 bits",
            "c) 16 bits",
            "d) 2 bits"
        ],
        "Answer": "Answer: c\nExplanation: If W-bit is ‘1’ then the operand is of 16-bits, and if it is ‘0’ then the operand is of 8-bits."
    },
    {
        "id": 9,
        "Question": "The instructions which after execution transfer control to the next instruction in the sequence are called",
        "Options": [
            "a) Sequential control flow instructions",
            "b) control transfer instructions",
            "c) Sequential control flow & control transfer instructions",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The sequential control flow instructions follow sequence order in their execution."
    },
    {
        "id": 10,
        "Question": "The instructions that transfer the control to some predefined address or the address specified in the instruction are called as",
        "Options": [
            "a) sequential control flow instructions",
            "b) control transfer instructions",
            "c) sequential control flow & control transfer instructions",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The control transfer instructions transfer control to the specified address."
    },
    {
        "id": 11,
        "Question": "The instruction “JUMP” belongs to",
        "Options": [
            "a) sequential control flow instructions",
            "b) control transfer instructions",
            "c) branch instructions",
            "d) control transfer & branch instructions"
        ],
        "Answer": "Answer: d\nExplanation: The JUMP instruction transfers the control to the address located in the instruction."
    },
    {
        "id": 12,
        "Question": "The instruction, MOV AX, 0005H belongs to the address mode",
        "Options": [
            "a) register",
            "b) direct",
            "c) immediate",
            "d) register relative"
        ],
        "Answer": "Answer: c\nExplanation: In Immediate addressing mode, immediate data is a part of instruction and appears in the form of successive byte or bytes."
    },
    {
        "id": 13,
        "Question": "The instruction, MOV AX, 1234H is an example of",
        "Options": [
            "a) register addressing mode",
            "b) direct addressing mode",
            "c) immediate addressing mode",
            "d) based indexed addressing mode"
        ],
        "Answer": "Answer: c\nExplanation: Since immediate data is present in the instruction."
    },
    {
        "id": 14,
        "Question": "The instruction, MOV AX, [2500H] is an example of",
        "Options": [
            "a) immediate addressing mode",
            "b) direct addressing mode",
            "c) indirect addressing mode",
            "d) register addressing mode"
        ],
        "Answer": "Answer: b\nExplanation: Since the address is directly specified in the instruction as a part of it."
    },
    {
        "id": 15,
        "Question": "If the data is present in a register and it is referred using the particular register, then it is",
        "Options": [
            "a) direct addressing mode",
            "b) register addressing mode",
            "c) indexed addressing mode",
            "d) immediate addressing mode"
        ],
        "Answer": "Answer: b\nExplanation: Since register is used to refer the address."
    },
    {
        "id": 16,
        "Question": "The instruction, MOV AX,[BX] is an example of",
        "Options": [
            "a) direct addressing mode",
            "b) register addressing mode",
            "c) register relative addressing mode",
            "d) register indirect addressing mode"
        ],
        "Answer": "Answer: d\nExplanation: Since the register used to refer to the address is accessed indirectly."
    },
    {
        "id": 17,
        "Question": "If the offset of the operand is stored in one of the index registers, then it is",
        "Options": [
            "a) based indexed addressing mode",
            "b) relative based indexed addressing mode",
            "c) indexed addressing mode",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In the indexed addressing mode, the offset of an operand is stored and in the rest of them, address is stored."
    },
    {
        "id": 18,
        "Question": "The addressing mode that is used in unconditional branch instructions is",
        "Options": [
            "a) intrasegment direct addressing mode",
            "b) intrasegment indirect addressing mode",
            "c) intrasegment direct and indirect addressing mode",
            "d) intersegment direct addressing mode"
        ],
        "Answer": "Answer: b\nExplanation: In intrasegment indirect mode, the branch address is found as the content of a register or a memory location."
    },
    {
        "id": 19,
        "Question": "If the location to which the control is to be transferred lies in a different segment other than the current one, then the mode is called",
        "Options": [
            "a) intrasegment mode",
            "b) intersegment direct mode",
            "c) intersegment indirect mode",
            "d) intersegment direct and indirect mode"
        ],
        "Answer": "Answer: d\nExplanation: In intersegment mode, the control to be transferred lies in a different segment."
    },
    {
        "id": 20,
        "Question": "The contents of a base register are added to the contents of index register in",
        "Options": [
            "a) indexed addressing mode",
            "b) based indexed addressing mode",
            "c) relative based indexed addressing mode",
            "d) based indexed and relative based indexed addressing mode"
        ],
        "Answer": "Answer: c\nExplanation: Since in intersegment direct mode, the address to which the control is to be transferred is in a different segment."
    },
    {
        "id": 21,
        "Question": "The instruction that is used to transfer the data from source operand to destination operand is",
        "Options": [
            "a) data copy/transfer instruction",
            "b) branch instruction",
            "c) arithmetic/logical instruction",
            "d) string instruction"
        ],
        "Answer": "Answer: a\nExplanation: These instructions are used to copy and transfer the instructions."
    },
    {
        "id": 22,
        "Question": "Which of the following is not a data copy/transfer instruction?",
        "Options": [
            "a) MOV",
            "b) PUSH",
            "c) DAS",
            "d) POP"
        ],
        "Answer": "Answer: c\nExplanation: DAS (Decimal Adjust after Subtraction) is an arithmetic instruction."
    },
    {
        "id": 23,
        "Question": "The instructions that involve various string manipulation operations are",
        "Options": [
            "a) branch instructions",
            "b) flag manipulation instructions",
            "c) shift and rotate instructions",
            "d) string instructions"
        ],
        "Answer": "Answer: d\nExplanation: The string instructions perform operations on strings such as load, move, scan, compare etc."
    },
    {
        "id": 24,
        "Question": "Which of the following instruction is not valid?",
        "Options": [
            "a) MOV AX, BX",
            "b) MOV DS, 5000H",
            "c) MOV AX, 5000H",
            "d) PUSH AX"
        ],
        "Answer": "Answer: b\nExplanation: Both the source and destination operands cannot be memory locations except for string instructions."
    },
    {
        "id": 25,
        "Question": "In PUSH instruction, after each execution of the instruction, the stack pointer is",
        "Options": [
            "a) incremented by 1",
            "b) decremented by 1",
            "c) incremented by 2",
            "d) decremented by 2"
        ],
        "Answer": "Answer: d\nExplanation: The actual current stack-top is always occupied by the previously pushed data. So, the push operation decrements SP by 2 and then stores the two bytes contents of the operand onto the stack."
    },
    {
        "id": 26,
        "Question": "The instruction that pushes the contents of the specified register/memory location on to the stack is",
        "Options": [
            "a) PUSHF",
            "b) POPF",
            "c) PUSH",
            "d) POP"
        ],
        "Answer": "Answer: c\nExplanation: Since PUSH operation transfers data to stack from a register or memory location."
    },
    {
        "id": 27,
        "Question": "In POP instruction, after each execution of the instruction, the stack pointer is",
        "Options": [
            "a) incremented by 1",
            "b) decremented by 1",
            "c) incremented by 2",
            "d) decremented by 2"
        ],
        "Answer": "Answer: c\nExplanation: The actual current stack top is poped into the specific operand as the contents of stack top memory is stored in AL&SP and further contents of the memory location pointed to by SP are copied to AH & SP."
    },
    {
        "id": 28,
        "Question": "The instructions that are used for reading an input port and writing an output port respectively are",
        "Options": [
            "a) MOV, XCHG",
            "b) MOV, IN",
            "c) IN, MOV",
            "d) IN, OUT"
        ],
        "Answer": "Answer: d\nExplanation: The address of the input/output port may be specified directly or indirectly.\n              Example for input port: IN AX, DX; This instruction reads data from a 16-bit port whose address is in DX and stores it in AX\n              Example for output port: OUT 03H, AL; This sends data available in AL to a port whose address is 03H."
    },
    {
        "id": 29,
        "Question": "The instruction that is used for finding out the codes in case of code conversion problems is",
        "Options": [
            "a) XCHG",
            "b) XLAT",
            "c) XOR",
            "d) JCXZ"
        ],
        "Answer": "Answer: b\nExplanation: The translate(XLAT) instruction is used to find codes."
    },
    {
        "id": 30,
        "Question": "The instruction that loads effective address formed by destination operand into the specified source register is",
        "Options": [
            "a) LEA",
            "b) LDS",
            "c) LES",
            "d) LAHF"
        ],
        "Answer": "Answer: a\nExplanation: The instruction, LEA loads effective address and is more useful for assembly language rather than for machine language."
    },
    {
        "id": 31,
        "Question": "The instruction that loads the AH register with the lower byte of the flag register is",
        "Options": [
            "a) SAHF",
            "b) AH",
            "c) LAHF",
            "d) PUSHF"
        ],
        "Answer": "Answer: c\nExplanation: The instruction LAHF(Load AH from a lower byte of Flag) may be used to observe the status of all the condition code flags(except overflow flag) at a time."
    },
    {
        "id": 32,
        "Question": "The instruction that pushes the flag register on to the stack is",
        "Options": [
            "a) PUSH",
            "b) POP",
            "c) PUSHF",
            "d) POPF"
        ],
        "Answer": "Answer: c\nExplanation: The instruction PUSHF(push flags to stack) pushes the flag register on to the stack."
    },
    {
        "id": 33,
        "Question": "The instruction that loads the flag register completely from the word contents of the memory location is",
        "Options": [
            "a) PUSH",
            "b) POP",
            "c) PUSHF",
            "d) POPF"
        ],
        "Answer": "Answer: d\nExplanation: POPF is pop flags to stack."
    },
    {
        "id": 34,
        "Question": "The instruction that adds immediate data/contents of the memory location specified in an instruction/register to the contents of another register/memory location is",
        "Options": [
            "a) SUB",
            "b) ADD",
            "c) MUL",
            "d) DIV"
        ],
        "Answer": "Answer: b\nExplanation: ADD instruction adds the data."
    },
    {
        "id": 35,
        "Question": "The instruction that supports addition when carry exists is",
        "Options": [
            "a) ADD",
            "b) ADC",
            "c) ADD & ADC",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: ADC(Add with Carry) instruction performs the same operation as ADD operation, but adds the carry flag bit to the result."
    },
    {
        "id": 36,
        "Question": "The instruction, “INC” increases the contents of the specified register or memory location by",
        "Options": [
            "a) 2",
            "b) 0",
            "c) 1",
            "d) 3"
        ],
        "Answer": "Answer: c\nExplanation: This instruction adds 1 to the contents of the operand and so increments by 1."
    },
    {
        "id": 37,
        "Question": "The instruction that subtracts 1 from the contents of the specified register/memory location is",
        "Options": [
            "a) INC",
            "b) SUBB",
            "c) SUB",
            "d) DEC"
        ],
        "Answer": "Answer: d\nExplanation: The DEC instruction decrements the contents of a specified register/memory location by 1."
    },
    {
        "id": 38,
        "Question": "The instruction that enables subtraction with borrow is",
        "Options": [
            "a) DEC",
            "b) SUB",
            "c) SBB",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The SBB instruction subtracts the source operand and the borrow flag from the destination operand."
    },
    {
        "id": 39,
        "Question": "The flag that acts as Borrow flag in the instruction, SBB is",
        "Options": [
            "a) direction flag",
            "b) carry flag",
            "c) parity flag",
            "d) trap flag"
        ],
        "Answer": "Answer: b\nExplanation: If borrow exists in the subtraction operation performed then carry flag is set."
    },
    {
        "id": 40,
        "Question": "In general, the source operand of an instruction can be",
        "Options": [
            "a) memory location",
            "b) register",
            "c) immediate data",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The source operand is the element which is data or data stored memory location on which operation is performed."
    },
    {
        "id": 41,
        "Question": "In general, the destination operand of an instruction can be",
        "Options": [
            "a) memory location",
            "b) register",
            "c) immediate data",
            "d) memory location and register"
        ],
        "Answer": "Answer: d\nExplanation: Since the destination should be able to store the data, immediate data cannot be considered as a destination operand."
    },
    {
        "id": 42,
        "Question": "The instruction, CMP to compare source and destination operands it performs",
        "Options": [
            "a) addition",
            "b) subtraction",
            "c) division",
            "d) multiplication"
        ],
        "Answer": "Answer: b\nExplanation: For comparison, the instruction CMP subtracts source operand from destination operand."
    },
    {
        "id": 43,
        "Question": "During comparison operation, the result of comparing or subtraction is stored in",
        "Options": [
            "a) memory",
            "b) registers",
            "c) stack",
            "d) no where"
        ],
        "Answer": "Answer: d\nExplanation: The result of subtraction operation is not stored anywhere during a comparison."
    },
    {
        "id": 44,
        "Question": "The instruction that converts the result in an unpacked decimal digits is",
        "Options": [
            "a) AAA",
            "b) AAS",
            "c) AAM",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: All the ASCII adjust instructions give result in unpacked decimal form and so are called as “Unpacked BCD arithmetic instructions”."
    },
    {
        "id": 45,
        "Question": "Which of the following is a mnemonic?",
        "Options": [
            "a) ADD",
            "b) ADC",
            "c) AAA",
            "d) ADD & ADC"
        ],
        "Answer": "Answer: c\nExplanation: AAA is a mnemonic. It doesn’t have either a source or destination operand."
    },
    {
        "id": 46,
        "Question": "The instruction in which adjustment is made before performing the operation is",
        "Options": [
            "a) AAA",
            "b) AAS",
            "c) AAM",
            "d) AAD"
        ],
        "Answer": "Answer: d\nExplanation: The AAD instruction converts two unpacked BCD digits in AH and AL to the equivalent binary number in AL. This adjustment must be made before dividing the two unpacked BCD digits."
    },
    {
        "id": 47,
        "Question": "The expansion of DAA is",
        "Options": [
            "a) decimal adjust after addition",
            "b) decimal adjust before addition",
            "c) decimal adjust accumulator",
            "d) decimal adjust auxiliary"
        ],
        "Answer": "Answer: c\nExplanation: This instruction performs conversion operation."
    },
    {
        "id": 48,
        "Question": "The instruction that is used to convert the result of the addition of two packed BCD numbers to a valid BCD number is",
        "Options": [
            "a) DAA",
            "b) DAS",
            "c) AAA",
            "d) AAS"
        ],
        "Answer": "Answer: a\nExplanation: In this conversion, the result has to be only in AL."
    },
    {
        "id": 49,
        "Question": "The ROR instruction rotates the contents of the destination operand to",
        "Options": [
            "a) left",
            "b) right",
            "c) left and then right",
            "d) right and then left"
        ],
        "Answer": "Answer: b\nExplanation: ROR stands for Rotate Right without carry. so, the instruction rotates right."
    },
    {
        "id": 50,
        "Question": "The mnemonic that is placed before the arithmetic operation is performed is",
        "Options": [
            "a) AAA",
            "b) AAS",
            "c) AAM",
            "d) AAD"
        ],
        "Answer": "Answer: d\nExplanation: The AAD instruction converts two unpacked BCD digits in AH and AL to the equivalent binary number in AL."
    },
    {
        "id": 51,
        "Question": "The Carry flag is undefined after performing the operation",
        "Options": [
            "a) AAA",
            "b) ADC",
            "c) AAM",
            "d) AAD"
        ],
        "Answer": "Answer: d\nExplanation: Since the operation, AAD is performed before division operation is performed, the carry flag, auxiliary flag and overflow flag are undefined."
    },
    {
        "id": 52,
        "Question": "The instruction that performs logical AND operation and the result of the operation is not available is",
        "Options": [
            "a) AAA",
            "b) AND",
            "c) TEST",
            "d) XOR"
        ],
        "Answer": "Answer: c\nExplanation: In the TEST instruction, the logical AND operation is performed and the result is not stored but flags are affected."
    },
    {
        "id": 53,
        "Question": "In the RCL instruction, the contents of the destination operand undergo function as",
        "Options": [
            "a) carry flag is pushed into LSB & MSB is pushed into the carry flag",
            "b) carry flag is pushed into MSB & LSB is pushed into the carry flag",
            "c) auxiliary flag is pushed into LSB & MSB is pushed into the carry flag",
            "d) parity flag is pushed into MSB & LSB is pushed into the carry flag"
        ],
        "Answer": "Answer: a\nExplanation: In RCL(Rotate right through carry), for each operation, the carry flag is pushed into LSB and the MSB of the operand is pushed into carry flag."
    },
    {
        "id": 54,
        "Question": "The instruction that is used as prefix to an instruction to execute it repeatedly until the CX register becomes zero is",
        "Options": [
            "a) SCAS",
            "b) REP",
            "c) CMPS",
            "d) STOS"
        ],
        "Answer": "Answer: b\nExplanation: The instruction to which the REP is prefix, is executed repeatedly until CX register becomes zero. When CX becomes zero, the execution proceeds to the next instruction in sequence."
    },
    {
        "id": 55,
        "Question": "6. Match the following<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">A) MOvSB/SW       1) loads AL/AX register by content of a string\nB) CMPS           2) moves a string of bytes stored in source to destination\nC) SCAS           3) compares two strings of bytes or words whose length is stored in CX register\nD) LODS           4) scans a string of bytes or words</pre></div></div></div></div></div></div>",
        "Options": [
            "a) A-3,B-4,C-2,D-1",
            "b) A-2,B-1,C-4,D-3",
            "c) A-2,B-3,C-1,D-4",
            "d) A-2,B-3,C-4,D-1"
        ],
        "Answer": "Answer: d\nExplanation: By using the string instructions, the operations on strings can be performed."
    },
    {
        "id": 56,
        "Question": "The instructions that are used to call a subroutine from the main program and return to the main program after execution of called function are",
        "Options": [
            "a) CALL, JMP",
            "b) JMP, IRET",
            "c) CALL, RET",
            "d) JMP, RET"
        ],
        "Answer": "Answer: c\nExplanation: At each CALL instruction, the IP and CS of the next instruction are pushed onto the stack, before the control is transferred to the procedure. At the end of the procedure, the RET instruction must be executed to retrieve the stored contents of IP & CS registers from a stack."
    },
    {
        "id": 57,
        "Question": "The instruction that unconditionally transfers the control of execution to the specified address is",
        "Options": [
            "a) CALL",
            "b) JMP",
            "c) RET",
            "d) IRET"
        ],
        "Answer": "Answer: b\nExplanation: In this the control transfers to the address specified in the instruction and flags are not affected by this instruction."
    },
    {
        "id": 58,
        "Question": "Which instruction cannot force the 8086 processor out of ‘halt’ state?",
        "Options": [
            "a) Interrupt request",
            "b) Reset",
            "c) Both interrupt request and reset",
            "d) Hold"
        ],
        "Answer": "Answer: d\nExplanation: Only an interrupt request or Reset will force the 8086 processor to come out of the ‘halt’ state."
    },
    {
        "id": 59,
        "Question": "NOP instruction introduces",
        "Options": [
            "a) Address",
            "b) Delay",
            "c) Memory location",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: NOP is the No operation. It means that the processor performs no operation for the clock cycle and thus there exists a delay."
    },
    {
        "id": 60,
        "Question": "Which of the following is not a machine controlled instruction?",
        "Options": [
            "a) HLT",
            "b) CLC",
            "c) LOCK",
            "d) ESC"
        ],
        "Answer": "Answer: b\nExplanation: Since CLC is a flag manipulation instruction where CLC stands for Clear Carry Flag."
    },
    {
        "id": 61,
        "Question": "The assembler directives which are the hints using some predefined alphabetical strings are given to",
        "Options": [
            "a) processor",
            "b) memory",
            "c) assembler",
            "d) processor & assembler"
        ],
        "Answer": "Answer: c\nExplanation: These directives help the assembler to correctly understand the assembly language programs to prepare the codes."
    },
    {
        "id": 62,
        "Question": "The directive used to inform the assembler, the names of the logical segments to be assumed for different segments used in the program is",
        "Options": [
            "a) ASSUME",
            "b) SEGMENT",
            "c) SHORT",
            "d) DB"
        ],
        "Answer": "Answer: a\nExplanation: In ALP, each segment is given a name by using the directive ASSUME\n             SYNTAX: ASSUME segment:segment_name\n                 Eg: ASSUME CS:Code\n                 here CS is the Code segment and code is the name assumed to the segment."
    },
    {
        "id": 63,
        "Question": "3. Match the following<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"text\"><pre class=\"de1\">   a) DB          1) used to direct the assembler to reserve only 10-bytes\n   b) DT          2) used to direct the assembler to reserve only 4 words\n   c) DW          3) used to direct the assembler to reserve byte or bytes\n   d) DQ          4) used to direct the assembler to reserve words</pre></div></div></div></div></div></div>",
        "Options": [
            "a) a-3, b-2, c-4, d-1",
            "b) a-2, b-3, c-1, d-4",
            "c) a-3, b-1, c-2, d-4",
            "d) a-3, b-1, c-4, d-2"
        ],
        "Answer": "Answer: d\nExplanation: These directives are used for allocating memory locations in the available memory."
    },
    {
        "id": 64,
        "Question": "The directive that marks the end of an assembly language program is",
        "Options": [
            "a) ENDS",
            "b) END",
            "c) ENDS & END",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The directive END is used to denote the completion of the program."
    },
    {
        "id": 65,
        "Question": "The directive that marks the end of a logical segment is",
        "Options": [
            "a) ENDS",
            "b) END",
            "c) ENDS & END",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The directive ENDS is used to end a segment where as the directive END is used to end the program."
    },
    {
        "id": 66,
        "Question": "The directive that updates the location counter to the next even address while executing a series of instructions is",
        "Options": [
            "a) EVN",
            "b) EVEN",
            "c) EVNE",
            "d) EQU"
        ],
        "Answer": "Answer: b\nExplanation: The directive updates location counter to next even address if the current location counter contents are not even."
    },
    {
        "id": 67,
        "Question": "The directive that directs the assembler to start the memory allotment for a particular segment/block/code from the declared address is",
        "Options": [
            "a) OFFSET",
            "b) LABEL",
            "c) ORG",
            "d) GROUP"
        ],
        "Answer": "Answer: c\nExplanation: If an ORG is written then the assembler initiates the location counter to keep the track of allotted address for the module as mentioned in the directive.\nIf the directive is not present, then the location counter is initialized to 0000H."
    },
    {
        "id": 68,
        "Question": "The directive that marks the starting of the logical segment is",
        "Options": [
            "a) SEG",
            "b) SEGMENT",
            "c) SEG & SEGMENT",
            "d) PROC"
        ],
        "Answer": "Answer: b\nExplanation: The directive SEGMENT indicates the beginning of the segment."
    },
    {
        "id": 69,
        "Question": "The recurrence of the numerical values or constants in a program code is reduced by",
        "Options": [
            "a) ASSUME",
            "b) LOCAL",
            "c) LABEL",
            "d) EQU"
        ],
        "Answer": "Answer: d\nExplanation: In this, the recurring/repeating value is assigned with a label. The label is placed instead of the numerical value in the entire program code."
    },
    {
        "id": 70,
        "Question": "The labels or constants that can be used by any module in the program is possible when they are declared as",
        "Options": [
            "a) PUBLIC",
            "b) LOCAL",
            "c) GLOBAL",
            "d) Either PUBLIC or GLOBAL"
        ],
        "Answer": "Answer: c\nExplanation: The labels, constants, variables, procedures declared as GLOBAL can be used by any module in the program."
    },
    {
        "id": 71,
        "Question": "The logic required for implementing a program can be expressed in terms of",
        "Options": [
            "a) flowchart",
            "b) algorithm",
            "c) flowchart & algorithm",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The logic required for implementing a program must be visualized clearly which is possible by flowchart and algorithm."
    },
    {
        "id": 72,
        "Question": "The operands, source and destination in an instruction cannot be",
        "Options": [
            "a) register, register",
            "b) memory location, memory location",
            "c) memory location, register",
            "d) immediate data, register"
        ],
        "Answer": "Answer: b\nExplanation: Only one memory operand can be specified in one instruction."
    },
    {
        "id": 73,
        "Question": "The instruction that is not possible among the following is",
        "Options": [
            "a) MOV AX, BX",
            "b) MOV AX, [BX].",
            "c) MOV 55H, BL",
            "d) MOV AL, 55H"
        ],
        "Answer": "Answer: c\nExplanation: 8-bit or 16-bit operand cannot be used as a destination operand."
    },
    {
        "id": 74,
        "Question": "The instruction that is not possible among the following is",
        "Options": [
            "a) MOV AX, [BX].",
            "b) MOV AX, 5555H",
            "c) MOV AX, [SI].",
            "d) MOV [SI], [DI]."
        ],
        "Answer": "Answer: d\nExplanation: Both the operands cannot be memory operands."
    },
    {
        "id": 75,
        "Question": "Both the operands source and destination of an instruction cannot be",
        "Options": [
            "a) register, register",
            "b) immediate data, register",
            "c) register, immediate data",
            "d) immediate data, memory location"
        ],
        "Answer": "Answer: c\nExplanation: Since destination operand should not be immediate data."
    },
    {
        "id": 76,
        "Question": "The registers that cannot be used as operands for arithmetic and logical instructions are",
        "Options": [
            "a) general purpose registers",
            "b) pointers",
            "c) index registers",
            "d) segment registers"
        ],
        "Answer": "Answer: d\nExplanation: Segment registers are not allowed as operands for arithmetic and logical instructions."
    },
    {
        "id": 77,
        "Question": "The operands of an instruction cannot be",
        "Options": [
            "a) registers",
            "b) memory operands and immediate operands",
            "c) immediate operands",
            "d) memory operands"
        ],
        "Answer": "Answer: b\nExplanation: Both the operands should not be immediate operands and memory operands."
    },
    {
        "id": 78,
        "Question": "The disadvantage of machine level programming is",
        "Options": [
            "a) time consuming",
            "b) chances of error are more",
            "c) debugging is difficult",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The machine level programming is complicated."
    },
    {
        "id": 79,
        "Question": "The coded object modules of the program to be assembled are present in",
        "Options": [
            "a) .ASM file",
            "b) .OBJ file",
            "c) .EXE file",
            "d) .OBJECT file"
        ],
        "Answer": "Answer: b\nExplanation: .OBJ file is created with same name as source file and extension .OBJ. It contains the coded object modules of the program to be assembled."
    },
    {
        "id": 80,
        "Question": "The advantages of assembly level programming are",
        "Options": [
            "a) flexibility of programming is more",
            "b) chances of error are less",
            "c) debugging is easy",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The assembly level programming is more advantageous than the machine level programming."
    },
    {
        "id": 81,
        "Question": "The extension that is essential for every assembly level program is",
        "Options": [
            "a) .ASP",
            "b) .ALP",
            "c) .ASM",
            "d) .PGM"
        ],
        "Answer": "Answer: c\nExplanation: All the files should have the extension, .ASM."
    },
    {
        "id": 82,
        "Question": "The directory that is under work must have the files that are related to",
        "Options": [
            "a) Norton’s editor",
            "b) Assembler",
            "c) Linker",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Before starting the process of entering a small program on PC, ensure that all the files namely Norton’s editor, assembler, linker and debugger are available in the same directory in which work is been done."
    },
    {
        "id": 83,
        "Question": "The listing file is identified by",
        "Options": [
            "a) source file name",
            "b) extension .LSF",
            "c) source file name and an extension .LSF",
            "d) source file name and an extension .LST"
        ],
        "Answer": "Answer: d\nExplanation: The listing file is automatically generated in the assembly process and is identified by the entered or source file name and an extension .LST."
    },
    {
        "id": 84,
        "Question": "The extension file that is must for a file to be accepted by the LINK as a valid object file is",
        "Options": [
            "a) .OBJ file",
            "b) .EXE file",
            "c) .MASM file",
            "d) DEBUG file"
        ],
        "Answer": "Answer: a\nExplanation: The .OBJ extension is a must for a file to be accepted by the LINK as a valid object file."
    },
    {
        "id": 85,
        "Question": "The listing file contains",
        "Options": [
            "a) total offset map of a source file",
            "b) offset address and labels",
            "c) memory allotments for different labels",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The listing file contains total offset map of source file including labels, offset addresses, opcodes, memory allotments for different directives and labels and relocation information."
    },
    {
        "id": 86,
        "Question": "DEBUG.COM facilitates the",
        "Options": [
            "a) debugging",
            "b) trouble shooting",
            "c) debugging and trouble shooting",
            "d) debugging and assembling"
        ],
        "Answer": "Answer: c\nExplanation: DEBUG.COM is a DOS utility that facilitates the debugging and trouble shooting."
    },
    {
        "id": 87,
        "Question": "DEBUG is able to troubleshoot only",
        "Options": [
            "a) .EXE files",
            "b) .OBJ files",
            "c) .EXE file and .OBJ file",
            "d) .EXE flie and .LST file"
        ],
        "Answer": "Answer: a\nExplanation: The DEBUG may be used either to debug a source program or to observe the results of execution of an .EXE file."
    },
    {
        "id": 88,
        "Question": "The Stack follows the sequence",
        "Options": [
            "a) first-in-first-out",
            "b) first-in-last-out",
            "c) last-in-first-out",
            "d) last-in-last-out"
        ],
        "Answer": "Answer: c\nExplanation: The stack follows last-in-first-out sequence."
    },
    {
        "id": 89,
        "Question": "If the processor is executing the main program that calls a subroutine, then after executing the main program up to the CALL instruction, the control will be transferred to",
        "Options": [
            "a) address of main program",
            "b) subroutine address",
            "c) address of CALL instruction",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Since subroutine is called, to start the execution of the subroutine, the control is transferred to the subroutine address."
    },
    {
        "id": 90,
        "Question": "The stack is useful for",
        "Options": [
            "a) storing the register status of the processor",
            "b) temporary storage of data",
            "c) storing contents of registers temporarily inside the CPU",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Stack is used for temporary storage of contents of registers and memory locations, status of registers."
    },
    {
        "id": 91,
        "Question": "The Stack is accessed using",
        "Options": [
            "a) SP register",
            "b) SS register",
            "c) SP and SS register",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The stack is accessed using a pointer that is implemented using SP and SS registers."
    },
    {
        "id": 92,
        "Question": "As the storing of data words onto the stack is increased, the stack pointer is",
        "Options": [
            "a) incremented by 1",
            "b) decremented by 1",
            "c) incremented by 2",
            "d) decremented by 2"
        ],
        "Answer": "Answer: d\nExplanation: The data is stored from top address of the stack and is decremented by 2."
    },
    {
        "id": 93,
        "Question": "While retrieving data from the stack, the stack pointer is",
        "Options": [
            "a) incremented by 1",
            "b) incremented by 2",
            "c) decremented by 1",
            "d) decremented by 2"
        ],
        "Answer": "Answer: b\nExplanation: The data in the stack, may again be transferred back from a stack to register. At that time, the stack pointer is incremented by 2."
    },
    {
        "id": 94,
        "Question": "The process of storing the data in the stack is called ……… the stack.",
        "Options": [
            "a) pulling into",
            "b) pulling out",
            "c) pushing into",
            "d) popping into"
        ],
        "Answer": "Answer: c\nExplanation: The data is pushed into the stack while loading the stack."
    },
    {
        "id": 95,
        "Question": "The reverse process of transferring the data back from the stack to the CPU register is known as",
        "Options": [
            "a) pulling out the stack",
            "b) pushing out the stack",
            "c) popping out the stack",
            "d) popping off the stack"
        ],
        "Answer": "Answer: d\nExplanation: The data retrieved from stack is called popping off."
    },
    {
        "id": 96,
        "Question": "The books arranged one on the other on a table is an example of",
        "Options": [
            "a) queue",
            "b) queue and first-in-first out",
            "c) stack",
            "d) stack and last-in-first-out"
        ],
        "Answer": "Answer: d\nExplanation: If the books are arranged one on the other, then the book that is placed last will be the first out."
    },
    {
        "id": 97,
        "Question": "The PID temperature controller using 8086 has",
        "Options": [
            "a) data flow",
            "b) data flow and uses queue",
            "c) sequential flow",
            "d) sequential flow and uses stack"
        ],
        "Answer": "Answer: d\nExplanation: Since PID temperature controller has steps that need to be sequentially executed such as sampling the output, conversion of a signal with ADC, finding errors, deriving control signals and applying the control signal to control flow of energy."
    },
    {
        "id": 98,
        "Question": "The stack pointer register contains",
        "Options": [
            "a) address of the stack segment",
            "b) pointer address of the stack segment",
            "c) offset of address of stack segment",
            "d) data present in the stack segment"
        ],
        "Answer": "Answer: c\nExplanation: The stack pointer register contains the offset of the address of the stack segment."
    },
    {
        "id": 99,
        "Question": "The stack segment register contains",
        "Options": [
            "a) address of the stack segment",
            "b) base address of the stack segment",
            "c) pointer address of the stack segment",
            "d) data in the stack segment"
        ],
        "Answer": "Answer: b\nExplanation: The stack segment register contains base address of the stack segment in the memory. The stack pointer register (sP) and stack segment register (SS) together address the stack-top."
    },
    {
        "id": 100,
        "Question": "PUSH operation",
        "Options": [
            "a) decrements SP",
            "b) increments SP",
            "c) decrements SS",
            "d) increments SS"
        ],
        "Answer": "Answer: a\nExplanation: Each PUSH operation decrements the SP ( Stack Pointer) register."
    },
    {
        "id": 101,
        "Question": "POP operation",
        "Options": [
            "a) decrements SP",
            "b) increments SP",
            "c) decrements SS",
            "d) increments SS"
        ],
        "Answer": "Answer: b\nExplanation: Each POP operation increments the SP ( Stack Pointer) register."
    },
    {
        "id": 102,
        "Question": "The register or memory location that is pushed into the stack at the end must be",
        "Options": [
            "a) popped off last",
            "b) pushed off first",
            "c) popped off first",
            "d) pushed off last"
        ],
        "Answer": "Answer: c\nExplanation: The data can be retrieved by POP operation and as in stack, the data that is pushed at the end must be popped off first."
    },
    {
        "id": 103,
        "Question": "When a stack segment is initialised then",
        "Options": [
            "a) SS and SP are initialised",
            "b) only SS is initialised",
            "c) only SP is initialised",
            "d) SS and SP need not be initialised"
        ],
        "Answer": "Answer: d\nExplanation: The directive ASSUME facilitates to name the segments with the desired name that is not a mnemonic or keyword."
    },
    {
        "id": 104,
        "Question": "The number of PUSH instructions and POP instructions in a subroutine must be",
        "Options": [
            "a) PUSH instructions must be greater than POP instructions",
            "b) POP instructions must be greater than PUSH instructions",
            "c) Both must be equal",
            "d) Instructions may be any kind"
        ],
        "Answer": "Answer: a\nExplanation: Though the Stack segment is initialised, the SS and SP pointers must be initialised."
    },
    {
        "id": 105,
        "Question": "8086 does not support",
        "Options": [
            "a) Arithmetic operations",
            "b) logical operations",
            "c) BCD operations",
            "d) Direct BCD packed multiplication"
        ],
        "Answer": "Answer: c\nExplanation: The number of PUSH instructions must be equal to the number of POP instructions."
    },
    {
        "id": 106,
        "Question": "For 8086 microprocessor, the stack segment may have a memory block of a maximum of",
        "Options": [
            "a) 32K bytes",
            "b) 64K bytes",
            "c) 16K bytes",
            "d) NONE"
        ],
        "Answer": "Answer: d\nExplanation: The 8086 microprocessor does not support direct BCD packed operations."
    },
    {
        "id": 107,
        "Question": "While CPU is executing a program, an interrupt exists then it",
        "Options": [
            "a) follows the next instruction in the program",
            "b) jumps to instruction in other registers",
            "c) breaks the normal sequence of execution of instructions",
            "d) stops executing the program"
        ],
        "Answer": "Answer: c\nExplanation: An interrupt function is to break the sequence of operation."
    },
    {
        "id": 108,
        "Question": "An interrupt breaks the execution of instructions and diverts its execution to",
        "Options": [
            "a) Interrupt service routine",
            "b) Counter word register",
            "c) Execution unit",
            "d) control unit"
        ],
        "Answer": "Answer: a\nExplanation: An interrupt transfers the control to interrupt service routine (ISR). After executing ISR, the control is transferred back again to the main program."
    },
    {
        "id": 109,
        "Question": "While executing the main program, if two or more interrupts occur, then the sequence of appearance of interrupts is called",
        "Options": [
            "a) multi-interrupt",
            "b) nested interrupt",
            "c) interrupt within interrupt",
            "d) nested interrupt and interrupt within interrupt"
        ],
        "Answer": "Answer: d\nExplanation: If an interrupt occurs while executing a program, and the processor is executing the interrupt, if one more interrupt occurs again, then it is called a nested interrupt."
    },
    {
        "id": 110,
        "Question": "Whenever a number of devices interrupt a CPU at a time, and if the processor is able to handle them properly, it is said to have",
        "Options": [
            "a) interrupt handling ability",
            "b) interrupt processing ability",
            "c) multiple interrupt processing ability",
            "d) multiple interrupt executing ability"
        ],
        "Answer": "Answer: c\nExplanation: The processor if handles more devices as interrupts then it has multiple interrupt processing ability."
    },
    {
        "id": 111,
        "Question": "NMI stands for",
        "Options": [
            "a) nonmaskable interrupt",
            "b) nonmultiple interrupt",
            "c) nonmovable interrupt",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: NMI is the acronym for nonmaskable interrupt."
    },
    {
        "id": 112,
        "Question": "If any interrupt request given to an input pin cannot be disabled by any means then the input pin is called",
        "Options": [
            "a) maskable interrupt",
            "b) nonmaskable interrupt",
            "c) maskable interrupt and nonmaskable interrupt",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: A nonmaskable interrupt input pin is one which means that any interrupt request at NMI (nonmaskable interrupt) input cannot be masked or disabled by any means."
    },
    {
        "id": 113,
        "Question": "The INTR interrupt may be",
        "Options": [
            "a) maskable",
            "b) nonmaskable",
            "c) maskable and nonmaskable",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: the INTR (interrupt request) is maskable or can be disabled."
    },
    {
        "id": 114,
        "Question": "The Programmable interrupt controller is required to",
        "Options": [
            "a) handle one interrupt request",
            "b) handle one or more interrupt requests at a time",
            "c) handle one or more interrupt requests with a delay",
            "d) handle no interrupt request"
        ],
        "Answer": "Answer: b\nExplanation: If more than one interrupt request (INTR) occurs at a time, then an external chip called programmable interrupt controller is required to handle them."
    },
    {
        "id": 115,
        "Question": "The INTR interrupt may be masked using the flag",
        "Options": [
            "a) direction flag",
            "b) overflow flag",
            "c) interrupt flag",
            "d) sign flag"
        ],
        "Answer": "Answer: c\nExplanation: If a microprocessor wants to serve any interrupt then interrupt flag, IF=1. If interrupt flag, IF=0, then the processor ignores the service."
    },
    {
        "id": 116,
        "Question": "If an interrupt is generated from outside the processor then it is an",
        "Options": [
            "a) internal interrupt",
            "b) external interrupt",
            "c) interrupt",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If an external device or a signal interrupts the processor from outside then it is an external interrupt."
    },
    {
        "id": 117,
        "Question": "If the interrupt is generated by the execution of an interrupt instruction then it is",
        "Options": [
            "a) internal interrupt",
            "b) external interrupt",
            "c) interrupt-in-interrupt",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The internal interrupt is generated internally by the processor circuit or by the execution of an interrupt instruction."
    },
    {
        "id": 118,
        "Question": "Example of an external interrupt is",
        "Options": [
            "a) divide by zero interrupt",
            "b) keyboard interrupt",
            "c) overflow interrupt",
            "d) type2 interrupt"
        ],
        "Answer": "Answer: b\nExplanation: Since the keyboard is external to the processor, it is an external interrupt."
    },
    {
        "id": 119,
        "Question": "Example of an internal interrupt is",
        "Options": [
            "a) divide by zero interrupt",
            "b) overflow interrupt",
            "c) interrupt due to INT",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Since the interrupts occur within the processor itself, they are called internal interrupts."
    },
    {
        "id": 120,
        "Question": "The interrupt request that is independent of IF flag is",
        "Options": [
            "a) NMI",
            "b) TRAP",
            "c) Divide by zero",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: These requests are independent of IF flag."
    },
    {
        "id": 121,
        "Question": "The type of the interrupt may be passed to the interrupt structure of CPU from",
        "Options": [
            "a) interrupt service routine",
            "b) stack",
            "c) interrupt controller",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: After an interrupt is acknowledged, the CPU computes the vector address from the type of the interrupt that may be passed to the internal structure of the CPU from an interrupt controller in case of external interrupts."
    },
    {
        "id": 122,
        "Question": "During the execution of an interrupt, the data pushed into the stack is the content of",
        "Options": [
            "a) IP",
            "b) CS",
            "c) PSW",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The contents of IP, CS and PSW are pushed into the stack during the execution."
    },
    {
        "id": 123,
        "Question": "After every response to the single step interrupt the flag that is cleared is",
        "Options": [
            "a) IF (Interrupt Flag)",
            "b) TF (Trap Flag)",
            "c) OF (Overflow Flag)",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If the trap flag is set then the processor enters the single step execution mode. After the execution, the trap flag is cleared."
    },
    {
        "id": 124,
        "Question": "At the end of ISR, the instruction should be",
        "Options": [
            "a) END",
            "b) ENDS",
            "c) IRET",
            "d) INTR"
        ],
        "Answer": "Answer: c\nExplanation: After the execution of the ISR, the control must go to the previous program (maybe main program) which was being executed. To execute it, IRET is placed at the end of ISR."
    },
    {
        "id": 125,
        "Question": "When the CPU executes IRET,",
        "Options": [
            "a) contents of IP and CS are retrieved",
            "b) the control transfers from ISR to main program",
            "c) clears the trap flag",
            "d) clears the interrupt flag"
        ],
        "Answer": "Answer: a\nExplanation: When the instruction IRET is executed, the contents of flags, IP and CS which were saved at the stack by the CALL instruction are retrieved to the respective registers."
    },
    {
        "id": 126,
        "Question": "The interrupt for which the processor has the highest priority among all the external interrupts is",
        "Options": [
            "a) keyboard interrupt",
            "b) TRAP",
            "c) NMI",
            "d) INT"
        ],
        "Answer": "Answer: c\nExplanation: The Non-Maskable Interrupt input pin has the highest priority among all the external interrupts."
    },
    {
        "id": 127,
        "Question": "The interrupt for which the processor has highest priority among all the internal interrupts is",
        "Options": [
            "a) keyboard interrupt",
            "b) TRAP",
            "c) NMI",
            "d) INT"
        ],
        "Answer": "Answer: b\nExplanation: TRAP is the internal interrupt that has highest priority among all the interrupts except the Divide By Zero (Type 0) exception."
    },
    {
        "id": 128,
        "Question": "In case of string instructions, the NMI interrupt will be served only after",
        "Options": [
            "a) initialisation of string",
            "b) execution of some part of the string",
            "c) complete string is manipulated",
            "d) the occurrence of the interrupt"
        ],
        "Answer": "Answer: c\nExplanation: When NMI is activated, the current instruction being executed is completed and then NMI is served. In the case of string instructions, it is served after the complete string is manipulated."
    },
    {
        "id": 129,
        "Question": "The NMI pin should remain high for atleast",
        "Options": [
            "a) 4 clock cycles",
            "b) 3 clock cycles",
            "c) 1 clock cycle",
            "d) 2 clock cycles"
        ],
        "Answer": "Answer: d\nExplanation: The NMI pin should remain high for atleast 2 clock cycles and need not be synchronized with the clock for being sensed."
    },
    {
        "id": 130,
        "Question": "The INTR signal can be masked by resetting the",
        "Options": [
            "a) TRAP flag",
            "b) INTERRUPT flag",
            "c) MASK flag",
            "d) DIRECTION flag"
        ],
        "Answer": "Answer: b\nExplanation: The INTR signal can be masked by resetting the interrupt flag."
    },
    {
        "id": 131,
        "Question": "For the INTR signal, to be responded to in the next instruction cycle, it must go ________ in the last clock cycle of the current instruction",
        "Options": [
            "a) high",
            "b) low",
            "c) high or low",
            "d) unchanged"
        ],
        "Answer": "Answer: a\nExplanation: The INTR signal must go high in the clock cycle of the current instruction in order to respond in the next instruction cycle."
    },
    {
        "id": 132,
        "Question": "The status of the pending interrupts is checked at",
        "Options": [
            "a) the end of main program",
            "b) the end of all the interrupts executed",
            "c) the beginning of every interrupt",
            "d) the end of each instruction cycle"
        ],
        "Answer": "Answer: d\nExplanation: At the end of each instruction, the status of the pending interrupts is checked."
    },
    {
        "id": 133,
        "Question": "Once the processor responds to an INTR signal, the IF is automatically",
        "Options": [
            "a) set",
            "b) reset",
            "c) high",
            "d) low"
        ],
        "Answer": "Answer: b\nExplanation: The IF is automatically reset when the processor responds to an INTR signal. If the processor wants to respond to any type of INTR signal further then, the IF should again be set."
    },
    {
        "id": 134,
        "Question": "If the pin LOCK (active low based) is low at the trailing edge of the first ALE pulse, then till the start of the next machine cycle, the pin LOCK (active low) is",
        "Options": [
            "a) low",
            "b) high",
            "c) low or high",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The pin LOCK (active low) remains low till the start of the next machine cycle."
    },
    {
        "id": 135,
        "Question": "With the trailing edge of the LOCK (active low), the INTA (active low) goes low and remains in it for",
        "Options": [
            "a) 0 clock cycle",
            "b) 1 clock cycle",
            "c) 2 clock cycles",
            "d) 3 clock cycles"
        ],
        "Answer": "Answer: c\nExplanation: The INTA (active low) goes low and remains low for two clock cycles before returning back to the high state."
    },
    {
        "id": 136,
        "Question": "The method of defining the interrupt service routine for software is",
        "Options": [
            "a) same as that of hardware",
            "b) difficult than hardware",
            "c) easier than software",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: For both software and hardware, the method of defining the interrupt service routine is the same."
    },
    {
        "id": 137,
        "Question": "While programming for any type of interrupt, the interrupt vector table is set",
        "Options": [
            "a) externally",
            "b) through a program",
            "c) either externally or through the program",
            "d) externally and through the program"
        ],
        "Answer": "Answer: c\nExplanation: The programmer must, either externally or through the program, set the interrupt vector table for that type preferably with the CS and IP addresses of the interrupt service routine."
    },
    {
        "id": 138,
        "Question": "To execute a program one should",
        "Options": [
            "a) assemble the program",
            "b) link the program",
            "c) apply external pulse",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To execute a program, first assemble it, link it and then execute it. After execution, a new file RESULT is created in the directory. Then external pulse is applied to IRQ2 pin, and this will again cause the execution of ISR into the file."
    },
    {
        "id": 139,
        "Question": "Procedures are also known as",
        "Options": [
            "a) macros",
            "b) segment",
            "c) subroutines",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: Procedures are also known as subroutines."
    },
    {
        "id": 140,
        "Question": "Procedures, for their execution, require",
        "Options": [
            "a) input data",
            "b) output data",
            "c) constants",
            "d) input data or constants"
        ],
        "Answer": "Answer: d\nExplanation: Procedures require input data or constants for their execution. Their data or constants may be passed to the subroutine by the main program."
    },
    {
        "id": 141,
        "Question": "The technique that is used to pass the data or parameter to procedures in assembly language program is by using",
        "Options": [
            "a) global declared variable",
            "b) registers",
            "c) stack",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The techniques that are used to pass the data or parameter to procedures are by using global declared variable, registers of CPU, memory locations, stack, PUBLIC & EXTRN."
    },
    {
        "id": 142,
        "Question": "If a procedure is interactive, then",
        "Options": [
            "a) it accepts inputs directly from input devices",
            "b) it uses global declared variable technique",
            "c) it uses stack",
            "d) it uses memory locations"
        ],
        "Answer": "Answer: a\nExplanation: If a procedure is interactive, then it accepts the inputs directly from input devices."
    },
    {
        "id": 143,
        "Question": "For passing the parameters to procedures using the PUBLIC & EXTRN directives, it must be declared PUBLIC in the",
        "Options": [
            "a) subroutine",
            "b) procedure",
            "c) main routine",
            "d) main routine and subroutine"
        ],
        "Answer": "Answer: c\nExplanation: For passing the parameters to procedures, it must be declared PUBLIC in the main routine and the same should be declared EXTRN in the procedure."
    },
    {
        "id": 144,
        "Question": "The technique to estimate the size of an executable program, before it is assembled and linked is",
        "Options": [
            "a) memory location technique",
            "b) global variable technique",
            "c) stack",
            "d) none"
        ],
        "Answer": "Answer: d\nExplanation: There is no technique to estimate the size of an executable program before it is assembled and linked."
    },
    {
        "id": 145,
        "Question": "To estimate the size of an executable program before it is assembled and linked, the programming methodology concerned is by writing",
        "Options": [
            "a) programs with more than one segment for data and code",
            "b) programs with FAR subroutines each of size up to 64KB",
            "c) programs with more than one segment for stack",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: By writing programs with more than one segment for data, code or stack or by writing programs with FAR subroutines each of size 64KB, the size of an executable program can be estimated."
    },
    {
        "id": 146,
        "Question": "If a number of instructions are repeating through the main program, then to reduce the length of the program, __________ is used.",
        "Options": [
            "a) procedure",
            "b) subroutine",
            "c) macro",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: For a certain number of instructions that are repeated in the main program, when macro is defined then the code of a program is reduced by placing the name of the macro at which the set of instructions are needed to be repeated."
    },
    {
        "id": 147,
        "Question": "The process of assigning a label or macroname to the string is called",
        "Options": [
            "a) initialising macro",
            "b) initialising string macro",
            "c) defining a string macro",
            "d) defining a macro"
        ],
        "Answer": "Answer: d\nExplanation: The process of assigning a label to the string is called defining a macro."
    },
    {
        "id": 148,
        "Question": "A macro within a macro is called",
        "Options": [
            "a) macro-within-macro",
            "b) nested macro",
            "c) macro-in-macro",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: A macro may be called from inside a macro. This type of macro is called nested macro."
    },
    {
        "id": 149,
        "Question": "A macro can be defined as",
        "Options": [
            "a) beginning of a program",
            "b) end of a program",
            "c) after initialisation of program",
            "d) anywhere in a program"
        ],
        "Answer": "Answer: d\nExplanation: A macro can be defined anywhere in a program."
    },
    {
        "id": 150,
        "Question": "A macro can be used as ________",
        "Options": [
            "a) in data segment",
            "b) to represent directives",
            "c) to represent statements",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A macro may be used in data segment and can also be used to represent statements and directives."
    },
    {
        "id": 151,
        "Question": "The end of a macro can be represented by the directive.",
        "Options": [
            "a) END",
            "b) ENDS",
            "c) ENDM",
            "d) ENDD"
        ],
        "Answer": "Answer: c\nExplanation: The ENDM directive marks the end of the instructions or statements sequence assigned with the macro name."
    },
    {
        "id": 152,
        "Question": "Inserting  the statements and instructions represented by macro, directly at the place of the macroname, in the program, is known as",
        "Options": [
            "a) calling a macro",
            "b) inserting a macro",
            "c) initializing a macro",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: Inserting the statements and instructions at the place of macroname, in the program, is known as calling a macro."
    },
    {
        "id": 153,
        "Question": "The time required for execution of a macro is ________ that of the procedure.",
        "Options": [
            "a) greater than",
            "b) less than",
            "c) equal to",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The time required for execution of a macro is less than that of procedure as it does not contain CALL and RET instructions as the procedures do."
    },
    {
        "id": 154,
        "Question": "Which of the following statements is incorrect?",
        "Options": [
            "a) complete code of instruction string is inserted at each place, wherever the macroname appears",
            "b) macro requires less time of execution than that of procedure",
            "c) macro uses stack memory",
            "d) macroname can be anything except registers and mnemonics"
        ],
        "Answer": "Answer: c\nExplanation: Macro does not require stack memory and hence has less time for execution."
    },
    {
        "id": 155,
        "Question": "The beginning of the macro can be represented as",
        "Options": [
            "a) START",
            "b) BEGIN",
            "c) MACRO",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The beginning of the macro is represented as macroname followed by the directive MACRO.\n             SYNTAX: macroname MACRO\n            EXAMPLE: STRINGS MACRO."
    },
    {
        "id": 156,
        "Question": "If ‘n’ denotes the number of clock cycles and ‘T’ denotes period of the clock at which the microprocessor is running, then the duration of execution of loop once can be denoted by",
        "Options": [
            "a) n+T",
            "b) n-T",
            "c) n*T",
            "d) n/T"
        ],
        "Answer": "Answer: c\nExplanation: The duration of execution of the loop is the product of number of clock cycles and the period of the clock cycle at which microprocessor is running."
    },
    {
        "id": 157,
        "Question": "The number of instructions actually executed by the microprocessor depends on the",
        "Options": [
            "a) stack",
            "b) loop count",
            "c) program counter",
            "d) time duration"
        ],
        "Answer": "Answer: b\nExplanation: As the microprocessor executes each instruction corresponding loop counter value decreases and the microprocessor executes the instructions till the loop counter becomes zero."
    },
    {
        "id": 158,
        "Question": "In case of subroutines, the actual number of instructions executed by the processor depends on",
        "Options": [
            "a) loop count",
            "b) length of interrupt service routine",
            "c) length of procedure",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: In case of subroutines or interrupt service routines, the number of instructions executed by the processor depends on the length of procedure (or subroutine) or length of interrupt service routine along with the main calling program."
    },
    {
        "id": 159,
        "Question": "The step included in generating delays is",
        "Options": [
            "a) determining exact required delay",
            "b) selecting instructions for delay loop",
            "c) finding period of clock frequency",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The delays can be generated step wise."
    },
    {
        "id": 160,
        "Question": "The Count, N can be defined as",
        "Options": [
            "a) required delay/duration for execution",
            "b) duration of execution/required delay",
            "c) required delay/number of clock cycles",
            "d) required delay/period of clock frequency"
        ],
        "Answer": "Answer: a\nExplanation: The count N can be defined as the required time delay by the duration for execution of the loop once.\n             Count, N = required delay (Td)/duration for execution of the loop once (n*T)."
    },
    {
        "id": 161,
        "Question": "if the zeroth condition is satisfied then, for execution, the JNZ instruction takes",
        "Options": [
            "a) 1 clock cycle",
            "b) 2 clock cycles",
            "c) 3 clock cycles",
            "d) 4 clock cycles"
        ],
        "Answer": "Answer: d\nExplanation: The JNZ instruction takes only 4 clock cycles if the zeroth condition is satisfied."
    },
    {
        "id": 162,
        "Question": "if the zeroth condition is not satisfied, then the JNZ instruction takes",
        "Options": [
            "a) 2 clock cycles",
            "b) 8 clock cycles",
            "c) 16 clock cycles",
            "d) 64 clock cycles"
        ],
        "Answer": "Answer: c\nExplanation: The JNZ instruction takes 16 clock cycles if the zeroth condition is not satisfied."
    },
    {
        "id": 163,
        "Question": "The maximum count value of 16-bit count register puts a limitation on",
        "Options": [
            "a) memory usage",
            "b) storage of address of registers",
            "c) to generate clock pulse",
            "d) to generate maximum delay"
        ],
        "Answer": "Answer: d\nExplanation: The maximum count value of 16-bit count register is FFFFH. This may put the limitation on the maximum delay that can be generated using the instructions."
    },
    {
        "id": 164,
        "Question": "When large delays are required, then to serve the purpose",
        "Options": [
            "a) one or more count registers can be used",
            "b) one or more shift registers can be used",
            "c) one or more pointer registers can be used",
            "d) one or more index registers can be used"
        ],
        "Answer": "Answer: a\nExplanation: One or more count registers can be used to serve large delays."
    },
    {
        "id": 165,
        "Question": "The semiconductor memories are organised as __________ dimension(s) of array of memory locations.",
        "Options": [
            "a) one dimensional",
            "b) two dimensional",
            "c) three dimensional",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The semiconductor memories are organised as two dimensions of an array which consists of rows and columns."
    },
    {
        "id": 166,
        "Question": "If a location is selected, then all the bits in it are accessible using a group of conductors called",
        "Options": [
            "a) control bus",
            "b) address bus",
            "c) data bus",
            "d) either address bus or data bus"
        ],
        "Answer": "Answer: c\nExplanation: The bits in a selected location are accessible using data bus."
    },
    {
        "id": 167,
        "Question": "To address a memory location out of N memory locations, the number of address lines required is",
        "Options": [
            "a) log N (to the base 2)",
            "b) log N (to the base 10)",
            "c) log N (to the base e)",
            "d) log (2N) (to the base e)"
        ],
        "Answer": "Answer: a\nExplanation: For n memory locations, log n(to the base of 2) address lines are required. For addressing 4K bytes of memory, 12 address lines are required since log(4KB) =log(4*1024)=log(212)=12."
    },
    {
        "id": 168,
        "Question": "If the microprocessor has 10 address lines, then the number of memory locations it is able to address is",
        "Options": [
            "a) 512",
            "b) 1024",
            "c) 2048",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: Since for n address lines, the number of memory locations able to address is 2^n."
    },
    {
        "id": 169,
        "Question": "In static memory, the upper 8-bit bank of an available 16-bit memory chip is called",
        "Options": [
            "a) upper address memory bank",
            "b) even address memory bank",
            "c) static upper memory",
            "d) odd address memory bank"
        ],
        "Answer": "Answer: d\nExplanation: In static memory, the upper 8-bit bank is called odd address memory bank."
    },
    {
        "id": 170,
        "Question": "In static memory, the lower 8-bit bank of an available 16-bit memory chip is called",
        "Options": [
            "a) lower address memory bank",
            "b) even address memory bank",
            "c) static lower memory bank",
            "d) odd address memory bank"
        ],
        "Answer": "Answer: b\nExplanation: In static memory, the lower 8-bit bank is called even address memory bank."
    },
    {
        "id": 171,
        "Question": "In most of the cases, the method used for decoding that may be used to minimise the required hardware is",
        "Options": [
            "a) absolute decoding",
            "b) non-linear decoding",
            "c) linear decoding",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: In general, linear decoding is used to minimise the required hardware."
    },
    {
        "id": 172,
        "Question": "To obtain 16-bit data bus width, the two 4K*8 chips of RAM and ROM are arranged in",
        "Options": [
            "a) parallel",
            "b) serial",
            "c) both serial and parallel",
            "d) neither serial nor parallel"
        ],
        "Answer": "Answer: a\nExplanation: The two 4K*8 chips of RAM and ROM are arranged in parallel."
    },
    {
        "id": 173,
        "Question": "If (address line) Ao=0 then, the status of address and memory are",
        "Options": [
            "a) address is even and memory is in ROM",
            "b) address is odd and memory is in ROM",
            "c) address is even and memory is in RAM",
            "d) address is odd and memory is in RAM"
        ],
        "Answer": "Answer: c\nExplanation: If Ao=0 then address is even and is in RAM. If Ao=1 then, address is odd and is in RAM."
    },
    {
        "id": 174,
        "Question": "If at a time Ao and BHE(active low) both are zero then, the chip(s) selected will be",
        "Options": [
            "a) RAM",
            "b) ROM",
            "c) RAM and ROM",
            "d) ONLY RAM"
        ],
        "Answer": "Answer: c\nExplanation: If at a time Ao and BHE(active low) both are zero, then both RAM and ROM are selected."
    },
    {
        "id": 175,
        "Question": "The advantage of dynamic RAM is",
        "Options": [
            "a) high packing density",
            "b) low cost",
            "c) less power consumption",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The dynamic RAM is advantageous than the static RAM as it has a higher packing density, lower cost and less power consumption."
    },
    {
        "id": 176,
        "Question": "Whenever a large memory  is required in a microcomputer system, the memory subsystem is generally designed using",
        "Options": [
            "a) Static RAM",
            "b) Dynamic RAM",
            "c) Both static and dynamic RAM",
            "d) ROM"
        ],
        "Answer": "Answer: b\nExplanation: Dynamic RAM is preferred for large memory."
    },
    {
        "id": 177,
        "Question": "If a typical static RAM cell requires 6 transistors then corresponding dynamic RAM requires",
        "Options": [
            "a) 1 transistor along with capacitance",
            "b) 2 transistors along with resistance",
            "c) 3 transistors along with diode",
            "d) 2 transistors along with capacitance"
        ],
        "Answer": "Answer: a\nExplanation: The hardware complexity of dynamic RAM is lesser than that of static RAM."
    },
    {
        "id": 178,
        "Question": "To store the charge as a representation of data, the basic dynamic RAM cell uses",
        "Options": [
            "a) resistor",
            "b) capacitor",
            "c) diode",
            "d) transistor"
        ],
        "Answer": "Answer: c\nExplanation: The basic dynamic RAM cell uses capacitance to store the charge as a representation of data. This capacitor is manufactured as a diode that is reverse biased so that the storage capacitance is obtained."
    },
    {
        "id": 179,
        "Question": "The process of refreshing the data in the RAM to reduce the possibility of data loss is known as",
        "Options": [
            "a) data cycle",
            "b) regain cycle",
            "c) retain cycle",
            "d) refresh cycle"
        ],
        "Answer": "Answer: d\nExplanation: The data storage in RAM which is capacitance (reverse-biased diode) may have a leakage current that tends to discharge the capacitor giving rise to possibility of data loss. To avoid this, the data must be refreshed after a fixed time interval regularly."
    },
    {
        "id": 180,
        "Question": "The field in which dynamic RAM is more complicated than static RAM is",
        "Options": [
            "a) complexity",
            "b) interfacing circuit",
            "c) execution unit",
            "d) cost"
        ],
        "Answer": "Answer: b\nExplanation: The refresh mechanism and the additional hardware required makes the interfacing circuit of dynamic RAM more complicated than that of static RAM."
    },
    {
        "id": 181,
        "Question": "Memory refresh activity is",
        "Options": [
            "a) initialised by processor",
            "b) initialised by external bus master",
            "c) initialised by refresh mechanism",
            "d) initialised either by processor or by external bus"
        ],
        "Answer": "Answer: c\nExplanation: The refresh operation is independent regular activity that is initialised and carried out by the refresh mechanism."
    },
    {
        "id": 182,
        "Question": "The number of memory chips that are enabled at a time for refresh activity is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) more than 1"
        ],
        "Answer": "Answer: d\nExplanation: More than one memory chip can be enabled at a time to refresh activity to reduce the number of total memory refresh cycles."
    },
    {
        "id": 183,
        "Question": "A timer that derives pulse for refreshing action or time for which a dynamic RAM cell can hold data charge level practically constant is",
        "Options": [
            "a) constant timer",
            "b) data managing timer",
            "c) refresh timer",
            "d) qualitative timer"
        ],
        "Answer": "Answer: c\nExplanation: Refresh timer derives a pulse for refreshing action after each refresh interval which can be qualitatively defined as the time for which a dynamic RAM cell can hold data charge level practically constant."
    },
    {
        "id": 184,
        "Question": "If ‘n’ denotes the number of rows that are to be refreshed in a single refresh interval, ‘td’ denotes the range of time it may take then, refresh time (tr) can be defined as",
        "Options": [
            "a) n*td",
            "b) td/n",
            "c) n/td",
            "d) tdn"
        ],
        "Answer": "Answer: b\nExplanation: Refresh time is the ratio of time duration taken for refreshing to the number of rows that are refreshed. Refresh frequency is the reciprocal of refresh time."
    },
    {
        "id": 185,
        "Question": "The device that enables the microprocessor to read data from the external devices is",
        "Options": [
            "a) printer",
            "b) joystick",
            "c) display",
            "d) reader"
        ],
        "Answer": "Answer: b\nExplanation: Since joystick is an input device, it reads data from the external devices."
    },
    {
        "id": 186,
        "Question": "The example of output device is",
        "Options": [
            "a) CRT display",
            "b) 7-segment display",
            "c) Printer",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The output device transfers data from the microprocessor to the external devices."
    },
    {
        "id": 187,
        "Question": "The input and output operations are respectively similar to the operations,",
        "Options": [
            "a) read, read",
            "b) write, write",
            "c) read, write",
            "d) write, read"
        ],
        "Answer": "Answer: c\nExplanation: The input activity is similar to read operation and the output activity is similar to write operation."
    },
    {
        "id": 188,
        "Question": "The operation, IOWR (active low) performs",
        "Options": [
            "a) write operation on input data",
            "b) write operation on output data",
            "c) read operation on input data",
            "d) read operation on output data"
        ],
        "Answer": "Answer: b\nExplanation: IOWR (active low) operation means writing data to an output device and not an input device."
    },
    {
        "id": 189,
        "Question": "The latch or IC 74LS373 acts as",
        "Options": [
            "a) good input port",
            "b) bad input port",
            "c) good output port",
            "d) bad output port"
        ],
        "Answer": "Answer: c\nExplanation: If the output port is to source large currents, the port lines must be buffered. So, the latch is used as it acts as a good output port."
    },
    {
        "id": 190,
        "Question": "While performing read operation, one must take care that much current should not be",
        "Options": [
            "a) sourced from data lines",
            "b) sinked from data lines",
            "c) sourced or sinked from data lines",
            "d) sinked from address lines"
        ],
        "Answer": "Answer: c\nExplanation: More current should not be sourced or sinked from data lines while reading to avoid loading."
    },
    {
        "id": 191,
        "Question": "To avoid loading during read operation, the device used is",
        "Options": [
            "a) latch",
            "b) flipflop",
            "c) buffer",
            "d) tristate buffer"
        ],
        "Answer": "Answer: d\nExplanation: A tristate buffer is used as an input device to overcome loading."
    },
    {
        "id": 192,
        "Question": "The chip 74LS245 is",
        "Options": [
            "a) bidirectional buffer",
            "b) 8-bit input port",
            "c) one that has 8 buffers",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The chip 74LS245 is a bidirectional buffer that contains 8 buffers and may be used as an 8-bit input port. But while using as an input device, only one direction is useful."
    },
    {
        "id": 193,
        "Question": "In 74LS245, if DIR is 1, then the direction is from",
        "Options": [
            "a) inputs to outputs",
            "b) outputs to inputs",
            "c) source to sink",
            "d) sink to source"
        ],
        "Answer": "Answer: a\nExplanation: If DIR is 1, then the direction is from A(inputs) to B(outputs)."
    },
    {
        "id": 194,
        "Question": "In memory-mapped scheme, the devices are viewed as",
        "Options": [
            "a) distinct I/O devices",
            "b) memory locations",
            "c) only input devices",
            "d) only output devices"
        ],
        "Answer": "Answer: b\nExplanation: In memory-mapped scheme, the devices are viewed as memory locations and are addressed likewise."
    },
    {
        "id": 195,
        "Question": "Programmable peripheral input-output port is another name for",
        "Options": [
            "a) serial input-output port",
            "b) parallel input-output port",
            "c) serial input port",
            "d) parallel output port"
        ],
        "Answer": "Answer: b\nExplanation: The parallel input-output port chip 8255 is also known as programmable peripheral input-output port."
    },
    {
        "id": 196,
        "Question": "Port C of 8255 can function independently as",
        "Options": [
            "a) input port",
            "b) output port",
            "c) either input or output ports",
            "d) both input and output ports"
        ],
        "Answer": "Answer: c\nExplanation: Port C can function independently either as input or as output ports."
    },
    {
        "id": 197,
        "Question": "All the functions of the ports of 8255 are achieved by programming the bits of an internal register called",
        "Options": [
            "a) data bus control",
            "b) read logic control",
            "c) control word register",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: By programming the bits of control word register, the operations of the ports are specified."
    },
    {
        "id": 198,
        "Question": "The data bus buffer is controlled by",
        "Options": [
            "a) control word register",
            "b) read/write control logic",
            "c) data bus",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The data bus buffer is controlled by read/write control logic."
    },
    {
        "id": 199,
        "Question": "The input provided by the microprocessor to the read/write control logic is",
        "Options": [
            "a) RESET",
            "b) A1",
            "c) WR(ACTIVE LOW)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: RD(ACTIVE LOW), WR(ACTIVE LOW), A1, A0, RESET are the inputs provided by the microprocessor to the read/write control logic of 8255."
    },
    {
        "id": 200,
        "Question": "The device that receives or transmits data upon the execution of input or output instructions by the microprocessor is",
        "Options": [
            "a) control word register",
            "b) read/write control logic",
            "c) 3-state bidirectional buffer",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: 3-state bidirectional buffer is used to receives or transmits data upon the execution of input or output instructions by the microprocessor."
    },
    {
        "id": 201,
        "Question": "The port that is used for the generation of handshake lines in mode 1 or mode 2 is",
        "Options": [
            "a) port A",
            "b) port B",
            "c) port C Lower",
            "d) port C Upper"
        ],
        "Answer": "Answer: d\nExplanation: Port C upper is used for the generation of handshake lines in mode 1 or mode 2."
    },
    {
        "id": 202,
        "Question": "If A1=0, A0=1 then the input read cycle is performed from",
        "Options": [
            "a) port A to data bus",
            "b) port B to data bus",
            "c) port C to data bus",
            "d) CWR to data bus"
        ],
        "Answer": "Answer: b\nExplanation: If A1=0, A0=1 then the input read cycle is performed from port B to data bus."
    },
    {
        "id": 203,
        "Question": "The function, ‘data bus tristated’ is performed when",
        "Options": [
            "a) CS(active low) = 1",
            "b) CS(active low) = 0",
            "c) CS(active low) = 0, RD(active low) = 1, WR(active low) = 1",
            "d) CS(active low) = 1 OR CS(active low) = 0, RD(active low) = 1, WR(active low) = 1"
        ],
        "Answer": "Answer: d\nExplanation: The data bus is tristated when chip select pin=1 or chip select pin=0 and read and write signals are high i.e 1."
    },
    {
        "id": 204,
        "Question": "The pin that clears the control word register of 8255 when enabled is",
        "Options": [
            "a) CLEAR",
            "b) SET",
            "c) RESET",
            "d) CLK"
        ],
        "Answer": "Answer: c\nExplanation: If reset pin is enabled then the control word register is cleared."
    },
    {
        "id": 205,
        "Question": "In the I/O mode, the 8255 ports work as",
        "Options": [
            "a) reset pins",
            "b) set pins",
            "c) programmable I/O ports",
            "d) only output ports"
        ],
        "Answer": "Answer: c\nExplanation: In the I/O mode, the 8255 ports work as programmable I/O ports."
    },
    {
        "id": 206,
        "Question": "In BSR mode, only port C can be used to",
        "Options": [
            "a) set individual ports",
            "b) reset individual ports",
            "c) set and reset individual ports",
            "d) programmable I/O ports"
        ],
        "Answer": "Answer: c\nExplanation: In BSR (Bit Set-Reset) Mode, port C can be used to set and reset its individual port bits."
    },
    {
        "id": 207,
        "Question": "The feature of mode 0 is",
        "Options": [
            "a) any port can be used as input or output",
            "b) output ports are latched",
            "c) maximum of 4 ports are available",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In mode 0, any port can be used as input or output and output ports are latched."
    },
    {
        "id": 208,
        "Question": "The strobed input/output mode is another name of",
        "Options": [
            "a) mode 0",
            "b) mode 1",
            "c) mode 2",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: In this mode, the handshaking signals control the input or output action of the specified port."
    },
    {
        "id": 209,
        "Question": "If the value of the pin STB (Strobe Input) falls to low level, then",
        "Options": [
            "a) input port is loaded into input latches",
            "b) input port is loaded into output latches",
            "c) output port is loaded into input latches",
            "d) output port is loaded into output latches"
        ],
        "Answer": "Answer: a\nExplanation: If the value of the pin STB (Strobe Input) falls to low level, the input port is loaded into input latches."
    },
    {
        "id": 210,
        "Question": "The signal, SLCT in the direction of signal flow, OUT, indicates the selection of",
        "Options": [
            "a) Control word register",
            "b) CPU",
            "c) Printer",
            "d) Ports"
        ],
        "Answer": "Answer: c\nExplanation: This signal indicates that the printer is selected."
    },
    {
        "id": 211,
        "Question": "The pulse width of the signal INIT at the receiving terminal must be more than",
        "Options": [
            "a) 10 microseconds",
            "b) 20 microseconds",
            "c) 40 microseconds",
            "d) 50 microseconds"
        ],
        "Answer": "Answer: d\nExplanation: The pulse width of the signal must be more than 50microseconds at the receiving terminal."
    },
    {
        "id": 212,
        "Question": "The level of the signal ERROR(active low) becomes ‘low’ when the printer is in",
        "Options": [
            "a) Paper end state",
            "b) Offline state",
            "c) Error state",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The level of the signal ERROR(active low) becomes ‘low’ when the printer is in the Paper end state, Offline state and Error state."
    },
    {
        "id": 213,
        "Question": "The signals that are provided to maintain proper data flow and synchronization between the data transmitter and receiver are",
        "Options": [
            "a) handshaking signals",
            "b) control signals",
            "c) input signals",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: Handshaking signals maintain proper data flow and synchronization."
    },
    {
        "id": 214,
        "Question": "The feature of mode 2 of 8255 is",
        "Options": [
            "a) single 8-bit port is available",
            "b) both inputs and outputs are latched",
            "c) port C is used for generating handshake signals",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In mode 2 of 8255, a single 8-bit port is available i.e group A."
    },
    {
        "id": 215,
        "Question": "The time taken by the ADC from the active edge of SOC(start of conversion) pulse till the active edge of EOC(end of conversion) signal is called",
        "Options": [
            "a) edge time",
            "b) conversion time",
            "c) conversion delay",
            "d) time delay"
        ],
        "Answer": "Answer: c\nExplanation: Broadly speaking, the time taken by the converter to calculate the equivalent digital data output from the moment of the start of conversion is called conversion delay."
    },
    {
        "id": 216,
        "Question": "The popular technique that is used in the integration of ADC chips is",
        "Options": [
            "a) successive approximation",
            "b) dual slope integration",
            "c) successive approximation and dual slope integration",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: Successive approximation and dual slope integration are the most popular techniques that are used in the integrated ADC chips."
    },
    {
        "id": 217,
        "Question": "The procedure of algorithm for interfacing ADC contain",
        "Options": [
            "a) ensuring stability of analog input",
            "b) issuing start of conversion pulse to ADC",
            "c) reading digital data output of ADC as equivalent digital output",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The general algorithm for interfacing ADC contains ensuring the stability of analog input, issuing start of conversion pulse to ADC, reading end of conversion signal to mark the end of a conversion process, reading digital data output of ADC as equivalent digital output."
    },
    {
        "id": 218,
        "Question": "Which is the ADC among the following?",
        "Options": [
            "a) AD 7523",
            "b) 74373",
            "c) 74245",
            "d) ICL7109"
        ],
        "Answer": "Answer: d\nExplanation: AD 7523 is a DAC(Digital to analog converter), 74373 is a latch, 74245 is transceiver and ICL7109 is an ADC."
    },
    {
        "id": 219,
        "Question": "The conversion delay in a successive approximation of an ADC 0808/0809 is",
        "Options": [
            "a) 100 milliseconds",
            "b) 100 microseconds",
            "c) 50 milliseconds",
            "d) 50 milliseconds"
        ],
        "Answer": "Answer: b\nExplanation: The conversion delay is 100microseconds which is low as compared to other converters."
    },
    {
        "id": 220,
        "Question": "The number of inputs that can be connected at a time to an ADC that is integrated with successive approximation is",
        "Options": [
            "a) 4",
            "b) 2",
            "c) 8",
            "d) 16"
        ],
        "Answer": "Answer: c\nExplanation: As these converters internally have 3:8 analog multiplexer, at a time 8 different analog inputs can be connected to the chip."
    },
    {
        "id": 221,
        "Question": "ADC 7109 integrated by Dual slope integration technique is used for",
        "Options": [
            "a) low cost option",
            "b) slow practical applications",
            "c) low complexity",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Compared to other 12-bit ADCs, it is of very low cost and useful for slow practical applications."
    },
    {
        "id": 222,
        "Question": "Which of the following is not one of the phases of the total conversion cycle?",
        "Options": [
            "a) autozero phase",
            "b) conversion phase",
            "c) signal integrate phase",
            "d) disintegrate phase"
        ],
        "Answer": "Answer: b\nExplanation: Autozero phase, signal integrate phase and disintegrate phase are the three phases of total conversion cycle."
    },
    {
        "id": 223,
        "Question": "Which of the following phase contain feedback loop in it?",
        "Options": [
            "a) autozero phase",
            "b) signal integrate phase",
            "c) disintegrate phase",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: A feedback loop is closed around the system to charge the autozero capacitor to compensate for the offset voltages in the buffer amplifier, integrator and comparator."
    },
    {
        "id": 224,
        "Question": "In the signal integrate phase, the differential input voltage between IN LO(input low) and IN HI(input high) pins is integrated by the internal integrator for a fixed period of",
        "Options": [
            "a) 256 clock cycles",
            "b) 1024 clock cycles",
            "c) 2048 clock cycles",
            "d) 4096 clock cycles"
        ],
        "Answer": "Answer: c\nExplanation: The internal integrator needs 2048 clock cycles to integrate voltage difference between input low and input high."
    },
    {
        "id": 225,
        "Question": "DAC (Digital to Analog Converter) finds application in",
        "Options": [
            "a) digitally controlled gains",
            "b) motor speed controls",
            "c) programmable gain amplifiers",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: DAC is used in digitally controlled gains, motor speed controls and programmable gain amplifiers."
    },
    {
        "id": 226,
        "Question": "To save the DAC from negative transients the device connected between OUT1 and OUT2 of AD 7523 is",
        "Options": [
            "a) p-n junction diode",
            "b) Zener",
            "c) FET",
            "d) BJT (Bipolar Junction transistor)"
        ],
        "Answer": "Answer: b\nExplanation: Zener is connected between OUT1 and OUT2 pins of AD7523 to save from negative transients."
    },
    {
        "id": 227,
        "Question": "An operational amplifier connected to the output of AD 7523 is used",
        "Options": [
            "a) to convert current output to output voltage",
            "b) to provide additional driving capability",
            "c) as current-to-voltage converter",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: An operational amplifier is used as a current-to-voltage converter to convert the current output to output voltage and also provides additional driving capability to the DAC."
    },
    {
        "id": 228,
        "Question": "The DAC 0800 has a settling time of",
        "Options": [
            "a) 100 milliseconds",
            "b) 100 microseconds",
            "c) 50 milliseconds",
            "d) 50 microseconds"
        ],
        "Answer": "Answer: a\nExplanation: DAC 0800 has a settling time of 100 milliseconds."
    },
    {
        "id": 229,
        "Question": "The device that is used to obtain an accurate position control of rotating shafts in terms of steps is",
        "Options": [
            "a) DC motor",
            "b) AC motor",
            "c) Stepper motor",
            "d) Servo motor"
        ],
        "Answer": "Answer: c\nExplanation: Stepper motor employs rotation of its shaft in terms of steps, rather than continuous rotation as in case of AC or DC motors."
    },
    {
        "id": 230,
        "Question": "The internal schematic of a typical stepper motor has",
        "Options": [
            "a) 1 winding",
            "b) 2 windings",
            "c) 3 windings",
            "d) 4 windings"
        ],
        "Answer": "Answer: d\nExplanation: The internal schematic of a typical stepper motor has 4 windings."
    },
    {
        "id": 231,
        "Question": "The number of pulses required for one complete rotation of the shaft of the stepper motor is equal to the",
        "Options": [
            "a) number of internal teeth on a rotor",
            "b) number of internal teeth on a stator",
            "c) number of internal teeth on a rotor and stator",
            "d) number of external teeth on a stator"
        ],
        "Answer": "Answer: a\nExplanation: The number of pulses required for one complete rotation of the shaft of the stepper motor is equal to the number of internal teeth on its rotor."
    },
    {
        "id": 232,
        "Question": "A simple scheme for rotating the shaft of a stepper motor is called",
        "Options": [
            "a) rotating scheme",
            "b) shaft scheme",
            "c) wave scheme",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: In this scheme, the windings are applied with the required voltage pulses, in a cyclic fashion."
    },
    {
        "id": 233,
        "Question": "The firing angles of thyristors are controlled by",
        "Options": [
            "a) pulse generating circuits",
            "b) relaxation oscillators",
            "c) microprocessor",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In early days, the firing angles were controlled by a pulse generating circuits like relaxation oscillators and now, they are accurately fired using a microprocessor."
    },
    {
        "id": 234,
        "Question": "The Isolation transformers are generally used for",
        "Options": [
            "a) protecting low power circuit",
            "b) isolation",
            "c) protecting low power circuit and isolation",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: Any switching component of a high power circuit may be sufficient to damage the microprocessor system. So, to protect the low power circuit isolation transformers are used. They are also used if isolation is necessary."
    },
    {
        "id": 235,
        "Question": "The number of counters that are present in the programmable timer device 8254 is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: There are three counters that can be used as either counters or delay generators."
    },
    {
        "id": 236,
        "Question": "The operation that can be performed on control word register is",
        "Options": [
            "a) read operation",
            "b) write operation",
            "c) read and write operations",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The control word register can only be written and cannot be read."
    },
    {
        "id": 237,
        "Question": "The mode that is used to interrupt the processor by setting a suitable terminal count is",
        "Options": [
            "a) mode 0",
            "b) mode 1",
            "c) mode 2",
            "d) mode 3"
        ],
        "Answer": "Answer: a\nExplanation: Mode 0 is also called as an interrupt on the terminal count."
    },
    {
        "id": 238,
        "Question": "In mode 2, if N is loaded as the count value, then after (N-1) cycles, the output becomes low for",
        "Options": [
            "a) 1 clockcycle",
            "b) 2 clockcycles",
            "c) 3 clockcycles",
            "d) 4 clockcycles"
        ],
        "Answer": "Answer: a\nExplanation: After (N-1) cycles, the output becomes low for only 1 clockcycle. If the count N is reloaded and again the output becomes high and remains so for (N-1) clock pulses."
    },
    {
        "id": 239,
        "Question": "The generation of a square wave is possible in the mode",
        "Options": [
            "a) mode 1",
            "b) mode 2",
            "c) mode 3",
            "d) mode 4"
        ],
        "Answer": "Answer: c\nExplanation: When the count N loaded is even, then for half of the count, the output remains high and for the remaining half it remains low. If the count loaded is odd, the first clock pulse decrements it by 1 resulting in an even count value."
    },
    {
        "id": 240,
        "Question": "In control word register, if SC1=0 and SC0=1, then the counter selected is",
        "Options": [
            "a) counter 0",
            "b) counter 1",
            "c) counter 2",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: SC denotes select counter."
    },
    {
        "id": 241,
        "Question": "In control word format, if RL1=1, RL0=1 then the operation performed is",
        "Options": [
            "a) read/load least significant byte only",
            "b) read/load most significant byte only",
            "c) read/load LSB first and then MSB",
            "d) read/load MSB first and then LSB"
        ],
        "Answer": "Answer: c\nExplanation: To access 16 bit, first LSB is loaded first, and then MSB."
    },
    {
        "id": 242,
        "Question": "If BCD=0, then the operation is",
        "Options": [
            "a) decimal count",
            "b) hexadecimal count",
            "c) binary count",
            "d) octal count"
        ],
        "Answer": "Answer: b\nExplanation: If BCD=0 then hexadecimal count. If BCD=1, then the operation is BCD count."
    },
    {
        "id": 243,
        "Question": "The counter starts counting only if",
        "Options": [
            "a) GATE signal is low",
            "b) GATE signal is high",
            "c) CLK signal is low",
            "d) CLK signal is high"
        ],
        "Answer": "Answer: b\nExplanation: If the GATE signal is enabled, then the counter starts counting."
    },
    {
        "id": 244,
        "Question": "The control word register contents are used for",
        "Options": [
            "a) initializing the operating modes",
            "b) selection of counters",
            "c) choosing binary/BCD counters",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The control word register contents are used for\ni) initializing the operating modes (mode 0-mode 4)\nii) selection of counters (counter0-counter2)\niii) choosing binary or BCD counters\niv) loading of the counter registers."
    },
    {
        "id": 245,
        "Question": "The number of hardware interrupts that the processor 8085 consists of is",
        "Options": [
            "a) 1",
            "b) 3",
            "c) 5",
            "d) 7"
        ],
        "Answer": "Answer: c\nExplanation: The processor 8085 has five hardware interrupt pins. Out of these five, four pins were alloted fixed vector addresses but the pin INTR was not alloted by vector address, rather an external device was supposed to hand over the type of the interrupt to the microprocessor."
    },
    {
        "id": 246,
        "Question": "The register that stores all the interrupt requests in it in order to serve them one by one on a priority basis is",
        "Options": [
            "a) Interrupt Request Register",
            "b) In-Service Register",
            "c) Priority resolver",
            "d) Interrupt Mask Register"
        ],
        "Answer": "Answer: a\nExplanation: The interrupts at IRQ input lines are handled by Interrupt Request Register internally."
    },
    {
        "id": 247,
        "Question": "The register that stores the bits required to mask the interrupt inputs is",
        "Options": [
            "a) In-service register",
            "b) Priority resolver",
            "c) Interrupt Mask register",
            "d) None"
        ],
        "Answer": "Answer: c\nExplanation: Also, Interrupt Mask Register operates on IRR(Interrupt Request Register) at the direction of the Priority Resolver."
    },
    {
        "id": 248,
        "Question": "The interrupt control logic",
        "Options": [
            "a) manages interrupts",
            "b) manages interrupt acknowledge signals",
            "c) accepts interrupt acknowledge signal",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The interrupt control logic performs all the operations that are involved within the interrupts like accepting and managing interrupt acknowledge signals, interrupts."
    },
    {
        "id": 249,
        "Question": "In a cascaded mode, the number of vectored interrupts provided by 8259A is",
        "Options": [
            "a) 4",
            "b) 8",
            "c) 16",
            "d) 64"
        ],
        "Answer": "Answer: d\nExplanation: A single 8259A provides 8 vectored interrupts. In cascade mode, 64 vectored interrupts can be provided."
    },
    {
        "id": 250,
        "Question": "When the PS(active low)/EN(active low) pin of 8259A used in buffered mode, then it can be used as a",
        "Options": [
            "a) input to designate chip is master or slave",
            "b) buffer enable",
            "c) buffer disable",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: When the pin is used in buffered mode, then it can be used as a buffer enable to control buffer transreceivers. If it is not used in buffered mode, then the pin is used as input to designate whether the chip is used as a master or a slave."
    },
    {
        "id": 251,
        "Question": "Once the ICW1 is loaded, then the initialization procedure involves",
        "Options": [
            "a) edge sense circuit is reset",
            "b) IMR is cleared",
            "c) slave mode address is set to 7",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The initialization procedure involves\ni) edge sense circuit is reset.\nii) IMR is cleared.\niii) IR7 input is assigned the lowest priority.\niv) slave mode address is set to 7\nv) special mask mode is cleared and the status read is set to IRR."
    },
    {
        "id": 252,
        "Question": "When non-specific EOI command is issued to 8259A it will automatically",
        "Options": [
            "a) set the ISR",
            "b) reset the ISR",
            "c) set the INTR",
            "d) reset the INTR"
        ],
        "Answer": "Answer: b\nExplanation: When non-specific EOI command is issued to 8259A it will automatically reset the highest ISR."
    },
    {
        "id": 253,
        "Question": "In the application where all the interrupting devices are of equal priority, the mode used is",
        "Options": [
            "a) Automatic rotation",
            "b) Automatic EOI mode",
            "c) Specific rotation",
            "d) EOI"
        ],
        "Answer": "Answer: a\nExplanation: The automatic rotation is used in the applications where all the interrupting devices are of equal priority."
    },
    {
        "id": 254,
        "Question": "The registers that store the keyboard and display modes and operations programmed by CPU are",
        "Options": [
            "a) I/O control and data buffers",
            "b) Control and timing registers",
            "c) Return buffers",
            "d) Display address registers"
        ],
        "Answer": "Answer: b\nExplanation: The control and timing register to store the keyboard and display modes and other operations programmed by CPU."
    },
    {
        "id": 255,
        "Question": "The sensor RAM acts as 8-byte first-in-first-out RAM in",
        "Options": [
            "a) keyboard mode",
            "b) strobed input mode",
            "c) keyboard and strobed input mode",
            "d) scanned sensor matrix mode"
        ],
        "Answer": "Answer: c\nExplanation: In this mode, each key code of the pressed key is entered in the order of the entry, and in the meantime, read by the CPU, till the RAM becomes empty."
    },
    {
        "id": 256,
        "Question": "The registers that hold the address of the word currently being written by the CPU from the display RAM are",
        "Options": [
            "a) control and timing register",
            "b) control and timing register and timing control",
            "c) display RAM",
            "d) display address registers"
        ],
        "Answer": "Answer: d\nExplanation: The display address registers holds the address of the word currently being written or read by the CPU to or from the display RAM."
    },
    {
        "id": 257,
        "Question": "When a key is pressed, a debounce logic comes into operation in",
        "Options": [
            "a) scanned keyboard special error mode",
            "b) scanned keyboard with N-key rollover",
            "c) scanned keyboard mode with 2 key lockout",
            "d) sensor matrix mode"
        ],
        "Answer": "Answer: c\nExplanation: In scanned keyboard mode with 2 key lockout mode of operation, when a key is pressed, a debounce logic comes into operation. During the next two scans, other keys are checked for closure and if no other key is pressed then the first pressed key is identified."
    },
    {
        "id": 258,
        "Question": "The mode that is programmed using “end interrupt/error mode set command” is",
        "Options": [
            "a) scanned keyboard special error mode",
            "b) scanned keyboard with N-key rollover",
            "c) scanned keyboard mode with 2 key lockout",
            "d) sensor matrix mode"
        ],
        "Answer": "Answer: a\nExplanation: The scanned keyboard special error mode is programmed using end interrupt/error mode set command. This mode is valid only under the N-key rollover mode."
    },
    {
        "id": 259,
        "Question": "When a key is pressed, the debounce circuit waits for 2 keyboard scans and then checks whether the key is still depressed in",
        "Options": [
            "a) scanned keyboard special error mode",
            "b) scanned keyboard with N-key rollover",
            "c) scanned keyboard mode with 2 key lockout",
            "d) sensor matrix mode"
        ],
        "Answer": "Answer: b\nExplanation: In this mode, When a key is pressed, the debounce circuit waits for 2 keyboard scans and then checks whether the key is still depressed. If it is still depressed, the code is entered in FIFO RAM."
    },
    {
        "id": 260,
        "Question": "The data that is entered from the left side of the display unit is of",
        "Options": [
            "a) left entry mode",
            "b) right entry mode",
            "c) left and right entry modes",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The data that is entered from the left side of the display unit is of left entry mode, as in a type-writer the first character typed appears at the left-most position, while the subsequent characters appear successively to the right of the first one."
    },
    {
        "id": 261,
        "Question": "The FIFO status word is used to indicate the error in",
        "Options": [
            "a) keyboard mode",
            "b) strobed input mode",
            "c) keyboard and strobed input mode",
            "d) scanned sensor matrix mode"
        ],
        "Answer": "Answer: c\nExplanation: Overrun error occurs when an already full FIFO has attempted an entry. Underrun error occurs when an empty FIFO read is attempted."
    },
    {
        "id": 262,
        "Question": "The flag that increments automatically after each read or write operation to the display RAM is",
        "Options": [
            "a) IF",
            "b) RF",
            "c) AI",
            "d) WF"
        ],
        "Answer": "Answer: c\nExplanation: AI refers to auto increment flag."
    },
    {
        "id": 263,
        "Question": "If any change in sensor value is detected at the end of a sensor matrix scan, then the IRQ line",
        "Options": [
            "a) goes low",
            "b) goes high",
            "c) remains unchanged",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: In sensor matrix mode, the IRQ line goes high, if any change in sensor value is detected at the end of a sensor matrix scan or the sensor RAM has a previous entry to be read by the CPU."
    },
    {
        "id": 264,
        "Question": "Which of the following is not a mode of data transmission?",
        "Options": [
            "a) simplex",
            "b) duplex",
            "c) semi duplex",
            "d) half duplex"
        ],
        "Answer": "Answer: c\nExplanation: Basically, there are three modes of data transmission. simplex, duplex and half duplex."
    },
    {
        "id": 265,
        "Question": "If the data is transmitted only in one direction over a single communication channel, then it is of",
        "Options": [
            "a) simplex mode",
            "b) duplex mode",
            "c) semi duplex mode",
            "d) half duplex mode"
        ],
        "Answer": "Answer: a\nExplanation: In simplex mode, the data transmission is unidirectional. For example, a CPU may transmit data for a CRT display unit in this mode."
    },
    {
        "id": 266,
        "Question": "If the data transmission takes place in either direction, but at a time data may be transmitted only in one direction then, it is of",
        "Options": [
            "a) simplex mode",
            "b) duplex mode",
            "c) semi duplex mode",
            "d) half duplex mode"
        ],
        "Answer": "Answer: d\nExplanation: In half duplex mode, data transmission is bidirectional but not at a time. For example, Walkie-Talkie."
    },
    {
        "id": 267,
        "Question": "In 8251A, the pin that controls the rate at which the character is to be transmitted is",
        "Options": [
            "a) TXC(active low)",
            "b) TXC(active high)",
            "c) TXD(active low)",
            "d) RXC(active low)"
        ],
        "Answer": "Answer: a\nExplanation: Transmitter Clock Input (TXC(active low)) is a pin that controls the rate at which the character is to be transmitted."
    },
    {
        "id": 268,
        "Question": "TXD(Transmitted Data Output) pin carries serial stream of the transmitted data bits along with",
        "Options": [
            "a) start bit",
            "b) stop bit",
            "c) parity bit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Transmitted Data Output pin carries a serial stream of the transmitted data bits along with other information like start bits, stop bits and parity bits etc."
    },
    {
        "id": 269,
        "Question": "The signal that may be used either to interrupt the CPU or polled by the CPU is",
        "Options": [
            "a) TXRDY(Transmitter ready)",
            "b) RXRDY(Receiver ready output)",
            "c) DSR(active low)",
            "d) DTR(active low)"
        ],
        "Answer": "Answer: b\nExplanation: RXRDY(Receiver ready output) may be used either to interrupt the CPU or polled by the CPU."
    },
    {
        "id": 270,
        "Question": "The disadvantage of RS-232C is",
        "Options": [
            "a) limited speed of communication",
            "b) high-voltage level signaling",
            "c) big-size communication adapters",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: RS232C has been used for long and has a few disadvantages like limited speed of communication, high-voltage level signaling and big-size communication adapters."
    },
    {
        "id": 271,
        "Question": "The USB supports the signaling rate of",
        "Options": [
            "a) full-speed USB 1.0 at rate of 12 Mbps",
            "b) high-speed USB 2.0 at rate of 480 Mbps",
            "c) super-speed USB 3.0 at rate of 596 Mbps",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The USB standards support the signaling rates. Also, USB signaling is implemented in a differential in low- and full-speed options."
    },
    {
        "id": 272,
        "Question": "The bit packet that commands the device either to receive data or transmit data in transmission of USB asynchronous communication is",
        "Options": [
            "a) Handshake packet",
            "b) Token packet",
            "c) PRE packet",
            "d) Data packet"
        ],
        "Answer": "Answer: b\nExplanation: The token packet is the second type of packet which commands the device either to receive data or transmit data."
    },
    {
        "id": 273,
        "Question": "High speed USB devices neglect",
        "Options": [
            "a) Handshake packet",
            "b) Token packet",
            "c) PRE packet",
            "d) Data packet"
        ],
        "Answer": "Answer: c\nExplanation: PRE packets are only of importance to low-speed USB devices."
    },
    {
        "id": 274,
        "Question": "In direct memory access mode, the data transfer takes place",
        "Options": [
            "a) directly",
            "b) indirectly",
            "c) directly and indirectly",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In direct memory access mode, the data may transfer directly without the interference from the CPU."
    },
    {
        "id": 275,
        "Question": "In 8257 (DMA), each of the four channels has",
        "Options": [
            "a) a pair of two 8-bit registers",
            "b) a pair of two 16-bit registers",
            "c) one 16-bit register",
            "d) one 8-bit register"
        ],
        "Answer": "Answer: b\nExplanation: The DMA supports four channels, and each of the channels has a pair of two 16-bit registers, namely DMA address register and a terminal count register."
    },
    {
        "id": 276,
        "Question": "The common register(s) for all the four channels of 8257 is",
        "Options": [
            "a) DMA address register",
            "b) Terminal count register",
            "c) Mode set register and status register",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The two common registers for all the four channels of DMA are mode set register and status register."
    },
    {
        "id": 277,
        "Question": "In 8257 register format, the selected channel is disabled after the terminal count condition is reached when",
        "Options": [
            "a) Auto load is set",
            "b) Auto load is reset",
            "c) TC STOP bit is reset",
            "d) TC STOP bit is set"
        ],
        "Answer": "Answer: d\nExplanation: If the TC STOP bit is set, the selected channel is disabled after the terminal count condition is reached, and it further prevents any DMA cycle on the channel."
    },
    {
        "id": 278,
        "Question": "The IOR (active low) input line acts as output in",
        "Options": [
            "a) slave mode",
            "b) master mode",
            "c) master and slave mode",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The IOR (active low) is an active low bidirectional tristate input line, that acts as input in the slave mode, and acts as output in the master mode. In master mode, this signal is used to read data from a peripheral during a memory write cycle."
    },
    {
        "id": 279,
        "Question": "The IOW (active low) in its slave mode loads the contents of a data bus to",
        "Options": [
            "a) 8-bit mode register",
            "b) upper/lower byte of 16-bit DMA address register",
            "c) terminal count register",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In its slave mode, the IOW (active low) loads the contents of a data bus to 8-bit mode register, upper/lower byte of 16-bit DMA address register or terminal count register."
    },
    {
        "id": 280,
        "Question": "The pin that disables all the DMA channels by clearing the mode registers is",
        "Options": [
            "a) MARK",
            "b) CLEAR",
            "c) RESET",
            "d) READY"
        ],
        "Answer": "Answer: c\nExplanation: The RESET pin which is asynchronous input disables all the DMA channels by clearing the mode registers, and tristate all the control lines."
    },
    {
        "id": 281,
        "Question": "The pin that requests the access of the system bus is",
        "Options": [
            "a) HLDA",
            "b) HRQ",
            "c) ADSTB",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The hold request output requests the access of the system bus."
    },
    {
        "id": 282,
        "Question": "The pin that is used to write data to the addressed memory location, during DMA write operation is",
        "Options": [
            "a) MEMR (active low)",
            "b) AEN",
            "c) MEMW (active low)",
            "d) IOW (active low)"
        ],
        "Answer": "Answer: c\nExplanation: The MEMW (active low) is used to write data to the addressed memory location, during DMA write operation."
    },
    {
        "id": 283,
        "Question": "The pin that strobes the higher byte of the memory address, generated by the DMA controller into the latches is",
        "Options": [
            "a) AEN",
            "b) ADSTB",
            "c) TC",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The pin ADSTB strobes the higher byte of the memory address, generated by the DMA controller into the latches."
    },
    {
        "id": 284,
        "Question": "The 8257 is able to accomplish the operation of",
        "Options": [
            "a) verifying DMA operation",
            "b) write operation",
            "c) read operation",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 8257 can accomplish three types of operations and they are\ni) verify DMA operation\nii) write operation\niii) read operation."
    },
    {
        "id": 285,
        "Question": "The bus is available when the DMA controller receives the signal",
        "Options": [
            "a) HRQ",
            "b) HLDA",
            "c) DACK",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If the HLDA signal is received by the DMA controller, it indicates that the bus is available."
    },
    {
        "id": 286,
        "Question": "To indicate the I/O device that its request for the DMA transfer has been honored by the CPU, the DMA controller pulls",
        "Options": [
            "a) HLDA signal",
            "b) HRQ signal",
            "c) DACK (active low)",
            "d) DACK (active high)"
        ],
        "Answer": "Answer: c\nExplanation: The DACK (active low) line of the used channel is pulled down by the DMA controller to indicate the I/O device that its request for the DMA transfer has been honored by the CPU."
    },
    {
        "id": 287,
        "Question": "If more than one channel requests service simultaneously, the transfer will occur as",
        "Options": [
            "a) multi transfer",
            "b) simultaneous transfer",
            "c) burst transfer",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If more than one channel requests service simultaneously, then the transfer occurs as a burst or continuous transfer."
    },
    {
        "id": 288,
        "Question": "The continuous transfer may be interrupted by an external device by pulling down the signal",
        "Options": [
            "a) HRQ",
            "b) DACK (active low)",
            "c) DACK (active high)",
            "d) HLDA"
        ],
        "Answer": "Answer: d\nExplanation: The burst or continuous transfer may be interrupted by an external device by pulling down the HLDA line."
    },
    {
        "id": 289,
        "Question": "The number of clock cycles required for an 8257 to complete a transfer is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The 8257 uses four clock cycles to complete a transfer."
    },
    {
        "id": 290,
        "Question": "In 8257, if each device connected to a channel is assigned to a fixed priority then it is said to be in",
        "Options": [
            "a) rotating priority scheme",
            "b) fixed priority scheme",
            "c) rotating priority and fixed priority scheme",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In this scheme, the DRQ3 has the lowest priority followed by DRQ2 and DRQ1. The DRQ0 has the highest priority."
    },
    {
        "id": 291,
        "Question": "The priority of the channels varies frequently in",
        "Options": [
            "a) rotating priority scheme",
            "b) fixed priority scheme",
            "c) rotating priority and fixed priority scheme",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In this scheme, the priorities assigned to the channels are not fixed."
    },
    {
        "id": 292,
        "Question": "The register of 8257 that can only be written in is",
        "Options": [
            "a) DMA address register",
            "b) Terminal count register",
            "c) Mode set register",
            "d) Status register"
        ],
        "Answer": "Answer: c\nExplanation: The selected register may be read or written depending on the instruction executed by the CPU. But only write operation can be performed on the mode set register."
    },
    {
        "id": 293,
        "Question": "The operation that can be performed on the status register is",
        "Options": [
            "a) write operation",
            "b) read operation",
            "c) read and write operations",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The status register can only be read."
    },
    {
        "id": 294,
        "Question": "The block of 8237 that decodes the various commands given to the 8237 by the CPU is",
        "Options": [
            "a) timing and control block",
            "b) program command control block",
            "c) priority block",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The program control block decodes various commands given to the 8237 by the CPU before servicing a DMA request.\n"
    },
    {
        "id": 295,
        "Question": "The priority between the DMA channels requesting the services can be resolved by",
        "Options": [
            "a) timing and control block",
            "b) program command control block",
            "c) priority block",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The priority encoder block resolves the priority between the DMA channels requesting the services."
    },
    {
        "id": 296,
        "Question": "The register that holds the current memory address is",
        "Options": [
            "a) current word register",
            "b) current address register",
            "c) base address register",
            "d) command register"
        ],
        "Answer": "Answer: b\nExplanation: The current address register holds the current memory address. The current address register is accessed during the DMA transfer."
    },
    {
        "id": 297,
        "Question": "The register that holds the data byte transfers to be carried out is",
        "Options": [
            "a) current word register",
            "b) current address register",
            "c) base address register",
            "d) command register"
        ],
        "Answer": "Answer: a\nExplanation: The current word register is a 16-bit register that holds the data transfers. The word count is decremented after each transfer, and the new value is stored again in the register."
    },
    {
        "id": 298,
        "Question": "When the count becomes zero in the current word register then",
        "Options": [
            "a) Input signal is enabled",
            "b) Output signal is enabled",
            "c) EOP (end of process) is generated",
            "d) Start of process is generated"
        ],
        "Answer": "Answer: c\nExplanation: When the count becomes zero, the EOP signal is generated. This can be written in successive bytes by the CPU, in program mode."
    },
    {
        "id": 299,
        "Question": "The current address register is programmed by the CPU as",
        "Options": [
            "a) bit-wise",
            "b) byte-wise",
            "c) bit-wise and byte-wise",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The current address register is byte-wise programmed by the CPU, i.e. lower byte first and the higher byte later."
    },
    {
        "id": 300,
        "Question": "Which of these register’s contents is used for auto-initialization (internally)?",
        "Options": [
            "a) current word register",
            "b) current address register",
            "c) base address register",
            "d) command register"
        ],
        "Answer": "Answer: c\nExplanation: The contents of base address register cannot be read by the CPU. These contents are used internally for auto-initialization."
    },
    {
        "id": 301,
        "Question": "The register that maintains an original copy of the respective initial current address register and current word register is",
        "Options": [
            "a) mode register",
            "b) base address register",
            "c) command register",
            "d) mask register"
        ],
        "Answer": "Answer: b\nExplanation: The base address register maintains an original copy of the current address register and current word register, before incrementing or decrementing."
    },
    {
        "id": 302,
        "Question": "The register that can be automatically incremented or decremented, after each DMA transfer is",
        "Options": [
            "a) mask register",
            "b) mode register",
            "c) command register",
            "d) current address register"
        ],
        "Answer": "Answer: d\nExplanation: The address is automatically incremented or decremented after each DMA transfer, and the resulting address value is again stored in the current address register."
    },
    {
        "id": 303,
        "Question": "Which of the following is a type of DMA transfer?",
        "Options": [
            "a) memory read",
            "b) memory write",
            "c) verify transfer",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Memory read, memory write and verify transfer are the three types of DMA transfer."
    },
    {
        "id": 304,
        "Question": "Each bit in the request register is cleared by",
        "Options": [
            "a) under program control",
            "b) generation of TC",
            "c) generation of an external EOP",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In the request register, each bit is set or reset under program control or is cleared upon generation of a TC or an external EOP."
    },
    {
        "id": 305,
        "Question": "The register that holds the data during memory to memory data transfer is",
        "Options": [
            "a) mode register",
            "b) temporary register",
            "c) command register",
            "d) mask register"
        ],
        "Answer": "Answer: b\nExplanation: The temporary register holds the data during memory to memory data transfers. After the completion of the transfer operation, the last word transferred remains in the temporary register, until it is cleared by a reset operation."
    },
    {
        "id": 306,
        "Question": "The register that keeps track of all the DMA channel pending requests and status of their terminal counts is",
        "Options": [
            "a) mask register",
            "b) request register",
            "c) status register",
            "d) count register"
        ],
        "Answer": "Answer: c\nExplanation: The status register keeps track of all the DMA channel pending requests, and status of their terminal counts. These are cleared upon reset."
    },
    {
        "id": 307,
        "Question": "The pin that clears the command, request and temporary registers, and internal first/last flipflop when it is set is",
        "Options": [
            "a) CLEAR",
            "b) SET",
            "c) HLDA",
            "d) RESET"
        ],
        "Answer": "Answer: d\nExplanation: A high on the reset pin clears the command, status, request and temporary registers, and also clears the internal first/last flipflop."
    },
    {
        "id": 308,
        "Question": "The DMA request input pin that has the highest priority is",
        "Options": [
            "a) DREQ0",
            "b) DREQ1",
            "c) DREQ2",
            "d) DREQ3"
        ],
        "Answer": "Answer: a\nExplanation: DREQ0 has the highest priority while DREQ3 has the lowest one. The priorities of the DREQ lines is programmable."
    },
    {
        "id": 309,
        "Question": "When interface 8237 does not have any valid pending DMA request then it is said to be in",
        "Options": [
            "a) active state",
            "b) passive state",
            "c) idle state",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If 8237 is in idle state, then CPU may program it in this state."
    },
    {
        "id": 310,
        "Question": "To complete a DMA transfer, a memory to memory transfer requires",
        "Options": [
            "a) a read from memory cycle",
            "b) a write to memory cycle",
            "c) a read-from and write-to memory cycle",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: A memory to memory transfer is a two cycle operation and requires a read from and write-to memory cycle, to complete each DMA transfer."
    },
    {
        "id": 311,
        "Question": "In demand transfer mode of 8237, the device stops data transfer when",
        "Options": [
            "a) a TC (terminal count) is reached",
            "b) an external EOP (active low) is detected",
            "c) the DREQ signal goes inactive",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In demand transfer mode, the device continues transfers till a TC is reached or an external EOP is detected or the DREQ signal goes inactive."
    },
    {
        "id": 312,
        "Question": "The mode of 8237 in which the device transfers only one byte per request is",
        "Options": [
            "a) block transfer mode",
            "b) single transfer mode",
            "c) demand transfer mode",
            "d) cascade mode"
        ],
        "Answer": "Answer: b\nExplanation: In single mode, the device transfers only one byte per request. For each transfer, the DREQ must be active until the DACK is activated."
    },
    {
        "id": 313,
        "Question": "The transfer of a block of data from one set of memory address to another takes place in",
        "Options": [
            "a) block transfer mode",
            "b) demand transfer mode",
            "c) memory to memory transfer mode",
            "d) cascade mode"
        ],
        "Answer": "Answer: c\nExplanation: To perform the transfer of a block of data from one set of a memory address to another one, this transfer mode is used."
    },
    {
        "id": 314,
        "Question": "Which of the following command is used to make all the internal registers of 8237 clear?",
        "Options": [
            "a) clear first/last flipflop",
            "b) master clear command",
            "c) clear mask register",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Using master clear command, all the internal registers of 8237 are cleared, while all the bits of the mask register are set."
    },
    {
        "id": 315,
        "Question": "The basic principle of floppy disks involve",
        "Options": [
            "a) magnetic data reading",
            "b) magnetic data recording",
            "c) magnetic data recording and reading",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Whatever their physical sizes and storage formats, all the floppies incorporate the basic principles of magnetic data recording and reading."
    },
    {
        "id": 316,
        "Question": "In floppy disk, the small hole that enables the drive to identify the beginning of a track and its first sector is",
        "Options": [
            "a) inner hole",
            "b) key hole",
            "c) index hole",
            "d) start hole"
        ],
        "Answer": "Answer: c\nExplanation: The small hole called index hole, enables the drive to identify the beginning of a track and its first sector."
    },
    {
        "id": 317,
        "Question": "Inside its jacket, the floppy media is rotated at the speed of",
        "Options": [
            "a) 200 RPM",
            "b) 300 RPM",
            "c) 150 RPM",
            "d) 50 RPM"
        ],
        "Answer": "Answer: b\nExplanation: The floppy media is rotated at the speed of 300 RPM (Revolution Per Minute) inside its jacket."
    },
    {
        "id": 318,
        "Question": "The Double Density Double Sided disks on each side are organized with",
        "Options": [
            "a) 20 tracks",
            "b) 30 tracks",
            "c) 40 tracks",
            "d) 50 tracks"
        ],
        "Answer": "Answer: c\nExplanation: The Double Density Double Sided (DDDS) disks are organized with 40 tracks on each side of the disk."
    },
    {
        "id": 319,
        "Question": "The magnetic recording technique used for storing data onto the disks (floppy disks) is called",
        "Options": [
            "a) return to zero",
            "b) non-return to zero",
            "c) return to zero and Non-return to zero",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In this technique, the magnetic flux on the disk surface never returns to zero, i.e. no erase operation is carried out."
    },
    {
        "id": 320,
        "Question": "For reading the disks DVD uses",
        "Options": [
            "a) blue laser",
            "b) white laser",
            "c) red laser",
            "d) green laser"
        ],
        "Answer": "Answer: c\nExplanation: A DVD is an optical disk that uses a red laser for reading the disks."
    },
    {
        "id": 321,
        "Question": "For reading the disks, the blue ray disk uses",
        "Options": [
            "a) high frequency red laser",
            "b) low frequency red laser",
            "c) high frequency blue laser",
            "d) low frequency blue laser"
        ],
        "Answer": "Answer: c\nExplanation: The blue ray disk uses a high frequency blue laser with a small wavelength to read the disk."
    },
    {
        "id": 322,
        "Question": "A blue ray disk can store data upto _________ per layer.",
        "Options": [
            "a) 25 KB",
            "b) 25 MB",
            "c) 25 TB",
            "d) 25 GB"
        ],
        "Answer": "Answer: d\nExplanation: A blue ray disk can store data upto 25 GB per layer and is popularly used for storing long duration videos like movies."
    },
    {
        "id": 323,
        "Question": "DVDRW is for",
        "Options": [
            "a) read-write DVD",
            "b) rewriteable DVD",
            "c) recordable DVD",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: DVDRW is for rewriteable DVD and DVDR is for recordable DVD."
    },
    {
        "id": 324,
        "Question": "The HDD is also called as",
        "Options": [
            "a) hard disk",
            "b) hard drive",
            "c) fixed disk",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The Hard Disk Drive is also called as a hard disk, hard drive, fixed drive, fixed disk or fixed disk drive."
    },
    {
        "id": 325,
        "Question": "The memory of a microprocessor serves as",
        "Options": [
            "a) storage of individual instructions",
            "b) temporary storage for the data",
            "c) storing common instructions or data for all processors",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The memory serves the microprocessor in the same way, whether it is a single microprocessor or a multi microprocessor."
    },
    {
        "id": 326,
        "Question": "In shared bus architecture, the required processor(s) to perform a bus cycle, for fetching data or instructions is",
        "Options": [
            "a) one processor",
            "b) two processors",
            "c) more than two processors",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In a shared bus architecture, only one processor performs bus cycle to fetch instructions or data from the memory."
    },
    {
        "id": 327,
        "Question": "In multiport memory configuration, the processor(s) that address the multiport memory is(are)",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) many"
        ],
        "Answer": "Answer: b\nExplanation: The processors P1 and P2 address a multiport memory, which can be accessed at a time by both the processors."
    },
    {
        "id": 328,
        "Question": "The memory space of a processor that is mapped to other processor/processors and vice-versa is known as",
        "Options": [
            "a) multi microprocessor system",
            "b) memory technique",
            "c) bus window technique",
            "d) mapping technique"
        ],
        "Answer": "Answer: c\nExplanation: The bus window technique is the correct method of interconnection between the processors."
    },
    {
        "id": 329,
        "Question": "The disadvantage of the bus window technique is",
        "Options": [
            "a) both processors must know about bus window",
            "b) both processors must know the address map",
            "c) loss of effective local memory space",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The disadvantage of bus window technique is that both processors must know implicitly about the existence of a bus window, its size and the address map. It also results in loss of effective local memory space."
    },
    {
        "id": 330,
        "Question": "Bus switches are present in",
        "Options": [
            "a) bus window technique",
            "b) crossbar switching",
            "c) linked input/output",
            "d) shared bus"
        ],
        "Answer": "Answer: b\nExplanation: In crossbar switching type of interconnection topology, several parallel data paths are possible. Each node of the crossbar represents a bus switch."
    },
    {
        "id": 331,
        "Question": "Which of the following is not a type of configuration that is based on physical interconnections between the processors?",
        "Options": [
            "a) star configuration",
            "b) loop configuration",
            "c) regular topologies",
            "d) incomplete interconnection"
        ],
        "Answer": "Answer: d\nExplanation: Based on the physical interconnections between the processors, the configurations are\ni) star configuration\nii) loop or ring configuration\niii) complete interconnection\niv) regular topologies\nv) irregular topologies."
    },
    {
        "id": 332,
        "Question": "The configuration, in which all the processing elements are connected to a central switching element, that may be independent processor via dedicated paths is",
        "Options": [
            "a) star",
            "b) loop",
            "c) complete",
            "d) irregular"
        ],
        "Answer": "Answer: a\nExplanation: The switching element controls the interconnections between the processing elements."
    },
    {
        "id": 333,
        "Question": "The configuration that is not suitable for a large number of processors is",
        "Options": [
            "a) star",
            "b) loop",
            "c) complete",
            "d) regular"
        ],
        "Answer": "Answer: c\nExplanation: For a large number of processors, the complete interconnection is impractical due to a large number of interconnection paths."
    },
    {
        "id": 334,
        "Question": "The array processor architecture is an example of",
        "Options": [
            "a) star",
            "b) loop",
            "c) complete",
            "d) regular"
        ],
        "Answer": "Answer: d\nExplanation: In array processor architecture, the processing elements are arranged in a regular fashion."
    },
    {
        "id": 335,
        "Question": "The interconnection topologies are implemented using _________ as a node.",
        "Options": [
            "a) control unit",
            "b) microprocessor",
            "c) processing unit",
            "d) microprocessor or processing unit"
        ],
        "Answer": "Answer: d\nExplanation: The microprocessors or processing unit is used as a node in interconnection topologies. They may also work as stand-alone processors or subprocessing units, under the control of other microprocessors or processing units."
    },
    {
        "id": 336,
        "Question": "The feature of the multi-microprocessor architecture is",
        "Options": [
            "a) task dependent",
            "b) single bus provider for many processors",
            "c) design is for a specific task",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The main feature of multi-microprocessor is that it is task dependent. If it is designed for a specific task, then it may not be useful for other tasks."
    },
    {
        "id": 337,
        "Question": "The main objective in building the multi-microprocessor is",
        "Options": [
            "a) greater throughput",
            "b) enhanced fault tolerance",
            "c) greater throughput and enhanced fault tolerance",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Greater throughput and enhanced fault tolerance are the main objectives of the multi-microprocessor system. These systems incorporate a multiplicity of hardware and software, for the purpose."
    },
    {
        "id": 338,
        "Question": "An interface between the user or an application program, and the system resources are",
        "Options": [
            "a) microprocessor",
            "b) microcontroller",
            "c) multi-microprocessor",
            "d) operating system"
        ],
        "Answer": "Answer: d\nExplanation: The operating system acts as an interface, and is an important program that resides in the computer memory."
    },
    {
        "id": 339,
        "Question": "An operating system provides",
        "Options": [
            "a) hardware and software resource management",
            "b) input/output management",
            "c) memory management",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: An operating system provides a means of hardware and software resource management including input/output and memory management."
    },
    {
        "id": 340,
        "Question": "Distributed systems are designed to run",
        "Options": [
            "a) serial process",
            "b) parallel process",
            "c) serial and parallel process",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Distributed systems are designed to run a parallel process. It is essential that a proper environment exists for concurrent processes to communicate and cooperate, in order to complete the allotted task."
    },
    {
        "id": 341,
        "Question": "A distributed operating system must provide a mechanism for",
        "Options": [
            "a) intraprocessor communication",
            "b) intraprocess and intraprocessor communication",
            "c) interprocess and interprocessor communication",
            "d) interprocessor communication"
        ],
        "Answer": "Answer: c\nExplanation: A distributed operating system must provide a mechanism for interprocess and interprocessor communication."
    },
    {
        "id": 342,
        "Question": "A multiprocessor operating system should perform",
        "Options": [
            "a) a mechanism to split a task into concurrent subtasks",
            "b) optimize the system performance",
            "c) handling structural or architectural changes",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A multiprocessor operating system should have a mechanism to split a task, optimise system performance, and should handle structural changes."
    },
    {
        "id": 343,
        "Question": "An operating system must possess",
        "Options": [
            "a) process-processor allocation strategies",
            "b) mechanism to collect results of subtasks",
            "c) software to improve overall performance",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: An operating system must have process-processor allocation strategies, a mechanism to collect results of subtasks and software to improve overall performance."
    },
    {
        "id": 344,
        "Question": "A multiprocessor operating system must take care of",
        "Options": [
            "a) authorized data access and data protection",
            "b) unauthorized data access and data protection",
            "c) authorized data access",
            "d) data protection"
        ],
        "Answer": "Answer: b\nExplanation: A multiprocessor operating system must take care of unauthorized data access and data protection."
    },
    {
        "id": 345,
        "Question": "The unit that executes all the numeric processor instructions in 8087 is",
        "Options": [
            "a) Control unit",
            "b) ALU",
            "c) Numeric extension unit",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The 8087 is divided into two sections namely control unit and numeric extension unit in which the numeric extension unit executes all the numeric processor instructions."
    },
    {
        "id": 346,
        "Question": "The unit that receives and decodes the instructions in 8087 is",
        "Options": [
            "a) Control unit",
            "b) ALU",
            "c) Numeric extension unit",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The control unit receives, decodes the instructions, and executes the 8087 control instructions."
    },
    {
        "id": 347,
        "Question": "The control unit functions in",
        "Options": [
            "a) establishing communication between CPU and memory",
            "b) coordinating the internal coprocessor execution",
            "c) reads and writes memory operands",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The control unit is used for establishing communication between CPU and memory and coordinating the internal coprocessor execution."
    },
    {
        "id": 348,
        "Question": "When the numeric extension unit (NEU) begins its execution, then the signal that is active is",
        "Options": [
            "a) BUSY (active high)",
            "b) BUSY (active low)",
            "c) READY (active low)",
            "d) RESET (active high)"
        ],
        "Answer": "Answer: a\nExplanation: When NEU begins its execution, the BUSY signal is pulled up. Also, this output signal when high, indicates to the CPU that it is busy with the execution of an allotted instruction."
    },
    {
        "id": 349,
        "Question": "The register that allows the register programmer to select the required processing options is",
        "Options": [
            "a) significant",
            "b) exponent",
            "c) control word register",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The control word register allows the register programmer to select the required processing options out of available ones. It is used to control the operation of 8087."
    },
    {
        "id": 350,
        "Question": "Invalid operation is the exception generated due to",
        "Options": [
            "a) stack overflow",
            "b) stack underflow",
            "c) indeterminate form as result",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Invalid operation is generated due to stack overflow, stack underflow, indeterminate form as result, or non-number (NAN) as operand."
    },
    {
        "id": 351,
        "Question": "The exception generated for a too big result to fit in the format is",
        "Options": [
            "a) invalid operation",
            "b) overflow",
            "c) denormalized operand",
            "d) result overflow"
        ],
        "Answer": "Answer: b\nExplanation: A too big result to fit in the format generates this exception. The condition code bits indicate that the result is prohibitively large."
    },
    {
        "id": 352,
        "Question": "If the result is infinity, then the exception generated is",
        "Options": [
            "a) overflow",
            "b) invalid operation",
            "c) denormalized operand",
            "d) zero divide"
        ],
        "Answer": "Answer: d\nExplanation: If any non-zero finite operand is divided by zero, the zero divide exception is generated. The resulting condition code bits indicate that the result is infinity, even if the exception is masked."
    },
    {
        "id": 353,
        "Question": "To operate 8087 in maximum mode, the pin MN/MX (active low) is",
        "Options": [
            "a) connected to Vcc or power supply",
            "b) connected to ground",
            "c) left unconnected",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The 8087 can operate in a maximum mode, only when the MN/MX (active low) pin of the CPU is grounded. In maximum mode, all the control signals are derived using a sequence chip known as a bus controller."
    },
    {
        "id": 354,
        "Question": "If the result is rounded according to the rounding control bits, then the exception generated is",
        "Options": [
            "a) denormalized operand",
            "b) underflow",
            "c) inexact result",
            "d) invalid operation"
        ],
        "Answer": "Answer: c\nExplanation: If it is impossible to fit the actual result in the specified format, the result is rounded according to the rounding control bits, and an exception is generated. This sets the precision exception flag."
    },
    {
        "id": 355,
        "Question": "The instruction that stores a copy of top of the stack into the memory, and pops the top of the stack is",
        "Options": [
            "a) FST",
            "b) FSTP",
            "c) FIST",
            "d) FLD"
        ],
        "Answer": "Answer: b\nExplanation: FSTP (store floating point number and pop) stores a copy of top of the stack into memory or any coprocessor register, and then pops the top of the stack."
    },
    {
        "id": 356,
        "Question": "The instruction that multiplies the content of the stack top by 2n is",
        "Options": [
            "a) FMUL",
            "b) FPREM",
            "c) FSCAL",
            "d) FCSH"
        ],
        "Answer": "Answer: c\nExplanation: FSCAL instruction multiplies the content of the stack top by 2n, where n is an integral part of stack and stores the result in stack."
    },
    {
        "id": 357,
        "Question": "If the opcode bit is D=1, then the source and destination operands are",
        "Options": [
            "a) incremented",
            "b) decremented",
            "c) cleared",
            "d) interchanged"
        ],
        "Answer": "Answer: d\nExplanation: If D=1, then it interchanges the source and destination operands."
    },
    {
        "id": 358,
        "Question": "The 8089 shares the system bus and memory with the host CPU in",
        "Options": [
            "a) tightly coupled configuration",
            "b) loosely coupled configuration",
            "c) tightly and loosely coupled configurations",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In a tightly coupled configuration, the 8089 shares the system bus and memory with the host CPU using its RQ (active low) or GT (active low) pins."
    },
    {
        "id": 359,
        "Question": "The 8089 communicates with the host CPU using bus arbiter and controller in",
        "Options": [
            "a) tightly coupled configuration",
            "b) loosely coupled configuration",
            "c) tightly and loosely coupled configurations",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In a loosely coupled configuration, the 8089 has its own local bus and communicates with the host CPU using bus arbiter and controller."
    },
    {
        "id": 360,
        "Question": "The number of address lines used by the I/O processor in 8089 is",
        "Options": [
            "a) 20",
            "b) 12",
            "c) 16",
            "d) 8"
        ],
        "Answer": "Answer: c\nExplanation: The 8089 I/O processor uses only 16 address lines, and thus it can address only 64KB of IO space."
    },
    {
        "id": 361,
        "Question": "The IO device that can be interfaced with 8089 is",
        "Options": [
            "a) 16-bit IO",
            "b) 8-bit IO",
            "c) 64-bit IO",
            "d) 16-bit and 8-bit IO"
        ],
        "Answer": "Answer: d\nExplanation: The 8089 handled IO devices need not have the same data bus width as that of 8089. This enables even 8-bit IO devices to be interfaced easily with 8089."
    },
    {
        "id": 362,
        "Question": "In the 8089 architecture, the address of memory table for channel-2 is calculated by",
        "Options": [
            "a) adding 16 to the contents of CCP",
            "b) adding 8 to the contents of CCP",
            "c) adding memory table address of channel-1",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The address of the memory table for channel-2 is calculated by adding 8 to the contents of CCP or by adding memory table address for channel-1 to the contents of CCP."
    },
    {
        "id": 363,
        "Question": "Which of the following is not a general purpose register of 8089?",
        "Options": [
            "a) GA",
            "b) BC",
            "c) CX",
            "d) MC"
        ],
        "Answer": "Answer: c\nExplanation: The registers GA, GB, GC, BC, IX and MC can be used as general purpose registers."
    },
    {
        "id": 364,
        "Question": "The registers that are used as source and destination pointers during DMA operations are",
        "Options": [
            "a) GB, GC",
            "b) GC, BC",
            "c) GC, GA",
            "d) GA, GB"
        ],
        "Answer": "Answer: d\nExplanation: GA register is used as source and GB as destination pointers during DMA operations."
    },
    {
        "id": 365,
        "Question": "The pin that is used for data transfer control and operation termination signals is",
        "Options": [
            "a) SINTR",
            "b) EXT",
            "c) DRQ and EXT",
            "d) RQ (active low) or GT (active low)"
        ],
        "Answer": "Answer: c\nExplanation: The DRQ and EXT are used for data transfer control and operation termination signals during DMA operations."
    },
    {
        "id": 366,
        "Question": "The pin that is used to inform the CPU that the previous operation is completed is",
        "Options": [
            "a) RQ (active low)",
            "b) GT (active low)",
            "c) DRQ",
            "d) SINTR"
        ],
        "Answer": "Answer: d\nExplanation: The SINTR pins are used by the channels either to inform the CPU that the previous operation is over or to ask for its attention or interference if required, before the completion of the task."
    },
    {
        "id": 367,
        "Question": "The current channel status of program status word contains",
        "Options": [
            "a) source and destination address widths",
            "b) bus load limit",
            "c) interrupt control and servicing",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The program status word contains the current channel status, which contains source and destination address widths, channel activity, interrupt control and servicing, bus load limit and priority information."
    },
    {
        "id": 368,
        "Question": "Which of the following is an incorporated function to resolve interprocessor communication problems?",
        "Options": [
            "a) bus allotment and control",
            "b) bus arbitration",
            "c) priority resolving",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To resolve the various bus contention and interprocessor communication problems, different hardware strategies and algorithms are worked out. These incorporated functions like bus allotment and control, bus arbitration and priority resolving into them."
    },
    {
        "id": 369,
        "Question": "The device that deals with the bus access control functions and bus handshake activities is",
        "Options": [
            "a) bus allotment controller",
            "b) bus arbiter",
            "c) priority resolver",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The bus arbiter or 8289 takes care of bus access control functions and bus handshake activities."
    },
    {
        "id": 370,
        "Question": "The clock generator delays the READY signal until the signal _________ goes low",
        "Options": [
            "a) DEN (active high)",
            "b) DEN (active low)",
            "c) AEN (active low)",
            "d) AEN (active high)"
        ],
        "Answer": "Answer: c\nExplanation: If AEN (active low) is high, the clock generator delays the READY signal till the AEN (active low) goes low."
    },
    {
        "id": 371,
        "Question": "The bus controller relinquishes the bus if",
        "Options": [
            "a) READY (active low)",
            "b) LOCK (active high)",
            "c) CBRQ (active low)",
            "d) BPRO (active high)"
        ],
        "Answer": "Answer: b\nExplanation: The bus controller does not relinquish (release its control on) the bus, till the LOCK (active low) input is low."
    },
    {
        "id": 372,
        "Question": "The signals that are used by the bus arbitration in the independent request method is",
        "Options": [
            "a) BREQ (active low)",
            "b) BPRN (active low)",
            "c) CBRQ (active low)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The four active low signals, bus request (BREQ), bus priority in (BPRN), common bus request (CBRQ) and bus priority out (BPRO) are used for bus arbitration."
    },
    {
        "id": 373,
        "Question": "The signal that is used to drive a priority resolving network that actually accepts the bus request inputs is",
        "Options": [
            "a) BREQ (active low)",
            "b) BPRN (active low)",
            "c) CBRQ (active low)",
            "d) BPRO (active low)"
        ],
        "Answer": "Answer: a\nExplanation: The BREQ (active low) is used to drive a priority resolving network that actually accepts the bus request inputs from all the masters and derives the priority outputs which further drive the BPRN (active low) inputs of all the masters."
    },
    {
        "id": 374,
        "Question": "Which of the following is the simplest and cheapest method of bus arbitration?",
        "Options": [
            "a) daisy chaining",
            "b) independent request",
            "c) polling",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The daisy chaining method is the simplest one, as it has less hardware complexity."
    },
    {
        "id": 375,
        "Question": "The method of bus arbitration that does not contain priority resolving network in it is",
        "Options": [
            "a) daisy chaining",
            "b) independent request",
            "c) polling",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The daisy chaining method does not contain any priority resolving network, rather the priorities of all the devices are essentially assumed to be in sequence."
    },
    {
        "id": 376,
        "Question": "Which of the following is the fastest method of bus arbitration?",
        "Options": [
            "a) daisy chaining",
            "b) independent request",
            "c) polling",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The independent request scheme is quite fast because each of the masters can independently communicate with the controller."
    },
    {
        "id": 377,
        "Question": "A set of address lines is driven by the controller in",
        "Options": [
            "a) daisy chaining",
            "b) independent request",
            "c) polling",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In a polling scheme, a set of address lines is driven by the controller to address each of the masters in sequence."
    },
    {
        "id": 378,
        "Question": "The processors used in the multi-microprocessor are",
        "Options": [
            "a) coprocessors",
            "b) independent processors",
            "c) coprocessors or independent processors",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The processors used in the multi-microprocessor are either coprocessors or independent processors."
    },
    {
        "id": 379,
        "Question": "The processor that executes the instructions fetched for it by the host processor is",
        "Options": [
            "a) microprocessor",
            "b) coprocessor",
            "c) independent processor",
            "d) coprocessor and independent processor"
        ],
        "Answer": "Answer: b\nExplanation: The coprocessor executes the instructions fetched for it by the host processor."
    },
    {
        "id": 380,
        "Question": "The processor that asks for bus access or may itself fetch the instructions and execute them is",
        "Options": [
            "a) microprocessor",
            "b) coprocessor",
            "c) independent processor",
            "d) coprocessor and independent processor"
        ],
        "Answer": "Answer: c\nExplanation: The independent processor may ask for bus access, may fetch the instructions itself, and execute them independently."
    },
    {
        "id": 381,
        "Question": "In tightly coupled systems, the microprocessors share",
        "Options": [
            "a) common clock",
            "b) bus control logic",
            "c) common clock and bus control logic",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The microprocessors share a common clock and bus control logic, in a tightly coupled system."
    },
    {
        "id": 382,
        "Question": "Communication between processors using a common system bus and common memory takes place in",
        "Options": [
            "a) loosely coupled system",
            "b) tightly coupled system",
            "c) tightly and loosely coupled system",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In tightly coupled systems, the two processors may communicate using a common system bus or common memory."
    },
    {
        "id": 383,
        "Question": "The bus arbitration is handled by an external circuit in",
        "Options": [
            "a) loosely coupled system",
            "b) tightly coupled system",
            "c) tightly and loosely coupled system",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In a loosely coupled multiprocessor system, each CPU may have its own bus control logic. The bus arbitration is handled by an external circuit, common to all the processors."
    },
    {
        "id": 384,
        "Question": "The loosely coupled system has an advantage of",
        "Options": [
            "a) more number of CPUs can be added",
            "b) system structure is modular",
            "c) more fault-tolerant and suitable for parallel applications",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The loosely coupled system is advantageous than the tightly coupled system as it has advantages of more number of CPUs can be added to improve the system performance. A fault in a single module does not lead to a complete system breakdown."
    },
    {
        "id": 385,
        "Question": "In a tightly coupled system, when a processor is using the bus then the local bus of other processors is in",
        "Options": [
            "a) hold state",
            "b) high impedance state",
            "c) halt state",
            "d) low impedance state"
        ],
        "Answer": "Answer: b\nExplanation: When a processor is using the bus then the other processors maintain their local buses in high impedance state."
    },
    {
        "id": 386,
        "Question": "The disadvantage of the loosely coupled system is",
        "Options": [
            "a) complex due to additional hardware",
            "b) less portable",
            "c) more expensive",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The loosely coupled systems are more complicated due to the required additional communication hardware. They are less portable and more expensive due to additional hardware."
    },
    {
        "id": 387,
        "Question": "To indicate the completion of task allocated in a closely (tightly) coupled system, the microprocessor uses",
        "Options": [
            "a) status bit in memory",
            "b) interrupts the host",
            "c) status bit in memory or interrupts the host",
            "d) clock pulse"
        ],
        "Answer": "Answer: c\nExplanation: The microprocessor in a closely coupled system either uses a status bit in memory or interrupts the host to inform it about the completion of task allotted to it."
    },
    {
        "id": 388,
        "Question": "The files that reside in the current drive and directory of the hard disk is",
        "Options": [
            "a) OBJ files",
            "b) EXE files",
            "c) SRC files",
            "d) DEST files"
        ],
        "Answer": "Answer: b\nExplanation: The files that reside in the current drive and directory of the hard disk is EXE files."
    },
    {
        "id": 389,
        "Question": "The master processor stores the result buffers on to the hard disk with the filename as",
        "Options": [
            "a) .EXE file",
            "b) .OBJ file",
            "c) .EXE file with extension .RES",
            "d) .OBJ file with extension .RES"
        ],
        "Answer": "Answer: c\nExplanation: The master processor stores the result buffers on to the hard disk with the filename as .EXE file with extension .RES."
    },
    {
        "id": 390,
        "Question": "The 8288 bus controller chip derives the signals",
        "Options": [
            "a) ALE",
            "b) DEN",
            "c) DT/R(active low)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The latches are enabled by ALE signal and data will be enabled by DEN signal. The ALE, DEN and DT/R(active low) signals are derived by a separate 8288 bus controller chip."
    },
    {
        "id": 391,
        "Question": "The EXE files should not exceed the size of",
        "Options": [
            "a) 30 KB",
            "b) 50 KB",
            "c) 60 KB",
            "d) 40 KB"
        ],
        "Answer": "Answer: c\nExplanation: The EXE files should not be more than 60 KB size."
    },
    {
        "id": 392,
        "Question": "A part of memory that can be addressed by more than one processor for communication is known as",
        "Options": [
            "a) memory module",
            "b) bus window",
            "c) ram",
            "d) memory management unit"
        ],
        "Answer": "Answer: b\nExplanation: There are two slave processors and thus there are two bus windows."
    },
    {
        "id": 393,
        "Question": "When a subprocessor wants to communicate with the bus window, it informs the main processor to",
        "Options": [
            "a) enable control buffer",
            "b) storage buffer",
            "c) disable tristate buffer",
            "d) translation look aside buffer"
        ],
        "Answer": "Answer: c\nExplanation: An 8255 IO card is used to control the tristate buffers that provide isolation. When a subprocessor wants to communicate with the bus window, it informs the main processor to disable tristate buffer."
    },
    {
        "id": 394,
        "Question": "When the subprocessor completes its execution, then the status on the status lines shows",
        "Options": [
            "a) hold status",
            "b) halt status",
            "c) high status",
            "d) low status"
        ],
        "Answer": "Answer: b\nExplanation: When the subprocessor completes its execution, then the status on the status lines shows halt status."
    },
    {
        "id": 395,
        "Question": "For MEMR(active low) and MEMWR(active low) operations the mode of isolation buffer should respectively be in",
        "Options": [
            "a) receiver mode, receiver mode",
            "b) transmit mode, receiver mode",
            "c) receiver mode, transmit mode",
            "d) transmit mode, transmit mode"
        ],
        "Answer": "Answer: c\nExplanation: During MEMR(active low) the data flow from memory to CPU so isolation buffer should be in receiver mode and data flows from CPU to memory during MEMWR(active low) operation and so buffer should be in transmit mode."
    },
    {
        "id": 396,
        "Question": "If the DIR pin of the isolation chip is high, then it enters into",
        "Options": [
            "a) receiver mode",
            "b) virtual access mode",
            "c) transmit or receive mode",
            "d) transmit mode"
        ],
        "Answer": "Answer: d\nExplanation: If the DIR pin of the isolation chip is high, then it enters into transmit mode and if it is 0 then the isolation chip enters into receiver mode."
    },
    {
        "id": 397,
        "Question": "The complete software system is divided into",
        "Options": [
            "a) main program",
            "b) Interrupt routine IRT2 for first subprocessing the unit",
            "c) Interrupt routine IRT3 for first subprocessing the unit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: System software of the complete system consists of three parts. the first part main control program controls the total operation of the system, and the remaining two parts are the small local initialization programs for each of the subprocessors."
    },
    {
        "id": 398,
        "Question": "The 80286 is able to address the physical memory of",
        "Options": [
            "a) 8 MB",
            "b) 16 MB",
            "c) 24 MB",
            "d) 64 MB"
        ],
        "Answer": "Answer: b\nExplanation: The 80286 with its 24-bit address bus is able to address 16 Mbytes of physical memory."
    },
    {
        "id": 399,
        "Question": "The 80286 is able to operate with the clock frequency of",
        "Options": [
            "a) 12.5 MHz",
            "b) 10 MHz",
            "c) 8 MHz",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Various versions of 80286 are available that run on 12.5 MHz, 10 MHz and 8 MHz clock frequencies."
    },
    {
        "id": 400,
        "Question": "The management of the memory system required to ensure the smooth execution of the running process is done by",
        "Options": [
            "a) control unit",
            "b) memory",
            "c) memory management unit",
            "d) bus interface unit"
        ],
        "Answer": "Answer: c\nExplanation: The memory management which is an important task of the operating system is now supported by a hardware unit called a memory management unit."
    },
    {
        "id": 401,
        "Question": "The fetching of the program from secondary memory to place it in physical memory, during the execution of CPU is called",
        "Options": [
            "a) mapping",
            "b) swapping in",
            "c) swapping out",
            "d) pipelining"
        ],
        "Answer": "Answer: b\nExplanation: Whenever the portion of a program is required for execution by the CPU, it is fetched from the secondary memory and placed in the physical memory. This is called swapping in of the program."
    },
    {
        "id": 402,
        "Question": "The process of making the physical memory free by storing the portion of program and partial results in the secondary storage called",
        "Options": [
            "a) mapping",
            "b) swapping in",
            "c) swapping out",
            "d) pipelining"
        ],
        "Answer": "Answer: c\nExplanation: In swapping out, a portion of the program or important partial results required for further execution, may be saved back on secondary storage to make the physical memory free, for further execution of another required portion of the program."
    },
    {
        "id": 403,
        "Question": "The memory that is considered as a large logical memory space, that is not available physically is",
        "Options": [
            "a) logical memory",
            "b) auxiliary memory",
            "c) imaginary memory",
            "d) virtual memory"
        ],
        "Answer": "Answer: d\nExplanation: To the user, there exists a very large logical memory space, which is actually not available called virtual memory. This does not exist physically in a system. It is however, possible to map a large virtual memory space onto the real physical memory."
    },
    {
        "id": 404,
        "Question": "Memory management deals with",
        "Options": [
            "a) data protection",
            "b) unauthorized access prevention",
            "c) segmented memory",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The important aspects of memory management are data protection, unauthorized access prevention, and segmented memory."
    },
    {
        "id": 405,
        "Question": "The memory management and protection mechanisms are disabled when the 80286 is operated in",
        "Options": [
            "a) normal mode",
            "b) real address mode",
            "c) virtual address mode",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In real address mode of 80286, all the memory management and protection mechanisms are disabled."
    },
    {
        "id": 406,
        "Question": "The memory management and protection mechanisms are enabled with advanced instruction set when 80286 is operated in",
        "Options": [
            "a) normal mode",
            "b) real address mode",
            "c) virtual address mode",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In virtual address mode, 80286 works with all of its memory management and protection capabilities, with the advanced instruction set."
    },
    {
        "id": 407,
        "Question": "The 80286 is an upward object code compatible with 8086 or 8088 when operated in",
        "Options": [
            "a) normal mode",
            "b) real address mode",
            "c) virtual address mode",
            "d) real and virtual address mode"
        ],
        "Answer": "Answer: d\nExplanation: The 80286 is operated in two modes, namely real address mode and virtual address mode. In both the modes, the 80286 is compatible with 8086/8088."
    },
    {
        "id": 408,
        "Question": "The CPU of 80286 contains",
        "Options": [
            "a) 16-bit general purpose registers",
            "b) 16-bit segment registers",
            "c) status and control register",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The CPU of 80286 contains the same set of registers as in 8086."
    },
    {
        "id": 409,
        "Question": "The bits that are modified according to the result of the execution of logical and arithmetic instructions are called",
        "Options": [
            "a) byte addressable bit",
            "b) control flag bits",
            "c) status flag bit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The flag register bits, D0, D2, D4, D6, D7 and D11 are modified according to the result of the execution of logical and arithmetic instructions. These are called as status flag bits."
    },
    {
        "id": 410,
        "Question": "The flags that are used for controlling machine operation are called",
        "Options": [
            "a) status flags",
            "b) control flags",
            "c) machine controlled flags",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The flags such as trap flag (TF) and Interrupt flag (IF) bits are used for controlling the machine operation, and thus they are called control flags."
    },
    {
        "id": 411,
        "Question": "The additional field that is available in 80286 is",
        "Options": [
            "a) I/O Privilege field",
            "b) nested task flag",
            "c) protection enable",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The additional fields available in 80286 flag register are, I/O Privilege field, nested task flag, protection enable, and monitor processor extension."
    },
    {
        "id": 412,
        "Question": "Which of the block is not considered as a block of an architecture of 80286?",
        "Options": [
            "a) address unit",
            "b) bus unit",
            "c) instruction unit",
            "d) control unit"
        ],
        "Answer": "Answer: d\nExplanation: The CPU may be viewed to contain four functional parts and they are\ni) Address Unit\nii) Bus Unit\niii) Instruction Unit\niv) Execution Unit."
    },
    {
        "id": 413,
        "Question": "The unit that is responsible for calculating the address of instructions, and data that the CPU wants to access is",
        "Options": [
            "a) bus unit",
            "b) address unit",
            "c) instruction unit",
            "d) control unit"
        ],
        "Answer": "Answer: b\nExplanation: The address unit is responsible for calculating the address of instructions, and data that the CPU wants to access. Also, the address lines derived by this unit may be used to address different peripherals."
    },
    {
        "id": 414,
        "Question": "The process of fetching the instructions in advance, and storing in the queue is called",
        "Options": [
            "a) mapping",
            "b) swapping",
            "c) instruction pipelining",
            "d) storing"
        ],
        "Answer": "Answer: c\nExplanation: The instructions are fetched in advance and stored in a queue to enable faster execution of the instructions. This concept is known as instruction pipelining."
    },
    {
        "id": 415,
        "Question": "The CPU must flush out the prefetched instructions immediately following the branch instruction in",
        "Options": [
            "a) conditional branch",
            "b) unconditional branch",
            "c) conditional and unconditional branches",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In case of unconditional branch, the CPU will have to flush out the prefetched instructions, immediately following the branch instruction."
    },
    {
        "id": 416,
        "Question": "The device that interfaces and control the internal data bus with the system bus is",
        "Options": [
            "a) data interface",
            "b) controller interface",
            "c) data and control interface",
            "d) data transreceiver"
        ],
        "Answer": "Answer: d\nExplanation: The data transreceivers interface and control the internal data bus with the system bus."
    },
    {
        "id": 417,
        "Question": "The register bank of Execution Unit of 80286 is used as",
        "Options": [
            "a) for storing data",
            "b) scratch pad",
            "c) special purpose registers",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The execution unit contains the register bank, used for storing the data as scratch pad, or used as special purpose registers."
    },
    {
        "id": 418,
        "Question": "Which of the following is not an interrupt generated by 80286?",
        "Options": [
            "a) software interrupts",
            "b) hardware or external interrupts",
            "c) INT instruction",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The interrupts generated by 80286 may be divided into 3 categories as external or hardware interrupts, INT instruction or software interrupts and interrupts generated by exceptions."
    },
    {
        "id": 419,
        "Question": "For which of the following instruction does the return address point to instruction causing an exception?",
        "Options": [
            "a) divide error exception",
            "b) bound range exceeded exception",
            "c) invalid opcode exception",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: For the instructions, divide error, bound range exceeded and invalid opcode exceptions, the return address points to the instruction causing exception."
    },
    {
        "id": 420,
        "Question": "The instruction that comes into action, if the trap flag is set is",
        "Options": [
            "a) maskable interrupt",
            "b) non-maskable interrupt",
            "c) single step interrupt",
            "d) breakpoint interrupt"
        ],
        "Answer": "Answer: c\nExplanation: Single step interrupt is an internal interrupt that comes into action if the trap flag (TF) is set."
    },
    {
        "id": 421,
        "Question": "The interrupt that has the highest priority among the following is",
        "Options": [
            "a) Single step",
            "b) NMI (non-maskable interrupt)",
            "c) INTR",
            "d) Instruction exception"
        ],
        "Answer": "Answer: d\nExplanation: The instruction exception has the highest priority followed by single step, NMI and INTR instrution."
    },
    {
        "id": 422,
        "Question": "The interrupt that has the lowest priority among the following is",
        "Options": [
            "a) Processor extension segment overrun",
            "b) INTR",
            "c) INT instruction",
            "d) NMI"
        ],
        "Answer": "Answer: c\nExplanation: The INT instruction has the lowest priority. The order of priority of interrupts from high to low is\n1) instruction exception\n2) single step\n3) NMI\n4) processor extension segment overrun\n5) INTR\n6) INT instruction."
    },
    {
        "id": 423,
        "Question": "The 80286 is available in the package as",
        "Options": [
            "a) 68-pin PLCC (plastic leaded chip carrier)",
            "b) 68-pin LCC (lead less chip carrier)",
            "c) 68-pin PGA (pin grid array)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80286 is available in 68-pin PLCC (plastic leaded chip carrier), 68-pin LCC (lead less chip carrier) and 68-pin PGA (pin grid array) packages."
    },
    {
        "id": 424,
        "Question": "The clock frequency applied at the CLK pin is internally divided by",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: The clock frequency is divided by two internally, and is used for deriving fundamental timings for basic operations of the circuit."
    },
    {
        "id": 425,
        "Question": "The 8 address lines, A23-A16 of 80286 are zero during",
        "Options": [
            "a) memory transfer",
            "b) address transfer",
            "c) memory to processor transfer",
            "d) I/O transfer"
        ],
        "Answer": "Answer: d\nExplanation: The address lines, A23-A16 are zero during I/O transfers."
    },
    {
        "id": 426,
        "Question": "The signals S1 (active low), S2 (active low) are",
        "Options": [
            "a) output signals",
            "b) indicate initiation of bus cycle",
            "c) define type of bus cycle with M/IO (active low)",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The signals S1 (active low), S2 (active low) are active low status output signals, which indicate initiation of a bus cycle, and with M/IO (active low) and COD/INTA (active low), they define the type of the bus cycle."
    },
    {
        "id": 427,
        "Question": "If M/IO (active low) signal is ‘0’ then it indicates",
        "Options": [
            "a) I/O cycle",
            "b) Memory cycle",
            "c) I/O cycle or INTA cycle",
            "d) I/O cycle or HALT cycle"
        ],
        "Answer": "Answer: c\nExplanation: If M/IO (active low) signal is ‘0’ then it indicates that an I/O cycle or INTA cycle is in the process, and if it is ‘1’, it indicates that a memory or a HALT cycle is in progress."
    },
    {
        "id": 428,
        "Question": "The LOCK (active low) is activated automatically by hardware using",
        "Options": [
            "a) XCHG signal",
            "b) Interrupt acknowledge",
            "c) Descriptor table access",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The lock pin is used to prevent the other masters from gaining the control of the bus, for the current and the following bus cycles. This pin is activated by a “LOCK” instruction prefix, or automatically by hardware during XCHG, interrupt acknowledge or descriptor table access."
    },
    {
        "id": 429,
        "Question": "The pin that is used to insert wait states in a bus cycle is",
        "Options": [
            "a) WAIT",
            "b) BHE (active low)",
            "c) READY (active low)",
            "d) WAIT(active low)"
        ],
        "Answer": "Answer: c\nExplanation: The active low READY pin is used to insert wait states in a bus cycle, for interfacing low speed peripherals. This signal is neglected during HLDA cycle."
    },
    {
        "id": 430,
        "Question": "The minimum number of clock cycles required in an input pulse width of the RESET pin is",
        "Options": [
            "a) 4",
            "b) 2",
            "c) 8",
            "d) 16"
        ],
        "Answer": "Answer: d\nExplanation: The active high RESET input clears the internal logic of 80286, and re-initializes it. The reset input pulse width should be at least 16 clock cycles."
    },
    {
        "id": 431,
        "Question": "To filter the output, a 0.047microfarads, 12V capacitor is connected between the pins",
        "Options": [
            "a) CAP and ground",
            "b) Output pin and ground",
            "c) CAP and Vcc",
            "d) NMI and ground"
        ],
        "Answer": "Answer: a\nExplanation: A 0.047microfarads, 12V capacitor is connected between the CAP pin and ground, to filter the output of the internal substrate bias generator."
    },
    {
        "id": 432,
        "Question": "The signal that causes the 80286 to perform the processor extension interrupt while executing the WAIT and ESC instructions are",
        "Options": [
            "a) BUSY (active low)",
            "b) PEACK (active low)",
            "c) PEREQ",
            "d) ERROR (active low)"
        ],
        "Answer": "Answer: d\nExplanation: An active ERROR (active low) signal causes the 80286 to perform the processor extension interrupt while executing the WAIT and ESC instructions."
    },
    {
        "id": 433,
        "Question": "The 80286 CPU acts just like that of 8086 when operated in",
        "Options": [
            "a) real addressing mode",
            "b) protected virtual address mode",
            "c) real and protected virtual address modes",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In the real addressing mode of operation of 80286, it just acts as a fast 8086."
    },
    {
        "id": 434,
        "Question": "In real addressing mode, the 80286 addresses a physical memory of",
        "Options": [
            "a) 16 MB",
            "b) 8 MB",
            "c) 2 MB",
            "d) 1 MB"
        ],
        "Answer": "Answer: d\nExplanation: In real addressing mode, the 80286 addresses a physical memory of 1 Mbytes using A0-A19. The lines A20-A23 are not used by the internal circuit of 80286 in this mode."
    },
    {
        "id": 435,
        "Question": "In real addressing mode, the 80286 operates at a speed",
        "Options": [
            "a) faster than that of 8086",
            "b) half of that of 8086",
            "c) slower than that of 8086",
            "d) same as that of 8086"
        ],
        "Answer": "Answer: a\nExplanation: Because of extra pipelining and other circuit level improvements, in real address mode also, the 80286 operates at a much faster rate than 8086."
    },
    {
        "id": 436,
        "Question": "In physical memory, if the segment size limit is exceeded by the instruction or data then",
        "Options": [
            "a) instruction is not executed",
            "b) exception is generated",
            "c) saves to next segment automatically",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: An exception is generated if the segment size limit is exceeded by the instruction or the data."
    },
    {
        "id": 437,
        "Question": "The 80286 reserves fixed area of physical memory for",
        "Options": [
            "a) system initialization",
            "b) interrupt vector table",
            "c) system initialization and interrupt vector table",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The 80286 reserves two fixed areas of physical memory for system initialization and interrupt vector table."
    },
    {
        "id": 438,
        "Question": "In the real mode, the memory that is reserved for interrupt vector table is",
        "Options": [
            "a) first 2 KB of memory",
            "b) first 1 KB of memory",
            "c) last 2 KB of memory",
            "d) last 1 KB of memory"
        ],
        "Answer": "Answer: b\nExplanation: In the real mode, the first 1 Kbyte of memory starting from the address 00000H to 003FFH, is reserved for interrupt vector table."
    },
    {
        "id": 439,
        "Question": "In the real mode, the memory that is reserved for system initialization is",
        "Options": [
            "a) from 004FFH to 0FFFFH",
            "b) from 004FFH to 05FFFH",
            "c) from FFFF0H to FFFFFH",
            "d) from FFF00H to FFFFFH"
        ],
        "Answer": "Answer: c\nExplanation: The addresses from FFFF0H to FFFFFH are reserved for system initialization, in real addressing mode."
    },
    {
        "id": 440,
        "Question": "When 80286 is reset, it always starts its execution in",
        "Options": [
            "a) protected virtual addressing mode",
            "b) real addressing mode",
            "c) either real or protected virtual address modes",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation:  When 80286 is reset, it always starts its execution in real addressing mode."
    },
    {
        "id": 441,
        "Question": "The 80286 in real addressing mode performs",
        "Options": [
            "a) initialization of IP",
            "b) enables interrupts",
            "c) sets up descriptor table",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80286 in real addressing mode performs the following functions: it initializes IP and other registers of 80286, initializes the peripheral, enables interrupts, sets up descriptor tables, and then prepares it for entering the protected virtual address mode."
    },
    {
        "id": 442,
        "Question": "In real address mode, while addressing the physical memory, the 80286 uses the signal",
        "Options": [
            "a) HLDA",
            "b) BHE (active low)",
            "c) CAP",
            "d) HOLD"
        ],
        "Answer": "Answer: b\nExplanation: In real address mode, while addressing the physical memory, the 80286 uses BHE (active low) along with A0-A19."
    },
    {
        "id": 443,
        "Question": "The procedure of fetching the chosen program segments or data from the secondary storage into the physical memory is",
        "Options": [
            "a) mapping",
            "b) swapping",
            "c) unswapping",
            "d) pipelining"
        ],
        "Answer": "Answer: b\nExplanation: Swapping is the procedure of fetching the chosen program segments or data from the secondary storage into the physical memory."
    },
    {
        "id": 444,
        "Question": "The procedure of storing back the partial results on to the secondary storage is called",
        "Options": [
            "a) mapping",
            "b) swapping",
            "c) unswapping",
            "d) pipelining"
        ],
        "Answer": "Answer: c\nExplanation: The procedure of storing back the partial results or data back on to the secondary storage is called unswapping."
    },
    {
        "id": 445,
        "Question": "The ability of 80286 to address the virtual memory per task is",
        "Options": [
            "a) 1MB",
            "b) 1GB",
            "c) 1TB",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The 80286 is able to address 1Gbyte of virtual memory per task."
    },
    {
        "id": 446,
        "Question": "The branch instructions are handled by",
        "Options": [
            "a) swapping mechanism",
            "b) unswapping mechanism",
            "c) operating system",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The handling of branch instructions like JUMP and CALL is taken care of, by the swapping and unswapping mechanism, and operating system."
    },
    {
        "id": 447,
        "Question": "A descriptor contains information of",
        "Options": [
            "a) program segment",
            "b) page",
            "c) regarding segment and its access rights",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The segments or pages have been associated with a data structure known as a descriptor. The descriptor contains information on the page, and also carry relevant information regarding a segment, and its access rights."
    },
    {
        "id": 448,
        "Question": "The descriptors that are used for subroutines and interrupt service routines are",
        "Options": [
            "a) data segment descriptors",
            "b) gate descriptors",
            "c) code segment descriptors",
            "d) system segment descriptors"
        ],
        "Answer": "Answer: b\nExplanation: For data segment, the corresponding descriptor may be data segment descriptor and for code segment, there may be code segment descriptor. For subroutines and interrupt service routines there are gate descriptors."
    },
    {
        "id": 449,
        "Question": "A segment with low privilege level is not allowed to access another segment of",
        "Options": [
            "a) low privilege level",
            "b) high privilege level",
            "c) low and high privilege level",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: A segment with low privilege level is not allowed to access another segment with high privilege level."
    },
    {
        "id": 450,
        "Question": "A descriptor is used to carry out",
        "Options": [
            "a) transfer of control",
            "b) task switching",
            "c) to store privilege level and segment limit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A descriptor is used to carry out additional functions like transfer of control and task switching."
    },
    {
        "id": 451,
        "Question": "The descriptor that is used for special system data segments and control transfer operations is",
        "Options": [
            "a) data segment descriptors",
            "b) gate descriptors",
            "c) code segment descriptors",
            "d) system segment descriptors"
        ],
        "Answer": "Answer: d\nExplanation: The 80286 has system segment descriptor, that is used for special system data segments, and control transfer operations."
    },
    {
        "id": 452,
        "Question": "A code segment descriptor contains",
        "Options": [
            "a) 16-bit segment limit",
            "b) 24-bit segment base address",
            "c) 8-bit access rights byte",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A code or data segment descriptor contains 16-bit segment limit, 24-bit segment base address, 8-bit access rights byte and the remaining 16-bits are reserved by Intel for upward compatibility."
    },
    {
        "id": 453,
        "Question": "In access rights byte, if P (Present)=1, then the segment is mapped into",
        "Options": [
            "a) physical memory",
            "b) virtual memory",
            "c) no mapping takes place",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: If P=1, then the segment is mapped into physical memory."
    },
    {
        "id": 454,
        "Question": "In access rights byte, to select system segment descriptor, the condition is",
        "Options": [
            "a) S=1",
            "b) S=0",
            "c) S not equal to zero",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If S (segment descriptor)=0, then system segment descriptor or gate descriptor is selected."
    },
    {
        "id": 455,
        "Question": "If S (segment descriptor)=1, then the descriptor selected is",
        "Options": [
            "a) code segment descriptor",
            "b) data segment descriptor",
            "c) stack segment descriptor",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: If S=1, then code or data (including stack) segment descriptors are selected."
    },
    {
        "id": 456,
        "Question": "The memory of limit field is",
        "Options": [
            "a) 2 bits",
            "b) 4 bits",
            "c) 8 bits",
            "d) 16 bits"
        ],
        "Answer": "Answer: d\nExplanation: The limit field, which is the maximum allowed offset address, is of 16 bits."
    },
    {
        "id": 457,
        "Question": "Which of the following is a type of system segment descriptor?",
        "Options": [
            "a) system descriptor",
            "b) gate descriptor",
            "c) system descriptor and gate descriptor",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The system segment descriptors are of seven types. The types 1 to 3 are called system descriptors and the types 4 to 7 are called gate descriptors."
    },
    {
        "id": 458,
        "Question": "Which of the following is a type of gate descriptor?",
        "Options": [
            "a) call gate",
            "b) task gate",
            "c) interrupt gate",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The gate descriptors are of four types namely, call gate, task gate, interrupt gate and trap gate."
    },
    {
        "id": 459,
        "Question": "The gate descriptor contains the information of",
        "Options": [
            "a) destination of control transfer",
            "b) stack manipulations",
            "c) privilege level",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The gate descriptor contains the information regarding the destination of control transfer, required stack manipulations, privilege level and its type."
    },
    {
        "id": 460,
        "Question": "The gate that is used to alter the privilege levels is",
        "Options": [
            "a) call gate",
            "b) task gate",
            "c) interrupt gate",
            "d) trap gate"
        ],
        "Answer": "Answer: a\nExplanation: Call gates are used to alter the privilege levels."
    },
    {
        "id": 461,
        "Question": "The gate that is used to specify a corresponding service routine is",
        "Options": [
            "a) call gate and trap gate",
            "b) task gate and interrupt gate",
            "c) interrupt gate and trap gate",
            "d) task gate and trap gate"
        ],
        "Answer": "Answer: c\nExplanation: Interrupt gates and trap gates are used to specify corresponding service routines."
    },
    {
        "id": 462,
        "Question": "The gate that is used to switch from one task to another is",
        "Options": [
            "a) trap gate",
            "b) task gate",
            "c) task gate and trap gate",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Task gate is used to switch from one task to another."
    },
    {
        "id": 463,
        "Question": "The gate that uses word count field is",
        "Options": [
            "a) trap gate",
            "b) task gate",
            "c) interrupt gate",
            "d) call gate"
        ],
        "Answer": "Answer: d\nExplanation: The word count field is only used by a call gate descriptor, to indicate the number of bytes to be transferred from the stack of the calling routine to the stack of the called routine."
    },
    {
        "id": 464,
        "Question": "The memory that maintains the most frequently required data for execution, in a high speed memory is called",
        "Options": [
            "a) virtual memory",
            "b) physical memory",
            "c) cache memory",
            "d) ROM (read only memory)"
        ],
        "Answer": "Answer: c\nExplanation: To minimize the time required for fetching the frequently required descriptor information, from the main memory, cache memory is used in which the most frequently required data for execution is stored."
    },
    {
        "id": 465,
        "Question": "The selector field consists of",
        "Options": [
            "a) requested privilege level (RPL)",
            "b) table indicator",
            "c) index",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In the protected mode, the contents of the segment registers are known as selectors. The selector field consists of three fields namely, RPL, table indicator (TI) and index."
    },
    {
        "id": 466,
        "Question": "If table indicator, TI=0, then the descriptor table selected is",
        "Options": [
            "a) local descriptor table",
            "b) global descriptor table",
            "c) local and global descriptor table",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The type of descriptor table is global if TI=0 and local if TI=1."
    },
    {
        "id": 467,
        "Question": "The instruction that is executed at privilege level zero (0) is",
        "Options": [
            "a) LDT",
            "b) LGDT and LLDT",
            "c) GDT",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The LGDT and LLDT instructions are privileged, and may be executed only at privilege level 0."
    },
    {
        "id": 468,
        "Question": "The instruction that loads a selector which refers to a local descriptor table, containing the base address and limit for LDT is",
        "Options": [
            "a) LGT",
            "b) GDT",
            "c) LGDT",
            "d) LLDT"
        ],
        "Answer": "Answer: d\nExplanation: The LLDT instruction loads a selector, which refers to a local descriptor table, containing the base address, and limit for LDT."
    },
    {
        "id": 469,
        "Question": "The descriptor that is used to store task gates, interrupt gates and trap gates is",
        "Options": [
            "a) system descriptor table",
            "b) gate descriptor table",
            "c) interrupt descriptor table",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The 80286 has a third type of descriptor table known as interrupt descriptor table, which is used to store task gates, interrupt gates and trap gates."
    },
    {
        "id": 470,
        "Question": "The number of interrupt descriptors that the interrupt descriptor table (IDT) handles is",
        "Options": [
            "a) 16",
            "b) 64",
            "c) 128",
            "d) 256"
        ],
        "Answer": "Answer: d\nExplanation: The IDT is able to handle upto 256 interrupt descriptors."
    },
    {
        "id": 471,
        "Question": "The number of bytes required for an interrupt in an IDT is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: c\nExplanation: Six bytes are required for each interrupt in an interrupt descriptor table."
    },
    {
        "id": 472,
        "Question": "By using privilege mechanism the protection from unauthorized accesses is done to",
        "Options": [
            "a) operating system",
            "b) interrupt handlers",
            "c) system software",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The operating system, interrupt handlers and other system softwares can be protected from unauthorized accesses in virtual address space of each task using the privilege mechanism."
    },
    {
        "id": 473,
        "Question": "The task privilege level at the instant of execution is called",
        "Options": [
            "a) Descriptor privilege level (DPL)",
            "b) Current privilege level (CPL)",
            "c) Effective privilege level (EPL)",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Any one of the four privilege levels may be used to execute a task. The task privilege level at that instant is called the Current Privilege Level (CPL)."
    },
    {
        "id": 474,
        "Question": "Once the CPL is selected, it can be changed by",
        "Options": [
            "a) hold",
            "b) transferring control using system descriptors",
            "c) transferring control using gate descriptors",
            "d) transferring control using interrupt descriptors"
        ],
        "Answer": "Answer: c\nExplanation: Once the CPL is selected, it cannot be changed during the execution normally in a single code segment. It can only be changed by transferring the control, using gate descriptors, to a new segment."
    },
    {
        "id": 475,
        "Question": "The data segments defined in GDT (global descriptor table) and the LDT (local descriptor table) can be accessed by a task with",
        "Options": [
            "a) privilege level 0",
            "b) privilege level 1",
            "c) privilege level 2",
            "d) privilege level 3"
        ],
        "Answer": "Answer: a\nExplanation: A task executing at level 0, the most privileged level, can access all the data segments defined in GDT and the LDT of the task."
    },
    {
        "id": 476,
        "Question": "A task with privilege level 0, doesn’t refer to all the lower level privilege descriptors in",
        "Options": [
            "a) GDT (global descriptor table)",
            "b) LDT (local descriptor table)",
            "c) IDT (interrupt descriptor table)",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The task with privilege level 0, refers to all the lower level privilege descriptors which apply to all the descriptors except the LDT descriptors."
    },
    {
        "id": 477,
        "Question": "The selector RPL that uses a less trusted privilege than the current privilege level for further use is known as",
        "Options": [
            "a) Least task privilege level",
            "b) Descriptor privilege level",
            "c) Effective privilege level",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: A selector RPL uses a less trusted privilege than the current privilege level for further use. This is known as the Effective Privilege Level of the task."
    },
    {
        "id": 478,
        "Question": "The effective privilege level is",
        "Options": [
            "a) maximum numeric of RPL and CPL",
            "b) minimum privilege of RPL and CPL",
            "c) numeric minimum and privilege maximum of RPL and CPL",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The effective privilege level is minimum in numeric and maximum in the privilege of RPL and CPL."
    },
    {
        "id": 479,
        "Question": "The task requesting an access to a descriptor is allowed to access after checking the",
        "Options": [
            "a) type of descriptor",
            "b) privilege level",
            "c) type of descriptor and privilege level",
            "d) corresponding segment"
        ],
        "Answer": "Answer: c\nExplanation: The task requesting an access to a descriptor is allowed to access to it and to the corresponding segment, only after checking the type of the descriptor and privilege level(CPL, RPL, DPL)."
    },
    {
        "id": 480,
        "Question": "A CALL instruction can reference only a code segment descriptor with",
        "Options": [
            "a) DPL less privilege than CPL",
            "b) DPL equal privilege to CPL",
            "c) DPL greater privilege than CPL",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: A CALL or JUMP instruction can reference only a code segment descriptor with DPL equal to CPL of the task or a segment with a DPL of equal or greater privilege than CPL."
    },
    {
        "id": 481,
        "Question": "The RPL of a selector that referred to the code descriptor must have",
        "Options": [
            "a) less privilege than CPL",
            "b) greater privilege than CPL",
            "c) equal privilege than CPL",
            "d) any privilege regarding CPL"
        ],
        "Answer": "Answer: c\nExplanation: The RPL of a selector that referred to the code descriptor must have the same privilege as CPL."
    },
    {
        "id": 482,
        "Question": "The instruction that refers to only code segment descriptors with DPL equal to or less than the task CPL is",
        "Options": [
            "a) CALL",
            "b) IRET",
            "c) ESC",
            "d) RET and IRET"
        ],
        "Answer": "Answer: d\nExplanation: The RET and IRET instructions are to refer to only code segment descriptors with DPL equal to or less than the task CPL."
    },
    {
        "id": 483,
        "Question": "When a JUMP instruction references a Task State Segment(TSS) descriptor, then DPL must be",
        "Options": [
            "a) equally privileged as CPL",
            "b) greater or equally privileged than CPL",
            "c) less or equally privileged than CPL",
            "d) less privileged than CPL"
        ],
        "Answer": "Answer: c\nExplanation: When a CALL or JUMP instruction references a Task State Segment(TSS) descriptor, then DPL must be less or equally privileged than CPL."
    },
    {
        "id": 484,
        "Question": "The data segment access refers to",
        "Options": [
            "a) loading DS",
            "b) loading ES",
            "c) loading SS",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Loading DS, ES or SS for referring to a new descriptor comes under the data segment access."
    },
    {
        "id": 485,
        "Question": "An exception is generated when",
        "Options": [
            "a) privilege test is negative",
            "b) an improper segment is referenced",
            "c) referenced segment is not present in physical memory",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: If the privilege test is negative or an improper segment is referenced then an exception 13 is generated. If the referenced segment is not present in physical memory, an exception 11 is generated."
    },
    {
        "id": 486,
        "Question": "The mechanism to provide protection, that is accomplished with the help of read/write privileges is",
        "Options": [
            "a) restricted use of segments",
            "b) restricted accesses to segments",
            "c) privileged instructions",
            "d) privileged operations"
        ],
        "Answer": "Answer: a\nExplanation: The restricted use of segments is accomplished with the help of read/write privileges."
    },
    {
        "id": 487,
        "Question": "The Local descriptor table (LDT) and Global descriptor table (GDT) are present in",
        "Options": [
            "a) privileged instruction check",
            "b) operation reference check",
            "c) segment load check",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In restricted use of segments i.e. segment load check, the segment usages are restricted by classifying the corresponding descriptors, under LDT and GDT."
    },
    {
        "id": 488,
        "Question": "The mechanism that is accomplished using descriptor usages limitations and rules of privilege check is",
        "Options": [
            "a) privileged instruction check",
            "b) operation reference check",
            "c) segment load check",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: Restricted accesses to segment, also called, operation reference check, is accomplished using descriptor usages limitations, and rules of privilege check."
    },
    {
        "id": 489,
        "Question": "The mechanism that is executed at certain privilege levels, determined by CPL (Current Privilege Level) and I/O privilege level (IOPL) is",
        "Options": [
            "a) restricted use of segments",
            "b) restricted accesses to segments",
            "c) privileged instructions or operations",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The privileged instructions or operations, also called, privileged instruction check, is executed at certain privilege levels, determined by CPL and I/O privilege level(IOPL), as defined by the flag register."
    },
    {
        "id": 490,
        "Question": "If CPL is not of the required privilege level, then the instructions that get affected is",
        "Options": [
            "a) IRET",
            "b) POPF",
            "c) IRET and POPF",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The IRET and POPF instructions do not perform any of their functions, if CPL is not of the required privilege level."
    },
    {
        "id": 491,
        "Question": "If CPL is greater than zero, then the instruction that remains unaffected is",
        "Options": [
            "a) IRET",
            "b) POPF",
            "c) IF",
            "d) IRET and POPF"
        ],
        "Answer": "Answer: c\nExplanation: IF remains unaffected if CPL is greater than zero. No exception is generated for this condition."
    },
    {
        "id": 492,
        "Question": "The condition, “CPL not equals to zero” satisfies when executing the instruction",
        "Options": [
            "a) LIDT",
            "b) LGDT",
            "c) LTR",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The condition, “CPL not equals to zero” satisfies, when executing the instructions, LIDT, LGDT, LTR, LMSW, CTS and HLT."
    },
    {
        "id": 493,
        "Question": "While executing the instruction IN/OUT, the condition of CPL is",
        "Options": [
            "a) CPL = 0",
            "b) CPL < IOPL",
            "c) CPL > IOPL",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The condition CPL>IOPL exists, when executing the instructions, INs, IN, OUTS, OUT, STI, CLI and LOCK."
    },
    {
        "id": 494,
        "Question": "The instruction at which the exception is generated, but the processor extension registers contain the address of failing instruction is",
        "Options": [
            "a) LTR",
            "b) INS",
            "c) CTS",
            "d) ESC"
        ],
        "Answer": "Answer: d\nExplanation: At the ESC instruction, the exception is generated, but the processor extension registers contain the address of failing instruction."
    },
    {
        "id": 495,
        "Question": "The exception that has no error code on a stack is",
        "Options": [
            "a) double exception detected",
            "b) processor extension segment overrun",
            "c) invalid task state segment",
            "d) stack segment overrun"
        ],
        "Answer": "Answer: b\nExplanation: The processor extension segment overrun has no error code on the stack."
    },
    {
        "id": 496,
        "Question": "Which of the following is protected mode exception?",
        "Options": [
            "a) double exception detected",
            "b) invalid task state segment",
            "c) stack segment overrun",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Double exception detected, invalid task state segment, stack segment overrun, processor extension segment overrun, are the protected mode exceptions."
    },
    {
        "id": 497,
        "Question": "Which of the following operation is not carried out by 80286?",
        "Options": [
            "a) task switch operation",
            "b) halt",
            "c) processor reset",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80286 carries out six operations. They are:\n1. processor reset and initialization\n2. task switch operation\n3. pointer testing instructions\n4. protected mode initialization\n5. how to enter protected mode?\n6. halt."
    },
    {
        "id": 498,
        "Question": "After completion of the first cycle, the first task is again scheduled for the next cycle. This process is known as",
        "Options": [
            "a) repetition",
            "b) task switch operation",
            "c) processor initiation",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: After completion of the first cycle, the first task is again scheduled for the next cycle, and the process continues. The previous task that was incomplete, may be completed during its coming turns of the allotted CPU time slice. This switch-over operation from one task to another is called task switch operation."
    },
    {
        "id": 499,
        "Question": "The operation that is provided by the internal architecture, to save the execution state of a task is",
        "Options": [
            "a) processor reset",
            "b) processor initialization",
            "c) task switch operation",
            "d) halt"
        ],
        "Answer": "Answer: c\nExplanation: The 80286 internal architecture provides a task switch operation, to save the execution state of a task, and to load a new task to be executed."
    },
    {
        "id": 500,
        "Question": "The instruction that can be used to carry out task switch operation is",
        "Options": [
            "a) software interrupt instruction",
            "b) exception",
            "c) external interrupt",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A software interrupt instruction, exception or external interrupt, can also be used to carry out task switch operation."
    },
    {
        "id": 501,
        "Question": "The IRET instruction gets back the execution state of the previous task, if",
        "Options": [
            "a) NT (nested task flag) = 1",
            "b) NT (nested task flag) = 0",
            "c) IF (interrupt flag) = 1",
            "d) IF (interrupt flag) = 0"
        ],
        "Answer": "Answer: a\nExplanation: If NT = 1, the IRET instruction gets back the execution state of the previous task. Otherwise, the IRET instruction lets the current task continue, after popping the required values from the stack."
    },
    {
        "id": 502,
        "Question": "The NT flag is set by the task switch operation, that is initiated by",
        "Options": [
            "a) CALL",
            "b) INT",
            "c) CALL & INT",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The NT flag is set by CALL or INT initiated task switch operations."
    },
    {
        "id": 503,
        "Question": "The 80286 executes LMSW instruction to enter into",
        "Options": [
            "a) real addressing mode",
            "b) protected mode",
            "c) real addressing and protected modes",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: To enter into protected mode, 80286 executes LMSW instruction, that sets PE flag."
    },
    {
        "id": 504,
        "Question": "The instruction that sets the zero flag, if the segment referred to, by the selector can be read is",
        "Options": [
            "a) VERW",
            "b) VERR",
            "c) LSL",
            "d) LAR"
        ],
        "Answer": "Answer: b\nExplanation: The VERR (VERify to Read) instruction sets the zero flag, if the segment referred to, by the selector, can be read."
    },
    {
        "id": 505,
        "Question": "The instruction that sets the zero flag, if the segment referred to by the selector, can be written as",
        "Options": [
            "a) VERW",
            "b) APRL",
            "c) LSL",
            "d) LAR"
        ],
        "Answer": "Answer: a\nExplanation: The VERW (VERify to Write) instruction sets the zero flag, if the segment referred to, by the selector can be written."
    },
    {
        "id": 506,
        "Question": "The instruction that reads the descriptor access rights byte into the register is",
        "Options": [
            "a) VERW",
            "b) APRL",
            "c) LSL",
            "d) LAR"
        ],
        "Answer": "Answer: d\nExplanation: The LAR (Load Access Rights) instruction reads the descriptor access rights byte into the register, if privilege rules allow."
    },
    {
        "id": 507,
        "Question": "The instruction that reads the segment limit into the register, if privilege rules and descriptor type allow is",
        "Options": [
            "a) VERW",
            "b) APRL",
            "c) LSL",
            "d) LAR"
        ],
        "Answer": "Answer: c\nExplanation: The LSL (Load Segment Limit) instruction reads the segment limit into the register, if privilege rules, and descriptor type allow."
    },
    {
        "id": 508,
        "Question": "The instruction that adjusts the RPL (Requested Privilege Level) of the selector, to the numeric maximum of current selector RPL value is",
        "Options": [
            "a) LAR",
            "b) VERR",
            "c) LSL",
            "d) APRL"
        ],
        "Answer": "Answer: d\nExplanation: The APRL (Adjust Requested Privilege Level) adjusts the RPL (Requested Privilege Level) of the selector to the numeric maximum of current selector RPL value, and the RPL value in the register."
    },
    {
        "id": 509,
        "Question": "Which of the following is a supporting chip of 80286?",
        "Options": [
            "a) interrupt controller",
            "b) clock generator",
            "c) bus controller",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The interrupt controller 8259A, clock generator 82C284, and bus controller 82C288 are the unavoidable members of the family, of supporting chips of 80286."
    },
    {
        "id": 510,
        "Question": "In minimum mode, the function of 80286 is",
        "Options": [
            "a) data transfers to/from memory or I/O",
            "b) controls the data transfer of 80287",
            "c) controls the instruction execution of 80287",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In a minimum mode, the 80286 carries out all the data transfers to/from memory or I/O, controls the data transfer, and instruction execution of 80287."
    },
    {
        "id": 511,
        "Question": "The signal that is applied to the decoding logic, to differentiate between interrupt, code fetch and data bus cycles is",
        "Options": [
            "a) COD",
            "b) INTA (active low)",
            "c) M/IO (active low)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The COD, INTA (active low), M/IO (active low) signals are applied to the decoding logic, to differentiate between interrupt, I/O, code fetch, and data bus cycles."
    },
    {
        "id": 512,
        "Question": "By adding which of the following, the minimum mode of 80286 gives the multibus interface of 80286?",
        "Options": [
            "a) bus controller",
            "b) bus arbiter",
            "c) interrupt controller",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The addition of single chip 82C289 known as bus arbiter, to the configuration of 80286 minimum mode, gives the multibus structure of 80286."
    },
    {
        "id": 513,
        "Question": "The number of bus controllers that are used for interfacing of memory and I/O devices is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The interfacing of memory and I/O devices, uses two 82288 bus controllers, one each for local, and system bus."
    },
    {
        "id": 514,
        "Question": "If the 80286 need to use system bus, then the signal that is to be active is",
        "Options": [
            "a) SRDY",
            "b) SRDYEN",
            "c) ARDYEN",
            "d) ARDY"
        ],
        "Answer": "Answer: c\nExplanation: The ARDYEN pin is to be activated if the 80286 is to use the system bus. The SRDYEN pin is to be grounded."
    },
    {
        "id": 515,
        "Question": "If MBYTES input is high, then the pin serves as",
        "Options": [
            "a) AEN",
            "b) CEN",
            "c) AEN and CEN",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The MBYTES input selects the function of AEN/CEN pin. If MBYTES is high, the pin serves as AEN, else it serves as CEN. The CEN pin is used for selecting one of the available 82288s."
    },
    {
        "id": 516,
        "Question": "Latches are used in 80286 to",
        "Options": [
            "a) demultiplex the address and data lines",
            "b) latch the address signals",
            "c) decode the select signals",
            "d) latch the address and decode the select signals"
        ],
        "Answer": "Answer: d\nExplanation: The address and data lines are not multiplexed, hence no latches are required in 80286 system. Rather the addresses of the next bus cycle are displayed in advance, hence the latches are required for latching the address, and decode the signals."
    },
    {
        "id": 517,
        "Question": "The I/O port addresses, that are not used, while designing practical systems around 80286 are",
        "Options": [
            "a) 0000H to 00FFH",
            "b) 00FFH to FFFFH",
            "c) 00F8H to 00FFH",
            "d) 0000H to FFFFH"
        ],
        "Answer": "Answer: c\nExplanation: The I/O port addresses 00F8H to 00FFH are reserved by Intel, hence these should not be used while designing practical systems around 80286."
    },
    {
        "id": 518,
        "Question": "Which of the following is the highest priority usage among them?",
        "Options": [
            "a) second transfer cycle of a processor extension data transfer",
            "b) third transfer cycle of a processor extension data transfer",
            "c) hold request",
            "d) second byte transfer of 2-byte transfer at an odd address"
        ],
        "Answer": "Answer: d\nExplanation: The second byte transfer of 2-byte transfer at an odd address, is the highest priority usage among the given usages."
    },
    {
        "id": 519,
        "Question": "The highest priority usage than any other usage is",
        "Options": [
            "a) transfer with LOCK (active low) signal",
            "b) hold request",
            "c) processor extension data transfer",
            "d) data transfer performed by EU (execution unit)"
        ],
        "Answer": "Answer: a\nExplanation: The transfer with LOCK (active low) signal is the highest priority usage than any other usage."
    },
    {
        "id": 520,
        "Question": "The lowest priority usage among the following is",
        "Options": [
            "a) hold request",
            "b) processor extension data transfer",
            "c) prefetch operation to fetch and arrange next instruction bytes in queue",
            "d) data transfer performed by EU for instruction execution"
        ],
        "Answer": "Answer: c\nExplanation: The order of priority usages, starting from the highest one to the lowest one, is given as\n1. transfer with LOCK (active low) signal\n2. second byte transfer of 2-byte transfer at an odd address\n3. second or third transfer cycle of a processor extension data transfer\n4. HOLD request\n5. processor extension data transfer\n6. data transfer performed by EU (execution unit)\n7. prefetch operation to fetch and arrange next instruction bytes in queue."
    },
    {
        "id": 521,
        "Question": "As a response to the valid bus hold request, the bus is pushed into",
        "Options": [
            "a) TH (hold) state",
            "b) Ts (status) state",
            "c) Tc (command) state",
            "d) Ti (idle) state"
        ],
        "Answer": "Answer: a\nExplanation: 80286 local bus is relinquished for another bus master if a valid bus hold request is received at the HOLD input pin. As a response to a valid bus hold request, the bus is pushed into TH state."
    },
    {
        "id": 522,
        "Question": "The bus arbiter relinquishes",
        "Options": [
            "a) Address",
            "b) M/IO (active low)",
            "c) COD/INTA (active low)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The address, M/IO (active low) and COD/INTA (active low) are relinquished by bus arbiter."
    },
    {
        "id": 523,
        "Question": "A valid HOLD request is ascertained only after the completion of",
        "Options": [
            "a) 34 clockcycles",
            "b) 24 clockcycles and 80286 is SET",
            "c) 34 clockcycles and 80286 is SET",
            "d) 34 clockcycles and 80286 is RESET"
        ],
        "Answer": "Answer: d\nExplanation: Only after 34 clockcycles, after the 80286 is reset, a valid HOLD request should be ascertained."
    },
    {
        "id": 524,
        "Question": "The master PIC 8259A decides which of its slave interrupt controllers is to return the vector address, as a response of",
        "Options": [
            "a) first INTA (active low) pulse from 80286",
            "b) second INTA (active low) pulse from 80286",
            "c) third INTA (active low) pulse from 80286",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In response to the first INTA (active low) pulse from 80286, the master PIC 8259A decides, which of its slave interrupt controllers is to return the vector address."
    },
    {
        "id": 525,
        "Question": "The slave (which is selected) sends the vector on data bus after the",
        "Options": [
            "a) first INTA (active low) pulse from 80286",
            "b) second INTA (active low) pulse from 80286",
            "c) third INTA (active low) pulse from 80286",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The interrupt acknowledge sequence consists of two INTA (active low) pulses. After the second pulse, the selected slave sends the vector on D0-D7 data lines, and 80286 reads it."
    },
    {
        "id": 526,
        "Question": "The signal of 82C288, that enables the cascade address drivers, during INTA cycles is",
        "Options": [
            "a) DEN",
            "b) DT/R (active low)",
            "c) MCE",
            "d) MB"
        ],
        "Answer": "Answer: c\nExplanation: The MCE (Master Cascade Enable) signal of 82C288 enables the cascade address drivers during INTA cycles, to select the slave using the local address bus."
    },
    {
        "id": 527,
        "Question": "The LOCK (active low) signal is activated during",
        "Options": [
            "a) Ti of first INTA cycle",
            "b) Ts of first INTA cycle",
            "c) Th of second INTA cycle",
            "d) Ts of second INTA cycle"
        ],
        "Answer": "Answer: b\nExplanation: The LOCK (active low) signal is activated during Ts of first INTA cycle."
    },
    {
        "id": 528,
        "Question": "The number of idle states (Ti), that is allowed between two INTA cycles, to meet the 8259A speed and cascade address output delay is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: The 80286 allows three idle states (Ti) between the two INTA cycles, to meet the 8259A speed and cascade address output delay."
    },
    {
        "id": 529,
        "Question": "In which of these modes, the immediate operand is included in the instruction itself?",
        "Options": [
            "a) register operand mode",
            "b) immediate operand mode",
            "c) register and immediate operand mode",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In immediate operand mode, the immediate operand is included in the instruction itself."
    },
    {
        "id": 530,
        "Question": "In register address mode, the operand is stored in",
        "Options": [
            "a) 8-bit general purpose register",
            "b) 16-bit general purpose register",
            "c) si or di",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In register address mode, the operand is stored either in one of the 8-bit or 16-bit general purpose registers or in SI, DI, BX or BP."
    },
    {
        "id": 531,
        "Question": "In which of the following addressing mode, the offset is obtained by adding displacement and contents of one of the base registers?",
        "Options": [
            "a) direct mode",
            "b) register mode",
            "c) based mode",
            "d) indexed mode"
        ],
        "Answer": "Answer: c\nExplanation: In a based mode, the offset is obtained by adding displacement and contents of one of the base registers, either BX or BP."
    },
    {
        "id": 532,
        "Question": "In which of the following addressing mode, the offset is obtained by adding displacement, with the contents of SI?",
        "Options": [
            "a) direct mode",
            "b) register mode",
            "c) based mode",
            "d) indexed mode"
        ],
        "Answer": "Answer: d\nExplanation: In an indexed mode, the offset is obtained by adding displacement, with contents of an index register, either SI or DI."
    },
    {
        "id": 533,
        "Question": "The address of a location of the operand is calculated by adding the contents of any of the base registers, with the contents of any of index registers in",
        "Options": [
            "a) based indexed mode with displacement",
            "b) based indexed mode",
            "c) based mode",
            "d) indexed mode"
        ],
        "Answer": "Answer: b\nExplanation: In a based indexed mode, the operand is stored at a location, whose address is calculated by adding the contents of any of the base registers, with the contents of any of the index registers."
    },
    {
        "id": 534,
        "Question": "Which of the following is not a data type of 80286?",
        "Options": [
            "a) Ordinal or unsigned",
            "b) ASCII",
            "c) Packed BCD",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80286 supports seven data types. They are\n1. integer\n2. Ordinal (unsigned)\n3. pointer\n4. string\n5. ASCII\n6. BCD\n7. Packed BCD."
    },
    {
        "id": 535,
        "Question": "The representation of 8-bit or 16-bit signed binary operands using 2’s complement is a data type of",
        "Options": [
            "a) Ordinal",
            "b) ASCII",
            "c) Packed BCD",
            "d) integer"
        ],
        "Answer": "Answer: d\nExplanation: In integer data type, 8-bit or 16-bit signed binary operands are represented using 2’s complement."
    },
    {
        "id": 536,
        "Question": "The instruction that pushes the general purpose registers, pointer and index registers on to the stack is",
        "Options": [
            "a) POPF",
            "b) PUSH Imd",
            "c) PUSH*A",
            "d) PUSHF"
        ],
        "Answer": "Answer: c\nExplanation: The PUSH*A instruction, pushes the general purpose registers, AX, CX, DX and BX, pointer and index registers, SP, BP, SI, DI, on to the stack."
    },
    {
        "id": 537,
        "Question": "While executing the PUSH*A instruction, the stack pointer is decremented by",
        "Options": [
            "a) 1 bit",
            "b) 2 bits",
            "c) 4 bits",
            "d) 16 bits"
        ],
        "Answer": "Answer: b\nExplanation: The stack pointer is decremented by 16 (eight 2-byte registers)."
    },
    {
        "id": 538,
        "Question": "The statement that is true for the instruction POP*A is",
        "Options": [
            "a) flags are unaffected",
            "b) no operands are required",
            "c) exceptions generated are same as that of PUSH*A",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The POP*A instruction, pops all the contents of the registers DI, SI, BP, SP, BX, DX, CX and AX from the stack in this sequence, that is exactly opposite to that of pushing."
    },
    {
        "id": 539,
        "Question": "The instruction that multiplies the content of AL with a signed immediate operand is",
        "Options": [
            "a) MUL",
            "b) SMUL",
            "c) IMUL",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The IMUL instruction multiplies the content of AL with a signed immediate operand, and the signed 16-bit result is stored in AX."
    },
    {
        "id": 540,
        "Question": "The instruction that represents the ‘rotate source, count’ is",
        "Options": [
            "a) RCL",
            "b) RCR",
            "c) ROR",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The rotate source, count is a group of four instructions containing RCL, RCR, ROL, ROR."
    },
    {
        "id": 541,
        "Question": "In ‘Rotate source, count’ instructions, if the CF is equal to MSB of operand (source) then",
        "Options": [
            "a) TF is cleared",
            "b) OF is cleared",
            "c) TF is set",
            "d) OF is set"
        ],
        "Answer": "Answer: b\nExplanation: If CF is equal to MSB of operand (source), the overflow flag is cleared, otherwise, it is set to 1."
    },
    {
        "id": 542,
        "Question": "The instruction that affects the flags is",
        "Options": [
            "a) IMUL",
            "b) INSW",
            "c) INSB",
            "d) POP*A"
        ],
        "Answer": "Answer: a\nExplanation: No flags are affected by the instructions, INSW, INSB and POP*A."
    },
    {
        "id": 543,
        "Question": "A general protection exception is generated, if the value of",
        "Options": [
            "a) CPL is equal to that of IOPL",
            "b) CPL is less than that of IOPL",
            "c) CPL is greater than that of IOPL",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: When the value of CPL is greater than that of IOPL, a general protection exception is generated."
    },
    {
        "id": 544,
        "Question": "While executing the instruction, OUTSW, the SI is incremented by",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: The SI is automatically incremented by 1 for byte (OUTSB) and 2 for word (OUTSW) operations."
    },
    {
        "id": 545,
        "Question": "The instruction that is used to exit the procedure is",
        "Options": [
            "a) QUIT",
            "b) STOP",
            "c) LEAVE",
            "d) EXIT"
        ],
        "Answer": "Answer: c\nExplanation: The instruction, LEAVE, is generally used with high level languages, to exit a procedure."
    },
    {
        "id": 546,
        "Question": "The instruction that determines the number of bytes, to be copied into the new stack frame, from the previous stack is",
        "Options": [
            "a) ENTER",
            "b) BOUND",
            "c) CLTS",
            "d) LEAVE"
        ],
        "Answer": "Answer: a\nExplanation: The ENTER instruction prepares a stack structure for parameters of a procedure to be executed further. This instruction determines the number of bytes to be copied, into the new stack frame, from the previous stack."
    },
    {
        "id": 547,
        "Question": "The instruction that is used to check whether a signed array offset is within the limit, defined for it by the starting and ending index is",
        "Options": [
            "a) ENTER",
            "b) BOUND",
            "c) CLTS",
            "d) LEAVE"
        ],
        "Answer": "Answer: b\nExplanation: The BOUND instruction is used to check whether a signed array offset is within the limit defined for it, by the starting and ending index."
    },
    {
        "id": 548,
        "Question": "The CLTS (Clear Task Switch Flag) instruction records every execution of WAIT and ESC and is trapped if the flag(s)",
        "Options": [
            "a) PE (Protection Enable) and TS (task switch) flags are set",
            "b) Emulate Processor extension flag is set",
            "c) MP flag and task switched flag is set",
            "d) PE and MP flag is set"
        ],
        "Answer": "Answer: c\nExplanation: The CLTS (Clear Task Switch Flag) instruction records every execution of WAIT and ESC, and is trapped, if the MP flag and task switched flag is set."
    },
    {
        "id": 549,
        "Question": "The instruction that determines whether the segment pointed to, by a 16-bit register, can be accessed from the current privilege level is",
        "Options": [
            "a) RPL",
            "b) CPL",
            "c) ARPL",
            "d) VERR"
        ],
        "Answer": "Answer: d\nExplanation: The VERR/VERW instructions determine whether the segment pointed to, by a 16-bit register, can be accessed from the current privilege level."
    },
    {
        "id": 550,
        "Question": "The instruction that loads 6 bytes from a memory block, pointed to by the effective address of the operand, into global descriptor table register is",
        "Options": [
            "a) LLDT",
            "b) SGDT",
            "c) LGDT",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The LGDT (load global descriptor table register) loads 6 bytes from a memory block, pointed to by the effective address of the operand, into global descriptor table register."
    },
    {
        "id": 551,
        "Question": "In LGDT instruction, while loading 6 bytes, the first word is loaded into the field of",
        "Options": [
            "a) LIMIT field",
            "b) BASE field",
            "c) Either LIMIT or BASE field",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: While loading the 6 bytes, the first word is loaded into the LIMIT field of the descriptor table register. The next three bytes are loaded into the BASE field of the register, and the remaining byte is ignored."
    },
    {
        "id": 552,
        "Question": "Which of the following is not a block of an architecture of 80287?",
        "Options": [
            "a) bus control logic",
            "b) data interface and control unit",
            "c) floating point unit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The three blocks of an internal architecture of 80287 are:\n1. bus control logic\n2. data interface and control unit\n3. floating point unit."
    },
    {
        "id": 553,
        "Question": "The unit that provides and controls the interface, between the internal 80287 bus and 80286 bus via data buffer is",
        "Options": [
            "a) bus control logic",
            "b) data interface and control unit",
            "c) floating point unit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The bus control logic provides and controls the interface, between the internal 80287 bus and 80286 bus via data buffer."
    },
    {
        "id": 554,
        "Question": "The data interface and control unit consists of",
        "Options": [
            "a) status and control words",
            "b) tag words and error pointers",
            "c) instruction decoders",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The data interface and control unit contains status and controls words, TAG words and error pointers."
    },
    {
        "id": 555,
        "Question": "The word that optimizes the NDP performance, by maintaining a record of empty and non-empty register locations is",
        "Options": [
            "a) Status and control words",
            "b) TAG words",
            "c) Error pointers",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The TAG word optimizes the NDP performance by maintaining a record of empty and non-empty register locations. It helps the exception handler to identify special values in the contents of the stack locations."
    },
    {
        "id": 556,
        "Question": "The part of the data interface and control unit, that points to the source of exception generated is",
        "Options": [
            "a) Status and control words",
            "b) TAG words",
            "c) Error pointers",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The error pointers point to the source of exception (address of the instruction that generated the exception) generated."
    },
    {
        "id": 557,
        "Question": "The data bus in a floating point unit is of",
        "Options": [
            "a) 16 bits",
            "b) 32 bits",
            "c) 64 bits",
            "d) 84 bits"
        ],
        "Answer": "Answer: d\nExplanation: The data bus in a floating point unit is of 84-bits. Out of this 84-bits, the lower 68 bits are significant (mantissa) data bit, the next 16 bits are used for the exponent."
    },
    {
        "id": 558,
        "Question": "The arrangement of data that is to be shifted successively, whenever required for the execution, is done by",
        "Options": [
            "a) error pointer",
            "b) data buffer",
            "c) barrel shifter",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The barrel shifter arranges and presents the data to be shifted successively, whenever required for the execution."
    },
    {
        "id": 559,
        "Question": "The word that is used to select one of the processing options, among the provided ones is",
        "Options": [
            "a) status word",
            "b) control word",
            "c) status and control words",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The control word is used to select one of the processing options, among the ones provided by 80287."
    },
    {
        "id": 560,
        "Question": "After reset of 80287, the control bit that is initialized to zero is",
        "Options": [
            "a) masking bits",
            "b) precision control bits",
            "c) rounding control bits",
            "d) infinity control bits"
        ],
        "Answer": "Answer: d\nExplanation: The infinity control bit is initialized to zero after reset."
    },
    {
        "id": 561,
        "Question": "The bits that are modified depending upon the result of the execution of arithmetic instructions are",
        "Options": [
            "a) masking bits",
            "b) rounding control bits",
            "c) condition code bits",
            "d) error summary bits"
        ],
        "Answer": "Answer: c\nExplanation: The condition code bits are similar to the flags of a CPU. These are modified depending upon the result of the execution of arithmetic instructions."
    },
    {
        "id": 562,
        "Question": "If the stack flag is set, and condition code bit C1=1, then the stack is",
        "Options": [
            "a) full",
            "b) overflown",
            "c) underflown",
            "d) empty"
        ],
        "Answer": "Answer: b\nExplanation: If the stack flag is set, and condition code bit C1=1, then the stack has overflown."
    },
    {
        "id": 563,
        "Question": "If the stack flag is set, and condition code bit C1=0, then the stack is",
        "Options": [
            "a) full",
            "b) overflown",
            "c) underflown",
            "d) empty"
        ],
        "Answer": "Answer: c\nExplanation: If the stack flag is set, and condition code bit C1=0, then the stack has underflown."
    },
    {
        "id": 564,
        "Question": "The bits that affect the result of arithmetic operations like ADD, SUB, MUL, DIV are",
        "Options": [
            "a) condition code bits",
            "b) rounding control bits",
            "c) masking bits",
            "d) precision control bits"
        ],
        "Answer": "Answer: d\nExplanation: The precision control bits affect ADD, SUB, MUL, DIV and SQRT results."
    },
    {
        "id": 565,
        "Question": "The precision is decided by the",
        "Options": [
            "a) opcode",
            "b) extended precision format",
            "c) opcode or extended precision format",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: For other than the arithmetic instructions (like ADD, SUB, MUL, DIV and SQRT), the precision is decided by opcode or extended precision format."
    },
    {
        "id": 566,
        "Question": "If Numeric Processor Write (NPWR) active-low input pin is activated, then it enables a data transfer from",
        "Options": [
            "a) memory to processor",
            "b) 80287 to 80286",
            "c) 80286 to 80287",
            "d) 8086 to 80287"
        ],
        "Answer": "Answer: c\nExplanation: If Numeric Processor Write (NPWR) active-low input pin is activated, then it enables a data transfer from 80286 to 80287."
    },
    {
        "id": 567,
        "Question": "If Numeric Processor Read (NPRD) active-low input pin is activated, then it enables a data transfer from",
        "Options": [
            "a) memory to processor",
            "b) 80287 to 80286",
            "c) 80286 to 80287",
            "d) 8086 to 80287"
        ],
        "Answer": "Answer: b\nExplanation: If Numeric Processor Read (NPRD) active-low input pin is activated, then it enables a data transfer from 80287 to 80286."
    },
    {
        "id": 568,
        "Question": "Which of the input line(s) indicate that the CPU is performing an escape operation, and enables 80287 to execute the next instruction?",
        "Options": [
            "a) NPWR (active low) and NPRD (active low)",
            "b) NPS1 and NPS2 (active low)",
            "c) NPS1 (active low) and NPS2",
            "d) CMD0 and CMD1"
        ],
        "Answer": "Answer: c\nExplanation: The Numeric Processor select input lines, NPS1 (active low) and NPS2, indicate that the CPU is performing an escape operation, and enables 80287 to execute the next instruction."
    },
    {
        "id": 569,
        "Question": "For which pin of 80286 is the active low pin, BUSY of 80287, connected?",
        "Options": [
            "a) ERROR (active low)",
            "b) BUSY (active low)",
            "c) HLDA",
            "d) TEST (active low)"
        ],
        "Answer": "Answer: d\nExplanation: The BUSY (active low) is connected to the TEST (active low) pin of 80286."
    },
    {
        "id": 570,
        "Question": "If Clock Mode (CM) input pin is held low, then the CLK input is divided by",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: If Clock Mode (CM) input pin is held high, then the CLK input is directly used for deriving the internal timings. Else, it is divided by 2."
    },
    {
        "id": 571,
        "Question": "Which of the following pin is not involved in the interface of 80287 with 80286?",
        "Options": [
            "a) PEREQ",
            "b) ERROR#",
            "c) RESET",
            "d) CMD0 and CMD1"
        ],
        "Answer": "Answer: c\nExplanation: The 10 pins, PEREQ, PEACK#, BUSY#, ERROR#, NPRD(active low)#, NPWR(active low)#, NPS1(active low)#, NPS2#, CMD0 and CMD1."
    },
    {
        "id": 572,
        "Question": "The PEACK (active low) when activated, the pin that goes into deactivation is",
        "Options": [
            "a) PEREQ",
            "b) ERROR#",
            "c) RESET",
            "d) CMD0 and CMD1"
        ],
        "Answer": "Answer: a\nExplanation: When the data transfer is over, the CPU activates PEACK (active low)# pin, which results in deactivating the PEREQ pin by 80287."
    },
    {
        "id": 573,
        "Question": "The 80386DX is a processor that supports",
        "Options": [
            "a) 8-bit data operand",
            "b) 16-bit data operand",
            "c) 32-bit data operand",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80386DX is a 32-bit processor that supports, 8-bit/16-bit/32-bit data operands."
    },
    {
        "id": 574,
        "Question": "The 80386DX has an address bus of",
        "Options": [
            "a) 8 address lines",
            "b) 16 address lines",
            "c) 32 address lines",
            "d) 64 address lines"
        ],
        "Answer": "Answer: c\nExplanation: The 80386, with its 32-bit address bus, can address up to 4 GB of physical memory."
    },
    {
        "id": 575,
        "Question": "The number of debug registers that are available in 80386, for hardware debugging and control is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) 16"
        ],
        "Answer": "Answer: c\nExplanation: The 80386 offers a set of total eight debug registers DR0-DR7, for hardware debugging and control."
    },
    {
        "id": 576,
        "Question": "The memory management of 80386 supports",
        "Options": [
            "a) virtual memory",
            "b) paging",
            "c) four levels of protection",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The memory management section of 80386 supports the virtual memory, paging and four levels of protection, maintaining full compatibility with 80286."
    },
    {
        "id": 577,
        "Question": "The 80386 enables itself to organize the available physical memory into pages, which is known as",
        "Options": [
            "a) segmentation",
            "b) paging",
            "c) memory division",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The concept of paging which is introduced in 80386, enables it to organize the available physical memory into pages of size 4 KB each, under the segmented memory."
    },
    {
        "id": 578,
        "Question": "The 80386 consists of",
        "Options": [
            "a) on-chip address translation cache",
            "b) instruction set of predecessors with upward compatibility",
            "c) virtual memory space of 64TB",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80386 has on-chip address translation cache, and the instruction set is upward compatible with all its predecessors."
    },
    {
        "id": 579,
        "Question": "80386DX is available in a grid array package of",
        "Options": [
            "a) 64 pin",
            "b) 128 pin",
            "c) 132 pin",
            "d) 142 pin"
        ],
        "Answer": "Answer: c\nExplanation: The 80386DX is available in a 132-pin grid array package."
    },
    {
        "id": 580,
        "Question": "The operating frequency of 80386DX is",
        "Options": [
            "a) 12 MHz and 20 MHz",
            "b) 20 MHz and 33 MHz",
            "c) 32 MHz and 12 MHz",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The operating frequency of 80386DX is 20MHz and 33 MHz."
    },
    {
        "id": 581,
        "Question": "The 80386 in its protected mode, in its virtual mode of operation, can run the applications of",
        "Options": [
            "a) 8086",
            "b) 80286",
            "c) 80287",
            "d) 80387"
        ],
        "Answer": "Answer: a\nExplanation: The 80386 can run the applications under protected mode, in its virtual 8086 mode of operation."
    },
    {
        "id": 582,
        "Question": "The 80386 in protected mode, supports all software written for",
        "Options": [
            "a) 8086 and 80287",
            "b) 80286 and 80287",
            "c) 80287 and 80387",
            "d) 80286 and 8086"
        ],
        "Answer": "Answer: d\nExplanation: The 80386 in protected mode, supports all software written for 8086 and 80286 (to be executed under the control of memory management and protection abilities of 80386)."
    },
    {
        "id": 583,
        "Question": "Which of the units is not a part of the internal architecture of 80386?",
        "Options": [
            "a) central processing unit",
            "b) memory management unit",
            "c) bus interface unit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The internal architecture of 80386 is divided into three sections namely, central processing unit, memory management unit and bus interface unit."
    },
    {
        "id": 584,
        "Question": "The central processing unit has a sub-division of",
        "Options": [
            "a) memory unit and control unit",
            "b) memory unit and ALU",
            "c) execution unit and instruction unit",
            "d) execution unit and memory unit"
        ],
        "Answer": "Answer: c\nExplanation: The central processing unit is further divided into the execution unit and instruction unit."
    },
    {
        "id": 585,
        "Question": "The unit that is used for handling data, and calculates offset address is",
        "Options": [
            "a) memory management unit",
            "b) execution unit",
            "c) instruction unit",
            "d) bus interface unit"
        ],
        "Answer": "Answer: b\nExplanation: The execution unit has eight general purpose and eight special purpose registers, which are either used for handling the data or calculating the offset addresses."
    },
    {
        "id": 586,
        "Question": "The unit that decodes the opcode bytes, received from the 16-byte instruction code queue is",
        "Options": [
            "a) memory management unit",
            "b) execution unit",
            "c) instruction unit",
            "d) barrel shifter"
        ],
        "Answer": "Answer: c\nExplanation: The instruction unit decodes the opcode bytes, received from the 16-byte instruction code queue, after decoding them so as to pass it to the control section, for deriving the necessary control signals."
    },
    {
        "id": 587,
        "Question": "The unit that increases the speed of all shift and rotate operations is",
        "Options": [
            "a) memory management unit",
            "b) execution unit",
            "c) instruction unit",
            "d) barrel shifter"
        ],
        "Answer": "Answer: d\nExplanation: The barrel shifter speeds up all shift and rotate operations."
    },
    {
        "id": 588,
        "Question": "The memory management unit consists of",
        "Options": [
            "a) segmentation unit",
            "b) paging unit",
            "c) segmentation and paging units",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The memory management unit consists of a segmentation unit and a paging unit."
    },
    {
        "id": 589,
        "Question": "The segmentation unit allows",
        "Options": [
            "a) maximum size of 4GB segments",
            "b) use of segment address components",
            "c) use of offset address components",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The segmentation unit allows the use of two address components. They are: segment and offset for relocation and sharing of code and data."
    },
    {
        "id": 590,
        "Question": "The unit that organizes the physical memory, in terms of pages of 4KB size each is",
        "Options": [
            "a) segmentation unit",
            "b) execution unit",
            "c) paging unit",
            "d) instruction unit"
        ],
        "Answer": "Answer: c\nExplanation: The paging unit organizes the physical memory, in terms of pages of 4KB size each."
    },
    {
        "id": 591,
        "Question": "The paging unit works under the control of",
        "Options": [
            "a) memory management unit",
            "b) segmentation unit",
            "c) execution unit",
            "d) instruction unit"
        ],
        "Answer": "Answer: b\nExplanation: The paging unit works under the control of the segmentation unit; i.e. each segment is further divided into pages."
    },
    {
        "id": 592,
        "Question": "The unit that provides a four level protection mechanism, for system’s code and data against application program is",
        "Options": [
            "a) central processing unit",
            "b) segmentation unit",
            "c) bus interface unit",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The segmentation unit provides a four level protection mechanism, for protecting and isolating the system’s code and data, from those of the application program."
    },
    {
        "id": 593,
        "Question": "The unit that has a prioritizer to resolve the priority of the various bus requests is",
        "Options": [
            "a) bus sizing unit",
            "b) data buffer",
            "c) bus control unit",
            "d) execution unit"
        ],
        "Answer": "Answer: c\nExplanation: The bus control unit has a prioritizer to resolve the priority of the various bus requests."
    },
    {
        "id": 594,
        "Question": "The unit that interfaces the internal data bus with the system bus is",
        "Options": [
            "a) bus sizing unit",
            "b) data buffer",
            "c) bus control unit",
            "d) execution unit"
        ],
        "Answer": "Answer: b\nExplanation: The data buffer interfaces the internal data bus with the system bus."
    },
    {
        "id": 595,
        "Question": "The unit that drives the bus enable and address signals A0-A31 is",
        "Options": [
            "a) bus sizing unit",
            "b) bus driving unit",
            "c) address driver",
            "d) bus driver"
        ],
        "Answer": "Answer: c\nExplanation: The address driver drives the bus enable and address signals A0-A31."
    },
    {
        "id": 596,
        "Question": "Which of the following pin when activated, allows address pipelining?",
        "Options": [
            "a) ADS",
            "b) NA",
            "c) AP",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The Next Address (NA) input pin, if activated, allows address pipelining, during 80386 bus cycles."
    },
    {
        "id": 597,
        "Question": "The signal that is used to insert WAIT states in a bus cycle in 80386 is",
        "Options": [
            "a) HOLD",
            "b) HLDA",
            "c) READY",
            "d) PEREQ"
        ],
        "Answer": "Answer: c\nExplanation: READY signal is used to insert WAIT states in a bus cycle, and is useful for interfacing of slow devices with the CPU."
    },
    {
        "id": 598,
        "Question": "The signal which indicates to the CPU, to fetch a data word for the coprocessor is",
        "Options": [
            "a) READY",
            "b) NMI",
            "c) HLDA",
            "d) PEREQ"
        ],
        "Answer": "Answer: d\nExplanation: The Processor Extension Request (PEREQ) output signal indicates to the CPU to fetch a data word for the coprocessor."
    },
    {
        "id": 599,
        "Question": "The pipeline and dynamic bus sizing units handle",
        "Options": [
            "a) data signals",
            "b) address signals",
            "c) control signals",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The pipeline and dynamic bus sizing units handle the related control signals."
    },
    {
        "id": 600,
        "Question": "The 16-bit registers are available with their extended size of 32 bits, by adding the registers with a prefix of",
        "Options": [
            "a) X",
            "b) E",
            "c) 32",
            "d) XX"
        ],
        "Answer": "Answer: b\nExplanation: A 32 bit register, known as an extended register, is represented by the register name with a prefix of E."
    },
    {
        "id": 601,
        "Question": "In a 32-bit register, ESP, the lower 16-bits of the register can be represented by",
        "Options": [
            "a) LSP",
            "b) FSP",
            "c) SP",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Though the extended size of 32 bits are named as EBP, ESP, ESI and EDI, the names BP, SP, SI and DI represent the lower 16-bits."
    },
    {
        "id": 602,
        "Question": "Which of the following is a data segment register of 80386?",
        "Options": [
            "a) ES",
            "b) FS",
            "c) GS",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The six segment registers available in 80386 are CS, SS, DS, ES, FS and GS, out of which DS, ES, FS and GS are the four data segment registers."
    },
    {
        "id": 603,
        "Question": "The register width used by the 32-bit addressing modes is",
        "Options": [
            "a) 8 bits",
            "b) 16 bits",
            "c) 32 bits",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 32-bit addressing modes may use all the register widths, i.e. 8, 16 or 32 bits."
    },
    {
        "id": 604,
        "Question": "The flag that is additional in flag register of 80386, compared to that of 80286 is",
        "Options": [
            "a) VM flag",
            "b) RF flag",
            "c) VM and RF flag",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The VM and RF flags are added to the 80286 flag register, to derive the flag register of 80386."
    },
    {
        "id": 605,
        "Question": "The VM (virtual mode) flag is to be set, only when 80386 is in",
        "Options": [
            "a) virtual mode",
            "b) protected mode",
            "c) either virtual or protected mode",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If VM flag is set, the 80386 enters the virtual 8086 mode within the protected mode. This is to be set only when the 80386 is in protected mode."
    },
    {
        "id": 606,
        "Question": "In protected mode of 80386, the VM flag is set by using",
        "Options": [
            "a) IRET instruction",
            "b) Task switch operation",
            "c) IRET instruction or task switch operation",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The VM flag can be set using the IRET instruction or any task switch operation, only in the protected mode."
    },
    {
        "id": 607,
        "Question": "During the instruction cycle of 80386, any debug fault can be ignored if",
        "Options": [
            "a) VM flag is set",
            "b) VM flag is cleared",
            "c) RF is cleared",
            "d) RF is set"
        ],
        "Answer": "Answer: d\nExplanation: If RF (resume flag) is set, any debug fault is ignored during the instruction cycle."
    },
    {
        "id": 608,
        "Question": "The RF is not automatically reset after the execution of",
        "Options": [
            "a) IRET",
            "b) POPA",
            "c) IRET and POPF",
            "d) IRET and PUSHF"
        ],
        "Answer": "Answer: c\nExplanation: The RF is automatically reset after the execution of every instruction, except for the IRET and POPF instructions. Also, it is not cleared automatically after the successful execution of JMP, CALL and INT instructions causing a task switch."
    },
    {
        "id": 609,
        "Question": "The segment descriptor register is used to store",
        "Options": [
            "a) attributes",
            "b) limit address of segments",
            "c) base address of segments",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The segment descriptor register is used to store the descriptor information like attributes, limit and base addresses of segments."
    },
    {
        "id": 610,
        "Question": "The 32-bit control register, that is used to hold global machine status, independent of the executed task is",
        "Options": [
            "a) CR0",
            "b) CR2",
            "c) CR3",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80386 has three 32-bit control registers CR0, CR2 and CR3, to hold global machine status, independent of the executed task."
    },
    {
        "id": 611,
        "Question": "The descriptor table that the 80386 supports is",
        "Options": [
            "a) GDT (Global descriptor table)",
            "b) IDT (Interrupt descriptor table)",
            "c) LDT (Local descriptor table)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The 80386 supports four types of descriptor tables. They are, GDT, IDT, LDT and TSS."
    },
    {
        "id": 612,
        "Question": "The registers that are together, known as system address registers are",
        "Options": [
            "a) GDTR and IDTR",
            "b) IDTR and LDTR",
            "c) TR and GDTR",
            "d) LDTR and TR"
        ],
        "Answer": "Answer: a\nExplanation: The GDTR and IDTR are known as system address registers."
    },
    {
        "id": 613,
        "Question": "Which of the following is a system segment register?",
        "Options": [
            "a) GDTR",
            "b) LDTR",
            "c) IDTR",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The LDTR and TR are known as system segment registers."
    },
    {
        "id": 614,
        "Question": "The test register(s) that is provided by 80386 for page caching is",
        "Options": [
            "a) test control registers",
            "b) page cache registers",
            "c) test control and test status registers",
            "d) test control and page cache registers"
        ],
        "Answer": "Answer: c\nExplanation: Two test registers are provided by 80386 for page caching, namely test control and test status registers."
    },
    {
        "id": 615,
        "Question": "Among eight debug registers, DR0-DR7, the registers that are reserved by Intel are",
        "Options": [
            "a) DR0, DR1, DR2",
            "b) DR4, DR5",
            "c) DR1, DR4",
            "d) DR5, DR6, DR7"
        ],
        "Answer": "Answer: b\nExplanation: Out of the eight debug registers, the two registers DR4 and DR5 are Intel reserved."
    },
    {
        "id": 616,
        "Question": "The registers that are used to store four program controllable break point addresses are",
        "Options": [
            "a) DR5-DR7",
            "b) DR0-DR1",
            "c) DR6-DR7",
            "d) DR0-DR3"
        ],
        "Answer": "Answer: d\nExplanation: The initial four registers, DR0-DR3 store four program controllable break point addresses."
    },
    {
        "id": 617,
        "Question": "The register DR6 hold",
        "Options": [
            "a) break point status",
            "b) break point control information",
            "c) break point status and break point control information",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The registers DR6 and DR7 respectively hold break point status and break point control information."
    },
    {
        "id": 618,
        "Question": "The flag bits that indicate the privilege level of current IO operations are",
        "Options": [
            "a) Virtual mode flag bits",
            "b) IOPL flag bits",
            "c) Resume flag bits",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The IOPL flag bits indicate the privilege level of current IO operations."
    },
    {
        "id": 619,
        "Question": "The registers that are not available for programmers are",
        "Options": [
            "a) data and address registers",
            "b) instruction pointers",
            "c) segment descriptor registers",
            "d) flag registers"
        ],
        "Answer": "Answer: c\nExplanation: The segment descriptor registers of 80386 are not available for programmers, rather, they are internally used to store the descriptor information."
    },
    {
        "id": 620,
        "Question": "Which of the following is not a scale factor of addressing modes of 80386?",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: c\nExplanation: In case of the scaled the modes, any of the index register values can be multiplied by a valid scale factor to obtain the displacement. The valid scale factors are 1, 2, 4 and 8."
    },
    {
        "id": 621,
        "Question": "Contents of an index register are multiplied by a scale factor that may be added further to get the operand offset in",
        "Options": [
            "a) base scaled indexed mode",
            "b) scaled indexed mode",
            "c) indexed mode",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In scaled indexed mode, contents of an index register are multiplied by a scale factor that may be added further to get the operand offset."
    },
    {
        "id": 622,
        "Question": "Contents of an index register are multiplied by a scale factor and then added to base register to get the operand offset in",
        "Options": [
            "a) base scaled indexed mode",
            "b) scaled indexed mode",
            "c) indexed mode",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: In base scaled indexed mode, contents of an index register are multiplied by a scale factor and then added to base register to get the operand offset."
    },
    {
        "id": 623,
        "Question": "In the based scaled indexed mode with displacement mode, the contents of an index register are multiplied by a scale factor and are added to",
        "Options": [
            "a) base register",
            "b) displacement",
            "c) base register and displacement",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Contents of an index register are multiplied by a scale factor and the result is added to a base register and a displacement to get the offset of an operand."
    },
    {
        "id": 624,
        "Question": "Bit field can be defined as a group of",
        "Options": [
            "a) 8 bits",
            "b) 16 bits",
            "c) 32 bits",
            "d) 64 bits"
        ],
        "Answer": "Answer: a\nExplanation: Since in base scaled indexed mode, contents of an index register are multiplied by a scale factor and then added to base register to get the operand offset."
    },
    {
        "id": 625,
        "Question": "The maximum length of the string in a bit string of contiguous bits is",
        "Options": [
            "a) 2 MB",
            "b) 4 MB",
            "c) 2 GB",
            "d) 4 GB"
        ],
        "Answer": "Answer: b\nExplanation: Since in scaled indexed mode, contents of an index register are multiplied by a scale factor that may be added further to get the operand offset."
    },
    {
        "id": 626,
        "Question": "The integer word is defined as",
        "Options": [
            "a) signed 8-bit data",
            "b) unsigned 16-bit data",
            "c) signed 16-bit data",
            "d) signed 32-bit data"
        ],
        "Answer": "Answer: c\nExplanation: A group of at the most 32 bits(4 bytes) is defined as a bit field."
    },
    {
        "id": 627,
        "Question": "A 16-bit displacement that references a memory location using any of the addressing modes is",
        "Options": [
            "a) Pointer",
            "b) Character",
            "c) BCD",
            "d) Offset"
        ],
        "Answer": "Answer: d\nExplanation: Bit string is a string of contiguous bits of maximum 4Gbytes in length."
    },
    {
        "id": 628,
        "Question": "A decimal digit can be represented by",
        "Options": [
            "a) unsigned integer",
            "b) signed integer",
            "c) unpacked BCD",
            "d) packed BCD"
        ],
        "Answer": "Answer: c\nExplanation: The integer word is the signed 16-bit data."
    },
    {
        "id": 629,
        "Question": "The instructions available in the 80386 that are not available in its real address mode is",
        "Options": [
            "a) addressing techniques",
            "b) instructions for protected address mode",
            "c) instructions for interrupt handling",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: All the instructions of 80386 are available in this mode except for those designed to work with or for protected address mode."
    },
    {
        "id": 630,
        "Question": "The unit that is disabled in real address mode is",
        "Options": [
            "a) central processing unit",
            "b) memory management unit",
            "c) paging unit",
            "d) bus control unit"
        ],
        "Answer": "Answer: c\nExplanation: The paging unit is disabled in real address mode."
    },
    {
        "id": 631,
        "Question": "To form a physical memory address, appropriate segment register contents are",
        "Options": [
            "a) shifted by left by 4 positions",
            "b) added to 16-bit offset address",
            "c) operated using one of addressing modes",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To form a physical memory address, appropriate segment register contents are shifted by left by 4 positions and then added to 16-bit offset address formed using one of addressing modes, in same way as in the 80386 real address mode."
    },
    {
        "id": 632,
        "Question": "The segments in 80386 real mode are",
        "Options": [
            "a) overlapped",
            "b) non-overlapped",
            "c) either overlapped or non-overlapped",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The segments in 80386 real mode are may be overlapped or non-overlapped."
    },
    {
        "id": 633,
        "Question": "The operation that can be performed on segments in 80386 real mode is",
        "Options": [
            "a) read",
            "b) write",
            "c) execute",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The segments in 80386 real mode can be read, written or executed, i.e. no protection is available."
    },
    {
        "id": 634,
        "Question": "The selectors contain the segment’s",
        "Options": [
            "a) segment limit",
            "b) base address",
            "c) access rights byte",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In protected mode, the contents of segment registers are used as selectors to address descriptors which contain the segment limit, base address and access rights byte of the segment."
    },
    {
        "id": 635,
        "Question": "The linear address is calculated by",
        "Options": [
            "a) effective address + segment base address",
            "b) effective address – segment base address",
            "c) effective address + physical address",
            "d) effective address – physical address"
        ],
        "Answer": "Answer: a\nExplanation: The effective address(offset) is added with segment base address to calculate linear address."
    },
    {
        "id": 636,
        "Question": "If the paging unit is enabled, then it converts a linear address into",
        "Options": [
            "a) effective address",
            "b) physical address",
            "c) segment base address",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The paging unit when enabled, it converts a linear address into physical address."
    },
    {
        "id": 637,
        "Question": "If the paging unit is disabled, then the linear address is used as",
        "Options": [
            "a) effective address",
            "b) physical address",
            "c) segment base address",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The linear address is used as a physical address if the paging unit is disabled."
    },
    {
        "id": 638,
        "Question": "The paging unit is enabled only in",
        "Options": [
            "a) virtual mode",
            "b) addressing mode",
            "c) protected mode",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The paging unit is enabled only in protected mode."
    },
    {
        "id": 639,
        "Question": "For a single task in protected mode, the 80386 can address the virtual memory of",
        "Options": [
            "a) 32 GB",
            "b) 64 MB",
            "c) 32 TB",
            "d) 64 TB"
        ],
        "Answer": "Answer: d\nExplanation: In protected mode, the 80386 can address 4 GB of physical memory and 64 TB of virtual memory per task."
    },
    {
        "id": 640,
        "Question": "The bit that indicates whether the segment has been accessed by the CPU or not is",
        "Options": [
            "a) base address",
            "b) attribute bit",
            "c) present bit",
            "d) granular bit"
        ],
        "Answer": "Answer: b\nExplanation: The accessed bit or attribute bit (A) indicates whether the segment has been accessed by the CPU or not."
    },
    {
        "id": 641,
        "Question": "The TYPE field of a descriptor is used to find the",
        "Options": [
            "a) descriptor type",
            "b) segment type",
            "c) descriptor and segment type",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: The type field decides the descriptor type and hence the segment type."
    },
    {
        "id": 642,
        "Question": "If the segment descriptor bit, S=0, then the descriptor is",
        "Options": [
            "a) data segment descriptor",
            "b) code segment descriptor",
            "c) system descriptor",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: If S=0, then system descriptor. If S=1, then code or data segment descriptor."
    },
    {
        "id": 643,
        "Question": "The bit that indicates whether the segment is page addressable is",
        "Options": [
            "a) base address",
            "b) attribute bit",
            "c) present bit",
            "d) granularity bit"
        ],
        "Answer": "Answer: d\nExplanation: The granularity bit indicates whether the segment is page addressable."
    },
    {
        "id": 644,
        "Question": "If the Default operation size bit, D=1, the code segment operation size selected is",
        "Options": [
            "a) 8-bit",
            "b) 16-bit",
            "c) 32-bit",
            "d) 64-bit"
        ],
        "Answer": "Answer: c\nExplanation: If D=1, the segment selected is 32-bit operand segment, else, it is a 16-bit operand segment."
    },
    {
        "id": 645,
        "Question": "The segment descriptor contains",
        "Options": [
            "a) access rights",
            "b) limit",
            "c) base address",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The segment descriptors are 8-byte quantities containing access right or attribute bits along with the base and limit of the segments."
    },
    {
        "id": 646,
        "Question": "Which of the following is not a type of segment descriptor?",
        "Options": [
            "a) system descriptors",
            "b) local descriptors",
            "c) gate descriptors",
            "d) none"
        ],
        "Answer": "Answer: d\nExplanation: The five types of segment descriptors of 80386 are:\n1. Code or data segment descriptors\n2. System descriptors\n3. Local descriptors\n4. TSS(task state segment) descriptors\n5. Gate descriptors."
    },
    {
        "id": 647,
        "Question": "The limit field of the descriptor is of",
        "Options": [
            "a) 10 bits",
            "b) 8 bits",
            "c) 16 bits",
            "d) 20 bits"
        ],
        "Answer": "Answer: d\nExplanation: The limit field of the descriptor is of 20 bits."
    },
    {
        "id": 648,
        "Question": "The starting address of the segment in physical memory is decided by",
        "Options": [
            "a) physical memory",
            "b) segment descriptors",
            "c) operating system",
            "d) base address"
        ],
        "Answer": "Answer: c\nExplanation: The base address that marks the starting address of the segment in physical memory is decided by the operating system and is of 32 bits."
    },
    {
        "id": 649,
        "Question": "The total descriptors that the 80386 can handle is",
        "Options": [
            "a) 2K",
            "b) 8K",
            "c) 4K",
            "d) 16K"
        ],
        "Answer": "Answer: d\nExplanation: 80386 can handle total 16K descriptors and hence segments."
    },
    {
        "id": 650,
        "Question": "The advantage of pages in paging is",
        "Options": [
            "a) no logical relation with program",
            "b) no need of entire segment of task in physical memory",
            "c) reduction of memory requirement for task",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The advantage of paging scheme is that the complete segment of a task need not be in the physical memory at any time. Only a few pages of the segments, which are required currently for the execution, need to be available in the physical memory."
    },
    {
        "id": 651,
        "Question": "The size of the pages in the paging scheme is",
        "Options": [
            "a) variable",
            "b) fixed",
            "c) both variable and fixed",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The paging divides the memory into fixed size pages."
    },
    {
        "id": 652,
        "Question": "To convert linear addresses into physical addresses, the mechanism that the paging unit uses is",
        "Options": [
            "a) linear conversion mechanism",
            "b) one level table mechanism",
            "c) physical conversion mechanism",
            "d) two level table mechanism"
        ],
        "Answer": "Answer: d\nExplanation: The paging unit of 80386 uses a two level table mechanism, to convert the linear addresses provided by the segmentation unit, into physical addresses."
    },
    {
        "id": 653,
        "Question": "The control register that stores the 32-bit linear address, at which the previous page fault is detected is",
        "Options": [
            "a) CR0",
            "b) CR1",
            "c) CR2",
            "d) CR3"
        ],
        "Answer": "Answer: c\nExplanation: The control register, CR2, is used to store the 32-bit linear address, at which the previous page fault is detected."
    },
    {
        "id": 654,
        "Question": "Which of the following is not a component of paging unit?",
        "Options": [
            "a) page directory",
            "b) page descriptor base register",
            "c) page table",
            "d) page"
        ],
        "Answer": "Answer: b\nExplanation: The paging unit handles every task in terms of three components namely page directory, page table and the page itself."
    },
    {
        "id": 655,
        "Question": "The control register that is used as page directory physical base address register is",
        "Options": [
            "a) CR0",
            "b) CR1",
            "c) CR2",
            "d) CR3"
        ],
        "Answer": "Answer: d\nExplanation: The control register, CR3, is used as page directory physical base address register, to store the physical starting address of the page directory."
    },
    {
        "id": 656,
        "Question": "The bits of CR3, that are always zero are",
        "Options": [
            "a) higher 4 bits",
            "b) lower 8 bits",
            "c) higher 10 bits",
            "d) lower 12 bits"
        ],
        "Answer": "Answer: d\nExplanation: The lower 12 bits of CR3 are always zero to ensure the page size aligned with the directory."
    },
    {
        "id": 657,
        "Question": "Each directory entry in page directory is maximum of",
        "Options": [
            "a) 2 bytes",
            "b) 4 bytes",
            "c) 8 bytes",
            "d) 16 bytes"
        ],
        "Answer": "Answer: b\nExplanation: Each directory entry is of 4 bytes, thus a total of 1024 entries are allowed in a directory."
    },
    {
        "id": 658,
        "Question": "The size of each page table is of",
        "Options": [
            "a) 2 Kbytes",
            "b) 2 bytes",
            "c) 4 Kbytes",
            "d) 4 bytes"
        ],
        "Answer": "Answer: c\nExplanation: Each page table is of 4 Kbytes in size, and may contain a maximum of 1024 entries."
    },
    {
        "id": 659,
        "Question": "The dirty bit(D) is set, before which operation is carried out",
        "Options": [
            "a) write",
            "b) read",
            "c) initialization",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The dirty bit (D) is set before a write operation to the page is carried out."
    },
    {
        "id": 660,
        "Question": "The bit that is undefined for page directory entries is",
        "Options": [
            "a) P-bit",
            "b) A-bit",
            "c) D-bit",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The D-bit is undefined for page directory entries."
    },
    {
        "id": 661,
        "Question": "The bit that is used for providing protection is",
        "Options": [
            "a) User/Supervisor bit",
            "b) Read bit",
            "c) Write bit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The User/Supervisor (U/S) bit and Read/Write (R/W) bit are used to provide protection."
    },
    {
        "id": 662,
        "Question": "The storage of 32 recently accessed page table entries to optimize the time, is known as",
        "Options": [
            "a) page table",
            "b) page descriptor base register",
            "c) page table cache",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: To optimize the considerable time taken for conversion, a page table cache is provided, which stores the 32 recently accessed page table entries."
    },
    {
        "id": 663,
        "Question": "The page table cache is also known as",
        "Options": [
            "a) page table storage",
            "b) storage buffer",
            "c) translation look aside buffer",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The page table cache is also known as translation look aside buffer."
    },
    {
        "id": 664,
        "Question": "If the 80386 enters the protected mode from the real address mode, then it returns back to the real mode, by performing the operation of",
        "Options": [
            "a) read",
            "b) write",
            "c) terminate",
            "d) reset"
        ],
        "Answer": "Answer: d\nExplanation: If the 80386 enters the protected mode from the real address mode, then it cannot return back to the real mode without a reset operation."
    },
    {
        "id": 665,
        "Question": "The unit that is needed for virtual mode 80386, only to run the 8086 programs, which require more than 1 Mbyte of memory for memory management functions, is",
        "Options": [
            "a) execution unit",
            "b) central processing unit",
            "c) paging unit",
            "d) segmentation unit"
        ],
        "Answer": "Answer: c\nExplanation: Paging unit is not necessarily enabled in the virtual mode, but may be needed to run the 8086 programs, which require more than 1 Mbyte of memory, for memory management functions."
    },
    {
        "id": 666,
        "Question": "The number of pages that the paging unit allows, in the virtual mode of 80386 is",
        "Options": [
            "a) 64",
            "b) 128",
            "c) 256",
            "d) 512"
        ],
        "Answer": "Answer: c\nExplanation: In virtual mode, the paging unit allows only 256 pages, each of 4Kbytes size. Each of the pages may be located anywhere within the maximum 4Gbytes physical memory."
    },
    {
        "id": 667,
        "Question": "The privilege level at which the real mode programs are executed is",
        "Options": [
            "a) level 0",
            "b) level 1",
            "c) level 2",
            "d) level 3"
        ],
        "Answer": "Answer: a\nExplanation: The real mode programs are executed at the highest privilege level i.e. level 0."
    },
    {
        "id": 668,
        "Question": "The instructions to prepare the processor for protected mode can only be executed at the privilege level",
        "Options": [
            "a) level 0",
            "b) level 1",
            "c) level 2",
            "d) level 3"
        ],
        "Answer": "Answer: a\nExplanation: The instructions to prepare the processor for protected mode can only be executed at the level 0."
    },
    {
        "id": 669,
        "Question": "The instruction that is unable to set or read the VM (Virtual Mode) bit is",
        "Options": [
            "a) PUSHF",
            "b) IRET",
            "c) POPF",
            "d) PUSHF and POPF"
        ],
        "Answer": "Answer: d\nExplanation: The PUSHF and POPF instructions are unable to set or read the VM (Virtual Mode) bit, as they do not access it. The virtual mode can be entered by using IRET instruction."
    },
    {
        "id": 670,
        "Question": "If the CKM pin of 80387 is high, then 80387 is operated in",
        "Options": [
            "a) real address mode",
            "b) protected mode",
            "c) synchronous mode",
            "d) asynchronous mode"
        ],
        "Answer": "Answer: c\nExplanation: If the CKM pin of 80387 is high, then 80387 is operated in synchronous mode. If it is low, then 80387 is operated in asynchronous mode."
    },
    {
        "id": 671,
        "Question": "The unit that handles the data and directs it to either FIFO or instruction decoder depending on the bus control logic directive is",
        "Options": [
            "a) paging unit",
            "b) central processing unit",
            "c) segmentation unit",
            "d) data interface and control unit"
        ],
        "Answer": "Answer: d\nExplanation: The data interface and control unit handles the data, and direct it to either FIFO or instruction decoder, depending on the bus control logic directive."
    },
    {
        "id": 672,
        "Question": "The unit that is responsible for carrying out all the floating point calculations, allotted to the coprocessor by 80386, is",
        "Options": [
            "a) Central processing unit",
            "b) ALU",
            "c) FPU",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The FPU (floating point unit) is responsible for carrying out all the floating point calculations, allotted to the coprocessor by 80386."
    },
    {
        "id": 673,
        "Question": "The sizes of instruction and data pointer registers of 80387 respectively are",
        "Options": [
            "a) 32-bit, 32-bit",
            "b) 48-bit, 32-bit",
            "c) 32-bit, 48-bit",
            "d) 48-bit, 48-bit"
        ],
        "Answer": "Answer: d\nExplanation: 80387 consists of two 48-bit registers, known as instruction and data pointer registers."
    },
    {
        "id": 674,
        "Question": "To inform 80387 that the CPU wants to communicate with NPS1, the NPS1 line is directly connected to",
        "Options": [
            "a) A31",
            "b) A30",
            "c) M/IO",
            "d) D31"
        ],
        "Answer": "Answer: c\nExplanation: The NPS1 and NPS2 lines are directly connected with M/IO and A31 respectively, to inform 80387 that the CPU wants to communicate with it (NPS1), and it is using one of the reserved I/O addresses for 80387 (NPS2)."
    },
    {
        "id": 675,
        "Question": "Which of the following is not a newly added instruction of 80386, that are not present in 80286?",
        "Options": [
            "a) bit scan instructions",
            "b) bit test instructions",
            "c) shift double instructions",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The newly added instructions of 80386 are categorized into\n1. bit scan instructions\n2. bit test instructions\n3. conditional set byte instructions\n4. shift double instructions\n5. control transfer via gates instructions."
    },
    {
        "id": 676,
        "Question": "The BSF (bit scan forward) instruction scans the operand in the order",
        "Options": [
            "a) from left to right",
            "b) from right to left",
            "c) from upper nibble",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The BSF (bit scan forward) instruction scans the operand from right to left."
    },
    {
        "id": 677,
        "Question": "The BSR (bit scan reverse) instruction scans the operand in the order",
        "Options": [
            "a) from left to right",
            "b) from right to left",
            "c) from upper nibble",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The BSR (bit scan reverse) instruction scans the operand from left to right."
    },
    {
        "id": 678,
        "Question": "If a ‘1’ is encountered when an operand is scanned by BSF, then",
        "Options": [
            "a) zero flag is reset",
            "b) zero flag is set",
            "c) VM flag is set",
            "d) RF flag is reset"
        ],
        "Answer": "Answer: b\nExplanation: The BSF instruction scans the operand from right to left. If a ‘1’ is encountered during the scan, zero flag is set, and the bit position of ‘1’ is stored into the destination operand."
    },
    {
        "id": 679,
        "Question": "If a ‘1’ is not encountered when an operand is scanned by BSR, then",
        "Options": [
            "a) zero flag is reset",
            "b) zero flag is set",
            "c) VM flag is reset",
            "d) RF flag is set"
        ],
        "Answer": "Answer: a\nExplanation: The BSR instruction scans the operand from left to right. If a ‘1’ is not encountered during the scan, zero flag is reset whether the scan is BSF or BSR."
    },
    {
        "id": 680,
        "Question": "Which of the following is not a bit test instruction?",
        "Options": [
            "a) BTC",
            "b) BTS",
            "c) BSF",
            "d) BTR"
        ],
        "Answer": "Answer: c\nExplanation: The instruction, BSF, is a bit scan instruction. The four bit test instructions are:\nBT (Test a Bit), BTC (Test a Bit and Complement), BTR (Test and Reset a Bit) and BTS (Test and Set a bit)."
    },
    {
        "id": 681,
        "Question": "In case of BT instruction, if the bit position in the destination operand specified by the source operand, is ‘1’, then",
        "Options": [
            "a) zero flag is reset",
            "b) carry flag is set",
            "c) VM flag is set",
            "d) RF flag is reset"
        ],
        "Answer": "Answer: b\nExplanation: In case of BT instruction, if the bit position in the destination operand specified by the source operand, is ‘1’, the carry flag is set, otherwise it is cleared."
    },
    {
        "id": 682,
        "Question": "Which of the following is not a conditional set byte instruction?",
        "Options": [
            "a) SETNP",
            "b) SETO",
            "c) SETNAE",
            "d) SHRD"
        ],
        "Answer": "Answer: d\nExplanation: The SHRD (Shift Right Double) is a shift double instruction."
    },
    {
        "id": 683,
        "Question": "The instruction that shifts the specified number of bits in the instruction, from the upper side of the source operand into the lower side of the destination operand is",
        "Options": [
            "a) SHRD",
            "b) SHLD",
            "c) SETNS",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The SHLD instruction shifts the specified number of bits in the instruction, from the upper side (i.e. MSB) of the source operand into the lower side (i.e. LSB) of the destination operand."
    },
    {
        "id": 684,
        "Question": "The instruction that shifts 8 LSB bits of ECX into the MSB positions of EAX, one by one starting from LSB of ECX is",
        "Options": [
            "a) SHLD ECX,EAX,8",
            "b) SHLD EAX,ECX,8",
            "c) SHRD ECX,EAX,8",
            "d) SHRD EAX,ECX,8"
        ],
        "Answer": "Answer: d\nExplanation: The SHRD instruction shifts the specified number of bits in the instruction, from the lower side (i.e. LSB) of the source operand into the upper side (i.e. MSB) of the destination operand."
    },
    {
        "id": 685,
        "Question": "The first processor with an inbuilt floating point unit is",
        "Options": [
            "a) 80386",
            "b) 80486",
            "c) 80286",
            "d) 8086"
        ],
        "Answer": "Answer: b\nExplanation: The 32-bit CPU 80486 from Intel is the first processor with an inbuilt floating point unit. 80486DX is the first CPU with an on chip floating point unit."
    },
    {
        "id": 686,
        "Question": "Which of the following signal is handled by bus control and request sequencer?",
        "Options": [
            "a) ADS#",
            "b) PWT",
            "c) RDY#",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The bus control and request sequencer handle the signals like ADS#, PWT, RDY#, W/R#, INTR, NMI, LOCK#, HOLD, HLDA, RESET and M/IO# which basically controls the bus access and operations."
    },
    {
        "id": 687,
        "Question": "The unit that subjects the processor operation to boundary scan tests is",
        "Options": [
            "a) parity generation and control unit",
            "b) prefetcher unit",
            "c) boundary scan and control unit",
            "d) segmentation unit"
        ],
        "Answer": "Answer: c\nExplanation: The boundary scan and control unit subjects the processor operation to boundary scan tests to ensure the correct operation of various components of the mother board."
    },
    {
        "id": 688,
        "Question": "The management of the virtual memory of the system and adequate protection to data or codes in the physical memory is provided by",
        "Options": [
            "a) segmentation unit",
            "b) paging unit",
            "c) attribute PLA",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The segmentation unit, paging unit, attribute PLA, descriptor registers, translation look aside buffer and limit work together to manage the virtual memory of the system and provide the adequate protection to the codes or data in the physical memory."
    },
    {
        "id": 689,
        "Question": "The flag that is added to 80486 in additional to the flags similar to 80386 is",
        "Options": [
            "a) alignment check flag",
            "b) parity check flag",
            "c) conditional flag",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The register set of 80486 is similar to that of the 80386 but only a flag called as alignment check flag is added to the flag register of 80386 to obtain the flag register of 80486."
    },
    {
        "id": 690,
        "Question": "The major limitation of 80386-387 system is",
        "Options": [
            "a) low speed",
            "b) 80386 sends data using an I/O handshake technique",
            "c) 80386 returns to real mode by reset operation",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The major limitation of 80386-387 system is that the 80386 sends instruction or data to 80387 using an I/O handshake technique. To perform this handshaking and to carry additional house keeping tasks, 80386 requires 15 clock cycles or more."
    },
    {
        "id": 691,
        "Question": "The datatype that the 80486 doesnot support is",
        "Options": [
            "a) Signed and unsigned",
            "b) ASCII",
            "c) Floating point",
            "d) None"
        ],
        "Answer": "Answer: d\nExplanation: The datatypes that 80486 supports are\n1. Signed\n2. Unsigned\n3. Floating point\n4. BCD\n5. String\n6. ASCII."
    },
    {
        "id": 692,
        "Question": "In Little Endian data format, the data is stored as",
        "Options": [
            "a) MSB is stored at lower memory address and LSB at higher memory address",
            "b) LSB is stored at lower memory address and MSB at higher memory address",
            "c) MSB is stored at general purpose registers",
            "d) LSB is stored at general purpose registers"
        ],
        "Answer": "Answer: b\nExplanation: In Little Endian data format, for a data of size bigger than 1 byte, the LSB is stored at lower memory address and MSB at higher memory address."
    },
    {
        "id": 693,
        "Question": "The on-chip cache is used for storing",
        "Options": [
            "a) addresses of data",
            "b) opcodes and data",
            "c) data and their addresses",
            "d) opcodes and their addresses"
        ],
        "Answer": "Answer: b\nExplanation: The unique feature of 80486 that is not available in 80386 is that the on-chip is used for storing opcodes and data."
    },
    {
        "id": 694,
        "Question": "The on-chip cache is controlled by",
        "Options": [
            "a) Cache disable(CD)",
            "b) No write through(NW)",
            "c) Cache disable and No write through",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Cache disable(CD) and No write through(NW) bits of control register CR0. To completely disable cache, the CD and NW bits must be 11."
    },
    {
        "id": 695,
        "Question": "The on-chip cache can be flushed using external hardware using",
        "Options": [
            "a) FLUSH pin",
            "b) TERMINATE pin",
            "c) FLOW pin",
            "d) Pin FLUSH# or using software"
        ],
        "Answer": "Answer: d\nExplanation: The on-chip cache can be flushed using external hardware using pin FLUSH# or using the software. The flushing operation clears all the valid bits for all the cache lines."
    },
    {
        "id": 696,
        "Question": "The salient feature of Pentium is",
        "Options": [
            "a) superscalar architecture",
            "b) superpipelined architecture",
            "c) superscalar and superpipelined architecture",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The salient feature of Pentium is its superscalar, superpipelined architecture."
    },
    {
        "id": 697,
        "Question": "The number of stages of the integer pipeline, U, of Pentium is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 3",
            "d) 6"
        ],
        "Answer": "Answer: b\nExplanation: The Pentium has two integer pipelines, U and V, where each one is a 4-stage pipeline."
    },
    {
        "id": 698,
        "Question": "Which of the following is a cache of Pentium?",
        "Options": [
            "a) data cache",
            "b) data cache and instruction cache",
            "c) instruction cache",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The Pentium has two separate caches. They are data cache and instruction cache."
    },
    {
        "id": 699,
        "Question": "The speed of integer arithmetic of Pentium is increased to a large extent by",
        "Options": [
            "a) on-chip floating point unit",
            "b) superscalar architecture",
            "c) 4-stage pipelines",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The Pentium has two integer pipelines, U and V, where each one is a 4-stage pipeline. This enhances the speed of integer arithmetic of Pentium to a large extent."
    },
    {
        "id": 700,
        "Question": "For enhancement of processor performance, beyond one instruction per cycle, the computer architects employ the technique of",
        "Options": [
            "a) super pipelined technique",
            "b) multiple instruction issue",
            "c) super pipelined technique and multiple instruction issue",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation:  For enhancement of processor performance, beyond one instruction per cycle, the computer architects employ the technique of multiple instruction issue."
    },
    {
        "id": 701,
        "Question": "Which of the following is a class of architecture of MII (multiple instruction issue)?",
        "Options": [
            "a) super pipelined architecture",
            "b) multiple instruction issue",
            "c) very small instruction word architecture",
            "d) super scalar architecture"
        ],
        "Answer": "Answer: d\nExplanation: The MII architecture may again be classified into two categories:\n1. Very long instruction word architecture\n2. Superscalar architecture."
    },
    {
        "id": 702,
        "Question": "The compiler reorders the sequential stream of code that is coming from memory into a fixed size instruction group in",
        "Options": [
            "a) super pipelined architecture",
            "b) multiple instruction issue",
            "c) very long instruction word architecture",
            "d) super scalar architecture"
        ],
        "Answer": "Answer: c\nExplanation: In VLIW processors, the compiler reorders the sequential stream of code that is coming from memory into a fixed size instruction group, and issues them in parallel for execution."
    },
    {
        "id": 703,
        "Question": "The architecture in which the hardware decides which instructions are to be issued concurrently at run time is",
        "Options": [
            "a) super pipelined architecture",
            "b) multiple instruction issue",
            "c) very long instruction word architecture",
            "d) superscalar architecture"
        ],
        "Answer": "Answer: d\nExplanation: In the superscalar architecture, the hardware decides which instructions are to be issued concurrently at run time."
    },
    {
        "id": 704,
        "Question": "The CPU has to wait until the execution stage to determine whether the condition is met in",
        "Options": [
            "a) unconditional branch",
            "b) conditional branch",
            "c) pipelined execution branch",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: In conditional branch, the CPU has to wait until the execution stage to determine whether the condition is met or not. When the condition satisfies, a branch is to be taken."
    },
    {
        "id": 705,
        "Question": "The memory device that holds branch target addresses for previously executed branches is",
        "Options": [
            "a) Tristate buffer",
            "b) RAM",
            "c) ROM",
            "d) Branch target buffer"
        ],
        "Answer": "Answer: d\nExplanation: The branch target buffer in Pentium CPU holds branch target addresses for previously executed branches."
    },
    {
        "id": 706,
        "Question": "The branch target buffer is",
        "Options": [
            "a) four-way set-associative memory",
            "b) has branch instruction address",
            "c) has destination address",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The branch target buffer is a four-way set-associative memory. Whenever a branch is taken, the CPU enters the branch instruction address, and also the destination address in the branch target buffer."
    },
    {
        "id": 707,
        "Question": "The stage in which the CPU fetches the instructions from the instruction cache in superscalar organization is",
        "Options": [
            "a) Prefetch stage",
            "b) D1 (first decode) stage",
            "c) D2 (second decode) stage",
            "d) Final stage"
        ],
        "Answer": "Answer: a\nExplanation: In the prefetch stage of pipeline, the CPU fetches the instructions from the instruction cache, which stores the instructions to be executed. In this stage, CPU also aligns the codes appropriately."
    },
    {
        "id": 708,
        "Question": "The CPU decodes the instructions and generates control words in",
        "Options": [
            "a) Prefetch stage",
            "b) D1 (first decode) stage",
            "c) D2 (second decode) stage",
            "d) Final stage"
        ],
        "Answer": "Answer: b\nExplanation: In D1 stage, the CPU decodes the instructions and generates control words. For simple RISC instructions, only single control word is enough for starting the execution."
    },
    {
        "id": 709,
        "Question": "The fifth stage of pipeline is also known as",
        "Options": [
            "a) read back stage",
            "b) read forward stage",
            "c) write back stage",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The fifth stage or final stage of pipeline is also known as “Write back (WB) stage”."
    },
    {
        "id": 710,
        "Question": "In the execution stage the function performed is",
        "Options": [
            "a) CPU accesses data cache",
            "b) executes arithmetic/logic computations",
            "c) executes floating point operations in execution unit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In the execution stage, known as E-stage, the CPU accesses data cache, executes arithmetic/logic computations, and floating point operations in execution unit."
    },
    {
        "id": 711,
        "Question": "The stage in which the CPU generates an address for data memory references in this stage is",
        "Options": [
            "a) prefetch stage",
            "b) D1 (first decode) stage",
            "c) D2 (second decode) stage",
            "d) execution stage"
        ],
        "Answer": "Answer: c\nExplanation: In the D2 (second decode) stage, CPU generates an address for data memory references in this stage. This stage is required where the control word from D1 stage is again decoded for final execution."
    },
    {
        "id": 712,
        "Question": "The feature of separated caches is",
        "Options": [
            "a) supports the superscalar organization",
            "b) high bandwidth",
            "c) low hit ratio",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The separated caches have low hit ratio compared to a unified cache, but have the advantage of supporting the superscalar organization and high bandwidth."
    },
    {
        "id": 713,
        "Question": "In the operand fetch stage, the FPU (Floating Point Unit) fetches the operands from",
        "Options": [
            "a) floating point unit",
            "b) instruction cache",
            "c) floating point register file or data cache",
            "d) floating point register file or instruction cache"
        ],
        "Answer": "Answer: c\nExplanation: In the operand fetch stage, the FPU (Floating Point Unit) fetches the operands from either floating point register file or data cache."
    },
    {
        "id": 714,
        "Question": "The FPU (Floating Point Unit) writes the results to the floating point register file in",
        "Options": [
            "a) X1 execution state",
            "b) X2 execution state",
            "c) write back stage",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In the two execution stages of X1 and X2, the floating point unit reads the data from the data cache and executes the floating point computation. In the “write back stage” of pipeline, the FPU (Floating Point Unit) writes the results to the floating point register file."
    },
    {
        "id": 715,
        "Question": "The floating point multiplier segment performs floating point multiplication in",
        "Options": [
            "a) single precision",
            "b) double precision",
            "c) extended precision",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The floating point multiplier segment performs floating point multiplication in single precision, double precision and extended precision."
    },
    {
        "id": 716,
        "Question": "The instruction or segment that executes the floating point square root instructions is",
        "Options": [
            "a) floating point square root segment",
            "b) floating point division and square root segment",
            "c) floating point divider segment",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The floating point divider segment executes the floating point division and square root instructions."
    },
    {
        "id": 717,
        "Question": "The floating point rounder segment performs rounding off operation at",
        "Options": [
            "a) after write back stage",
            "b) before write back stage",
            "c) before arithmetic operations",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The results of floating point addition or division process may be required to be rounded off, before write back stage to the floating point registers."
    },
    {
        "id": 718,
        "Question": "Which of the following is a floating point exception that is generated in case of integer arithmetic?",
        "Options": [
            "a) divide by zero",
            "b) overflow",
            "c) denormal operand",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In the case of integer arithmetic, the possible floating point exceptions in Pentium are:\n1. divide by zero\n2. overflow\n3. denormal operand\n4. underflow\n5. invalid operation."
    },
    {
        "id": 719,
        "Question": "The mechanism that determines whether a floating point operation will be executed without creating any exception is",
        "Options": [
            "a) Multiple Instruction Issue",
            "b) Multiple Exception Issue",
            "c) Safe Instruction Recognition",
            "d) Safe Exception Recognition"
        ],
        "Answer": "Answer: c\nExplanation: A mechanism known as Safe Exception Recognition (SER) had been employed in Pentium which determines whether a floating point operation will be executed without creating any exception."
    },
    {
        "id": 720,
        "Question": "Which of the following is not a transcendental instruction?",
        "Options": [
            "a) FSIN",
            "b) FCOS",
            "c) FMUL",
            "d) FPTAN"
        ],
        "Answer": "Answer: c\nExplanation: The FMUL instruction is a float point multiplication, which is not a transcendental instruction."
    },
    {
        "id": 721,
        "Question": "The transcendental instruction that supports computation of sine and cosine is",
        "Options": [
            "a) FCOSSIN",
            "b) FSNE",
            "c) FSINFCOS",
            "d) FSINCOS"
        ],
        "Answer": "Answer: d\nExplanation: The instruction, FSINCOS, supports to compute sine and cosine."
    },
    {
        "id": 722,
        "Question": "The instruction that computes tan(x) is",
        "Options": [
            "a) FTAN",
            "b) FTNGNT",
            "c) FPTAN",
            "d) FXTAN"
        ],
        "Answer": "Answer: c\nExplanation: The instruction, FPTAN, computes tan(x)."
    },
    {
        "id": 723,
        "Question": "The instruction that computes arctan(x) is",
        "Options": [
            "a) FTAN",
            "b) FACTN",
            "c) FARCTAN",
            "d) FPATAN"
        ],
        "Answer": "Answer: d\nExplanation: The instruction, FPATAN, computes arctan(x) which is arc tangent of x."
    },
    {
        "id": 724,
        "Question": "The instruction, F2XMI, is used to compute",
        "Options": [
            "a) 2X",
            "b) 2X-1",
            "c) 2X+1",
            "d) 2X+2"
        ],
        "Answer": "Answer: b\nExplanation: The instruction, F2XMI, is used to compute 2X-1."
    },
    {
        "id": 725,
        "Question": "The instruction, FYL2XP, supports to compute the expression",
        "Options": [
            "a) Y*logX",
            "b) Y*log2X",
            "c) Y*log(2X+1)",
            "d) Y*log2(X+1)"
        ],
        "Answer": "Answer: d\nExplanation: The instruction, FYL2XP, supports to compute the expression Y*log2(X+1)."
    },
    {
        "id": 726,
        "Question": "The size of a general purpose floating point register of floating point unit is",
        "Options": [
            "a) 4 bytes",
            "b) 40 bytes",
            "c) 8 bytes",
            "d) 80 bits"
        ],
        "Answer": "Answer: d\nExplanation: There are eight general purpose floating point registers in the floating point unit. Each of these eight registers are of 80-bits width."
    },
    {
        "id": 727,
        "Question": "For floating point operations, the bits used by mantissa in a floating point register is",
        "Options": [
            "a) 32",
            "b) 64",
            "c) 72",
            "d) 79"
        ],
        "Answer": "Answer: b\nExplanation: For floating point operations, 64 bits are used for the mantissa, and the rest 16 bits for exponent."
    },
    {
        "id": 728,
        "Question": "The multimedia applications mainly require the architecture of",
        "Options": [
            "a) single instruction stream single data stream",
            "b) multiple instruction stream single data stream",
            "c) single instruction stream multiple data stream",
            "d) multiple instruction stream multiple data stream"
        ],
        "Answer": "Answer: c\nExplanation: Most of the multimedia applications mainly require the architecture of single instruction stream multiple data stream."
    },
    {
        "id": 729,
        "Question": "The size of each MMX (Multimedia Extension) register is",
        "Options": [
            "a) 32 bits",
            "b) 64 bits",
            "c) 128 bits",
            "d) 256 bits"
        ],
        "Answer": "Answer: b\nExplanation: The MMX registers use only the 64-bit mantissa portion of the general purpose floating point registers, to store MMX operands. Thus, the MMX programmers virtually get eight new MMX registers, each of 64 bits."
    },
    {
        "id": 730,
        "Question": "After a sequence of MMX instructions is executed, the MMX registers should be cleared by an instruction,",
        "Options": [
            "a) CLEAR",
            "b) RESET",
            "c) EMM",
            "d) EMMS"
        ],
        "Answer": "Answer: d\nExplanation: After a sequence of MMX instructions is executed, the MMX registers should be cleared by an instruction, EMMS, which implies Empty the MMX Stack."
    },
    {
        "id": 731,
        "Question": "The number of pixels that can be manipulated in a single register by the CPU using MMX architecture is",
        "Options": [
            "a) 4",
            "b) 6",
            "c) 8",
            "d) 10"
        ],
        "Answer": "Answer: c\nExplanation: Any CPU can manipulate only one pixel at a time. But by using MMX architecture, we can manipulate eight such pixels, packed in a single 64-bit register."
    },
    {
        "id": 732,
        "Question": "After executing the floating point instructions, the floating point registers should be cleared by an instruction,",
        "Options": [
            "a) CLEAR",
            "b) EFPR",
            "c) EMMF",
            "d) EMMS"
        ],
        "Answer": "Answer: d\nExplanation: After executing the floating point instructions, the floating point registers should be cleared by an instruction, EMMS."
    },
    {
        "id": 733,
        "Question": "In the data type, packed byte, the number of bytes that can be packed into one 64-bit quantity is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 8",
            "d) 16"
        ],
        "Answer": "Answer: c\nExplanation: In packed byte data type, eight bytes can be packed into one 64-bit quantity."
    },
    {
        "id": 734,
        "Question": "Four words can be packed into 64-bit by using the data type,",
        "Options": [
            "a) unpacked word",
            "b) packed word",
            "c) packed doubled word",
            "d) one quad word"
        ],
        "Answer": "Answer: b\nExplanation: By using the packed word data type, four words can be packed into 64-bits."
    },
    {
        "id": 735,
        "Question": "The number of double words that can be packed into 64-bit register using packed double word is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: Using packed double word, two double words can be packed into 64-bit."
    },
    {
        "id": 736,
        "Question": "The data type, “one quad word” packs __________ into 64-bit.",
        "Options": [
            "a) two 32-bit quantities",
            "b) four 16-bit words",
            "c) one 32-bit and two 16-bit quantities",
            "d) one single 64-bit quantity"
        ],
        "Answer": "Answer: d\nExplanation: The data type, “one quad word” packs one single 64-bit quantity into 64-bit register."
    },
    {
        "id": 737,
        "Question": "If the result of an operation is overflowed(exceeded than 16 bits) or underflowed then, only the lower 16-bits of the result are stored in the register and this effect is known as",
        "Options": [
            "a) overflow/underflow effect",
            "b) wrap-around effect",
            "c) exceeding memory effect",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: If the result of an operation is overflowed (exceeded than 16 bits) or underflowed then, only the lower 16-bits of the result are stored in the register, and this effect is known as wrap-around effect."
    },
    {
        "id": 738,
        "Question": "In a multitasking operating system environment, each task should return to its own processor state which is",
        "Options": [
            "a) contents of integer registers",
            "b) contents of floating point registers",
            "c) contents of MMX registers",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In a multitasking operating system environment, each task should return to its own processor state, which should be saved when the task switching occurs. The processor state here means the contents of the registers, both integer and floating point or MMX register."
    },
    {
        "id": 739,
        "Question": "Which of the following exception generated by MMX is the same type of memory access exception as the X86 instructions?",
        "Options": [
            "a) page fault",
            "b) segment not present",
            "c) limit violation",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The MMX instruction set generates the same type of memory access exception as the X86 instructions namely; page fault, segment does not present and limit violation."
    },
    {
        "id": 740,
        "Question": "When an MMX instruction is getting executed, the floating-point tag word is marked",
        "Options": [
            "a) 11",
            "b) 10",
            "c) 00",
            "d) 01"
        ],
        "Answer": "Answer: c\nExplanation: When an MMX instruction is getting executed, the floating-point tag word is marked valid i.e. 00."
    },
    {
        "id": 741,
        "Question": "In a preemptive multitasking O.S., the saving and restoring of FP and MMX states are performed by",
        "Options": [
            "a) Control unit",
            "b) O.S.",
            "c) MMX instructions",
            "d) MMX registers"
        ],
        "Answer": "Answer: b\nExplanation: In a preemptive multitasking O.S., the application does not know when it is preemptied. It is the job of the O.S. to save and restore the FP and MMX states, when performing a context switch. Thus the user need not save or restore the state."
    },
    {
        "id": 742,
        "Question": "The instruction of MMX that is essential when a floating-point routine calls an MMX routine or viceversa is",
        "Options": [
            "a) MOV",
            "b) PADD",
            "c) EMMS",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The EMMS instruction is imperative when a floating point routine calls an MMX routine or vice-versa. If we do not use EMMS at the end of MMX routine, subsequent floating-point instructions will produce erratic results."
    },
    {
        "id": 743,
        "Question": "Pentium III is used in computers which run on the operating system of",
        "Options": [
            "a) windows NT",
            "b) windows 98",
            "c) unix",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Pentium III is the best option to use in computers from high performance desktop to workstations and servers, running on operating systems like Windows NT, Windows 98 and UNIX."
    },
    {
        "id": 744,
        "Question": "The architecture of CPU of Pentium III is suitable for",
        "Options": [
            "a) multimedia",
            "b) image processing",
            "c) speech processing",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The architecture of CPU of Pentium III is suitable for applications like imaging, image processing, speech processing, multimedia and internet applications."
    },
    {
        "id": 745,
        "Question": "The Pentium III has the operating frequencies as",
        "Options": [
            "a) 300MHz,350MHz,400MHz",
            "b) 400MHz,450MHz,500MHz",
            "c) 350MHz,400MHz,450MHz",
            "d) 450MHz,500MHz,550MHz"
        ],
        "Answer": "Answer: d\nExplanation: The Pentium III has three versions operating at frequencies, 450MHz, 500MHz and 550MHz, which are all commercially available."
    },
    {
        "id": 746,
        "Question": "The Pentium III consists of",
        "Options": [
            "a) dual independent bus architecture",
            "b) 512 Kbyte cache",
            "c) eight 64-wide Intel MMX registers",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The Pentium III has dual independent bus architecture that increases the bandwidth. It has a 512 Kbyte unified, non-blocking level2 cache and eight 64-wide Intel MMX registers."
    },
    {
        "id": 747,
        "Question": "The additional instructions that are designed especially for performing multimedia tasks are known as",
        "Options": [
            "a) additional MMX instructions",
            "b) multimedia MMX instructions",
            "c) enhanced MMX instructions",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The MMX technology adds 57 new instructions to the instruction set of processors. These instructions are known as enhanced MMX instructions and are designed specifically for performing multimedia tasks."
    },
    {
        "id": 748,
        "Question": "The MMX instruction, EMMS consists of __________ on which it operates.",
        "Options": [
            "a) source operand",
            "b) destination operand",
            "c) source and destination operand",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The instruction, EMMS, does not have any operand."
    },
    {
        "id": 749,
        "Question": "In all the MMX instructions, the destination operand resides in",
        "Options": [
            "a) Memory",
            "b) RAM",
            "c) Either in an MMX register or in memory",
            "d) MMX register"
        ],
        "Answer": "Answer: d\nExplanation: In all the MMX instructions, the source operand is found either in an MMX register or in memory, and the destination operand resides in MMX register."
    },
    {
        "id": 750,
        "Question": "For the MMX instructions, the prefix, P, is used to represent the mode of",
        "Options": [
            "a) real addressing mode",
            "b) virtual mode",
            "c) packed mode",
            "d) programmable mode"
        ],
        "Answer": "Answer: c\nExplanation: In the MMX instructions, if the operands are in the packed mode, the prefix, P, is used to indicate packed data."
    },
    {
        "id": 751,
        "Question": "For the MMX instructions, the suffix, S, is used to represent",
        "Options": [
            "a) status",
            "b) saturation",
            "c) signed saturation",
            "d) unsigned saturation"
        ],
        "Answer": "Answer: c\nExplanation: For the MMX instructions, the suffix “S” indicates signed saturation, and “US” indicates unsigned saturation, while executing arithmetic computation in saturation mode."
    },
    {
        "id": 752,
        "Question": "The instruction that is used for quadword is",
        "Options": [
            "a) PADD",
            "b) PCMPEQ",
            "c) PAND",
            "d) None of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The instructions, PADD, PCMPEQ and PAND are used for packed byte, word and double word."
    },
    {
        "id": 753,
        "Question": "The instruction, PSUBB, performs subtraction in",
        "Options": [
            "a) packed word",
            "b) packed byte",
            "c) packed double word",
            "d) unpacked word"
        ],
        "Answer": "Answer: b\nExplanation: The instruction, PSUBB, performs subtraction in a packed byte."
    },
    {
        "id": 754,
        "Question": "The instruction, PCMPGT, is used to compare two data types and check",
        "Options": [
            "a) equal to condition",
            "b) less than condition",
            "c) greater than condition",
            "d) equal to and greater than condition"
        ],
        "Answer": "Answer: c\nExplanation: The instruction, PCMPGT, compares to check the greater than condition in packed bytes, packed words and packed double words."
    },
    {
        "id": 755,
        "Question": "The instruction that is not operated on quad word is",
        "Options": [
            "a) MOV",
            "b) PSLL",
            "c) PSRA",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The instruction, PSRA, performs arithmetic shift, right in a single cycle. It supports only the shifting of packed word and double word data types."
    },
    {
        "id": 756,
        "Question": "When the instruction, PMULLW, is performed, then the lower order 16-bits of the 32 bit products are stored in",
        "Options": [
            "a) source operand",
            "b) destination operand",
            "c) no storage of lower order",
            "d) either source or destination"
        ],
        "Answer": "Answer: b\nExplanation: In the instruction, PMULLW, four 16 X 16 multiplications are performed, and the lower order 16 bits of the 32-bit products are stored in destination."
    },
    {
        "id": 757,
        "Question": "When the instruction, PMULHW, is performed, then the higher order 16-bits of the 32 bit products are stored in",
        "Options": [
            "a) source operand",
            "b) destination operand",
            "c) no storage of lower order",
            "d) either source or destination"
        ],
        "Answer": "Answer: b\nExplanation: In the instruction, PMULHW, four 16 X 16 multiplications are performed, and the higher order 16 bits of the 32-bit products are stored in destination."
    },
    {
        "id": 758,
        "Question": "The instruction in which both multiplication and addition are performed is",
        "Options": [
            "a) PAND",
            "b) PMULHW",
            "c) PADD",
            "d) PMADDWD"
        ],
        "Answer": "Answer: d\nExplanation: PMADDWD is an important multimedia instruction, which multiplies the four signed words of the destination operand, with four signed words of source operand. This results in 32-bit double words which are added, and the result is stored in the higher double word of the destination operand."
    },
    {
        "id": 759,
        "Question": "If the result of PCMPEQ, which is a comparison of two packed data types, is a success, then the mask generated is",
        "Options": [
            "a) mask 0s",
            "b) mask 1s",
            "c) mask 2s",
            "d) mask 3s"
        ],
        "Answer": "Answer: b\nExplanation: If the result of PCMPEQ, which is a comparison of two packed data types is a success, then the mask 1s is generated, otherwise a mask of 0s is generated, in the destination operand."
    },
    {
        "id": 760,
        "Question": "The instructions that pass through the fetch, decode and execution stages sequentially is known as",
        "Options": [
            "a) sequential instruction",
            "b) sequence of fetch, decode and execution",
            "c) linear instruction sequencing",
            "d) non-linear instruction sequencing"
        ],
        "Answer": "Answer: c\nExplanation: The linear instruction sequencing is the one in which the instructions that pass through the fetch, decode and execution stages sequentially."
    },
    {
        "id": 761,
        "Question": "During the execution of instructions, if an instruction is executed, then next instruction is executed only when the data is read by",
        "Options": [
            "a) control unit",
            "b) bus interface unit",
            "c) execution unit",
            "d) cpu"
        ],
        "Answer": "Answer: b\nExplanation: During the execution of instructions, only after the bus interface unit of CPU reads the data from the main memory and returns it to the register, the next instruction execution will commence."
    },
    {
        "id": 762,
        "Question": "Because of Pentium’s superscalar architecture, the number of instructions that are executed per clock cycle is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Pentium’s superscalar architecture employs five stage pipeline with U and V pipes. Thus it can execute two instructions per clock."
    },
    {
        "id": 763,
        "Question": "The type of execution which means that the CPU should speculate which of the next instructions can be executed earlier is",
        "Options": [
            "a) speculative execution",
            "b) out of turn execution",
            "c) dual independent bus",
            "d) multiple branch prediction"
        ],
        "Answer": "Answer: a\nExplanation: The speculative execution is an execution which means that the CPU should speculate which of the next instructions can be executed earlier."
    },
    {
        "id": 764,
        "Question": "The execution in which the consecutive instruction execution in a sequential flow is hampered is",
        "Options": [
            "a) speculative execution",
            "b) out of turn execution",
            "c) dual independent bus",
            "d) multiple branch prediction"
        ],
        "Answer": "Answer: b\nExplanation: In the out of turn execution, the consecutive instruction execution in a sequential flow is hampered and the CPU should be able to execute out of turn instructions."
    },
    {
        "id": 765,
        "Question": "A dual independent bus has",
        "Options": [
            "a) Enhanced system bandwidth",
            "b) CPU that can access both cache and memory simultaneously",
            "c) High throughput",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A dual independent bus architecture is incorporated by Pentium-Pro to get an enhanced system bandwidth and it also yields high throughput. It has the CPU which can access both main memory and the cache simultaneously."
    },
    {
        "id": 766,
        "Question": "The unit that is used to implement the multiple branch prediction in Pentium-Pro is",
        "Options": [
            "a) control unit",
            "b) bus interface unit",
            "c) branch target buffer",
            "d) branch instruction register"
        ],
        "Answer": "Answer: c\nExplanation: The processor uses an associative memory called branch target buffer for implementing the algorithm, multiple branch prediction."
    },
    {
        "id": 767,
        "Question": "Which of the following is not an independent engine of Pentium-Pro?",
        "Options": [
            "a) fetch-decode unit",
            "b) dispatch-execute unit",
            "c) control-execute unit",
            "d) retire unit"
        ],
        "Answer": "Answer: c\nExplanation: Pentium-Pro incorporates three independent engines, 1. Fetch-decode unit 2. Dispatch-execute unit 3. Retire unit."
    },
    {
        "id": 768,
        "Question": "The unit that accepts the sequence of instructions from the instruction cache as input is",
        "Options": [
            "a) fetch-decode unit",
            "b) dispatch-execute unit",
            "c) retire unit",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The fetch-decode unit accepts the sequence of instructions from the instruction cache as input and then decodes them."
    },
    {
        "id": 769,
        "Question": "In fetch-decode unit, the number of parallel decoders that accept the stream of fetched instructions and decode them is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: c\nExplanation: A set of three parallel decoders accepts the stream of fetched instructions and decode them."
    },
    {
        "id": 770,
        "Question": "The decoder unit in fetch-decode unit converts the instructions into",
        "Options": [
            "a) executable statements",
            "b) machine language statements",
            "c) MMX instructions",
            "d) micro operations"
        ],
        "Answer": "Answer: d\nExplanation: The decoder unit converts the fetched instructions into micro operations."
    },
    {
        "id": 771,
        "Question": "The logical source(s) and logical destination(s) that the micro operation has respectively are",
        "Options": [
            "a) 2,2",
            "b) 1,3",
            "c) 3,1",
            "d) 3,2"
        ],
        "Answer": "Answer: c\nExplanation: Each microoperation contains two logical sources and one logical destination."
    },
    {
        "id": 772,
        "Question": "The microoperations that are converted by decoder are directly transferred to",
        "Options": [
            "a) decoder register",
            "b) dispatch-execute unit",
            "c) retire unit",
            "d) register alias table"
        ],
        "Answer": "Answer: d\nExplanation: The microoperations are sent to the register alias table(RAT). The RAT translates the logical register references to the physical register set actually available in the CPU."
    },
    {
        "id": 773,
        "Question": "The pool of instructions that are fetched is stored in an addressable memory called",
        "Options": [
            "a) tristate buffer",
            "b) branch target buffer",
            "c) reorder buffer",
            "d) order buffer"
        ],
        "Answer": "Answer: c\nExplanation: The pool of instructions that are fetched is stored in an array of content addressable memory called reorder buffer."
    },
    {
        "id": 774,
        "Question": "The unit that performs scheduling of instructions by determining the data dependencies is",
        "Options": [
            "a) fetch-decode unit",
            "b) dispatch-execute unit",
            "c) retire unit",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The dispatch-execute unit performs scheduling of instructions by determining the data dependencies after which the microoperations of the scheduled instructions are executed in the execution unit."
    },
    {
        "id": 775,
        "Question": "The unit that reads the instruction pool and removes the microoperations which have been executed instruction pool is",
        "Options": [
            "a) fetch-decode unit",
            "b) dispatch-execute unit",
            "c) retire unit",
            "d) decoding unit"
        ],
        "Answer": "Answer: c\nExplanation: The retire unit reads the instruction pool containing the instructions and removes the microoperations which have been executed instruction pool."
    },
    {
        "id": 776,
        "Question": "The speed of Pentium-Pro when compared to that of Pentium is",
        "Options": [
            "a) equal",
            "b) twice",
            "c) thrice",
            "d) two-third"
        ],
        "Answer": "Answer: b\nExplanation: The features incorporated in Pentium-Pro enhances the speed of Pentium-Pro and is twice as that of Pentium."
    },
    {
        "id": 777,
        "Question": "Which of the following is not supported by Pentium-Pro?",
        "Options": [
            "a) multiple branch prediction",
            "b) mmx instruction set",
            "c) speculative execution",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The Pentium-Pro does not support the MMX instruction set."
    },
    {
        "id": 778,
        "Question": "The feature of Pentium II is",
        "Options": [
            "a) high cache",
            "b) operates at 2.8 volts",
            "c) supports intel’s MMX instructions",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The Pentium II has a higher cache and it can operate at 2.8 volts, thereby reducing power consumption. The most important change of Pentium II is that it can support Intel’s MMX instructions."
    },
    {
        "id": 779,
        "Question": "The results of speculative instruction execution is stored in",
        "Options": [
            "a) visible CPU registers",
            "b) permanent memory",
            "c) temporary memory",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: The results of speculative instruction execution should not be stored in CPU registers and are temporarily stored, since they may have to be discarded, in case if there is a branch instruction before these speculative instruction executions."
    },
    {
        "id": 780,
        "Question": "The feature of Pentium 4 is",
        "Options": [
            "a) works based on NetBurst microarchitecture",
            "b) clock speed ranges from 1.4GHz to 1.7GHz",
            "c) has hyper-pipelined technology",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Pentium 4 is based on NetBurst microarchitecture. Clock speed varies from 1.4GHz to 1.7GHz. It has hyper-pipelined technology."
    },
    {
        "id": 781,
        "Question": "Which of the following is not a module of Pentium 4 architecture?",
        "Options": [
            "a) front end module",
            "b) execution module",
            "c) control module",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: Pentium 4 architecture may be viewed having four basic modules.\n1. Front end module\n2. Out of order execution engine\n3. Execution module\n4. Memory subsystem module."
    },
    {
        "id": 782,
        "Question": "The front module of Pentium 4 consists of",
        "Options": [
            "a) trace cache",
            "b) microcode ROM",
            "c) front end branch predictor",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The front module of Pentium 4 contains\n1. IA 32 Instruction decoder\n2. Trace cache\n3. Microcode ROM\n4. Front end branch predictor."
    },
    {
        "id": 783,
        "Question": "The unit that decodes the instructions concurrently and translate them into micro-operations is",
        "Options": [
            "a) trace cache",
            "b) instruction decoder",
            "c) execution module",
            "d) front end branch predictor"
        ],
        "Answer": "Answer: b\nExplanation: The role of instruction decoder is to decode the instructions concurrently and translate them into micro-operations known as micro-ops."
    },
    {
        "id": 784,
        "Question": "In complex instructions, when the instruction needs to be translated into more than 4 micro-operations, then the decoder transfers the task to",
        "Options": [
            "a) trace cache",
            "b) front end branch predictor",
            "c) microcode ROM",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: In case of complex instructions, when the instruction needs to be translated into more than 4 micro-operations, then the decoder transfers the task to microcode ROM."
    },
    {
        "id": 785,
        "Question": "The unit that does not store the instructions, but the decoded stream of instructions is",
        "Options": [
            "a) trace cache",
            "b) front end branch predictor",
            "c) microcode ROM",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The trace cache is a special instruction cache because it does not store the instructions, but the decoded stream of instructions."
    },
    {
        "id": 786,
        "Question": "Trace cache can store the micro-ops upto a range of",
        "Options": [
            "a) 6 K decoded micro-ops",
            "b) 8 K decoded micro-ops",
            "c) 10 K decoded micro-ops",
            "d) 12 K decoded micro-ops"
        ],
        "Answer": "Answer: d\nExplanation: Trace cache can store upto 12K micro-ops. The cache assembles the decoded micro-ops into ordered sequence of micro-ops called traces."
    },
    {
        "id": 787,
        "Question": "The unit that predicts the locations from where the next instruction bytes are fetched is",
        "Options": [
            "a) trace cache",
            "b) front end branch predictor",
            "c) execution module",
            "d) instruction decoder"
        ],
        "Answer": "Answer: b\nExplanation: The front end branch predictor predicts the locations from where the next instruction bytes are fetched."
    },
    {
        "id": 788,
        "Question": "If complex instructions like interrupt handling, string manipulation appear, then the control from trace cache transfers to",
        "Options": [
            "a) microcode ROM",
            "b) front end branch predictor",
            "c) execution module",
            "d) instruction decoder"
        ],
        "Answer": "Answer: a\nExplanation: When some complex instructions like interrupt handling, string manipulation appear, then the control from trace cache transfers to microcode ROM."
    },
    {
        "id": 789,
        "Question": "After the micro-ops are issued by the microcode ROM, the control goes to",
        "Options": [
            "a) trace cache",
            "b) front end branch predictor",
            "c) execution module",
            "d) instruction decoder"
        ],
        "Answer": "Answer: a\nExplanation: After the micro-ops are issued by the microcode ROM, the control goes to Trace cache once again. The micro-ops delivered by the trace cache and the microcode ROM are buffered in a queue in an orderly fashion."
    },
    {
        "id": 790,
        "Question": "If the logical processors want to execute complex IA-32 instructions simultaneously then the number of microcode instruction pointers required is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: If both the logical processors want to execute complex IA-32 instructions simultaneously then two microcode instruction pointers are required, which will access the microcode ROM."
    },
    {
        "id": 791,
        "Question": "Which of the following is a type of branch prediction?",
        "Options": [
            "a) static prediction",
            "b) dynamic prediction",
            "c) static and dynamic prediction",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: There are two types of branch prediction namely static prediction and dynamic prediction."
    },
    {
        "id": 792,
        "Question": "The prediction that is based on a statistical assumption that the majority of backward branches occur in repetitive loops is",
        "Options": [
            "a) static prediction",
            "b) dynamic prediction",
            "c) branch prediction",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The static prediction is based on a statistical assumption that the majority of backward branches occur in the context of repetitive loops."
    },
    {
        "id": 793,
        "Question": "The advantage of static prediction is",
        "Options": [
            "a) simple and fast",
            "b) does not require table lookups or calculations",
            "c) performs without much degradation",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The static prediction is simple and fast. It does not require table lookups or calculations. In case if a program contains a number of loops, static prediction performs without much degradation."
    },
    {
        "id": 794,
        "Question": "The dynamic branch prediction algorithms use",
        "Options": [
            "a) Branch History Table (BHT)",
            "b) Branch Target Buffer (BTB)",
            "c) Branch History Table and Branch Target Buffer",
            "d) None"
        ],
        "Answer": "Answer: c\nExplanation: The dynamic branch prediction algorithms use two types of tables, namely Branch History Table (BHT) and Branch Target Buffer (BTB)."
    },
    {
        "id": 795,
        "Question": "The unit that preserves the history of each conditional branch is",
        "Options": [
            "a) Branch Target Buffer (BTB)",
            "b) Branch History Table (BHT)",
            "c) Static prediction",
            "d) Dynamic prediction"
        ],
        "Answer": "Answer: b\nExplanation: The Branch History Table (BHT) preserves the history of each conditional branch that the speculative branch prediction unit encounters during the last several cycles."
    },
    {
        "id": 796,
        "Question": "The BHT keeps a record that indicates the likelihood of the branches grouped as",
        "Options": [
            "a) strongly taken",
            "b) taken",
            "c) not taken",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The BHT keeps a record that indicates the likelihood that the branch will be taken based on its past history. The branches may be grouped as ‘strongly taken’, ‘taken’, ‘not taken’ and ‘strongly not taken’."
    },
    {
        "id": 797,
        "Question": "Each logical processor has",
        "Options": [
            "a) one 64-byte streaming buffer",
            "b) one 32-byte streaming buffer",
            "c) two 64-byte streaming buffers",
            "d) two 32-byte streaming buffers"
        ],
        "Answer": "Answer: c\nExplanation: Each logic processor has its own set of two 64-byte streaming buffers, which store the instruction bytes and subsequently they are dispatched to the instruction decode stage."
    },
    {
        "id": 798,
        "Question": "If there is a trace cache miss, then the instruction bytes are required to be fetched from the",
        "Options": [
            "a) instruction decoder",
            "b) Level2 cache",
            "c) execution module",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If there is a trace cache miss, then the instruction bytes are required to be fetched from the Level2 cache."
    },
    {
        "id": 799,
        "Question": "The Instruction Translation Lookaside Buffer(ITLB) is present in",
        "Options": [
            "a) trace cache",
            "b) instruction decoder",
            "c) logical processors",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Since there are two logical processors, there are two ITLBs. Thus each logical processor has its own ITLB and its own instruction pointer to track the progress of instruction fetch for each of them."
    },
    {
        "id": 800,
        "Question": "The units that are primarily used to resolve indirect mode of memory addressing is called",
        "Options": [
            "a) ALU",
            "b) AGU",
            "c) ALU and AGU",
            "d) NONE"
        ],
        "Answer": "Answer: b\nExplanation: The AGUs(Address Generation Units) are primarily used to resolve indirect mode of memory addressing."
    },
    {
        "id": 801,
        "Question": "The AGUs work at a speed of",
        "Options": [
            "a) equal to that of processor",
            "b) twice the processor",
            "c) thrice the processor",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The AGUs run at twice the processor speed."
    },
    {
        "id": 802,
        "Question": "Pentium 4 consists of",
        "Options": [
            "a) 4 ALUs",
            "b) 4 AGUs",
            "c) 2 ALUs and 2 AGUs",
            "d) 4 ALUs and 4 AGUs"
        ],
        "Answer": "Answer: c\nExplanation: Pentium 4 consists of 2 ALUs and 2 AGUs."
    },
    {
        "id": 803,
        "Question": "The number of instructions that can be executed per clock cycle by the ALU or AGU is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: As the speed of the units, ALU and AGU are doubled, which means that twice the number of instructions being executed per clock cycle."
    },
    {
        "id": 804,
        "Question": "The paging mechanism of IA-32 architecture has an extension as",
        "Options": [
            "a) page memory extension",
            "b) page size extension",
            "c) page address extension and page size extension",
            "d) page memory extension and page size extension"
        ],
        "Answer": "Answer: c\nExplanation: IA-32 architecture’s paging mechanism includes an extension that support\n1. Page address extension to address space greater than 4GB.\n2. Page size extension to map linear address to physical address in 4MB."
    },
    {
        "id": 805,
        "Question": "The linear address space is mapped into the processors physical address space either directly or through paging by",
        "Options": [
            "a) flat memory model",
            "b) segmented memory model",
            "c) flat or segmented memory model",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: With the flat or segmented memory model, linear address space is mapped into the processors physical address space either directly or through paging."
    },
    {
        "id": 806,
        "Question": "The features of thread in threading process is",
        "Options": [
            "a) threads can be bunched together",
            "b) threads are simple and light weight",
            "c) threads are independent",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Threads may be bunched together in a process. Threads are independent, simple in structure and are lightweight in the sense that they may enhance the speed of operation of an overall process."
    },
    {
        "id": 807,
        "Question": "The process in which multiple threads correspond to the tracking of each individual object is known as",
        "Options": [
            "a) multiple thread system",
            "b) multi thread parallelism",
            "c) thread level parallelism",
            "d) multi level parallelism"
        ],
        "Answer": "Answer: c\nExplanation: The mutiple threads correspond to the tracking of each individual object. This kind of parallelism is known as thread level parallelism(TLP)."
    },
    {
        "id": 808,
        "Question": "Which of the following is not a type of context switching?",
        "Options": [
            "a) time-slice multithreading",
            "b) on chip multiprocessing",
            "c) hyperthreading",
            "d) none"
        ],
        "Answer": "Answer: d\nExplanation: A single processor can execute multiple threads by switching between them. The scheme of context switching may be several types. They are\n1. Time-slice multithreading\n2. On chip multiprocessing\n3. Hyperthreading."
    },
    {
        "id": 809,
        "Question": "The thread level parallelism is a process of",
        "Options": [
            "a) saving the context of currently executing process",
            "b) flushing the CPU of the same process",
            "c) loading the context of new next process",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The thread level parallelism is a process of\n1. Saving the context of currently executing process.\n2. Flushing the CPU of the same process.\n3. Loading the context of new next process is called a context switch."
    },
    {
        "id": 810,
        "Question": "Which of the following is a resource sharing strategy that had been investigated by the developers?",
        "Options": [
            "a) partitioned resources",
            "b) threshold sharing",
            "c) full sharing",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Several resource sharing strategies have been investigated by the developers. Some of these are\n1. Partitioned resources\n2. Threshold sharing\n3. Full sharing."
    },
    {
        "id": 811,
        "Question": "The feature of hyperthreading is",
        "Options": [
            "a) simultaneous multithreading",
            "b) switching is not required",
            "c) effective use of processor resources",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Hyperthreading used the concept of simultaneous multithreading, where multiple threads can be executed on a single processor without switching."
    },
    {
        "id": 812,
        "Question": "Each logical processor maintains a set of architecture state which consists of",
        "Options": [
            "a) general purpose registers",
            "b) machine state register",
            "c) advanced programmed interrupt controller",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: Each logical processor maintains a set of architecture state which consists of\n1. Registers including the general purpose registers\n2. The control register\n3. Advanced programmed interrupt controller\n4. Machine state register."
    },
    {
        "id": 813,
        "Question": "A logical processor may be temporarily stalled for",
        "Options": [
            "a) including servicing cache misses",
            "b) handling branch mispredictions",
            "c) waiting for results of previous instructions",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: A logical processor may be temporarily stalled for a variety of reasons like including servicing cache misses, handling branch mispredictions and waiting for results of previous instructions."
    },
    {
        "id": 814,
        "Question": "The hyperthreading technology automatically involves the",
        "Options": [
            "a) decrease of die area",
            "b) increase of die area",
            "c) decrease of die area to half",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The hyperthreading technology automatically involves the increase of die area."
    },
    {
        "id": 815,
        "Question": "The instruction that is used when either of the logical processors is idle is",
        "Options": [
            "a) HOLD",
            "b) HLDA",
            "c) HALT",
            "d) NONE"
        ],
        "Answer": "Answer: c\nExplanation: An optimization may require the use of HALT instruction, when either of the two logical processors is idle."
    },
    {
        "id": 816,
        "Question": "The mode that is available when there is only one software thread to execute is",
        "Options": [
            "a) single task mode",
            "b) multi task mode",
            "c) single task and multi task mode",
            "d) dual task mode"
        ],
        "Answer": "Answer: c\nExplanation: When there is only one software thread to execute, there are two modes namely single task mode and multi task mode."
    },
    {
        "id": 817,
        "Question": "The HALT instruction is a privileged instruction that can be only used by",
        "Options": [
            "a) execution unit",
            "b) operating system",
            "c) control unit",
            "d) memory unit"
        ],
        "Answer": "Answer: b\nExplanation: The HALT instruction is a privileged instruction that can be only used by operating system."
    },
    {
        "id": 818,
        "Question": "When the operating system uses HALT instruction on a processor which supports multithreading, the operation moves from",
        "Options": [
            "a) Single task to multi task mode",
            "b) ST1 to ST0",
            "c) Multi task to single task mode",
            "d) None"
        ],
        "Answer": "Answer: c\nExplanation: When the operating system uses HALT instruction on a processor which supports multithreading, the operation moves from multi tasking mode to single tasking mode."
    },
    {
        "id": 819,
        "Question": "The Xeon TM processor on which hyperthreading technology was first implemented consists of",
        "Options": [
            "a) one logical processor per physical processor",
            "b) two logical processor per physical processor",
            "c) three logical processor per physical processor",
            "d) zero logical processor per physical processor"
        ],
        "Answer": "Answer: b\nExplanation: The Xeon TM processor on which hyperthreading technology was first implemented consists of two logical processor per physical processor."
    },
    {
        "id": 820,
        "Question": "The MMX instructions support only",
        "Options": [
            "a) character data type",
            "b) float data type",
            "c) integer data type",
            "d) string data type"
        ],
        "Answer": "Answer: c\nExplanation: The MMX instructions support only integer data type."
    },
    {
        "id": 821,
        "Question": "For single precision floating point numbers, the SSE instructions are",
        "Options": [
            "a) MMX instructions",
            "b) SIMD instructions",
            "c) Floating point executions",
            "d) None"
        ],
        "Answer": "Answer: b\nExplanation: The SSE instructions are SIMD(Single Instruction Multiple Data Stream) instructions for single precision floating point numbers."
    },
    {
        "id": 822,
        "Question": "The feature of SSE among the following is",
        "Options": [
            "a) operate on four 32-bit floating points",
            "b) register size is of 128 bits",
            "c) no switching from one mode to other",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The features of SSE(Streaming SIMD extensions) are\n1. SSE instructions are SIMD instructions for single precision floating point numbers.\n2. They operate on four 32-bit floating points.\n3. The register size is of 128 bits\n4. No necessity to switch from one mode to other."
    },
    {
        "id": 823,
        "Question": "The new instructions that are added in SSE for floating point operations are of",
        "Options": [
            "a) 72",
            "b) 50",
            "c) 25",
            "d) 8"
        ],
        "Answer": "Answer: b\nExplanation: The new instructions that are added in SSE for floating point operations are 50."
    },
    {
        "id": 824,
        "Question": "The SSE instructions can operate on",
        "Options": [
            "a) packed data",
            "b) unpacked data",
            "c) dynamic data",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The SSE instructions can operate on packed data or scalar data."
    },
    {
        "id": 825,
        "Question": "Which of the following group is not of SSE instructions?",
        "Options": [
            "a) jump or branch group of instruction",
            "b) logic and comparison group of instruction",
            "c) shuffle instructions",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The SSE instructions can be grouped to many types. Some of them are\n1. Data transfer instructions\n2. Arithmetic, logic and comparison group of instruction\n3. shuffle instructions\n4. Cacheability instructions."
    },
    {
        "id": 826,
        "Question": "Which of the following is true about SSE2 instructions in Pentium III and Pentium 4?",
        "Options": [
            "a) SSE increases the accuracy of double precision floating point operations",
            "b) SSE supports new formats of packed data",
            "c) SSE increases the speed of manipulation of SIMD integer operations",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The SSE new instruction set increases the accuracy of double precision floating point operations, supports new formats of packed data."
    },
    {
        "id": 827,
        "Question": "The data type that the SSE2 instructions doesn’t support is",
        "Options": [
            "a) single precision floating points",
            "b) double precision floating points",
            "c) single and double precision floating points",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The SSE2 instructions support new data types such as double precision floating points along with single precision floating points."
    },
    {
        "id": 828,
        "Question": "The additional instructions of SSE3 over SSE2 contains",
        "Options": [
            "a) video encoding",
            "b) complex arithmetic operation",
            "c) thread synchronization",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The SSE3 contains 13 additional SIMD instructions over SSE2. These instructions comprise five types.\ni. floating point to integer conversion\nii. complex arithmetic operation\niii. video encoding\niv. SIMD floating point operations using array of structures format\nv. thread synchronization."
    },
    {
        "id": 829,
        "Question": "The unit that may acts as an interface between the Front end and the Out of order execution engine in the pipeline flow is",
        "Options": [
            "a) micro-op queue",
            "b) micro-op stack",
            "c) micro-ops",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The micro-op queue acts as an interface between the Front end and the Out of order execution engine in the pipeline flow."
    },
    {
        "id": 830,
        "Question": "The verification of the logic using formal mathematical tools is called",
        "Options": [
            "a) arithmetic verification",
            "b) formal verification",
            "c) mathematical verification",
            "d) logical verification"
        ],
        "Answer": "Answer: b\nExplanation: The verification of the logic using formal mathematical tools is called formal verification."
    },
    {
        "id": 831,
        "Question": "The formal verification is important for",
        "Options": [
            "a) developing the tools",
            "b) developing the methodologies",
            "c) to detect the bugs in design",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The formal verification is important to develop the tools and methodologies to handle a large number of proofs using which it will be possible to detect the bugs in the design."
    },
    {
        "id": 832,
        "Question": "By using the techniques of formal verification, one can detect the logical bugs of",
        "Options": [
            "a) more than 50",
            "b) less than 50",
            "c) more than 100",
            "d) less than 100"
        ],
        "Answer": "Answer: c\nExplanation: By using the techniques of formal verification, one can detect more than 100 logical bugs."
    },
    {
        "id": 833,
        "Question": "The modern processors are designed to achieve",
        "Options": [
            "a) high speed",
            "b) operate at low operating voltage",
            "c) uses cooling technology",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The modern processors are designed to operate at a very high speed and even with the lower operating voltages, the power consumption is high enough to require expensive cooling technology."
    },
    {
        "id": 834,
        "Question": "The disadvantage of CISC design processors is",
        "Options": [
            "a) low burden on compiler developers",
            "b) wide availability of existing software",
            "c) complex in nature",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: Some computers are used in preference to CISC design due to its low burden on compiler developers and wide availability of existing software. But they are complex in nature."
    },
    {
        "id": 835,
        "Question": "The RISC architecture is preferred to CISC because RISC architecture has",
        "Options": [
            "a) simplicity",
            "b) efficiency",
            "c) high speed",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The RISC architecture is preferred to CISC because RISC architecture is simple, highly efficient and the processors using RISC architecture have high speed."
    },
    {
        "id": 836,
        "Question": "The feature of RISC that is not present in CISC is",
        "Options": [
            "a) branch prediction",
            "b) pipelining",
            "c) branch prediction and pipelining",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: A RISC core allows performance enhancing features, such as branch prediction and pipelining. Traditionally, these have only been possible in RISC designs."
    },
    {
        "id": 837,
        "Question": "The feature of hybrid CISC-RISC architecture is",
        "Options": [
            "a) consume a lot of power",
            "b) not applicable to mobile applications",
            "c) processed by RISC core",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The CISC-RISC hybrids continue to consume a lot of power and are not best candidates for mobile and embedded applications."
    },
    {
        "id": 838,
        "Question": "Which of the following is an application of RISC architecture by adding more instructions?",
        "Options": [
            "a) multimedia applications",
            "b) telecommunication encoding",
            "c) image conversion",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: By adding more instructions to the RISC architecture, some applications can be run much faster like multimedia applications, telecommunication encoding/decoding, image conversion and video processing."
    },
    {
        "id": 839,
        "Question": "Which of the following processor belongs to hybrid RISC-CISC architecture?",
        "Options": [
            "a) Intel Pentium III",
            "b) Intel Itanium 64",
            "c) AMD’s X86-64",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The processors, Intel Pentium III, Intel Itanium 64 and AMD’s X86-64 consists of hybrid RISC-CISC architecture."
    },
    {
        "id": 840,
        "Question": "In order to implement complex instructions, CISC architectures use",
        "Options": [
            "a) macroprogramming",
            "b) hardwire",
            "c) microprogramming",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: In order to implement complex instructions, CISC architectures use microprogramming."
    },
    {
        "id": 841,
        "Question": "The advantage of RISC processors is",
        "Options": [
            "a) can operate at high clock frequency",
            "b) shorter design cycle",
            "c) simple and fast",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The advantages of RISC processors are that they can work at high clock frequency, can be designed, developed and tested more quickly with a high speed."
    },
    {
        "id": 842,
        "Question": "The additional functionality that can be placed on the same chip of RISC is",
        "Options": [
            "a) Memory management units",
            "b) Floating point units",
            "c) Memory management and floating point arithmetic units",
            "d) RAM, ROM"
        ],
        "Answer": "Answer: c\nExplanation: Several extra functionalities, such as memory management units or floating point arithmetic units, can also be placed on the same chip of RISC."
    },
    {
        "id": 843,
        "Question": "The number of clockcycles that take to wait until the length of the instruction is known in order to start decoding is",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: The loading and decoding the instructions in a RISC processor is simple and fast. It is not needed to wait until the length of the instruction is known in order to start the decoding."
    },
    {
        "id": 844,
        "Question": "The number of CPIs(Clock Per Instruction) for an instruction of RISC processors is",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: b\nExplanation: RISC processors have unity CPI(Clock Per Instruction), which is due to the optimization of each instruction on the CPU and massive pipelining embedded in a RISC processor."
    },
    {
        "id": 845,
        "Question": "Which of the following is not true about RISC processors?",
        "Options": [
            "a) addressing modes are less",
            "b) pipelining is key for high speed",
            "c) microcoding is required",
            "d) single machine cycle instructions"
        ],
        "Answer": "Answer: c\nExplanation: Unlike the CISC, in RISC architecture, instruction microcoding is not required."
    },
    {
        "id": 846,
        "Question": "The RISC processors that support variable length instructions are from",
        "Options": [
            "a) Intel",
            "b) Motorola",
            "c) AMD",
            "d) Intel and Motorola"
        ],
        "Answer": "Answer: d\nExplanation: In RISC, each instruction is of the same length, so that it may be fetched in a single operation. The traditional microprocessors from Intel or Motorola support variable length instructions."
    },
    {
        "id": 847,
        "Question": "Which of the following is true about register windowing?",
        "Options": [
            "a) chips expose 32 registers to programmer",
            "b) puts demands on multiplexers",
            "c) puts enormous demands on register ports",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The register windowing involves a mechanism where the chips expose 32 registers to the programmer at any one time. It puts enormous demands on multiplexers and register ports to make any physical register appear to be any logical register."
    },
    {
        "id": 848,
        "Question": "The disadvantage of register windowing is",
        "Options": [
            "a) high speed",
            "b) puts demands on multiplexers/register ports",
            "c) consumes less cycles",
            "d) doesn’t handle overflow/underflow"
        ],
        "Answer": "Answer: d\nExplanation: It is impossible to predict when the register file will overflow or underflow, so performance is unpredictable. It generates a software fault, which the operating system has to handle, consuming more cycles."
    },
    {
        "id": 849,
        "Question": "The register window is used to point the number of physical registers is",
        "Options": [
            "a) infinite",
            "b) that are currently used",
            "c) finite",
            "d) that are unused"
        ],
        "Answer": "Answer: c\nExplanation: The register window only helps us to point the number of physical registers is finite."
    },
    {
        "id": 850,
        "Question": "Which of the following is not a stage of pipeline of a RISC processor?",
        "Options": [
            "a) read registers and decode the instructions",
            "b) fetch instructions from registers",
            "c) write result into a register",
            "d) access an operand in data memory"
        ],
        "Answer": "Answer: b\nExplanation: There are 5 stages in pipelining. They are\n1. Fetch instructions from memory\n2. Read registers and decode the instructions\n3. Execute the instructions or calculate an address\n4. Access an operand in data memory\n5. Write result into a register."
    },
    {
        "id": 851,
        "Question": "When an instruction depends on the results of the previous instructions then",
        "Options": [
            "a) error occurs",
            "b) software fault occurs",
            "c) data dependency occurs",
            "d) hardware fault occurs"
        ],
        "Answer": "Answer: c\nExplanation: A data dependency occurs when an instruction depends on the results of the previous instructions."
    },
    {
        "id": 852,
        "Question": "The instructions that instruct the processor to make a decision about the next instruction to be executed are",
        "Options": [
            "a) data dependency instructions",
            "b) branch instructions",
            "c) control transfer instructions",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The branch instructions are those which instruct the processor to make a decision about the next instruction to be executed, depending upon whether the condition is satisfied or not."
    },
    {
        "id": 853,
        "Question": "The reason for which the RISC processor goes to idle state(or stall) is",
        "Options": [
            "a) delay in reading information from memory",
            "b) poor instruction set design",
            "c) dependencies between instructions",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: There are a variety of reasons, including delays in reading information from memory, poor instruction set design, or dependencies between instructions for the RISC processor to remain idle."
    },
    {
        "id": 854,
        "Question": "The register that may be used as an operand register is",
        "Options": [
            "a) Accumulator",
            "b) B register",
            "c) Data register",
            "d) Accumulator and B register"
        ],
        "Answer": "Answer: d\nExplanation: In some instructions, the Accumulator and B register are used to store the operands."
    },
    {
        "id": 855,
        "Question": "The register that can be used as a scratch pad is",
        "Options": [
            "a) Accumulator",
            "b) B register",
            "c) Data register",
            "d) Accumulator and B register"
        ],
        "Answer": "Answer: b\nExplanation: B register is used to store one of the operands for multiply and divide instructions. In other instructions, it may just be used as a scratch pad."
    },
    {
        "id": 856,
        "Question": "The registers that contain the status information is",
        "Options": [
            "a) control registers",
            "b) instruction registers",
            "c) program status word",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The set of flags of program status word contains the status information and is considered as one of the special function registers."
    },
    {
        "id": 857,
        "Question": "Which of the processor’s stack does not contain the top-down data structure?",
        "Options": [
            "a) 8086",
            "b) 80286",
            "c) 8051",
            "d) 80386"
        ],
        "Answer": "Answer: c\nExplanation: The 8051 stack is not a top-down data structure, like other Intel processors."
    },
    {
        "id": 858,
        "Question": "The architecture of 8051 consists of",
        "Options": [
            "a) 4 latches",
            "b) 2 timer registers",
            "c) 4 on-chip I/O ports",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The architecture of 8051 consists of 4 latches and driver pairs are allotted to each of the four on-chip I/O ports. It contains two 16-bit timer registers."
    },
    {
        "id": 859,
        "Question": "The transmit buffer of serial data buffer is a",
        "Options": [
            "a) serial-in parallel-out register",
            "b) parallel-in serial-out register",
            "c) serial-in serial-out register",
            "d) parallel-in parallel-out register"
        ],
        "Answer": "Answer: b\nExplanation: The transmit buffer of serial data buffer is a parallel-in serial-out register."
    },
    {
        "id": 860,
        "Question": "The receive buffer of serial data buffer is a",
        "Options": [
            "a) serial-in parallel-out register",
            "b) parallel-in serial-out register",
            "c) serial-in serial-out register",
            "d) parallel-in parallel-out register"
        ],
        "Answer": "Answer: a\nExplanation: The serial data register has two buffers. The transmit buffer is a parallel-in serial-out register and receive buffer is a parallel-in serial-out register."
    },
    {
        "id": 861,
        "Question": "The register that provides control and status information about counters is",
        "Options": [
            "a) IP",
            "b) TMOD",
            "c) TSCON",
            "d) PCON"
        ],
        "Answer": "Answer: b\nExplanation: The registers, TMOD and TCON contain control and status information about timers/counters."
    },
    {
        "id": 862,
        "Question": "The register that provides control and status information about serial port is",
        "Options": [
            "a) IP",
            "b) IE",
            "c) TSCON",
            "d) PCON and SCON"
        ],
        "Answer": "Answer: d\nExplanation: The registers, PCON and SCON contain control and status information about serial port."
    },
    {
        "id": 863,
        "Question": "The device that generates the basic timing clock signal for the operation of the circuit using crystal oscillator is",
        "Options": [
            "a) timing unit",
            "b) timing and control unit",
            "c) oscillator",
            "d) clock generator"
        ],
        "Answer": "Answer: c\nExplanation: The oscillator circuit generates the basic timing clock signal for the operation of the circuit using crystal oscillator."
    },
    {
        "id": 864,
        "Question": "The registers that are not accessible by the user are",
        "Options": [
            "a) Accumulator and B register",
            "b) IP and IE",
            "c) Instruction registers",
            "d) TMP1 and TMP2"
        ],
        "Answer": "Answer: d\nExplanation: The arithmetic operations are performed over the operands held by the temporary registers, TMP1 and TMP2. Users cannot access these temporary registers."
    },
    {
        "id": 865,
        "Question": "Which of the following is an 8-bit register?",
        "Options": [
            "a) PSW(Program Status Word)",
            "b) TCON(Timer Control Register)",
            "c) Accumulator",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The registers, PSW, TCON and Accumulator are 8-bit registers."
    },
    {
        "id": 866,
        "Question": "Which of the following register can be addressed as a byte?",
        "Options": [
            "a) P1",
            "b) SCON",
            "c) TMOD",
            "d) TCON"
        ],
        "Answer": "Answer: c\nExplanation: The registers, TMOD, SP, TH0, TH1, TL0, TL1 are to be addressed as bytes."
    },
    {
        "id": 867,
        "Question": "Which of the following is bit-addressable register?",
        "Options": [
            "a) SBUF",
            "b) PCON",
            "c) TMOD",
            "d) SCON"
        ],
        "Answer": "Answer: d\nExplanation: The registers, accumulator, PSW, B, P0, P1, P2, P3, IP, IE, TCON and SCON are all bit-addressable registers."
    },
    {
        "id": 868,
        "Question": "The higher and lower bytes of a 16-bit register DPTR are represented respectively as",
        "Options": [
            "a) LDPTR and HDPTR",
            "b) DPTRL and DPTRH",
            "c) DPH and DPL",
            "d) HDP and LDP"
        ],
        "Answer": "Answer: c\nExplanation: The registers, DPH and DPL are the higher and lower bytes of a 16-bit register DPTR."
    },
    {
        "id": 869,
        "Question": "The register that is used for accessing external data memory is",
        "Options": [
            "a) DPH",
            "b) DPL",
            "c) DPTR",
            "d) NONE"
        ],
        "Answer": "Answer: c\nExplanation: The Data Pointer(DPTR) is used for accessing external data memory which means that it includes both DPH and DPL."
    },
    {
        "id": 870,
        "Question": "Among the four groups of register banks, the number of groups that can be accessed at a time is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) all the four"
        ],
        "Answer": "Answer: a\nExplanation: At a time, only one of the four register banks can be accessed."
    },
    {
        "id": 871,
        "Question": "The number of 8-bit registers that a register bank contain is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: d\nExplanation: The 32, 8-bit registers are divided into four groups of 8 registers each, called register banks."
    },
    {
        "id": 872,
        "Question": "If RS1=1, RS0=0, then the register bank selected is",
        "Options": [
            "a) register bank 0",
            "b) register bank 1",
            "c) register bank 2",
            "d) register bank 3"
        ],
        "Answer": "Answer: c\nExplanation: If RS1=1, RS0=0, then the register bank selected is register bank 2."
    },
    {
        "id": 873,
        "Question": "If RS1=1, RS0=1, then the register bank selected is",
        "Options": [
            "a) register bank 0",
            "b) register bank 1",
            "c) register bank 2",
            "d) register bank 3"
        ],
        "Answer": "Answer: d\nExplanation: If RS1=1, RS0=1, then the register bank selected is register bank 3. If RS1=0, RS0=0, then selected bank is register bank 0."
    },
    {
        "id": 874,
        "Question": "The PCON register consists of",
        "Options": [
            "a) power mode bit",
            "b) power idle bit",
            "c) power ideal bit",
            "d) power down bit and idle bit"
        ],
        "Answer": "Answer: d\nExplanation: The power control register, PCON consists of power down bit and idle bit which activate the power down mode and idle mode in 80C51BH."
    },
    {
        "id": 875,
        "Question": "The on-chip oscillator is stopped in",
        "Options": [
            "a) power mode",
            "b) power down mode",
            "c) idle mode",
            "d) ideal mode"
        ],
        "Answer": "Answer: b\nExplanation: In power down mode, the on-chip oscillator is stopped."
    },
    {
        "id": 876,
        "Question": "In idle mode, the device that is disabled is",
        "Options": [
            "a) serial port",
            "b) timer block",
            "c) clock to CPU",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In idle mode, the oscillator continues to run and the interrupt, serial port and timer blocks are active but the clock to the CPU is disabled."
    },
    {
        "id": 877,
        "Question": "The only way to terminate the power down mode is to",
        "Options": [
            "a) CLEAR",
            "b) RESET",
            "c) HOLD",
            "d) HLT"
        ],
        "Answer": "Answer: b\nExplanation: The only way to terminate the power down mode is hardware reset. The reset redefines all the SFRs but the RAM contents are left unchanged."
    },
    {
        "id": 878,
        "Question": "The idle mode can be terminated by",
        "Options": [
            "a) PRESET",
            "b) CLEAR",
            "c) Interrupt",
            "d) Interrupt or reset"
        ],
        "Answer": "Answer: d\nExplanation: The idle mode can be terminated with a hardware interrupt or hardware reset signal."
    },
    {
        "id": 879,
        "Question": "Which of the following is an external interrupt?",
        "Options": [
            "a) INT0(active low)",
            "b) INT2(active low)",
            "c) Timer0 interrupt",
            "d) Timer1 interrupt"
        ],
        "Answer": "Answer: a\nExplanation: INT0(active low) and INT1(active low) are two external interrupt inputs provided by 8051."
    },
    {
        "id": 880,
        "Question": "The interrupts, INT0(active low) and INT1(active low) are processed internally by flags",
        "Options": [
            "a) IE0 and IE1",
            "b) IE0 and IF1",
            "c) IF0 and IE1",
            "d) IF0 and IF1"
        ],
        "Answer": "Answer: a\nExplanation: The interrupts, INT0(active low) and INT1(active low) are processed internally by the flags IE0 and IE1."
    },
    {
        "id": 881,
        "Question": "The flags IE0 and IE1, are automatically cleared after the control is transferred to respective vector if the interrupt is",
        "Options": [
            "a) level-sensitive",
            "b) edge-sensitive",
            "c) in serial port",
            "d) in parallel port"
        ],
        "Answer": "Answer: b\nExplanation: If the interrupts are programmed as edge sensitive, the flags IE0 and IE1 are automatically cleared after the control is transferred to respective vector."
    },
    {
        "id": 882,
        "Question": "If the external interrupt sources control the flags IE0 and IE1, then the interrupt programmed is",
        "Options": [
            "a) level-sensitive",
            "b) edge-sensitive",
            "c) in serial port",
            "d) in parallel port"
        ],
        "Answer": "Answer: a\nExplanation: If the interrupts are programmed as level sensitive, then the flags IE0 and IE1 are controlled by external interrupt sources themselves."
    },
    {
        "id": 883,
        "Question": "The pulses at T0 or T1 pin are counted in",
        "Options": [
            "a) timer mode",
            "b) counter mode",
            "c) idle mode",
            "d) power down mode"
        ],
        "Answer": "Answer: b\nExplanation: In counter mode, the pulses are counted at T0 or T1 pin."
    },
    {
        "id": 884,
        "Question": "In timer mode, the oscillator clock is divided by a prescalar",
        "Options": [
            "a) (1/8)",
            "b) (1/4)",
            "c) (1/16)",
            "d) (1/32)"
        ],
        "Answer": "Answer: d\nExplanation: In timer mode, the oscillator clock is divided by a prescalar (1/32) and then given to the timer."
    },
    {
        "id": 885,
        "Question": "The serial port interrupt is generated if",
        "Options": [
            "a) RI is set",
            "b) RI and TI are set",
            "c) Either RI or TI is set",
            "d) RI and TI are reset"
        ],
        "Answer": "Answer: c\nExplanation: The serial port interrupt is generated if atleast one of the two bits, RI and TI is set."
    },
    {
        "id": 886,
        "Question": "In serial port interrupt, after the control is transferred to the interrupt service routine, the flag that is cleared is",
        "Options": [
            "a) RI",
            "b) TI",
            "c) RI and TI",
            "d) None"
        ],
        "Answer": "Answer: d\nExplanation: In serial port interrupt, after the control is transferred to the interrupt service routine, neither of the flags are cleared."
    },
    {
        "id": 887,
        "Question": "The atleast number of machine cycles for which the external interrupts that are programmed level-sensitive should remain high is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 0"
        ],
        "Answer": "Answer: b\nExplanation: The external interrupts, programmed level-sensitive should remain high for atleast 2 machine cycles."
    },
    {
        "id": 888,
        "Question": "If the external interrupts are programmed edge sensitive, then they should remain high for atleast",
        "Options": [
            "a) 0 machine cycle",
            "b) 2 machine cycles",
            "c) 1 machine cycle",
            "d) 3 machine cycles"
        ],
        "Answer": "Answer: c\nExplanation: If the external interrupts are programmed edge sensitive, then they should remain high for atleast one machine cycle and low for atleast one machine cycle, for being sensed."
    },
    {
        "id": 889,
        "Question": "The timer generates an interrupt, if the count value reaches to",
        "Options": [
            "a) 00FFH",
            "b) FF00H",
            "c) 0FFFH",
            "d) FFFFH"
        ],
        "Answer": "Answer: d\nExplanation: The timer is an up-counter and generates an interrupt when the count has reached FFFFH."
    },
    {
        "id": 890,
        "Question": "The external interrupt that has the lowest priority among the following is",
        "Options": [
            "a) TF0",
            "b) TF1",
            "c) IE1",
            "d) NONE"
        ],
        "Answer": "Answer: c\nExplanation: The order of given interrupts from high to low priority is TF0, IE1 and TF1."
    },
    {
        "id": 891,
        "Question": "Among the five interrupts generated by 8051, the lowest priority is given to the interrupt",
        "Options": [
            "a) IE0",
            "b) TF1",
            "c) TF0",
            "d) RI"
        ],
        "Answer": "Answer: d\nExplanation: The interrupt, RI=TI (serial port) is given the lowest priority among all the interrupts."
    },
    {
        "id": 892,
        "Question": "Among the five interrupts generated by 8051, the highest priority is given to the interrupt",
        "Options": [
            "a) IE0",
            "b) TF1",
            "c) TF0",
            "d) IE1"
        ],
        "Answer": "Answer: a\nExplanation: The interrupt, IE0(External INT0) is given the highest priority among all the interrupts."
    },
    {
        "id": 893,
        "Question": "All the interrupts are enabled using a special function register called",
        "Options": [
            "a) interrupt priority register",
            "b) interrupt register",
            "c) interrupt function register",
            "d) interrupt enable register"
        ],
        "Answer": "Answer: d\nExplanation: All the interrupts are enabled using a special function register called interrupt enable register (IE) and their priorities are programmed using another special function register called interrupt priority register(IP)."
    },
    {
        "id": 894,
        "Question": "The number of bytes stored on the stack during one operation of PUSH or POP is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: As 8051 stack operations are 8-bit wide i.e. in an operation using PUSH or POP instruction, one byte of data is stored on a stack or retrieved from the stack. For implementing 16-bit operations, two 8-bit operations are cascaded."
    },
    {
        "id": 895,
        "Question": "The step involved in PUSH operation is",
        "Options": [
            "a) increment stack by 2 and store 8-bit content to address pointed to by SP",
            "b) decrement stack by 1 and store 16-bit content to address pointed to by SP",
            "c) increment stack by 1 and store 8-bit content to address pointed to by SP",
            "d) store 8-bit content to address pointed to by SP and then increment stack by 1"
        ],
        "Answer": "Answer: c\nExplanation: The PUSH instruction follows two steps.\n1. Increment stack by 1\n2. Store 8-bit content of the 8-bit address specified in the instruction to the address pointed to by SP."
    },
    {
        "id": 896,
        "Question": "The step involved in POP operation is",
        "Options": [
            "a) decrement stack by 2 and store 8-bit content to address pointed to by SP",
            "b) store 16-bit content to address pointed to by SP and decrement stack by 1",
            "c) decrement stack by 1 and store content of top of stack to address pointed to by SP",
            "d) store content of top of stack to address pointed to by SP and then decrement stack by 1"
        ],
        "Answer": "Answer: d\nExplanation: The POP instruction follows two steps.\n1. Store the contents of top of stack pointed to by SP register to the 8-bit memory specified in the instruction.\n2. Decrement stack by 1."
    },
    {
        "id": 897,
        "Question": "The 8051 stack is",
        "Options": [
            "a) auto-decrement during PUSH operations",
            "b) auto-increment during POP operations",
            "c) auto-decrement during POP operations",
            "d) auto-increment during PUSH operations"
        ],
        "Answer": "Answer: d\nExplanation: The 8051 stack is opposite to that in 8085 or 8086 i.e. in 8085 it is auto-decrement while in 8051 it is auto-increment during PUSH operations."
    },
    {
        "id": 898,
        "Question": "After reset, the stack pointer(SP) is initialized to the address of",
        "Options": [
            "a) internal ROM",
            "b) internal RAM",
            "c) external ROM",
            "d) external RAM"
        ],
        "Answer": "Answer: b\nExplanation: The stack pointer(SP) is an 8-bit register and is initialized to internal RAM address 07H after reset."
    },
    {
        "id": 899,
        "Question": "Which of the following is not an addressing mode of 8051?",
        "Options": [
            "a) register instructions",
            "b) register specific instructions",
            "c) indexed addressing",
            "d) none"
        ],
        "Answer": "Answer: d\nExplanation: The six addressing modes of 8051 are\n1. Direct addressing\n2. Indirect addressing\n3. Register instructions\n4. Register specific(Register Implicit) instructions\n5. Immediate mode\n6. Indexed addressing."
    },
    {
        "id": 900,
        "Question": "The symbol, ‘addr 16’ represents the 16-bit address which is used by the instructions to specify the",
        "Options": [
            "a) destination address of CALL",
            "b) source address of JUMP",
            "c) destination address of call or jump",
            "d) source address of call or jump"
        ],
        "Answer": "Answer: c\nExplanation: The symbol, ‘addr 16’ represents the 16-bit destination address which is used by the LCALL or LJMP instruction to specify the call or jump destination address, within 64 Kbytes program memory."
    },
    {
        "id": 901,
        "Question": "The storage of addresses that can be directly accessed is",
        "Options": [
            "a) external data RAM",
            "b) internal data ROM",
            "c) internal data RAM and SFRS",
            "d) external data ROM and SFRS"
        ],
        "Answer": "Answer: c\nExplanation: Only internal data RAM and SFRS can be directly addressed in direct addressing mode."
    },
    {
        "id": 902,
        "Question": "The address register for storing the 16-bit addresses can only be",
        "Options": [
            "a) stack pointer",
            "b) data pointer",
            "c) instruction register",
            "d) accumulator"
        ],
        "Answer": "Answer: b\nExplanation: The address register for storing the 16-bit addresses can only be data pointer."
    },
    {
        "id": 903,
        "Question": "The address register for storing the 8-bit addresses can be",
        "Options": [
            "a) R0 of the selected bank of register",
            "b) R1 of the selected bank of register",
            "c) Stack pointer",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The registers R0 and R1 of the selected bank of registers or stack pointer can be used as address registers for storing the 8-bit addresses."
    },
    {
        "id": 904,
        "Question": "The instruction, ADD A, R7 is an example of",
        "Options": [
            "a) register instructions",
            "b) register specific instructions",
            "c) indexed addressing",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: In register instructions addressing mode, operands are stored in the registers R0-R7 of the selected register bank. One of these registers is specified in the instruction."
    },
    {
        "id": 905,
        "Question": "The addressing mode, in which the instructions has no source and destination operands is",
        "Options": [
            "a) register instructions",
            "b) register specific instructions",
            "c) direct addressing",
            "d) indirect addressing"
        ],
        "Answer": "Answer: b\nExplanation: In register specific instructions addressing mode, the instructions don’t have source and destination operands. Some of the instructions always operate only on a specific register."
    },
    {
        "id": 906,
        "Question": "The instruction, RLA performs",
        "Options": [
            "a) rotation of address register to left",
            "b) rotation of accumulator to left",
            "c) rotation of address register to right",
            "d) rotation of accumulator to right"
        ],
        "Answer": "Answer: b\nExplanation: The instruction, RLA rotates accumulator left."
    },
    {
        "id": 907,
        "Question": "The instruction, ADD A, #100 performs",
        "Options": [
            "a) 100(decimal) is added to contents of address register",
            "b) 100(decimal) is subtracted from the accumulator",
            "c) 100(decimal) is added to contents of an accumulator",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: Immediate data 100(decimal) is added to the contents of the accumulator."
    },
    {
        "id": 908,
        "Question": "In which of these addressing modes, a constant is specified in the instruction, after the opcode byte?",
        "Options": [
            "a) register instructions",
            "b) register specific instructions",
            "c) direct addressing",
            "d) immediate mode"
        ],
        "Answer": "Answer: d\nExplanation: In immediate mode, an immediate data, i.e. a constant is specified in the instruction, after the opcode byte."
    },
    {
        "id": 909,
        "Question": "The only memory which can be accessed using indexed addressing mode is",
        "Options": [
            "a) RAM",
            "b) ROM",
            "c) Main memory",
            "d) Program memory"
        ],
        "Answer": "Answer: d\nExplanation: Only program memory can be accessed using the indexed addressing mode."
    },
    {
        "id": 910,
        "Question": "The data address of look-up table is found by adding the contents of",
        "Options": [
            "a) accumulator with that of program counter",
            "b) accumulator with that of program counter or data pointer",
            "c) data register with that of program counter or accumulator",
            "d) data register with that of program counter or data pointer"
        ],
        "Answer": "Answer: b\nExplanation: The look-up table data address is found out by adding the contents of register accumulator with that of the program counter or data pointer."
    },
    {
        "id": 911,
        "Question": "Which of the following is not an instruction of 8051 instructions?",
        "Options": [
            "a) arithmetic instructions",
            "b) boolean instructions",
            "c) logical instructions",
            "d) none"
        ],
        "Answer": "Answer: d\nExplanation: The 8051 instructions are categorized as\n1. Data transfer instructions\n2. Arithmetic instructions\n3. Logical instructions\n4. Boolean instructions\n5. Control transfer instructions."
    },
    {
        "id": 912,
        "Question": "The operations performed by data transfer instructions are on",
        "Options": [
            "a) bit data",
            "b) byte data",
            "c) 16-bit data",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The data transfer instructions implement a bit, byte, 16-bit data transfer operations between the SRC(source) and DST(destination) operands."
    },
    {
        "id": 913,
        "Question": "Which of the following is true while executing data transfer instructions?",
        "Options": [
            "a) program counter is not accessible",
            "b) restricted bit-transfer operations are allowed",
            "c) both operands can be direct/indirect register operands",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: In data transfer instructions,\n1. Program counter is not accessible.\n2. Restricted bit-transfer operations are allowed.\n3. Both operands can be direct/indirect register operands.\n4. BOth operands can be internal direct data memory operands."
    },
    {
        "id": 914,
        "Question": "The logical instruction that affects the carry flag during its execution is",
        "Options": [
            "a) XRL A;",
            "b) ANL A;",
            "c) ORL A;",
            "d) RLC A;"
        ],
        "Answer": "Answer: d\nExplanation: The logical instructions that doesn’t affect the carry flag are, ANL, ORL and XRL. The logical instructions that affect the carry flag during its execution are RL, RLC, RRC and RR."
    },
    {
        "id": 915,
        "Question": "The instruction that is used to complement or invert the bit of a bit addressable SFR is",
        "Options": [
            "a) CLR C",
            "b) CPL C",
            "c) CPL Bit",
            "d) ANL Bit"
        ],
        "Answer": "Answer: c\nExplanation: The instruction, CPL Bit is used to complement or invert the bit of a bit addressable SFR or RAM."
    },
    {
        "id": 916,
        "Question": "The instructions that change the sequence of execution are",
        "Options": [
            "a) conditional instructions",
            "b) logical instructions",
            "c) control transfer instructions",
            "d) data transfer instructions"
        ],
        "Answer": "Answer: c\nExplanation: The control transfer instructions transfer the control of execution or change the sequence of execution conditionally or unconditionally."
    },
    {
        "id": 917,
        "Question": "The control transfer instructions are divided into",
        "Options": [
            "a) explicit and implicit control transfer instructions",
            "b) conditional and unconditional control transfer instructions",
            "c) auto control and self control transfer instructions",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The control transfer instructions are divided into conditional and unconditional control transfer instructions."
    },
    {
        "id": 918,
        "Question": "The conditional control transfer instructions check a bit condition which includes any bit of",
        "Options": [
            "a) bit addressable RAM",
            "b) bit addressable SFRs",
            "c) content of accumulator",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The conditional control transfer instructions check a bit condition which includes any bit of bit addressable RAM or bit addressable SFRs or content of accumulator for transferring the control to the specified jump location."
    },
    {
        "id": 919,
        "Question": "All conditional jumps are",
        "Options": [
            "a) absolute jumps",
            "b) long jumps",
            "c) short jumps",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: All conditional jumps are short jumps."
    },
    {
        "id": 920,
        "Question": "The first byte of a short jump instruction represents",
        "Options": [
            "a) opcode byte",
            "b) relative address",
            "c) opcode field",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The short jump instruction has two byte instruction. The first byte represents opcode byte and second byte represents an 8-bit relative address."
    },
    {
        "id": 921,
        "Question": "In logical instructions, the immediate data can be an operand for",
        "Options": [
            "a) increment operation",
            "b) decrement operation",
            "c) single operand instruction",
            "d) none"
        ],
        "Answer": "Answer: d\nExplanation: In logical instructions, the immediate data can’t be an operand for increment/decrement or any other single operand instruction."
    },
    {
        "id": 922,
        "Question": "If the most significant bit of relative address byte is 1, then the short jump instruction is",
        "Options": [
            "a) forward jump",
            "b) back jump",
            "c) either forward or back jump",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: If the most significant bit of relative address byte is 1, then the short jump instruction is back jump, else it is considered as forward jump."
    },
    {
        "id": 923,
        "Question": "The first byte of an absolute jump instruction consists of",
        "Options": [
            "a) 3 LSBs of opcode and 5 MSBs of 11-bit address",
            "b) 5 MSBs of opcode and 3 LSBs of 11-bit address",
            "c) 6 MSBs of opcode and 1 LSB of 11-bit address",
            "d) 5 LSBs of opcode and 3 MSBs of 11-bit address"
        ],
        "Answer": "Answer: d\nExplanation: The first byte of an absolute jump instruction consists of 5 LSBs of opcode and 3 MSBs of 11-bit address. The next byte carries the least significant 8 bits of the 11-bit address."
    },
    {
        "id": 924,
        "Question": "The third byte of the long jump instruction is",
        "Options": [
            "a) opcode",
            "b) 5 LSBs of opcode",
            "c) higher byte of jump location or subroutine",
            "d) lower byte of jump location or subroutine"
        ],
        "Answer": "Answer: c\nExplanation: The third byte of the long jump instruction is a higher byte of jump location or subroutine."
    },
    {
        "id": 925,
        "Question": "The absolute jump instruction is intended mainly for a jump within a memory space of",
        "Options": [
            "a) 2 bytes",
            "b) 2 Kbytes",
            "c) 2 Mbytes",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: The absolute jump instruction is intended mainly for a jump within a memory space of 2 Kbytes."
    },
    {
        "id": 926,
        "Question": "The LJMP instruction is very useful in programming in the external code memory space of",
        "Options": [
            "a) 32 MB",
            "b) 64 MB",
            "c) 32 KB",
            "d) 64 KB"
        ],
        "Answer": "Answer: d\nExplanation: The LJMP instruction is very useful in programming in the external code memory space of 64 KB."
    },
    {
        "id": 927,
        "Question": "Which of the following is not an unconditional control transfer instruction?",
        "Options": [
            "a) JMP",
            "b) RET",
            "c) JNC",
            "d) CALL"
        ],
        "Answer": "Answer: c\nExplanation: The instructions, JMP, RET, RETI, CALL are the unconditional control transfer instructions."
    },
    {
        "id": 928,
        "Question": "The conditional control transfer instructions use",
        "Options": [
            "a) status flags",
            "b) bits of bit addressable RAM",
            "c) SFRs termed bit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The conditional control transfer instructions use status flags or bits of bit addressable RAM or SFRs termed bit."
    },
    {
        "id": 929,
        "Question": "Which of the following is not a conditional control transfer instruction?",
        "Options": [
            "a) JC",
            "b) JBC",
            "c) JNC",
            "d) NONE"
        ],
        "Answer": "Answer: d\nExplanation: The instructions, JC, JBC, JNC, JB and JNB are the conditional control transfer instructions."
    },
    {
        "id": 930,
        "Question": "The mnemonic used to perform a subtraction of source with an 8-bit data and jumps to specified relative address if subtraction is non-zero is",
        "Options": [
            "a) DJNZ",
            "b) CJNE",
            "c) JZ",
            "d) JNC"
        ],
        "Answer": "Answer: b\nExplanation: The CJNE instruction perform a subtraction of source with an 8-bit data and jumps to specified relative address only if the result of the subtraction is non-zero, else continues to the next instruction."
    },
    {
        "id": 931,
        "Question": "The mnemonic, JNB is used to jump to the specified relative address only if",
        "Options": [
            "a) specified bit=1",
            "b) specified bit=0",
            "c) specified bit is non-recursive",
            "d) none"
        ],
        "Answer": "Answer: a\nExplanation: The mnemonic, JNB is used to jump to the specified relative address only if specified bit=1, else continues to the next instruction."
    },
    {
        "id": 932,
        "Question": "The type of operand that is not allowed to use in boolean instructions of 8051 is",
        "Options": [
            "a) direct register operands",
            "b) indirect register operands",
            "c) immediate bit",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: In boolean instructions, the immediate bit is not allowed as an operand."
    },
    {
        "id": 933,
        "Question": "In boolean instructions, the flag that is the only allowed destination operand for two operand instructions is",
        "Options": [
            "a) overflow flag",
            "b) underflow flag",
            "c) auxiliary flag",
            "d) carry flag"
        ],
        "Answer": "Answer: d\nExplanation: Carry flag(C) is the only allowed destination operand for two operand instructions in boolean instructions."
    },
    {
        "id": 934,
        "Question": "Which of the following is not one of the SFR addresses of the ports of 8051?",
        "Options": [
            "a) 80H",
            "b) 90H",
            "c) A0H",
            "d) NONE"
        ],
        "Answer": "Answer: d\nExplanation: The SFR addresses of the ports P0, P1, P2 and P3 are 80H, 90H, A0H and B0H respectively."
    },
    {
        "id": 935,
        "Question": "Each port line of a port can individually source a current of upto",
        "Options": [
            "a) 0.2 mA",
            "b) 0.25 mA",
            "c) 0.5 mA",
            "d) 0.75 mA"
        ],
        "Answer": "Answer: c\nExplanation: Each port line of a port can individually source a current of upto 0.5 mA."
    },
    {
        "id": 936,
        "Question": "Each port line of a port can individually sink a current of upto",
        "Options": [
            "a) 2 mA",
            "b) 8 mA",
            "c) 5 mA",
            "d) 1 mA"
        ],
        "Answer": "Answer: b\nExplanation: Each port line of a port can individually sink a current of upto 8 mA."
    },
    {
        "id": 937,
        "Question": "The number of TTL inputs that can be sinked by the port 0 when a logic 0 is sent to a port line as an output port is",
        "Options": [
            "a) 2",
            "b) 4",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: d\nExplanation: When a logic 0 is sent to a port line as an output port, it can sink 8 LS TTL inputs. Port 0 is used as data bus during external interfacing whenever required."
    },
    {
        "id": 938,
        "Question": "The open drain bidirectional (input or output) port with internal pullups is",
        "Options": [
            "a) Port 0",
            "b) Port 1",
            "c) Port 2",
            "d) Port 3"
        ],
        "Answer": "Answer: a\nExplanation: Port 0 is an open drain bidirectional (input or output) port with internal pullups. Port 1, Port 2, Port 3 are 8-bit bidirectional ports."
    },
    {
        "id": 939,
        "Question": "The port that can source or sink 4 LS TTL inputs when being used as an output port on each of its line is",
        "Options": [
            "a) Port 1",
            "b) Port 2",
            "c) Port 3",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The ports P1, P2 and P3 can source or sink 4 LS TTL inputs when being used as an output port on each of its line."
    },
    {
        "id": 940,
        "Question": "The port that will source a current of 500 micro amperes when being used as input ports is",
        "Options": [
            "a) 0.5 mA",
            "b) 0.25 mA",
            "c) 250 micro amperes",
            "d) 500 micro amperes"
        ],
        "Answer": "Answer: d\nExplanation: Port 3 pins which are externally pulled low when being used as input pins will source current of 500 micro amperes."
    },
    {
        "id": 941,
        "Question": "If the EA(active low) signal is grounded then the execution",
        "Options": [
            "a) directly start from main memory",
            "b) directly start from 16 bit address in main memory",
            "c) directly start from 16 bit address in program memory",
            "d) directly start from RAM"
        ],
        "Answer": "Answer: c\nExplanation: For interfacing external program memory, EA(active low) pin must be grounded. If the EA(active low) signal is grounded then the execution will start directly from the 16-bit address 0000H in external program memory."
    },
    {
        "id": 942,
        "Question": "When the port lines of a port are to be used as input lines then the value that must be written to the port address is",
        "Options": [
            "a) F0H",
            "b) 0FH",
            "c) FFH",
            "d) 00H"
        ],
        "Answer": "Answer: c\nExplanation: When the port lines of a port are to be used as input lines then ‘FF’H must be written to the port address."
    },
    {
        "id": 943,
        "Question": "Port 1 lines are used during programming of",
        "Options": [
            "a) external EPROM and EEPROM",
            "b) external ROM and RAM",
            "c) internal ROM and RAM",
            "d) internal EPROM and EEPROM"
        ],
        "Answer": "Answer: d\nExplanation: Port 1 lines are used as lower byte of 16-bit address bus during programming of internal EPROM or EEPROM."
    },
    {
        "id": 944,
        "Question": "The configuration in which each LED receives operating current of 8 mA from power supply while the port lines sink the current on each port line is",
        "Options": [
            "a) common port configuration",
            "b) common anode configuration",
            "c) common cathode configuration",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: The common anode configuration is preferred to that of other configurations as in common anode configuration, each LED receives operating current of 8 mA from power supply while the port lines sink the current on each port line."
    },
    {
        "id": 945,
        "Question": "If EA(active low) signal =1, then the execution starts from",
        "Options": [
            "a) internal EPROM",
            "b) flash RAM",
            "c) internal EPROM or flash RAM",
            "d) none"
        ],
        "Answer": "Answer: c\nExplanation: If EA(active low) signal =1, then the execution starts from an internal EPROM or flash RAM address 000H, can continue upto FFFH address and then for higher addresses it will go into external memory."
    },
    {
        "id": 946,
        "Question": "The pin that is grounded for interfacing external EPROM is",
        "Options": [
            "a) EA(active low)",
            "b) PSEN(active low)",
            "c) OE(active low)",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The EA(active low) pin is grounded for interfacing external EPROM. The PSEN(active low) is used for interfacing EPROM i.e. it acts as an OE(active low) input to EPROM."
    },
    {
        "id": 947,
        "Question": "The step that is involved in the procedure of memory interfacing with 8051 is",
        "Options": [
            "a) data bus is connected to data lines of memory chips",
            "b) PSEN(active low) is connected to OE(active low) of EPROM chips",
            "c) writing address map of memory chip in bit form",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The procedure of memory interfacing with 8051 includes, data bus connection to data lines of memory chips, PSEN(active low) connected to OE(active low) of EPROM chips and writing address map of memory chip in bit form."
    },
    {
        "id": 948,
        "Question": "The device that is used for deriving chip select signals is",
        "Options": [
            "a) Logic gates",
            "b) Multiplexers",
            "c) PLAs and EPROMs",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The logic gates and multiplexers are most commonly used for deriving chip select signals. The advanced circuits like PLAs and EPROMs are also used for deriving chip select signals."
    },
    {
        "id": 949,
        "Question": "For deriving chip selects of isolated memory or IO devices, the gates that are traditionally used are",
        "Options": [
            "a) NOR and NAND",
            "b) NAND and NOT",
            "c) NOT and NOR",
            "d) AND, OR and NOT"
        ],
        "Answer": "Answer: b\nExplanation: For deriving chip selects of isolated memory or IO devices, the NAND and NOT gates are traditionally used."
    },
    {
        "id": 950,
        "Question": "The current that is required for a LED for an appropriate glow is",
        "Options": [
            "a) 6-8 mA",
            "b) 4-6 mA",
            "c) 8-10 mA",
            "d) 10-12 mA"
        ],
        "Answer": "Answer: c\nExplanation: For appropriate glow, a LED typically requires 8-10 mA with around 1.6 Volts."
    },
    {
        "id": 951,
        "Question": "The maximum current that can be sinked totally by all the ports of 8051 is",
        "Options": [
            "a) 61 mA",
            "b) 81 mA",
            "c) 91 mA",
            "d) 71 mA"
        ],
        "Answer": "Answer: d\nExplanation: All the ports together (4 ports) should not be made to sink more than 71 mA."
    },
    {
        "id": 952,
        "Question": "The number of LEDs that can be connected to a port of 8051, if all are expected to glow simultaneously is",
        "Options": [
            "a) 6",
            "b) 8",
            "c) 10",
            "d) 12"
        ],
        "Answer": "Answer: b\nExplanation: If 8 LEDs are connected to a port of 8051, and if all are expected to glow simultaneously, the total current sinked by the 8051 port will be 8×8=64 mA (since min voltage for an LED to glow=8 mA) which is less than the maximum 71 mA."
    },
    {
        "id": 953,
        "Question": "Which is true in interfacing 7 segment code display?",
        "Options": [
            "a) transmitted by second port",
            "b) display is selected by third port",
            "c) display is selected by second port",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: The 7-segment code of a digit is transmitted by the first port and the display is selected by second port. As soon as the display is selected by the second port, the digit starts glowing on that display position."
    },
    {
        "id": 954,
        "Question": "After the display is selected by second port, then the digit (LED) glows for a duration of",
        "Options": [
            "a) 5 msec",
            "b) 10 msec",
            "c) 2 msec",
            "d) 6 msec"
        ],
        "Answer": "Answer: a\nExplanation: The unit(LED) glows for a duration of 5 msec."
    },
    {
        "id": 955,
        "Question": "The number of scans of the complete 8-digit display that can be carried out in one second is",
        "Options": [
            "a) 15",
            "b) 25",
            "c) 35",
            "d) 55"
        ],
        "Answer": "Answer: b\nExplanation: Starting from either right most or left most digit, every digit glows for 5 msec one by one. Thus one scan of the 8 digit display requires 40 msec. Thus in one second, 25 scans of the complete 8-digit display can be carried out."
    },
    {
        "id": 956,
        "Question": "To convert its current output into a voltage, the DAC 0808 is connected with",
        "Options": [
            "a) Transistor(BJT) externally",
            "b) FET externally",
            "c) OPAMP externally",
            "d) OPAMP internally"
        ],
        "Answer": "Answer: c\nExplanation: the DAC 0808 is connected with OPAMP externally, to convert its current output into voltage."
    },
    {
        "id": 957,
        "Question": "The external interrupts of 8051 can be enabled by",
        "Options": [
            "a) 4 LSBs of TCON register",
            "b) Interrupt enable",
            "c) priority register",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The external interrupts namely INT0(active low) and INT1(active low) can be enabled and programmed using the least significant four bits of TCON register and the Interrupt enable and priority registers."
    },
    {
        "id": 958,
        "Question": "The bits that control the external interrupts are",
        "Options": [
            "a) ET0 and ET1",
            "b) ET1 and ET2",
            "c) EX0 and EX1",
            "d) EX1 and EX2"
        ],
        "Answer": "Answer: c\nExplanation: The bits, EX0 and EX1 individually control the external interrupts, INT0(active low) and INT1(active low). If INT0(active low) and INT1(active low) interrupts are to be enabled then the bits EX0 and EX1 must be set respectively."
    },
    {
        "id": 959,
        "Question": "EA bit is used to",
        "Options": [
            "a) enable or disable external interrupts",
            "b) enable or disable internal interrupts",
            "c) enable or disable all the interrupts",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: Using EA bit, all the interrupts can be enabled or disabled. Using the individual respective bit, the respective interrupt can be enabled or disabled."
    },
    {
        "id": 960,
        "Question": "The number of priority levels that each interrupt of 8051 have is",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Each interrupts level of 8051 can have two levels of priority namely level 0 and level 1. Level 1 is considered as a higher priority level compared to level 0."
    },
    {
        "id": 961,
        "Question": "The priority level of an interrupt of 8051 for which SI(serial interrupt) interrupt is programmed is",
        "Options": [
            "a) level 0",
            "b) level 1",
            "c) level 0 or level 1",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: SI interrupt is programmed for level 1 priority."
    },
    {
        "id": 962,
        "Question": "The interrupt bit that when set works at level 1, and otherwise at level 0 is",
        "Options": [
            "a) PT1",
            "b) PT0",
            "c) PX1",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The bits, PT1, PT0, PX0 and PX1 when set, work at level 1, otherwise at level 0."
    },
    {
        "id": 963,
        "Question": "All the interrupts at level 1 are polled in the second clock cycle of the",
        "Options": [
            "a) forth T state",
            "b) fifth T state",
            "c) third T state",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: All the interrupts at level 1 are polled or sensed in the second clock cycle of the fifth T state or 9th clock cycle out of 12 clock cycles. Then all the interrupts at level 0 are also polled in the same cycle."
    },
    {
        "id": 964,
        "Question": "The minimum duration of the active low interrupt pulse for being sensed without being lost must be",
        "Options": [
            "a) greater than one machine cycle",
            "b) equal to one machine cycle",
            "c) greater than 2 machine cycles",
            "d) equal to 2 machine cycles"
        ],
        "Answer": "Answer: b\nExplanation: The minimum duration of the active low interrupt pulse should be equal to the duration of one machine cycle for being sensed, else it will be lost."
    },
    {
        "id": 965,
        "Question": "If two interrupts, of higher priority and lower priority occur simultaneously, then the service provided is for",
        "Options": [
            "a) interrupt of lower priority",
            "b) interrupt of higher priority",
            "c) lower & higher priority interrupts",
            "d) none of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: If two interrupts, occur simultaneously, then the one with higher priority level and early polling sequence will receive service. The other one with lower priority may get lost there, as there is no mechanism for storing the interrupt requests."
    },
    {
        "id": 966,
        "Question": "For an interrupt to be guaranteed served it should have duration of",
        "Options": [
            "a) one machine cycle",
            "b) three machine cycles",
            "c) two machine cycles",
            "d) four machine cycles"
        ],
        "Answer": "Answer: c\nExplanation: For an interrupt to be guaranteed served it should have duration of two machine cycles."
    },
    {
        "id": 967,
        "Question": "The service to an interrupt will be delayed if it appears during the execution of",
        "Options": [
            "a) RETI instruction",
            "b) Instruction that writes to IE register",
            "c) Instruction that writes to IP register",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The service to an interrupt will be delayed if it appears during the execution of RETI instruction or the instruction that writes to IE/IP registers."
    },
    {
        "id": 968,
        "Question": "The serial communication is",
        "Options": [
            "a) cheaper communication",
            "b) requires less number of conductors",
            "c) slow process of communication",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The serial communication requires less number of conductors and thus it is cheaper. It is slow as the bits are transmitted one by one along with start, stop and parity bits."
    },
    {
        "id": 969,
        "Question": "The serial communication is used for",
        "Options": [
            "a) short distance communication",
            "b) long distance communication",
            "c) short and long distance communication",
            "d) communication for a certain range of distance"
        ],
        "Answer": "Answer: b\nExplanation: Serial communication is more popular for communication over longer distances as it requires less number of conductors."
    },
    {
        "id": 970,
        "Question": "The mcs 51 architecture supports",
        "Options": [
            "a) serial transmission and reception",
            "b) simultaneous transmission and reception",
            "c) transmission and reception of data using serial communication interface",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The mcs 51 architecture supports simultaneous transmission and reception of binary data byte by byte i.e. full duplex mode of communication. It supports serial transmission and reception of data using standard serial communication interface and baud rates."
    },
    {
        "id": 971,
        "Question": "The number of bits transmitted or received per second is defined as",
        "Options": [
            "a) transmission rate",
            "b) reception rate",
            "c) transceiver rate",
            "d) baud rate"
        ],
        "Answer": "Answer: d\nExplanation: Here, baud rate can be defined as the number of bits transmitted or received per second."
    },
    {
        "id": 972,
        "Question": "The task of converting the byte into serial form and transmitting it bit by bit along with start, stop and parity bits is carried out by",
        "Options": [
            "a) reception unit",
            "b) serial communication unit",
            "c) transmission unit",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: c\nExplanation: the serial communication unit consists of transmission unit and reception unit. The task of converting the byte into serial form and transmitting it bit by bit along with start, stop and parity bits is carried out by transmission unit."
    },
    {
        "id": 973,
        "Question": "The transmission unit does not require assistance from processor if once a byte for transmission is written to",
        "Options": [
            "a) SCON register",
            "b) SBUF register",
            "c) SFR address",
            "d) Any of the mentioned"
        ],
        "Answer": "Answer: b\nExplanation: once a byte for transmission is written to the serial buffer(SBUF) register, the transmission unit does not require assistance from a processor."
    },
    {
        "id": 974,
        "Question": "The common unit shared by the receiver unit and transmission unit of serial communication unit is",
        "Options": [
            "a) SCON(Serial Port Control) Register",
            "b) SBUF(Serial Buffer) register",
            "c) 8-bit serial data interface",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The transmission unit and receiver unit both are controlled by using a common SCON(Serial Port Control) Register. Also both units share a common serial buffer(SBUF) register which is a common 8-bit serial data interface."
    },
    {
        "id": 975,
        "Question": "During serial reception, the buffer that receives serial bits and converts to a byte is",
        "Options": [
            "a) receive buffer 0",
            "b) receive buffer 1",
            "c) receive buffer 2",
            "d) none"
        ],
        "Answer": "Answer: b\nExplanation: During serial reception, the receive buffer 1 receives serial bits and converts to a byte, it then transfers the received parallel byte in receive buffer 2."
    },
    {
        "id": 976,
        "Question": "If SM0=1, SM1=0, then the transceiver selected is",
        "Options": [
            "a) 8-bit synchronous",
            "b) 9-bit synchronous",
            "c) 8-bit asynchronous",
            "d) 9-bit asynchronous"
        ],
        "Answer": "Answer: d\nExplanation: If SM0=1, SM1=0, then the 9-bit asynchronous transceiver is selected."
    },
    {
        "id": 977,
        "Question": "If the microcontroller is expected to communicate in a multiprocessor system, then the required condition is",
        "Options": [
            "a) SM0 is set",
            "b) SM1 is set",
            "c) SM2 is set",
            "d) REN is set"
        ],
        "Answer": "Answer: c\nExplanation: The bit, SM2 is set if the microcontroller is expected to communicate in a multiprocessor system."
    },
    {
        "id": 978,
        "Question": "In mode 2, the baud rate depends only on",
        "Options": [
            "a) SMOD bit",
            "b) SCON bit",
            "c) Oscillator clock frequency",
            "d) SMOD bit and oscillator clock frequency"
        ],
        "Answer": "Answer: d\nExplanation: In mode 2, the baud rate depends only on SMOD bit and oscillator clock frequency."
    },
    {
        "id": 979,
        "Question": "The mode that offers the most secured parity enabled data communication at lower baud rates is",
        "Options": [
            "a) mode 2",
            "b) mode 1",
            "c) mode 0",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: a\nExplanation: The mode 3 offers the most secured parity enabled data communication at lower baud rates of mode 1."
    },
    {
        "id": 980,
        "Question": "The power control register is",
        "Options": [
            "a) used for power saving during idle state",
            "b) used for eventual power off to 8051 chip",
            "c) non-bit addressable register",
            "d) all of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: The power control register is used for power saving during idle state of the microcontroller and eventual power off to the microcontroller chip. It has SMOD bit which is used to double the baud rate."
    },
    {
        "id": 981,
        "Question": "The state of signals in idle mode is",
        "Options": [
            "a) ALE is high",
            "b) PSEN is high",
            "c) PSEN(active low) is high",
            "d) ALE and PSEN(active low) are high"
        ],
        "Answer": "Answer: d\nExplanation: ALE and PSEN(active low) remain high in Idle mode."
    },
    {
        "id": 982,
        "Question": "To come out of idle mode, the external interrupt that is enabled is",
        "Options": [
            "a) SI(serial)",
            "b) INT0",
            "c) INT1",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: To come out of idle mode, any external interrupt that is enabled like SI(Serial), INT0 and INT1."
    },
    {
        "id": 983,
        "Question": "The microcontroller enters into power down mode when",
        "Options": [
            "a) SMOD bit of PCON is set",
            "b) GF1 bit of PCON is set",
            "c) PD bit of PCON is set",
            "d) GF2 bit of PCON is set"
        ],
        "Answer": "Answer: c\nExplanation: If the PD bit of PCON register is set, it enters power down mode."
    },
    {
        "id": 984,
        "Question": "The clock signal is disabled to all parts of 8051 in",
        "Options": [
            "a) normal mode",
            "b) idle mode",
            "c) power down mode",
            "d) addressing mode"
        ],
        "Answer": "Answer: c\nExplanation: In power down mode, the clock signal to all parts of 8051 chip is disabled."
    },
    {
        "id": 985,
        "Question": "During power down to save battery, the supply voltage can be reduced to a value of",
        "Options": [
            "a) 4 volts",
            "b) 2 volts",
            "c) 8 volts",
            "d) 1 volt"
        ],
        "Answer": "Answer: b\nExplanation: The supply voltage can be reduced to a value of around 2 volts, during power down to save battery."
    },
    {
        "id": 986,
        "Question": "The signal that only pulls the microcontroller(8051) out of the power down mode is",
        "Options": [
            "a) CLEAR",
            "b) LEAVE",
            "c) RESET",
            "d) EXIT"
        ],
        "Answer": "Answer: c\nExplanation: Only Reset signal can pull 8051 out of the power down mode."
    },
    {
        "id": 987,
        "Question": "The state of signals in power down mode is",
        "Options": [
            "a)  ALE is high",
            "b) PSEN is low",
            "c) ALE and PSEN(active low) are high",
            "d) ALE and PSEN(active low) are low"
        ],
        "Answer": "Answer: d\nExplanation: ALE and PSEN(active low) remain low in power down mode of 8051."
    },
    {
        "id": 988,
        "Question": "In power down mode,",
        "Options": [
            "a) Port pins maintain their logic levels",
            "b) SFRs maintain their logic levels",
            "c) Clock signal is disabled",
            "d) All of the mentioned"
        ],
        "Answer": "Answer: d\nExplanation: In power down mode, the clock signal is disabled and all the port pins and respective SFRs maintain their logic levels."
    },
    {
        "id": 989,
        "Question": "The SMOD bit is used to",
        "Options": [
            "a) decrease the baud rate by 2",
            "b) increase the baud rate by 4",
            "c) increase the baud rate by 2",
            "d) triple the baud rate"
        ],
        "Answer": "Answer: c\nExplanation: The SMOD bit is used to double the baud rate."
    }
]