[
    {
        "id": 1,
        "Question": "If the properties of the form are not listed alphabetically, click __________ button to make it alphabetical.",
        "Options": [
            "a) Lexicographical button",
            "b) Alphabetical button",
            "c) A-Z button",
            "d) Arrange button"
        ],
        "Answer": "Answer: b\nExplanation: If the properties of a form are not listed alphabetically click on Alphabetical button to make it alphabetical."
    },
    {
        "id": 2,
        "Question": "What is a class definition?",
        "Options": [
            "a) It defines object",
            "b) It defines the appearance and behavior of an object",
            "c) It defines namespace",
            "d) It is a prototype"
        ],
        "Answer": "Answer: b\nExplanation: A class definition is a block of code that specifies an object’s appearance and behavior."
    },
    {
        "id": 3,
        "Question": "What does namespace contain?",
        "Options": [
            "a) Code that defines a group of related classes",
            "b) Code to define hierarchy",
            "c) Contains object definition",
            "d) Contains class definition"
        ],
        "Answer": "Answer: a\nExplanation: Namespace contains a code that defines a group of related classes."
    },
    {
        "id": 4,
        "Question": "Form is called as the __________",
        "Options": [
            "a) object",
            "b) dot member access operator",
            "c) instance of a class",
            "d) class"
        ],
        "Answer": "Answer: b\nExplanation: Form is called the dot member access operator. It indicates the hierarchy of namespace rather than that folder."
    },
    {
        "id": 5,
        "Question": "Hungarian notations name are entered using __________",
        "Options": [
            "a) camel case",
            "b) upper case",
            "c) lower case",
            "d) both alphabets and numbers"
        ],
        "Answer": "Answer: a\nExplanation: In Hungarian notation, the first 3 characters identify the object and the next characters identify the purpose."
    },
    {
        "id": 6,
        "Question": "Where does the form’s Text Property appear?",
        "Options": [
            "a) Title bar",
            "b) In Text box in the form",
            "c) Caption bar",
            "d) Text bar"
        ],
        "Answer": "Answer: a\nExplanation: Form’s Text Property appears in the Title bar."
    },
    {
        "id": 7,
        "Question": "What does the Start Position Property determine?",
        "Options": [
            "a) initial position on the screen",
            "b) starting position on the screen",
            "c) top left corner of the screen",
            "d) middle of the screen"
        ],
        "Answer": "Answer: a\nExplanation: The Start Position Property is used to determine the form’s initial position on the screen."
    },
    {
        "id": 8,
        "Question": "The size property contains the size of __________",
        "Options": [
            "a) form",
            "b) text on the form",
            "c) size of any object such as textbox, button, etc on the form",
            "d) size of the screen"
        ],
        "Answer": "Answer: a\nExplanation: The size property indicates the size of the form."
    },
    {
        "id": 9,
        "Question": "The size property contains two numbers separated by comma, and a space. These numbers are __________",
        "Options": [
            "a) width in pixel, height in pixel",
            "b) height in pixel, width in pixel",
            "c) height in cm, width in cm",
            "d) width in cm, height in cm"
        ],
        "Answer": "Answer: a\nExplanation: The first number represents the width in pixel and the second number represents the height in pixel."
    },
    {
        "id": 10,
        "Question": "Which is used to restore a property’s value?",
        "Options": [
            "a) Restore button",
            "b) Reset button",
            "c) Default button",
            "d) Back button"
        ],
        "Answer": "Answer: b\nExplanation: Reset button is used to restore the property’s value to its default."
    },
    {
        "id": 11,
        "Question": "Who displays the list of projects contained in current solution?",
        "Options": [
            "a) Solution Explorer Window",
            "b) List Window",
            "c) Project Window",
            "d) Catalogue Window"
        ],
        "Answer": "Answer: a\nExplanation: The Solution Explorer Window provides you with an organized view of your projects and their files as well as ready access to the commands that pertain to them. A toolbar associated with this window offers commonly used commands for the item you highlight in this list."
    },
    {
        "id": 12,
        "Question": "Who displays the item contained in each project?",
        "Options": [
            "a) Record Window",
            "b) List Window",
            "c) Solution Explorer Window",
            "d) Index Window"
        ],
        "Answer": "Answer: c\nExplanation: The standard Solution Explorer view presents the active solution as a logical container for one or more projects and the items associated with them. You can open project items for modification and perform other management tasks directly from this view."
    },
    {
        "id": 13,
        "Question": "By which button you can display the additional items?",
        "Options": [
            "a) Display Button",
            "b) Show All Files Button",
            "c) Visible Button",
            "d) Show Button"
        ],
        "Answer": "Answer: b\nExplanation: Show All Files Button displays the additional items mainly the hidden files. It is the most significant part of the solution explorer."
    },
    {
        "id": 14,
        "Question": "A ____________ is a file that contains program instructions called code.",
        "Options": [
            "a) Source file",
            "b) Object file",
            "c) Executable file",
            "d) Program file"
        ],
        "Answer": "Answer: a\nExplanation: A Source File is a file that contains program instructions called code. A source file consists of an optional set of option statements, and attributes which are followed by a namespace body."
    },
    {
        "id": 15,
        "Question": "Which box contains the name of the selected object?",
        "Options": [
            "a) Select Box",
            "b) Object Box",
            "c) List Box",
            "d) Display box"
        ],
        "Answer": "Answer: b\nExplanation: The Object Box contains the name of the selected objects. When you click on the object box the drop-down list will display a list of objects you have inserted into the form."
    },
    {
        "id": 16,
        "Question": "Which box displays the current values of each of the properties?",
        "Options": [
            "a) Settings Box",
            "b) Display Box",
            "c) Object box",
            "d) Value Box"
        ],
        "Answer": "Answer: a\nExplanation: The Settings Box contains the current values of each of the properties. It helps one to change the settings by modifying the current value. After modifying the new value which becomes the current value is in the Settings box."
    },
    {
        "id": 17,
        "Question": "Which button is used to display the names in the property list by category?",
        "Options": [
            "a) Categorized button",
            "b) Alphabetical button",
            "c) Lexicographical button",
            "d) Group button"
        ],
        "Answer": "Answer: a\nExplanation: The Categorized button is used to display the names in the property list by category. When you click the Categorized button, Visual Studio calls the ICategorizeProperties interface on the object that has focus to sort its properties by category. ICategorizeProperties are implemented on the IDispatch object that is presented to the Properties Window."
    },
    {
        "id": 18,
        "Question": "What are listed in a Properties Window?",
        "Options": [
            "a) Attributes",
            "b) Objects",
            "c) Values",
            "d) Items"
        ],
        "Answer": "Answer: a\nExplanation: Attributes also known as properties are listed in a Properties Window. Attributes are keyword-like tags in which you can specify additional information about entities defined in Visual Basic application. Attributes are saved as assembly’s metadata. "
    },
    {
        "id": 19,
        "Question": "Which button is used to save a solution?",
        "Options": [
            "a) Save Button",
            "b) Save As Button",
            "c) Save Solution Button",
            "d) Save All Button"
        ],
        "Answer": "Answer: d\nExplanation: Save All Button is used to save a solution. When the solution is not saved an asterisk (*) appears on the top of the solution. If it is saved the asterisk (*) is no more present."
    },
    {
        "id": 20,
        "Question": "Which option is used to close the IDE?",
        "Options": [
            "a) Close",
            "b) Close Solution",
            "c) Close All",
            "d) Close IDE"
        ],
        "Answer": "Answer: a\nExplanation: Close is used to close the IDE. Close Solution is required to close the solution. Sometimes it is required to close the IDE and not the solution, then we use Close button."
    },
    {
        "id": 21,
        "Question": "Which option is used to close the Solution?",
        "Options": [
            "a) Close",
            "b) Close Solution",
            "c) Close All",
            "d) Exit"
        ],
        "Answer": "Answer: b\nExplanation: Close Solution is used to close the solution. When we require to close the whole solution and not the IDE we use Close Solution button."
    },
    {
        "id": 22,
        "Question": "What is used to add a Label control to a form?",
        "Options": [
            "a) Label Tool",
            "b) Add Tool",
            "c) Add Control Tool",
            "d) Add Label Tool"
        ],
        "Answer": "Answer: a\nExplanation: Label Tool is used to add a Label control to a form.  Label control is used to identify objects on a form, provide a description of what a certain control will do if clicked."
    },
    {
        "id": 23,
        "Question": "What is the purpose of the label control?",
        "Options": [
            "a) To display the text that the user is not allowed to edit while the application is  not running",
            "b) To display the text that the user is allowed to edit while the application is  not running",
            "c) To display the text that the user is not allowed to edit while the application is running",
            "d) To display the text that the user is allowed to edit while the application is running"
        ],
        "Answer": "Answer: c\nExplanation: The purpose of the label control is to display the text that the user is not allowed to edit while the application is running. It does not display the text that is allowed to edit. The text allowed to edit is mainly displayed by text box."
    },
    {
        "id": 24,
        "Question": "The size of _____________ is determined by the label’s margin property.",
        "Options": [
            "a) margin lines",
            "b) label",
            "c) border lines",
            "d) label lines"
        ],
        "Answer": "Answer: a\nExplanation: The size of margin lines is determined by the label’s margin property. These margin lines help to align controls on the form."
    },
    {
        "id": 25,
        "Question": "_______________is the default name assigned to the label control.",
        "Options": [
            "a) Label0",
            "b) Label1",
            "c) NewLabel",
            "d) DefaultLabel"
        ],
        "Answer": "Answer: b\nExplanation: Label1 is the default name applied to the label control. When a first label is on the form it is named as Label1. When another label is brought in, it is named as Label2 and it goes so on."
    },
    {
        "id": 26,
        "Question": "Margin lines are ______________ in colour.",
        "Options": [
            "a) Blue",
            "b) Red",
            "c) Green",
            "d) Black"
        ],
        "Answer": "Answer:  a\nExplanation: Margin lines are blue in colour. Margin lines help to align controls on the form."
    },
    {
        "id": 27,
        "Question": "Which property determines the value that appears inside the control?",
        "Options": [
            "a) Label Text property",
            "b) Label control’s Text property",
            "c) Text Property",
            "d) Text Design Property"
        ],
        "Answer": "Answer: b\nExplanation: Label control’s Text Property determined the value that appears inside the control. The text cannot be edited while the application is running. At times the text can be hidden and made visible only when certain part of the application is running."
    },
    {
        "id": 28,
        "Question": "Which property specifies the position of the upper left corner of the control?",
        "Options": [
            "a) Top Property",
            "b) Position Property",
            "c) Location Property",
            "d) Starting Position Property"
        ],
        "Answer": "Answer: c\nExplanation: Location Property specifies the position of the upper left corner of the control. It gets or sets the upper left corner of the control relative to the upper left corner of the controller."
    },
    {
        "id": 29,
        "Question": "Which property in the property list is used to change the text, style or size of the control’s text?",
        "Options": [
            "a) Font",
            "b) Origin",
            "c) Style",
            "d) Appearance"
        ],
        "Answer": "Answer: a\nExplanation: Font property in the property list is used to change the text, style or size of the control’s text. Font helps to make the appearance of the text in the label better."
    },
    {
        "id": 30,
        "Question": "Which menu provides option for manipulating the control’s on the form?",
        "Options": [
            "a) Format menu",
            "b) Control Menu",
            "c) Manipulate Menu",
            "d) Property List"
        ],
        "Answer": "Answer: a\nExplanation: Format Menu provides the option for manipulating the control’s on the form. It aligns selected objects with each other using the control with the white grab handles as the reference."
    },
    {
        "id": 31,
        "Question": "Which option is used to align two or more controls by their left, right, top or bottom borders?",
        "Options": [
            "a) Align option",
            "b) Range option",
            "c) Associate option",
            "d) Alignment option"
        ],
        "Answer": "Answer: a\nExplanation: Align option is used to align two or more controls by their left, right, top or bottom borders. Left: Aligns the horizontal position of the selected objects, putting the left-most edges in line. Right: Aligns the horizontal position of the selected objects, putting the right-most edges in line. Center: Aligns the horizontal position of the selected objects, putting the centers in line. Tops: Aligns the horizontal position of the selected objects, putting the tops in line. Middles: Aligns the horizontal position of the selected objects, putting the middles in line. Bottoms: Aligns the horizontal position of the selected objects, putting the bottoms in line."
    },
    {
        "id": 32,
        "Question": "To include an image on the form we use which toolbox?",
        "Options": [
            "a) Picture Box",
            "b) Image box",
            "c) Add Image box",
            "d) Add Picture Box"
        ],
        "Answer": "Answer: a\nExplanation:  We can include an image in the form using Picture box control, which is instantiated using picture box tool. As we include the picture box, the properties of it appears in the Properties Window."
    },
    {
        "id": 33,
        "Question": "While the Picture Box tool is included in the form, a triangle appears in the upper-left corner of the control?",
        "Options": [
            "a) Edit Box",
            "b) Property Box",
            "c) Task box",
            "d) Image box"
        ],
        "Answer": "Answer: c\nExplanation: The task box is known so, because it displays a list of task associated with the control. It appears in the upper-right corner of the control, when the picture box is included in the form."
    },
    {
        "id": 34,
        "Question": "To include the image file in the project itself, the Project Resource file radio button must be selected from which dialog box?",
        "Options": [
            "a) Select Resource Dialog box",
            "b) Select Dialog box",
            "c) Resource Dialog Box",
            "d) Project Dialog  Box"
        ],
        "Answer": "Answer: a\nExplanation:  This dialog box includes the image within the project itself. We need to make sure that the radio button is selected and click on Import. On clicking on import the open dialog box appears, and we need to select the image."
    },
    {
        "id": 35,
        "Question": "Which property is used to view the full image in the Picture Box?",
        "Options": [
            "a) View full image",
            "b) StretchImage",
            "c) View Image",
            "d) Full Size Image"
        ],
        "Answer": "Answer: b\nExplanation: When you select an image to be displayed in the picture box, only a portion of the image can be seen. We need to click on the StretchImage property to view the full image in the picture box. This property, resizes the image according to the size of the picture box so that we can view the full image."
    },
    {
        "id": 36,
        "Question": "StretchImage Property is present in which dialog box?",
        "Options": [
            "a) Task list",
            "b) Properties Window",
            "c) Picture Task Window",
            "d) View Window"
        ],
        "Answer": "Answer: a\nExplanation: In the task list, we have the SizeMode Box, and when we click on the list arrow on the SizeMode Box, and click on StretchImage, we can view the full image in the picture box."
    },
    {
        "id": 37,
        "Question": "Which is used to change the name of the picture?",
        "Options": [
            "a) Properties Window",
            "b) Change Name",
            "c) Edit Window",
            "d) Picture  Properties Window"
        ],
        "Answer": "Answer: a\nExplanation: When the Picture box on the form is selected, the properties window contains the properties of the picture box, which we are allowed to edit as required."
    },
    {
        "id": 38,
        "Question": "__________ is commonly used to perform an immediate action when clicked.",
        "Options": [
            "a) Exit",
            "b) Button control",
            "c) Close",
            "d) End"
        ],
        "Answer": "Answer: b\nExplanation: Every application should give the user a way to exit the program. Most Windows Application accomplishes this task using the Exit option. In visual basic a button is used for sending an application. It is commonly used to perform immediate action when clicked."
    },
    {
        "id": 39,
        "Question": "__________ in the Tool Box is used to add a button control to a form.",
        "Options": [
            "a) Button Tool",
            "b) Add Button",
            "c) New Button",
            "d) Add new Button"
        ],
        "Answer": "Answer: a\nExplanation: The button tool adds a button to the form. The button is used for sending an application. It is used to perform an immediate action when clicked."
    },
    {
        "id": 40,
        "Question": "The name of the button control is changed using __________",
        "Options": [
            "a) Button Tool Window",
            "b) Change Name",
            "c) Edit Window",
            "d) Properties window"
        ],
        "Answer": "Answer: d\nExplanation: Properties Window contains the properties of any object brought in the form. With the help of this window, we can edit the properties required to make the form look better."
    },
    {
        "id": 41,
        "Question": "The __________ and __________ buttons are examples of many button controls found in Windows applications.",
        "Options": [
            "a) Ok and Cancel",
            "b) Ok and Exit",
            "c) Exit and Cancel",
            "d) Try again and Cancel"
        ],
        "Answer": "Answer: a\nExplanation: Every application should give the user a way to exit the program. Windows applications provide many button controls to the user. The most common among them are Ok and Cancel."
    },
    {
        "id": 42,
        "Question": "The actions such as click, double-click, scrolling etc are __________",
        "Options": [
            "a) Events",
            "b) Functions",
            "c) Procedures",
            "d) Actions"
        ],
        "Answer": "Answer: a\nExplanation: Click, double-click, scroll, etc are events. It means when you click or double-click a button, some action will take place. These actions are defined in the event procedures that are written."
    },
    {
        "id": 43,
        "Question": "Object respond to an event by writing __________",
        "Options": [
            "a) Operations",
            "b) Event procedures",
            "c) Defining events",
            "d) Defining actions"
        ],
        "Answer": "Answer: b\nExplanation:  You tell an object how to respond to an event, by writing event procedures, which is a set of visual basic instructions that are processed only when the event occurs."
    },
    {
        "id": 44,
        "Question": "Where you enter the event procedure’s code?",
        "Options": [
            "a) Event window",
            "b) Properties window",
            "c) Code Editor Window",
            "d) Action Window"
        ],
        "Answer": "Answer: c\nExplanation: You enter the event procedure’s code in the code editor window. When you right-click on the form and click View Code on the context menu, the code editor window will open."
    },
    {
        "id": 45,
        "Question": "Which statement is used to define a class in visual basic?",
        "Options": [
            "a) Class statement",
            "b) Event statement",
            "c) Event class statement",
            "d) Form class statement"
        ],
        "Answer": "Answer: a\nExplanation: The class statement is used to define a class in visual basic. The class statement begins with public class classname clause and ends with End class clause. Within the class statement, you write the code to tell the form and the object how to react to the user’s action."
    },
    {
        "id": 46,
        "Question": "To hide a section of code we click the __________ box next to it.",
        "Options": [
            "a) Minus",
            "b) Plus",
            "c) Bubble",
            "d) Multiply"
        ],
        "Answer": "Answer: a\nExplanation: At times we want to hide a section of code, if the code editor contains many lines of code; and we are not presently working on that section of code. To do this, we click the minus box that appears next to the section of the code that we want to hide. To unhide a region of code you click the plus box that appears next to the code. Hiding and unhiding the code is also known as collapsing and expanding the code respectively."
    },
    {
        "id": 47,
        "Question": "A __________ is a word that has special meaning in computer language.",
        "Options": [
            "a) keyword",
            "b) constant",
            "c) variable",
            "d) literal"
        ],
        "Answer": "Answer: a\nExplanation: A keyword has special meaning in programming language. It appears in different colour from the rest of the code. The Private keyword indicates that the event procedure can be used only within the current Code Editor window."
    },
    {
        "id": 48,
        "Question": "The __________ is an abbreviation of the term sub procedure.",
        "Options": [
            "a) Sub function",
            "b) Sub event",
            "c) Sub keyword",
            "d) Sub object"
        ],
        "Answer": "Answer: c\nExplanation:  The sub keyword is an abbreviation for the term sub procedure, which is a block of code that performs specific task. Following the sub keyword is the name of the object, an underscore, the name of the event, and parenthesis containing some text."
    },
    {
        "id": 49,
        "Question": "The __________ instruction tells the computer to close the current form.",
        "Options": [
            "a) Me.Close()",
            "b) Close()",
            "c) This.Close()",
            "d) Close.this()"
        ],
        "Answer": "Answer: a\nExplanation: The Me.Close() instruction tells the computer to close the current form. If the current form is the only form, then this instruction closes the application. In the instruction Me is a keyword that refers to the current form and Close is one of the methods available in visual basic. A method is a predefined procedure that you can invoke when needed."
    },
    {
        "id": 50,
        "Question": "The __________ displays the most commonly used items.",
        "Options": [
            "a) Common tab",
            "b) All tab",
            "c) Most tab",
            "d) Most used tab"
        ],
        "Answer": "Answer: a\nExplanation: The common tab displays the most commonly used items whereas the all tab displays all the items."
    },
    {
        "id": 51,
        "Question": "The rules of a programming language are called its __________",
        "Options": [
            "a) Syntax",
            "b) Rules",
            "c) Grammar",
            "d) Order"
        ],
        "Answer": "Answer: a\nExplanation: The Code editor provides the code template to help you follow the rules of the visual basic language. The rules of a programming language are called its syntax. The first line in the code template is called the procedure header and the last line the procedure footer."
    },
    {
        "id": 52,
        "Question": "A timer control is instantiated using __________",
        "Options": [
            "a) Timer tool",
            "b) Control tool",
            "c) Stopwatch tool",
            "d) Timer Control Tool"
        ],
        "Answer": "Answer: a\nExplanation: You instantiate a timer control using timer tool, which is located on the components section of a toolbox. When you drag the timer tool to the form and release the mouse button, the timer tool will be placed on the component tray rather than on the form."
    },
    {
        "id": 53,
        "Question": "The __________ is used to store controls that do not appear in the user interface during runtime.",
        "Options": [
            "a) Control tray",
            "b) Timer tray",
            "c) Components tray",
            "d) Store tray"
        ],
        "Answer": "Answer: c\nExplanation: The component tray is a special area of the IDE. Its purpose is to store controls that do not appear in the user interface during runtime, which occurs while an application is running. In the other words, the timer will not be visible to the user when the interface appears on the screen."
    },
    {
        "id": 54,
        "Question": "The purpose of __________ is to process code at one or more regular intervals.",
        "Options": [
            "a) Timer control",
            "b) Process control",
            "c) Code editor",
            "d) Interval control"
        ],
        "Answer": "Answer: a\nExplanation: The purpose of the timer control is to process code at one or more regular intervals. The length of each interval is specified in milliseconds and entered in the timer’s Interval property."
    },
    {
        "id": 55,
        "Question": "The timer state is determined by __________",
        "Options": [
            "a) State property",
            "b) Timer control",
            "c) Enabled property",
            "d) Visible property"
        ],
        "Answer": "Answer: c\nExplanation: The timer’s state – either running or stopped is determined by its Enabled property, which can be set to either the Boolean value True or the Boolean value False. When its Enabled property is set to True, the timer is running; when it is set to False the Timer is stopped."
    },
    {
        "id": 56,
        "Question": "Which event occurs each time an interval is elapsed in the timer?",
        "Options": [
            "a) Tick",
            "b) Click",
            "c) Elapse",
            "d) Count"
        ],
        "Answer": "Answer: a\nExplanation: If the timer is running, its Tick event property occurs each time an interval is elapsed. Every time the Tick event occurs the computer processes the code contained in the Tick event procedure. If the timer is stopped the Tick event does not occur."
    },
    {
        "id": 57,
        "Question": "What happens when a control is deleted from a form?",
        "Options": [
            "a) Does not delete the control’s code",
            "b) Does delete the control’s code",
            "c) Control is deleted in total",
            "d) Control is not deleted, it can be brought back"
        ],
        "Answer": "Answer: a\nExplanation: Deleting a control from the form, does not delete the control’s code, which remains in the code editor window."
    },
    {
        "id": 58,
        "Question": "__________ is used to delete a certain code from the code editor window.",
        "Options": [
            "a) Edit",
            "b) Delete",
            "c) Truncate",
            "d) Free"
        ],
        "Answer": "Answer: b\nExplanation: To delete a portion of code from the code editor window, select the portion of the code and click delete."
    },
    {
        "id": 59,
        "Question": "__________ button is used to select a control from the form.",
        "Options": [
            "a) Exit button",
            "b) Select button",
            "c) Edit button",
            "d) Delete button"
        ],
        "Answer": "Answer: a\nExplanation: Exit button selects a control from the form, and when you press delete, it only deletes the control from the form, whereas its code remains in the code editor."
    },
    {
        "id": 60,
        "Question": "__________ is used to close both the code from code editor and control from the form.",
        "Options": [
            "a) Me.close()",
            "b) This.close()",
            "c) Close All",
            "d) Close()"
        ],
        "Answer": "Answer: a\nExplanation: Me.close() is used to close both the code from the code editor and the control from the form. Me.close() is entered in the timer’s Tick event procedure."
    },
    {
        "id": 61,
        "Question": "__________ is used to remove a component of the form after a certain period of time.",
        "Options": [
            "a) Timer",
            "b) Exit button",
            "c) Remove button",
            "d) Delete button"
        ],
        "Answer": "Answer: a\nExplanation: As we click on the Exit button, the application comes to an end. But we need to do this physically. Timer replaces the exit button and closes the application after a particular period of time."
    },
    {
        "id": 62,
        "Question": "A form’s __________ determines the border style of the form.",
        "Options": [
            "a) FormBorderStyle Property",
            "b) Form Border",
            "c) Form Style",
            "d) Border Property"
        ],
        "Answer": "Answer: a\nExplanation: A form’s border style property determines the border style of the form. Its default setting is sizable which allows the user to change the form’s size by dragging its border while the application is running."
    },
    {
        "id": 63,
        "Question": "The __________ setting removes the form border.",
        "Options": [
            "a) None",
            "b) Fixed Single",
            "c) Single",
            "d) Remove"
        ],
        "Answer": "Answer: a\nExplanation: You typically set the form border style property either to None or to Fixed Single. The None setting removes the form border whereas the Fixed Single  setting draws a fixed thin line around the form."
    },
    {
        "id": 64,
        "Question": "__________ property disables the Minimize button on the form’s title bar.",
        "Options": [
            "a) Minimize property",
            "b) Maximize property",
            "c) Close property",
            "d) Control Box property"
        ],
        "Answer": "Answer: a\nExplanation: When the Minimize property in the properties window is set to false, it disables the Minimize button on the form’s title bar."
    },
    {
        "id": 65,
        "Question": "__________ property disables the Maximize button on the form’s title bar.",
        "Options": [
            "a) Minimize property",
            "b) Maximize property",
            "c) Close property",
            "d) Control Box property"
        ],
        "Answer": "Answer: b\nExplanation: When the Maximize property in the properties window is set to false, it disables the Maximize button on the form’s title bar. We need to set the Minimize Box property to true and then we can set the maximize box property to false."
    },
    {
        "id": 66,
        "Question": "What happens when both the minimize box and maximize box property are set to false?",
        "Options": [
            "a) Both are disabled",
            "b) This situation shows an exception",
            "c) This situation shows an error",
            "d) Both are removed from the title bar"
        ],
        "Answer": "Answer: d\nExplanation: When both the minimize box property and maximize box property are set to false, the buttons are not disabled that is they are not grayed out, instead they are removed from the title bar."
    },
    {
        "id": 67,
        "Question": "__________ property removes the title bar elements.",
        "Options": [
            "a) Control Box property",
            "b) Minimize property",
            "c) Maximize property",
            "d) Close property"
        ],
        "Answer": "Answer: a\nExplanation: Control Box property when set to False removes the title bar elements that are the icons and buttons, but not the whole title bar."
    },
    {
        "id": 68,
        "Question": "To delete __________ you must delete the contents of the form’s text property.",
        "Options": [
            "a) Title bar",
            "b) Properties window",
            "c) Text in text box",
            "d) Text in level"
        ],
        "Answer": "Answer: a\nExplanation: To remove the tile bar, you must delete the form’s text property. Select the text in the text property, then press delete then enter. It deletes the whole title bar and not only its content."
    },
    {
        "id": 69,
        "Question": "While printing, the __________ need to be active.",
        "Options": [
            "a) Form",
            "b) Application",
            "c) Code editor window",
            "d) Timer"
        ],
        "Answer": "Answer: c\nExplanation: While printing, the code editor window need to be active, you can hide a part of code, if you do not want to print that. You can mention line number in check box, if you want to print a part of code."
    },
    {
        "id": 70,
        "Question": "What happens when maximize box is set to true?",
        "Options": [
            "a) Maximize box in title bar disappears",
            "b) Maximize box is disabled",
            "c) Maximize box is enabled",
            "d) Maximize box becomes visible"
        ],
        "Answer": "Answer: c\nExplanation: When the maximize box property is set to true, the maximize box is enabled from the disable position, that is in the title bar, it can be used to maximize the size of the window."
    },
    {
        "id": 71,
        "Question": "What happens when minimize box is set to true?",
        "Options": [
            "a) Minimize box in title bar disappears",
            "b) Minimize box is disabled",
            "c) Minimize box is enabled",
            "d) Minimize box becomes visible"
        ],
        "Answer": "Answer: c\nExplanation: When the minimize box property is set to true, the minimize box in the form’s title bar is enabled, that is we can then minimize the window."
    },
    {
        "id": 72,
        "Question": "A button’s caption is entered using __________",
        "Options": [
            "a) sentence capitalization",
            "b) book title capitalization",
            "c) character capitalization",
            "d) word capitalization"
        ],
        "Answer": "Answer: b\nExplanation: Book title capitalization is a phenomenon in which the first characters of the major words in the sentence are capitalized. A button’s caption is entered using this phenomenon."
    },
    {
        "id": 73,
        "Question": "The text contained in the identifying label is entered using __________",
        "Options": [
            "a) Sentence capitalization",
            "b) Book title capitalization",
            "c) Character capitalization",
            "d) Word capitalization"
        ],
        "Answer": "Answer: a\nExplanation:  Sentence capitalization is a phenomenon in which the first character of every word in the sentence should be in capital letter. The text contained in is entered using this phenomenon."
    },
    {
        "id": 74,
        "Question": "Each button has same height and width because they are __________ the interface.",
        "Options": [
            "a) Stacked",
            "b) Queued",
            "c) Clustered",
            "d) Heaped"
        ],
        "Answer": "Answer: a\nExplanation: Buttons have a same height and width because they are stacked in the interface. This property mainly copies the button, thus they get equal height and width as that of the first, which is made with accuracy."
    },
    {
        "id": 75,
        "Question": "Designers usually include graphics to __________ a portion of screen.",
        "Options": [
            "a) Mesmerize",
            "b) Emphasize",
            "c) Attract",
            "d) Glorify"
        ],
        "Answer": "Answer: b\nExplanation: The most important point the designers should keep in mind is that the graphics should not distract the user from his/her work. Thus the graphics should be simple enough to emphasize a portion of the screen, mainly the top left corner."
    },
    {
        "id": 76,
        "Question": "An object’s __________ is used to display the type, style, and size of the font, used to display the object’s text.",
        "Options": [
            "a) Font property",
            "b) Size property",
            "c) Text property",
            "d) Style property"
        ],
        "Answer": "Answer: a\nExplanation: An object’s font property is used to display the type, style and size of font. The type of the font includes- regular, bold, italics or underlined. The size is 8, 10, 14, etc and the style is ‘Times new Roman’, ‘Sans Serif’ etc."
    },
    {
        "id": 77,
        "Question": "Designers generally avoid using __________ and __________ in an interface.",
        "Options": [
            "a) Italics and underline",
            "b) Underline and bold",
            "c) Bold and italics",
            "d) Regular and bold"
        ],
        "Answer": "Answer: a\nExplanation: Designers generally avoid using italics and underline in a text, because they make difficult to read; since in some font style italics is too difficult to read, and underline in some font style looks as if an error has occurred, thus distracting the user."
    },
    {
        "id": 78,
        "Question": "Designers generally use __________ font style and __________ font size in an interface.",
        "Options": [
            "a) One, two",
            "b) Two, one",
            "c) Four, one",
            "d) One, one"
        ],
        "Answer": "Answer: a\nExplanation: Designers generally use one font style in an interface because too many font sizes make difficult to read, and distract the user. Generally, two font sizes are used one for the titles and headings and other for the other text in the user interface."
    },
    {
        "id": 79,
        "Question": "__________ is generally used to emphasize the text.",
        "Options": [
            "a) Italics",
            "b) Underline",
            "c) Bold",
            "d) Regular"
        ],
        "Answer": "Answer: c\nExplanation: Designers limit the use of bold text to titles, headings and key items to emphasize the text."
    },
    {
        "id": 80,
        "Question": "Designers generally use __________ colour for the background, and __________ for the text.",
        "Options": [
            "a) Blue, pink",
            "b) White, black",
            "c) Black, white",
            "d) Pink, blue"
        ],
        "Answer": "Answer: b\nExplanation: Designers generally use white colour for the background and black colour for the text, because dark colour as background is hard for eyes and light colour as text may appear blurry."
    },
    {
        "id": 81,
        "Question": "Designers at times use colour as the means of __________ a user interface.",
        "Options": [
            "a) Identification",
            "b) Charming",
            "c) Fascinating",
            "d) Exquisite"
        ],
        "Answer": "Answer: a\nExplanation: Designers at times want to identify a special element, using colour. But it should not be the only means to identify an element. Each element should have an identifying level. "
    },
    {
        "id": 82,
        "Question": "A control’s border is determined by __________ property.",
        "Options": [
            "a) Border",
            "b) Style",
            "c) BorderStyle",
            "d) Appearance"
        ],
        "Answer": "Answer: c\nExplanation: A control’s border is determined by its BorderStyle property, which can be set to None, FixedSingle, Fixed3D. Controls with a border style property set to none have no border. Setting the border style property to FixedSingle surrounds the control with a thin line, and setting it to Fixed3d, gives the control a 3-dimensional appearance."
    },
    {
        "id": 83,
        "Question": "A label control’s __________ property determines whether the control automatically sizes to fit its current contents.",
        "Options": [
            "a) AutoSize property",
            "b) Control property",
            "c) Auto control property",
            "d) Autoformat property"
        ],
        "Answer": "Answer: a\nExplanation: The label control’s autosize property determines whether the control automatically sizes to fit its current contents. The appropriate settings depend on the label’s purpose. Label control that identifies other control, uses the default setting that is true."
    },
    {
        "id": 84,
        "Question": "The BorderStyle property of the labels that display program output is generally set to __________",
        "Options": [
            "a) Fixed3D",
            "b) FixedSingle",
            "c) None",
            "d) FixedDouble"
        ],
        "Answer": "Answer: a\nExplanation: The autosize property of label that displays program output is generally set to false, since we do not need to autosize the label that displays the output."
    },
    {
        "id": 85,
        "Question": "Text box is aligned using __________",
        "Options": [
            "a) Alignment operator",
            "b) Edit menu",
            "c) Properties Window",
            "d) Format menu"
        ],
        "Answer": "Answer: b\nExplanation: The BorderStyle property of the labels that display output is fixed single, generally due to convention so that the form becomes readable, convenient to the user."
    },
    {
        "id": 86,
        "Question": "A __________ provides an area in the form for the user to enter data.",
        "Options": [
            "a) Text box",
            "b) Button",
            "c) Edit box",
            "d) Label"
        ],
        "Answer": "Answer: a\nExplanation: Text box is aligned using format menu or snap lines. The blue and the pink snap lines help you to align the text box with the other labels."
    },
    {
        "id": 87,
        "Question": "A control is locked using __________",
        "Options": [
            "a) Lock Controls",
            "b) Shared lock",
            "c) Fixed lock",
            "d) Lock"
        ],
        "Answer": "Answer: a\nExplanation: Text box provides an area in the form for the user to enter data. User can edit the data in the text box."
    },
    {
        "id": 88,
        "Question": "Which setting gives the control a 3-dimensional appearance?",
        "Options": [
            "a) 3D appearance",
            "b) Fixed3D Border Style",
            "c) Set3D",
            "d) Appear3D"
        ],
        "Answer": "Answer: a\nExplanation: Once you have placed all the controls in the desired location on the form, it is a good idea to lock the form. You can lock the controls by clicking on the form, and clicking the Lock Control option on the format menu. When a control is locked, a small lock appears on the upper left corner of the control."
    },
    {
        "id": 89,
        "Question": "The appropriate __________  setting on a label depends on label’s purpose.",
        "Options": [
            "a) BorderStyle property",
            "b) AutoSize property",
            "c) Length property",
            "d) Format Property"
        ],
        "Answer": "Answer: a\nExplanation: The Fixed3D border style gives a 3-dimensional appearance. In windows application, a data that the user is not allowed to edit does not have 3-dimensional appearance. Thus generally label control’s border style property is not set to 3-dimension. Whereas the text boxes are generally set to Fixed3D."
    },
    {
        "id": 90,
        "Question": "The BorderStyle property of each label, that  identify other controls, is generally set to __________",
        "Options": [
            "a) None",
            "b) FixedSingle",
            "c) Fixed3D",
            "d) FixedDouble"
        ],
        "Answer": "Answer: a\nExplanation: The BorderStyle property on a label generally depends on control’s purpose. The control that displays output has border style set to FixedSingle, the control that identify other controls, the border style property is set to None, etc."
    },
    {
        "id": 91,
        "Question": "The text of many controls contain an underlined letter known as __________",
        "Options": [
            "a) Access keys",
            "b) Underlined keys",
            "c) Keys",
            "d) Hidden keys"
        ],
        "Answer": "Answer: a\nExplanation: The text in many of the controls contains an underlined letter. This underlined letter is known as access keys and it allows the user to select an object using the Alt key, in combination with a letter or a number."
    },
    {
        "id": 92,
        "Question": "Letter __________ is a File’s Menu access keys.",
        "Options": [
            "a) A",
            "b) F",
            "c) B",
            "d) D"
        ],
        "Answer": "Answer: b\nExplanation: In visual studio, you can select the file menu using Alt+F or Alt+f, because the letter F is a file menu’s access key."
    },
    {
        "id": 93,
        "Question": "Letter __________ is the Exit menu’s access key.",
        "Options": [
            "a) X",
            "b) Y",
            "c) Z",
            "d) W"
        ],
        "Answer": "Answer: a\nExplanation: You can exit from an interface using Alt+x or Alt+X, because the letter X is exit menu’s access keys."
    },
    {
        "id": 94,
        "Question": "To see the underlined hidden access key, you can do so, by pressing the __________ key.",
        "Options": [
            "a) Alt",
            "b) Ctrl",
            "c) Shift",
            "d) Enter"
        ],
        "Answer": "Answer: a\nExplanation: Depending on your system settings the access keys may or may not be underlined while the application is running. If you do not see the underlined access keys, you can do so temporarily by pressing the Alt key."
    },
    {
        "id": 95,
        "Question": "You should assign access keys to each of the control in the interface that contain __________",
        "Options": [
            "a) User output",
            "b) User input",
            "c) Timer",
            "d) Labels"
        ],
        "Answer": "Answer: b\nExplanation: We should assign access keys to each of the control in the interface that contain user input, example of such are button and text boxes; the only exception being ‘OK’ and ‘CANCEL’ button, which generally do not require access keys."
    },
    {
        "id": 96,
        "Question": "Access keys allows the user to run the application even when __________",
        "Options": [
            "a) Mouse becomes inoperative",
            "b) Mouse is fully operative",
            "c) Mouse is partially operative",
            "d) Keyboard is operative"
        ],
        "Answer": "Answer: a\nExplanation: Access keys allow a user to work with the application even when the mouse becomes inoperative. The access keys allow the users who are fast typist to keep their hands on the keyboard. It allows people with disabilities, which may prevent them from working with the mouse to use the application."
    },
    {
        "id": 97,
        "Question": "You assign an access key by including an __________ option in the control’s caption or identifying label.",
        "Options": [
            "a) &",
            "b) $",
            "c) #",
            "d) @"
        ],
        "Answer": "Answer: a\nExplanation: You assign an access key by including an ampersand (&) in the control’s caption or identifying label. If the control is a button, you include the ampersand in the button’s text property, which is where a button’s caption is stored."
    },
    {
        "id": 98,
        "Question": "You enter the ampersand to the __________ of the character, you want to designate as access key.",
        "Options": [
            "a) Immediate right",
            "b) Right",
            "c) Immediate left",
            "d) Left"
        ],
        "Answer": "Answer: c\nExplanation:  You enter the ampersand to the immediate left of the character you want to make as access key. The character can be either in capital or in small, since both the capital and small of the same letter is considered as a single access key."
    },
    {
        "id": 99,
        "Question": "It is inappropriate to assign access keys to __________",
        "Options": [
            "a) Text boxes",
            "b) Label controls",
            "c) Timer",
            "d) Button"
        ],
        "Answer": "Answer: b\nExplanation: it is inappropriate to assign access keys to the label controls; since you cannot access label control while the application is running."
    },
    {
        "id": 100,
        "Question": "Each access key in the interface should be __________",
        "Options": [
            "a) Unique",
            "b) Can be common",
            "c) In small letter",
            "d) In capital letter"
        ],
        "Answer": "Answer: a\nExplanation: Each access key in the interface should be unique; otherwise it would not be possible for the interface to access both the control with same access key at the same time. Access key can be both capital and small; that is both X and x can be used for Exit."
    },
    {
        "id": 101,
        "Question": "Which property contains a number that represents the order in which the control was added to the form?",
        "Options": [
            "a) TabIndex property",
            "b) Order property",
            "c) Tab order property",
            "d) Index property"
        ],
        "Answer": "Answer: a\nExplanation: Most controls have a TabIndex property that determines the order in which the controls was added to the form. The first control added to the form has TabIndex 0, the second control has TabIndex 1 and so on."
    },
    {
        "id": 102,
        "Question": "What determines the Tab order?",
        "Options": [
            "a) TabIndex values",
            "b) TabOrder values",
            "c) Tab values",
            "d) Arrangement of the controls in the interface"
        ],
        "Answer": "Answer: a\nExplanation: The tab index values determine the tab order which is the order in which each control receives the focus when the user wither presses a Tab key or employs an access key while an application is running. A control whose TabIndex is 2 will receive the focus immediately after the control whose TabIndex is 1. "
    },
    {
        "id": 103,
        "Question": "When a control has focus it can accept __________",
        "Options": [
            "a) values",
            "b) any user input",
            "c) numbers",
            "d) strings"
        ],
        "Answer": "Answer: b\nExplanation: When a control has focus, it can accept user input, which can be anything, and it will be accepted as a string i.e. even a number will be accepted as a string, and we need to change to number by parsing in the click event property, if we want to work with the number itself."
    },
    {
        "id": 104,
        "Question": "A __________ is an example that accepts user input and is determined by a label control.",
        "Options": [
            "a) Text box",
            "b) Property box",
            "c) Tool box",
            "d) Button"
        ],
        "Answer": "Answer: a\nExplanation:  To determine the appropriate tab index values you must first make a list of the controls that accept user input. The list should reflect the order in which the user wants to access the controls. If a control that accepts user input is defined by a label control, you should include the label control in the list. A text box is such an example that accepts user input and is determined by the label control."
    },
    {
        "id": 105,
        "Question": "Set the identifying labels tab index property that is __________ than text box’s tab index property.",
        "Options": [
            "a) One number lesser",
            "b) One number more",
            "c) Same as text box’s tab index",
            "d) Does not depend on text box’s tab index"
        ],
        "Answer": "Answer: a\nExplanation: Since the identifying level of the text box contains the text box’s access key, thus the identifying level must be assigned tab index value one number less than the text box’s tab index value such that it can work properly."
    },
    {
        "id": 106,
        "Question": "You can set the control’s tab index property using __________",
        "Options": [
            "a) Properties window",
            "b) Control Window",
            "c) File",
            "d) Edit"
        ],
        "Answer": "Answer: a\nExplanation: You can set the control’s Tab Index property from the properties Window or the tab order option on the View menu. The Tab order option is available only when the designer window is the active window."
    },
    {
        "id": 107,
        "Question": "When you start an application, the computer sends the focus to the control whose TabIndex is __________",
        "Options": [
            "a) One",
            "b) Last TabIndex (that is if we have 8 control’s at 8th Tab Index)",
            "c) Zero",
            "d) Two"
        ],
        "Answer": "Answer: c\nExplanation: When you start an application, the computer sends the focus to the control whose TabIndex is zero. However, since level controls cannot receive the focus, the computer sends the focus to the next control in the tab order sequence. The blinking insertion in the text box indicates that it has the focus, and can receive input text from you."
    },
    {
        "id": 108,
        "Question": "Use the __________ to verify the tab order control in the interface.",
        "Options": [
            "a) Enter key",
            "b) Shift key",
            "c) Tab key",
            "d) Alt key"
        ],
        "Answer": "Answer: c\nExplanation: Tab key moves the focus forward and Shift+tab key moves the focus backward. If we place the focus at TabIndex 0 and continue pressing tab key, we can verify the tab order control in the interface. When the button has the focus its border is darkened."
    },
    {
        "id": 109,
        "Question": "Pressing the enter key when the button is on focus produces __________",
        "Options": [
            "a) Button’s properties",
            "b) Button’s click event",
            "c) Dialog box to change button name",
            "d) Removes the button"
        ],
        "Answer": "Answer: b\nExplanation: Pressing the Enter key when the button has the focus invokes the Button’s click event, causing the computer to access any code in the Click Event procedure."
    },
    {
        "id": 110,
        "Question": "Press __________ to move the focus to the text box’s access key named textBlue.",
        "Options": [
            "a) Alt+b",
            "b) Alt+t",
            "c) Alt+x",
            "d) Alt+c"
        ],
        "Answer": "Answer: a\nExplanation: When an application starts to remove the focus to an text box’s access key, use the Alt key plus the starting name after the keyword “text”, that is to move focus to textbox named textBlue press Alt+b ; similarly to move the focus to textName press Alt+n."
    },
    {
        "id": 111,
        "Question": "__________ uses short phrases to describe the steps the procedure must take.",
        "Options": [
            "a) Pseudocode",
            "b) Source code",
            "c) Flowchart",
            "d) Algorithm"
        ],
        "Answer": "Answer: a\nExplanation: Pseudocode uses short phrases to describe the steps the procedure must take to accomplish its goal. It is a way to give direction how to do a program. Algorithms are at times written using pseudocode for the proper understanding of the users."
    },
    {
        "id": 112,
        "Question": "__________ uses standardized symbols to describe the steps of a procedure.",
        "Options": [
            "a) Pseudocode",
            "b) Source code",
            "c) Flowchart",
            "d) Algorithm"
        ],
        "Answer": "Answer: c\nExplanation: Unlike pseudocode, flowchart uses standardized symbols to describe the steps of a procedure to accomplish its goal. The logic illustrated in the flowchart is same as that of a pseudocode; but its approach of showing the logic is different."
    },
    {
        "id": 113,
        "Question": "The __________ symbol is called the start /stop symbol in the flowchart.",
        "Options": [
            "a) Oval",
            "b) Rectangle",
            "c) Parallelogram",
            "d) Diamond"
        ],
        "Answer": "Answer: a\nExplanation:  The oval symbol is called the start/stop symbols in the flowchart. The start and stop indicates the beginning and end respectively of the flowchart."
    },
    {
        "id": 114,
        "Question": "The __________ symbol is used to take a decision in the flowchart.",
        "Options": [
            "a) Oval",
            "b) Rectangle",
            "c) Parallelogram",
            "d) Diamond"
        ],
        "Answer": "Answer: d\nExplanation: The diamond symbol is used to take a decision i.e. within diamond symbol, a condition is displayed. If the condition is true, the flow of the program one of the processes, if false the flow goes to some other processes. The diamond symbol takes the decision whether the condition contained in it is true or false."
    },
    {
        "id": 115,
        "Question": "The rectangles are called as __________ symbols in the flowchart.",
        "Options": [
            "a) Decision",
            "b) Process",
            "c) Input/Output",
            "d) Start/End"
        ],
        "Answer": "Answer: b\nExplanation: The rectangles are called process symbols in the flowchart. We use the process symbols to represent tasks i.e. assignments and calculations."
    },
    {
        "id": 116,
        "Question": "The __________ in a flowchart is called input/output symbol.",
        "Options": [
            "a) Oval",
            "b) Rectangle",
            "c) Parallelogram",
            "d) Diamond"
        ],
        "Answer": "Answer: c\nExplanation: The parallelogram in a flowchart is called the input/output symbol. It is used to represent input tasks such as taking input from the user or output tasks such as displaying the output on console, or printing some data etc."
    },
    {
        "id": 117,
        "Question": "The lines connecting the symbols in a flowchart are called as __________",
        "Options": [
            "a) Flowlines",
            "b) Symbol lines",
            "c) Connectors",
            "d) Connecting lines"
        ],
        "Answer": "Answer: a\nExplanation: The lines connecting the symbols in a flowchart are called flowlines. It is used to connect the flowchart from its start symbol to the end symbol, including all the process symbols, the input/output symbols and the decision symbols."
    },
    {
        "id": 118,
        "Question": "A __________ is defined as a zero or more characters enclosed in quotation marks.",
        "Options": [
            "a) String",
            "b) Number",
            "c) Floating point integer",
            "d) Integer"
        ],
        "Answer": "Answer: a\nExplanation: A string is defined as zero or more characters enclosed in quotation marks. If a string has zero characters but is only enclosed with quotation marks, it is known as empty string. The length of the string is the number of characters enclosed in quotation mark."
    },
    {
        "id": 119,
        "Question": "The __________ statement in pseudocode acts like loop.",
        "Options": [
            "a) Goto",
            "b) Exit",
            "c) End",
            "d) If"
        ],
        "Answer": "Answer: a\nExplanation: The goto statement in a pseudocode is used to repeat a set of statements until a condition is satisfied i.e. it acts like a loop. It is also used to skip a number of statements while a condition is not met."
    },
    {
        "id": 120,
        "Question": "The __________ statement is used to assign a value to a property of an object.",
        "Options": [
            "a) Assignment",
            "b) Conditional",
            "c) Decision",
            "d) Goto"
        ],
        "Answer": "Answer: a\nExplanation: The assignment statement is used to assign a value to a property of an object. The equal sign is used to assign a value to a particular object. The equal sign is known as the assignment operator."
    },
    {
        "id": 121,
        "Question": "An arithmetic expression contains one or more __________",
        "Options": [
            "a) Arithmetic operators",
            "b) Logical operators",
            "c) Relational operators",
            "d) Short-hand operators"
        ],
        "Answer": "Answer: a\nExplanation: Most application requires the computer to perform at least one calculation. You instruct the computer to perform calculations by writing arithmetic expression, which is an expression that contains arithmetic operators."
    },
    {
        "id": 122,
        "Question": "The __________ numbers indicate the order in which the computer performs the operation in an expression.",
        "Options": [
            "a) Precedence",
            "b) Associativity",
            "c) Binary",
            "d) Ternary"
        ],
        "Answer": "Answer: a\nExplanation: The precedence numbers indicate the order in which the computer performs the operation in an expression. Operators with precedence number 1 are performed before operations with precedence number 2, and so on."
    },
    {
        "id": 123,
        "Question": "You can use __________ to override the order of precedence.",
        "Options": [
            "a) Curly braces",
            "b) Parenthesis",
            "c) Third bracket",
            "d) Associativity"
        ],
        "Answer": "Answer: b\nExplanation: You can use parenthesis to override the precedence, because operators within parenthesis are always performed before operators outside parenthesis."
    },
    {
        "id": 124,
        "Question": "__________ and __________ operators use same symbol.",
        "Options": [
            "a) Addition, subtraction",
            "b) Addition, multiplication",
            "c) Multiplication, Division",
            "d) Subtraction, negation"
        ],
        "Answer": "Answer: d\nExplanation: Subtraction and negation use the same symbol that is hyphen (-), but there is a difference between both operators; since subtraction is binary operator and negation is unary operator."
    },
    {
        "id": 125,
        "Question": "Unary and Binary refer to the number of __________ needed by the operator.",
        "Options": [
            "a) Operation",
            "b) Operand",
            "c) Expression",
            "d) Operator"
        ],
        "Answer": "Answer: b\nExplanation: Unary and binary refers to the number of operands required by the operator. Unary requires single operand. Example of such is negation, such as -10, 12, -a, -b, etc. binary requires two operands. Example of such is addition, subtraction, multiplication, division, such as a+b, a-b, a*b, a/b etc."
    },
    {
        "id": 126,
        "Question": "When an expression contains more than one operator with same priority, then they are evaluated according their __________",
        "Options": [
            "a) Precedence",
            "b) Associativity",
            "c) Binary",
            "d) Unary"
        ],
        "Answer": "Answer: b\nExplanation: When an expression contains more than one operator with same priority, then they are evaluated according to their associativity. Associativity tells whether evaluation should be done from left to right or right to left for same priority operators. As we know, = and – have same priority, and both of their associativity is from left to right, thus an expression containing both + and – is evaluated from left to right."
    },
    {
        "id": 127,
        "Question": "The __________ operator is used to divide two integers.",
        "Options": [
            "a) Addition",
            "b) Modulus",
            "c) Subtraction",
            "d) Integer division"
        ],
        "Answer": "Answer: d\nExplanation: The integer division operator divides two integers and returns the result as an integer. For example 211\\4 results into 52 whereas if you use the standard division operator then 211/4 results into 52.75 rather than 52."
    },
    {
        "id": 128,
        "Question": "The __________ operator returns the remainder of the division.",
        "Options": [
            "a) Addition",
            "b) Modulus",
            "c) Subtraction",
            "d) Integer division"
        ],
        "Answer": "Answer: b\nExplanation: The modulus operator is also used to divide two numbers, but the numbers need not have to be integers. After dividing the numbers the modulus operation returns the remainder of the division. For example, 211 mod 4 returns 3, which is the remainder after dividing 211 by 4."
    },
    {
        "id": 129,
        "Question": "To include a percentage in arithmetic operators we use __________",
        "Options": [
            "a) Decimal equivalent",
            "b) Percentage symbol",
            "c) We cannot use percentage",
            "d) Division"
        ],
        "Answer": "Answer: a\nExplanation: Arithmetic operators do not entertain comma or special characters, such as dollar sign or percentage. Thus to introduce the concept of percentage in an arithmetic expression we use its decimal equivalent instead of symbol such as 5%."
    },
    {
        "id": 130,
        "Question": "The __________ operator is commonly used to determine whether a number is even or odd.",
        "Options": [
            "a) Addition",
            "b) Modulus",
            "c) Subtraction",
            "d) Integer division"
        ],
        "Answer": "Answer: b\nExplanation: The modulus operator is commonly used to determine whether a number is even or odd. If you divide a number by 2 and the remainder is 0, the number is even, and if the remainder is 1, the number is odd. Thus the result of any number mod 2 determines whether the number is even or odd."
    },
    {
        "id": 131,
        "Question": "__________ data is a data that the application is expecting the user to enter.",
        "Options": [
            "a) Valid",
            "b) Invalid",
            "c) Numeric",
            "d) Character"
        ],
        "Answer": "Answer: a\nExplanation: You test an application by starting it and entering some sample data. Sample data can be both valid and invalid. Valid data is the data that the application is expecting the user to enter whereas invalid data is the data that the application is not expecting the user to enter."
    },
    {
        "id": 132,
        "Question": "__________ refers to the process of locating and correcting errors.",
        "Options": [
            "a) Testing",
            "b) Debugging",
            "c) Retransforming",
            "d) Correcting"
        ],
        "Answer": "Answer: b\nExplanation: The errors that occur in an application need to be located and corrected so that the application runs correctly that is without any error. Such a process of locating and correcting errors is known as debugging."
    },
    {
        "id": 133,
        "Question": "Errors are called as __________ in a program.",
        "Options": [
            "a) Bugs",
            "b) Errors",
            "c) Invalid data",
            "d) Exceptions"
        ],
        "Answer": "Answer: a\nExplanation: Errors are called bugs in a program. Program bugs typically are caused by two types of errors that is syntax errors or logical errors."
    },
    {
        "id": 134,
        "Question": "A __________ occurs when you break the rules of the language.",
        "Options": [
            "a) Logical errors",
            "b) Syntax errors",
            "c) Exceptions",
            "d) Application shut down"
        ],
        "Answer": "Answer: b\nExplanation: The term syntax refers to the set of rules you must follow when using a programming language. A syntax error occurs when you break one of the language’s rules. Most syntax errors are a result of typing errors that occur when entering the instructions, such as typing Me.cle() instead of Me.close().  The code editor detects most of the syntax errors as you enter the instructions."
    },
    {
        "id": 135,
        "Question": "A __________ occurs while forgetting to enter an instruction, or entering the instruction in wrong order.",
        "Options": [
            "a) Logical errors",
            "b) Syntax errors",
            "c) Exceptions",
            "d) Application shut down"
        ],
        "Answer": "Answer: a\nExplanation: Logical errors are much more difficult to find because they are not detected by the code editor. A logical error can occur for a variety of reasons such as forgetting to enter an instruction or entering the instruction in wrong order. Some logical errors occur as a result of calculation statements that are correct syntactically but incorrect mathematically."
    },
    {
        "id": 136,
        "Question": "__________ the documentation refers to putting the documentation in a safe place.",
        "Options": [
            "a) Debugging",
            "b) Testing",
            "c) Assembling",
            "d) Printing"
        ],
        "Answer": "Answer: c\nExplanation: Assembling the documentation refers to putting the documentation and the print out of the application’s interface and code in a safe place, so you can refer to them, if you need to change the application in future. Your planning tools include the TOE chart, a sketch of the interface, and either the flowcharts or the pseudocode."
    },
    {
        "id": 137,
        "Question": "A __________ is a predefined procedure that performs a specific task.",
        "Options": [
            "a) Flowchart",
            "b) Pseudocode",
            "c) Function",
            "d) Errors"
        ],
        "Answer": "Answer: c\nExplanation: A function is a predefined procedure that performs a specific task and returns the value for after completing the task. If a function does not return anything its return type is void. A function can return an integer, a character a string etc."
    },
    {
        "id": 138,
        "Question": "The __________ function temporarily converts the string to a number and then returns the number.",
        "Options": [
            "a) Val",
            "b) Value",
            "c) Integer",
            "d) Convert"
        ],
        "Answer": "Answer: a\nExplanation: The val function temporarily converts the string to a number and then returns the number. The number is storedin the computer’s internal memory only when the function is processing. The syntax of the val function is Val(string). The item within the parentheses is called an argument and represents the information that the function needs to perform its task."
    },
    {
        "id": 139,
        "Question": "__________ is used to improve the appearance of numbers in an interface.",
        "Options": [
            "a) Format function",
            "b) Appear function",
            "c) Val function",
            "d) Number function"
        ],
        "Answer": "Answer: a\nExplanation: You can use the format function to improve the appearance of numbers in an interface. The function’s syntax is Format(expression, style). The expression argument specifies the number, date, time, or string, whose appearance you want to format. The style argument can be predefined style. It can also be a string containing special symbols that indicate how you want the expression displayed."
    },
    {
        "id": 140,
        "Question": "A suggestion for fixing the error appears in the __________",
        "Options": [
            "a) Error correction window",
            "b) Error detection window",
            "c) Error location window",
            "d) Properties window"
        ],
        "Answer": "Answer: a\nExplanation: A suggestion for fixing the error appears in the error correction window. Move the scrollbar in the error correction window all the way to the right. The window indicates a syntax error such as missing parenthesis etc."
    },
    {
        "id": 141,
        "Question": "___________ is used to store temporary data by programmers.",
        "Options": [
            "a) Addressed Location",
            "b) Variable",
            "c) Pointer",
            "d) RAM"
        ],
        "Answer": "Answer: b\nExplanation: The name variable is used because their values change throughout the lifetime of the application. Thus the variable is also stored temporary data by programmers. Variable can be of any data type such as integer, character etc. For example, int a=0, is of datatype integer, where ‘a’ is a variable used to store an integer value."
    },
    {
        "id": 142,
        "Question": "___________ determines the type of data stored in a variable.",
        "Options": [
            "a) Function  type",
            "b) Info Type",
            "c) Variable type",
            "d) Data Type"
        ],
        "Answer": "Answer: d\nExplanation: Data type determines the type of data stored in a variable. Each Data type is a class. Each instance of these classes has a certain pattern of data. The variables are the instances of the class data type."
    },
    {
        "id": 143,
        "Question": "___________ is the universal coding scheme for characters.",
        "Options": [
            "a) ASCII",
            "b) Unicode",
            "c) Binary",
            "d) EBCDIC"
        ],
        "Answer": "Answer: b\nExplanation: Unicode is the universal coding scheme for characters. Unicode can be implemented by different character encodings in different systems. The most commonly used encodings are UTF-8, UTF-16 and the now-obsolete UCS-2."
    },
    {
        "id": 144,
        "Question": "”dblMy Age “what is the problem with this variable name?",
        "Options": [
            "a) Starts with uppercase character",
            "b) Contains uppercase characters",
            "c) Contains a space",
            "d) Contains reserved word dbl"
        ],
        "Answer": "Answer: c\nExplanation: Variable names must begin with a letter or an underscore. They can only contain numbers characters and underscores. No punctuation, special characters or spaces are allowed."
    },
    {
        "id": 145,
        "Question": "Declaring a variable tell the computer to allocate a memory space that can be accessed by the variable name. The size of the memory space depends on?",
        "Options": [
            "a) Length of variable name",
            "b) Data type of the variable",
            "c) Location of variable in program",
            "d) Size of memory in computer"
        ],
        "Answer": "Answer: b\nExplanation: Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the allocated memory. Each data type allocates different size of allocated memory."
    },
    {
        "id": 146,
        "Question": "___________ data type can store any type of data.",
        "Options": [
            "a) Object",
            "b) Universal",
            "c) DataType",
            "d) Common"
        ],
        "Answer": "Answer: a\nExplanation: Object class is the parent class of all Primitive data types. Hence it can contain any type of data. However extra work is needed to determine the type of data. An object is an instance of the class. Thus creating data type for a class is an object data type."
    },
    {
        "id": 147,
        "Question": "String data type can store from zero to ___________ Unicode characters.",
        "Options": [
            "a) 2 million",
            "b) 2 billion",
            "c) 1 billion",
            "d) 1 million"
        ],
        "Answer": "Answer: b\nExplanation: String is used to store text and can store up to 2 billion characters in Unicode. A string is generally understood as a data type and is often implemented as an array of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding. A string may also denote more general arrays or other sequence (or list) data types and structures."
    },
    {
        "id": 148,
        "Question": "The range of Integer data type is ___________ to ___________",
        "Options": [
            "a) –2,147,483,648 to 2,147,483,647",
            "b) –9,223,372,036,854,775,808 to9,223,372,036,854,775,807",
            "c) +/–4.94065645841247 X 10–324 to+/–1.79769313486231 X 10308",
            "d) –32,768 to 32,767"
        ],
        "Answer": "Answer: a\nExplanation: The Integer data type ranges from –2,147,483,648 to 2,147,483,647 whereas the Short integer  is of 2 bytes and ranges from  –32,768 to 32,767 and long integer is of 8 bytes and ranges from  –9,223,372,036,854,775,808 to 9,223,372,036,854,775,807."
    },
    {
        "id": 149,
        "Question": "The Char data type can store ___________",
        "Options": [
            "a) One Unicode character",
            "b) One ASCII character",
            "c) One bit",
            "d) One Byte"
        ],
        "Answer": "Answer: a\nExplanation: The Char data type is of 2 Bytes and can store one Unicode character. It holds unsigned 16-bit (2-byte) code points ranging in value from 0 through 65535. Each code point, or character code, represents a single Unicode character."
    },
    {
        "id": 150,
        "Question": "The variable name is also termed as ___________",
        "Options": [
            "a) Vname",
            "b) Alterable",
            "c) Identifier",
            "d) Uniform"
        ],
        "Answer": "Answer: c\nExplanation: The variable name is also called an identifier. An identifier is a name that identifies (that is, labels the identity of) either a unique object or a unique class of objects, where the “object” or class may be an idea, physical [countable] object (or class thereof), or physical [noncountable] substance (or class thereof). The abbreviation ID often refers to identity, identification (the process of identifying), or an identifier (that is, an instance of identification). An identifier may be a word, number, letter, symbol, or any combination of those."
    },
    {
        "id": 151,
        "Question": "An __________ statement is used to assign a value to an existing variable.",
        "Options": [
            "a) Arithmetic",
            "b) Relational",
            "c) Logical",
            "d) Assignment"
        ],
        "Answer": "Answer: d\nExplanation:  An assignment statement is used to assign a value to an existing variable during run time. It is also used to add value to control property during runtime. The syntax for doing so is varName=expression, where expression can contain items such as literal constants, object properties, variables, keywords or arithmetic operators."
    },
    {
        "id": 152,
        "Question": "A __________ is an item of data whose values do not change while the application is running.",
        "Options": [
            "a) Literal constant",
            "b) Variable",
            "c) Auto variable",
            "d) Extern variable"
        ],
        "Answer": "Answer: a\nExplanation:  A literal constant is a value of data, whose values does not change while the application is running. The values of the constants remain same throughout the application. Trying to change the value of the constant results in a syntax error. Anything can be a constant value i.e. a string, number, etc. can be constant."
    },
    {
        "id": 153,
        "Question": "The data type of the value assigned should be same as __________",
        "Options": [
            "a) Any constant defined in the application",
            "b) The variable itself",
            "c) Can be anything",
            "d) Any extern defined in the application"
        ],
        "Answer": "Answer: b\nExplanation: the data type of the value assigned to a variable should be same as the variable itself, i.e. assigning sting to a numeric data type will result in an error. int a =”mary”  is erroneous."
    },
    {
        "id": 154,
        "Question": "The string literal are enclosed in __________",
        "Options": [
            "a) Quotation mark",
            "b) Question mark",
            "c) Exclamation mark",
            "d) Dollar mark"
        ],
        "Answer": "Answer: a\nExplanation: The string literal variables and constants are enclosed in quotation mark whereas the numeric literal variables and constants are not. The quotation mark differentiates a string from number and variable name."
    },
    {
        "id": 155,
        "Question": "While entering a numeric literal constant you need not enter a __________",
        "Options": [
            "a) Number",
            "b) Special character",
            "c) Character",
            "d) Double variable"
        ],
        "Answer": "Answer: b\nExplanation: When entering a numeric literal constant you do not enter a comma, or special characters such as dollar sign or the percentage sign. If you want to include a percentage in the assignment statement, you do so using its decimal equivalent for example you enter 0.03 instead of 3%."
    },
    {
        "id": 156,
        "Question": "A __________ forces a literal constant to assume a data type other than the one its form indicates.",
        "Options": [
            "a) Literal type constant",
            "b) Literal type variable",
            "c) Any literal",
            "d) Keyword"
        ],
        "Answer": "Answer: a\nExplanation: decTex=0.5D statement shows that how you convert a numeric literal constant of Double data type to decimal data type and then assign the result of a decimal variable. The D that follows 0.5 in the statement is one of the literal type characters in Visual basic. A literal type constant forces a literal constant to assume a data type other than the one its form indicates. Here D forces the double number 0.5 to assume the decimal data type."
    },
    {
        "id": 157,
        "Question": "A variable can store __________ value at a time.",
        "Options": [
            "a) Only one",
            "b) More than one",
            "c) Only two",
            "d) More than two"
        ],
        "Answer": "Answer: a\nExplanation: A variable can store only one value at a time. When you use an assignment statement to assign another value to the variable, the new value replaces the existing value."
    },
    {
        "id": 158,
        "Question": "The __________ method converts a string to a number.",
        "Options": [
            "a) Tryparse",
            "b) Parse",
            "c) Convert",
            "d) Extern"
        ],
        "Answer": "Answer: a\nExplanation: The tryparse method converts a string to a number. However, unlike the val function which always returns a double number, the tryparse method allows the programmer to specify the number’s data type. For this reason most programmer prefers to use the tryparse method. Every numeric data type in visual basic has tryparse method that converts a string to that particular data type."
    },
    {
        "id": 159,
        "Question": "If the tryparse method determines that the string cannot be converted to the data type, it assigns __________ to the variable.",
        "Options": [
            "a) -1",
            "b) 1",
            "c) 0",
            "d) 2"
        ],
        "Answer": "Answer: c\nExplanation: The tryparse method parses its string argument, which means it looks at each character in the string, to determine whether the string can be converted to the number of the specified data type. If the string can be converted the tryparse method, converts the string to the number and stores the number in the variable specified. If the tryparse method determines that the string cannot be converted to the appropriate data type, it assigns 0 to the variable."
    },
    {
        "id": 160,
        "Question": "To covert a number from one data type to another, you use the __________",
        "Options": [
            "a) Convert class",
            "b) Parser",
            "c) Literal constant",
            "d) Object"
        ],
        "Answer": "Answer: a\nExplanation: The convert class can be used in any language built in visual studio. Thus they have an advantage of the conversion function; since the conversion function can only be used in visual basic. To convert a number from one data type to another, we generally use the convert class."
    },
    {
        "id": 161,
        "Question": "A variable’s ____________ indicates where the variable can be used in an application code.",
        "Options": [
            "a) Scope",
            "b) Lifetime",
            "c) Place",
            "d) Position"
        ],
        "Answer": "Answer: a\nExplanation: A variable’s scope indicates where the variable can be used in application scope. Variables can have class scope, procedure scope or block scope. However, most of the variable used in the application will have procedure scope. This is because fewer unintentional errors occur in applications where the variables are declared using the minimum scope needed which usually is the procedure scope."
    },
    {
        "id": 162,
        "Question": "A variable’s _______________ indicates how long the variable stays in the computer’s internal memory.",
        "Options": [
            "a) Scope",
            "b) Lifetime",
            "c) Place",
            "d) Position"
        ],
        "Answer": "Answer: b\nExplanation:  A variable’s lifetime indicates how long the variable stays in the computer’s internal memory. A variable’s lifetime is declared by the place where you declare the variable, in other words where you enter the variable’s declaration statement."
    },
    {
        "id": 163,
        "Question": "Variables declared in a form’s declaration section have _____________ scope.",
        "Options": [
            "a) Class",
            "b) Procedure",
            "c) Block",
            "d) Object"
        ],
        "Answer": "Answer: a\nExplanation: A form’s declaration section is not the same as general declaration section. The general declaration section is located above the public class clause in the code editor window, whereas the form’s declaration section is located between the public class and end class clauses. Variables declared in the form’s declaration section have class scope."
    },
    {
        "id": 164,
        "Question": "Variable declared in a procedure have ______________ scope.",
        "Options": [
            "a) Class",
            "b) Procedure",
            "c) Block",
            "d) Object"
        ],
        "Answer": "Answer: b\nExplanation: Variables declared in a procedure, can only be accessed within it. It cannot be accessed outside the procedure i.e. it cannot be accessed anywhere in the class except within the procedure. Hence it has a procedure scope."
    },
    {
        "id": 165,
        "Question": "Variables declared in a block have _____________ scope.",
        "Options": [
            "a) Class",
            "b) Procedure",
            "c) Block",
            "d) Object"
        ],
        "Answer": "Answer: c\nExplanation: Variables declared within a block can be accessed only within the given block. It cannot be accessed from any other block or from anywhere outside the block. Hence it has a block scope."
    },
    {
        "id": 166,
        "Question": "When you declare a variable in the form’s declaration section, it is called as ______________",
        "Options": [
            "a) Class-level variable",
            "b) Object variable",
            "c) Procedure-level variable",
            "d) Auto variable"
        ],
        "Answer": "Answer: a\nExplanation: When you declare a variable in the form’s declaration section it is called the class-level variable and has class scope. Class-level variables can be used by all the procedure in the form, including the procedures associated with the controls contained on the form."
    },
    {
        "id": 167,
        "Question": "Lifetime of a class-level variable is till ________________",
        "Options": [
            "a) A procedure ends",
            "b) An application ends",
            "c) A block ends",
            "d) Within the control section"
        ],
        "Answer": "Answer: b\nExplanation: Class-level variables can be used by all the procedures in the form, and they retain their values and remain in the computer’s memory until the application ends. In other words the lifetime of a class-level variable is same as that of the application itself."
    },
    {
        "id": 168,
        "Question": "A class-level variable is declared using ______________ keyword.",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Dim",
            "d) Static"
        ],
        "Answer": "Answer: a\nExplanation: A class-level variable is declared using private keyword. You typically use the class-level variable when more than one procedure in the same form need to use the same variable. However, a class level variable also can be used when a procedure wants to retain its value after the procedure ends."
    },
    {
        "id": 169,
        "Question": "A procedure-level variable is declared using ____________ keyword.",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Dim",
            "d) Static"
        ],
        "Answer": "Answer: c\nExplanation: A procedure-level variable is declared using Dim keyword. The scope of the procedure-level variable ends after the procedure ends as it is declared within the procedure. The value of the variable is not retained after the procedure ends."
    },
    {
        "id": 170,
        "Question": "__________ is a variable that remains in memory, and retains its value even after the procedure declaring it ends.",
        "Options": [
            "a) Procedure-level variable",
            "b) Class-level variable",
            "c) Static variable",
            "d) Dynamic variable"
        ],
        "Answer": "Answer: c\nExplanation: A static variable is a procedure-level variable that remains in memory, and also retains its value, even when the procedure in which it is declared ends. Like a class-level variable, a static variable is not removed from the computer’s internal memory until the application ends."
    },
    {
        "id": 171,
        "Question": "Static variable can only be used in the __________ in which it is declared.",
        "Options": [
            "a) Class",
            "b) Any procedures in the form",
            "c) Any form",
            "d) Only the Procedure it is declared in"
        ],
        "Answer": "Answer: d\nExplanation: Unlike a class-level variable, which can be used by all of the procedures in a form, a static variable can be used only by the procedure in which it is declared. In other words, a static variable has a narrower scope than does a class-level variable."
    },
    {
        "id": 172,
        "Question": "A __________ cannot change its value while the application is running.",
        "Options": [
            "a) Constant variable",
            "b) Class variable",
            "c) Named constant",
            "d) Static constant"
        ],
        "Answer": "Answer: c\nExplanation: Unlike a variable’s value, a named constant’s value cannot be changed while the application is running. This is because its value is set at compile time. It is exactly like a literal constant, except that it has a name."
    },
    {
        "id": 173,
        "Question": "Named constants are used because __________",
        "Options": [
            "a) Because they take up less space in memory",
            "b) Because they make documentation and code modification easier",
            "c) Because they can be easily accessed by procedures",
            "d) Because they are easily declared"
        ],
        "Answer": "Answer: b\nExplanation: Named constant are used because they make documentation and code modification easier. Named constants are used to declare names to values that are otherwise confusing. For example, dblPi can be used to demote the value of Pi which is 3.141593."
    },
    {
        "id": 174,
        "Question": "What is wrong with the expression “const dblPi As Double = 3.141593”?",
        "Options": [
            "a) Double is written",
            "b) Name should be DBLPi",
            "c) “const” starts with a “C”",
            "d) Value is too large"
        ],
        "Answer": "Answer: c\nExplanation: Syntax of a constant variable declaration is “Const constantName As dataType = expression”, that is the word const is a keyword and starts with a capital C."
    },
    {
        "id": 175,
        "Question": "What is wrong with the expression “static dblPi AsDouble ”?",
        "Options": [
            "a) Double is written",
            "b) Nothing is wrong",
            "c) “Static” starts with a “S”",
            "d) Value is not given"
        ],
        "Answer": "Answer: c\nExplanation: Syntax of a constant variable declaration is “Static variableAs data-type= expression”. That is the word static is a keyword and starts with a capital S."
    },
    {
        "id": 176,
        "Question": "7. What happens when a procedure containing the following statements ends?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> decSales <span class=\"kw4\">As</span> <span class=\"kw1\">Decimal</span>=12.2\n<span class=\"kw4\">Static</span> decTotal <span class=\"kw4\">As</span> <span class=\"kw1\">Decimal</span>=13.5</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Both values lose their values",
            "b) Dim variable loses its value",
            "c) Static variable loses its value",
            "d) Both variables retain their values"
        ],
        "Answer": "Answer: b\nExplanation: A static variable is a procedure-level variable that remains in memory, and also retains its value, even when the procedure in which it is declared ends. Thus as the procedure ends the variable declared using Dim loses its value whereas the variable declared using Static retains its value."
    },
    {
        "id": 177,
        "Question": "Using a named constant is advantageous because to change a value in future, change __________",
        "Options": [
            "a) The value in the Const statement",
            "b) The value of the variable wherever it appears in the program",
            "c) The value of the variable anywhere in the program",
            "d) The value of the variable in one of the procedures in the program"
        ],
        "Answer": "Answer: a\nExplanation: Using a named constant is advantageous because, to change a value in future, we need not change the value wherever it appears in the program; rather we need to change only in the Const statement in the program, which makes our task easier."
    },
    {
        "id": 178,
        "Question": "Unintentional errors in application by declaring variables can be reduced by __________",
        "Options": [
            "a) Giving them Small names",
            "b) Declaring them with a small sized data type",
            "c) Giving them minimum scope possible",
            "d) Making them class variables"
        ],
        "Answer": "Answer: c\nExplanation: Unintentional errors in application by declaring variables can be reduced by giving them minimum scope possible. Variable names use up the name space. Variables may hide similar variables in larger scopes, and lead to errors."
    },
    {
        "id": 179,
        "Question": "To declare a class-level named constant you declare it as __________",
        "Options": [
            "a) Public",
            "b) Dynamic",
            "c) Private",
            "d) Static"
        ],
        "Answer": "Answer: c\nExplanation: Private variables and methods are those that are meant to be directly accessed by the class that owns them. Thus giving class-level named constant, all the procedures within the class can access it, and its value is retained till the application is running."
    },
    {
        "id": 180,
        "Question": "In Visual Basic, if you keep a variable undeclared, it is automatically taken as___________ data type.",
        "Options": [
            "a) Int",
            "b) Char",
            "c) String",
            "d) Object"
        ],
        "Answer": "Answer: d\nExplanation: Visual basic can create variables “on the fly”. This means that if your code contains undeclared variables, Visual basic creates the variable for you and assigns object data type to it. An undeclared variable is a variable, which does not appear in the declaration statement i.e. the Dim statement."
    },
    {
        "id": 181,
        "Question": "__________ prevents you from using undeclared variable in your code.",
        "Options": [
            "a) Option Explicit On",
            "b) Option Implicit On",
            "c) Explicit Off",
            "d) Implicit Off"
        ],
        "Answer": "Answer: a\nExplanation:  Because it is so easy to forget to declare a variable, or so easy to misspell a variable’s name while coding, thereby inadvertently creating an undeclared variable, visual Basic provides a way that prevents you from entering undeclared variable in your code. You simply enter Option Explicit On in the General Declaration Section of the code editor window. The statement tells the code editor to alert you if your code contains a name of a undeclared data type."
    },
    {
        "id": 182,
        "Question": "__________ ensures every variable and named constant is declared with a data type.",
        "Options": [
            "a) Option Infer Off",
            "b) Option Infer On",
            "c) Option On",
            "d) Option off"
        ],
        "Answer": "Answer: a\nExplanation:  When you enter the Option Infer Off statement in the General Declaration Section, the Code Editor ensures that every variable and named constant is declared with a data type. In other words, the statement tells the computer not to infer a memory location’s data type based on the data assigned to the memory location."
    },
    {
        "id": 183,
        "Question": "__________ is used to fit the value of the data type to that of the memory location, implicitly.",
        "Options": [
            "a) Implicit type conversion",
            "b) Explicit type conversion",
            "c) Convert method",
            "d) Conversion function"
        ],
        "Answer": "Answer: a\nExplanation: The data type of the value assigned to a memory location should be same as the memory location itself. If the value’s data type does not match the memory location’s data type, the computer uses a process called implicit type conversion to convert the value to fir its memory location."
    },
    {
        "id": 184,
        "Question": "When a value is converted from one data type to another and can store numbers with greater precision, the value is said to be __________",
        "Options": [
            "a) Imported",
            "b) Exported",
            "c) Promoted",
            "d) Précised"
        ],
        "Answer": "Answer: c\nExplanation: When a value is converted from one data type to another data type, which can store either large numbers or numbers with greater precision, the value is said to be promoted. For example, while processing, Dim sales as Double=9, the value 9 will be converted from integer to double as 9.0; thus this value is said to be promoted."
    },
    {
        "id": 185,
        "Question": "When a value is converted from one data type to another and can store numbers with less precision, the value is said to be __________",
        "Options": [
            "a) Demoted",
            "b) Promoted",
            "c) Exported",
            "d) Converted"
        ],
        "Answer": "Answer: a\nExplanation: When a value is converted from one data type to another data type, which can store either small numbers, or numbers with less precision, the value is said to be demoted.  For example, Dim store as Integer=7.4, the value 7.4 is rounded off that is the decimal part is truncated and stored as 7, that is it is converted from double to integer; thus the value is said to be demoted."
    },
    {
        "id": 186,
        "Question": "You can eliminate the problems of implicit type conversion, with the help of __________",
        "Options": [
            "a) Option Strict On",
            "b) Option Strict Off",
            "c) Implicit Off",
            "d) Explicit On"
        ],
        "Answer": "Answer: a\nExplanation:  Data loss can occur when a value is changed from one data type to narrower data type that is data type with less capacity. We can eliminate such problems of implicit type conversion, with the help of Option Strict On statement in the General Declaration of the Code editor Window. When the Option Strict On appears on the application window, the computer uses the type conversion rules."
    },
    {
        "id": 187,
        "Question": "Option Strict On disallows conversion of String data type to __________ implicitly.",
        "Options": [
            "a) Double",
            "b) Object",
            "c) Character",
            "d) Array"
        ],
        "Answer": "Answer: a\nExplanation: Option Strict On disallows conversion of string data type to Double data type. You need to use the Tryparse method to explicitly convert a String to a Double data type."
    },
    {
        "id": 188,
        "Question": "Option Strict On disallows conversion of Double data type to __________ implicitly.",
        "Options": [
            "a) Double",
            "b) Object",
            "c) Character",
            "d) String"
        ],
        "Answer": "Answer: d\nExplanation: Option Strict On disallows conversion of double data type to string data type. You need to use the Convert class method to explicitly convert a String to a Double data type."
    },
    {
        "id": 189,
        "Question": "Instead of entering the Option statements in the Code Editor window, you also can enter in the __________",
        "Options": [
            "a) Properties window",
            "b) Project Designer Window",
            "c) File Manager",
            "d) Project Manager"
        ],
        "Answer": "Answer: b\nExplanation: Instead of entering the Option statements in the Code editor Window, you can also enter in the Project Designer window or Options dialog box. But it is strongly recommended that you enter the option statement in the code editor window, because doing so ensures that the options are set appropriately; it also makes your code more self-documenting. "
    },
    {
        "id": 190,
        "Question": "The __________ is used to concat to Strings.",
        "Options": [
            "a) Concatenation operator",
            "b) + symbol",
            "c) Concat function",
            "d) Cat function"
        ],
        "Answer": "Answer: a\nExplanation: The concatenation operator is used to concat or join two strings which is the &. While concatenating two strings, you must make sure that there is a space before and after the ampersand, otherwise, the code editor will not recognize the & as the concatenation operator."
    },
    {
        "id": 191,
        "Question": "Specifying the number of decimal places and special characters to display in a number is called as __________",
        "Options": [
            "a) Including",
            "b) Formatting",
            "c) Emphasizing",
            "d) Promoting"
        ],
        "Answer": "Answer: b\nExplanation: Numbers representing monetary amounts are displayed with either zero or two decimal places and may include a $ sign. Similarly, numbers representing percentage amounts are displayed with zero or more decimal places and a % sign. Specifying the number of decimal places and special characters to display in a number is called formatting."
    },
    {
        "id": 192,
        "Question": "__________ function is used to format numbers.",
        "Options": [
            "a) toString",
            "b) toNumber",
            "c) toFormat",
            "d) toSpecify"
        ],
        "Answer": "Answer: a\nExplanation: The toString function can be used to format numbers in any of the languages built into Visual Studio. The toString method’s syntax is numericVariableName.toString(formatString). The numericVariableName is the name of the numeric variable."
    },
    {
        "id": 193,
        "Question": "The toString method formats the number stored in the numeric value and then returns the result as a __________",
        "Options": [
            "a) Integer",
            "b) Double",
            "c) Character",
            "d) String"
        ],
        "Answer": "Answer: d\nExplanation:  The toString method formats the number stored in the numeric value and then returns the result as a string. Specifying the number of decimal places and special characters to display in a number is called formatting. "
    },
    {
        "id": 194,
        "Question": "__________ in the syntax gives the format you want to use.",
        "Options": [
            "a) formatString",
            "b) format",
            "c) numericVariableName",
            "d) toString"
        ],
        "Answer": "Answer: a\nExplanation: The formatString argument in the syntax gives the format you want to use.  The formatString argument must take the form “Axx” where A is the alphabetic character called the format specifier and “xx” is the sequence of digits called the precision specifier. The format specifier must be one of the built-in format characters."
    },
    {
        "id": 195,
        "Question": "__________ displays an input dialog box containing a message, Ok and Cancel button and an input area.",
        "Options": [
            "a) Inputbox function",
            "b) Inbox function",
            "c) Dialogbox function",
            "d) In function"
        ],
        "Answer": "Answer: a\nExplanation: Inputbox function displays an input dialog box containing a message, Ok and Cancel button and an input area where the user can input information. The message in the inputbox should prompt the user to enter the appropriate information in the user area."
    },
    {
        "id": 196,
        "Question": "__________ is an underscore that is immediately preceded by a space and is located at the end of the physical line of code.",
        "Options": [
            "a) Underscore",
            "b) Hyphen",
            "c) Line continuation character",
            "d) Line termination character"
        ],
        "Answer": "Answer: c\nExplanation: Line continuation character is an underscore that is immediately preceded by a space and is located at the end of the physical line of code. It is used to split a long instruction into two or more physical lines in the Code Editor Window."
    },
    {
        "id": 197,
        "Question": "The InputBox functions prompt argument should be entered using __________",
        "Options": [
            "a) Book title capitalization",
            "b) Sentence capitalization",
            "c) Text capitalization",
            "d) Post capitalization"
        ],
        "Answer": "Answer: b\nExplanation: Sentence Capitalization is used for prompt, whereas book capitalization is used for the title. The capitalization (if any) you use for the defaultResponse depends on the text itself. In most case, you enter the value return by an Inputbox function to a string variable."
    },
    {
        "id": 198,
        "Question": "The value returned by the Inputbox depends on the __________ the user chooses.",
        "Options": [
            "a) Button",
            "b) Message",
            "c) Property",
            "d) Return type"
        ],
        "Answer": "Answer: a\nExplanation: The value returned by the Inputbox depends on the button the user chooses. If the user chooses the Ok button, the inputBox function returns the value contained in the input area of the dialog box; the return value is always treated as a string. If the user clicks the Cancel button or the Close button in the title bar, the InputBox function returns an empty String."
    },
    {
        "id": 199,
        "Question": "The __________ argument contains the message to display inside the dialog box.",
        "Options": [
            "a) defaultResponse",
            "b) prompt",
            "c) title",
            "d) message"
        ],
        "Answer": "Answer: b\nExplanation: The prompt argument contains the message to display inside the dialog box. The option title and defaultResponse argument control the text that appears in the dialog box’s title bar and input area, respectively. If you omit the title argument, the project name appears in the title bar."
    },
    {
        "id": 200,
        "Question": "The __________ constant instructs the computer to advance the insertion point to the next line in control.",
        "Options": [
            "a) ControlChars.NewLine",
            "b) ControlChars.NextLine",
            "c) ControlChars.Line",
            "d) ControlChars.blankLine"
        ],
        "Answer": "Answer: a\nExplanation: The ControlChars.NewLine constant when inserted at the right location in the code, the control shifts to the next line. Thus it instructs the computer to advance the insertion point to the next line in control."
    },
    {
        "id": 201,
        "Question": "__________ can be used to advance the insertion point in a file or on the printer.",
        "Options": [
            "a) Advance pointer",
            "b) Nextpoint pointer",
            "c) NextLine constant",
            "d) ControlChars.NewLine constant"
        ],
        "Answer": "Answer: d\nExplanation: The ControlChars.NewLine constant when inserted at the right location in the code, the control shifts to the next line. Thus it can be used to advance the insertion point in a file or the pointer."
    },
    {
        "id": 202,
        "Question": "Which of the following is called the line continuation character?",
        "Options": [
            "a) *",
            "b) ^",
            "c) –",
            "d) _"
        ],
        "Answer": "Answer: d\nExplanation: When a code line exceeds the view, one can use the _ to extend it code into the next line. The line continuation character must be immediately preceded by a space and appear at the end of a physical line."
    },
    {
        "id": 203,
        "Question": "ControlChars.NewLine constant is a __________ constant.",
        "Options": [
            "a) Pure",
            "b) Invariable",
            "c) Character",
            "d) Intrinsic"
        ],
        "Answer": "Answer: d\nExplanation: Intrinsic constant is one which is built into Visual Basic. ControlChars.NewLine is inbuilt in Visual basic, that is the code for this function, that is its control is already predefined. Thus it is an intrinsic constant."
    },
    {
        "id": 204,
        "Question": "5. What is wrong with the below statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">Msg.Text=”This <span class=\"kw3\">is</span> an example”&amp;ControlChars.NewLine&amp;“Example”.</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Used double quotes, should have used single quotes",
            "b) No errors",
            "c) There should be spaces before and after each &",
            "d) Should have ended with a ;"
        ],
        "Answer": "Answer: c\nExplanation: The & operator is used to concatenate strings and should be preceded and followed by a space. It is a logical operator. Thus the syntax of the above statement is wrong, as there is no space in before and after & operator."
    },
    {
        "id": 205,
        "Question": "What is the specialty of the Default button?",
        "Options": [
            "a) Always focused by default",
            "b) Always clears the form it is in",
            "c) Can  be selected by the Enter key even when not focused",
            "d) Can  be selected by the Shift key even when not focused"
        ],
        "Answer": "Answer: d\nExplanation: The Default button is the one that is most commonly used and is assigned the Enter key as shortcut. Thus the Default button can be used that is it can be selected by Shift key even when not focused."
    },
    {
        "id": 206,
        "Question": "The Cancel Button’s procedure is accessed by __________ key.",
        "Options": [
            "a) Esc",
            "b) Alt",
            "c) Ctrl",
            "d) Shift"
        ],
        "Answer": "Answer: a\nExplanation: The cancel button is assigned as the Esc key which is used to exit the current form. Thus to exit from the current form we press the Esc key since the Cancel’s button procedure is accessed by Esc key."
    },
    {
        "id": 207,
        "Question": "How many default buttons can a form have?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: The default button is used to send the information of the current file. In such a case only one button is required per form. Thus a form can have only one default button, to send its own information."
    },
    {
        "id": 208,
        "Question": "How is a default button designated?",
        "Options": [
            "a) Default keyword in the definition of the button",
            "b) Setting the setfocus property to on",
            "c) Keeping the button at the bottom of the form",
            "d) By connecting the AcceptButton property to it"
        ],
        "Answer": "Answer: d\nExplanation: The AcceptButton property is used to send over the form information hence the button which calls it is set as the default button. Thus the Default Button is designated by connecting the Accept button property to it."
    },
    {
        "id": 209,
        "Question": "What is the correct syntax to designate a default button?",
        "Options": [
            "a) Form.default=button1",
            "b) Form.defaultButton=button1",
            "c) Form.AcceptButton=button1",
            "d) Form.focused=button1"
        ],
        "Answer": "Answer: c\nExplanation: The default button is set as form.AcceptButton=button-name. We use to set the default button using the Accept button property, thus we need to give as .AcceptButton to designate a default button in the form."
    },
    {
        "id": 210,
        "Question": "In Visual Basic __________ is used for coding single-alternative and dual-alternative selection structures.",
        "Options": [
            "a) If…Then…Else statement",
            "b) Switch-Case block",
            "c) Recursion",
            "d) function overloading"
        ],
        "Answer": "Answer: a\nExplanation: In Visual Basic If…Then…Else statement is used for coding single-alternative and dual-alternative selection structures. The If…Then…Else statement statements provide for a statement block where the condition may be true and another if the condition is false.\n"
    },
    {
        "id": 211,
        "Question": "The __________ keyword is necessary only in a dual-alternative selection structure.",
        "Options": [
            "a) Alternative",
            "b) Next",
            "c) Dual",
            "d) Else"
        ],
        "Answer": "Answer: d\nExplanation:  The Else keyword is necessary in dual-alternative selection structure. The Else part of the If…Then…Else statement evaluates the condition where the condition is false. So, it is the second alternative in the dual-alternativeselection structure."
    },
    {
        "id": 212,
        "Question": "The condition must be a __________ expression.",
        "Options": [
            "a) Integer",
            "b) Double",
            "c) Boolean",
            "d) Short"
        ],
        "Answer": "Answer: c\nExplanation:  the condition of If…Then…Else statement has to be a Boolean. The condition of the If…Then…Else statements evaluate to either True or False and depending on that the respective block of code is executed."
    },
    {
        "id": 213,
        "Question": "The set of statements contained in each path is referred to as a __________",
        "Options": [
            "a) Condition block",
            "b) Statement block",
            "c) Path block",
            "d) IfElse block"
        ],
        "Answer": "Answer: b\nExplanation: The code blocks under the If…Then…Else statements are called statement block. One executes if the condition is true and the other if it is false."
    },
    {
        "id": 214,
        "Question": "5. What is wrong with the following if-else structure?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> intQuantity &gt; 5 <span class=\"kw3\">Then</span>\n   dblDiscountRate = .1\n<span class=\"kw3\">Else</span>\n   dblDiscountRate = .05\n<span class=\"kw3\">End</span> <span class=\"kw3\">If</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) No error",
            "b) Conditions not in brackets",
            "c) No ; after statements",
            "d) ‘Then’ should have been ‘then’"
        ],
        "Answer": "Answer: a\nExplanation: The syntax of the If…Then…Else statement block is,\n\n\n\t\n\nIf condition Then\nstatement block to be processed when the condition is true\nElse\nstatement block to be processed when the condition is false\nEnd If\n\n\n"
    },
    {
        "id": 215,
        "Question": "Comparison operators are also termed as __________",
        "Options": [
            "a) Comparators",
            "b) Comparables",
            "c) Relations",
            "d) Relational operators"
        ],
        "Answer": "Answer: d\nExplanation: Comparison operators evaluate the equality or difference in degree of two given values. This means they tell us how one value is related to another, i.e. if one value is greater or not to another value."
    },
    {
        "id": 216,
        "Question": "What is the comparison operator to find if two values are equal?",
        "Options": [
            "a) equalsto",
            "b) =",
            "c) EqualsTo",
            "d) Equals"
        ],
        "Answer": "Answer: b\nExplanation:Comparison operators evaluate the equality or difference in degree of two given values. The = operator tells if one value is equal to another. "
    },
    {
        "id": 217,
        "Question": "What is the result of the expression 10-5>3*4-2?",
        "Options": [
            "a) Syntax error",
            "b) No resulting value found",
            "c) False",
            "d) True"
        ],
        "Answer": "Answer: c\nExplanation: Comparison operators are evaluated after any arithmetic expressions. Thus the first sub-condition is not greater than the second, thus it will return false."
    },
    {
        "id": 218,
        "Question": "What is the result of the expression 10-2+20>2*14-2?",
        "Options": [
            "a) Syntax error",
            "b) No resulting value found",
            "c) False",
            "d) True"
        ],
        "Answer": "Answer: d\nExplanation: Comparison operators are evaluated after any arithmetic expressions. In the above syntax, the first expression is greater than second, thus it returns true."
    },
    {
        "id": 219,
        "Question": "What is the result of the expression 10-2+20 ><2*25-2?",
        "Options": [
            "a) Syntax error",
            "b) No resulting value found",
            "c) False",
            "d) True"
        ],
        "Answer": "Answer: a\nExplanation: Comparison operators are evaluated after any arithmetic expressions. Here >< is not any sort of operator. Thus we will get a syntax error, when we evaluate the above expression. "
    },
    {
        "id": 220,
        "Question": "__________ operator reverses the truth value of the operation.",
        "Options": [
            "a) AND",
            "b) OR",
            "c) NOT",
            "d) NAND"
        ],
        "Answer": "Answer: c\nExplanation: NOT operator reverses the value of the operation. True becomes false and false becomes true. For example,\n\n\n\t\n\nIf NOT str Then\n\n\n  The above statement returns true, if the value contained in str is false. Else it returns False."
    },
    {
        "id": 221,
        "Question": "__________ operator returns true, if all the sub-conditions are true.",
        "Options": [
            "a) AND",
            "b) OR",
            "c) NOT",
            "d) NAND"
        ],
        "Answer": "Answer: a\nExplanation: AND operator returns true if all the sub-conditions are true. It returns false, if any one of the sub-condition is false. For example,\n\n\nIf a AND b Then\n\n\n  The above statement returns true, if both a and b is true. If any one of a and b is false, it returns false."
    },
    {
        "id": 222,
        "Question": "__________ operator returns true, if any of the sub-condition is true.",
        "Options": [
            "a) AND",
            "b) OR",
            "c) NOT",
            "d) NAND"
        ],
        "Answer": "Answer: b\nExplanation:  OR operator returns true, if any of the sub-condition is true. It returns false if all the sub-conditions return false. For example,\n\n\n\t\n\nIf a OR b Then\n\n\n  The above statement evaluates to true, if any one of a or b is true. If both a and b is false it returns false."
    },
    {
        "id": 223,
        "Question": "And operator checks both the sub-conditions whereas AndAlso operator does __________",
        "Options": [
            "a) Short-circuit evaluation",
            "b) Short-hand evaluation",
            "c) Short evaluation",
            "d) Circuit evaluation"
        ],
        "Answer": "Answer: a\nExplanation: And operator checks both the sub-conditions AndAlso operator does short-circuit evaluation which means in case of AndAlso operator, if any of the sub-condition is false it does not check the sub-conditions following it, but returns false."
    },
    {
        "id": 224,
        "Question": "And operator checks both the sub-conditions whereas OrElse operator does __________",
        "Options": [
            "a) Short-circuit evaluation",
            "b) Short-hand evaluation",
            "c) Short evaluation",
            "d) Circuit evaluation"
        ],
        "Answer": "Answer: a\nExplanation: Or operator checks both the sub-conditions, OrElse operator does short-circuit evaluation which means in case of OrELse operator, if any of the sub-condition is true it does not check the sub-conditions following it, but returns true."
    },
    {
        "id": 225,
        "Question": "6. In the below statement when true is returned?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> str=”USE” <span class=\"kw3\">Xor</span> strln=”USE” <span class=\"kw3\">Then</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) When both the sub-conditions are true",
            "b) When only one sub-condition is true",
            "c) When both the sub-conditions are false",
            "d) It never returns true"
        ],
        "Answer": "Answer: b\nExplanation: Xor returns true when odd number of sub-conditions are true, otherwise it returns false. In the above statement, since we have two sub-conditions, Xor will return true, only when only one sub-condition is true, otherwise it will return false."
    },
    {
        "id": 226,
        "Question": "Which logical operator does not allow us to combine two or more conditions?",
        "Options": [
            "a) AND",
            "b) OR",
            "c) NOT",
            "d) NAND"
        ],
        "Answer": "Answer: c\nExplanation: All logical operators except NOT allows us to combine two or more conditions or sub-conditions. NOT returns true if the condition is false, thus it works on only one condition; it cannot work on multiple more than one condition or sub-conditions."
    },
    {
        "id": 227,
        "Question": "8. What will be in Msg after the following code is evaluated?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> 5*3&gt;3^2 AndAlso <span class=\"kw5\">True</span> OrElse <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span>\nMsg=”Hi”\n<span class=\"kw3\">Else</span>\nMsg=”Bye”\nEndif</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hi",
            "b) Bye",
            "c) True",
            "d) False"
        ],
        "Answer": "Answer: a\nExplanation: The condition in If statement is evaluated from left to right. When the first sub-condition is true, AndAlso checks the second sub-condition which is also true. Now OrElse check that the whole sub-condition before it is true, thus it does not evaluate the third sub-condition. Since the whole expression is true, it enters if and Msg contains Hi after the evaluation."
    },
    {
        "id": 228,
        "Question": "9. What will be in Msg after the following code is evaluated?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> 3&gt;6 AndAlso 7&gt;4 <span class=\"kw3\">then</span>\n   Msg=”Hi”\n<span class=\"kw3\">Else</span>\n   Msg=”Bye”\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hi",
            "b) Bye",
            "c) True",
            "d) False"
        ],
        "Answer": "Answer: b\nExplanation: the condition in if is evaluated from left to right. When the AndAlso will see that the first sub-condition is false, it will return false, thus will not enter the If part. It will enter the else part, hence Msg will contain Bye."
    },
    {
        "id": 229,
        "Question": "10. What will be in Msg after the following code is evaluated?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> 5*3 OrElse 3^2 <span class=\"kw3\">Then</span>\n   Msg=”Hi”\n<span class=\"kw3\">Else</span>\n   Msg=”Bye”\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hi",
            "b) Bye",
            "c) True",
            "d) False"
        ],
        "Answer": "Answer: a\nExplanation: The first sub-condition returns a value, means it does not return zero, thus it is true. Thus OrElse will not check the second sub-condition, but will return true. Since it returns true, thus it will evaluate the If part, hence Msg will contain Hi."
    },
    {
        "id": 230,
        "Question": "__________ is used to converting a string to uppercase.",
        "Options": [
            "a) toUpper",
            "b) toLower",
            "c) toUpperCase",
            "d) toLowerCase"
        ],
        "Answer": "Answer: a\nExplanation: String comparisons in Visual Basic are case-sensitive, which means that the string “Yes” is not the same as either the string “YES” or the string “yes”. A problem occurs when a comparison needs to include a string that is either entered by the user or read from a file, because you cannot always control the case of the string."
    },
    {
        "id": 231,
        "Question": "The __________ operator reverses the value of the condition.",
        "Options": [
            "a) AND",
            "b) OR",
            "c) NOT",
            "d) NAND"
        ],
        "Answer": "Answer: a\nExplanation: Before using a string for comparison you may convert it to either uppercase or lowercase, because you are unaware whether the data read from file or the user input is in lower case or upper case. To do this you use the toUpper method to convert a string to uppercase and toLower method to convert a string to lowercase."
    },
    {
        "id": 232,
        "Question": "If the txtPrice control contains the value 75, what value will the variable=Decimal.TryParse (txtPrice.Text,decPrice) method return?",
        "Options": [
            "a) False",
            "b) True",
            "c) 75",
            "d) 75.00"
        ],
        "Answer": "Answer: c\nExplanation: The NOT operator reverses the value of the condition. Let a condition returns TRUE and we write ~condition, the statement will return FALSE. It happens in case of expression also."
    },
    {
        "id": 233,
        "Question": "If the txtPrice control contains the value 75, what value will the Decimal.TryParse (txtPrice.Text,decPrice) method return?",
        "Options": [
            "a) False",
            "b) True",
            "c) 75",
            "d) 75.00"
        ],
        "Answer": "Answer: b\nExplanation: The tryparse method converts the string 75 to its decimal value in decPrice as 75.00 and also returns True to variable, i.e. after converting  from string to decimal, it returns a Boolean whether it was able to convert or not."
    },
    {
        "id": 234,
        "Question": "6. What will be the output of the following Visual Basic code, If the intnumber variable is 90?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> intnumber&lt;=100 <span class=\"kw3\">Then</span>\n   Intnumber=intnumber*2;\n<span class=\"kw3\">Else</span>\n   Intnumber=intnumber*3;\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 156",
            "b) 234",
            "c) 180",
            "d) 270"
        ],
        "Answer": "Answer: d\nExplanation: The tryparse method converts the string 75 to its decimal value in decPrice as 75.00. In this case, it does not return a Boolean value, since we have not assigned any variable to hold the Boolean value."
    },
    {
        "id": 235,
        "Question": "7. What will be the output of the following Visual Basic code, If the intnumber variable is 110?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> intnumber&lt;=100 <span class=\"kw3\">Then</span>\n   Intnumber=intnumber*2;\n<span class=\"kw3\">Else</span>\n   Intnumber=intnumber*3;\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 156",
            "b) 270",
            "c) 180",
            "d) 330"
        ],
        "Answer": "Answer: c\nExplanation: Since the intnumber is 90, i.e. it is less than 100, thus if part of the code will be executed, i.e., the else part of the code will not be executed. Thus intnumber=intnumber*2 will be executed, thus 90*2=180 will be stored in intnumber."
    },
    {
        "id": 236,
        "Question": "Which is used to check both the conditions in a given if statement?",
        "Options": [
            "a) OrElse",
            "b) AndAlso",
            "c) NOT",
            "d) OR"
        ],
        "Answer": "Answer: d\nExplanation: Since the intnumber is 110, i.e. it is greater than 100, thus else part of the code will be executed, i.e., the if part of the code will not be executed. Thus intnumber=intnumber*3 will be executed, thus 110*3=330 will be stored in intnumber."
    },
    {
        "id": 237,
        "Question": "Which is used to check one among both the conditions in a given if statement?",
        "Options": [
            "a) OrElse",
            "b) AndAlso",
            "c) NOT",
            "d) OR"
        ],
        "Answer": "Answer: b\nExplanation: AndAlso is used to check both the conditions in a single if statement. For example:\n\n\nIf str<>”p” AndAlso str<>”P” Then\n   Var=”Pass”\nElse\n   Var=”Fail”\nEndIf\n\n\nIn the above example if both the condition is True then if part is executed otherwise, else part is executed, i.e. if both the condition that is str is not equal to “p” and str is not equal to “P” then only if part is executed, otherwise else part is executed."
    },
    {
        "id": 238,
        "Question": "10. In the following Visual Basic code, what will be in msg, if str contains “ik”?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> str <span class=\"kw4\">as</span> <span class=\"kw1\">String</span>\n<span class=\"kw4\">Dim</span>  msg <span class=\"kw4\">as</span> <span class=\"kw1\">String</span>\n<span class=\"kw3\">If</span> str.toUpper=”IK” \n   msg=”Hi”\n<span class=\"kw3\">Else</span>\n   msg=”Bye”\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Hi",
            "b) Bye",
            "c) Compiler Error",
            "d) Logical Error"
        ],
        "Answer": "Answer: a\nExplanation: OrElse is used to check one among both the conditions in a single if statement. For example:\n\n\nIf str<>”p” OrElse str<>”P” Then\n   Var=”Pass”\nElse\n   Var=”Fail”\nEndIf\n\n\nIn the above example if any one of the condition is True then if part is executed otherwise, else part is executed, i.e. if any one of the condition that is either str is not equal to “p” or str is not equal to “P” then only if part is executed, otherwise else part is executed.\n"
    },
    {
        "id": 239,
        "Question": "When a selection structure’s true part or false part contains another selection structure, the inner selection structured is referred to as __________",
        "Options": [
            "a) Implicit selection structure",
            "b) Inner selection structure",
            "c) Outer selection structure",
            "d) Nested selection structure"
        ],
        "Answer": "Answer: d\nExplanation: Both parts in a selection structure can include another selection structure. When a selection structure’s true part or false part contains another selection structure, the inner selection structured is referred to as a nested selection structure because it is contained within the outer selection structure."
    },
    {
        "id": 240,
        "Question": "Most common error that occur in selection structure is __________",
        "Options": [
            "a) Logical error",
            "b) Syntactical error",
            "c) Segmentation fault",
            "d) Compiler error"
        ],
        "Answer": "Answer: a\nExplanation: Most common error that occurs in selection structure is logical errors. Logic errors in selection structures are a result of one of the following three mistakes: using a compound condition rather than a nested selection structure; reversing the primary and secondary decisions; or using an unnecessary nested selection structure."
    },
    {
        "id": 241,
        "Question": "__________ refers to the process of checking your algorithm while seated at your desk.",
        "Options": [
            "a) Disk-checking",
            "b) Desk-checking",
            "c) Drive-checking",
            "d) Paper-checking"
        ],
        "Answer": "Answer: a\nExplanation:  Desk-checking refers to the process of reviewing the algorithm while seated at your desk rather than in front of the computer. Desk-checking is also called hand-tracing, because you use a pencil and paper to follow each of the algorithm’s instructions by hand."
    },
    {
        "id": 242,
        "Question": "4. What will be the content of num, after the code execution; if before code execution num has value 90?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> num&lt;=100\n    num=num*2;\n<span class=\"kw3\">ElseIf</span> num&gt;500\n   Num=num*3;\nEndif</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 90",
            "c) 180",
            "d) 270"
        ],
        "Answer": "Answer: c\nExplanation: Since at first, num=90, i.e. it is less than 100, so it enters if and increase num by num*2; thus value of num after code execution becomes 180."
    },
    {
        "id": 243,
        "Question": "5. What will be the content of num, after code execution; if before code execution num has value 1000?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> num&lt;=100\n    num=num*2;\n<span class=\"kw3\">ElseIf</span> num&gt;500\n   Num=num*3;\nEndif</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1000",
            "c) 3000",
            "d) 2000"
        ],
        "Answer": "Answer: c\nExplanation: Since at first, num=1000, i.e. it is greater than 500, so it enters elseif and increase num by num*3; thus value of num after code execution becomes 3000."
    },
    {
        "id": 244,
        "Question": "6. What will be the content of num, after code execution; if before code execution num has value 200?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> num&lt;=100\n    num=num*2;\n<span class=\"kw3\">ElseIf</span> num&gt;500\n   Num=num*3;\nEndif</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 200",
            "c) 400",
            "d) 600"
        ],
        "Answer": "Answer: b\nExplanation: Since at first, num=200, i.e. num is neither less than or equal to 100 nor it is greater than 500, so it does not enter anywhere, thus value of num does not change, thus it remains 200."
    },
    {
        "id": 245,
        "Question": "7. What will be the content of Text after the code is executed with id=2?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> id==1 <span class=\"kw3\">Then</span>\n    Text=”Janet”;\n<span class=\"kw3\">Elseif</span> id==2 OrElse id==3 <span class=\"kw3\">Then</span>\n   Text=”Mark”\n<span class=\"kw3\">ElseIF</span> id==4 <span class=\"kw3\">Then</span>\n    Text=”Jerry”\n<span class=\"kw3\">Else</span>\n  Text=”Sue “;\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Janet",
            "b) Mark",
            "c) Jerry",
            "d) Sue"
        ],
        "Answer": "Answer: b\nExplanation: In case of OrElse, if any one of the condition is true, it returns true, thus when in the first Else if statement, we find id =2, and there is OrElse, so it does not go to the condition id==3, before that it returns true. Thus it enters the Else if part and makes the value of text as Mark."
    },
    {
        "id": 246,
        "Question": "8. What will be the content of Text after the code is executed with id=4?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> id==1 <span class=\"kw3\">Then</span>\n    Text=”Janet”;\n<span class=\"kw3\">Elseif</span> id==2 OrElse id==3 <span class=\"kw3\">Then</span>\n   Text=”Mark”\n<span class=\"kw3\">ElseIF</span> id==4 <span class=\"kw3\">Then</span>\n    Text=”Jerry”\n<span class=\"kw3\">Else</span>\n  Text=”Sue “;\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Janet",
            "b) Mark",
            "c) Jerry",
            "d) Sue"
        ],
        "Answer": "Answer: c\nExplanation: The value of text after the execution of the code will be jerry. Since id=4 is in the second Else If statement, it returns true, thus the value of text becomes jerry.\n"
    },
    {
        "id": 247,
        "Question": "9. What will be the content of Text after the code is executed with id=8?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> id==1 <span class=\"kw3\">Then</span>\n    Text=”Janet”;\n<span class=\"kw3\">Elseif</span> id==2 OrElse id==3 <span class=\"kw3\">Then</span>\n   Text=”Mark”\n<span class=\"kw3\">ElseIF</span> id==4 <span class=\"kw3\">Then</span>\n    Text=”Jerry”\n<span class=\"kw3\">Else</span>\n  Text=”Sue “;\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Janet",
            "b) Mark",
            "c) Jerry",
            "d) Sue"
        ],
        "Answer": "Answer: d\nExplanation: The value of text after the execution of the code will be Sue. Since id=8 is not satisfied that is it is not found in any of the If or Else if statements, thus it enters the Else statement and makes the value of Text as Sue."
    },
    {
        "id": 248,
        "Question": "A nested selection structure can be contained in ____________________ of another selected structure.",
        "Options": [
            "a) Only in the truth part",
            "b) Only in the false part",
            "c) Either in truth or in false part",
            "d) Both in truth and in false part"
        ],
        "Answer": "Answer: d\nExplanation: A nested selection structure can be contained in both in truth and false part of another selection structure. For example, we can have the following:\n\n\nIf(condition)\n{\n   If(condition)\n      Statement;\nElse\n    Statement;\n}\nElse\n{\n  If(Condition)\n    Statement;\nElse\n    Statement;\n}\n\n\n"
    },
    {
        "id": 249,
        "Question": "Selection structures that can select from many alternatives are known as __________",
        "Options": [
            "a) Selection structures",
            "b) Multiple-alternative selection structures",
            "c) Multiway selection structures",
            "d) Multipath selection structures"
        ],
        "Answer": "Answer: b\nExplanation: At times you need to create selection structures that can select from many alternatives. Such selection structure is known as multiple-alternative selection structures. For example, a selection structure that displays message based on a letter grade entered by the user."
    },
    {
        "id": 250,
        "Question": "2. What will be contained in Msg if grade entered by user is ‘d’?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> grade==”A”\n    Msg =”Excellent”\n<span class=\"kw3\">ElseIf</span> grade==”B”\n    Msg=”Very Good”\n<span class=\"kw3\">ElseIf</span>  grade==”C”\n    Msg=”Good”\n<span class=\"kw3\">ElseIf</span> grade==”D”\n    Msg=”Fair”\n<span class=\"kw3\">Else</span>\n    Msg=”Fail”\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Fair",
            "b) Fail",
            "c) Good",
            "d) Excellent"
        ],
        "Answer": "Answer: b\nExplanation:  Since the grade entered by user does not match any of the alternatives, thus it will enter else part and print “Fail”; even though the user has entered  ‘d’; it won’t enter the part grade==”D” since it is case-sensitive. Thus either the user should enter D or we need to add a line as grade.Text.toUpper so that the user does not face any problem, even though he enters ‘d’ instead of “D”.\n"
    },
    {
        "id": 251,
        "Question": "3. What will be contained in Msg if grade entered by user is ‘d’?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">grade=grade.Text.ToUpper\n<span class=\"kw3\">If</span> grade==”A”\n  Msg =”Excellent”\n<span class=\"kw3\">ElseIf</span> grade==”B”\n  Msg=”Very Good”\n<span class=\"kw3\">ElseIf</span>  grade==”C”\n  Msg=”Good”\n<span class=\"kw3\">ElseIf</span> grade==”D”\n  Msg=”Fair”\n<span class=\"kw3\">Else</span>\n  Msg=”Fail”\nEndIf</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Fair",
            "b) Fail",
            "c) Good",
            "d) Excellent"
        ],
        "Answer": "Answer: a\nExplanation: In this case even though the user enters ‘d’ instead of “D”, it is converted to “D”, by the first line that is grade.Text.ToUpper, thus the user will not face any problem. The ElseIf statement satisfies, and thus Msg contain “Fair”."
    },
    {
        "id": 252,
        "Question": "Which is an easier alternative of multiple-alternative selection structure?",
        "Options": [
            "a) Single-alternative selection structure",
            "b) Multipath selection structure",
            "c) Select case Statement",
            "d) Multiway-alternative selection structure"
        ],
        "Answer": "Answer: c\nExplanation: When a multiple-alternative selection structure has many paths from which to choose, it is often simpler and clearer to code the selection structure using the Select Case statement rather than several If…Then…Else statements."
    },
    {
        "id": 253,
        "Question": "The select case statement ends with __________",
        "Options": [
            "a) Select End clause",
            "b) End Select clause",
            "c) End clause",
            "d) Select clause"
        ],
        "Answer": "Answer: b\nExplanation: The Select Case statement ends with end Select clause. The syntax of the Select Case statement is as follows:\n\n\n\t\n\nSelect Case SelectorExpression\nCase Expnumber\n   Instruction to the first case\nCase Expnumber\n   Instruction to the second case\nCase Expnumber\n   Instruction to the third case\nCase Else\n   Instruction when the SelectorExpression does not match\nEnd Select\n\n\n"
    },
    {
        "id": 254,
        "Question": "Which of the following Case clauses is invalid in a Select Case statement whose selectorExpression is an Integer variable named intCode?",
        "Options": [
            "a) Case Is>7",
            "b) Case 3,5",
            "c) Case 1 to 4",
            "d) Case “A”"
        ],
        "Answer": "Answer: d\nExplanation: The expression in the Case clause, can be an integer, since the selectorExpression is an integer or a range. Thus all the cases such as, Case 1to 4 is a range is valid, since, a case clause cannot have a condition, can have two integers with commas thus case 3, 5 is valid but cannot have a string since selectorExpression is an integer. Each Case clause represents a different path that the computer can follow. "
    },
    {
        "id": 255,
        "Question": "__________ must be the last clause in the Select Case statement.",
        "Options": [
            "a) Case Else",
            "b) Case expnumber",
            "c) Case seletorExpression",
            "d) Case default"
        ],
        "Answer": "Answer: a\nExplanation: You can have as many Case clauses as necessary in a Select Case statement. However, if the Select Case statement includes a Case Else clause, the Case Else clause must be the last clause in the statement. Each of the individual Case clauses, except the Case Else clause, must contain an expressionList, which can include one or more expressions."
    },
    {
        "id": 256,
        "Question": "8. What will be in text, if Intid contains 2?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Intid\n<span class=\"kw3\">Case</span> 1\n  Text=”Jannet”\n<span class=\"kw3\">Case</span> 2 <span class=\"kw3\">to</span> 4\n  Text=”Mark”\n<span class=\"kw3\">Case</span> 5, 7\n  Text=”Jerry”\n<span class=\"kw3\">Case</span> <span class=\"kw3\">Else</span>\n  Text=”Sue”\n<span class=\"kw3\">End</span> <span class=\"kw3\">Select</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Jannet",
            "b) Mark",
            "c) Jerry",
            "d) Sue"
        ],
        "Answer": "Answer: b\nExplanation: When Intid contains 2, it will enter the case 2 to 4, since it means anything between 2 to 4 will enter this case, thus, text will contain Mark."
    },
    {
        "id": 257,
        "Question": "9. What will be in text, if Intid contains 3?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Intid\n<span class=\"kw3\">Case</span> 1\n  Text=”Jannet”\n<span class=\"kw3\">Case</span> 2 <span class=\"kw3\">to</span> 4\n  Text=”Mark”\n<span class=\"kw3\">Case</span> 5, 7\n  Text=”Jerry”\n<span class=\"kw3\">Case</span> <span class=\"kw3\">Else</span>\n  Text=”Sue”\n<span class=\"kw3\">End</span> <span class=\"kw3\">Select</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Jannet",
            "b) Mark",
            "c) Jerry",
            "d) Sue"
        ],
        "Answer": "Answer: b\nExplanation: When Intid contains 2, it will enter the case 2 to 4, since it means anything between 2 to 4 will enter this case, thus, text will contain Mark. Since 3 is between 2 and 4 thus it will enter this case and thus text will contain Mark."
    },
    {
        "id": 258,
        "Question": "10. What will be in text, if Intid contains 6?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Intid\n<span class=\"kw3\">Case</span> 1\n  Text=”Jannet”\n<span class=\"kw3\">Case</span> 2 <span class=\"kw3\">to</span> 4\n  Text=”Mark”\n<span class=\"kw3\">Case</span> 5, 7\n  Text=”Jerry”\n<span class=\"kw3\">Case</span> <span class=\"kw3\">Else</span>\n  Text=”Sue”\n<span class=\"kw3\">End</span> <span class=\"kw3\">Select</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Jannet",
            "b) Mark",
            "c) Jerry",
            "d) Sue"
        ],
        "Answer": "Answer: d\nExplanation: Since none of the cases satisfy 6, thus it will enter the Case Else part and thus the text will contain Sue. If any of the cases would have satisfied, it would have entered there and come out of the Select Case statement."
    },
    {
        "id": 259,
        "Question": "__________ is used to add a GroupBox to the interface.",
        "Options": [
            "a) GroupBox tool",
            "b) Group tool",
            "c) Properties Window",
            "d) View Window"
        ],
        "Answer": "Answer: a\nExplanation: A GroupBox tool is used to add a GroupBox to the interface. The GroupBox tool is located in the containers section of the toolbox, because a GroupBox serves as a container for other controls."
    },
    {
        "id": 260,
        "Question": "__________ is used to separate related controls from other controls in the form.",
        "Options": [
            "a) GroupBox",
            "b) GroupBox tool",
            "c) View Window",
            "d) Groups"
        ],
        "Answer": "Answer: a\nExplanation: You can use GroupBox to visually separate related controls from other controls in the form. For example, suppose you are designing a calculator, the Groupbox in the interface will visually separate the controls relating to principle, rate and term information from the rest of the controls."
    },
    {
        "id": 261,
        "Question": "When you delete a groupbox the controls inside it are __________",
        "Options": [
            "a) Retained",
            "b) Given to another groupbox",
            "c) Data loss occurs",
            "d) Deleted"
        ],
        "Answer": "Answer: d\nExplanation: The groupbox and the controls contained in the groupbox are treated as one unit. When you move the groupbox, the controls inside the groupbox are moved. Likewise when you delete a groupbox, the controls inside it are deleted."
    },
    {
        "id": 262,
        "Question": "Use __________ for the optional label entered in the groupbox’s text property.",
        "Options": [
            "a) Word capitalization",
            "b) Sentence capitalization",
            "c) Mixed capitalization",
            "d) Row capitalization"
        ],
        "Answer": "Answer: b\nExplanation: You can include an identifying label in the group box, by setting the group box’s text property. Labeling a group box is optional, but if you do label it, the label should be entered using sentence capitalization."
    },
    {
        "id": 263,
        "Question": "The __________ method creates a periodic payment on either a loan or an investment.",
        "Options": [
            "a) Financial",
            "b) Pmt",
            "c) Financial.Pmt",
            "d) Calculate"
        ],
        "Answer": "Answer: c\nExplanation: The Financial.Pmt method creates a periodic payment on either a loan or an investment and it returns the calculated value as a Double number. The syntax is Financial.Pmt (Rate,NPer, PV) ; where Rate is the interest rate per period, Nper is the total number of payment periods and PV is the loan amount."
    },
    {
        "id": 264,
        "Question": "6. What will be the output of the following Visual Basic expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">Financial.Pmt (0.05, 3, 9000)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) -3304.88",
            "b) -3408.48",
            "c) -3034.88",
            "d) -3043.88"
        ],
        "Answer": "Answer: a\nExplanation: The above expression calculates for a loan of Rs. 9000 for 3 years at 5% interest. Rate is 0.05, Nper is 3 and PV is 9000. The annual payment rounded off to nearest is, -3304.88.\n"
    },
    {
        "id": 265,
        "Question": "7. What will be the output of the following Visual Basic expression?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">-Financial.Pmt (0.06/12, 5*12, 12000)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 200",
            "b) 231.99",
            "c) 345",
            "d) 324.99"
        ],
        "Answer": "Answer: b\nExplanation: The above expression calculates the monthly payment for a loan of Rs. 12000 for 5 years at 6% interest. Rate is 0.06/12, Nper is 5*12 and PV is 12000. The monthly payment rounded to the nearest and expressed as a positive number is 231.99."
    },
    {
        "id": 266,
        "Question": "The number that appears after the period in the __________ value indicates the order in which the controls were added to the groupbox.",
        "Options": [
            "a) Tab index",
            "b) Tab order",
            "c) Groupbox tool",
            "d) Tab value"
        ],
        "Answer": "Answer:a\nExplanation: You need to lock the controls in place and set the tab order. The number that appears after the period in the tab index values indicates the order in which the controls were added to the group box. The current tab index values appear on blue boxes in the form."
    },
    {
        "id": 267,
        "Question": "The TabIndex value of a group box is 5. If the txtName control was the first control added to the group box, its TabIndex value will be __________",
        "Options": [
            "a) 1",
            "b) 5.0",
            "c) 5.1",
            "d) 1.5"
        ],
        "Answer": "Answer: b\nExplanation:  The TabIndex values of the controls contained within the groupbox starts with the tab index value of the groupbox itself. Thus the control txtName has tabIndex 5, which indicates that the control belongs to the GroupBox and not to the form."
    },
    {
        "id": 268,
        "Question": "Which of the following calculates the quarterly payment on a loan of $6000 for 3 years at 9% interest? Payments should be expressed as a negative number.",
        "Options": [
            "a) Financial.Pmt (0.09/4, 3*12, 6000)",
            "b) Financial.Pmt (0.09/4, 3*4, 6000)",
            "c) Financial.Pmt(0.09/12, 3*12, 6000)",
            "d) Financial.Pmt( 0.09/12, 3*4, 6000)"
        ],
        "Answer": "Answer: b\nExplanation: When we calculate quarterly, we divide the rate by 4, and multiply the Nper by 4, thus option b is correct. On the other hand, when we calculate monthly, we divide the rate by 12 and multiply the Nper by 12. Similarly, when we calculate half yearly, we divide the rate by 2 and multiply the Nper by 2."
    },
    {
        "id": 269,
        "Question": "An application communicates with the user through __________",
        "Options": [
            "a) DialogBox",
            "b) AlertBox",
            "c) MessageBox",
            "d) AlertDialog"
        ],
        "Answer": "Answer: c\nExplanation: Application may need to communicate with the user during run time; one means of doing this is through a message box. You display a message box using the MessageBox.Show method. The message box contains text, one or more buttons, and an icon."
    },
    {
        "id": 270,
        "Question": "One can display a message box using the __________ method.",
        "Options": [
            "a) MessageBox",
            "b) AlertBox.View",
            "c) MessageBox.show",
            "d) MessageBox.Show"
        ],
        "Answer": "Answer: d\nExplanation: Application may need to communicate with the user during run time; one means of doing this is through a message box. You display a message box using the MessageBox.Show method. The message box contains text, one or more buttons, and an icon."
    },
    {
        "id": 271,
        "Question": "3. Which is the caption part for the following Visual Basic command?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">MessageBox.Show(<span class=\"st0\">\"Delete this record?\"</span>,<span class=\"st0\">\"Payroll\"</span>,MessageBoxButtons.YesNo,\nMessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2).</pre></div></div></div></div></div></div>",
        "Options": [
            "a) “Delete this record?”",
            "b) “Payroll”",
            "c) MessageBoxButtons.YesNo",
            "d) MessageBoxIcon.Exclamation"
        ],
        "Answer": "Answer: b\nExplanation: The syntax of the MessageBox.Show is-\n\n\n        \n\nMessageBox.Show (text, caption, buttons, icon, [defaultButton])\n\n\nThe caption is given as the second component in the syntax. In the above statement, the second component is the “payroll”, thus it is the caption."
    },
    {
        "id": 272,
        "Question": "When referring to the method’s return value in code, one should use the __________ value rather than the integer.",
        "Options": [
            "a) DoubleReturn",
            "b) BooleanResults",
            "c) charResult",
            "d) DialogResult"
        ],
        "Answer": "Answer: d\nExplanation: When referring to the method’s return value in code, one should use the DialogResult value rather than an integer. The values make the code more self-documenting and easier to understand."
    },
    {
        "id": 273,
        "Question": "You use the __________ constant to include the Exclamation icon in a message box.",
        "Options": [
            "a) MessageBox.exclamation",
            "b) MessageBox.Iconexclamation",
            "c) MessageBoxIcon.Exclamation",
            "d) MessageBoxWarning.Icon"
        ],
        "Answer": "Answer: c\nExplanation: The various constants like MessageBoxIcon.Exclamation is used to give icons in the Message Box. It is a constant to include the exclamation icon. MessageBoxIcon.Alert is another example which is used to give alert. MessabeBoxIcon.Close is another example, which gives the red-cross symbol."
    },
    {
        "id": 274,
        "Question": "The text box’s __________ event procedure prevents user from entering a specified character.",
        "Options": [
            "a) KeyPress",
            "b) check",
            "c) checkchar",
            "d) checkinput"
        ],
        "Answer": "Answer: a\nExplanation: The KeyPress event handles any unacceptable input the user provides in the given text area. For example, when alphabets are entered in place of numbers in text area, which is only used to enter numbers."
    },
    {
        "id": 275,
        "Question": "A control’s KeyPress event occurs every time __________",
        "Options": [
            "a) The user selects the text area",
            "b) The user submits the information in the text area",
            "c) The user types a character in the text area",
            "d) The user taps the enter key"
        ],
        "Answer": "Answer: c\nExplanation: A control’s KeyPress event occurs every time the user types a character in the text area. A control’s KeyPress event occurs each time the user presses a key while the control has the focus. "
    },
    {
        "id": 276,
        "Question": "The procedure associated with the KeyPress event has __________ parameters.",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 1"
        ],
        "Answer": "Answer: a\nExplanation: The procedure associated with the KeyPress event has two parameters, which appear within the parentheses in the procedure header, sender and e (small e)."
    },
    {
        "id": 277,
        "Question": "‘e’ parameter’s __________ property is used to determine the pressed key.",
        "Options": [
            "a) Keypress",
            "b) KeyChar",
            "c) Keychar",
            "d) Key.Char"
        ],
        "Answer": "Answer:b\nExplanation: The ‘e’ parameter’s KeyChar property is used to determine the pressed key. To prevent a text box from accepting an unacceptable character, first the ‘e’ parameter’s KeyChar property is used to determine the pressed key. KeyChar stands for “key character.”"
    },
    {
        "id": 278,
        "Question": "‘e’ parameter’s __________ property is used to cancel the key if not accepted in the text area.",
        "Options": [
            "a) Remove",
            "b) RemoveChar",
            "c) Handled",
            "d) handled"
        ],
        "Answer": "Answer: c\nExplanation: The ‘e’ parameter’s Handled property is used to cancel the key if it is an unacceptable one. You cancel the key by setting the ‘e’ ‘s Handled property to True, i.e. e.Handled = True."
    },
    {
        "id": 279,
        "Question": "You use the __________ tool to add a radio button to a form.",
        "Options": [
            "a) Button",
            "b) Radio",
            "c) Option",
            "d) RadioButton"
        ],
        "Answer": "Answer: d\nExplanation: RadioButton is used to add radio button to a form. Radio buttons are used to make mutually exclusive choices that means only one option can be selected at a time. We can select only one option in a radio button, whereas in a checkbox we can select multiple options."
    },
    {
        "id": 280,
        "Question": "Radio buttons are used to __________",
        "Options": [
            "a) make interface look better",
            "b) make coding easier",
            "c) limit user input",
            "d) fill unique information"
        ],
        "Answer": "Answer: c\nExplanation: Radio buttons are used to limit user input that is only one option can be selected, from multiple options; whereas using checkbox we can select multiple options."
    },
    {
        "id": 281,
        "Question": "During runtime radio button can be selected, if a radio button is already selected or not by using the __________ property.",
        "Options": [
            "a) Checked",
            "b) Unchecked",
            "c) On",
            "d) Selected"
        ],
        "Answer": "Answer: a\nExplanation: During runtime radio button can be selected, if a radio button is already selected or not by using the checked property. This property contains a Boolean value. If true the radio button is selected."
    },
    {
        "id": 282,
        "Question": "Radio button in an interface is labeled using __________ property.",
        "Options": [
            "a) Text",
            "b) Caption",
            "c) Name",
            "d) Label"
        ],
        "Answer": "Answer: a\nExplanation: Radio button in an interface is labeled using text property. Each radio button should be labeled to make the user understand what it is doing, and this can be done by entering the label in the button’s text property."
    },
    {
        "id": 283,
        "Question": "A Radio button can be directly accessed from the keyboard using a __________",
        "Options": [
            "a) Access key",
            "b) Shortcut key",
            "c) Assigned key",
            "d) Designated key"
        ],
        "Answer": "Answer: a\nExplanation: A radio button can be directly accessed from a keyboard using an access key. The access key is a button which allows the user to click a button in the form by pressing the Alt key in combination with the set access key."
    },
    {
        "id": 284,
        "Question": "You use the __________ tool to add a checkbox to a form.",
        "Options": [
            "a) Button",
            "b) Radio",
            "c) Option",
            "d) Checkbox"
        ],
        "Answer": "Answer: d\nExplanation: We use a checkbox tool to add a checkbox to a form. Like radio button checkbox can be checked or unchecked as in selected or deselected."
    },
    {
        "id": 285,
        "Question": "Checkbox are used to __________",
        "Options": [
            "a) make interface look better",
            "b) make coding easier",
            "c) limit user input",
            "d) fill multiple information"
        ],
        "Answer": "Answer: c\nExplanation: Checkbox are used to fill multiple information. Unlike radio button we can select more than one checkbox at a time."
    },
    {
        "id": 286,
        "Question": "During runtime checkbox can be selected, if a checkbox is already selected or not by using the __________ property.",
        "Options": [
            "a) Checked",
            "b) Unchecked",
            "c) On",
            "d) Selected"
        ],
        "Answer": "Answer: a\nExplanation: During runtime checkbox can be selected, if a checkbox is already selected or not by using the checked property. This property contains a Boolean value. If true the checked box is selected."
    },
    {
        "id": 287,
        "Question": "Checkbox in an interface is labeled using __________ property.",
        "Options": [
            "a) Text",
            "b) Caption",
            "c) Name",
            "d) Label"
        ],
        "Answer": "Answer: a\nExplanation: Checkbox in an interface is labeled using Text property. You can enter label by sentence capitalization, in the check box’s text property. Each check box should be labeled to make the user understand what it is doing, and this can be done by entering the label in the check box’s text property."
    },
    {
        "id": 288,
        "Question": "A checkbox can be directly accessed from the keyboard using a __________",
        "Options": [
            "a) Access key",
            "b) Shortcut key",
            "c) Assigned key",
            "d) Designated key"
        ],
        "Answer": "Answer: a\nExplanation: A checkbox can be directly accessed from the keyboard using a Access key. The access key is a button that allows the user to click a button in the form by pressing the Alt key in combination with the set access key."
    },
    {
        "id": 289,
        "Question": "Programmers use __________ known as loops.",
        "Options": [
            "a) Repetition structure",
            "b) Conditional structure",
            "c) Goto",
            "d) Unconditional structure"
        ],
        "Answer": "Answer: a\nExplanation:  Programmers use the repetition structure, referred to more simply as a loop, when they need the computer to repeatedly process one or more program instructions. If and for how long the instructions are repeated is determined by the loop’s condition."
    },
    {
        "id": 290,
        "Question": "The requirement for repeating the instructions is referred to as the __________",
        "Options": [
            "a) Looping condition",
            "b) Conditional statement",
            "c) Iterative statement",
            "d) Initialization statement"
        ],
        "Answer": "Answer: a\nExplanation: The requirement for repeating the instructions is referred to as the looping condition, because it indicates when the computer should continue “looping” through the instructions."
    },
    {
        "id": 291,
        "Question": "The requirement for not repeating the instructions is referred to as the __________",
        "Options": [
            "a) Loop exit condition",
            "b) Looping condition",
            "c) Conditional statement",
            "d) Iterative statement"
        ],
        "Answer": "Answer: a\nExplanation: The requirement for not repeating the instructions is referred to as the loop exit condition, because it tells the computer when to exit (or stop) the loop. Every looping condition has an opposing loop exit condition; in other words, one is the opposite of the other."
    },
    {
        "id": 292,
        "Question": "In a __________ loop the condition is evaluated before the instructions within the loop are processed.",
        "Options": [
            "a) Posttest",
            "b) Pretest",
            "c) Conditional loop",
            "d) Unconditional loop"
        ],
        "Answer": "Answer: b\nExplanation: In a pretest loop, the condition is evaluated before the instructions within the loop are processed. For example,\n\n\nrepeat while balance &lt; 250,000 \n  interest = balance * rate\n  add interest to balance\n  add 1 to number of years \nend repeat while\n\n\n"
    },
    {
        "id": 293,
        "Question": "In a __________ loop the condition is evaluated before the instructions within the loop are processed.",
        "Options": [
            "a) Posttest",
            "b) Pretest",
            "c) Conditional loop",
            "d) Unconditional loop"
        ],
        "Answer": "Answer: a\nExplanation: In a posttest loop, the condition is evaluated after the instructions within the loop are processed. For example,\n\n\n        \n\nrepeat\ninterest = balance * rate\nadd interest to balance \nadd 1 to number of years \nend repeat while balance &lt; 250,000\n\n\n "
    },
    {
        "id": 294,
        "Question": "The __________ is used to code both pretest and posttest loops.",
        "Options": [
            "a) Do loop statement",
            "b) For loop statement",
            "c) While loop statement",
            "d) If statement"
        ],
        "Answer": "Answer: a\nExplanation: The do..loop statement is used to code both pretest and posttest loops. For example,\nPretest:\n\n\n\t\n\nDo {While | Until} condition\nloop body instructions, which will be processed either\n  while the condition is true or until the condition becomes true\nLoop\n\n\nPosttest:\n\n\nDo\nloop body instructions, which will be processed either\nwhile the condition is true or until the condition becomes true\nLoop {While | Until} condition\n\n\n"
    },
    {
        "id": 295,
        "Question": "The __________ in a Do…Loop statement can contain variables, methods, constants, properties and operators.",
        "Options": [
            "a) Exit statement",
            "b) Condition",
            "c) Statement",
            "d) Iteration statement"
        ],
        "Answer": "Answer: b\nExplanation: The condition in a Do . . . Loop statement can contain variables, constants, properties, methods, keywords, and operators; it also must evaluate to a Boolean value. The condition is evaluated with each repetition of the loop and determines whether the computer processes the loop body."
    },
    {
        "id": 296,
        "Question": "8. How many times will the MessageBox.Show method in the following code be processed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">intCount =0\n<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> intCount &gt; 3\nMessageBox.Show(<span class=\"st0\">\"Hello\"</span>)\nintCount = intCount + 1\n<span class=\"kw3\">Loop</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: a\nExplanation: Since intCount is initialized to zero, the condition in the Do while statement will be false, and since the body of the loop will be executed, only if the condition is true, thus it will not be executed even once. Thus Messagebox.Show method will not be processed even once."
    },
    {
        "id": 297,
        "Question": "9. How many times will the MessageBox.Show method in the following code be processed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">intCount =0;\n<span class=\"kw3\">Do</span>\nMessageBox.Show(<span class=\"st0\">\"Hello\"</span>)\nintCount += 1\n<span class=\"kw3\">Loop</span> <span class=\"kw3\">While</span> intCount &gt; 3</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 3",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: Since it is posttest, thus the body of the loop will be executed at least once, even if the condition is false. Thus, here since the condition is false, the body of the loop will be executed once, and thus MessageBox.Show will be processed only once."
    },
    {
        "id": 298,
        "Question": "The instructions in a __________ loop are always processed at least once, whereas the instructions in a __________ loop might not be processed at all.",
        "Options": [
            "a) Posttest, pretest",
            "b) Pretest, posttest",
            "c) Pretest, pretest",
            "d) Posttest, posttest"
        ],
        "Answer": "Answer: a\nExplanation: The instructions in a posttest loop are always processed at least one, since the condition is checked after the loop body is executed at least one. So even if the condition is false, the loop body is executed at least once. Whereas the instructions in a pretest loop is not processed if the condition is false, since the condition is checked before the body of the loop is executed."
    },
    {
        "id": 299,
        "Question": "______________ is a numeric variable used for counting something.",
        "Options": [
            "a) Accumulator",
            "b) Counter",
            "c) Positive",
            "d) Negative"
        ],
        "Answer": "Answer: b\nExplanation: Counter is a numeric value used for counting something and accumulator is a valued used for accumulating something, such as adding, such as total amount of a month earned by a person etc."
    },
    {
        "id": 300,
        "Question": "______________ is a numeric variable used for accumulating something.",
        "Options": [
            "a) Accumulator",
            "b) Counter",
            "c) Positive",
            "d) Negative"
        ],
        "Answer": "Answer: b\nExplanation: Counter is a numeric value used for counting something and accumulator is a valued used for accumulating something, such as adding, such as total amount of a month earned by a person etc."
    },
    {
        "id": 301,
        "Question": "______________means to assign a beginning value to the counter or accumulator.",
        "Options": [
            "a) Initializing",
            "b) Updating",
            "c) Incrementing",
            "d) Checking"
        ],
        "Answer": "Answer: a\nExplanation: Initializing means to assign a beginning value to the counter or accumulator. Typically, counters and accumulators are initialized to the number 0. However, they can be initialized to any number, depending on the value required by the procedure."
    },
    {
        "id": 302,
        "Question": "_______________ means adding a number to the value stored in the accumulator or counter.",
        "Options": [
            "a) Initializing",
            "b) Updating",
            "c) Backtracking",
            "d) Checking"
        ],
        "Answer": "Answer: b\nExplanation: Updating often referred to as incrementing, means adding a number to the value stored in the counter or accumulator. The number can be either positive or negative, integer or non-integer. A counter is always updated by a constant value—typically the number 1—whereas an accumulator is updated by a value that varies."
    },
    {
        "id": 303,
        "Question": "When a checkbox’s ____________ property is set to true, it can both accept and display multiple lines of text.",
        "Options": [
            "a) Multiline Property",
            "b) ReadOnly Property",
            "c) ReadWrite Property",
            "d) ScrollBars Property"
        ],
        "Answer": "Answer: a\nExplanation: When a text box’s Multiline property is set to True, the text box can both accept and display multiple lines of text; otherwise, only one line of text can be entered in the text box, that is when the property is set to false, it can only accept and display one line of text."
    },
    {
        "id": 304,
        "Question": "A text box’s _____________ property specifies whether the text box has scroll bar.",
        "Options": [
            "a) Multiline Property",
            "b) ReadOnly Property",
            "c) ReadWrite Property",
            "d) ScrollBars Property"
        ],
        "Answer": "Answer: b\nExplanation: Text box’s ReadOnly property is set to false by default. Changing a text box’s ReadOnly property from its default value (False) to True prevents the user from changing the contents of the text box during run time."
    },
    {
        "id": 305,
        "Question": "The instruction above the loop is known as the ______________",
        "Options": [
            "a) Priming read",
            "b) After read",
            "c) Before read",
            "d) Reading"
        ],
        "Answer": "Answer: d\nExplanation: A text box’s ScrollBars property specifies whether the text box has scroll bar. A text box’s ScrollBars property specifies whether the text box has no scroll bars (the default), a horizontal scroll bar, a vertical scroll bar, or both horizontal and vertical scroll bars."
    },
    {
        "id": 306,
        "Question": "The instruction in the loop body is referred to as ______________",
        "Options": [
            "a) Priming read",
            "b) After read",
            "c) Before read",
            "d) Update read"
        ],
        "Answer": "Answer: a\nExplanation: The instruction above the loop is referred to as the priming read, because it is used to prime (prepare or set up) the loop. The priming read initializes the loop condition by providing its first value."
    },
    {
        "id": 307,
        "Question": "The _______________ allows you to abbreviate an assignment statement.",
        "Options": [
            "a) Arithmetic assignment operator",
            "b) Shorthand operator",
            "c) Long operator",
            "d) Predefined operator"
        ],
        "Answer": "Answer: d\nExplanation: The instruction in the loop body is referred to as the update read, because it allows the user to update the value of the input item (in this case, the sales amount) that controls the loop’s condition. The update read is often an exact copy of the priming read. Keep in mind that if you don’t include the update read in the loop body, there will be no way to enter a value that will stop the loop after it has been processed the first time. This is because the priming read is processed only once."
    },
    {
        "id": 308,
        "Question": "A ____________ loop is a loop whose processing is controlled by a counter.",
        "Options": [
            "a) Counter-controlled",
            "b) Entry-controlled",
            "c) Exit-controlled",
            "d) Accumulator-controlled"
        ],
        "Answer": "Answer: a\nExplanation: A counter-controlled loop is just what its name implies is a loop whose processing is controlled by a counter. You use a counter-controlled loop when you want the computer to process the loop instructions a precise number of times."
    },
    {
        "id": 309,
        "Question": "____________________ is a counter-controlled loop.",
        "Options": [
            "a) For..next loop",
            "b) Do..while loop",
            "c) While loop",
            "d) If statement"
        ],
        "Answer": "Answer: a\nExplanation: For . . . Next statement to code a specific type of pretest loop, called a counter-controlled loop. You also can use the Do . . . Loop statement to code a counter-controlled loop, the For . . . Next statement provides a more compact and convenient way of writing that type of loop."
    },
    {
        "id": 310,
        "Question": "3. How many times will the MessageBox.Show method in the following code be processed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">For</span> intCount <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 4 <span class=\"kw3\">To</span> 11 <span class=\"kw3\">Step</span> 2\n    MessageBox.Show(<span class=\"st0\">\"Hello\"</span>)\n<span class=\"kw3\">Next</span> intCount</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 3",
            "b) 4",
            "c) 5",
            "d) 8"
        ],
        "Answer": "Answer: b\nExplanation: The MessageBox.Show method will be processed only when the condition is satisfied. The body of the loop is executed four times, thus the MessageBox.Show method is processed four times, after which the condition is not satisfied, and it comes out of the loop."
    },
    {
        "id": 311,
        "Question": "4. What value is stored in the intCount variable when the loop ends?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">For</span> intCount <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 4 <span class=\"kw3\">To</span> 11 <span class=\"kw3\">Step</span> 2\nMessageBox.Show(<span class=\"st0\">\"Hello\"</span>)\n<span class=\"kw3\">Next</span> intCount</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 11",
            "c) 12",
            "d) 13"
        ],
        "Answer": "Answer: c\nExplanation: At first, intCount contains value 4. It enters the loop and MessageBox.Show is processed and “Hello” is shown. Then the value of count is incremented by 2 i.e. intCount becomes 6.This process is repeated, till intCount becomes 12 and the condition is not satisfied. It does not satisfy the condition, thus it comes out of the loop. Thus the value stored in the count variable when the loop ends is 12."
    },
    {
        "id": 312,
        "Question": "5. How many times will the MessageBox.Show method in the following code be processed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">For</span> count <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 5 <span class=\"kw3\">to</span> 9 <span class=\"kw3\">Step</span> 5\nMessageBox.Show(“Hi”)\n<span class=\"kw3\">Next</span> count</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 4"
        ],
        "Answer": "Answer: b\nExplanation: The MessageBox.Show method will be processed only when the condition is satisfied. The body of the loop is executed once, thus the MessageBox.Show method is processed only once, after which the condition is not satisfied, and it comes out of the loop."
    },
    {
        "id": 313,
        "Question": "6. What value is stored in the count variable when the loop ends?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">For</span> count <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 5 <span class=\"kw3\">to</span> 9 <span class=\"kw3\">Step</span> 5\nMessageBox.Show(“Hi”)\n<span class=\"kw3\">Next</span> count</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 10",
            "b) 9",
            "c) 8",
            "d) 7"
        ],
        "Answer": "Answer: a\nExplanation: At first, count contains value 5. It enters the loop and MessageBox.Show is processed and “Hi” is shown. Then the value of count is incremented by 5 i.e. count becomes 10. It does not satisfy the condition, thus it comes out of the loop. Thus the value stored in the count variable when the loop ends is 10."
    },
    {
        "id": 314,
        "Question": "____________ is the process of adding a number to the value stored in a value.",
        "Options": [
            "a) Counting",
            "b) Updating",
            "c) Accumulating",
            "d) Decrementing"
        ],
        "Answer": "Answer: b\nExplanation: Updating is the process of adding a number to the value stored in a counter or\naccumulator variable. It is also called incrementing. We increment the value in the loop. In the for loop statement, we can increment the variable as required."
    },
    {
        "id": 315,
        "Question": "_______________ in flowchart is used to represent a for clause.",
        "Options": [
            "a) Circle",
            "b) Rectangle",
            "c) Parallelogram",
            "d) Hexagon"
        ],
        "Answer": "Answer: d\nExplanation: Many programmers use a hexagon to represent the For clause.Inside\nthe hexagon, you record the counter variable’s name and its startValue, stepValue, and endValue."
    },
    {
        "id": 316,
        "Question": "9. How many times will the MessageBox.Show method in the following code be processed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">For</span> intNum <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 5 <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1\nMessageBox.Show(“Hi”)\n<span class=\"kw3\">Next</span> intNum</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 6",
            "b) 5",
            "c) 4",
            "d) 7"
        ],
        "Answer": "Answer: b\nExplanation: The MessageBox.Show method will be processed only when the condition is satisfied. The body of the loop is executed five times, thus the MessageBox.Show method is processed five times, after which the condition is not satisfied, and it comes out of the loop."
    },
    {
        "id": 317,
        "Question": "10. What value is stored in the intNum variable when the loop ends?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">For</span> intNum <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 5 <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1\nMessageBox.Show(“Hi”)\n<span class=\"kw3\">Next</span> intNum</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "Answer": "Answer: a\nExplanation: At first intNum contains value 5. It enters the loop and MessageBox.Show is processed and “Hi” is shown. Then the value of count is decremented by 1 i.e. count becomes 4. This process continues, till intNum becomes 0, when the condition is not satisfied. It does not satisfy the condition, thus it comes out of the loop. Thus the value stored in the count variable when the loop ends is 0."
    },
    {
        "id": 318,
        "Question": "The _________________ ensures that the computer processes any previous lines of code that affect the interface’s appearance.",
        "Options": [
            "a) Refresh Method",
            "b) Sleep method",
            "c) Count method",
            "d) Accumulator method"
        ],
        "Answer": "Answer: a\nExplanation: The Refresh method ensures that the computer processes any previous lines of code that affect the interface’s appearance. The Refresh method’s syntax is Me.Refresh(), in which Me refers to the current form."
    },
    {
        "id": 319,
        "Question": "To delay program execution, you can use the _____________________",
        "Options": [
            "a) Refresh Method",
            "b) Sleep method",
            "c) Count method",
            "d) Accumulator method"
        ],
        "Answer": "Answer: b\nExplanation: To delay program execution, you can use the Sleep method in the following syntax: System.Threading.Thread.Sleep(milliseconds). The milliseconds argument is the number of milliseconds to suspend the program."
    },
    {
        "id": 320,
        "Question": "A millisecond is ____________ of a second.",
        "Options": [
            "a) 1/1000",
            "b) 1/100",
            "c) 1/10",
            "d) 1/10000"
        ],
        "Answer": "Answer: a\nExplanation: A millisecond is 1/1000 of a second; in other words, there are 1000 milliseconds in a second. A millisecond is smaller unit than second."
    },
    {
        "id": 321,
        "Question": "Which of the following statements pauses program execution for 1 second?",
        "Options": [
            "a) System.Threading.Thread.Pause(1000)",
            "b) System.Threading.Thread.Pause(1)",
            "c) System.Threading.Thread.Sleep(1000)",
            "d) System.Threading.Thread.Sleep(100)"
        ],
        "Answer": "Answer: c\nExplanation: To delay program execution, you can use the Sleep method in the following syntax: System.Threading.Thread.Sleep(milliseconds). The milliseconds argument is the number of milliseconds to suspend the program. A millisecond is 1/1000 of a second; in other words, there are 1000 milliseconds in a second. A millisecond is smaller unit than second."
    },
    {
        "id": 322,
        "Question": "5. What will the following code display in the lblSum control?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> intSum <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>\n<span class=\"kw4\">Dim</span> intY <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>\n<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> intY &lt; 3\n<span class=\"kw3\">For</span> intX <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 1 <span class=\"kw3\">To</span> 4\nintSum = intSum + intX\n<span class=\"kw3\">Next</span> intX\nintY = intY + 1\n<span class=\"kw3\">Loop</span>\nlblSum.Text = Convert.ToString(intSum)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 5",
            "b) 8",
            "c) 15",
            "d) 30"
        ],
        "Answer": "Answer: d\nExplanation: The inner for loop calculates intSum as 10, and is processed thrice due to the outer for loop, thus the value of intSum at the end of both the loops is 30."
    },
    {
        "id": 323,
        "Question": "A _______________displays a list of choices.",
        "Options": [
            "a) List box",
            "b) Display box",
            "c) Choice box",
            "d) Check box"
        ],
        "Answer": "Answer: a\nExplanation: The inner loop prints * thrice since intY runs from 1 to 3 and the outer loop processes the inner loop twice since intX runs from 1 to 2. Thus * is printed in two rows."
    },
    {
        "id": 324,
        "Question": "The number of choices the user can select is controlled by the list box’s ________________",
        "Options": [
            "a) SelectionModeProperty",
            "b) Select Property",
            "c) Check Property",
            "d) IsSelect Property"
        ],
        "Answer": "Answer: a\nExplanation: A list box displays a list of choices from which the user can select zero choices,\none choice, or multiple choices. A list box is a graphical control element that allows the user to select one or more items from a list contained within a static, multiple line text box."
    },
    {
        "id": 325,
        "Question": "The items in a list box belong to a collection called the ______________",
        "Options": [
            "a) Collection",
            "b) Items Collection",
            "c) Items Add",
            "d) Add"
        ],
        "Answer": "Answer: a\nExplanation: The number of choices the user can select is controlled by the list box’s SelectionMode property. The default value for the property is One, which allows the user to select only one choice at a time. You can make a list box any size you want. However, the Windows standard for list boxes is to display a minimum of three choices and a maximum of eight choices at a time. If you have more items than can fit into the list box, the control automatically displays a scroll bar for viewing the complete list of items."
    },
    {
        "id": 326,
        "Question": "You specify each item to display in a list box using the Items collection’s______________",
        "Options": [
            "a) Add method",
            "b) Subtract method",
            "c) Divide method",
            "d) Multiply method"
        ],
        "Answer": "Answer: b\nExplanation: The items in a list box belong to a collection called the Items collection. A collection is a group of individual objects treated as one unit. The first item in the Items collection appears as the first item in the list box. The second item in the collection appears as the second item in the list box, and so on."
    },
    {
        "id": 327,
        "Question": "Every variable has both a value and _____________",
        "Options": [
            "a) Unique address",
            "b) Value",
            "c) Name",
            "d) Relative address"
        ],
        "Answer": "Answer: a\nExplanation: Every variable has both a value and a unique address that represents its location in the computer’s internal memory. Visual Basic allows you to pass either a copy of the variable’s value or the variable’s address to the receiving procedure."
    },
    {
        "id": 328,
        "Question": "Passing a copy of the variable is referred to as _____________________",
        "Options": [
            "a) Pass by value",
            "b) Pass by address",
            "c) Pass by reference",
            "d) Pass by pointer"
        ],
        "Answer": "Answer: a\nExplanation: Passing a copy of the variable’s value is referred to as passing by value. Passing a variable’s address is referred to as passing by reference. The method you choose—by value or by reference—depends on whether you want the receiving procedure to have access to the variable in memory. In other words, it depends on whether you want to allow the receiving procedure to change the variable’s contents."
    },
    {
        "id": 329,
        "Question": "Passing a variable’s address is referred to as _____________________",
        "Options": [
            "a) Pass by value",
            "b) Pass by address",
            "c) Pass by reference",
            "d) Pass by pointer"
        ],
        "Answer": "Answer: c\nExplanation: Passing a copy of the variable’s value is referred to as passing by value. Passing a variable’s address is referred to as passing by reference. The method you choose—by value or by reference—depend on whether you want the receiving procedure to have access to the variable in memory. In other words, it depends on whether you want to allow the receiving procedure to change the variable’s contents."
    },
    {
        "id": 330,
        "Question": "To pass a variable by value, you include the keyword ________________ before the name of its corresponding parameter.",
        "Options": [
            "a) ByVal",
            "b) Val",
            "c) PassVal",
            "d) Pass"
        ],
        "Answer": "Answer: a\nExplanation: To pass a variable by value, you include the keyword ByVal before the name of its corresponding parameter in the receiving procedure’s parameter list. When you pass a variable by value, the computer passes a copy of the variable’s contents to the receiving procedure. When only a copy of the contents is passed, the receiving procedure is not given access to the variable in memory. Therefore, it cannot change the value stored inside the variable. It is appropriate to pass a variable by value when the receiving procedure needs to know the variable’s contents, but it does not need to change the contents. Unless you specify otherwise, variables in Visual Basic are automatically passed by value."
    },
    {
        "id": 331,
        "Question": "The ___________statement does not indicate whether a variable is passed by value or by reference.",
        "Options": [
            "a) Call",
            "b) Parameter",
            "c) Function",
            "d) Declaration"
        ],
        "Answer": "Answer: a\nExplanation: The Call statement does not indicate whether a variable is being passed by value or by reference. To make that determination, you need to look at the receiving procedure’s header."
    },
    {
        "id": 332,
        "Question": "The position of an item in a list box depends on the value stored in the list box’s ____________________",
        "Options": [
            "a) Ascending property",
            "b) Descending Property",
            "c) Sorted property",
            "d) Unsorted property"
        ],
        "Answer": "Answer: c\nExplanation: The position of an item in a list box depends on the value stored in the list box’s Sorted property. When the Sorted property is set to False (the default value), the item is added at the end of the list. When the Sorted property is set to True, the item is sorted along with the existing items and then placed in its proper position in the list. Visual Basic sorts the list box items in dictionary order, which means that numbers are sorted before letters, and a lowercase letter is sorted before its uppercase equivalent."
    },
    {
        "id": 333,
        "Question": "The items in a list box are sorted based on the ___________ characters in each item.",
        "Options": [
            "a) Leftmost",
            "b) Rightmost",
            "c) Previous",
            "d) Next"
        ],
        "Answer": "Answer: a\nExplanation: The items in a list box are sorted based on the leftmost characters in each item. As a result, the items “Personnel”, “Inventory”, and “Payroll” will appear in the following order when the control’s Sorted property is set to True: Inventory, Payroll, Personnel. Likewise, the items 1, 2, 3, and 10 will appear in the following order when the control’s Sorted property is set to True: 1, 10, 2, 3."
    },
    {
        "id": 334,
        "Question": "The ___________ keyword tells the computer to pass the variable’s address rather than its contents.",
        "Options": [
            "a) ByRef",
            "b) ByVal",
            "c) ByAdd",
            "d) ByPoint"
        ],
        "Answer": "Answer: a\nExplanation: You pass a variable by reference when you want the receiving procedure to change the contents of the variable. To pass a variable by reference in Visual Basic, you include the keyword ByRef before the name of its corresponding parameter in the receiving procedure’s header. The ByRef keyword tells the computer to pass the variable’s address rather than its contents."
    },
    {
        "id": 335,
        "Question": "The items listed in the Call statement are referred to as ____________________",
        "Options": [
            "a) Arguments",
            "b) Parameters",
            "c) Passers",
            "d) Callers"
        ],
        "Answer": "Answer: a\nExplanation: The items listed in the Call statement are referred to as arguments; and the items listed in the calling statement are referred to as parameters."
    },
    {
        "id": 336,
        "Question": "Which of the following is false?",
        "Options": [
            "a) A function can return one or more values to the statement that invoked it",
            "b) A procedure can accept one or more items of data passed to it",
            "c) The parameter List in a procedure header is optional",
            "d) At times, a memory location inside the computer’s internal memory may have more than one name"
        ],
        "Answer": "Answer: a\nExplanation: A function can return only one value to the statement that invoked it. Since return statement is the last statement of any function."
    },
    {
        "id": 337,
        "Question": "_____________________ returns a value after performing its specific task.",
        "Options": [
            "a) Function Procedure",
            "b) Sub procedure",
            "c) Sub block",
            "d) Structure"
        ],
        "Answer": "Answer: a\nExplanation: In addition to creating Sub procedures in Visual Basic, you also can create\nFunction procedures. The difference between both types of procedures is that a Function procedure returns a value after performing its assigned task, whereas a Sub procedure does not return a value. Function procedures are referred to more simply as functions."
    },
    {
        "id": 338,
        "Question": "The functions header and footer contains the _______________ keyword.",
        "Options": [
            "a) Function",
            "b) Struct",
            "c) Sub",
            "d) Class"
        ],
        "Answer": "Answer: a\nExplanation: The header and footer in a function are almost identical to the header and footer in a Sub procedure, except the function’s header and footer contain the Function keyword rather than the Sub keyword."
    },
    {
        "id": 339,
        "Question": "A function’s header includes the ___________ data type.",
        "Options": [
            "a) As",
            "b) To",
            "c) From",
            "d) By"
        ],
        "Answer": "Answer: a\nExplanation: A Sub procedure’s header does not contain a data type since it does not return any value. Different from a Sub procedure header a function’s header includes the As dataType section, which specifies the data type of the value returned by the function."
    },
    {
        "id": 340,
        "Question": "A function can receive information either by value or by _________________",
        "Options": [
            "a) Reference",
            "b) Address",
            "c) Pointer",
            "d) Value"
        ],
        "Answer": "Answer: a\nExplanation: As is true with a Sub procedure, a function can receive information either by value or by reference. The information it receives is listed in the parameterList in the header."
    },
    {
        "id": 341,
        "Question": "Between the function’s _____________ and ___________________ you enter the instructions to process when the function is invoked.",
        "Options": [
            "a) Header and footer",
            "b) Parameters and arguments",
            "c) Call and return",
            "d) Return type and function name"
        ],
        "Answer": "Answer: a\nExplanation: Between the function’s header and footer, you enter the instructions to process when the function is invoked. It is called the function body. It performs the task that the function need to perform, and returns the appropriate result."
    },
    {
        "id": 342,
        "Question": "________________ statement is the last statement in the function.",
        "Options": [
            "a) Footer",
            "b) Header",
            "c) Return",
            "d) Call"
        ],
        "Answer": "Answer: c\nExplanation: In most cases, the Return statement is the last statement within a function. The statement’s syntax is Return expression, where expression represents the one and only value that will be returned to the statement invoking the function. The data type of the expression must agree with the data type specified in the As dataType section of the header."
    },
    {
        "id": 343,
        "Question": "Each memory location listed in the parameterList in the procedure header is referred to as _________________",
        "Options": [
            "a) an address",
            "b) a constraint",
            "c) a parameter",
            "d) a value"
        ],
        "Answer": "Answer: c\nExplanation: Each memory location listed in the parameterList in the procedure header is referred to as a parameter. It receives the value passed by the arguments during the function call."
    },
    {
        "id": 344,
        "Question": "To determine whether a variable is being passed to a procedure by value or by reference, you will need to examine ________________",
        "Options": [
            "a) the Call statement",
            "b) the procedure header",
            "c) the statements entered in the procedure",
            "d) the procedure footer"
        ],
        "Answer": "Answer: a\nExplanation: To determine whether a variable is being passed to a procedure by value or by reference, you will need to examine the Call statement. In the Call statement examining the arguments we can say whether we have passed by value or by reference."
    },
    {
        "id": 345,
        "Question": "Which of the following is false?",
        "Options": [
            "a) The sequence of the arguments listed in the Call statement should agree with the sequence of the parameters listed in the receiving procedure’s header.",
            "b) The data type of each argument in the Call statement should match the data type of its corresponding parameter in the procedure header.",
            "c) The name of each argument in the Call statement should be identical to the name of its corresponding parameter in the procedure header.",
            "d) When you pass information to a procedure by value, the procedure stores a copy of each value it receives in a separate memory location."
        ],
        "Answer": "Answer: c\nExplanation: The name of each argument in the Call statement may not be identical to the name of its corresponding parameter in the procedure header. Since when you call by value, the variables name may differ."
    },
    {
        "id": 346,
        "Question": "Which of the following instructs a function to return the contents of the decStateTax variable?",
        "Options": [
            "a) Return decStateTax",
            "b) Return ByVal decStateTax",
            "c) Send decStateTax",
            "d) SendBack decStateTax"
        ],
        "Answer": "Answer: a\nExplanation: Return decStateTax returns the value of the decStateTax, and it should be the last statement of the function. We do not need Byval here, it is only required, in the Call statement, when the function is called."
    },
    {
        "id": 347,
        "Question": "Which property is used to specify a combo box’s style?",
        "Options": [
            "a) ComboBoxStyle",
            "b) DropDownStyle",
            "c) DropStyle",
            "d) Style"
        ],
        "Answer": "Answer: b\nExplanation: Three styles of combo boxes are available in Visual Basic. The style is controlled by the combo box’s DropDownStyle property, which can be set to Simple, DropDown (the default), or DropDownList. Each style of combo box contains a text portion and a list portion."
    },
    {
        "id": 348,
        "Question": "The items in a combo box belong to which collection?",
        "Options": [
            "a) Items",
            "b) List",
            "c) ListBox",
            "d) Values"
        ],
        "Answer": "Answer: a\nExplanation: The items in a combo box belong to Items Collection. As you do with a list box, you use the Items collection’s Add method to add an item to a combo box."
    },
    {
        "id": 349,
        "Question": "Which of the following selects the Cat item, which appears third in the cboAnimal control?",
        "Options": [
            "a) cboAnimal.Selected = 2",
            "b) cboAnimal.Selected = “Cat”",
            "c) cboAnimal.Text = “Cat”",
            "d) cboAnimal.SelectedIndex=”Cat”"
        ],
        "Answer": "Answer: c\nExplanation: You can use any of the following properties to select a default item, which will appear in the text portion of the combo box: SelectedIndex, SelectedItem, or Text. If no item is selected, the SelectedItem and Text properties contain the empty string, and the SelectedIndex property contains –1 (negative one). Thus cboAnimal.Text=”Cat” selects the Cat item."
    },
    {
        "id": 350,
        "Question": "The item that appears in the text portion of a combo box is stored in which property?",
        "Options": [
            "a) SelectedText",
            "b) SelectedValue",
            "c) Text",
            "d) TextItem"
        ],
        "Answer": "Answer: c\nExplanation: You can use any of the following properties to select a default item, which will appear in the text portion of the combo box: SelectedIndex, SelectedItem, or Text. If no item is selected, the SelectedItem and Text properties contain the empty string, and the SelectedIndex property contains –1 (negative one). In the text portion, you should use the Text property; this is because the Text property contains the value either selected or entered by the user."
    },
    {
        "id": 351,
        "Question": "The _______________ event occurs when the user either types a value in the text portion of a combo box or selects a different item in the list portion.",
        "Options": [
            "a) ChangedItem",
            "b) ChangedValue",
            "c) SelectedItemChanged",
            "d) TextChanged"
        ],
        "Answer": "Answer: d\nExplanation: In the text portion, you should use the Text property; this is because the Text property contains the value either selected or entered by the user. When the value in the text portion of a combo box changes, the combo box’s TextChanged event occurs."
    },
    {
        "id": 352,
        "Question": "A form’s _________________ event is triggered when you click the Close button on its title bar.",
        "Options": [
            "a) Close",
            "b) CloseForm",
            "c) FormClose",
            "d) FormClosing"
        ],
        "Answer": "Answer: d\nExplanation: To process code when a form is about to be closed, enter the code in the form’s FormClosing event procedure, which occurs when the user clicks the Close button on a form’s title bar or when the computer processes the Me.Close() statement."
    },
    {
        "id": 353,
        "Question": "A form’s ____________ event is triggered when the computer processes the Me.Close() statement.",
        "Options": [
            "a) Close",
            "b) Closing",
            "c) FormClose",
            "d) FormClosing"
        ],
        "Answer": "Answer: d\nExplanation: To process code when a form is about to be closed enter the code in the form’s FormClosing event procedure, which occurs when the user clicks the Close button on a form’s title bar or when the computer processes the Me.Close() statement."
    },
    {
        "id": 354,
        "Question": "Which of the following statements prevents a form from being closed?",
        "Options": [
            "a) e.Cancel = False",
            "b) e.Cancel = True",
            "c) e.Close = False",
            "d) sender.Close = False"
        ],
        "Answer": "Answer: b\nExplanation: To prevent a form from being closed set the Cancel property of the FormClosing event procedure’s e parameter to True, i.e. set e.Cancel=True."
    },
    {
        "id": 355,
        "Question": "Which of the following rounds the contents of the intNum variable to three decimal places?",
        "Options": [
            "a) Math.Round(3, intNum)",
            "b) Math.Round(intNum, 3)",
            "c) Round.Math(intNum, 3)",
            "d) Round.Math(3, intNum)"
        ],
        "Answer": "Answer: b\nExplanation: You can use the Math.Round function to return a number rounded to a specific number of decimal places. The function’s syntax is Math.Round(value[, digits]). In the syntax, value is a numeric expression, and digits (which is optional) is an integer indicating how many places to the right of the decimal point are included in the rounding. For example, Math. Round(3.235, 2) returns the number 3.24, and Math.Round(3.234, 1) returns the number 3.2. If the digits argument is omitted, the Math.Round function returns an integer."
    },
    {
        "id": 356,
        "Question": "A _______________ allows you to select from a list of choices.",
        "Options": [
            "a) Combo Box",
            "b) Combo List",
            "c) Check Box",
            "d) Radio Button"
        ],
        "Answer": "Answer: a\nExplanation: In many interfaces, combo boxes are used in place of list boxes. You use the ComboBox tool in the toolbox to add a combo box to an interface. A combo box is similar to a list box in that it allows the user to select from a list of choices. However, unlike a list box, the full list of choices in a combo box can be hidden, allowing you to save space on the form. Also unlike a list box, a combo box contains a text field. Depending on the style of the combo box, the text field may or may not be editable by the user."
    },
    {
        "id": 357,
        "Question": "The number of characters contained in a String is stored as Integer in String’s ____________",
        "Options": [
            "a) Substring property",
            "b) Length property",
            "c) Reverse property",
            "d) Index property"
        ],
        "Answer": "Answer: b\nExplanation: The number of characters contained in a String is stored as Integer in String’s Length Property. The syntax to calculate length is string.Length. In the syntax, string can be a String variable, a String named constant, or the Text property of a control."
    },
    {
        "id": 358,
        "Question": "_______________ method is used to remove space from beginning and end of a string.",
        "Options": [
            "a) Trim",
            "b) Remove",
            "c) Truncate",
            "d) DeleteSpace"
        ],
        "Answer": "Answer: a\nExplanation: Trim method is used to remove space from beginning and end of a string. The syntax is string.Trim. In the syntax, string can be a String variable, a String named constant, or the Text property of a control. When processing the Trim method, the computer first makes a temporary copy of the string in memory. It then performs the specified removal on the copy only. In other words, the method does not remove any characters from the original string. The method returns a string with the appropriate characters removed."
    },
    {
        "id": 359,
        "Question": "_______________________ method is used to remove specified number of characters located anywhere in the String.",
        "Options": [
            "a) Trim",
            "b) Remove",
            "c) Truncate",
            "d) DeleteSpace"
        ],
        "Answer": "Answer: b\nExplanation: Remove method is used to remove specified number of characters located anywhere in the string. The syntax is string.Remove(startIndex[, numCharsToRemove]). In the syntax, string can be a String variable, a String named constant, or the Text property of a control. When processing the Remove method, the computer first makes a temporary copy of the string in memory. It then performs the specified removal on the copy only. In other words, the method does not remove any characters from the original string. The method returns a string with the appropriate characters removed."
    },
    {
        "id": 360,
        "Question": "4. What will contain in txtFirst after the following Visual Basic code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strName = <span class=\"st0\">\"Penny Swanson\"</span>\ntxtFirst.Text = strName.Remove(5)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Penny",
            "b) Swanson",
            "c) Penny S",
            "d) y Swanson"
        ],
        "Answer": "Answer: a\nExplanation: When number of characters is not mentioned in case of Remove method, it removes all the characters from the index or position provided. Thus it assigns string “Penny” to the txtFirst control’s Text property. You can also write the assignment statement as txtFirst.Text=strName.Remove(5,8)."
    },
    {
        "id": 361,
        "Question": "5. What will be the value of num after the following Visual Basic code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strName=”Veronica Yardley”\nnum=strName.Length</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 15",
            "b) 16",
            "c) 14",
            "d) 17"
        ],
        "Answer": "Answer: b\nExplanation: strName.Length stores the number of characters in the String strName as integer, i.e. it gives the length of the string, and belongs to the Steing’s Length Property."
    },
    {
        "id": 362,
        "Question": "_____________________ method allows you to insert anywhere in the string.",
        "Options": [
            "a) Remove",
            "b) Insert",
            "c) Import",
            "d) Delete"
        ],
        "Answer": "Answer: b\nExplanation: Visual Basic’s Insert method allows you to insert characters anywhere in a string. The syntax is as follows: string.Insert(startIndex, value). In the syntax, string can be a String variable, a String named constant, or the Text property of a control. When processing the Insert method, the computer first makes a temporary copy of the string in memory. It then performs the specified insertion on the copy only. In other words, the method does not affect the original string. The startIndex argument in the Insert method is an integer that specifies where in the string’s copy you want the value inserted."
    },
    {
        "id": 363,
        "Question": "7. What will be in strName after the following code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strName=”Joanne Hashen”\nstrName=strName.Insert(7,”C.”);</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Joanne C. Hashen",
            "b) JoanneC.hashen",
            "c) Joanne",
            "d) C.Hashen"
        ],
        "Answer": "Answer: a\nExplanation: The code assigns the string “Joanne C. Hashen” to the variable strName. The string “C.” is inserted in between at position 7, and it is inserted in the variable which contained the original String. Thus the original String will change, if no copy of the original String is changed."
    },
    {
        "id": 364,
        "Question": "____________________ and ____________________ methods are used to align characters in a String.",
        "Options": [
            "a) PadLeft, PadRight",
            "b) Left, Right",
            "c) LeftAlign, RightAlign",
            "d) AlignLeft, AlignRight"
        ],
        "Answer": "Answer: a\nExplanation: You can use Visual Basic’s PadLeft and PadRight methods to align the characters in a string. The methods do this by inserting (padding) the string with zero or more characters until the string is a specifi ed length; each method then returns the padded string. The syntax is as follows:\n\n\nstring.PadLeft(totalChars[, padCharacter])\nstring.PadRight(totalChars[, padCharacter])\n\n\n"
    },
    {
        "id": 365,
        "Question": "If the padCharacter is omitted from the syntax of the padLeft or PadRight, the default is ______________",
        "Options": [
            "a) Space",
            "b) *",
            "c) /",
            "d) ?"
        ],
        "Answer": "Answer: a\nExplanation: The optional padCharacter argument is the character that each method uses to pad the string until it reaches the desired number of characters. If the padCharacter argument is omitted, the default padding character is the space character."
    },
    {
        "id": 366,
        "Question": "The ________________ method pads the string on left, that is, it inserts the padded characters at the beginning of string.",
        "Options": [
            "a) PadLeft",
            "b) PadRight",
            "c) PadFront",
            "d) PadBegin"
        ],
        "Answer": "Answer: a\nExplanation: The PadLeft method pads the string on the left, which means it inserts the padded characters at the beginning of the string; doing this right-aligns the characters within the string. The PadRight method, on the other hand, pads the string on the right, which means it inserts the padded characters at the end of the string and left-aligns the characters within the string."
    },
    {
        "id": 367,
        "Question": "To determine whether a string has specific sequence of characters, use _________________",
        "Options": [
            "a) Contains method",
            "b) Specific method",
            "c) Sequence method",
            "d) Check method"
        ],
        "Answer": "Answer: a\nExplanation: If you need to determine whether a string contains a specific sequence of characters, you can use either the Contains method or the IndexOf method.  The syntax is as follows:\n\n\n\t\n\nstring.Contains(subString)\nstring.IndexOf(subString[, startIndex])\n\n\nIn each syntax, string can be a String variable, a String named constant, or the Text property of a control. When processing the Contains and IndexOf methods, the computer first makes a temporary copy of the string in memory. It then performs the specified search on the copy only."
    },
    {
        "id": 368,
        "Question": "The ______________ argument in syntax of Contains method represents the sequence of arguments you are searching.",
        "Options": [
            "a) subString",
            "b) SearchString",
            "c) String",
            "d) Seq"
        ],
        "Answer": "Answer: a\nExplanation: The subString argument in syntax of Contains method represents the sequence of characters for which you are searching. The method performs a case-sensitive search, which means the case of the subString must match the case of the string in order for both to be considered equal."
    },
    {
        "id": 369,
        "Question": "The Contains Method returns ______________ value.",
        "Options": [
            "a) Integer",
            "b) Void",
            "c) Boolean",
            "d) String"
        ],
        "Answer": "Answer: c\nExplanation: The Contains method returns the Boolean value True when the substring is contained anywhere in the string; otherwise, it returns the Boolean value False. The Contains method always begins the search with the first character in the string."
    },
    {
        "id": 370,
        "Question": "The Indexof method returns ________________ value.",
        "Options": [
            "a) Integer",
            "b) Boolean",
            "c) Void",
            "d) String"
        ],
        "Answer": "Answer: a\nExplanation: The IndexOf method returns an integer— either –1 if the subString is not contained in the string or the character index that represents the starting position of the subString in the string. Unless you specify otherwise, the IndexOf method starts the search with the first character in the string. To specify a different starting location, you use the optional startIndex argument."
    },
    {
        "id": 371,
        "Question": "5. What output will be returned if the following Visual Basic code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strCityState = <span class=\"st0\">\"Nashville, TN\"</span>\nblnIsContained = strCityState.Contains(<span class=\"st0\">\"TN\"</span>)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) True",
            "b) False",
            "c) 11",
            "d) 12"
        ],
        "Answer": "Answer: a\nExplanation: The Contains method returns true if the sequence of character is found. It would have returned 11 if it would have been IndexOf method which returns the index of the first character of the sequence."
    },
    {
        "id": 372,
        "Question": "6. What output will be returned if the following Visual Basic code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strCityState = <span class=\"st0\">\"Nashville, TN\"</span>\nintCharIndex = strCityState.IndexOf(<span class=\"st0\">\"TN\"</span>)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) True",
            "b) False",
            "c) 11",
            "d) 12"
        ],
        "Answer": "Answer: c\nExplanation: The IndexOf method returns the index of the first character of the sequence, thus it returns 11 as the index of the first character “T” is 11. If it would have been Contains Method, it would have returned True."
    },
    {
        "id": 373,
        "Question": "7. What output will be returned if the following Visual Basic code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strCityState = <span class=\"st0\">\"Nashville, TN\"</span>\nblnIsContained = strCityState.Contains(<span class=\"st0\">\"Tn\"</span>)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) True",
            "b) False",
            "c) 11",
            "d) 12"
        ],
        "Answer": "Answer: c\nExplanation: The Contains Method is case sensitive, thus returns false since the string “Tn” is not available, but the string “TN” is. It would have returned true if it would have been “TN” instead of “Tn”."
    },
    {
        "id": 374,
        "Question": "8. What output will be returned if the following Visual Basic code is executed?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\">strCityState = <span class=\"st0\">\"Nashville, TN\"</span>\nintCharIndex = strCityState.IndexOf(<span class=\"st0\">\"Tn\"</span>)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) True",
            "b) False",
            "c) 11",
            "d) -1"
        ],
        "Answer": "Answer: d\nExplanation: The Indexof method is case sensitive, thus returns -1 since the sequence do not match. If the sequence would have matched, it would have returned the index of the first character of the sequence. It would have matched if the sequence would have been “TN’ instead of “Tn”."
    },
    {
        "id": 375,
        "Question": "________________ method is used for accessing any number of characters in a String.",
        "Options": [
            "a) Substring",
            "b) Contains",
            "c) IndexOf",
            "d) CharAt"
        ],
        "Answer": "Answer: a\nExplanation: Visual Basic provides the Substring method for accessing any number of characters in a string. The syntax is as follows:\n\n\nstring.Substring(startIndex[, numCharsToAccess])\n\n\nIn the syntax, string can be a String variable, a String named constant, or the Text property of a control. When processing the Substring method, the computer first makes a temporary copy of the string in memory. It then accesses the specified number of characters in the copy only. The startIndex argument in the syntax is the index of the first character you want to access in the string’s copy."
    },
    {
        "id": 376,
        "Question": "_________________ argument in the Substring syntax specifies number of characters you want to access.",
        "Options": [
            "a) numCharToAccess",
            "b) CharAccess",
            "c) numAccess",
            "d) ToAccess"
        ],
        "Answer": "Answer: a\nExplanation: The optional numCharsToAccess argument in the Substring syntax specifies the number of characters you want to access. The Substring method returns a string that contains the number of characters specified in the numCharsToAccess argument, beginning with the character whose index is startIndex. If you omit the numCharsToAccess argument, the Substring method returns all characters from the startIndex position through the end of the string."
    },
    {
        "id": 377,
        "Question": "The _______________ operator allows you to use pattern matching characters to determine whether one String is equal to another String.",
        "Options": [
            "a) Like",
            "b) Pattern",
            "c) Match",
            "d) StringMatch"
        ],
        "Answer": "Answer: a\nExplanation: The Like operator allows you to use pattern-matching characters to determine whether one string is equal to another string. The syntax is as follows:\nstring Like pattern\nIn the syntax, string can be a String variable, a String named constant, or the Text property of a control. Pattern is a String expression containing one or more of the pattern-matching characters."
    },
    {
        "id": 378,
        "Question": "The ___________ in a pattern represents one character only.",
        "Options": [
            "a) ?",
            "b) *",
            "c) #",
            "d) **"
        ],
        "Answer": "Answer: a\nExplanation: The question mark (?) character in a pattern represents one character only, whereas the asterisk (*) character represents zero or more characters. To represent a single digit in a pattern, you use the number sign (#) character."
    },
    {
        "id": 379,
        "Question": "The _____________ in a pattern represents zero or more characters.",
        "Options": [
            "a) ?",
            "b) *",
            "c) #",
            "d) **"
        ],
        "Answer": "Answer: b\nExplanation: The question mark (?) character in a pattern represents one character only, whereas the asterisk (*) character represents zero or more characters. To represent a single digit in a pattern, you use the number sign (#) character."
    },
    {
        "id": 380,
        "Question": "The _____________ in a pattern represents a single digit.",
        "Options": [
            "a) ?",
            "b) *",
            "c) #",
            "d) **"
        ],
        "Answer": "Answer: c\nExplanation: The question mark (?) character in a pattern represents one character only, whereas the asterisk (*) character represents zero or more characters. To represent a single digit in a pattern, you use the number sign (#) character."
    },
    {
        "id": 381,
        "Question": "The Like operator returns _______________ value.",
        "Options": [
            "a) Integer",
            "b) Boolean",
            "c) String",
            "d) Float"
        ],
        "Answer": "Answer: b\nExplanation: The Like operator compares the string to the pattern; the comparison is case-sensitive. If the string matches the pattern, the Like operator returns the Boolean value True; otherwise, it returns the Boolean value False."
    },
    {
        "id": 382,
        "Question": "Which of the following expressions evaluates to True when the strPart variable contains the string “123X45”?",
        "Options": [
            "a) strPart Like “999[A-Z]99”",
            "b) strPart Like “######”",
            "c) strPart Like “###[A-Z]##”",
            "d) strPart Like “##??##”"
        ],
        "Answer": "Answer: c\nExplanation: The pattern in “###[A-Z]##” gives we have 3 digits followed by a character between A-Z and followed by two digits. It could also have been written as “###?##”."
    },
    {
        "id": 383,
        "Question": "7. In the following code, the while loop will execute if strId would have been _______________<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> strId <span class=\"kw3\">Like</span> <span class=\"st0\">\"###*\"</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) 123ABC",
            "b) Fgh2",
            "c) Xzya",
            "d) Xyza"
        ],
        "Answer": "Answer: a\nExplanation: The while loop will execute if the condition returned is true that is if strId will be 3 digits followed by zero or more number of characters, as we see in case of 123ABC where we have 3 digits followed by 3 characters."
    },
    {
        "id": 384,
        "Question": "8. In the following code, the body of If will execute if txtState.Text contains?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> txtState.Text <span class=\"kw3\">Like</span> <span class=\"st0\">\"K*\"</span> <span class=\"kw3\">Then</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) K",
            "b) K123",
            "c) K4",
            "d) 4K"
        ],
        "Answer": "Answer: a\nExplanation: The body of If will execute if the condition evaluates to True. The condition evaluates to True when the value in the txtState control’s Text property begins with the letter K followed by zero or more characters; otherwise, it evaluates to False. In this case we see that “K” matches the condition, thus if txtState.Text is “K” then it will execute the body of the If."
    },
    {
        "id": 385,
        "Question": "9. In the following code, the body of If will execute if strFirst contains?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> strFirst.ToUpper <span class=\"kw3\">Like</span> <span class=\"st0\">\"B?LL\"</span> <span class=\"kw3\">Then</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) Bill",
            "b) Lii",
            "c) LL1",
            "d) 123"
        ],
        "Answer": "Answer: a\nExplanation: The body of If will execute if the condition evaluates to True. The condition evaluates to True when the string stored in the strFirst variable (converted to uppercase) begins with the letter B followed by one character and then the two letters LL; otherwise, it evaluates to False. In this case we see that “Bill” matches the condition, thus if strFirst is “Bill” then it will execute the body of the If."
    },
    {
        "id": 386,
        "Question": "10. In the following code, the body of If will execute if strFirst contains?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw3\">If</span> strFirst.ToUpper <span class=\"kw3\">Like</span> <span class=\"st0\">\"T[OI]M\"</span> <span class=\"kw3\">Then</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) TIM",
            "b) TM",
            "c) IM",
            "d) OM"
        ],
        "Answer": "Answer: a\nExplanation:  The body of If will execute if the condition evaluates to True. The condition evaluates to True when the string stored in the strFirst variable (converted to uppercase) is either “TOM” or “TIM”. When the variable does not contain “TOM” or “TIM” the condition evaluates to False. In this case we see that “TIM” matches the condition, thus if strFirst is “Tim” then it will execute the body of the If."
    },
    {
        "id": 387,
        "Question": "You use ______________ to include one or more menus on a Windows form.",
        "Options": [
            "a) Menu control",
            "b) Menu strip control",
            "c) Form control",
            "d) Menu properties"
        ],
        "Answer": "Answer: b\nExplanation: The Menus and Toolbars section of the toolbox contains a MenuStrip tool for instantiating a menu strip control. You use a menu strip control to include one or more menus on a Windows form. Each menu contains a menu title, which appears on the menu bar at the top of the form. When you click a menu title, its corresponding menu opens and displays a list of options, called menu items."
    },
    {
        "id": 388,
        "Question": "The list of items displayed by menu title are known as ________________",
        "Options": [
            "a) Items",
            "b) Menu list",
            "c) Menu items",
            "d) Lists"
        ],
        "Answer": "Answer: c\nExplanation: Each menu contains a menu title, which appears on the menu bar at the top of the form. When you click a menu title, its corresponding menu opens and displays a list of options, called menu items. The menu items can be commands (such as Open or Exit), separator bars, or submenu titles."
    },
    {
        "id": 389,
        "Question": "Each of the options on the submenu are referred to as ________",
        "Options": [
            "a) Menu items",
            "b) Submenu items",
            "c) Submenu lists",
            "d) Options"
        ],
        "Answer": "Answer: b\nExplanation: As in all Windows applications, clicking a command on a menu executes the command, and clicking a submenu title opens an additional menu of options. Each of the options on a submenu is referred to as a submenu item. You can use a separator bar to visually group together related items on a menu or submenu."
    },
    {
        "id": 390,
        "Question": "______________ is used to visually group together related items on a menu or submenu.",
        "Options": [
            "a) Separator line",
            "b) Separator bar",
            "c) Line",
            "d) Bar"
        ],
        "Answer": "Answer: b\nExplanation: You can use a separator bar to visually group together related items on a menu or submenu. Although you can create many levels of submenus, it is best to use only one level in your application, because too many layers of submenus can be confusing to the user."
    },
    {
        "id": 391,
        "Question": "Each menu element is considered as _______________",
        "Options": [
            "a) Class",
            "b) Object",
            "c) Instance",
            "d) Member"
        ],
        "Answer": "Answer: b\nExplanation: Each menu element is considered an object; therefore, each has a set of properties associated with it. The most commonly used properties for a menu element are the Name and Text properties. The programmer uses the Name property to refer to the menu element in code. The Text property stores the menu element’s caption, which is the text that the user sees when he or she is working with the menu."
    },
    {
        "id": 392,
        "Question": "The programmer use ______________ property to refer to menu element in code.",
        "Options": [
            "a) Text",
            "b) Code",
            "c) Name",
            "d) Element"
        ],
        "Answer": "Answer: c\nExplanation: The most commonly used properties for a menu element are the Name and Text properties. The programmer uses the Name property to refer to the menu element in code."
    },
    {
        "id": 393,
        "Question": "The ____________ indicates the purpose of the menu element.",
        "Options": [
            "a) Caption",
            "b) Text",
            "c) Name",
            "d) Properties"
        ],
        "Answer": "Answer: a\nExplanation: The most commonly used properties for a menu element are the Name and Text properties. The Text property stores the menu element’s caption, which is the text that the user sees when he or she is working with the menu. The caption indicates the purpose of the menu element. Examples of familiar captions for menu elements include Edit, Save As, Copy, and Exit."
    },
    {
        "id": 394,
        "Question": "________________ capitalization is used for menu item captions.",
        "Options": [
            "a) Book title",
            "b) Sentence",
            "c) Line",
            "d) Title"
        ],
        "Answer": "Answer: a\nExplanation: Menu title captions should be one word only, with the first letter capitalized. Unlike the captions for menu titles, the captions for menu items typically consist of one to three words. The Windows standard is to use book title capitalization for the menu item captions."
    },
    {
        "id": 395,
        "Question": "Each menu title should have an unique ______________",
        "Options": [
            "a) Access key",
            "b) Property",
            "c) Caption",
            "d) Lists"
        ],
        "Answer": "Answer: a\nExplanation: Each menu title should have a unique access key. The access key allows the user to open the menu by pressing the Alt key in combination with the access key."
    },
    {
        "id": 396,
        "Question": "Each menu item should have an _______________ that is unique within its menu.",
        "Options": [
            "a) Access key",
            "b) Property",
            "c) Caption",
            "d) Lists"
        ],
        "Answer": "Answer: a\nExplanation: Each menu item should have an access key that is unique within its menu. The access key allows the user to select the item by pressing the access key when the menu is open. If a menu item requires additional information from the user, the Windows standard is to place an ellipsis (…) at the end of the caption. The ellipsis alerts the user that the menu item requires more information before it can perform its task."
    },
    {
        "id": 397,
        "Question": "A simple variable, also called as a ________ variable, is one that is unrelated to any other variable in memory.",
        "Options": [
            "a) Changing",
            "b) Dynamic",
            "c) Static",
            "d) Scalar"
        ],
        "Answer": "Answer: d\nExplanation:All variables are simple variables. A simple variable, also called a scalar variable, is one that is unrelated to any other variable in memory. At times, however, you will encounter situations in which some of the variables are related to each other."
    },
    {
        "id": 398,
        "Question": "When you group together related variables, the group is referred to as _________",
        "Options": [
            "a) Array",
            "b) List",
            "c) Relation",
            "d) Variable group"
        ],
        "Answer": "Answer: a\nExplanation:When you group together related variables, the group is referred to as an array of variables or, more simply, an array. Ex: array of all integers."
    },
    {
        "id": 399,
        "Question": "Using array in a program is efficient because ________",
        "Options": [
            "a) It shortens the program.",
            "b) The program compiles faster",
            "c) Number of variables are reduced.",
            "d) Data is accessed faster"
        ],
        "Answer": "Answer: d\nExplanation: Storing data in an array increases the efficiency of a program, because data can be both stored in and retrieved from the computer’s internal memory much faster than it can be written to and read from a file on a disk."
    },
    {
        "id": 400,
        "Question": "Data in an array can be distinguished using _______ number.",
        "Options": [
            "a) Reference",
            "b) Subscript",
            "c) Array",
            "d) ID"
        ],
        "Answer": "Answer: b\nExplanation:The unique number, which is always an integer, is called a subscript. The subscript indicates the variable’s position in the array and is assigned by the computer when the array is created in internal memory. The first variable in a one dimensional array is assigned a subscript of 0, the second a subscript of 1, and so on."
    },
    {
        "id": 401,
        "Question": "If array is of String type all values are _________ by default.",
        "Options": [
            "a) null",
            "b) Null",
            "c) 0",
            "d) Nothing"
        ],
        "Answer": "Answer: d\nExplanation: “Nothing” is not an actual value or keyword, it means that it contains nothing. Elements in a numeric array are initialized to the number 0, and elements in a Boolean array are initialized using the Boolean keyword False. Date array elements are initialized to 12:00 AM January 1, 0001."
    },
    {
        "id": 402,
        "Question": "The act of initializing array is also called as _______",
        "Options": [
            "a) Populating an array",
            "b) Assigning array",
            "c) Initializing",
            "d) Factoring and array"
        ],
        "Answer": "Answer: a\nExplanation: Initializing an array is also called populating it. The initial values are listed in the initial-values section of the syntax, using commas to separate the values, and you enclose the list of values in braces ({})."
    },
    {
        "id": 403,
        "Question": "7. What is the value of len in the following Visual Basic code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> strCities() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = {<span class=\"st0\">\"Bombay\"</span>, <span class=\"st0\">\"Chennai\"</span>, <span class=\"st0\">\"Ladakh\"</span>, <span class=\"st0\">\"Tamil Nadu\"</span>}\n<span class=\"kw4\">Dim</span> len <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>\nlen = strCities.Length()</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 4",
            "b) 0",
            "c) 3",
            "d) 5"
        ],
        "Answer": "Answer: a\nExplanation: Array index starts from 0.So the index of the first element is 0,the second is 1 and so on. But the length is total number of elements in array, which is 4."
    },
    {
        "id": 404,
        "Question": "The _________ methodreturns an integer that representsthe highest subscript in the specified dimension in the array.",
        "Options": [
            "a) Subscript",
            "b) GetUpperBound",
            "c) GetSubscript",
            "d) SubscriptOfArray"
        ],
        "Answer": "Answer: a\nExplanation: The GetUpperBound method returns an integer that represents the highest subscript in the specified dimension in the array. When used with a one-dimensional array, the specified dimension (which appears between the parentheses after the method’s name) is always 0."
    },
    {
        "id": 405,
        "Question": "9. What is wrong with the following statement?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> strCities <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = {<span class=\"st0\">\"Bombay\"</span>, <span class=\"st0\">\"Chennai\"</span>, <span class=\"st0\">\"Ladakh\"</span>, <span class=\"st0\">\"Tamil Nadu\"</span>}</pre></div></div></div></div></div></div>",
        "Options": [
            "a) static keyword missing",
            "b) array elements should be initialized using single quotes",
            "c) array elements should be in square brackets",
            "d) array name should be strCities()"
        ],
        "Answer": "Answer: d\nExplanation: Syntax to initialize array is Dim arrayName() As dataType = {initialValues}. We have missed the first bracket in the declaration, which is necessary requirement."
    },
    {
        "id": 406,
        "Question": "10. What is the result of the following statements?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> strCities() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = {<span class=\"st0\">\"Bombay\"</span>, <span class=\"st0\">\"Chennai\"</span>, <span class=\"st0\">\"Ladakh\"</span>, <span class=\"st0\">\"Tamil Nadu\"</span>}\nstrCities(2)=”Kolkata”</pre></div></div></div></div></div></div>",
        "Options": [
            "a) Compilation Error",
            "b) Runtime Error",
            "c) strCity array is {“Bombay”,  “Ladakh”, “Kolkata”,”Tamil Nadu”}",
            "d) strCity array is {“Bombay”, “Chennai”,”Kolkata”, “Tamil Nadu”}"
        ],
        "Answer": "Answer: d\nExplanation: Array index starts from 0. Thus at first strCities(2)=”Ladakh” which has been replaced by “Kolkata”. Thus in the final array we have strCity array is {“Bombay”, “Chennai”,”Kolkata”, “Tamil Nadu”}."
    },
    {
        "id": 407,
        "Question": "Which of the following declares a five-element one-dimensional array?",
        "Options": [
            "a) Dim dblAmounts(4) As Double",
            "b) Dim dblAmounts(5) As Double",
            "c) Dim dblAmounts(4) As Double = {3.55, 6.70, 8, 4, 2.34}",
            "d) Dim dblAmounts() As Double={3.55, 6.70, 8, 4, 2.34,1.45}"
        ],
        "Answer": "Answer: d\nExplanation: The number of elements to be declared must be given in the definition, and the elements must be declared in within the second bracket as in Dim dblAmounts() As Double={3.55, 6.70, 8, 4, 2.34,1.45}; while it is only defined in Dim dblAmounts(5) As Double; but here it is not declared."
    },
    {
        "id": 408,
        "Question": "The intSales array is declared as follows: Dim intSales() As Integer = {10000, 12000, 900, 500, 20000}. The statement intSales(3) = intSales(3) + 10 will .",
        "Options": [
            "a) replace the 500 amount with 10",
            "b) replace the 500 amount with 510",
            "c) replace the 900 amount with 10",
            "d) replace the 900 amount with 910"
        ],
        "Answer": "Answer:  b\nExplanation: intSales(3) is 500, and we add 10 to it, and it is replaced by 510. 500 is the fourth element, but since array index starts from 0, thus intSales(3) will contain 500. It would have been 900 if, it would have been intSales(2)."
    },
    {
        "id": 409,
        "Question": "Dim intNums() As Integer = {10, 5, 7, 2}. The intTotal, intSub, and dblAvg variables contain the number 0 before the loops are processed.",
        "Options": [
            "a) 0",
            "b) 5",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: a\nExplanation: At first intTotal is zero, everytime the loop runs, it makes value of each element 0. At the end intTotal remains 0, and intSub is the no. of elements. Thus 0/ anything leads to zero, thus answer is 0."
    },
    {
        "id": 410,
        "Question": "Dim intNums() As Integer = {10, 5, 7, 2}. The intTotal, intSub, and dblAvg variables contain the number 0 before the loops are processed.",
        "Options": [
            "a) 0",
            "b) 5",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: c\nExplanation: At first, it sums up to 24 in the loop, which is the sum of all the elements in the array. It then calculates the average, by dividing the total by no. of elements which gives answer as 6, as we have 4 elements."
    },
    {
        "id": 411,
        "Question": "Dim intNums() As Integer = {10, 5, 7, 2}. The intTotal, intSub, and dblAvg variables contain the number 0 before the loops are processed.",
        "Options": [
            "a) 0",
            "b) 5",
            "c) 6",
            "d) 8"
        ],
        "Answer": "Answer: b\nExplanation: At first, it sums up to 24 in the loop, which is the sum of all the elements in the array. It then calculates the average, by dividing the total by no. of elements which gives answer as 6, as we have 4 elements; then it subtracts 1 from it, which results to 5."
    },
    {
        "id": 412,
        "Question": "Dim intNums() As Integer = {10, 5, 7, 2}. The intTotal, intSub, and dblAvg variables contain the number 0 before the loops are processed.",
        "Options": [
            "a) 0",
            "b) 5",
            "c) 6",
            "d) 8"
        ]
    },
    {
        "id": 413,
        "Question": "________ method is used to sort an array in visual basic.",
        "Options": [
            "a) Array.arrange()",
            "b) Array.arrayArrange()",
            "c) Array.Sort()",
            "d) Array.sortAscending()"
        ],
        "Answer": "Answer: c\nExplanation: You can use the Array.Sort method to sort a one-dimensional array’s values in ascending order. To sort the values in descending order, you first use the Array.Sort method to sort the values in ascending order, and then use the Array.Reverse method to reverse the values. The syntax is as follows, where the arrayName is the name of the array:\nArray.Sort(arrayName)"
    },
    {
        "id": 414,
        "Question": "Arranging data in a specific order is called as ___________",
        "Options": [
            "a) Arranging",
            "b) Sorting",
            "c) Organizing",
            "d) Making"
        ],
        "Answer": "Answer: b\nExplanation: In some applications, you might need to arrange the contents of an array in either ascending or descending order. Arranging data in a specific order is called sorting. When an array is sorted in ascending order, the first element in the array contains the smallest value and the last element contains the largest value. When an array is sorted in descending order, on the other hand, the first element contains the largest value and the last element contains the smallest value."
    },
    {
        "id": 415,
        "Question": "__________________ method is used to reverse the values.",
        "Options": [
            "a) Array.Reverse",
            "b) Array.Sort Desc",
            "c) Array.Sort Asc",
            "d) Array.rev"
        ],
        "Answer": "Answer: a\nExplanation:  You can use the Array.Sort method to sort a one-dimensional array’s values in ascending order. To sort the values in descending order, you first use the Array.Sort method to sort the values in ascending order, and then use the Array.Reverse method to reverse the values. The syntax is as follows, where the arrayName is the name of the array:\nArray.Reverse(arrayName)"
    },
    {
        "id": 416,
        "Question": "4. What will be the output of the following Visual Basic code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> intScores <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = {78, 83, 75, 90}\nArray.Sort(intScores)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 78, 83, 75,90",
            "b) 75,78, 83,90",
            "c) 78,75,83,90",
            "d) 90,83,78,75"
        ],
        "Answer": "Answer: b\nExplanation: Array.Sort sorts the array in ascending order.  In the question above it sorts the contents of the array in ascending order, as follows: 75, 78, 83, and 90."
    },
    {
        "id": 417,
        "Question": "5. What will be the output of the following Visual Basic code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> intScores <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = {78, 83, 75, 90}\nArray.Reverse(intScores)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 78, 83, 75,90",
            "b) 75,78, 83,90",
            "c) 78,75,83,90",
            "d) 90,75,83,78"
        ],
        "Answer": "Answer: d\nExplanation: Array.Reverse method reverses the array list. In the above question it reverses the contents of the array, placing the values in the following order: 90, 75, 83, and 78."
    },
    {
        "id": 418,
        "Question": "6. What will be the output of the following Visual Basic code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> intScores <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = {78, 83, 75, 90}\nArray.Sort(intScores)\nArray.Reverse(intScores)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) 78, 83, 75,90",
            "b) 75,78, 83,90",
            "c) 78,75,83,90",
            "d) 90,83,78,75"
        ],
        "Answer": "Answer: d\nExplanation: Array.Sort sorts the content of the array in ascending order, and then Array.Reverse reverses the array list, thus we get sorted array in descending order. In the above question, it sorts the contents of the array in ascending order and then reverses the contents, placing the values in descending order as follows: 90, 83, 78, and 75."
    },
    {
        "id": 419,
        "Question": "7. What is the array of these statements?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> intScores <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = {78, 83, 75, 90}\nArray.reverse (intScores)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) { 75, 78, 83, 90}",
            "b) { 78, 75, 90, 83 }",
            "c) { 90, 83, 78, 75 }",
            "d) Compilation Error"
        ],
        "Answer": "Answer: d\nExplanation: The command to reverse array list is Array.Reverse, and not array.reverse, thus it leads to compilation error. The syntax is as follows, where the arrayName is the name of the array:\nArray.Reverse(arrayName)"
    },
    {
        "id": 420,
        "Question": "8. What is the array of these statements?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw4\">Dim</span> intScores <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = {78, 83, 75, 90}\nArray.sort (intScores)</pre></div></div></div></div></div></div>",
        "Options": [
            "a) {75, 78, 83, 90}",
            "b) {78, 75, 90, 83}",
            "c) {90, 83, 78, 75}",
            "d) Compilation Error"
        ],
        "Answer": "Answer: d\nExplanation: The command to sort array list is Array.Sort, and not Array.sort. Thus it leads to compilation error. The syntax is as follows, where the arrayName is the name of the array:\nArray.Sort(arrayName)"
    },
    {
        "id": 421,
        "Question": "Which of the following statements assigns (to the intElements variable) the number of elements contained in the intNums array?",
        "Options": [
            "a) intElements = Len(intNums)",
            "b) intElements = Length(intNums)",
            "c) intElements = intNums.Len",
            "d) intElements = intNums.Length"
        ],
        "Answer": "Answer: d\nExplanation: The number of elements in a one-dimensional array is stored, as an integer, in the array’s Length property.The syntax is as follows:\narrayName.Length"
    },
    {
        "id": 422,
        "Question": "Which of the following assigns the string “Rover” to the fifth element in a one-dimensional array named strPetNames?",
        "Options": [
            "a) strPetNames(4) = “Rover”",
            "b) strPetNames[4] = “Rover”",
            "c) strPetNames(5) = “Rover”",
            "d) strPetNames.Items.Add(5) = “Rover”"
        ],
        "Answer": "Answer: a\nExplanation: An array is populated with the following syntax: arrayname(index)=”value”; where index is of between the range 0 to (length of array -1). Thus in this example, strPetnames(4)=”Rover”, is the proper initialization of the array."
    },
    {
        "id": 423,
        "Question": "If the elements in two arrays are related by their subscripts, the arrays are called as ________________ arrays.",
        "Options": [
            "a) associated",
            "b) coupled",
            "c) matching",
            "d) parallel"
        ],
        "Answer": "Answer: d\nExplanation: Parallel arrays are two or more arrays whose elements are related by their position in the arrays; in other words, they are related by their subscripts. Let strIds and intPrices arrays in be parallel arrays, thus  each element in the strIds array corresponds to the element located in the same position in the intPrices array. For example, the item whose product ID is BX35 [strIds(0)] has a price of $13 [intPrices(0)]. Likewise, the item whose product ID is CR20 [strIds(1)] has a price of $10 [intPrices(1)]. The same relationship is true for the remaining elements in both arrays. To determine an item’s price, you locate the item’s ID in the strIds array and then view its corresponding element in the intPrices array."
    },
    {
        "id": 424,
        "Question": "The strStates and strCapitals arrays are parallel arrays. If Illinois is stored in the second element in the strStates array, where is its capital (Springfield) stored?",
        "Options": [
            "a) strCapitals(1)",
            "b) strCapitals(2)",
            "c) strCapitals(0)",
            "d) strCapitals(3)"
        ],
        "Answer": "Answer: a\nExplanation: The second element of strStates is Illinois, thus is represented by strStates(1). Its capital will thus be strCapitals(1), since strStates and strCapitals are parallel arrays."
    },
    {
        "id": 425,
        "Question": "A _______________ resembles a table.",
        "Options": [
            "a) One-dimensional array",
            "b) Two-dimensional array",
            "c) Three-dimensional array",
            "d) N-dimensional array"
        ],
        "Answer": "Answer: b\nExplanation: The most commonly used arrays in business applications are one-dimensional and two-dimensional. You can visualize a one-dimensional array as a column of variables in memory. A two-dimensional array, on the other hand, resembles a table in that the variables (elements) are in rows and columns."
    },
    {
        "id": 426,
        "Question": "We can determine number of elements in two-dimensional array by _________________",
        "Options": [
            "a) Multiplying number of rows and number of columns",
            "b) Adding number of rows and number of columns",
            "c) Multiplying number of rows and number of rows",
            "d) Adding number of columns and number of columns"
        ],
        "Answer": "Answer: a\nExplanation: You can determine the number of elements in a two-dimensional array by multiplying the number of its rows by the number of its columns. An array that has four rows and three columns, for example, contains 12 elements.\n"
    },
    {
        "id": 427,
        "Question": "The _____________ in a two-dimensional array specifies the elements row and column position.",
        "Options": [
            "a) Superscript",
            "b) Subscript",
            "c) Row number",
            "d) Column number"
        ],
        "Answer": "Answer: b\nExplanation: Each element in a two-dimensional array is identified by a unique combination of two subscripts that the computer assigns to the element when the array is created. The subscripts specify the element’s row and column positions in the array. Elements located in the first row in a two-dimensional array are assigned a row subscript of 0. Elements in the second row are assigned a row subscript of 1, and so on. Similarly, elements located in the first column in a two-dimensional array are assigned a column subscript of 0. Elements in the second column are assigned a column subscript of 1, and so on.\n"
    },
    {
        "id": 428,
        "Question": "Each element in a two-dimensional array is identified by a unique combination of _______________",
        "Options": [
            "a) One subscript",
            "b) Two subscripts",
            "c) Three subscripts",
            "d) Zero subscript"
        ],
        "Answer": "Answer: b\nExplanation: You refer to each element in a two-dimensional array by the array’s name and the element’s row and column subscripts, with the row subscript listed first and the column subscript listed second. The subscripts are separated by a comma and specified in a set of parentheses immediately following the array name. For example, to refer to the element located in the first row, first column in a two-dimensional array named strProducts, you use strProducts(0, 0).\n"
    },
    {
        "id": 429,
        "Question": "The subscripts are _________ than the row and column in which the element is located.",
        "Options": [
            "a) One number less",
            "b) One number more",
            "c) Two number less",
            "d) Two number more"
        ],
        "Answer": "Answer: a\nExplanation: The subscripts are one number less than the row and column in which the element is located. This is because the row and column subscripts start at 0 rather than at 1. You will find that the last row subscript in a two-dimensional array is always one number less than the number of rows in the array. Likewise, the last column subscript is always one number less than the number of columns in the array.\n"
    },
    {
        "id": 430,
        "Question": "To traverse two dimensional array you require ________________ loops.",
        "Options": [
            "a) One",
            "b) Two",
            "c) Three",
            "d) Zero"
        ],
        "Answer": "Answer: b\nExplanation: You use a loop to traverse a one-dimensional array. To traverse a two-dimensional array, you typically use two loops: an outer loop and a nested loop. One of the loops keeps track of the row subscript and the other keeps track of the column subscript. You can code the loops using either the For . . . Next statement or the Do . . . Loop statement. Rather than using two loops, you also can traverse a two-dimensional array using one For Each . . . Next loop. However, recall that the instructions in a For Each . . . Next loop can only read the array values; they cannot permanently modify the values.\n"
    },
    {
        "id": 431,
        "Question": "Which of the following declares a two-dimensional array that has three rows and four columns?",
        "Options": [
            "a) Dim decNums(2, 3) As Decimal",
            "b) Dim decNums(3, 4) As Decimal",
            "c) Dim decNums(3, 2) As Decimal",
            "d) Dim decNums(4, 3) As Decimal"
        ],
        "Answer": "Answer: b\nExplanation: The first subscript gives the number of rows and the second subscript gives the number of columns. Thus Dim decNums (3, 4) As Decimal, defines a two-dimensional array with 3 rows and 4 columns.\n"
    },
    {
        "id": 432,
        "Question": "The intSales array is declared as follows: Dim intSales(,) As Integer = {{1000, 1200, 900, 500, 2000}, {350, 600, 700, 800, 100}}. The intSales(1, 3) = intSales(1, 3) + 10 statement will _______________",
        "Options": [
            "a) replace the 900 amount with 910",
            "b) replace the 500 amount with 510",
            "c) replace the 700 amount with 710",
            "d) replace the 800 amount with 810"
        ],
        "Answer": "Answer: d\nExplanation: The element in 2nd row, 4th column is 800. The subscript should be one less that row number and column number. Thus subscript is 1,3. Thus 800 is increased to 810 and is replaced with 810.\n"
    },
    {
        "id": 433,
        "Question": "Variables declared using a structure is known as ___________________",
        "Options": [
            "a) Variables",
            "b) Auto variables",
            "c) Structure variables",
            "d) Constant variables"
        ],
        "Answer": "Answer: c\nExplanation: After entering the Structure statement in the Code Editor window, you then can use the structure to declare a variable. Variables declared using a structure are often referred to as structure variables. The syntax for creating a structure variable is shown below:\n{Dim | Private} structureVariableName As structureName"
    },
    {
        "id": 434,
        "Question": "You refer to the structure variable by its ____________",
        "Options": [
            "a) Name",
            "b) Data type",
            "c) Dot operator",
            "d) Member name"
        ],
        "Answer": "Answer: a\nExplanation: In code, you refer to the entire structure variable by its name—in this case, hourly. You refer to a member variable by preceding its name with the name of the structure variable in which it is defined. You use the dot member access operator (a period) to separate the structure variable’s name from the member variable’s name."
    },
    {
        "id": 435,
        "Question": "You refer to the member variable by preceding its name with the name of the _________________________ in which it is defined.",
        "Options": [
            "a) Variable",
            "b) Auto variable",
            "c) Structure variable",
            "d) Constant variable"
        ],
        "Answer": "Answer: c\nExplanation: In code, you refer to the entire structure variable by its name—in this case, hourly. You refer to a member variable by preceding its name with the name of the structure variable in which it is defined. You use the dot member access operator (a period) to separate the structure variable’s name from the member variable’s name."
    },
    {
        "id": 436,
        "Question": "Programmers use _________________ when they need to pass a group of related variables.",
        "Options": [
            "a) Structure variable",
            "b) Variable",
            "c) Auto variable",
            "d) Constant variable"
        ],
        "Answer": "Answer: a\nExplanation: Programmers use structure variables when they need to pass a group of related items to a procedure for further processing, because it’s easier to pass one structure variable rather than many individual variables. Programmers also use structure variables to store related items in an array, even when the members have different data types."
    },
    {
        "id": 437,
        "Question": "Programmers use ________________ when they need to store related items in an array, even though the members have different data type.",
        "Options": [
            "a) Structure variable",
            "b) Variable",
            "c) Auto variable",
            "d) Constant variable"
        ],
        "Answer": "Answer: a\nExplanation: Programmers use structure variables when they need to pass a group of related items to a procedure for further processing, because it’s easier to pass one structure variable rather than many individual variables. Programmers also use structure variables to store related items in an array, even when the members have different data types."
    },
    {
        "id": 438,
        "Question": "Which statement is used to create a user-defined data type?",
        "Options": [
            "a) Declare",
            "b) Define",
            "c) Struct",
            "d) UserType"
        ],
        "Answer": "Answer: c\nExplanation: Struct is used to create a user-defined data type. It can contain members of different data type. We can access the member by using structName.memberName. You refer to a member variable by preceding its name with the name of the structure variable in which it is defined. You use the dot member access operator (a period) to separate the structure variable’s name from the member variable’s name."
    },
    {
        "id": 439,
        "Question": "A structure variable named address contains a member variable named strStreet. Which of the following statements assigns the string “Maple” to the member variable?",
        "Options": [
            "a) address&strStreet = “Maple”",
            "b) address.strStreet = “Maple”",
            "c) strStreet.address = “Maple”",
            "d) strStreet&address=”Maple”"
        ],
        "Answer": "Answer: b\nExplanation: We can access the member by using structName.memberName. You refer to a member variable by preceding its name with the name of the structure variable in which it is defined. You use the dot member access operator (a period) to separate the structure variable’s name from the member variable’s name."
    },
    {
        "id": 440,
        "Question": "An array is declared using the statement Dim inventory(4) As Product. Which of the following statements assigns the number 100 to the intQuantity member variable contained in the last array element?",
        "Options": [
            "a) inventory.intQuantity(4) = 100",
            "b) inventory(4).Product.intQuantity = 100",
            "c) inventory(3).intQuantity = 100",
            "d) inventory(4).intQuantity=100"
        ],
        "Answer": "Answer: c\nExplanation: You refer to a member variable in an array element using the syntax arrayName(subscript).memberVariableName. For example, priceList(0).strId refers to the strId member contained in the first element in the priceList array. Likewise, priceList(4).intPrice refers to the intPrice member contained in the last element in the pricelist array."
    },
    {
        "id": 441,
        "Question": "An application uses a structure named Employee. Which of the following statements declares a five-element array of Employee structure variables?",
        "Options": [
            "a) Dim workers(4) As Employee",
            "b) Dim workers(5) As Employee",
            "c) Dim workers As Employee(4)",
            "d) Dim workers As Employee(5)"
        ],
        "Answer": "Answer: b\nExplanation: Rather than using two parallel one-dimensional arrays to store the workers, the procedure will use a one-dimensional array of Employee structure variables. Thus Dim workers(5) As Employee declares a five-element array of Employee structure variable."
    },
    {
        "id": 442,
        "Question": "In most applications, the code to define a user-defined data type is entered in the form’s.",
        "Options": [
            "a) Declarations section",
            "b) Definition section",
            "c) Load event procedure",
            "d) User-defined section"
        ],
        "Answer": "Answer: a\nExplanation: you will declare the structure in the form’s Declarations section. A descriptive name for the structure would be ProductInfo. Click the blank line immediately below the Public Class frmMain clause and then press Enter to insert another blank line. Enter the following Structure statement:\nStructure ProductInfo\nPublic strId As String\nPublic intPrice As Integer\nEnd Structure\n"
    },
    {
        "id": 443,
        "Question": "Reading data from a file is referred to as ________________",
        "Options": [
            "a) Reading a file",
            "b) Writing a file",
            "c) Appending a file",
            "d) Executing a file"
        ],
        "Answer": "Answer: a\nExplanation: In addition to getting data from the keyboard and sending data to the computer screen, an application also can get data from and send data to a file on a disk. Getting data from a f le is referred to as “reading the file,” and sending data to a file is referred to as “writing to the file.”"
    },
    {
        "id": 444,
        "Question": "Writing data to a file is referred to as ______________",
        "Options": [
            "a) Reading a file",
            "b) Writing a file",
            "c) Appending a file",
            "d) Executing a file"
        ],
        "Answer": "Answer: b\nExplanation: In addition to getting data from the keyboard and sending data to the computer screen, an application also can get data from and send data to a file on a disk. Getting data from a f le is referred to as “reading the file,” and sending data to a file is referred to as “writing to the file.”"
    },
    {
        "id": 445,
        "Question": "The file to which data is write is referred to as _______________",
        "Options": [
            "a) Input file",
            "b) Output file",
            "c) Random access file",
            "d) Sequential file"
        ],
        "Answer": "Answer: b\nExplanation: In addition to getting data from the keyboard and sending data to the computer screen, an application also can get data from and send data to a file on a disk. Getting data from a file is referred to as “reading the file,” and sending data to a file is referred to as “writing to the file.” Files to which data is written are called output files, because the files store the output produced by an application."
    },
    {
        "id": 446,
        "Question": "Files that are read by computer are called as _________________",
        "Options": [
            "a) Input file",
            "b) Output file",
            "c) Random access file",
            "d) Sequential file"
        ],
        "Answer": "Answer: a\nExplanation: Files to which data is written are called output files, because the files store the output produced by an application. Files that are read by the computer are called input files, because an application uses the data in these files as input. Most input and output files are composed of lines of text that are both read and written sequentially."
    },
    {
        "id": 447,
        "Question": "Files that read and write in consecutive order are known as  _________________",
        "Options": [
            "a) Input files",
            "b) Output files",
            "c) Sequential access file",
            "d) Random access file"
        ],
        "Answer": "Answer: c\nExplanation: Most input and output files are composed of lines of text that are both read and written sequentially. In other words, they are read and written in consecutive order, one line at a time, beginning with the first line in the file and ending with the last line in the file. Such files are referred to as sequential access files, because of the manner in which the lines of text are accessed."
    },
    {
        "id": 448,
        "Question": "Files that contain lines of text are known as  _______________",
        "Options": [
            "a) Binary files",
            "b) Text files",
            "c) Character files",
            "d) Array files"
        ],
        "Answer": "Answer: b\nExplanation: Most input and output files are composed of lines of text that are both read and written sequentially. In other words, they are read and written in consecutive order, one line at a time, beginning with the first line in the file and ending with the last line in the file. Such files are referred to as sequential access files, because of the manner in which the lines of text are accessed. They also are called text files, because they are composed of lines of text. Examples of text stored in sequential access files include an employee list, a memo, or a sales report."
    },
    {
        "id": 449,
        "Question": "Programmers refer to the sequence of character as ___________________",
        "Options": [
            "a) Stream of tokens",
            "b) Stream of characters",
            "c) Stream of bits",
            "d) Stream of bytes"
        ],
        "Answer": "Answer: b\nExplanation: An item of data—such as the string “Harriet”—is viewed differently by a human being and a computer. To a human being, the string represents a person’s name; to a computer, it is merely a sequence of characters. Programmers refer to a sequence of characters as a stream of characters."
    },
    {
        "id": 450,
        "Question": "In Visual Basic, you use _________________ to write a stream of characters.",
        "Options": [
            "a) StreamWriter object",
            "b) StreamWriter class",
            "c) StreamReader object",
            "d) StreamReader class"
        ],
        "Answer": "Answer: a\nExplanation: Programmers refer to a sequence of characters as a stream of characters. In Visual Basic, you use a StreamWriter object to write a stream of characters to a sequential access file. Before you create the StreamWriter object, you first declare a variable to store the object in the computer’s internal memory. The syntax is as follows:\n\n\n{Dim | Private} streamWriterVariableName As IO.StreamWriter\n\n\nThe IO in the syntax stands for Input/Output."
    },
    {
        "id": 451,
        "Question": "_____________________ is used to open a sequential access file for output.",
        "Options": [
            "a) CreateText method",
            "b) AppendText method",
            "c) OpenText method",
            "d) WriteText method"
        ],
        "Answer": "Answer: a\nExplanation: Creating a StreamWriter object involves opening a sequential access file using one of two methods: CreateText or AppendText. You use the CreateText method to open a sequential access file for output. When you open a file for output, the computer creates a new, empty file to which data can be written. If the file already exists, the computer erases the contents of the file before writing any data to it."
    },
    {
        "id": 452,
        "Question": "_________________ is used to open the sequential file access for append.",
        "Options": [
            "a) CreateText method",
            "b) AppendText method",
            "c) OpenText method",
            "d) WriteText method"
        ],
        "Answer": "Answer: b\nExplanation: You use the AppendText method to open a sequential access file for append. When a file is opened for append, new data is written after any existing data in the file. If the file does not exist, the computer creates the file for you. In addition to opening the file, both methods automatically create a StreamWriter object to represent the file in the application. You assign the StreamWriter object to a StreamWriter variable, which you use to refer to the file in code."
    },
    {
        "id": 453,
        "Question": "__________________ is a programming language that allows the programmer to use objects to accomplish his goals.",
        "Options": [
            "a) Structured programming language",
            "b) Object-oriented programming language",
            "c) Top-down programming language",
            "d) Bottom-up programming language"
        ],
        "Answer": "Answer: b\nExplanation: An object-oriented programming language is a language that allows the programmer to use objects to accomplish a program’s goal. Recall that an object is anything that can be seen, touched, or used. In other words, an object is nearly any thing. The objects used in an object-oriented program can take on many different forms."
    },
    {
        "id": 454,
        "Question": "Each object used in a object oriented programming is created from _____________",
        "Options": [
            "a) Class",
            "b) Object",
            "c) Instance",
            "d) User"
        ],
        "Answer": "Answer: a\nExplanation: Every object used in an object-oriented program is created from a class, which is a pattern that the computer uses to create the object. Using object oriented programming (OOP) terminology; objects are instantiated (created) from a class."
    },
    {
        "id": 455,
        "Question": "An object is the _____________ of the class.",
        "Options": [
            "a) Instance",
            "b) Class",
            "c) Object",
            "d) User"
        ],
        "Answer": "Answer: a\nExplanation: Using object oriented programming (OOP) terminology, objects are instantiated (created) from a class, and each object is referred to as an instance of the class. A button control, for example, is an instance of the Button class. The button is instantiated when you drag the Button tool from the toolbox to the form."
    },
    {
        "id": 456,
        "Question": "A ______________ variable is the instance of the String class.",
        "Options": [
            "a) Button",
            "b) String",
            "c) Character",
            "d) Array"
        ],
        "Answer": "Answer: b\nExplanation:  A String variable is an instance of the String class and is instantiated the first time you refer to the variable in code. Keep in mind that the class itself is not an object. Only an instance of a class is an object."
    },
    {
        "id": 457,
        "Question": "________________ are the characteristics that describe the object.",
        "Options": [
            "a) Classes",
            "b) Attributes",
            "c) Objects",
            "d) Instances"
        ],
        "Answer": "Answer: b\nExplanation: Every object has attributes, which are the characteristics that describe the object. Attributes are also called properties. Included in the attributes of buttons and text boxes are the Name and Text properties. List boxes have a Name property as well as a Sorted property."
    },
    {
        "id": 458,
        "Question": "_______________ are operations that the object is capable of performing.",
        "Options": [
            "a) Methods",
            "b) Events",
            "c) Instances",
            "d) Attributes"
        ],
        "Answer": "Answer: a\nExplanation: An object’s behaviors include methods and events. Methods are the operations (actions) that the object is capable of performing. For example, a button can use its Focus method to send the focus to itself."
    },
    {
        "id": 459,
        "Question": "______________ are the actions to which an object can respond.",
        "Options": [
            "a) Methods",
            "b) Events",
            "c) Instances",
            "d) Attributes"
        ],
        "Answer": "Answer: b\nExplanation: An object’s behaviors include methods and events. Events are the actions to which an object can respond. A button’s Click event, for instance, allows it to respond to a mouse click."
    },
    {
        "id": 460,
        "Question": "An object’s _______________ include methods and events.",
        "Options": [
            "a) Attribute",
            "b) Behavior",
            "c) Instance",
            "d) Method"
        ],
        "Answer": "Answer: b\nExplanation: An object’s behaviors include methods and events. Methods are the operations (actions) that the object is capable of performing. For example, a button can use its Focus method to send the focus to itself. Events are the actions to which an object can respond. A button’s Click event, for instance, allows it to respond to a mouse click."
    },
    {
        "id": 461,
        "Question": "A class ______________ all the behavior and attributes of an object.",
        "Options": [
            "a) Encapsulates",
            "b) Abstracts",
            "c) Inherits",
            "d) Instantiate"
        ],
        "Answer": "Answer: a\nExplanation: A class contains—or, in OOP terms, it encapsulates—all of the attributes and behaviors of the object it instantiates. The term “encapsulate” means “to enclose in a capsule.” In the context of OOP, the “capsule” is a class."
    },
    {
        "id": 462,
        "Question": "Objects are ____________ from a class.",
        "Options": [
            "a) Instantiated",
            "b) Evaluated",
            "c) Printed",
            "d) Outdated"
        ],
        "Answer": "Answer: a\nExplanation: Using object oriented programming (OOP) terminology, objects are instantiated (created) from a class, and each object is referred to as an instance of the class. A button control, for example, is an instance of the Button class. The button is instantiated when you drag the Button tool from the toolbox to the form. A String variable, on the other hand, is an instance of the String class and is instantiated the first time you refer to the variable in code."
    },
    {
        "id": 463,
        "Question": "Class is defined using ______________",
        "Options": [
            "a) Class statement",
            "b) Object statement",
            "c) Access specifier statement",
            "d) Instance statement"
        ],
        "Answer": "Answer: a\nExplanation:  You define a class using the Class statement, which you enter in a class file. The steps for adding a class file to an open project are:\n•\tClick Project on the menu bar and then click Add Class. The Add New Item dialog box opens with Class selected in the middle column of the dialog box.\n•\tType the name of the class followed by a period and the letters vb in the Name box, and then click the Add button.\n           The syntax of the class statement is as follows:\n\n\n\t\n\nPublic Class className\n   attributes section\n   behaviors section\nEnd Class\n\n\n"
    },
    {
        "id": 464,
        "Question": "The convention is to use ________________ case for classname.",
        "Options": [
            "a) Upper",
            "b) Lower",
            "c) Pascal",
            "d) Mixed"
        ],
        "Answer": "Answer: c\nExplanation:  Although it is not a requirement, the convention is to use Pascal case for the class name. The names of Visual Basic classes (for example, Integer and TextBox) also follow this naming convention."
    },
    {
        "id": 465,
        "Question": "Objects are represented by _____________ variables and ______________ properties.",
        "Options": [
            "a) Private, Public",
            "b) Public, Private",
            "c) Protected, Public",
            "d) Protected, Private"
        ],
        "Answer": "Answer: a\nExplanation: Within the Class statement, you define the attributes and behaviors of the objects the class will create. In most cases, the attributes are represented by Private variables and Public properties. The behaviors are represented by methods, which can be Sub or Function procedures.\n"
    },
    {
        "id": 466,
        "Question": "The behavior are represented by ______________",
        "Options": [
            "a) Methods",
            "b) Attributes",
            "c) Values",
            "d) Numbers"
        ],
        "Answer": "Answer: a\nExplanation: Within the Class statement, you define the attributes and behaviors of the objects the class will create. In most cases, the attributes are represented by Private variables and Public properties. The behaviors are represented by methods, which can be Sub or Function procedures."
    },
    {
        "id": 467,
        "Question": "After defining a class you can instantiate one or more ______________",
        "Options": [
            "a) Objects",
            "b) Classes",
            "c) Attributes",
            "d) Methods"
        ],
        "Answer": "Answer: a\nExplanation: After you define a class, it then can be used to instantiate one or more objects. The syntax is: \nSyntax – Version 1\n\n\n\t\n\n{Dim | Private} variableName As className\nvariableName = New className\n\n\nSyntax – Version 2\n\n\n\t\n\n{Dim | Private} variableName As New className\n\n\nIn both versions, className is the name of the class, and variableName is the name of a variable that will represent the object."
    },
    {
        "id": 468,
        "Question": "The computer creates the object when it processes the statement containing ____________ keyword.",
        "Options": [
            "a) Class",
            "b) Object",
            "c) New",
            "d) Private"
        ],
        "Answer": "Answer: c\nExplanation: After you define a class, it then can be used to instantiate one or more objects. The syntax is: \nSyntax – Version 1\n\n\n{Dim | Private} variableName As className\nvariableName = New className\n\n\nSyntax – Version 2\n\n\n{Dim | Private} variableName As New className\n\n\nIn both versions, className is the name of the class, and variableName is the name of a variable that will represent the object. The difference between both versions relates to when the object is actually created. The computer creates the object only when it processes the statement containing the New keyword."
    },
    {
        "id": 469,
        "Question": "The class statement groups _______________ item in one unit.",
        "Options": [
            "a) Related",
            "b) Different",
            "c) Same access specifier items",
            "d) Different access specifier items"
        ],
        "Answer": "Answer: b\nExplanation: The name of class file ends with .class extension. A class file contains the attributes and methods of the class; and if any instance of that class is created, it can use the attributes and methods of the class file. The class file contains the definition of the methods. The class is a blueprint of an object."
    },
    {
        "id": 470,
        "Question": "The name of the class file ends with _____________",
        "Options": [
            "a) .cla",
            "b) .class",
            "c) .cla",
            "d) .vb"
        ],
        "Answer": "Answer: c\nExplanation: A constructor is a special method of a class or structure in object-oriented programming that initializes an object of that type. A constructor is an instance method that usually has the same name as the class, and can be used to set the values of the members of an object, either to default or to user-defined values."
    },
    {
        "id": 471,
        "Question": "A constructor is a _____________",
        "Options": [
            "a) A function procedure",
            "b) A sub procedure",
            "c) Either a function procedure or a sub procedure",
            "d) A property procedure"
        ],
        "Answer": "Answer: a\nExplanation: A class can have multiple constructors. A constructor can be empty, can contain arguments; and the attributes of the class are defined, by the way the objects are created using the different constructors. For example, while creating an object, if we pass arguments, then the constructor with arguments are called and the attributes are initialized to some value, else if no arguments are passed while creating objects, then an empty constructor is called by default, and the attributes are initialized to zero."
    },
    {
        "id": 472,
        "Question": "Which of the following statements is false?",
        "Options": [
            "a) A class can have only one constructor",
            "b) A class can have multiple constructors",
            "c) An object created from a class is referred to as instance of the class",
            "d) An instance of a class is considered an object"
        ]
    },
    {
        "id": 473,
        "Question": "_______ can be used instead of a Structure statement.",
        "Options": [
            "a) Class",
            "b) Struct",
            "c) StructDef",
            "d) Sdef"
        ],
        "Answer": "Answer: a\nExplanation: Like the Structure statement, the Class statement groups related items into one unit. However, the unit is called a class rather than a structure."
    },
    {
        "id": 474,
        "Question": "It is disadvantageous to use public variables in classes because ___________",
        "Options": [
            "a) Its values cannot be initialized",
            "b) It results in compilation error",
            "c) It cannot be accessed by other variables",
            "d) It cannot control its values"
        ],
        "Answer": "Answer: d\nExplanation: The disadvantage of using Public variables in a class is that a class cannot control the values assigned to its Public variables. As a result, the class cannot validate the values to ensure they are appropriate for the variables. Furthermore, most classes contain not only attributes, but behaviors as well."
    },
    {
        "id": 475,
        "Question": "_______ variables of a class are not visible to applications that use the instance of that class.",
        "Options": [
            "a) Public",
            "b) Private",
            "c) Default",
            "d) Static"
        ],
        "Answer": "Answer: b\nExplanation: Using OOP terminology, the Public members are “exposed” to the application, whereas the Private members are “hidden” from the application. For an application to assign data to or retrieve data from a Private variable in a class, it must use a Public property. In other words, an application cannot directly refer to a Private variable in a class. Rather, it must refer to the variable indirectly, through the use of a Public property."
    },
    {
        "id": 476,
        "Question": "You create a Public property using a _______ procedure.",
        "Options": [
            "a) SetProp",
            "b) Property",
            "c) Access",
            "d) SetAccess"
        ],
        "Answer": "Answer: b\nExplanation: Property procedure is used to set Public or Private properties. The syntax is Public [ReadOnly | WriteOnly] Property propertyName[(parameterList)] As dataType."
    },
    {
        "id": 477,
        "Question": "The ________ keyword indicates that the property’s value can be retrieved (read) by an application.",
        "Options": [
            "a) Access",
            "b) Get",
            "c) Read",
            "d) ReadOnly"
        ],
        "Answer": "Answer: d\nExplanation: The ReadOnly keyword indicates that the property’s value can be retrieved (read) by an application, but the application cannot set (write to) the property. The property would get its value from the class itself rather than from the application."
    },
    {
        "id": 478,
        "Question": "The ________ keyword indicates that an application can set the property’s value, but it cannot retrieve the value.",
        "Options": [
            "a) Receive",
            "b) Write",
            "c) WriteOnly",
            "d) ReceiveOnly"
        ],
        "Answer": "Answer: c\nExplanation: The WriteOnly keyword indicates that an application can set the property’s value, but it cannot retrieve the value. In this case, the value would be set by the application for use within the class."
    },
    {
        "id": 479,
        "Question": "The code contained in the ______ allows an application to retrieve the contents of the Private variable associated with the property.",
        "Options": [
            "a) Set Block",
            "b) Retrieve",
            "c) Get Block",
            "d) Getter Block"
        ],
        "Answer": "Answer: c\nExplanation: Public members are visible to the application using the instance of a given class, private members are invisible. To access the private members, public member functions have to be used. If the header contains the ReadOnly keyword, you include only a Get block of code in the Property procedure The Get block is such a method, which is used to read private members."
    },
    {
        "id": 480,
        "Question": "The code contained in the ______ allows an application to retrieve the contents of the Private variable associated with the property.",
        "Options": [
            "a) Set Block",
            "b) Retrieve",
            "c) Get Block",
            "d) Getter Block"
        ],
        "Answer": "Answer: a\nExplanation: Public members are visible to the application using the instance of a given class, private members are invisible. To access the private members, public member functions have to be used. If the header contains the WriteOnly keyword, you include only a Set block of code in the Property procedure. The Set block is such a method, which is used to change private members."
    },
    {
        "id": 481,
        "Question": "9. Is there an error in the below code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw2\">Private</span> _intSide <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>\n<span class=\"kw2\">Public</span> <span class=\"kw4\">Property</span> Side <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>\n_intSide=_intSide+2\n<span class=\"kw3\">End</span> <span class=\"kw4\">Property</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) No error",
            "b) Runtime Error",
            "c) Syntax error",
            "d) Compilation Error"
        ],
        "Answer": "Answer: d\nExplanation: Public members are visible to the application using the instance of a given class, private members are invisible. To access the private members, public member functions have to be used."
    },
    {
        "id": 482,
        "Question": "10. Is there an error in the below code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"vb\"><pre class=\"de1\"><span class=\"kw2\">Private</span> _dblBonus <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>\n<span class=\"kw2\">Public</span> ReadOnly <span class=\"kw4\">Property</span> Bonus <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>\n<span class=\"kw4\">Set</span>(<span class=\"kw4\">ByVal</span> value <span class=\"kw4\">As</span> <span class=\"kw1\">Decimal</span>)\n_dblBonus = value\n<span class=\"kw3\">End</span> <span class=\"kw4\">Set</span>\n<span class=\"kw3\">End</span> <span class=\"kw4\">Property</span></pre></div></div></div></div></div></div>",
        "Options": [
            "a) No error",
            "b) Runtime Error",
            "c) Compilation Error",
            "d) Syntax error"
        ],
        "Answer": "Answer: c\nExplanation: If the header contains the ReadOnly keyword, you include only a Get block of code in the Property procedure The Get block is such a method, which is used to read private members. If the header contains the WriteOnly keyword, you include only a Set block of code in the Property procedure. The Set block is such a method, which is used to change private members."
    },
    {
        "id": 483,
        "Question": "A ________ is a special computer that serves webpages.",
        "Options": [
            "a) Server",
            "b) Host",
            "c) Client",
            "d) Router"
        ],
        "Answer": "Answer: a\nExplanation:  A server is a computer program that provides services to other computer programs (and their users) in the same or other computers. The computer that a server program runs in is also frequently referred to as a server. That machine may be a dedicated server or used for other purposes as well."
    },
    {
        "id": 484,
        "Question": "A _______ computer requests web pages from the server.",
        "Options": [
            "a) Server",
            "b) Host",
            "c) Client",
            "d) Router"
        ],
        "Answer": "Answer: c\nExplanation:  A given application in a computer may function as a client with requests for services from other programs and also as a server of requests from other programs."
    },
    {
        "id": 485,
        "Question": "A ________ web page is not interactive and is used to display information only.",
        "Options": [
            "a) Dynamic",
            "b) Static",
            "c) Server",
            "d) Client"
        ],
        "Answer": "Answer: b\nExplanation: A static web page (sometimes called a flat page/stationary page) is a web page that is delivered to the user exactly as stored, in contrast to dynamic web pages which are generated by a web application."
    },
    {
        "id": 486,
        "Question": "A ________ web page is not interactive and is used to display information only.",
        "Options": [
            "a) Dynamic",
            "b) Static",
            "c) Server",
            "d) Client"
        ],
        "Answer": "Answer: a\nExplanation: A dynamic web page is a web page that displays different content each time it’s viewed. For example, the page may change with the time of day, the user that accesses the webpage, or the type of user interaction. "
    },
    {
        "id": 487,
        "Question": "ASP is a ________ language that tells the client’s browser how to render the page on the computer screen.",
        "Options": [
            "a) Markup",
            "b) Programming",
            "c) Structured Query",
            "d) Data storage"
        ],
        "Answer": "Answer: a\nExplanation: An Active Server Page (ASP) is an HTML page that includes one or more scripts (small embedded programs) that are processed on a Microsoft Web server before the page is sent to the user. An ASP is somewhat similar to a server-side include or a common gateway interface (CGI) application in that all involve programs that run on the server, usually tailoring a page for the user. Typically, the script in the Web page at the server uses input received as the result of the user’s request for the page to access data from a database and then builds or customizes the page on the fly before sending it to the requestor."
    },
    {
        "id": 488,
        "Question": "Text that cannot be changed by the user is termed as _____ text.",
        "Options": [
            "a) Constant",
            "b) Dynamic",
            "c) Static",
            "d) Hardcoded"
        ],
        "Answer": "Answer: c\nExplanation: Static text is the standard type of text. Static text is used when you need to add text to the Stage, Buttons or any text that doesn’t need to change or load from an external source. Static implies that the text content (words) does not change not that it is Static.\n"
    },
    {
        "id": 489,
        "Question": "The first webpage added to an application is the _______ page.",
        "Options": [
            "a) Default.aspx",
            "b) Home.aspx",
            "c) Index.aspx",
            "d) Start.aspx"
        ],
        "Answer": "Answer: a\nExplanation: The first webpage added to an application is the default.aspx page.  You can create any sort of application in that page. If the first webpage is the home page, you can name it as home.aspx."
    },
    {
        "id": 490,
        "Question": "_______ property sets the border of an image.",
        "Options": [
            "a) BorderProperty",
            "b) Border",
            "c) Surround",
            "d) Line"
        ],
        "Answer": "Answer: a\nExplanation:  Border property sets border of an image. You can set border width , border style etc, using this property."
    },
    {
        "id": 491,
        "Question": "_______  initializes a new instance of Line class.",
        "Options": [
            "a) BorderProperty",
            "b) Border",
            "c) Surround",
            "d) Line()"
        ],
        "Answer": "Answer: d\nExplanation:  Line() is a consrtructor that initializes a new instance of a Line class. It has properties such as ActualHeight, ActualWidth etc."
    },
    {
        "id": 492,
        "Question": "The background color of a Web page is determined by the ______ property.",
        "Options": [
            "a) BackColor",
            "b) BackgroundColor",
            "c) BgColor",
            "d) BColor"
        ],
        "Answer": "Answer: c\nExplanation: Bgcolor is used to define the background colour of a web page. You can set the Bgcolor by giving the colour name or by giving hex such as Bgcolour =”FFFF”.\n"
    },
    {
        "id": 493,
        "Question": "A ______ Web page contains controls with which the user can interact.",
        "Options": [
            "a) Static",
            "b) Dynamic",
            "c) Server",
            "d) Client"
        ],
        "Answer": "Answer: b\nExplanation: A dynamic web page contains controls with which the user can interact. Dynamic HTML is an extension of HTML that allows Web authors and developers to create pages that dynamically update their content and interact with the user without relying on scripts or server-side processing. When you create a DHTML application, the resulting pages use the Dynamic HTML technology in Internet Explorer 4.x. Dynamic HTML’s object model allows you to interact with HTML pages in new ways — for example, manipulating their properties, methods, and events, and exercising finer control over the layout of the pages."
    },
    {
        "id": 494,
        "Question": "A button’s _______ event is used to run code.",
        "Options": [
            "a) OnClick",
            "b) onclick",
            "c) Click",
            "d) click"
        ],
        "Answer": "Answer: c\nExplanation: A button’s click event is used to run the code, associated with that button. These are known as event handlers."
    },
    {
        "id": 495,
        "Question": "The ______ validator is used to compare an entry with a constant value or the property stored in a control.",
        "Options": [
            "a) CompareValidator",
            "b) RangeValidator",
            "c) RequiredFieldValidator",
            "d) ValidationSummary"
        ],
        "Answer": "Answer: a\nExplanation: The CompareValidator might not be the most commonly used validator of the bunch, but it’s still useful in some cases. It can compare two values, for instance, the values of two controls whereas the Rangevalidator is used to verify that an entry is within the specified minimum and maximum values."
    },
    {
        "id": 496,
        "Question": "The ______ validator is used to display all of the validation error messages in a single location on aWeb page.",
        "Options": [
            "a) CompareValidator",
            "b) RangeValidator",
            "c) RequiredFieldValidator",
            "d) ValidationSummary"
        ],
        "Answer": "Answer: d\nExplanation: The ValidationSummary control allows you to summarize the error messages from all validation controls on a Web page in a single location. The summary can be displayed as a list, a bulleted list, or a single paragraph, based on the value of the DisplayMode property. The error message displayed in the ValidationSummary control for each validation control on the page is specified by the ErrorMessage property of each validation control. If the ErrorMessage property of the validation control is not set, no error message is displayed in the ValidationSummary control for that validation control. You can also specify a custom title in the heading section of the ValidationSummary control by setting the HeaderText property."
    },
    {
        "id": 497,
        "Question": "The ______ validator is used to verify that an entry is within the specified minimum and maximum values.",
        "Options": [
            "a) CompareValidator",
            "b) RangeValidator",
            "c) RequiredFieldValidator",
            "d) ValidationSummary"
        ],
        "Answer": "Answer: b\nExplanation:  The Rangevalidator is used to verify that an entry is within the specified minimum and maximum values whereas the CompareValidator might not be the most commonly used validator of the bunch, but it’s still useful in some cases. It can compare two values, for instance the values of two controls."
    },
    {
        "id": 498,
        "Question": "The ______ validator is used to verify that an entry matches a specific pattern.",
        "Options": [
            "a) CompareValidator",
            "b) RegularExpressionValidator",
            "c) RequiredFieldValidator",
            "d) ValidationSummary"
        ],
        "Answer": "Answer: b\nExplanation: The RegularExpressionvalidator is used to verify that an entry matches a specific pattern whereas the Rangevalidator is used to verify that an entry is within the specified minimum and maximum values and the CompareValidator might not be the most commonly used validator of the bunch, but it’s still useful in some cases. It can compare two values, for instance the values of two controls."
    },
    {
        "id": 499,
        "Question": "The ______ validator is used to verify that a control contains data.",
        "Options": [
            "a) CompareValidator",
            "b) RangeValidator",
            "c) RequiredFieldValidator",
            "d) ValidationSummary"
        ],
        "Answer": "Answer: c\nExplanation: The RequiredFieldvalidator is used to verify that control contains data whereas the Rangevalidator is used to verify that an entry is within the specified minimum and maximum values and the CompareValidator might not be the most commonly used validator of the bunch, but it’s still useful in some cases. It can compare two values, for instance the values of two controls."
    },
    {
        "id": 500,
        "Question": "The ______ validator is used to verify that control contains data verify that an entry passes the specified validation logic.",
        "Options": [
            "a) CompareValidator",
            "b) RangeValidator",
            "c) CustomValidator",
            "d) ValidationSummary"
        ],
        "Answer": "Answer: c\nExplanation: The CustomValidator is used to verify that a control contains data verify that an entry passes the specified validation logic whereas the Rangevalidator is used to verify that an entry is within the specified minimum and maximum values and the CompareValidator might not be the most commonly used validator of the bunch, but it’s still useful in some cases. It can compare two values, for instance, the values of two controls."
    },
    {
        "id": 501,
        "Question": "To make text appear around image ______ section is used.",
        "Options": [
            "a) Wrapping style",
            "b) Text style",
            "c) Image properties",
            "d) Align"
        ],
        "Answer": "Answer: a\nExplanation:  Wrapping style makes the text appear around image. In Visual Basic 6.0, the WordWrap property determines if text wraps to multiple lines when it is too long to fit in a label.\nIn Visual Basic 2008, the text in a Label control automatically wraps. The only way to prevent wrapping is to make the height of the Label control equivalent to a single line of text."
    },
    {
        "id": 502,
        "Question": "If you want text to appear to the left of the selected image control on a Web form, you would need to click which button in thePosition dialog box?",
        "Options": [
            "a) Align",
            "b) AlignLeft",
            "c) Left",
            "d) Right"
        ],
        "Answer": "Answer: c\nExplanation: The keyword Left in the Position dialog box helps to make the text to appear to the left of the selected image control on a Web form."
    }
]