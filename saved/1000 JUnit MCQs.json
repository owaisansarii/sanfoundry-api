[
    {
        "id": 1,
        "Question": "JUnit is used for what type of software testing for the Java language?",
        "Options": [
            "a) Unit Testing",
            "b) Integration Testing",
            "c) Functional Testing",
            "d) System Testing"
        ],
        "Answer": "Answer: a\nExplanation: Unit testing is the testing of an individual unit or group of related units. That is precisely what JUnit is used for."
    },
    {
        "id": 2,
        "Question": "A JUnit Unit Test Case is compulsorily characterised by a/an known _______ and a/an expected _____",
        "Options": [
            "a) output, input",
            "b) input, output",
            "c) variable, literal",
            "d) program, variable"
        ],
        "Answer": "Answer: b\nExplanation: A JUnit Unit Test Case is characterized by a known input and an expected output, which is predefined. The known input tests a precondition and the expected output a post-condition."
    },
    {
        "id": 3,
        "Question": "To use JUnit in a project we need to add which JAR files on our test classpath?",
        "Options": [
            "a) junit.jar",
            "b) hamcrest-core.jar",
            "c) junit.jar and hamcrest-core.jar",
            "d) java-junit.jar"
        ],
        "Answer": "Answer: c\nExplanation: hamcrest-core.jar has Matchers that JUnit uses for unit testing."
    },
    {
        "id": 4,
        "Question": "What are fixtures in JUnit?",
        "Options": [
            "a) Objects that specify when to run a test",
            "b) Fixed state of a set of objects used as a baseline for running tests",
            "c) Bundle of few test cases run together",
            "d) Date objects"
        ],
        "Answer": "Answer: b\nExplanation: Tests need to run against the backdrop of set of predefined or known objects. This set of objects is called a test fixture."
    },
    {
        "id": 5,
        "Question": "JUnit test methods must compulsorily return what value?",
        "Options": [
            "a) String",
            "b) int",
            "c) Object",
            "d) void"
        ],
        "Answer": "Answer: d\nExplanation: If a JUnit test method is declared to return anything then file will compile successfully. But the execution will fail because JUnit requires all test methods to be declared to return void."
    },
    {
        "id": 6,
        "Question": "JUnit test files are written in files with which file extension?",
        "Options": [
            "a) .junit",
            "b) .test",
            "c) .java",
            "d) .unit"
        ],
        "Answer": "Answer: c\nExplanation: JUnit test files are regular java files with special methods which are referenced via annotations."
    },
    {
        "id": 7,
        "Question": "What is the purpose of assertArrayEquals(“message”, A, B)?",
        "Options": [
            "a) Checks that “message” is in both A and B",
            "b) Checks that “message” is in A but not B",
            "c) Checks that “message” is in B but not A",
            "d) Asserts the equality of the A and B arrays"
        ],
        "Answer": "Answer: d\nExplanation: Asserts the equality of the A and B arrays. The “message” is displayed to the user."
    },
    {
        "id": 8,
        "Question": "Which annotation implies that a method is a JUnit test case?",
        "Options": [
            "a) @junit",
            "b) @testcase",
            "c) @org.Test",
            "d) @org.junit.Test"
        ],
        "Answer": "Answer: d\nExplanation:  Annotate a method with @org.junit.Test to imply that it is a JUnit test case."
    },
    {
        "id": 9,
        "Question": "What is a test runner?",
        "Options": [
            "a) Used to execute the test file",
            "b) Defines the test file",
            "c) Used to write test cases",
            "d) Used to define annotations"
        ],
        "Answer": "Answer: a\nExplanation: Test runner is used for executing the test cases using the runClasses() method of JUnitCore class of JUnit to run the test case."
    },
    {
        "id": 10,
        "Question": "Which methods cannot be tested by JUnit test class?",
        "Options": [
            "a) public methods",
            "b) private methods",
            "c) protected methods",
            "d) methods with void return type"
        ],
        "Answer": "Answer: b\nExplanation: When a method is declared as “private”, it can only be accessed within the same class. So there is no way to test a “private” method of a target class from any test class."
    },
    {
        "id": 11,
        "Question": "What are Parameterised tests used for in JUnit?",
        "Options": [
            "a) Run a test many times with different sets of parameters",
            "b) Run a test with no parameters",
            "c) Run a test with only String parameters",
            "d) Run a test once with fixed set of parameters"
        ],
        "Answer": "Answer: a\nExplanation: The Parameterized test runner allows to run a test many times with different sets of parameters."
    },
    {
        "id": 12,
        "Question": "A parameterised test class must carry which annotation?",
        "Options": [
            "a) @Test",
            "b) @ParameterisedClass",
            "c) @Runwith",
            "d) @Class"
        ],
        "Answer": "Answer: c\nExplanation: A class that is annotated with @RunWith or extends a class that is annotated with @RunWith, JUnit will invoke the class it has referenced to run the tests in that class instead of the runner that is built into JUnit."
    },
    {
        "id": 13,
        "Question": "The test class must carry the @RunWith annotation with the ______ class as its argument.",
        "Options": [
            "a) Default",
            "b) Parameterised",
            "c) Super",
            "d) Inherited"
        ],
        "Answer": "Answer: b\nExplanation: “Parameterised.class” should be the argument. The full syntax is @RunWith(value=Parameterized.class)."
    },
    {
        "id": 14,
        "Question": "4. What will be the outcome for the following piece of code?<div class=\"hk1_style-wrap4\"><div class=\"hk1_style-wrap3\"><div class=\"hk1_style-wrap2\"><div class=\"hk1_style-wrap\"><div class=\"hk1_style\"><div class=\"java\"><ol><li class=\"li1\"><pre class=\"de1\">  <span class=\"co1\">//The JUnit files are imported</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TestClass <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t\t@Test</pre></li><li class=\"li1\"><pre class=\"de1\">\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> testingMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t\t\t<span class=\"kw3\">String</span> message <span class=\"sy0\">=</span> “Test”<span class=\"sy0\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t\t\tassertEquals<span class=\"br0\">(</span><span class=\"nu0\">3</span>,message.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t\t<span class=\"br0\">}</span></pre></li><li class=\"li1\"><pre class=\"de1\">\t<span class=\"br0\">}</span></pre></li></ol></div></div></div></div></div></div>",
        "Options": [
            "a) Compilation Error",
            "b) Runtime Error",
            "c) Test Ran with Success",
            "d) Test Ran with Failure"
        ],
        "Answer": "Answer: d\nExplanation: The string “Test” has a length of 4 whereas the expected value is 3."
    },
    {
        "id": 15,
        "Question": "What does the fail() method do in JUnit?",
        "Options": [
            "a) Throws an assertion error unconditionally",
            "b) Calls the default constructor",
            "c) Outputs the message “Fail” to the console",
            "d) Pauses the test for 1 second"
        ],
        "Answer": "Answer: a\nExplanation: The method throws an assertion error unconditionally. This might be helpful to show an incomplete test (maybe still being worked upon) or to ensure that an expected exception is thrown."
    },
    {
        "id": 16,
        "Question": "Which annotation must be used to define suite classes?",
        "Options": [
            "a) @RunWith",
            "b) @SuiteClasses",
            "c) @Suite",
            "d) @SuiteClass"
        ],
        "Answer": "Answer: b\nExplanation: The SuiteClasses annotation is used to specify the classes to be run when a class that is annotated with @RunWith(Suite.class) has been run."
    },
    {
        "id": 17,
        "Question": "When is the tearDown() method called in JUnit?",
        "Options": [
            "a) After all the tests have run",
            "b) At the beginning of every test case",
            "c) After each test case has run",
            "d) At the beginning of the first test case"
        ],
        "Answer": "Answer: c\nExplanation: The tearDown() method is called after the execution of every @Test method."
    },
    {
        "id": 18,
        "Question": "What does the assertTrue(“message”,A) do?",
        "Options": [
            "a) Asserts that the condition A is true",
            "b) Asserts that “message” = A",
            "c) Asserts that A contains “message”",
            "d) Asserts that the condition A is false"
        ],
        "Answer": "Answer: a\nExplanation: assertTrue requires A to be a boolean expression and the “message” is displayed."
    },
    {
        "id": 19,
        "Question": "How can a method be made to run before the execution of every test case?",
        "Options": [
            "a) Annotate the method with @Before",
            "b) Prefix the method name with startfirst",
            "c) Annotate the method with a @BeforeClass",
            "d) Such a method cannot be made"
        ],
        "Answer": "Answer: a\nExplanation: Annotating a method with @Before implies that method to be run before the every test method. The @Before methods of superclasses are run before those of the current class."
    },
    {
        "id": 20,
        "Question": "Which method from TestCase class returns the name of a Test case?",
        "Options": [
            "a) String testCaseName()",
            "b) String getTest()",
            "c) String getTestCaseName()",
            "d) String getName()"
        ],
        "Answer": "Answer: d\nExplanation: getName() returns a string denoting the name of the TestCase."
    },
    {
        "id": 21,
        "Question": "JUnit runners are available in which package?",
        "Options": [
            "a) org.junit.runners",
            "b) junitfiles.runners",
            "c) org.runners",
            "d) org.junit.files.runners"
        ],
        "Answer": "Answer: a\nExplanation: The default JUnit package is “org,junit”. Runners are found in “org,junit.runner”."
    },
    {
        "id": 22,
        "Question": "To start a test case as JUnit 3.8 test case which runner is required?",
        "Options": [
            "a) org.junit.runners.Junit4",
            "b) org.junit.runners.Parameterized",
            "c) org.junit.internal.runners.Junit38ClassRunner",
            "d) org.junit.internal.runners.Junit4"
        ],
        "Answer": "Answer: c\nExplanation: This runner is included in the current release of JUnit only for backward compatibility. It will start the test case as a JUnit 3.8 test case."
    },
    {
        "id": 23,
        "Options": [
            "3. What is a Façade in JUnit?",
            "a) It is a group of test cases",
            "b) It is a design pattern that provides a unified interface to a set of interfaces in a subsystem",
            "c) It is a collection of superclasses",
            "d) It is a group of mock objects"
        ],
        "Answer": "Answer: b\nExplanation: Façade defines a higher-level interface that makes the subsystem easier to use."
    },
    {
        "id": 24,
        "Question": "To create a custom test runner which class needs to be extended?",
        "Options": [
            "a) CustomRunner",
            "b) TestRunner",
            "c) Runner",
            "d) UserRunner"
        ],
        "Answer": "Answer: c\nExplanation: The Runner class is an abstract class that needs to be extended to create a custom test runner."
    },
    {
        "id": 25,
        "Question": "What type of object is returned on completion of a test?",
        "Options": [
            "a) org.junit.runner.Result",
            "b) org.junit.runner.Complete",
            "c) org.junit.runner.Outcome",
            "d) org.junit.runner.Object"
        ],
        "Answer": "Answer: a\nExplanation: An org.junit.runner.Result object collects and summarizes information from running multiple tests."
    },
    {
        "id": 26,
        "Question": "To listen to events during a test, which class has to be extended?",
        "Options": [
            "a) org.junit.runner.notification.RunListener",
            "b) org.junit.runner.Listener",
            "c) org.junit.runner.notification.Listener",
            "d) org.junit.runner.RunListener"
        ],
        "Answer": "Answer: a\nExplanation: To respond to events during a test run, RunListener is extended and the appropriate methods overridden. If a listener throws an exception during a test event, it is removed for the remainder of the test run."
    },
    {
        "id": 27,
        "Question": "When does the wasSuccessful() method of the Runner class return true?",
        "Options": [
            "a) The test file compiled",
            "b) The test file ran",
            "c) Some of the test cases ran successfully",
            "d) All the test cases ran succesfully"
        ],
        "Answer": "Answer: d\nExplanation: wasSuccesful() method is a public method of the Runner class that returns true if and only if all tests succeeded."
    },
    {
        "id": 28,
        "Question": "To run the file TestClass.class from the command line, we have to type what?",
        "Options": [
            "a) java TestClass",
            "b) javac TestClass",
            "c) java org.junit.runner.JUnitCore TestClass",
            "d) org.junit.runner.JUnitCore TestClass"
        ],
        "Answer": "Answer: c\nExplanation: The test cases are executed using JUnitCore class which is referenced by “org.junit.runner.JUnitCore”."
    },
    {
        "id": 29,
        "Question": "What does the getRunCount() method of the Result return?",
        "Options": [
            "a) String denoting the time of execution",
            "b) Integer denoting the time of execution",
            "c) int denoting the number of tests run",
            "d) int denoting the number of failed tests"
        ],
        "Answer": "Answer: c\nExplanation: getRunCount() returns the number of tests run. GetRuntime() returns the execution time in milliseconds."
    },
    {
        "id": 30,
        "Question": "What information does an object of the Failure class contain?",
        "Options": [
            "a) Description of the failed test",
            "b) Description of the failed test and the exception thrown while running it",
            "c) Description of the fail() method",
            "d) Description of the exception thrown"
        ],
        "Answer": "Answer: b\nExplanation: A failure contains an object of org.junit.runner.Description and the exception thrown while running the test case."
    },
    {
        "id": 31,
        "Question": "The ______ is a container used to gather tests for the purpose of grouping and invocation.",
        "Options": [
            "a) Result",
            "b) TestCase",
            "c) Suite",
            "d) Test"
        ],
        "Answer": "Answer: c\nExplanation: JUnit provides test Suite to facilitate the task of running more than one test file."
    },
    {
        "id": 32,
        "Question": "What happens if the tester does not define a Suite?",
        "Options": [
            "a) The test runner automatically creates a Suite",
            "b) Compilation Error",
            "c) Every test fails",
            "d) Every test passes"
        ],
        "Answer": "Answer: a\nExplanation: The default Suite scans the test class for any methods annotated with @Test. Internally, the default Suite creates an instance of the test class for each @Test method. JUnit then executes every @Test method independently from the others to avoid potential side effects."
    },
    {
        "id": 33,
        "Question": "The Suite object is a _____ that executes all of the @Test annotated methods in the test class.",
        "Options": [
            "a) Result",
            "b) FolderConfigurationTest",
            "c) FileConfigurationTest",
            "d) Runner"
        ],
        "Answer": "Answer: d\nExplanation: Suite is under org.junit.runners.Suite, Suite objects are Runners."
    },
    {
        "id": 34,
        "Question": "Suite class is the JUnit 4 equivalent of what feature of JUnit 3.8.x?",
        "Options": [
            "a) static Test suite() method",
            "b) Test suite() method",
            "c) static void suite() method",
            "d) void suite() method"
        ],
        "Answer": "Answer: a\nExplanation: The suite is made accessible to a TestRunner tool with the static method suite() which returns a Test suite."
    },
    {
        "id": 35,
        "Question": "For a Suite class, the @RunWith annotation has the value of which class?",
        "Options": [
            "a) org.junit.runners.class",
            "b) org.junit.Suite.class",
            "c) org.runners.Suite.class",
            "d) org.junit.runners.Suite.class"
        ],
        "Answer": "Answer: d\nExplanation: “org.junit.runners.Suite.class” contains the definition for the Suite class and a the declaration is @RunWith(value=org.junit.runners.Suite.class)."
    },
    {
        "id": 36,
        "Question": "Which annotation is used to list all the classes in a suite?",
        "Options": [
            "a) @RunWith",
            "b) @SuiteClasses",
            "c) @Classses",
            "d) @SuiteClass"
        ],
        "Answer": "Answer: b\nExplanation: The SuiteClasses annotation specifies the classes to be run when a class annotated with @RunWith(Suite.class) is run. The formal definition of the annotation is “Annotation Type Suite.SuiteClasses”."
    },
    {
        "id": 37,
        "Question": "If we want to run test files Test1 and Test2 together, the @SuiteClasses annotation will be?",
        "Options": [
            "a) @SuiteClasses(value={Test1.class,Test2.class})",
            "b) @SuiteClasses(value=All)",
            "c) @SuiteClasses(Test1, Test2);",
            "d) @SuiteClasses()"
        ],
        "Answer": "Answer: a\nExplanation: The classes we want to test together are given as a tuple to the value of the SuiteClasses annotation."
    },
    {
        "id": 38,
        "Question": "JUnit Suites are independent of the capability of the ______ system.",
        "Options": [
            "a) Run",
            "b) Class",
            "c) Test",
            "d) Build"
        ],
        "Answer": "Answer: d\nExplanation: JUnit Suites are useful to organize tests in Java, independent of the capability of the build system, because it’s common for someone or a group other than the developers to maintain builds."
    },
    {
        "id": 39,
        "Question": "Which attribute is added to the @Test annotation so that the test passes when an expected exception is thrown?",
        "Options": [
            "a) exception",
            "b) throws",
            "c) expected",
            "d) expectedException"
        ],
        "Answer": "Answer: b\nExplanation: JUnit only reports the first failure in a single test."
    },
    {
        "id": 40,
        "Question": "The ______ is a component that “interacts with a client, controlling and managing the handling of each request”.",
        "Options": [
            "a) Master",
            "b) RequestHandler",
            "c) Controller",
            "d) Class"
        ],
        "Answer": "Answer: c\nExplanation: A controller is a component that “interacts with a client, controlling and managing the handling of each request,” and tells that it is used in both presentation-tier and business-tier patterns."
    },
    {
        "id": 41,
        "Question": "An example of a web controller is __________",
        "Options": [
            "a) Apache Struts Framework",
            "b) JUnit",
            "c) Java",
            "d) Php"
        ],
        "Answer": "Answer: a\nExplanation: Apache Struts Framework is an open source framework for building Servlet/JSP based web applications which is an example of a web controller."
    },
    {
        "id": 42,
        "Question": "What are the object(s) which make the core of the description of a controller component?",
        "Options": [
            "a) The Request, the Response",
            "b) The Request, the Response, the RequestHandler, and the Controller",
            "c) The Request",
            "d) The RequestHandler"
        ],
        "Answer": "Answer: b\nExplanation: The flow of control is from the Request interface to the Response interface to the RequestHandler interface finally to the Controller Interface."
    },
    {
        "id": 43,
        "Question": "What is the signature of the addHandler method of the Controller interface?",
        "Options": [
            "a) void addHandler(Request request, RequestHandler requestHandler)",
            "b) void addHandler(RequestHandler requestHandler);",
            "c) void addHandler(RequestHandler requestHandler);",
            "d) void addHandler(Request request, Request requestHandler);"
        ],
        "Answer": "Answer: a\nExplanation: The addHandler method takes a Request and then a RequestHandler to handle that request as parameters."
    },
    {
        "id": 44,
        "Question": "The principle of “Hollywood Principle: Don’t call us, we’ll call you” is commonly known as _____________",
        "Options": [
            "a) Calling Principle",
            "b) Control Call",
            "c) Inversion of Control",
            "d) No-Show Principle"
        ],
        "Answer": "Answer: c\nExplanation: Inversion of Control focuses on separating what to do from when to do."
    },
    {
        "id": 45,
        "Question": "Inversion of Control is used to increase __________ of the code.",
        "Options": [
            "a) Functionality",
            "b) Cleanliness",
            "c) Effectiveness",
            "d) Modularity"
        ],
        "Answer": "Answer: d\nExplanation: Inversion of control makes the code more extensible resulting in more modular code."
    },
    {
        "id": 46,
        "Question": "When the container calls setter methods after invoking a constructor with no arguments it is known as ________________",
        "Options": [
            "a) Constructor-based dependency injection",
            "b) Setter-based dependency injection",
            "c) Setter-Seller dependency injection",
            "d) No-Constructor dependency injection"
        ],
        "Answer": "Answer: b\nExplanation: Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method."
    },
    {
        "id": 47,
        "Question": "Constructor-based DI is accomplished when the container invokes a class constructor with ____________",
        "Options": [
            "a) A number of arguments",
            "b) No argument",
            "c) Just one argument",
            "d) Null objects"
        ],
        "Answer": "Answer: a\nExplanation: Each argument represents a dependency on some other class."
    },
    {
        "id": 48,
        "Question": "Constructor-based DI is preferred for ___________",
        "Options": [
            "a) Optional dependencies",
            "b) Mandatory dependencies",
            "c) All dependencies",
            "d) No dependency"
        ],
        "Answer": "Answer: b\nExplanation: Since there has to be at least one argument, Constructor-based DI is preferred for Mandatory dependencies."
    },
    {
        "id": 49,
        "Question": "In the context of unit testing, the term ___________ is used to contrast and compare the objects you use in your application with the objects that you use to test your application (test objects).",
        "Options": [
            "a) Mock Object",
            "b) Dummy Object",
            "c) Domain Object",
            "d) Real Object"
        ],
        "Answer": "Answer: c\nExplanation: Any object under test is considered a domain object.\n"
    },
    {
        "id": 50,
        "Question": "Improving the design of existing code is known as __________",
        "Options": [
            "a) Refactoring",
            "b) Improving",
            "c) Betterment",
            "d) Upgrading"
        ],
        "Answer": "Answer: a\nExplanation: Refactoring is the process of restructuring existing code, changing the design. "
    },
    {
        "id": 51,
        "Question": "In what order is multiple @Before annotated methods run?",
        "Options": [
            "a) Oldest First",
            "b) Newest First",
            "c) Randomly",
            "d) According to argument list"
        ],
        "Answer": "Answer: c\nExplanation: It is not certain which @Before annotated method will run first as all run randomly."
    },
    {
        "id": 52,
        "Question": "The ___________ method confirms that both references are to the same object.",
        "Options": [
            "a) assertEquals",
            "b) assertEqual",
            "c) assertEqualObject",
            "d) assertSame"
        ],
        "Answer": "Answer: d\nExplanation: assertSame uses the == operator to compare objects."
    },
    {
        "id": 53,
        "Question": "The assertEquals() method uses which underlying method to compare objects?",
        "Options": [
            "a) ==",
            "b) equals()",
            "c) isequal()",
            "d) ="
        ],
        "Answer": "Answer: b\nExplanation: The assertEquals() method makes use of equals() to compare objects, comparing identity."
    },
    {
        "id": 54,
        "Question": "The equals() method is inherited from which base class?",
        "Options": [
            "a) Object",
            "b) String",
            "c) Integer",
            "d) org.junit.Equals"
        ],
        "Answer": "Answer: a\nExplanation: The equals() method is inherited from the Objects class defined in java.lang.Object."
    },
    {
        "id": 55,
        "Question": "To use Parameterized.class with the @RunWith annotation, we need to import __________",
        "Options": [
            "a) org.junit.runners.Parameterized",
            "b) org.junit.Parameterized",
            "c) org.junit.runners.Parameterized",
            "d) org.runners.Parameterized"
        ],
        "Answer": "Answer: a\nExplanation: The Parameterized.class is a part of the runner class of JUnit."
    },
    {
        "id": 56,
        "Question": "To avoid overdesigning an interface, usually ____________ is used.",
        "Options": [
            "a) Agile Development",
            "b) Test Driven Development",
            "c) Base Design Development",
            "d) Waterfall Development"
        ],
        "Answer": "Answer: b\nExplanation: Since test driven development is reliant on a very short development cycle being repeated, it is used to avoid overdesigning an interface."
    },
    {
        "id": 57,
        "Question": "The _________ is a sequential or non-iterative design process, which is used in software development processes, in which progress is seen as flowing steadily downwards.",
        "Options": [
            "a) Waterfall Model",
            "b) Iterative Model",
            "c) Spiral Model",
            "d) Big Bang Model"
        ],
        "Answer": "Answer: a\nExplanation: In a waterfall model, each phase or part must be completed before the next phase can begin and there is no overlapping between the phases."
    },
    {
        "id": 58,
        "Question": "Controller logic component accesses the ________ logic component.",
        "Options": [
            "a) Class",
            "b) Object",
            "c) Business",
            "d) Criteria"
        ],
        "Answer": "Answer: c\nExplanation: Business logic component is responsible for the business logic and delegates data access."
    },
    {
        "id": 59,
        "Question": "Overuse of argument _________ can lead to fragile tests.",
        "Options": [
            "a) Parameters",
            "b) Objects",
            "c) Classes",
            "d) Captors"
        ],
        "Answer": "Answer: d\nExplanation: The system under test is no longer a black box."
    },
    {
        "id": 60,
        "Question": "What are exceptions?",
        "Options": [
            "a) Anomalous conditions requiring special processing",
            "b) Extra methods written to increase functionality",
            "c) Commented lines describing exceptional cases",
            "d) Null objects"
        ],
        "Answer": "Answer: a\nExplanation: Exceptions result in disruption of the normal flow of the code execution"
    },
    {
        "id": 61,
        "Question": "________ can be useful in adding additional functionality which applies to every test within a test class.",
        "Options": [
            "a) Copy",
            "b) Rules",
            "c) Exceptions",
            "d) Boundaries"
        ],
        "Answer": "Answer: b\nExplanation: JUnit rules intercept the test methods and give additional functionality."
    },
    {
        "id": 62,
        "Question": "_________ is a programming paradigm which allows the separation of cross cutting concerns, hence, increasing modularity.",
        "Options": [
            "a) Functional Programming",
            "b) Object Oriented Programming",
            "c) Aspect Oriented Programming",
            "d) Data Injections"
        ],
        "Answer": "Answer: c\nExplanation: Aspect Oriented Programming adds additional behaviour to existing code by separately which code is modified using a cut-point specification."
    },
    {
        "id": 63,
        "Question": "________ describes a class of functions which when run modify other functions.",
        "Options": [
            "a) Class",
            "b) Advice",
            "c) Modifiers",
            "d) Changers"
        ],
        "Answer": "Answer: b\nExplanation: Advice is a certain method applied at a certain join of a code."
    },
    {
        "id": 64,
        "Question": "AOP forms a basis for __________",
        "Options": [
            "a) Functional Development",
            "b) Object Oriented Programming",
            "c) Datafield Development",
            "d) Aspect Oriented Software Development"
        ],
        "Answer": "Answer: d\nExplanation: AOSD seeks modularization of systems."
    },
    {
        "id": 65,
        "Question": "Custom JUnit rules can be created using ___________",
        "Options": [
            "a) TestRule Interface",
            "b) CreateRule Interface",
            "c) RuleCreate Interface",
            "d) RuleInitialize Interface"
        ],
        "Answer": "Answer: a\nExplanation: JUnit provide the TestRule Interface which helps define custom JUnit Rules."
    },
    {
        "id": 66,
        "Question": "With the ‘expected’ argument, one cannot ___________",
        "Options": [
            "a) Test a method",
            "b) Test for exception type",
            "c) Test the value of the message in the exception",
            "d) Test for specific exception"
        ],
        "Answer": "Answer: c\nExplanation: The ‘expected’ argument cannot check the value of the message passed in the exception."
    },
    {
        "id": 67,
        "Question": "The _________ rule can be used to test both exception type and message.",
        "Options": [
            "a) Expected",
            "b) ExpectedException",
            "c) CatchException",
            "d) Catch"
        ],
        "Answer": "Answer: b\nExplanation: Since JUnit 4.7, ExpectedException can be used to test both exception type and message."
    },
    {
        "id": 68,
        "Question": "ExpectedException is found under which package?",
        "Options": [
            "a) org.junit.ExpectedException",
            "b) org.junit.Test.ExpectedException",
            "c) org.junit.Rule.ExpectedException",
            "d) org.junit.rules.ExpectedException"
        ],
        "Answer": "Answer: d\nExplanation: ExpectedException is a Rule and hence, is founde inside the rules package of JUnit."
    },
    {
        "id": 69,
        "Question": "The correct way to initialise an ExpectedException object is __________",
        "Options": [
            "a) public ExpectedException thrown = ExpectedException.none()",
            "b) @Rule public ExpectedException thrown",
            "c) @Rule public ExpectedException thrown = ExpectedException.none()",
            "d) public ExpectedException thrown = ExpectedException.none()"
        ],
        "Answer": "Answer: c\nExplanation: The default value of no exception is assigned to the object during declaration. "
    },
    {
        "id": 70,
        "Question": "What is timeout testing?",
        "Options": [
            "a) Testing for exceptions",
            "b) Testing code execution within time limits",
            "c) Testing code correctness",
            "d) Testing code with time functions"
        ],
        "Answer": "Answer: b\nExplanation: Timeout Testing checks if the code runs within specified time limits."
    },
    {
        "id": 71,
        "Question": "The ___________ parameter is used along with the @Test annotation to test for timeouts.",
        "Options": [
            "a) Expected",
            "b) Timeout",
            "c) NoLimit",
            "d) Time"
        ],
        "Answer": "Answer: b\nExplanation: Timeout Parameter specifies the maximum time each test method can take."
    },
    {
        "id": 72,
        "Question": "@Test(timeout = 130) implies a time limit of ___________",
        "Options": [
            "a) 130 milliseconds",
            "b) 130 minutes",
            "c) 130 seconds",
            "d) 1.30 minutes"
        ],
        "Answer": "Answer: a\nExplanation: The timeout argument is in milliseconds."
    },
    {
        "id": 73,
        "Question": "Timeout testing is ____________",
        "Options": [
            "a) Software Dependent",
            "b) Hardware Dependent",
            "c) Software and Hardware Dependent",
            "d) Software and Hardware Independent"
        ],
        "Answer": "Answer: c\nExplanation: Since different software and hardware gives different performance, timeout testing is software and hardware dependent."
    },
    {
        "id": 74,
        "Question": "What applies the same timeout to every test method of a class?",
        "Options": [
            "a) @Timeout",
            "b) @Expected",
            "c) Timeout Rule",
            "d) Not possible to apply same timeout"
        ],
        "Answer": "Answer: c\nExplanation: The timeout can be specified as a rule so that it is applied to every method."
    },
    {
        "id": 75,
        "Question": "A Timeout Rule is initialized by ____________",
        "Options": [
            "a) @Rule public Timeout object = new Timeout()",
            "b) @Rule  public Timeout object = Timeout.seconds()",
            "c)  public Timeout object = Timeout.seconds()",
            "d) public Timeout object = new Timeout()"
        ],
        "Answer": "Answer: b\nExplanation: The correct way to initialise a Timeout Rules is using the Timeout.seconds() function."
    },
    {
        "id": 76,
        "Question": "Where is the Timeout class present?",
        "Options": [
            "a) org.junit.rules.Timeout",
            "b) org.junit.Timeout",
            "c) org.Timeout",
            "d) org.junit.RuleClasses.Timeout"
        ],
        "Answer": "Answer: a\nExplanation: The correct package for the Timeout class is under org.junit.rules."
    },
    {
        "id": 77,
        "Question": "The Timeout Rule implements which interface?",
        "Options": [
            "a) Timeout",
            "b) Test",
            "c) TestingTimeout",
            "d) TestRule"
        ],
        "Answer": "Answer: d\nExplanation: The TestRule interface is extended and implemented by Timeout Rule."
    },
    {
        "id": 78,
        "Question": "If a timeout which has been specified lapses before the completion of the test, its execution is interrupted with _____________",
        "Options": [
            "a) Interrupt()",
            "b) Thread.interrupt()",
            "c) Thread.interruptable()",
            "d) Threads.interruptable()"
        ],
        "Answer": "Answer: b\nExplanation: The timeout is brought about through Interruptible I/O and locks."
    },
    {
        "id": 79,
        "Question": "What does a specified timeout of 0 imply?",
        "Options": [
            "a) 130 milliseconds",
            "b) 130 minutes",
            "c) 130 seconds",
            "d) Not set"
        ],
        "Answer": "Answer: d\nExplanation: A specified timeout of 0 implies that the Timeout is not set."
    },
    {
        "id": 80,
        "Question": "________________ is a library that contains a lot of helpful matcher objects , ported in several languages.",
        "Options": [
            "a) Java",
            "b) Pygame",
            "c) AllenWake",
            "d) Hamcrest"
        ],
        "Answer": "Answer: d\nExplanation: Hamcrest is a library that contains a lot of helpful matcher objects (known also as constraints or predicates)."
    },
    {
        "id": 81,
        "Question": "Hamcrest is not a ______________ framework in itself.",
        "Options": [
            "a) Matching",
            "b) Testing",
            "c) Asserting",
            "d) Checking"
        ],
        "Answer": "Answer: b\nExplanation: Hamcrest helps you declaratively specify simple matching rules."
    },
    {
        "id": 82,
        "Question": "The package for the assertThat() function is?",
        "Options": [
            "a) org.hamcrest.CoreMatchers.assertThat",
            "b) org.junit.Assert.assertThat",
            "c) org.junit.JunitMatchers.assertThat",
            "d) org.junit.hasItem.assertThat"
        ],
        "Answer": "Answer: b\nExplanation: The asserThat() function is a part of the main JUnit core assert functions."
    },
    {
        "id": 83,
        "Question": "______________ Hamcrest matcher can be used to match absolutely everything.",
        "Options": [
            "a) Is",
            "b) AnyOf",
            "c) Anything",
            "d) Not"
        ],
        "Answer": "Answer: c\nExplanation: Matches absolutely anything. Useful in some cases where one wants to make the assert statement more readable."
    },
    {
        "id": 84,
        "Question": "______ is used only to improve the readability of the statements.",
        "Options": [
            "a) anything",
            "b) is",
            "c) sameInstance",
            "d) nullValue"
        ],
        "Answer": "Answer: b\nExplanation: The Is Hamcrest matcher does not add any more functionality other than improving readability."
    },
    {
        "id": 85,
        "Question": "Which Hamcrest matcher is just like the && operator?",
        "Options": [
            "a) Is",
            "b) Anything",
            "c) sameInstance",
            "d) allOf"
        ],
        "Answer": "Answer: d\nExplanation: Checks to see if all contained matchers match (just like the && operator)."
    },
    {
        "id": 86,
        "Question": "________ checks to see if any of the contained matchers match.",
        "Options": [
            "a) anyOf",
            "b) allOf",
            "c) instanceOf",
            "d) notNull"
        ],
        "Answer": "Answer: a\nExplanation: The anyOf Hamcrest matcher is just like the || operator."
    },
    {
        "id": 87,
        "Question": "___________ traverses the meaning of the contained matchers.",
        "Options": [
            "a) not",
            "b) or",
            "c) allOf",
            "d) andAll"
        ],
        "Answer": "Answer: a\nExplanation: The not Hamcrest matcher is used to traverse the meaning of matchers contained in the argument."
    },
    {
        "id": 88,
        "Question": "The instanceOf matcher is equivalent to ________",
        "Options": [
            "a) isCompatibleType",
            "b) isCompatible",
            "c) isInstance",
            "d) isSame"
        ],
        "Answer": "Answer: a\nExplanation: Match whether objects are of compatible type (are instances of one another)."
    },
    {
        "id": 89,
        "Question": "___________ is used to test object identity.",
        "Options": [
            "a) instanceOf",
            "b) isCompatibleType",
            "c) type",
            "d) sameInstance"
        ],
        "Answer": "Answer: d\nExplanation: Checks whether it is the same instance of the object or not."
    },
    {
        "id": 90,
        "Question": "The JUnit hasItem() function is a _____________",
        "Options": [
            "a) Hamcrest Matcher",
            "b) Instance Function",
            "c) JUnitMatcher",
            "d) Matcher"
        ],
        "Answer": "Answer: c\nExplanation: hasItem() is a useful matcher with for use with the assertThat method."
    },
    {
        "id": 91,
        "Question": "The package to which hasItem() function belongs is _______________",
        "Options": [
            "a) org.junit.JUnitMatchers.hasItem",
            "b) org.junit.hasItem",
            "c) org.junit.Junit.hasItem",
            "d) org.junit.hamcrest.hasItem"
        ],
        "Answer": "Answer: a\nExplanation: The hasItem() is a JUnitMatcher."
    },
    {
        "id": 92,
        "Question": "Class JUnitMatchers extends _______________",
        "Options": [
            "a) java.lang.Object",
            "b) java.lang.String",
            "c) java.util.*",
            "d) java.util.Arrays"
        ],
        "Answer": "Answer: a\nExplanation: JUnitMatchers manipulates the default Java objects and thus, extends java.lang.Object."
    },
    {
        "id": 93,
        "Question": "_________ is used for combining those matchers which must both pass.",
        "Options": [
            "a) all",
            "b) both",
            "c) justTwo",
            "d) matchTwo"
        ],
        "Answer": "Answer: b\nExplanation: The both function is a part of the internal Combinable matchers of JUnit."
    },
    {
        "id": 94,
        "Question": "__________ Hamcrest matcher tests for null values.",
        "Options": [
            "a) isNull",
            "b) nullValue",
            "c) isNullValue",
            "d) isNullable"
        ],
        "Answer": "Answer: b\nExplanation: The nullValue function is defined to detect null valued objects."
    },
    {
        "id": 95,
        "Question": "___________ tests whether a JavaBean has a particular property.",
        "Options": [
            "a) isProperty",
            "b) porperty",
            "c) hasProperty",
            "d) isPresent"
        ],
        "Answer": "Answer: c\nExplanation: The hasProperty is a core Hamcrest matcher."
    },
    {
        "id": 96,
        "Question": "To define a ________ in a JavaBean class, public getter and setter methods have to be supplied.",
        "Options": [
            "a) Class",
            "b) Object",
            "c) Value",
            "d) Property"
        ],
        "Answer": "Answer: d\nExplanation: Public setter and getter methods are required for Properties to be defined in JavaBeans classes."
    },
    {
        "id": 97,
        "Question": "A/An __________ property is an array instead of a single value.",
        "Options": [
            "a) Indexed",
            "b) valued",
            "c) null",
            "d) variable"
        ],
        "Answer": "Answer: a\nExplanation: In such cases, the bean class is responsible for providing methods for setting and getting everything."
    },
    {
        "id": 98,
        "Question": "__________________ tests whether a given string equals another one, ignoring the case.",
        "Options": [
            "a) stringEqual",
            "b) equalToIgnoringCase",
            "c) ignoringCaseEqual",
            "d) equalToCase"
        ],
        "Answer": "Answer: b\nExplanation: equalToIgnoringCase is a core Hamcrest Matcher which tests given string equality."
    },
    {
        "id": 99,
        "Question": "_________ tests whether a given Map has a given entry.",
        "Options": [
            "a) hasItem",
            "b) hasItems",
            "c) hasValue",
            "d) hasEntry"
        ],
        "Answer": "Answer: d\nExplanation: Testing the map for a given entry can only be done using the hasEntry method."
    },
    {
        "id": 100,
        "Question": "Which Hamcrest core matcher checks if a number is equal to a number of some acceptable error?",
        "Options": [
            "a) closeTo",
            "b) equals",
            "c) errorBy",
            "d) similarTo"
        ],
        "Answer": "Answer: a\nExplanation: Test whether given numbers are close to a given value."
    },
    {
        "id": 101,
        "Question": "assertThat(1.03, is(closeTo(1.0, 0.03))) is ____________",
        "Options": [
            "a) True",
            "b) False",
            "c) Null",
            "d) Error"
        ],
        "Answer": "Answer: a\nExplanation: 1.0 + 0.03 is 1.03 which is the first value."
    },
    {
        "id": 102,
        "Question": "assertThat(0.03, is(closeTo(1.0, 0.03))) is ___________",
        "Options": [
            "a) True",
            "b) False",
            "c) Null",
            "d) Error"
        ],
        "Answer": "Answer: b\nExplanation: 1.0-0.03 = 0.97>0.03, hence is false."
    },
    {
        "id": 103,
        "Question": "The closeTo function is found under which package?",
        "Options": [
            "a) org.hamcrest.TypeSafeMatcher",
            "b) org.hamcrest.BaseMatcher",
            "c) org.hamcrest.number.IsCloseTo",
            "d) org.hamcrest.number.CloseTo"
        ],
        "Answer": "Answer: c\nExplanation: The closeTo function is actually a method of the isCloseTo class of Hamcrest."
    },
    {
        "id": 104,
        "Question": "The isCloseTo class extends which base class?",
        "Options": [
            "a) Matcher",
            "b) HamcrestCore",
            "c) TypeMatcher",
            "d) TypeSafeMatcher"
        ],
        "Answer": "Answer: d\nExplanation: The TypeSafeMatcher is a useful base class for Matchers that require non-null values of a specific type."
    },
    {
        "id": 105,
        "Question": "The ___________ method of the TypeSafeMatcher class is made final.",
        "Options": [
            "a) matches",
            "b) matchesSafely",
            "c) describeMismatchSafely",
            "d) No mehtod"
        ],
        "Answer": "Answer: a\nExplanation: The matches method made final to prevent accidental override."
    },
    {
        "id": 106,
        "Question": "The TypeSafeMatcher implements the __________ interface.",
        "Options": [
            "a) Self",
            "b) Describing",
            "c) EqulityCheck",
            "d) SelfDescribing"
        ],
        "Answer": "Answer: d\nExplanation: This interface dictates the ability of an object to describe what it does."
    },
    {
        "id": 107,
        "Question": "The ____________ matcher checks if a given key is in a map.",
        "Options": [
            "a) hasEntry",
            "b) hasValue",
            "c) hasKey",
            "d) isKey"
        ],
        "Answer": "Answer: c\nExplanation: The hasKey matcher checks if the particular key is present in the map."
    },
    {
        "id": 108,
        "Question": "To write custom matcher _____________ has to be implemented.",
        "Options": [
            "a) Matcher Interface",
            "b) Hamcrest Interface",
            "c) HamcrestMatching Interface",
            "d) Not possible to implement"
        ],
        "Answer": "Answer: b\nExplanation: The Matcher interface describes all methods needed to write custom matchers, which override the Matcher methods."
    },
    {
        "id": 109,
        "Question": "___________ is the base class for all Matcher implementations.",
        "Options": [
            "a) MatcherBase",
            "b) Base",
            "c) Matcher",
            "d) BaseMatcher"
        ],
        "Answer": "Answer: d\nExplanation: The BaseMatcher class is extended in every matcher subclass."
    },
    {
        "id": 110,
        "Question": "______________ are the first type of tests any application should have.",
        "Options": [
            "a) Functional Tests",
            "b) Unit Tests",
            "c) Integration Tests",
            "d) Stress Tests"
        ],
        "Answer": "Answer: b\nExplanation: The main goal of unit testing is to verify that your application works as expected and to catch bugs early."
    },
    {
        "id": 111,
        "Question": "Unit tests allow greater test _____________ than functional tests.",
        "Options": [
            "a) Coverage",
            "b) Redundancy",
            "c) Prowess",
            "d) Accuracy"
        ],
        "Answer": "Answer: a\nExplanation: Unit tests can easily simulate error conditions, which is extremely difficult to do with functional tests."
    },
    {
        "id": 112,
        "Question": "Functional tests are more _____________ compared to unit tests.",
        "Options": [
            "a) Fine grained",
            "b) Accurate",
            "c) Time consuming",
            "d) Coarse grained"
        ],
        "Answer": "Answer: d\nExplanation: Functional Tests need the full application (or a good part of it) to be ready before it can be tested."
    },
    {
        "id": 113,
        "Question": "Unit Tests can detect ________________",
        "Options": [
            "a) Regressions",
            "b) Quality Check",
            "c) Database Errors",
            "d) Enforced Error"
        ],
        "Answer": "Answer: a\nExplanation: A unit test tells that a specific method is failing for a specific reason."
    },
    {
        "id": 114,
        "Question": "Agile methodologists favour writing code in _____________ slices to produce a working use case.",
        "Options": [
            "a) Horizontal",
            "b) Small",
            "c) Diagonal",
            "d) Vertical"
        ],
        "Answer": "Answer: d\nExplanation: As opposed to writing code in horizontal slices to provide services layer by layer."
    },
    {
        "id": 115,
        "Question": "To retain a design across features, agile methodologies encourage ______________ to adapt the code base as needed.",
        "Options": [
            "a)  Changing",
            "b) Adapting",
            "c) Refactoring",
            "d) Duplicating"
        ],
        "Answer": "Answer: c\nExplanation: Unit tests tells when and where code breaks and gives the confidence to refactor."
    },
    {
        "id": 116,
        "Question": "The agile methodologies try to lower project risks by providing the ability to cope with ________",
        "Options": [
            "a) Change",
            "b) Refactoring",
            "c) Inefficiency",
            "d) Redundancy"
        ],
        "Answer": "Answer: a\nExplanation: Agile methodologies allow and embrace change by standardizing on quick iterations."
    },
    {
        "id": 117,
        "Question": "___________ is a principle of extreme programming (XP) that states that a functionality should not be added until deemed necessary.",
        "Options": [
            "a) KISS",
            "b) MoSCoW Method",
            "c) Overengineering",
            "d) YAGNI"
        ],
        "Answer": "Answer: d\nExplanation: The foundation on which YAGNI rests is a solid bed of unit tests. "
    },
    {
        "id": 118,
        "Question": "YAGNI stands for _____________",
        "Options": [
            "a) Your agile going now inside",
            "b) You aren’t gonna need it",
            "c) You are gonna need it",
            "d) You are given no information"
        ],
        "Answer": "Answer: b\nExplanation: YAGNI being dependent on supporting practices is part of the original definition of XP."
    },
    {
        "id": 119,
        "Question": "YAGNI is a principle behind the XP practice of _______________",
        "Options": [
            "a) KISS",
            "b) MoSCoW",
            "c) WIB",
            "d) DTSTTCPW"
        ],
        "Answer": "Answer: d\nExplanation: DTSTTCPW is the acronym for “do the simplest thing that could possibly work”. "
    },
    {
        "id": 120,
        "Question": "All ____________ has to be completed before integration testing can be done.",
        "Options": [
            "a) Stress testing",
            "b) Functional testing",
            "c) Unit testing",
            "d) Load testing"
        ],
        "Answer": "Answer: c\nExplanation: Once the tests for a class are up and running, the next step is to hook up the class with other methods and services."
    },
    {
        "id": 121,
        "Question": "KISS is an acronym for ________________",
        "Options": [
            "a) Keep it simple, stupid",
            "b) Keep it safe and sound",
            "c) Know it soundly and systematically",
            "d) Know information safely and securely"
        ],
        "Answer": "Answer: a\nExplanation: The principle most finds its uses in minimalist software development concepts."
    },
    {
        "id": 122,
        "Question": "In software engineering, _______________ is a principle of software development, which aims at reducing repetition of information of every kind, especially useful in multi-tier architectures.",
        "Options": [
            "a) KISS",
            "b) WET",
            "c) SSOT",
            "d) DRY"
        ],
        "Answer": "Answer: d\nExplanation: The DRY principle is stated as “Every piece of knowledge must have a single, unambiguous, authoritative representation within a system”."
    },
    {
        "id": 123,
        "Question": "DRY stands for ____________",
        "Options": [
            "a) Do right yourself",
            "b) Don’t repeat yourself",
            "c) Don’t ring the yarn",
            "d) Do rule over yourself"
        ],
        "Answer": "Answer: b\nExplanation: Application of the DRY principle successfully means a modification of any single element of a system does not need a change in other logically unrelated elements."
    },
    {
        "id": 124,
        "Question": "Violations of DRY are referred to as _________ solutions.",
        "Options": [
            "a) WET",
            "b) NOT DRY",
            "c) KISS",
            "d) ENGAGE"
        ],
        "Answer": "Answer: a\nExplanation: WET stands for “write everything twice”."
    },
    {
        "id": 125,
        "Question": "_______________ tests are designed early.",
        "Options": [
            "a) Preventive",
            "b) Reactive",
            "c) Associative",
            "d) Amorous"
        ],
        "Answer": "Answer: a\nExplanation: Preventive testing involves not only measuring, but also improving the quality of the software."
    },
    {
        "id": 126,
        "Question": "___________ tests are designed after the software has been produced.",
        "Options": [
            "a) Preventive",
            "b) Reactive",
            "c) Associative",
            "d) Amorous"
        ],
        "Answer": "Answer: b\nExplanation: Reactive testing is a software testing approach done after the production of the software."
    },
    {
        "id": 127,
        "Question": "What does an exit criteria do?",
        "Options": [
            "a) Define when to remove control",
            "b) Defines the level of a test",
            "c) Defines which test to not test",
            "d) Defines when a test level is completed"
        ],
        "Answer": "Answer: d\nExplanation: An exit criteria is used to denote that a particular test level is completed."
    },
    {
        "id": 128,
        "Question": "The likelihood of a/an __________ event determines the level of risk.",
        "Options": [
            "a) unlikely",
            "b) adverse",
            "c) ordinary",
            "d) expected"
        ],
        "Answer": "Answer: b\nExplanation:  The adverse event and the impact of the event determines the level of risk."
    },
    {
        "id": 129,
        "Question": "_______________ testing is used for testing systems for which the specification takes in the form of rules or cause-effect combinations.",
        "Options": [
            "a) Unit Testing",
            "b) Functional Testing",
            "c) Load Testing",
            "d) Decision Table Testing"
        ],
        "Answer": "Answer: d\nExplanation: In a decision table the inputs are listed down in the form of a column, while the outputs are in the same column but below the inputs."
    },
    {
        "id": 130,
        "Question": "A ______________ is the second phase of software testing in which a sampling of the intended audience tests the product.",
        "Options": [
            "a) Alpha",
            "b) Beta",
            "c) Gamma",
            "d) Delta"
        ],
        "Answer": "Answer: b\nExplanation: Beta testing is done by the customer to test the product."
    },
    {
        "id": 131,
        "Question": "Beta Testing is also known as _________ testing.",
        "Options": [
            "a) Field",
            "b) Unit",
            "c) Functional",
            "d) Box"
        ],
        "Answer": "Answer: a\nExplanation: Beta testing is done at the customer’s location leading to it being also called field testing."
    },
    {
        "id": 132,
        "Question": "______________ beta versions are released to a select group of individuals for undergoing user test.",
        "Options": [
            "a) Open",
            "b) Surround",
            "c) Closed",
            "d) Mandated"
        ],
        "Answer": "Answer: c\nExplanation: The select group is invitation only to test the version and give feedback."
    },
    {
        "id": 133,
        "Question": "______________ is a parallel development of functions and subsequent integration.",
        "Options": [
            "a) AOP",
            "b) OOP",
            "c) Agile Development",
            "d) RAD"
        ],
        "Answer": "Answer: d\nExplanation: Components under RAD model are developed in parallel as if they were mini projects."
    },
    {
        "id": 134,
        "Question": "____________ can be thought of as a vehicle to perform a test process.",
        "Options": [
            "a) Testing technique",
            "b) Testing tools",
            "c) MoSCow",
            "d) DRY"
        ],
        "Answer": "Answer: b\nExplanation: The testing tools can be thought of as a resource to the tester, but is in itself insufficient to conduct testing."
    },
    {
        "id": 135,
        "Question": "In software testing, a _____________ is a collection of software and test data configured to test a program unit by putting it under varying conditions and monitoring its behavior and output.",
        "Options": [
            "a) Test harness",
            "b) Test automation",
            "c) Test mechanics",
            "d) Test manuscripts"
        ],
        "Answer": "Answer: a\nExplanation: Test harnesses allow the automation of tests to be performed."
    },
    {
        "id": 136,
        "Question": "Test harness has two main parts, the test script repository and _______________",
        "Options": [
            "a) Test specification",
            "b) Test management controller",
            "c) Test controller",
            "d) Test execution engine"
        ],
        "Answer": "Answer: d\nExplanation: A test execution engine is a type of software used to test complete or partial systems."
    },
    {
        "id": 137,
        "Question": "The test execution engine does not carry any information about the ___________ product.",
        "Options": [
            "a) untested",
            "b) tested",
            "c) marketed",
            "d) semi-tested"
        ],
        "Answer": "Answer: a\nExplanation: Only the test specification and the test data has information about the tested product."
    },
    {
        "id": 138,
        "Question": "A __________ is an (often times virtual) environment used to verify the correctness soundness of a design or model, like that of a software product.",
        "Options": [
            "a) Test model",
            "b) Test criteria",
            "c) Test Flow",
            "d) Test bench"
        ],
        "Answer": "Answer: d\nExplanation: A test bench has an input, output, procedures to and procedures to check components."
    },
    {
        "id": 139,
        "Question": "___________ is a type of software testing which verifies that software, which was previously developed and tested, still performs correctly after it was changed or interfaced with other software.",
        "Options": [
            "a) Unit Testing",
            "b) Regression Testing",
            "c) Stress Testing",
            "d) Functional Testing"
        ],
        "Answer": "Answer: b\nExplanation: The purpose of regression testing is to ensure that changes have not introduced new faults."
    },
    {
        "id": 140,
        "Question": "The output of the requirement analysis and the requirement specification is used as the input for writing ____________",
        "Options": [
            "a) User Acceptance Test Cases",
            "b) User Rejection Test Cases",
            "c) Product Rejection Test Cases",
            "d) Product Acceptance Test Cases"
        ],
        "Answer": "Answer: a\nExplanation: During UAT, the software is tested by actual users of the product."
    },
    {
        "id": 141,
        "Question": "Testing the end to end functionality of the system as a whole is defined as _______________",
        "Options": [
            "a) Unit Testing",
            "b) Functional Testing",
            "c) Stress Testing",
            "d) Load Testing"
        ],
        "Answer": "Answer: b\nExplanation: Functional testing covers all possible scenarios including failure paths and boundary cases."
    },
    {
        "id": 142,
        "Question": "Independent testers are _____________ and identify different defects at the same time.",
        "Options": [
            "a) Isolated",
            "b) Biased",
            "c) Unbiased",
            "d) Modular"
        ],
        "Answer": "Answer: c\nExplanation: Independent tests are conducted by an independent body, be it a group or a person not associated with the development of the product."
    },
    {
        "id": 143,
        "Question": "In a reactive approach, the bulk of the test design work begins __________",
        "Options": [
            "a) Before any software is made",
            "b) After some modules are completed",
            "c) After every module, testing is done",
            "d) After the software has been produced"
        ],
        "Answer": "Answer: d\nExplanation: In the reactive approach, the product or software is first completed and then the test design work begins."
    },
    {
        "id": 144,
        "Question": "DSDM stands for _____________",
        "Options": [
            "a) Dynamic systems development method",
            "b) Dynamic solutions development method",
            "c) Database systems development method",
            "d) Database solutions development method"
        ],
        "Answer": "Answer: a\nExplanation: DSDM is an Agile methodology that stands for Dynamic systems development method."
    },
    {
        "id": 145,
        "Question": "DSDM fixes cost, quality and time at the outset and uses the ___________ prioritisation of scope.",
        "Options": [
            "a) KISS",
            "b) MoSCow",
            "c) PRINCE2",
            "d) PSP"
        ],
        "Answer": "Answer: b\nExplanation: DSDM uses MoSCow to divide into musts, shoulds, coulds and  won’t haves."
    },
    {
        "id": 146,
        "Question": "DSDM originally sought to provide some discipline to the ______________ method.",
        "Options": [
            "a) MSF",
            "b) Scrum",
            "c) RAD",
            "d) BDD"
        ],
        "Answer": "Answer: c\nExplanation: DSDM was originally made to provide some structure to Rapid Application Development."
    },
    {
        "id": 147,
        "Question": "DSDM is a/an _____________ approach.",
        "Options": [
            "a) Waterfall",
            "b) Spiral",
            "c) Incremental",
            "d) Iterative and Incremental"
        ],
        "Answer": "Answer: d\nExplanation: DSDM embraces principles of Agile Development leading to an iterative and incremental approach."
    },
    {
        "id": 148,
        "Question": "The one who is responsible to initialise the project by ensuring that essential requirements are found early on in an DSDM environment is ____________",
        "Options": [
            "a) Executive Sponsor",
            "b) Visionary",
            "c) Ambassador User",
            "d) Advisor User"
        ],
        "Answer": "Answer: b\nExplanation: The Visionary has the most accurate perception of the business objectives of the project."
    },
    {
        "id": 149,
        "Question": "___________ is responsible for gathering and recording the requirements, agreements, and decisions made in every workshop.",
        "Options": [
            "a) Executive Sponsor",
            "b) Visionary",
            "c) Scribe",
            "d) Project Manager"
        ],
        "Answer": "Answer: c\nExplanation: Scribe is a separate person responsible for the logging of the defects found."
    },
    {
        "id": 150,
        "Question": "LSD stands for ________________",
        "Options": [
            "a) Lean Software Development",
            "b) Live Software Development",
            "c) Less Software Data",
            "d) Least Software Dataloss"
        ],
        "Answer": "Answer: a\nExplanation: LSD stands for Lean Software Development which is a type of Agile development."
    },
    {
        "id": 151,
        "Question": "Lean philosophy regards everything not adding value to the customer as __________",
        "Options": [
            "a) Unnecessary",
            "b) Waste",
            "c) Useful",
            "d) Necessary"
        ],
        "Answer": "Answer: b\nExplanation: Waste includes partially work done and defects."
    },
    {
        "id": 152,
        "Question": "A value ____________ technique is used to identify waste.",
        "Options": [
            "a) Mapping",
            "b) Stream",
            "c) Stream Mapping",
            "d) Flow"
        ],
        "Answer": "Answer: c\nExplanation: Waste removal takes place iteratively until even processes and procedures which are seemingly essential are liquidated."
    },
    {
        "id": 153,
        "Question": "The ________________ is a management paradigm that specifies any manageable system as being limited in achieving more of its goals by a very small number of constraints.",
        "Options": [
            "a) RCM",
            "b) TPM",
            "c) QRM",
            "d) TOC"
        ],
        "Answer": "Answer: d\nExplanation: TOC or theory of constraints uses a focussing process to identify the constraint."
    },
    {
        "id": 154,
        "Question": "__________ in the code are signs of bad code designs and should be avoided.",
        "Options": [
            "a) Repetitions",
            "b) Modularity",
            "c) Functions",
            "d) Documentation"
        ],
        "Answer": "Answer: a\nExplanation: Repetition leads to redundancy which results in bad code designs."
    },
    {
        "id": 155,
        "Question": "Lean Development follows the principle of ______________",
        "Options": [
            "a) Decide as late as possible",
            "b) Deliver as late as possible",
            "c) Decide as early as possible",
            "d) Not building integrity"
        ],
        "Answer": "Answer: a\nExplanation: Lean Development uses the principle of Deciding as late as possible to as software development is always associated with some level of uncertainty."
    },
    {
        "id": 156,
        "Question": "________________ is a client-centric, architecture-centric, and pragmatic software process.",
        "Options": [
            "a) Loss Testing",
            "b) Feature Driven Development",
            "c) DSDM",
            "d) Scrum"
        ],
        "Answer": "Answer: b\nExplanation: Feature Driven Development or FDD is an iterative and incremental development process which is client and architecture centric."
    },
    {
        "id": 157,
        "Question": "_____________ consists of exploring and explaining the domain of the problem to be solved.",
        "Options": [
            "a) Feature Teams",
            "b) Inspections",
            "c) Domain Object Modelling",
            "d) Configuration Management"
        ],
        "Answer": "Answer: c\nExplanation: The resulting domain object model provides an overall framework which can be used to add features."
    },
    {
        "id": 158,
        "Question": "_______________ ensure there is always an up-to-date system that can be demonstrated to the client.",
        "Options": [
            "a) Domain Object Modelling",
            "b) Individual Class (Code) Ownership",
            "c) Visibility of progress and results",
            "d) Regular Builds"
        ],
        "Answer": "Answer: d\nExplanation: Regular builds helps highlighting integration errors of source code for the features early."
    },
    {
        "id": 159,
        "Question": "_____________ helps visualizing both the processes and the data of a method.",
        "Options": [
            "a) Configuration Management.",
            "b) Domain Object Modelling",
            "c) MetaModeling",
            "d) Inspections"
        ],
        "Answer": "Answer: c\nExplanation: The advantage of metamodeling is that it is clear, compact, and consistent with UML standards."
    },
    {
        "id": 160,
        "Question": " ___________ defines “a flexible, holistic product development strategy where a development team works as a unit to reach a common goal”.",
        "Options": [
            "a) Scrum",
            "b) FDD",
            "c) DevOps",
            "d) MDD"
        ],
        "Answer": "Answer: a\nExplanation: Scrum is an iterative and incremental development framework for managing product development."
    },
    {
        "id": 161,
        "Question": "A key principle of Scrum is ______________",
        "Options": [
            "a) Strict requirements",
            "b) Requirements volatility",
            "c) Fixed scale development",
            "d) Cross-functional development"
        ],
        "Answer": "Answer: b\nExplanation: The customers can change their minds about what they want and need and Scrum recognizes this."
    },
    {
        "id": 162,
        "Question": "The _______________ represents the product’s stakeholders and the voice of the customer",
        "Options": [
            "a) Development Team",
            "b) Scrum Master",
            "c) Product Owner",
            "d) Servant-leader"
        ],
        "Answer": "Answer: c\nExplanation: The Product Owner is accountable for ensuring that the team delivers value to the business."
    },
    {
        "id": 163,
        "Question": "A _____________ is the basic unit of development in Scrum.",
        "Options": [
            "a) Class",
            "b) Manifesto",
            "c) Slice",
            "d) Sprint"
        ],
        "Answer": "Answer: d\nExplanation: In Scrum, each iteration is also known as a Sprint, which is the basic unit of development."
    },
    {
        "id": 164,
        "Question": "The Sprint is a/an ___________ effort.",
        "Options": [
            "a) Timeboxed",
            "b) Closed",
            "c) Sandboxed",
            "d) Open"
        ],
        "Answer": "Answer: a\nExplanation: The Sprint is restricted to a specific duration."
    },
    {
        "id": 165,
        "Question": "Each day during a Sprint, the team holds a ______________ with specific guidelines.",
        "Options": [
            "a) Impediment",
            "b) Daily Scrum",
            "c) Backlog refinement",
            "d) Scrum of Scrums"
        ],
        "Answer": "Answer: b\nExplanation: A Daily Scrum, also known as a stand up, is held everyday during a sprint."
    },
    {
        "id": 166,
        "Question": "At the _____________ the team reflects on the past Sprint.",
        "Options": [
            "a) Sprint Review",
            "b) Daily Scrum",
            "c) Sprint Retrospective",
            "d) Sprint Reflection"
        ],
        "Answer": "Answer: c\nExplanation: At the Sprint Retrospective, the team also Identifies and agrees on continuous process improvement actions."
    },
    {
        "id": 167,
        "Question": "The ______________ comprises an ordered list of requirements that a Scrum Team maintains for a product.",
        "Options": [
            "a) Sprint Review",
            "b) Sprint Backlog",
            "c) Product Increment",
            "d) Product backlog"
        ],
        "Answer": "Answer: d\nExplanation: The product backlog consists of features, bug fixes, non-functional requirements and whatever else must be done to successfully deliver a viable product."
    },
    {
        "id": 168,
        "Question": "The _____________ is the list of work the Development Team must address during the next Sprint.",
        "Options": [
            "a) Sprint Review",
            "b) Sprint Backlog",
            "c) Product Increment",
            "d) Product backlog"
        ],
        "Answer": "Answer: b\nExplanation: The list is derived by the Scrum Team progressively selecting Product Backlog Items in priority order."
    },
    {
        "id": 169,
        "Question": "The _____________ is the sum of all the Product Backlog Items completed during a Sprint.",
        "Options": [
            "a) Sprint burn-down char",
            "b) Release burn-up chart",
            "c) Potentially shippable increment",
            "d) Scrumban"
        ],
        "Answer": "Answer: c\nExplanation: Potentially shippable increment, or PSI is integrated with the work of all previous Sprints as well as the current Sprint."
    },
    {
        "id": 170,
        "Question": "______________ is an adaptable process framework, intended to be tailored by the development organizations that will select the elements of the process that are appropriate for their needs.",
        "Options": [
            "a) RUP",
            "b) AOP",
            "c) FDD",
            "d) XP"
        ],
        "Answer": "Answer: a\nExplanation: Rup, which stands for Rational Unified Process, is the adaptable process framework."
    },
    {
        "id": 171,
        "Question": "UML stands for _______________",
        "Options": [
            "a) Unknown Markup Language",
            "b) Unified Modelling Language",
            "c) Universal Markup Language",
            "d) Universal Modelling Language"
        ],
        "Answer": "Answer: b\nExplanation: UML is one tool that can be used to make the task of model visualization more feasible."
    },
    {
        "id": 172,
        "Question": "______________ describes a simple and easy to understand approach to developing business application software using agile techniques and concepts while still remaining true to the RUP.",
        "Options": [
            "a) RUPP",
            "b) Scrum",
            "c) AUP",
            "d) EUP"
        ],
        "Answer": "Answer: c\nExplanation: AUP, which stands for Agile Unified Process, applies agile techniques including test-driven development (TDD) and agile modelling (AM)."
    },
    {
        "id": 173,
        "Question": "__________________ is a methodology for modelling and documenting software systems based on best practices.",
        "Options": [
            "a) TDD",
            "b) FDD",
            "c) Scrum",
            "d) AM"
        ],
        "Answer": "Answer: d\nExplanation: Agile modelling is a collection of values and principles that can be applied on an (agile) software development project."
    },
    {
        "id": 174,
        "Question": "The discipline of AUP which deals with managing access to project artefacts is called ______________",
        "Options": [
            "a) Model",
            "b) Deployment",
            "c) Project Management",
            "d) Configuration Management"
        ],
        "Answer": "Answer: d\nExplanation: Configuration management includes not only tracking artefact versions over time but also controlling and managing changes to them."
    },
    {
        "id": 175,
        "Question": "Random testing often known as __________ testing",
        "Options": [
            "a) Monkey",
            "b) Amorous",
            "c) Sporadic",
            "d) Unknown"
        ],
        "Answer": "Answer: a\nExplanation: The source of the name monkey testing comes from the infinite monkey theorem."
    },
    {
        "id": 176,
        "Question": "Monkey Testing is also included in Android Studio as part of the standard testing tools for ______________",
        "Options": [
            "a) Unit Testing",
            "b) Stress Testing",
            "c) Functional Testing",
            "d) Integration Testing"
        ],
        "Answer": "Answer: b\nExplanation: Monkey testing is used to implement stress testing on the Android Studio."
    },
    {
        "id": 177,
        "Question": "______________ have no knowledge about the application or system in monkey testing.",
        "Options": [
            "a) Cloned Objects",
            "b) Smart Monkey tests",
            "c) Dumb Monkey tests",
            "d) Fuzz tests"
        ],
        "Answer": "Answer: c\nExplanation: Dumb monkey tests don’t know if their input or behaviour is valid or invalid."
    },
    {
        "id": 178,
        "Question": "Monkey testing is more about random actions while __________ testing is more about random data input.",
        "Options": [
            "a) Fuzz",
            "b) Functional",
            "c) Ad-hoc",
            "d) Random"
        ],
        "Answer": "Answer: a\nExplanation: While monkey testing uses randomized tests, fuzz uses randomized test data inputs."
    },
    {
        "id": 179,
        "Question": "Monkey testing is also different from _____________ testing in that ad-hoc testing is performed without planning and documentation.",
        "Options": [
            "a) Fuzz",
            "b) Functional",
            "c) Ad-hoc",
            "d) Random"
        ],
        "Answer": "Answer: c\nExplanation: The objective of ad-hoc testing is to divide the system randomly into subparts and check their functionality."
    },
    {
        "id": 180,
        "Question": "___________ is a technique for gathering information about the possible set of values calculated at various points in a computer program.",
        "Options": [
            "a) Data flow analysis",
            "b) Equivalence partitioning",
            "c) Inspections",
            "d) Decision testing"
        ],
        "Answer": "Answer: a\nExplanation: Data flow analysis uses the process of collecting information about the way the variables are used, defined in the program."
    },
    {
        "id": 181,
        "Question": "________________ is a technique used to identify the requirements of a system (usually associated with software/process design) and the information used to both define both processes used and classes (a collection of actors and processes).",
        "Options": [
            "a) Data flow analysis",
            "b) Use Case analysis",
            "c) Exploratory testing",
            "d) Decision testing"
        ],
        "Answer": "Answer: b\nExplanation: The use case analysis is the foundation upon which the system will be built."
    },
    {
        "id": 182,
        "Question": "A Use-case realization describes how a particular __________ is realized within the design model.",
        "Options": [
            "a) Class",
            "b) Object",
            "c) Use case",
            "d) Function"
        ],
        "Answer": "Answer: c\nExplanation: A use case is realized within the design in terms of collaborating objects."
    },
    {
        "id": 183,
        "Question": "________________ is an approach to software testing that is concisely described as simultaneous learning, test design and test execution.",
        "Options": [
            "a) Data flow analysis",
            "b) Decision testing",
            "c) Exploratory testing",
            "d) Use Case analysis"
        ],
        "Answer": "Answer: c\nExplanation: Exploratory testing is defined as a style of software testing that emphasizes the personal freedom and responsibility of the individual tester."
    },
    {
        "id": 184,
        "Question": "Exploratory testing is often thought of as a ______________ technique.",
        "Options": [
            "a) White box testing",
            "b) Functional testing",
            "c) Non-functional testing",
            "d) Black box testing"
        ],
        "Answer": "Answer: d\nExplanation: Exploratory testing does not require the internals of the product to be known and hence, is thought of as a type of black box testing."
    },
    {
        "id": 185,
        "Question": "The main advantage of exploratory testing is that less _______________ is needed.",
        "Options": [
            "a) Investment",
            "b) Preparation",
            "c) Knowledge",
            "d) Accuracy"
        ],
        "Answer": "Answer: b\nExplanation: Important bugs are found quickly in exploratory testing."
    },
    {
        "id": 186,
        "Question": "A major benefit of exploratory testing is that testers can use ______________ based on the results of previous results.",
        "Options": [
            "a) Deductive Reasoning",
            "b) Object Creation",
            "c) Garbage Collection",
            "d) Modularity"
        ],
        "Answer": "Answer: a\nExplanation: Deductive reasoning helps testers to guide their future testing on the fly."
    },
    {
        "id": 187,
        "Question": "Exploratory testing is particularly suitable if _______________ and specifications are incomplete.",
        "Options": [
            "a) Investment",
            "b) Time",
            "c) Requirements",
            "d) Deadlines"
        ],
        "Answer": "Answer: c\nExplanation: Exploratory testing can be used to verify that previous testing has found the most important defects."
    },
    {
        "id": 188,
        "Question": "____________ is a software testing technique that divides the input data of a software unit into partitions of equivalent data from which test cases can be derived.",
        "Options": [
            "a) Data flow analysis",
            "b) Equivalence partitioning",
            "c) Inspections",
            "d) Decision testing"
        ],
        "Answer": "Answer: b\nExplanation: In principle of Equivalence partitioning, test cases are designed to cover each partition at least once."
    },
    {
        "id": 189,
        "Question": "Equivalence Partitioning, Use Case Testing and Decision Testing are ____________ techniques.",
        "Options": [
            "a) Static",
            "b) Dynamic",
            "c) Outdated",
            "d) Infeasible"
        ],
        "Answer": "Answer: b\nExplanation: All of these test the dynamic behaviour of the code. "
    },
    {
        "id": 190,
        "Question": "The review process for a particular review begins with a _____________ by the author to the moderator in formal review.",
        "Options": [
            "a) Request For Review",
            "b) Requirement Analysis",
            "c) Notice For Review",
            "d) Goal Design"
        ],
        "Answer": "Answer: a\nExplanation: Planning forms the first step of a formal review which begins with a request for review."
    },
    {
        "id": 191,
        "Question": "Configuration management procedures be implemented during ____________",
        "Options": [
            "a) Test Execution",
            "b) Test Planning",
            "c) Test Design",
            "d) Test Success"
        ],
        "Answer": "Answer: b\nExplanation: Configuration management procedures allow the testers to manage their testware and hence, should be implemented during test planning."
    },
    {
        "id": 192,
        "Question": "______________ is a process which is intended to reveal flaws in the security mechanisms of an information system that protect data and maintain functionality as intended.",
        "Options": [
            "a) Integrity Testing",
            "b) Unit Testing",
            "c) Security Testing",
            "d) Stress testing"
        ],
        "Answer": "Answer: c\nExplanation: Typical security requirements may include specific elements of confidentiality, integrity, availability, authentication, authorization and non-repudiation."
    },
    {
        "id": 193,
        "Question": "_______________ of information refers to protecting information from being modified by unauthorized parties.",
        "Options": [
            "a) Confidentiality",
            "b) Authentication",
            "c) Authorization",
            "d) Integrity"
        ],
        "Answer": "Answer: d\nExplanation: Integrity of information is intended to allow the receiver to determine that the information provided by a system is correct."
    },
    {
        "id": 194,
        "Question": "________________ means to ensure that a transferred message has been sent and received by the intended parties who are claiming to have sent and received the message.",
        "Options": [
            "a) Confidentiality",
            "b) Authentication",
            "c) Non-repudiation",
            "d) Integrity"
        ],
        "Answer": "Answer: c\nExplanation: Non-repudiation is used to guarantee that the sender of a message cannot later deny having sent the message."
    },
    {
        "id": 195,
        "Question": "_____________looks for known security issues by using automated tools to match conditions with known vulnerabilities.",
        "Options": [
            "a) Discovery",
            "b) Vulnerability Scan",
            "c) Security Assessment",
            "d) Penetration Test"
        ],
        "Answer": "Answer: b\nExplanation: Vulnerability scanning is supplemented with credential based scanning that  remove some common false positives."
    },
    {
        "id": 196,
        "Question": "__________ uses discovery and vulnerability scanning to identify security vulnerabilities",
        "Options": [
            "a) Discovery",
            "b) Vulnerability Scan",
            "c) Vulnerability Assessment",
            "d) Penetration Test"
        ],
        "Answer": "Answer: c\nExplanation: Vulnerability Assessment places the findings into the context of the environment under test."
    },
    {
        "id": 197,
        "Question": "_________ is driven by an Audit or a Risk function to look at a specific control or compliance issue.",
        "Options": [
            "a) Security Audit",
            "b) Vulnerability Scan",
            "c) Vulnerability Assessment",
            "d) Penetration Test"
        ],
        "Answer": "Answer: a\nExplanation: Characterized by a narrow scope, Security audit is used to diagnose a compliance issue or specific control."
    },
    {
        "id": 198,
        "Question": "________________ simulates an attack by a malicious party.",
        "Options": [
            "a) Security Audit",
            "b) Vulnerability Scan",
            "c) Vulnerability Assessment",
            "d) Penetration Test"
        ],
        "Answer": "Answer: d\nExplanation: Penetration Test approach looks at the depth of attack in comparison to the Security Assessment approach."
    },
    {
        "id": 199,
        "Question": "______________ builds upon Vulnerability Assessment by adding manual verification to confirm exposure.",
        "Options": [
            "a) Security Audit",
            "b) Security Assessment",
            "c) Vulnerability Assessment",
            "d) Penetration Test"
        ],
        "Answer": "Answer: b\nExplanation: Security Assessment does not include the exploitation of vulnerabilities to gain further access."
    },
    {
        "id": 200,
        "Question": "White box testing is also known as _____________",
        "Options": [
            "a) Structure-based testing",
            "b) Black box testing",
            "c) Free testing",
            "d) Closed testing"
        ],
        "Answer": "Answer: a\nExplanation: Structure-based testing techniques use the internal structure of the software to derive test cases."
    },
    {
        "id": 201,
        "Question": "White box testing is ______________",
        "Options": [
            "a) Static",
            "b) Dynamic",
            "c) Infeasible",
            "d) Time-consuming"
        ],
        "Answer": "Answer: b\nExplanation: White box testing tests the dynamic components of the code including their internal structure."
    },
    {
        "id": 202,
        "Question": "A _____________ test is when an invalid input is put and errors are received.",
        "Options": [
            "a) Positive",
            "b) Regression",
            "c) Negative",
            "d) Neutral"
        ],
        "Answer": "Answer: c\nExplanation: Negative testing tests that invalid inputs do not get passed by the code."
    },
    {
        "id": 203,
        "Question": "A ____________ test is when a valid input is put and some action to be completed in accordance with the specification is expected.",
        "Options": [
            "a) Positive",
            "b) Regression",
            "c) Negative",
            "d) Neutral"
        ],
        "Answer": "Answer: a\nExplanation: Positive testing checks that the correct output is produced for correct inputs."
    },
    {
        "id": 204,
        "Question": "Which tools is involved in the automation of regression test?",
        "Options": [
            "a) Data tester",
            "b) Boundary tester",
            "c) Capture/Playback",
            "d) Output comparator."
        ],
        "Answer": "Answer: d\nExplanation: The Output comparator is a useful feature for seeing exactly what the error is in a test failure."
    },
    {
        "id": 205,
        "Question": "An input field takes the year as input between 1800 and 2016, the boundary values for testing this field are ___________",
        "Options": [
            "a) 1899,1900,2004,2005",
            "b) 1799,1900,2004,2005",
            "c) 1799,1800,2016,2017",
            "d) 1600,1700,1800,1900"
        ],
        "Answer": "Answer: c\nExplanation: Only option (c) has the 4 boundary values for the given input range of 1800 to 2016."
    },
    {
        "id": 206,
        "Question": "Static analysis cannot ____________",
        "Options": [
            "a) Enforce coding standards",
            "b) Help in code understanding",
            "c) Identify anomalies or defects in the code",
            "d) Detect memory leaks"
        ],
        "Answer": "Answer: d\nExplanation: Memory leaks occur dynamically and hence, static analysis cannot identify them."
    },
    {
        "id": 207,
        "Question": "_______________ ensures the original fault has been removed.",
        "Options": [
            "a) Regression testing",
            "b) Re-testing",
            "c) Negative testing",
            "d) Positive testing"
        ],
        "Answer": "Answer: b\nExplanation: Regression testing looks for unexpected side effects while retesting ensures the original errors are removed."
    },
    {
        "id": 208,
        "Question": "_____________ test cases are when random test cases are performed and equivalence partitioning is applied to those test cases.",
        "Options": [
            "a) Random",
            "b) Static",
            "c) Semi-random",
            "d) Equivalent-random"
        ],
        "Answer": "Answer: c\nExplanation: It removes redundant test cases, thus giving semi-random test cases."
    },
    {
        "id": 209,
        "Question": "______________ is normally used to evaluate a product to determine its suitability for intended use and to identify discrepancies.",
        "Options": [
            "a) Supervisor Review",
            "b) Technical Review",
            "c) Decision Review",
            "d) Design Review"
        ],
        "Answer": "Answer: b\nExplanation: Technical Review is often performed as a peer review without management participation."
    },
    {
        "id": 210,
        "Question": "Decision table technique is sometimes also referred to as a ________ table.",
        "Options": [
            "a) Cause-effect",
            "b) Redundant",
            "c) Extreme",
            "d) Isolated"
        ],
        "Answer": "Answer: a\nExplanation: An associated logic diagramming technique known as ‘cause-effect graphing’ is sometimes used to help derive the decision table."
    },
    {
        "id": 211,
        "Question": "___________ is a model that illustrates how testing activities integrate with software development phases.",
        "Options": [
            "a) Waterfall Model",
            "b) V-Model",
            "c) Spiral Model",
            "d) Iterative Model"
        ],
        "Answer": "Answer: b\nExplanation: The V-model represents a development process that may be considered to be an extension of the waterfall model."
    },
    {
        "id": 212,
        "Question": "_____________ is triggered by modifications, migration or retirement of existing software.",
        "Options": [
            "a) Regression Testing",
            "b) Unit Testing",
            "c) Maintenance testing",
            "d) Integration Testing"
        ],
        "Answer": "Answer: c\nExplanation: Maintenance Testing is done on the already deployed software."
    },
    {
        "id": 213,
        "Question": "RTM stands for ____________",
        "Options": [
            "a) Repeated Trade Matrix",
            "b) Redundant Trace Module",
            "c) Robust Test Mechanism",
            "d) Requirement traceability matrix"
        ],
        "Answer": "Answer: d\nExplanation: The Requirements Traceability Matrix or RTM is a document that links requirements throughout the validation process."
    },
    {
        "id": 214,
        "Question": "The purpose of the _____________ is to ensure that all requirements defined for a system are tested in the test protocols.",
        "Options": [
            "a) RTM",
            "b) FDD",
            "c) KISS",
            "d) TM"
        ],
        "Answer": "Answer: a\nExplanation: The RTM links requirements and hence, ensures all the requirements are tested."
    },
    {
        "id": 215,
        "Question": "RTM is prepared ___________",
        "Options": [
            "a) After test case designing",
            "b) Before test case designing",
            "c) During test case designing",
            "d) Not prepared"
        ],
        "Answer": "Answer: b\nExplanation: Requirements should already be traceable from Review activities ande RTM is prepared before test case designing."
    },
    {
        "id": 216,
        "Question": "In ___________ each component at lower hierarchy is tested individually and then the components that rely upon these components are tested.",
        "Options": [
            "a) Top down testing",
            "b) Unit testing",
            "c) Bottom up",
            "d) Load testing"
        ],
        "Answer": "Answer: c\nExplanation: The modules at lower hierarchy is tested and then the testing goes up in bottom up testing."
    },
    {
        "id": 217,
        "Question": "Bottom up testing starts with __________",
        "Options": [
            "a) Root",
            "b) Second level roots",
            "c) Inner nodes",
            "d) Terminal nodes"
        ],
        "Answer": "Answer: d\nExplanation: Since bottom up testing tests from lower hierarchy, terminal nodes are tested first."
    },
    {
        "id": 218,
        "Question": "DRE stands for ____________",
        "Options": [
            "a) Defect Removal Efficiency",
            "b) Detect Redundant Errors",
            "c) Defectively Run Enumerations",
            "d) Detect Random Error"
        ],
        "Answer": "Answer: a\nExplanation: It is a powerful metric used to measure test effectiveness."
    },
    {
        "id": 219,
        "Question": "DRE=Number of bugs while testing /number of bugs while testing + number of bugs _____________",
        "Options": [
            "a) Found redundant",
            "b) Not found",
            "c) Found by user",
            "d) Found by tester"
        ],
        "Answer": "Answer: c\nExplanation: DRE takes into consideration the bugs found by the user too."
    },
    {
        "id": 220,
        "Question": "Which is likely to benefit most from the use of test tools providing test capture and replay facilities?",
        "Options": [
            "a) Regression testing",
            "b) Integration testing",
            "c) System testing",
            "d) User acceptance testing"
        ],
        "Answer": "Answer: a\nExplanation: Regression testing benefits heavily from the usage of tools providing test capture and replay features."
    },
    {
        "id": 221,
        "Question": "While testing a product designed to mark exams, a tester determines that all scores between 90 to 100 yields a grade of A, but scores below 90 will not. This analysis is known as:",
        "Options": [
            "a) Boundary Value Analysis",
            "b) Equivalence Partitioning",
            "c) Positive Analysis",
            "d) Negative Analysis"
        ],
        "Answer": "Answer: b\nExplanation: The range is broken down and each range is tested. Hence, it is equivalence partitioning."
    },
    {
        "id": 222,
        "Question": "Which Life Cycle model has lesser, more or different levels of development and testing, all depending on the project and the software product?",
        "Options": [
            "a) Waterfall",
            "b) Spiral",
            "c) V shaped",
            "d) Iterative"
        ],
        "Answer": "Answer: c\nExplanation: The v shaped model may have component integration testing after component testing."
    },
    {
        "id": 223,
        "Question": "______________ is a partial measure of test thoroughness.",
        "Options": [
            "a) Boundary value testing",
            "b) Equivalence Partitioning",
            "c) DRE",
            "d) Coverage measurement"
        ],
        "Answer": "Answer: d\nExplanation: Coverage measurement checks the quality of test thoroughness."
    },
    {
        "id": 224,
        "Question": "___________ is an error condition hiding another error condition.",
        "Options": [
            "a) Masking",
            "b) Fault Masking",
            "c) Coverage measurement",
            "d) Error Management"
        ],
        "Answer": "Answer: b\nExplanation: Fault masking is a redundancy technique that completely masks faults."
    },
    {
        "id": 225,
        "Question": "_____________ is based on the project plan, but with greater amounts of detail.",
        "Options": [
            "a) Phase Test Plan",
            "b) Review Plan",
            "c) Review Document",
            "d) Phase Design"
        ],
        "Answer": "Answer: c\nExplanation:  Commercial-off-the-shelf (COTS) software and services are built and delivered usually from a third party vendor."
    },
    {
        "id": 226,
        "Question": "STLC stands for ______________",
        "Options": [
            "a) Software Test Locale Code",
            "b) Software Transfer Limited Code",
            "c) Software Total Licence Control",
            "d) Software Test Life Cycle"
        ],
        "Answer": "Answer: a\nExplanation: The phase test plan is based on the project plan which has a lot more detail than normal."
    },
    {
        "id": 227,
        "Question": "During ___________ testing, code is not executed.",
        "Options": [
            "a) Unit",
            "b) Dynamic",
            "c) Static",
            "d) Equivalence"
        ],
        "Answer": "Answer: d\nExplanation: The STLC or software test life cycle is the total life cycle of the testing phase of development."
    },
    {
        "id": 228,
        "Question": "Static testing is done using the software __________",
        "Options": [
            "a) Documentation",
            "b) Manual",
            "c) Design",
            "d) Comment"
        ],
        "Answer": "Answer: c\nExplanation: Static testing does not require the code to be executed to test its components."
    },
    {
        "id": 229,
        "Question": "To perform ____________ the code needs to be in executive form.",
        "Options": [
            "a) Dynamic Testing",
            "b) Static Testing",
            "c) Integration Testing",
            "d) Documentation Testing"
        ],
        "Answer": "Answer: a\nExplanation: Dynamic testing tests the dynamic parts of the code and needs the code in executive form."
    },
    {
        "id": 230,
        "Question": "______________ is a process of evaluating software at development phase.",
        "Options": [
            "a) Validation",
            "b) Verification",
            "c) Design Check",
            "d) Design Evaluation"
        ],
        "Answer": "Answer: b\nExplanation: Verification is a way of checking “are we building the product right?”. "
    },
    {
        "id": 231,
        "Question": "____________ is the process of checking whether the software meets the customer requirements as well as evaluating it after the development process.",
        "Options": [
            "a) Validation",
            "b) Verification",
            "c) Design Check",
            "d) Design Evaluation"
        ],
        "Answer": "Answer: a\nExplanation: Validation is a way of checking “are we building the right product?”."
    },
    {
        "id": 232,
        "Question": "_________________ is finding defects when the system under goes testing as a whole.",
        "Options": [
            "a) User Acceptance Testing",
            "b) Unit Testing",
            "c) Loss Testing",
            "d) System Testing"
        ],
        "Answer": "Answer: d\nExplanation: In System testing, the entire system is subjected to tests to find faults."
    },
    {
        "id": 233,
        "Question": "System testing is also known as ____________",
        "Options": [
            "a) User Acceptance Testing",
            "b) Regression Testing",
            "c) End to End Testing",
            "d) Lossless Testing"
        ],
        "Answer": "Answer: c\nExplanation: In end to end or system testing, the application undergoes testing from beginning till the end."
    },
    {
        "id": 234,
        "Question": "UAT stands for ____________",
        "Options": [
            "a) Universal Access Testing",
            "b) Unified Anchor Testing",
            "c) User Access Testing",
            "d) User Acceptance Testing"
        ],
        "Answer": "Answer: d\nExplanation: UAT is a specified test done for the users and hence, stands for user acceptance testing."
    },
    {
        "id": 235,
        "Question": "__________________ involves running a product through a series of specific  tests  which determine whether the product meets the needs of its users.",
        "Options": [
            "a) User Acceptance Testing",
            "b) Unit Testing",
            "c) Loss Testing",
            "d) System Testing"
        ],
        "Answer": "Answer: a\nExplanation: UAT or User Acceptance Testing is done with the users in mind and hence, determine whether the product meets the needs of its users."
    },
    {
        "id": 236,
        "Question": "_________________ is prepared before the actual testing starts.",
        "Options": [
            "a) Test Scenarios",
            "b) Test Cases",
            "c) Test Script",
            "d) Latent defect"
        ],
        "Answer": "Answer: a\nExplanation: Test Scenarios includes plans for testing product, number of team members and environmental condition."
    },
    {
        "id": 237,
        "Question": "_______________ is a document that contains the steps that has to be executed.",
        "Options": [
            "a) Test Scenarios",
            "b) Test Cases",
            "c) Test Script",
            "d) Latent defect"
        ],
        "Answer": "Answer: b\nExplanation: Test cases are used to test the modularity in the code."
    },
    {
        "id": 238,
        "Question": "_____________ is written in a programming language and is a short program used to test part of functionality of the software system.",
        "Options": [
            "a) Test Scenarios",
            "b) Test Cases",
            "c) Test Script",
            "d) Latent defect"
        ],
        "Answer": "Answer: c\nExplanation: Test script is a written set of steps that should be performed manually."
    },
    {
        "id": 239,
        "Question": "_________________ is an existing defect in the system which does not cause any failure.",
        "Options": [
            "a) Latent defect",
            "b) Redundancy",
            "c) Failure",
            "d) Exit Cause"
        ],
        "Answer": "Answer: a\nExplanation: Latent Defect does not cause any failure because the exact set of conditions has never been met."
    },
    {
        "id": 240,
        "Question": "________________ are set of documents, tools and other components that has to be developed and maintained in support of testing.",
        "Options": [
            "a) Test Functions",
            "b) Test Deliverables",
            "c) Test Solutions",
            "d) Test Mechanisms"
        ],
        "Answer": "Answer: b\nExplanation: Test Deliverables are artefacts which are given to the stakeholders of software project during the sdlc."
    },
    {
        "id": 241,
        "Question": "______________ is a technique to identify whether a set of test data is useful by intentionally introducing various code changes (bugs).",
        "Options": [
            "a) Unit Testing",
            "b) Stress Testing",
            "c) Load Testing",
            "d) Mutation Testing"
        ],
        "Answer": "Answer: d\nExplanation: Mutation testing involves retesting with original test data to determine if the bugs are detected."
    },
    {
        "id": 242,
        "Question": "Mutation testing is a form of ______________",
        "Options": [
            "a) Black Box Testing",
            "b) Redundancy",
            "c) White Box Testing",
            "d) Loss Testing"
        ],
        "Answer": "Answer: c\nExplanation: In mutation testing, the internals of the code need to be known."
    },
    {
        "id": 243,
        "Question": "Mutation score = _____________ / total number of mutants",
        "Options": [
            "a) Number of mutants killed",
            "b) Number of mutants not killed",
            "c) Total number of mutants",
            "d) Total number of live mutants"
        ],
        "Answer": "Answer: a\nExplanation: The number of mutants killed or the number of dead mutants is used in calculating the mutation score."
    },
    {
        "id": 244,
        "Question": "For a mutant to be killed, the test must __________ the mutated statement.",
        "Options": [
            "a) Overlook",
            "b) Ignore",
            "c) Limit",
            "d) Reach"
        ],
        "Answer": "Answer: d\nExplanation: Mutants which cannot be reached cannot be affected by the test."
    },
    {
        "id": 245,
        "Question": "Input data from the test must __________ the program state by causing different program states for the mutant and the original program.",
        "Options": [
            "a) Reach",
            "b) Infect",
            "c) Kill",
            "d) Destroy"
        ],
        "Answer": "Answer: b\nExplanation: Infecting is the same as executing the mutant code by such test data that different states are produced."
    },
    {
        "id": 246,
        "Question": "The incorrect program state must __________ to the program’s output and be checked by the test.",
        "Options": [
            "a) Reach’",
            "b) Infect",
            "c) Propagate",
            "d) Limit"
        ],
        "Answer": "Answer: c\nExplanation: The test data for the mutant must be noticed in the output."
    },
    {
        "id": 247,
        "Question": "Mutation Testing follows the ____________ model.",
        "Options": [
            "a) RIP",
            "b) KISS",
            "c) RUN",
            "d) GOD"
        ],
        "Answer": "Answer: a\nExplanation: RIP stands for reach, infect and propagate."
    },
    {
        "id": 248,
        "Question": "The ____________ hypothesis states that most software faults are due to small syntactic errors.",
        "Options": [
            "a) Coupling effect",
            "b) Competent programmer",
            "c)  Higher-order mutation",
            "d) Equivalent mutation"
        ],
        "Answer": "Answer: b\nExplanation: The competent programmer hypothesis is one of the basis of mutation testing."
    },
    {
        "id": 249,
        "Question": "The ______________ asserts that simple faults can cascade to form other emergent faults.",
        "Options": [
            "a) Coupling effect",
            "b) Competent programmer",
            "c) Higher-order mutation",
            "d) Equivalent mutation"
        ],
        "Answer": "Answer: a\nExplanation: Coupling effect is further supported by subtle and important faults being revealed by higher-order mutants."
    },
    {
        "id": 250,
        "Question": "______________ requires that only the first and second conditions of the RIP model are satisfied.",
        "Options": [
            "a) Weak mutation testing",
            "b) Strong mutation testing",
            "c) Weak test data",
            "d) Strong test data"
        ],
        "Answer": "Answer: a\nExplanation: Weak mutation testing is satisfied if only the reach and inspect stages of the RIP model is met."
    },
    {
        "id": 251,
        "Question": "Weak mutation is closely related to ____________ methods.",
        "Options": [
            "a) Code Conduct",
            "b) Code Coverage",
            "c) Mutation Coverage",
            "d) Mutation Redundancy"
        ],
        "Answer": "Answer: b\nExplanation: Weak mutation checks for only two steps, searching for faults similar to those found by Code coverage methods."
    },
    {
        "id": 252,
        "Question": "________________ is a measure used to describe the degree to which the source code of a program is executed when a particular test suite runs.",
        "Options": [
            "a) Code Conduct",
            "b) Code Coverage",
            "c) Mutation Coverage",
            "d) Mutation Redundancy"
        ],
        "Answer": "Answer: b\nExplanation: Code coverage checks the percentage of the source code that is executed during testing by test data."
    },
    {
        "id": 253,
        "Question": "_______________ is usually defined as a rule or requirement, which test suite needs to satisfy.",
        "Options": [
            "a) Code Conduct",
            "b) Code Coverage",
            "c) Coverage Criteria",
            "d) Mutation Redundancy"
        ],
        "Answer": "Answer: c\nExplanation: Coverage Criteria defines the rules or criteria which the test suites need to pass."
    },
    {
        "id": 254,
        "Question": "For the statement if( a || b) , which is not a mutant?",
        "Options": [
            "a) if(a && b)",
            "b) if(a & b)",
            "c) if( a | b)",
            "d) if( a || b)"
        ],
        "Answer": "Answer: d\nExplanation: The other three statements alter the original by changing the logical operator, hence introducing mutants."
    },
    {
        "id": 255,
        "Question": "Mutants which result in programs which are behaviourally equivalent to the original one are called ________________-",
        "Options": [
            "a) Statement coverage",
            "b) Condition coverage",
            "c) Equivalent Mutants",
            "d) Dead Mutants"
        ],
        "Answer": "Answer: c\nExplanation: An equivalent mutant for the expression a=b+c would be a= b-(-c)."
    },
    {
        "id": 256,
        "Question": "Which function call ensure statement coverage for this function?",
        "Options": [
            "a) example(0,0)",
            "b) example(1,0)",
            "c) example(0,1)",
            "d) example(1,1)"
        ],
        "Answer": "Answer: d\nExplanation: The function call example(1,1) results in each statement of the function being executed leading to statement coverage."
    },
    {
        "id": 257,
        "Question": "Which function call ensure function coverage for this function?",
        "Options": [
            "a) ex(1,2)",
            "b) example(3,4)",
            "c) example1(1,2)",
            "d) etra(2,3)"
        ],
        "Answer": "Answer: b\nExplanation: If during execution function ‘example’ is called at least once, then function coverage for this function is satisfied."
    },
    {
        "id": 258,
        "Question": "Which function call ensure branch coverage for this function?",
        "Options": [
            "a) example(1,1)",
            "b) example(0,1)",
            "c) example(1,1) and example(0,1)",
            "d) example(1,1) and example(1,1)"
        ],
        "Answer": "Answer: c\nExplanation: In the first case, the two if conditions are met and z = x; is executed, while in the second case, the first condition (x>0) is not satisfied, which prevents executing z = x;"
    },
    {
        "id": 259,
        "Question": "Which function call ensures condition coverage for this function?",
        "Options": [
            "a) example(1,1)",
            "b) example(0,1)",
            "c) example(1,1) and example(0,1)",
            "d) example(1,0) and example(0,1)"
        ],
        "Answer": "Answer: d\nExplanation: These are necessary because in the first cases, (x>0) evaluates to true whereas in the second, it evaluates false. At the same time, the first case makes (y>0) false, whereas the second makes it true."
    },
    {
        "id": 260,
        "Question": "A combination of function coverage and branch coverage is sometimes also called _______________",
        "Options": [
            "a) Function coverage",
            "b) Statement coverage",
            "c) Decision coverage",
            "d) Condition coverage"
        ],
        "Answer": "Answer: c\nExplanation: In decision coverage, both aspects of function coverage and branch is used to complete code coverage."
    },
    {
        "id": 261,
        "Question": "____________ criterion requires that every point of entry and exit in the program has been invoked at least once.",
        "Options": [
            "a) Function coverage",
            "b) Statement coverage",
            "c) Decision coverage",
            "d) Condition coverage"
        ],
        "Answer": "Answer: c\nExplanation: Decision coverage requires that every decision in the program has taken on all possible outcomes at least once."
    },
    {
        "id": 262,
        "Question": "_____________ criterion extends the decision criteria with specifications that each condition has to affect the decision outcome independently.",
        "Options": [
            "a) Redundant Condition/decision coverage",
            "b) Transferred Condition/decision coverage",
            "c) Modified Condition/decision coverage",
            "d) Lossless Condition/decision coverage"
        ],
        "Answer": "Answer: a\nExplanation: Condition/decision coverage requires that both decision and condition coverage be satisfied."
    },
    {
        "id": 263,
        "Question": "________________ criterion requires that inside each decision, all combinations of conditions are tested.",
        "Options": [
            "a) Redundant Condition/decision coverage",
            "b) Multiple condition coverage",
            "c) Modified Condition/decision coverage",
            "d) Lossless Condition/decision coverage"
        ],
        "Answer": "Answer: c\nExplanation: Modified Condition/Decision coverage extends upon condition/decision coverage and is used for safety-critical applications."
    },
    {
        "id": 264,
        "Question": "____________ requires that in a method taking parameters, all the common values for such parameters be considered.",
        "Options": [
            "a) Redundant Condition/decision coverage",
            "b) Multiple condition coverage",
            "c) Modified Condition/decision coverage",
            "d) Parameter Value Coverage"
        ],
        "Answer": " Answer: b\nExplanation: Multiple condition coverage checks for every condition possible and each decision is tested."
    },
    {
        "id": 265,
        "Question": "______________ applications are often required to show that testing achieves 100% of some form of code coverage.",
        "Options": [
            "a) Non safe",
            "b) Safety Critical",
            "c) Critical",
            "d) Lossless"
        ],
        "Answer": "Answer: d\nExplanation: The idea in Parameter Value Coverage is that all common possible values for a parameter are tested."
    },
    {
        "id": 266,
        "Question": "PVC stands for _____________",
        "Options": [
            "a) Parameter Value Condition",
            "b) Parameterised Values Check",
            "c) Parameter Value Coverage",
            "d) Path Value Check"
        ],
        "Answer": "Answer: b\nExplanation: A safety critical application can result in severe loss if not tested properly."
    },
    {
        "id": 267,
        "Question": "______________ is a method of achieving complete branch coverage without achieving complete path coverage.",
        "Options": [
            "a) Basis Path Testing",
            "b) Loss Testing",
            "c) Universal Testing",
            "d) Random Testing"
        ],
        "Answer": "Answer: c\nExplanation: PVC is also known as parameter value coverage which tests code coverage for a parameter."
    },
    {
        "id": 268,
        "Question": "________________ criteria checks whether each state in a finite-state machine been reached and explored.",
        "Options": [
            "a) Path coverage",
            "b) Loop coverage",
            "c) Entry/exit coverage",
            "d) State coverage"
        ],
        "Answer": "Answer: a\nExplanation: Basis path testing provides a technique of total branch coverage without having total path coverage."
    },
    {
        "id": 269,
        "Question": "____________ is a software analysis method used to identify structural units in code under test.",
        "Options": [
            "a) Linear code sequence and jump",
            "b) State coverage",
            "c) Lossless packs",
            "d) Linear jumps"
        ],
        "Answer": "Answer: a\nExplanation: Linear code sequence and jump helps to answer the question “how much testing is enough”?"
    },
    {
        "id": 270,
        "Question": "LCSAJ stands for _______________",
        "Options": [
            "a) Loading Code standard as Jumps",
            "b) Linear code sequence and jump",
            "c) Loading code sequence and jump",
            "d) Linear coverage sequence and jump"
        ],
        "Answer": "Answer: b\nExplanation: LCSAJ is primarily used with dynamic software analysis."
    },
    {
        "id": 271,
        "Question": "The JJ in JJ-path stands for ___________",
        "Options": [
            "a) Just Jump",
            "b) Jump-in-JUnit",
            "c) Java-JUnit",
            "d) Jump-to-Jump"
        ],
        "Answer": "Answer: d\nExplanation: JJ-path or Jump-to-Jump-path is a well-defined linear region of a program’s code."
    },
    {
        "id": 272,
        "Question": "In a narrower sense, LCSAJ is also called ____________",
        "Options": [
            "a) JJ-Path",
            "b) Code Coverage",
            "c) System Code Analysis",
            "d) Code Breakdown"
        ],
        "Answer": "Answer: a\nExplanation:  LCSAJ is now always referred to as a JJ-path."
    },
    {
        "id": 273,
        "Question": "______________________ is the most common and least efficient debugging technique.",
        "Options": [
            "a) Brute force debugging",
            "b) Backtracking",
            "c) Cause elimination",
            "d) Program slicing"
        ],
        "Answer": "Answer: a\nExplanation: In brute force debugging, all possible combinations are used and studied."
    },
    {
        "id": 274,
        "Question": "An effective method for locating errors in small programs is to ___________ the incorrect results through the logic of the program until the point where the logic went astray is found.",
        "Options": [
            "a) Search",
            "b) Backtrack",
            "c) Slice",
            "d) Eliminate"
        ],
        "Answer": "Answer: b\nExplanation: This type of debugging is known as backtracking."
    },
    {
        "id": 275,
        "Question": "__________ involves the use of induction or deduction and introduces the concept of binary partitioning.",
        "Options": [
            "a) Brute force debugging",
            "b) Backtracking",
            "c) Cause elimination",
            "d) Program slicing"
        ],
        "Answer": "Answer: c\nExplanation: Cause elimination bases debugging on the basis of induction."
    },
    {
        "id": 276,
        "Question": "________________ is the computation of the set of programs statements.",
        "Options": [
            "a) Brute force debugging",
            "b) Backtracking",
            "c) Cause elimination",
            "d) Program slicing"
        ],
        "Answer": "Answer: d\nExplanation: The whole code is sliced into segments and their computation is known as Program Slicing."
    },
    {
        "id": 277,
        "Question": "The point at which the program slice affects the values at some point of interest is __________",
        "Options": [
            "a) Slicing criterion",
            "b) Program criterion",
            "c) Sliced Parts criterion",
            "d) Information flow control"
        ],
        "Answer": "Answer: a\nExplanation: The slicing criterion is the point at which values start being affected."
    },
    {
        "id": 278,
        "Question": "Program slicing can be used in ______________ to locate source of errors more easily.",
        "Options": [
            "a) Testing",
            "b) Coding",
            "c) Debugging",
            "d) Checking"
        ],
        "Answer": "Answer: c\nExplanation: Program slicing is a debugging technique."
    },
    {
        "id": 279,
        "Question": "__________ is an error condition hiding another error condition.",
        "Options": [
            "a) Fault Masking",
            "b) Error Hiding",
            "c) Redundant Masking",
            "d) Fault Gaping"
        ],
        "Answer": "Answer: a\nExplanation: Fault Masking is a type of redundancy analysis."
    },
    {
        "id": 280,
        "Question": "To get an expected test outcome a standard procedure is followed which is referred as ___________",
        "Options": [
            "a) Testing Mechanism",
            "b) Testing Type",
            "c) Test Cast",
            "d) Test Scope"
        ],
        "Answer": "Answer: b\nExplanation: Testing types include Unit testing, API testing among others."
    },
    {
        "id": 281,
        "Question": "The test instantiates ___________ and calls methods on these _________",
        "Options": [
            "a) Objects",
            "b) Classes",
            "c) Services",
            "d) Subsystems"
        ],
        "Answer": "Answer: a\nExplanation: The test class has to be instantiated and objects are created."
    },
    {
        "id": 282,
        "Question": "The test runs while a ___________ or EJB container hosts the application.",
        "Options": [
            "a) Objects",
            "b) Classes",
            "c) Servlet",
            "d) Subsystems"
        ],
        "Answer": "Answer: c\nExplanation: The servlet attaches to any other external resource or device."
    },
    {
        "id": 283,
        "Question": "A layered application may have a front end to handle the presentation and a ______________ to execute the business logic.",
        "Options": [
            "a) Objects",
            "b) Classes",
            "c) Servlet",
            "d) Back end"
        ],
        "Answer": "Answer: d\nExplanation: The front end is responsible for the presentation while the back end defines the logic."
    },
    {
        "id": 284,
        "Question": "______________ tests examine the code at the boundary of its public API.",
        "Options": [
            "a) Unit",
            "b) Integration",
            "c) Functional",
            "d) Loss"
        ],
        "Answer": "Answer: c\nExplanation: This corresponds to testing application use cases."
    },
    {
        "id": 285,
        "Question": "Developers often combine functional tests with __________ tests.",
        "Options": [
            "a) Unit",
            "b) Integration",
            "c) Stress",
            "d) Loss"
        ],
        "Answer": "Answer: b\nExplanation: Functional tests are so designed so as to combine with integration tests easily."
    },
    {
        "id": 286,
        "Question": "Layering provides __________ and the ability to access the back end with several different front ends.",
        "Options": [
            "a) Flexibility",
            "b) Redundancy",
            "c) Authorization",
            "d) Simplicity"
        ],
        "Answer": "Answer: a\nExplanation: Layering allows to separate the logic from the presentation."
    },
    {
        "id": 287,
        "Question": "____________ tests examine whether the application can process a large number of requests test types within a given period.",
        "Options": [
            "a) Unit",
            "b) Integration",
            "c) Stress",
            "d) Acceptance"
        ],
        "Answer": "Answer: c\nExplanation: Stress tests should automatically sends preprogramed requests and tracks how quickly the application responds."
    },
    {
        "id": 288,
        "Question": "The stress test environment should be as close as possible to the __________ environment.",
        "Options": [
            "a) Design",
            "b) Review",
            "c) Test",
            "d) Production"
        ],
        "Answer": "Answer: d\nExplanation: Otherwise, the results will not be accurate or useful."
    },
    {
        "id": 289,
        "Question": "A profiler can look for _________ in an application.",
        "Options": [
            "a) Bottlenecks",
            "b) Redundancies",
            "c) Nodes",
            "d) States"
        ],
        "Answer": "Answer: a\nExplanation: The developer tries to optimize the bottlenecks."
    },
    {
        "id": 290,
        "Question": "___________ tests are a superset of all other tests.",
        "Options": [
            "a) Unit",
            "b) Integration",
            "c) Loss",
            "d) Acceptance"
        ],
        "Answer": "Answer: d\nExplanation: Acceptance tests contains characteristics of other tests."
    },
    {
        "id": 291,
        "Question": "A ___________ is a test that exercises code by focusing on a single method.",
        "Options": [
            "a) Logic unit test",
            "b) Integration unit test",
            "c) Functional unit test",
            "d) Acceptance unit test"
        ],
        "Answer": "Answer: a\nExplanation: Logic unit tests are a type of unit test that focuses on a single method."
    },
    {
        "id": 292,
        "Question": "In logic unit test, the boundaries of a given test can be controlled by using __________",
        "Options": [
            "a) Objects",
            "b) Mock objects",
            "c) Controllers",
            "d) Modules"
        ],
        "Answer": "Answer: b\nExplanation: Mock objects help perform specific tests by narrowing down to a specific task."
    },
    {
        "id": 293,
        "Question": "A ________________is a test that focuses on the interaction between components in their real environment.",
        "Options": [
            "a) Logic unit test",
            "b) Integration unit test",
            "c) Functional unit test",
            "d) Acceptance unit test"
        ],
        "Answer": "Answer: b\nExplanation: Integration unit testing is a type of unit testing which tests components in their real environment."
    },
    {
        "id": 294,
        "Question": "Code that accesses a database has tests that effectively _________ the database.",
        "Options": [
            "a) Ignore",
            "b) Delete",
            "c) Call",
            "d) Define"
        ],
        "Answer": "Answer: c\nExplanation: As a part of integration unit testing, the test has to call the database to test its components."
    },
    {
        "id": 295,
        "Question": "A _______________ is a test that extends the boundaries of integration unit testing to confirm a stimulus response.",
        "Options": [
            "a) Logic unit test",
            "b) Integration unit test",
            "c) Functional unit test",
            "d) Acceptance unit test"
        ],
        "Answer": "Answer: c\nExplanation: Afunctional unit test is a type of unit test which extends the boundaries of integration tests."
    },
    {
        "id": 296,
        "Question": "_____________ more dependent on an external environment than pure unit tests are.",
        "Options": [
            "a) Logic unit test",
            "b) Integration unit test",
            "c) Functional unit test",
            "d) Acceptance unit test"
        ],
        "Answer": "Answer: c\nExplanation: Functional Unit tests are not pure unit tests nor pure functional tests."
    },
    {
        "id": 297,
        "Question": "__________ are put in scope because they’re often useful as part of the battery of tests run in development.",
        "Options": [
            "a) Logic unit test",
            "b) Integration unit test",
            "c) Functional unit test",
            "d) Acceptance unit test"
        ],
        "Answer": "Answer: c\nExplanation: Functional unit tests are more dependent on an external environment than  pure unit tests are."
    },
    {
        "id": 298,
        "Question": "Functional Unit tests don’t test a complete ____________ as expected by pure functional tests.",
        "Options": [
            "a) Workflow",
            "b) Object",
            "c) Class",
            "d) Functions"
        ],
        "Answer": "Answer: a\nExplanation: Functional Unit tests are not complete functional tests and hence, cannot test the complete workflow of the code."
    },
    {
        "id": 299,
        "Question": "The __________ test relies exclusively on the external system interface to verify its correctness.",
        "Options": [
            "a) White Box",
            "b) Unit",
            "c) Black Box",
            "d) Loss"
        ],
        "Answer": "Answer: c\nExplanation: Black box tests have no knowledge of the internals of the code."
    },
    {
        "id": 300,
        "Question": "In black box testing, all that is needed to know in order to test the system properly is the system’s ______________",
        "Options": [
            "a) Functional specification",
            "b) Modularity",
            "c) Redundancy",
            "d) Class definition"
        ],
        "Answer": "Answer: a\nExplanation: The function specification tells the output and input and not the internals."
    },
    {
        "id": 301,
        "Question": "White box testing is also known as ______________",
        "Options": [
            "a) Black box testing",
            "b) Sand box testing",
            "c) Closed testing",
            "d) Glass box testing"
        ],
        "Answer": "Answer: d\nExplanation: White box requires the internals to be known just as a glass box shows what is inside."
    },
    {
        "id": 302,
        "Question": "White box testing provides better test _________ than black box testing.",
        "Options": [
            "a) Result",
            "b) Coverage",
            "c) Mechanism",
            "d) Acceptance"
        ],
        "Answer": "Answer: b\nExplanation: White box tests cover the internal working of the code leading to greater coverage of the system."
    },
    {
        "id": 303,
        "Question": "________ tests are more difficult to write and run.",
        "Options": [
            "a) White Box",
            "b) Unit",
            "c) Black Box",
            "d) Loss"
        ],
        "Answer": "Answer: c\nExplanation: Black box tests are difficult to write because they usually deal with a graphical front end."
    },
    {
        "id": 304,
        "Question": "Black box tests can bring more ________ than white box tests.",
        "Options": [
            "a) Value",
            "b) Coverage",
            "c) Mechanism",
            "d) Acceptance"
        ],
        "Answer": "Answer: a\nExplanation: Since black box tests just check the external characteristics including input and output, they bring more value."
    },
    {
        "id": 305,
        "Question": "Using ____________ testing, tests can be created that cover the public API of an application.",
        "Options": [
            "a) White Box",
            "b) Unit",
            "c) Black Box",
            "d) Loss"
        ],
        "Answer": "Answer: c\nExplanation: As the documentation is used as the guide, black box tests are written."
    },
    {
        "id": 306,
        "Question": "Higher test coverage is achieved by white box tests because of ____________",
        "Options": [
            "a) Access to more methods",
            "b) Better documentation",
            "c) Faster tests",
            "d) More accepted tests"
        ],
        "Answer": "Answer: a\nExplanation: Since white box tests have knowledge of the implementation, they have access to more methods."
    },
    {
        "id": 307,
        "Question": "____________ tests can control both the inputs to each method and the behaviour of secondary objects.",
        "Options": [
            "a) White Box",
            "b) Unit",
            "c) Black Box",
            "d) Loss"
        ],
        "Answer": "Answer: a\nExplanation: Secondary objects like mock objects and stubs are controlled by white box tests."
    },
    {
        "id": 308,
        "Question": "White box unit tests can be written against ____________ package-private, and public methods.",
        "Options": [
            "a) Static",
            "b) Private",
            "c) Protected",
            "d) Void"
        ],
        "Answer": "Answer: c\nExplanation: As white box unit tests cover protected methods too, they give more test coverage."
    },
    {
        "id": 309,
        "Question": "_________ is a free Java tool that calculates the percentage of code accessed by tests.",
        "Options": [
            "a) Cobertura",
            "b) JUnit",
            "c) XUnit",
            "d) Maven"
        ],
        "Answer": "Answer: a\nExplanation: Cobertura is used to identify which parts of the Java program are lacking test coverage."
    },
    {
        "id": 310,
        "Question": "Cobertura is based on ____________",
        "Options": [
            "a) JUnit",
            "b) XUnit",
            "c) Maven",
            "d) Jcoverage"
        ],
        "Answer": "Answer: d\nExplanation: Jcoverage is an open source tool that allows to test the effectiveness of java tests."
    },
    {
        "id": 311,
        "Question": "In order to measure test coverage, Cobertura creates __________ of class files specified.",
        "Options": [
            "a) Instrumented copies",
            "b) Objects",
            "c) Mocks",
            "d) Images"
        ],
        "Answer": "Answer: a\nExplanation: Cobertura uses instrumented copies of the code to provide test coverage."
    },
    {
        "id": 312,
        "Question": "While using Cobertura from the command line, which parameter specifies the base directory?",
        "Options": [
            "a) −−datafile",
            "b) −−destination",
            "c) −−ignore",
            "d) −−basedir"
        ],
        "Answer": "Answer: d\nExplanation: The –basedir parameter specifies the base directory of the class files that are to be instrumented."
    },
    {
        "id": 313,
        "Question": "______________ is used to specify the name of the file to use for storing the metadata about the classes.",
        "Options": [
            "a) −−datafile",
            "b) −−destination",
            "c) −−ignore",
            "d) −−basedir"
        ],
        "Answer": "Answer: a\nExplanation: The file specifies by –datafile is a single file containing serialized Java classes."
    },
    {
        "id": 314,
        "Question": "________ specifies the output directory for the instrumented classes.",
        "Options": [
            "a) −−datafile",
            "b) −−destination",
            "c) −−ignore",
            "d) −−basedir"
        ],
        "Answer": "Answer: b\nExplanation: The –destination parameter is used to fix an output directory."
    },
    {
        "id": 315,
        "Question": "___________ specifies a regular expression to filter out certain lines of the source code.",
        "Options": [
            "a) −−datafile",
            "b) −−destination",
            "c) −−ignore",
            "d) −−basedir"
        ],
        "Answer": "Answer: c\nExplanation: This is useful for ignoring logging statements and for such the ignore parameter is used."
    },
    {
        "id": 316,
        "Question": "___________ is used to add extra classes and jar files to Cobertura.",
        "Options": [
            "a) −−datafile",
            "b) −−destination",
            "c) −−ignore",
            "d) −−auxClasspath"
        ],
        "Answer": "Answer: d\nExplanation: This adds files that Cobertura may have missed during instrumentation."
    },
    {
        "id": 317,
        "Question": "The default value for the –datafile parameter is ____________",
        "Options": [
            "a) cobertura.ser",
            "b) cobertura.dat",
            "c) datafile.ser",
            "d) cobertura.log"
        ],
        "Answer": "Answer: a\nExplanation: The file is created in the current directory."
    },
    {
        "id": 318,
        "Question": "To use cobertura, we need to include __________",
        "Options": [
            "a) cobertura.jar",
            "b) junit.jar",
            "c) hamcrest.jar",
            "d) junitCobertura.jar"
        ],
        "Answer": "Answer: a\nExplanation: The external jar file adds Cobertura to the present project."
    },
    {
        "id": 319,
        "Question": "The Cobertura command to run while reporting is ____________",
        "Options": [
            "a) cobertura-report.bat",
            "b) cobertura-instrument.bat",
            "c) cobertura-check.bat",
            "d) cobertura-merge.bat"
        ],
        "Answer": "Answer: a\nExplanation: The cobertura-report.bat command is used along with parameters to run reporting using Cobertura."
    },
    {
        "id": 320,
        "Question": "The ____________ parameter is used to specify the type of report.",
        "Options": [
            "a) datafile",
            "b) basedir",
            "c) encoding",
            "d) format"
        ],
        "Answer": "Answer: d\nExplanation: The format parameter defines the type of report to be generated."
    },
    {
        "id": 321,
        "Question": "____________ parameter specifies the encoding used to read the source.",
        "Options": [
            "a) datafile",
            "b) basedir",
            "c) encoding",
            "d) format"
        ],
        "Answer": "Answer: c\nExplanation: During reporting with Cobertura, the encoding parameter defines the encoding of the files."
    },
    {
        "id": 322,
        "Question": "The source code directories are used to calculate the ____________ of each class.",
        "Options": [
            "a) Data size",
            "b) Lines of code",
            "c) Cyclomatic code complexity",
            "d) Mutant score"
        ],
        "Answer": "Answer: c\nExplanation: The cyclomatic code complexity is a metric to indicate the complexity of the code."
    },
    {
        "id": 323,
        "Question": "The default value of the format parameter is ____________",
        "Options": [
            "a) html",
            "b) jar",
            "c) java",
            "d) dat"
        ],
        "Answer": "Answer: a\nExplanation: The HTML reports are made of annotated versions of each source file."
    },
    {
        "id": 324,
        "Question": "The Cobertura command to run while checking coverage is ____________",
        "Options": [
            "a) cobertura-report.bat",
            "b) cobertura-instrument.bat",
            "c) cobertura-check.bat",
            "d) cobertura-merge.bat"
        ],
        "Answer": "Answer: c\nExplanation: The cobertura-check.bat command is used along with parameters to run reporting using Cobertura."
    },
    {
        "id": 325,
        "Question": "“cobertura-check.bat” is run ________ the JUnit tests to show which classes do not have adequate test coverage.",
        "Options": [
            "a) Before",
            "b) After",
            "c) Along with",
            "d) Before and after"
        ],
        "Answer": "Answer: b\nExplanation: This is used to check test coverage and hence, can only be run after the JUnit tests."
    },
    {
        "id": 326,
        "Question": "The ___________ parameter specifies the minimum acceptable branch coverage rate needed by each class during Cobetura coverage checking.",
        "Options": [
            "a) datafile",
            "b) branch",
            "c) line",
            "d) regex"
        ],
        "Answer": "Answer: b\nExplanation: The branch parameter should be an integer between 0 and 100."
    },
    {
        "id": 327,
        "Question": "The ___________ parameter specifies the minimum acceptable line coverage rate needed by each class during Cobetura coverage checking.",
        "Options": [
            "a) datafile",
            "b) branch",
            "c) line",
            "d) regex"
        ],
        "Answer": "Answer: c\nExplanation: The line parameter should be an integer between 0 and 100."
    },
    {
        "id": 328,
        "Question": "The ___________ parameter specifies the minimum acceptable branch coverage rate needed by each package during Cobetura coverage checking.",
        "Options": [
            "a) datafile",
            "b) packagebranch",
            "c) line",
            "d) regex"
        ],
        "Answer": "Answer: b\nExplanation: The packagebranch parameter should be an integer between 0 and 100."
    },
    {
        "id": 329,
        "Question": "The Cobertura command for merging datafiles is ________________",
        "Options": [
            "a) cobertura-report.bat",
            "b) cobertura-instrument.bat",
            "c) cobertura-check.bat",
            "d) cobertura-merge.bat"
        ],
        "Answer": "Answer: d\nExplanation: The cobertura-merge.bat command is used along with parameters to run merging using Cobertura."
    },
    {
        "id": 330,
        "Question": "In order to write testable code, ______________ should be reduced as much as possible.",
        "Options": [
            "a)  Dependencies",
            "b) Redundancies",
            "c) Objects",
            "d) Classes"
        ],
        "Answer": "Answer: a\nExplanation: Classes with too many dependencies require complicated tests."
    },
    {
        "id": 331,
        "Question": "A solution to reducing dependencies is to separate code between methods that instantiate new ____________ and methods that provide application logic.",
        "Options": [
            "a) Classes",
            "b) Objects",
            "c) Modules",
            "d) Functions"
        ],
        "Answer": "Answer: b\nExplanation: Separation of objects and logic leads to reduced dependencies."
    },
    {
        "id": 332,
        "Question": "________________ is a design guideline that states that one class should know only as much as it needs to know.",
        "Options": [
            "a) Law of knowledge",
            "b) Class laws",
            "c) Law of Demeter",
            "d) Action methods"
        ],
        "Answer": "Answer: c\nExplanation: The law of demeter is also known as the Principle of Least Knowledge."
    },
    {
        "id": 333,
        "Question": "____________ is a useful design pattern that ensures a class has only one instance.",
        "Options": [
            "a) Modular code",
            "b) Lossless paradigm",
            "c) Granular methods",
            "d) Singleton"
        ],
        "Answer": "Answer: d\nExplanation: Most often, the implementation of a singleton defines a private constructor and a static variable."
    },
    {
        "id": 334,
        "Question": "The obvious drawback of a singleton is that it introduces _____________ into the application.",
        "Options": [
            "a) Redundancies",
            "b) Errors",
            "c) Global State",
            "d) Modules"
        ],
        "Answer": "Answer: c\nExplanation: The global state object can be accessed by anyone."
    },
    {
        "id": 335,
        "Question": "_______________ can easily be used to substitute application code with the test code.",
        "Options": [
            "a) Encapsulation",
            "b) Polymorphism",
            "c) Overloading",
            "d) Static binding"
        ],
        "Answer": "Answer: b\nExplanation: Polymorphism is used to force certain code patterns to be tested."
    },
    {
        "id": 336,
        "Question": "At runtime, code can’t change a/an ___________ hierarchy.",
        "Options": [
            "a) Encapsulation",
            "b) Polymorphism",
            "c) Overloading",
            "d) Inheritence"
        ],
        "Answer": "Answer: d\nExplanation: As code cannot change the hierarchy, objects needs to be composed differently."
    },
    {
        "id": 337,
        "Question": "For wrtiting favourable tests, __________ is perferred over inheritance.",
        "Options": [
            "a) Encapsulation",
            "b) Polymorphism",
            "c) Overloading",
            "d) Composition"
        ],
        "Answer": "Answer: d\nExplanation: Composition is a better code re-use mechanism."
    },
    {
        "id": 338,
        "Question": "One of the main ways to decrease complexity is to try to avoid long _________ and if statements.",
        "Options": [
            "a) switch",
            "b) then",
            "c) default",
            "d) static"
        ],
        "Answer": "Answer: a\nExplanation: Long switch statements increase the complexity of code and corresponding test cases."
    },
    {
        "id": 339,
        "Question": "___________ is favoured over conditionals to better write testable code.",
        "Options": [
            "a) Polymorphism",
            "b) Composition",
            "c) Inheritance",
            "d) Overloading"
        ],
        "Answer": "Answer: a\nExplanation: More conditionals lead to more complex code."
    },
    {
        "id": 340,
        "Question": "_____________ is a programming practice that expects new code to be written only if an automated test has failed and also to eliminate duplication.",
        "Options": [
            "a) Object Oriented Testing",
            "b) Test Driven Development",
            "c) Acceptance Testing",
            "d) Lossless Development"
        ],
        "Answer": "Answer: b\nExplanation: The goal of TDD is “clean code that works.”"
    },
    {
        "id": 341,
        "Question": "API stands for _______________",
        "Options": [
            "a) Application programming interface",
            "b) Application programming instruction",
            "c) Android programming interface",
            "d) Application performance interface"
        ],
        "Answer": "Answer: a\nExplanation: APIs are a set of functions and procedures that allow the creation of applications."
    },
    {
        "id": 342,
        "Question": "When the _________ is used as the method’s first client, it becomes easier to focus purely on the API.",
        "Options": [
            "a) Object",
            "b) Class",
            "c) Test",
            "d) Stub"
        ],
        "Answer": "Answer: c\nExplanation: This is an advantage of test driven development."
    },
    {
        "id": 343,
        "Question": "________ platform builds the application from its various components.",
        "Options": [
            "a) Development platform",
            "b) Integration platform",
            "c) Acceptance platform",
            "d) Stress test platform"
        ],
        "Answer": "Answer: b\nExplanation: Code maintenance is enhanced by the elimination of duplication."
    },
    {
        "id": 344,
        "Question": "The ___________ platform is the last staging area before production.",
        "Options": [
            "a) Development platform",
            "b) Integration platform",
            "c) Acceptance platform",
            "d) Pre-production platform"
        ],
        "Answer": "Answer: b\nExplanation: Integration platform ensures that all the components work together."
    },
    {
        "id": 345,
        "Question": "On the development platform, _________ unit tests are executed.",
        "Options": [
            "a) Acceptance",
            "b) Lossless",
            "c) Logic",
            "d) Functional"
        ],
        "Answer": "Answer: d\nExplanation: The pre-production platform is an optional platform before the production platform."
    },
    {
        "id": 346,
        "Question": "The _____________ exercises the application under load and verifies that it scales correctly.",
        "Options": [
            "a) Development platform",
            "b) Integration platform",
            "c) Acceptance platform",
            "d) Stress test platform"
        ],
        "Answer": "Answer: c\nExplanation: These are tests that can be executed in isolation from the environment."
    },
    {
        "id": 347,
        "Question": "User feedback is got from the ______________",
        "Options": [
            "a) Development platform",
            "b) Integration platform",
            "c) Acceptance platform",
            "d) Stress test platform"
        ],
        "Answer": "Answer: d\nExplanation: The scaling is done with respect to size and response time."
    },
    {
        "id": 348,
        "Question": "Using old tests to guard against new changes is a form of ______________",
        "Options": [
            "a) Unit Testing",
            "b) Integration Testing",
            "c) Regression Testing",
            "d) Loss Testing"
        ],
        "Answer": "Answer: c\nExplanation: The best way to ensure that regression testing takes place is to automate the test suites."
    },
    {
        "id": 349,
        "Question": "A ________ is a piece of code that’s inserted at runtime in place of the real code.",
        "Options": [
            "a) Stub",
            "b) Mock Object",
            "c) Packet",
            "d) Jammer"
        ],
        "Answer": "Answer: a\nExplanation: Stubs are used in order to isolate the caller from the real implementation."
    },
    {
        "id": 350,
        "Question": "The intent of using stubs is to replace a _________ behaviour with a simpler one.",
        "Options": [
            "a) Unique",
            "b) Complex",
            "c) Redundant",
            "d) Anomalous"
        ],
        "Answer": "Answer: b\nExplanation: Stubs allow independent testing of some part of the real code."
    },
    {
        "id": 351,
        "Question": "Stubs usually provide high _____________ in the tested system.",
        "Options": [
            "a) Mocking",
            "b) Security",
            "c) Confidence",
            "d) Modularity"
        ],
        "Answer": "Answer: c\nExplanation: With stubs, the objects under test aren’t getting modified."
    },
    {
        "id": 352,
        "Question": "Stubs don’t lend themselves well to ____________ unit testing.",
        "Options": [
            "a) Fine-grained",
            "b) Coarse-grained",
            "c) Redundant",
            "d) Functional"
        ],
        "Answer": "Answer: a\nExplanation: In general, stubs are better adapted for replacing coarse-grained portions of code."
    },
    {
        "id": 353,
        "Question": "A build or developer usually executes tests involving stubs in their _________ environment.",
        "Options": [
            "a) Dead",
            "b) Running",
            "c) Production",
            "d) Fake"
        ],
        "Answer": "Answer: b\nExplanation: Executing in the running environment provides additional confidence."
    },
    {
        "id": 354,
        "Question": "An implementation that returns a hardcoded value for purposes of testing is known as a __________",
        "Options": [
            "a) Stub",
            "b) Mock Object",
            "c) Packet",
            "d) Jammer"
        ],
        "Answer": "Answer: a\nExplanation: A stub implementation can be created dynamically using lambdas."
    },
    {
        "id": 355,
        "Question": "_____________ is a software testing technique that is useful to help in the generation of test data.",
        "Options": [
            "a) Symbolic Execution",
            "b) Stubs",
            "c) Active testing",
            "d) All-pairs testing"
        ],
        "Answer": "Answer: a\nExplanation: Symbolic Execution is used in proving the program quality."
    },
    {
        "id": 356,
        "Question": "The ______________ identifies the decision points and the assignments associated with each flow.",
        "Options": [
            "a) Decision Table",
            "b) Flowgraph",
            "c) Testing Design",
            "d) Audit"
        ],
        "Answer": "Answer: b\nExplanation: Traversing the flow graph from an entry point is used to produce a list of assignment statements and branch predicates."
    },
    {
        "id": 357,
        "Question": "_______________ is a Java HTTP (Web) server and Java Servlet container.",
        "Options": [
            "a) Maven",
            "b) Ant",
            "c) Jetty",
            "d) Zimbra"
        ],
        "Answer": "Answer: a\nExplanation: This ensures that the test results are reproducible."
    },
    {
        "id": 358,
        "Question": "Jetty was originally called ________________",
        "Options": [
            "a) Eclipse",
            "b) Maven",
            "c) Ant",
            "d) IssueTracker"
        ],
        "Answer": "Answer: c\nExplanation: Jetty is often used for machine to machine communications, usually within larger software frameworks."
    },
    {
        "id": 359,
        "Question": "To create a Jetty server object, we have to import _____________",
        "Options": [
            "a) org.mortbay.jetty.Server;",
            "b) org.jetty.Server;",
            "c) org.junit.jetty.Server;",
            "d) org.junit.Server;"
        ],
        "Answer": "Answer: d\nExplanation: Jetty was originally known as IssueTracker as that was its original application."
    },
    {
        "id": 360,
        "Question": "In Jetty, ____________ object processes the HTTP requests.",
        "Options": [
            "a) Server",
            "b) Context",
            "c) Root",
            "d) Handler"
        ],
        "Answer": "Answer: a\nExplanation: The Jetty Server is found in “org.mortbay.jetty.Server”."
    },
    {
        "id": 361,
        "Question": "To create a Jetty context object, we have to import _____________",
        "Options": [
            "a) org.mortbay.jetty.Context;",
            "b) org.jetty.Context;",
            "c) org.mortbay.jetty.servlet.Context;",
            "d) org.junit.Server;"
        ],
        "Answer": "Answer: b\nExplanation: Context object processes the HTTP requests and passes them to various handlers."
    },
    {
        "id": 362,
        "Question": "The ______________ method sets the document root from which to serve resources.",
        "Options": [
            "a)  setResourceBase",
            "b)  resourceBase",
            "c)  setResource",
            "d)  setBase"
        ],
        "Answer": "Answer: c\nExplanation: The Jetty Server is found in “org.mortbay.jetty.servlet.Context”."
    },
    {
        "id": 363,
        "Question": "A _____________ handler is attached to the root to serve files from the file system.",
        "Options": [
            "a)  SourceHandler",
            "b)  ResourceHandler",
            "c) AttachHandler",
            "d) RootHandler"
        ],
        "Answer": "Answer: b\nExplanation: The parameter of the constructor, in this case 8080, represents the port number."
    },
    {
        "id": 364,
        "Question": "The ResourceHandler is found in the package ________________",
        "Options": [
            "a) org.mortbay.jetty.handler.ResourceHandler",
            "b) org.jetty.handler.ResourceHandler",
            "c) org.mortbay.junit.handler.ResourceHandler",
            "d) org.junit.jetty.handler.ResourceHandler"
        ],
        "Answer": "Answer: a\nExplanation: The setResourceBase method is used to set the document root from which resources will be served."
    },
    {
        "id": 365,
        "Question": "To implement a custom URL protocol handler, the URL method __________ is called.",
        "Options": [
            "a) setURLStreamHandlerFactory",
            "b) setURLStreamFactory",
            "c) setURLStreamHandlerFactorySetting",
            "d) setStreamHandlerFactory"
        ],
        "Answer": "Answer: a\nExplanation: A custom URLStreamHandlerFactory is passed to the setURLStreamHandlerFactory method."
    },
    {
        "id": 366,
        "Question": "_________ replace the objects with which the methods under test collaborate, offering a layer of isolation.",
        "Options": [
            "a) Classes",
            "b) Mocks",
            "c) Unified Stamps",
            "d) Interfaces"
        ],
        "Answer": "Answer: b\nExplanation: Mocks are similar to stubs because of the level of isolation they offer."
    },
    {
        "id": 367,
        "Question": "_____________ are empty shells that supply methods to let the tests have control of the behavior of all the business methods of the faked class.",
        "Options": [
            "a) Stubs",
            "b) Jetty",
            "c) Mocks",
            "d) Interfaces"
        ],
        "Answer": "Answer: c\nExplanation: Mocks are different from stubs in the sense that they do not implement any logic."
    },
    {
        "id": 368,
        "Question": "The most important point to consider when writing a mock is that it shouldn’t have any __________.",
        "Options": [
            "a) Redundancy",
            "b) Abstraction",
            "c) Matchers",
            "d) Business Logic"
        ],
        "Answer": "Answer: d\nExplanation: Mocks must be a dumb object that does only what the test tells it to do."
    },
    {
        "id": 369,
        "Question": "Applying the _________ pattern to a class means removing the creation of all object instances for which this class isn’t directly responsible and passing any needed instances instead.",
        "Options": [
            "a) Message Passing",
            "b) Inversion Of Control",
            "c) Observer Pattern",
            "d) Strategy Pattern"
        ],
        "Answer": "Answer: b\nExplanation: The instances may be passed using a specific constructor, using a setter, or as parameters of the methods needing them."
    },
    {
        "id": 370,
        "Question": "____________ is an architectural pattern that stores in-memory object data in relational databases.",
        "Options": [
            "a) Active Record Pattern",
            "b) Inversion Of Control",
            "c) Observer Pattern",
            "d) Strategy Pattern"
        ],
        "Answer": "Answer: a\nExplanation: The active record pattern is an approach to accessing data in a database."
    },
    {
        "id": 371,
        "Question": "_____________ in computer science is a programming technique for converting data between incompatible type systems.",
        "Options": [
            "a) Active Record Pattern",
            "b) Inversion Of Control",
            "c) Object Relational Mapping",
            "d) Strategy Pattern"
        ],
        "Answer": "Answer: c\nExplanation: Object Relational Mapping creates, in effect, a “virtual object database”."
    },
    {
        "id": 372,
        "Question": " The ___________ is a software design pattern that allows the interface of an existing class to be used as another interface.",
        "Options": [
            "a) Adapter Pattern",
            "b) Bridge Pattern",
            "c) Decorator Pattern",
            "d) Composite Pattern"
        ],
        "Answer": "Answer: a\nExplanation: The Adapter design pattern allows otherwise incompatible classes to perform together by the conversion of the interface of one class into an interface expected by the clients."
    },
    {
        "id": 373,
        "Question": "The _______________ is a design pattern that adds behavior to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.",
        "Options": [
            "a) Adapter Pattern",
            "b) Bridge Pattern",
            "c) Decorator Pattern",
            "d) Composite Pattern"
        ],
        "Answer": "Answer: c\nExplanation: The decorator pattern is often useful for adhering to the Single Responsibility Principle."
    },
    {
        "id": 374,
        "Question": " The ____________ is a design pattern in object-oriented programming that allows object composition to achieve the same code reuse as inheritance.",
        "Options": [
            "a) Adapter Pattern",
            "b) Bridge Pattern",
            "c) Decorator Pattern",
            "d) Delegation Pattern"
        ],
        "Answer": "Answer: d\nExplanation: In delegation, an object handles a request by delegating to a second object (the delegate)."
    },
    {
        "id": 375,
        "Question": "Mocks are Trojan horses because they replace real ___________ from the inside, without the calling classes being aware of it.",
        "Options": [
            "a) Methods",
            "b) Objects",
            "c) Variables",
            "d) Classes"
        ],
        "Answer": "Answer: b\nExplanation: Mocks have access to internal information about the class, making them quite powerful."
    },
    {
        "id": 376,
        "Question": "When we’re talking about mock objects, a/an _________ is a feature built into the mock that verifies whether the external class calling this mock has the correct behavior.",
        "Options": [
            "a) Expectation",
            "b) Explanation",
            "c) Behavior",
            "d) Amorous"
        ],
        "Answer": "Answer: a\nExplanation: For example, a database connection mock could verify that the close method on the connection is called exactly once during any test that involves code using this mock."
    },
    {
        "id": 377,
        "Question": "EasyMock relies heavily on the __________import feature of Java.",
        "Options": [
            "a) Dynamic",
            "b) Static",
            "c) Class",
            "d) Object"
        ],
        "Answer": "Answer: a\nExplanation: EasyMock is used to make mock objects which is based on the interface or class being called or extended."
    },
    {
        "id": 378,
        "Question": "To use the createMock method of EasyMock we need to import ___________",
        "Options": [
            "a) org.easymock.EasyMock.createMock",
            "b) org.EasyMock.createMock",
            "c) org.easymock.createMock",
            "d) org.createMock"
        ],
        "Answer": "Answer: b\nExplanation: All EasyMock imports are static imports."
    },
    {
        "id": 379,
        "Question": "__________ method creates a mock object that implements the given interface, order checking is enabled by default.",
        "Options": [
            "a) createNiceControl",
            "b) createMockBuilder",
            "c) createNiceMock",
            "d) createStrictMock"
        ],
        "Answer": "Answer: a\nExplanation: The EasyMock methods are found under “org.easymock.EasyMock.*”."
    },
    {
        "id": 380,
        "Question": "___________ is used for the creation of a mock object, with the specification of it being of the requested type, which has implementations of the given interface or extends the given class.",
        "Options": [
            "a) createMock(Class<T> toMock)",
            "b) createMock(MockType type, Class<T> toMock)",
            "c) createMock(String name, Class<T>toMock)",
            "d) createMock(String name, MockType type, Class<T>toMock)"
        ],
        "Answer": "Answer: d\nExplanation: createStrictMock is the old version of strictMock(String, Class), which is more completion friendly."
    },
    {
        "id": 381,
        "Question": "__________________ creates a mock object, of the requested type and name which are passed, which also has implementations of the given interface or extends the given class.",
        "Options": [
            "a) createMock(Class <T> toMock)",
            "b) createMock(MockType type, Class<T> toMock)",
            "c) createMock(String name, Class<T> toMock)",
            "d) createMock(String name, MockType type, Class<T> toMock)"
        ],
        "Answer": "Answer: b\nExplanation: createMock(MockType type, Class<T> toMock) is the old version of mock(MockType, Class), which is more completion friendly."
    },
    {
        "id": 382,
        "Question": "______________ creates a mock object that implements the given interface with the specification is that order checking is disabled by default.",
        "Options": [
            "a) createMock(Class<T> toMock)",
            "b) createMock(MockType type, Class<T>toMock)",
            "c) createMock(String name, Class<T> toMock)",
            "d) createMock(String name, MockType type, Class<T> toMock)"
        ],
        "Answer": "Answer: d\nExplanation: The name is passed as a parameter in the function definition."
    },
    {
        "id": 383,
        "Question": "createMock(String name, Class<T> toMock) throws _________________ exception.",
        "Options": [
            "a) IndexOutOfBounds",
            "b) IllegalArgumentException",
            "c) NullPointer",
            "d) Arithmetic"
        ],
        "Answer": "Answer: c\nExplanation: The type parameter is the interface that the mock object should implement."
    },
    {
        "id": 384,
        "Question": "________________ creates a mock builder allowing to create a partial mock for the given class or interface.",
        "Options": [
            "a) createMockBuilder(Class<T> toMock)",
            "b) createMock(Class<T> toMock)",
            "c) createNiceControl()",
            "d) createNiceMock(Class<T> toMock)"
        ],
        "Answer": "Answer: a\nExplanation: createMockBuilder(Class<T> toMock) is the old version of partialMockBuilder(Class), which is more completion friendly."
    },
    {
        "id": 385,
        "Question": "The ____________ interface is used in the creation of partial mocks with EasyMock.",
        "Options": [
            "a) IMockBuilder<T>",
            "b) IMocker<T>",
            "c) IBuilder<T>expect(T value)",
            "d) MockBuilder<T>"
        ],
        "Answer": "Answer: a\nExplanation: The MockBuilder class implements the ImockBuilder<T> interface."
    },
    {
        "id": 386,
        "Question": "____________ creates a control of the requested type.",
        "Options": [
            "a) createControl()",
            "b) createControl(MockType type)",
            "c) createNiceControl()",
            "d) createNiceMock(Class<T> toMock)"
        ],
        "Answer": "Answer: b\nExplanation: createControl(MockType type) returns an ImocksControl object."
    },
    {
        "id": 387,
        "Question": "_____________ returns the expectation setter for the last expected invocation in the current thread.",
        "Options": [
            "a) createControl()",
            "b) createControl(MockType type)",
            "c) createNiceControl()",
            "d) expect(T value)"
        ],
        "Answer": "Answer: d\nExplanation: The parameter value is used to transport the type to the ExpectationSetter."
    },
    {
        "id": 388,
        "Question": "_____________ expects a comparable argument greater than or equal the given value.",
        "Options": [
            "a) anyObject()",
            "b) anyString()",
            "c) geq(Comparable<T> value)",
            "d) anyDouble()"
        ],
        "Answer": "Answer: b\nExplanation: anyObject() expects any object argument."
    },
    {
        "id": 389,
        "Question": "______________ create a new capture instance that will keep only the last captured value.",
        "Options": [
            "a) newCapture()",
            "b) makeThreadSafe()",
            "c) createNiceControl()",
            "d) createNiceMock(Class<T> toMock)"
        ],
        "Answer": "Answer: c\nExplanation: geq stands for greater than or equal."
    },
    {
        "id": 390,
        "Question": "_____________ reports an argument matcher.",
        "Options": [
            "a) newCapture()",
            "b) makeThreadSafe()",
            "c) reportMatcher(IArgumentMatcher matcher)",
            "d) createNiceMock(Class<T> toMock)"
        ],
        "Answer": "Answer: a\nExplanation: Unless NOT_THREAD_SAFE_BY_DEFAULT is set, a mock is thread safe."
    },
    {
        "id": 391,
        "Question": "The _______________ interface decides whether an actual argument is accepted.",
        "Options": [
            "a) IMockBuilder<T>",
            "b) IMocker<T>",
            "c) IBuilder<T>expect(T value)",
            "d) IArgumentMatcher"
        ],
        "Answer": "Answer: a\nExplanation: The newCapture method without arguments creates a new capture."
    },
    {
        "id": 392,
        "Question": "The __________ interface allows setting expectations for an associated expected invocation.",
        "Options": [
            "a) IMocksControl",
            "b) IExpectationSetters<T>",
            "c) IExpectation<T>",
            "d) Isetters<T>"
        ],
        "Answer": "Answer: b\nExplanation: The IexpectationSetters<T> interface is extended and allows setting expectation for the expected invocation."
    },
    {
        "id": 393,
        "Question": "_____________ function expect the last invocation any times.",
        "Options": [
            "a) andStubReturn(T value)",
            "b) andThrow(Throwable throwable)",
            "c) anyTimes()",
            "d) asStub()"
        ],
        "Answer": "Answer: c\nExplanation: anyTimes() returns IExpectationSetters<T> object to allow method call chaining."
    },
    {
        "id": 394,
        "Question": "______________ sets stub behavior for the expected invocation.",
        "Options": [
            "a) andStubReturn(T value)",
            "b) andThrow(Throwable throwable)",
            "c) anyTimes()",
            "d) asStub()"
        ],
        "Answer": "Answer: d\nExplanation: Setting the stub behavior is needed for void methods."
    },
    {
        "id": 395,
        "Question": "_______________ expect the last invocation between min and max times.",
        "Options": [
            "a) times(int count)",
            "b) times(int min, int max)",
            "c) once()",
            "d) asStub()"
        ],
        "Answer": "Answer: b\nExplanation: The max and min values are passed as arguments in the function definition times(int min, int max)."
    },
    {
        "id": 396,
        "Question": "____________ expect the last invocation a specified number of times.",
        "Options": [
            "a) times(int count)",
            "b) times(int min, int max)",
            "c) once()",
            "d) asStub()"
        ],
        "Answer": "Answer: a\nExplanation: times (int count) specifies the number of times to expect the last invocation via the count argument."
    },
    {
        "id": 397,
        "Question": "_____________ sets a stub object that will be used for the calculation of the answer for the expected invocation.",
        "Options": [
            "a) andAnswer(IAnswer<? extends T>answer)",
            "b) andDelegateTo(Object delegateTo)",
            "c) andStubAnswer(IAnswer<? extends T> answer)",
            "d) andThrow(Throwable throwable)"
        ],
        "Answer": "Answer: c\nExplanation: andStubAnswer(IAnswer<? extends T>answer) either returns a value, or throws an exception."
    },
    {
        "id": 398,
        "Question": "_______________ sets a stub object implementing the same interface as the mock.",
        "Options": [
            "a) andAnswer(IAnswer<? extends T> answer)",
            "b) andDelegateTo(Object delegateTo)",
            "c) andStubAnswer(IAnswer<? extends T> answer)",
            "d) andStubDelegateTo(Object delegateTo)"
        ],
        "Answer": "Answer: d\nExplanation: The expected method call will be delegated to it with the actual arguments."
    },
    {
        "id": 399,
        "Question": "_____________ records a call but returns nothing.",
        "Options": [
            "a) andVoid()",
            "b) times(int min, int max)",
            "c) once()",
            "d) asStub()"
        ],
        "Answer": "Answer: a\nExplanation: andVoid() is used to chain calls on void methods expectLastCall(), andThrow(e), andVoid()."
    },
    {
        "id": 400,
        "Question": "_____________ expects the last invocation once.",
        "Options": [
            "a) andVoid()",
            "b) times(int min, int max)",
            "c) once()",
            "d) asStub()"
        ],
        "Answer": "Answer: c\nExplanation: This is the default in EasyMock."
    },
    {
        "id": 401,
        "Question": "_______________ sets a return value that will be returned for the expected invocation.",
        "Options": [
            "a) andReturn(T value)",
            "b) times(int min, int max)",
            "c) once()",
            "d) asStub()"
        ],
        "Answer": "Answer: a\nExplanation: The andReturn( T value)  take as an argument value, which is the value to return."
    },
    {
        "id": 402,
        "Question": "_______________ contains implementations of the core interfaces that are used to adjust or extend jMock’s basic functionality.",
        "Options": [
            "a) org.jmock",
            "b) org.jmock.api",
            "c) org.jmock.lib",
            "d) org.jmock.integration.junit3"
        ],
        "Answer": "Answer: c\nExplanation: The org.jmock.lib package contains implementations of the core interfaces."
    },
    {
        "id": 403,
        "Question": "______________ integrates jMock with JUnit 3.",
        "Options": [
            "a) org.jmock",
            "b) org.jmock.api",
            "c) org.jmock.lib",
            "d) org.jmock.integration.junit3"
        ],
        "Answer": "Answer: d\nExplanation: org.jmock.integration.junit4 is used to integrate jMock with JUnit 4."
    },
    {
        "id": 404,
        "Question": "Which package contains interfaces that define jMock’s Domain Specific Embedded Language?",
        "Options": [
            "a) org.jmock",
            "b) org.jmock.syntax",
            "c) org.jmock.lib",
            "d) org.jmock.integration.junit3"
        ],
        "Answer": "Answer: b\nExplanation: org.jmock.syntax defines interfaces that define jMock’s Domain Specific Embedded Language."
    },
    {
        "id": 405,
        "Question": "________________ contains classes to help test concurrent code with jMock.",
        "Options": [
            "a) org.jmock.concurrent",
            "b) org.jmock.syntax",
            "c) org.jmock.lib",
            "d) org.jmock.integration.junit3"
        ],
        "Answer": "Answer: a\nExplanation: The classes defined under org.jmock.concurrent help test concurrent code with jMock."
    },
    {
        "id": 406,
        "Question": "______________ is a class that “blitzes” an object by calling it many times, from multiple threads.",
        "Options": [
            "a) Blitzer",
            "b) DeterministicExecutor",
            "c) DeterministicScheduler",
            "d) Synchroniser"
        ],
        "Answer": "Answer: a\nExplanation: The Blitzer class calls an object many times from different and multiple threads."
    },
    {
        "id": 407,
        "Question": "__________ class is an Executor that executes commands on the thread that calls runPendingCommands or runUntilIdle.",
        "Options": [
            "a) Blitzer",
            "b) DeterministicExecutor",
            "c) DeterministicScheduler",
            "d) Synchroniser"
        ],
        "Answer": "Answer: b\nExplanation: The DeterministicExecutor executes commands on the thread calling runPendingCommands."
    },
    {
        "id": 408,
        "Question": "____________ Exception is thrown to report that a DeterministicScheduler has been asked to perform a blocking wait, which is not supported.",
        "Options": [
            "a) UnsupportedSynchronousOperationException",
            "b) ArrayIndexOutOfBounds",
            "c) StringIndexoutOfBounds",
            "d) Arithmetic"
        ],
        "Answer": "Answer: a\nExplanation: UnsupportedSynchronousOperationException reports that a DeterministicSchedular has been asked to perform a blocking wait."
    },
    {
        "id": 409,
        "Question": "______________ is a ScheduledExecutorService that executes commands on the thread that calls runNextPendingCommand, runUntilIdle or tick.",
        "Options": [
            "a) Blitzer",
            "b) DeterministicExecutor",
            "c) DeterministicScheduler",
            "d) Synchroniser"
        ],
        "Answer": "Answer: a\nExplanation: DeterministicScheduler executes on the thread calling runNextPendingCommand."
    },
    {
        "id": 410,
        "Question": "___________ is a ThreadingPolicy that makes the Mockery thread-safe and helps tests synchronize with background threads.",
        "Options": [
            "a) Blitzer",
            "b) DeterministicExecutor",
            "c) DeterministicScheduler",
            "d) Synchroniser"
        ],
        "Answer": "Answer: d\nExplanation: The Synchroniser class is used to make mockery thread safe."
    },
    {
        "id": 411,
        "Question": "____________ Interface objects executes submitted Runnable tasks.",
        "Options": [
            "a) Executor",
            "b) Execution",
            "c) Runner",
            "d) RunWith"
        ],
        "Answer": "Answer: a\nExplanation: Executor interface provides a way of decoupling task submission."
    },
    {
        "id": 412,
        "Question": "The Executor implementations provided implement ____________ which is a more extensive interface.",
        "Options": [
            "a) ExecutorService",
            "b) ThreadPoolExecutor",
            "c) ArrayDeque",
            "d) SerialExecutor"
        ],
        "Answer": "Answer: a\nExplanation: The ExecutorService interface is extended and implemented by the Executor implementations."
    },
    {
        "id": 413,
        "Question": "The __________ command executes the given command at some time in the future.",
        "Options": [
            "a) Execution()",
            "b) execute(Runnable command)",
            "c) scheduleNext()",
            "d) poll()"
        ],
        "Answer": "Answer: b\nExplanation: The command may execute in a new thread, in a pooled thread, or in the calling thread."
    },
    {
        "id": 414,
        "Question": "The _____________ exception can be thrown by the execute(Runnable command) function.",
        "Options": [
            "a) Arithmetic",
            "b) ArrayIndexOutOfBounds",
            "c) StringIndexOutOfBounds",
            "d) RejectedExecutionException"
        ],
        "Answer": "Answer: d\nExplanation: RejectedExecutionException is thrown if the task cannot be accepted for execution."
    },
    {
        "id": 415,
        "Question": "Other than RejectedExecutionException, the execute(Runnable command) function can also throw which exception?",
        "Options": [
            "a) Arithmetic",
            "b) ArrayIndexOutOfBounds",
            "c) StringIndexOutOfBounds",
            "d) NullPointerException"
        ],
        "Answer": "Answer: d\nExplanation: This exception is thrown if the command passed as argument is null."
    },
    {
        "id": 416,
        "Question": "______________ runs all commands that are currently pending.",
        "Options": [
            "a) runUntilIdle",
            "b) runPendingCommands",
            "c) execute",
            "d) isIdle"
        ],
        "Answer": "Answer: b\nExplanation: If those commands also schedule commands for execution, the scheduled commands will not be executed."
    },
    {
        "id": 417,
        "Question": "____________ runs executed commands until there are no commands pending execution.",
        "Options": [
            "a) runUntilIdle",
            "b) runPendingCommands",
            "c) execute",
            "d) isIdle"
        ],
        "Answer": "Answer: a\nExplanation: runUntilIdle does not tick time forward but just runs executed commands."
    },
    {
        "id": 418,
        "Question": "____________ returns whether this executor is idle.",
        "Options": [
            "a) runUntilIdle",
            "b) runPendingCommands",
            "c) execute",
            "d) isIdle"
        ],
        "Answer": "Answer: d\nExplanation: isIdle() function checks that there are no pending background tasks waiting to be run."
    },
    {
        "id": 419,
        "Question": "____________ runs time forwards by a given duration, executing any commands scheduled for execution during that time period.",
        "Options": [
            "a) runUntilIdle",
            "b) runPendingCommands",
            "c) tick",
            "d) isIdle"
        ],
        "Answer": "Answer: c\nExplanation: The tick() command also runs any background tasks spawned by the scheduled tasks."
    },
    {
        "id": 420,
        "Question": "________________ blocks until all tasks have completed execution after a shutdown request, or the timeout occurs.",
        "Options": [
            "a) awaitTermination",
            "b) runPendingCommands",
            "c) tick",
            "d) isIdle"
        ],
        "Answer": "Answer: a\nExplanation: Since the spawned background tasks are run the executor remains idle."
    },
    {
        "id": 421,
        "Question": "________ submits a value-returning task for execution and returns a Future representing the pending results of the task.",
        "Options": [
            "a) submit(Callable<T> task)",
            "b) awaitTermination",
            "c) submit(Runnable task, T result)",
            "d) invokeAll()"
        ],
        "Answer": "Answer: a\nExplanation: The Future’s get method will return the task’s result upon successful completion."
    },
    {
        "id": 422,
        "Question": "____________ submits a Runnable task for execution and returns a Future representing that task.",
        "Options": [
            "a) submit(Callable<T> task)",
            "b) awaitTermination",
            "c) submit(Runnable task, T result)",
            "d) invokeAll()"
        ],
        "Answer": "Answer: c\nExplanation: The function takes as parameters the task to submit and the result to return."
    },
    {
        "id": 423,
        "Question": "_____________ returns true if all tasks have completed following shut down.",
        "Options": [
            "a) submit(Callable<T> task)",
            "b) isTerminated",
            "c) submit(Runnable task, T result)",
            "d) invokeAll()"
        ],
        "Answer": "Answer: b\nExplanation: isTerminated is never true unless either shutdown or shutdownNow was called first."
    },
    {
        "id": 424,
        "Question": "_____________ returns true if this executor has been shut down.",
        "Options": [
            "a) isShutdown",
            "b) isTerminated",
            "c) submit(Runnable task, T result)",
            "d) invokeAll()"
        ],
        "Answer": "Answer: a\nExplanation: The isShutdown() method is used to check whether the executor has been shut down."
    },
    {
        "id": 425,
        "Question": "_______________ is used for the execution of the given tasks, returning a list of Futures holding their status and results after completion.",
        "Options": [
            "a) isShutdown",
            "b) isTerminated",
            "c) invokeAll(Collection<? extends Callable<T>> tasks)",
            "d) invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"
        ],
        "Answer": "Answer: c\nExplanation: Future.isDone() is true for each element of the returned list."
    },
    {
        "id": 426,
        "Question": "______________ executes the given tasks, returning the result of one that has completed successfully.",
        "Options": [
            "a) isShutdown",
            "b) invokeAny(Collection<? extends Callable<T>> tasks)",
            "c) invokeAll(Collection<? extends Callable<T>> tasks)",
            "d) invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"
        ],
        "Answer": "Answer: b\nExplanation: Upon normal or exceptional return, tasks that have not completed are cancelled."
    },
    {
        "id": 427,
        "Question": "_____________ exception is thrown while invokeAll() is interrupted while waiting.",
        "Options": [
            "a) InterruptedException",
            "b) NullPointerException",
            "c) RejectedExecutionException",
            "d) ArrayIndexOutOfBoundsException"
        ],
        "Answer": "Answer: a\nExplanation: If the exception is thrown, the unfinished tasks are cancelled."
    },
    {
        "id": 428,
        "Question": "________________ initiates an orderly shutdown in which previously submitted tasks are executed.",
        "Options": [
            "a) Shutdown",
            "b) invokeAny(Collection<? extends Callable<T>> tasks)",
            "c) invokeAll(Collection<? extends Callable<T>> tasks)",
            "d) invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"
        ],
        "Answer": "Answer: a\nExplanation: If any of the tasks or elements are null, the methods throws a NullPointerException."
    },
    {
        "id": 429,
        "Question": "The __________ package contains plugins that make it easier to use jMock with legacy code.",
        "Options": [
            "a) org.jmock.api",
            "b) org.jmock.lib.action",
            "c) org.jmock.lib.script",
            "d) org.jmock.lib.legacy"
        ],
        "Answer": "Answer: d\nExplanation: org.jmock.lib.legacy contains several plugins that make it suitable to use jMock with legacy code."
    },
    {
        "id": 430,
        "Question": "_____________ class enables to imposterise abstract and concrete classes without calling the constructors of the mocked class.",
        "Options": [
            "a) ClassImposteriser",
            "b) Imposteriser",
            "c) ImposterisingClass",
            "d) Imposter"
        ],
        "Answer": "Answer: a\nExplanation: The ClassImposteriser implements Imposteriser interface."
    },
    {
        "id": 431,
        "Question": "________ method reports if the Imposteriser is able to imposterise a given type.",
        "Options": [
            "a) canImposterise(Class<?> type)",
            "b) Imposterise(Class<?> type)",
            "c) imposterise(Invokable mockObject, Class<T> mockedType, Class<?>… ancilliaryTypes)",
            "d) imposter()"
        ],
        "Answer": "Answer: a\nExplanation: canImposterise(Class<?> type) returns true if this imposteriser can imposterise type, false otherwise."
    },
    {
        "id": 432,
        "Question": "___________ creates an imposter for a given type that forwards Invocations to an Invokable object.",
        "Options": [
            "a) canImposterise(Class<?> type)",
            "b) Imposterise(Class<?> type)",
            "c) imposterise(Invokable mockObject, Class<T> mockedType, Class<?>… ancilliaryTypes)",
            "d) imposter()"
        ],
        "Answer": "Answer: c\nExplanation:  imposterise(Invokable mockObject, Class<T> mockedType, Class<?>… ancilliaryTypes) returns a new imposter. The imposter must implement the mockedType and all the ancialliaryTypes."
    },
    {
        "id": 433,
        "Question": " The __________ package contains plugins that make it easier to write custom actions by scripting their behaviour with BeanShell.",
        "Options": [
            "a) org.jmock.api",
            "b) org.jmock.lib.action",
            "c) org.jmock.lib.script",
            "d) org.jmock.lib.legacy"
        ],
        "Answer": "Answer: b\nExplanation: The mockType parameter of imposterise() is the class representing the static type of the imposter."
    },
    {
        "id": 434,
        "Question": "___________ class is an Action that executes a BeanShell script.",
        "Options": [
            "a) ScriptedAction",
            "b) Scripted",
            "c) Action",
            "d) ScriptedActionClass"
        ],
        "Answer": "Answer: a\nExplanation: The types must all be interfaces because Java only allows single inheritance of classes."
    },
    {
        "id": 435,
        "Question": "______________ method performs an action in response to an invocation.",
        "Options": [
            "a) describeTo(Description description)",
            "b) invoke(Invocation invocation)",
            "c) perform(String script)",
            "d) where(String name, Object value)"
        ],
        "Answer": "Answer: c\nExplanation:  org.jmock.lib.script is the package containing plugins to write custom actions by scripting."
    },
    {
        "id": 436,
        "Question": "The invoke method throws which exception?",
        "Options": [
            "a) ArrayIndexOutOfBounds",
            "b) StringIndexOutOfBounds",
            "c) Throwable",
            "d) NullPointer"
        ],
        "Answer": "Answer: a\nExplanation: ScriptedAction class makes it easy to implement custom actions."
    },
    {
        "id": 437,
        "Question": "___________ creates an action that performs the given script.",
        "Options": [
            "a) describeTo(Description description)",
            "b) invoke(Invocation invocation)",
            "c) perform(String script)",
            "d) where(String name, Object value)"
        ],
        "Answer": "Answer: c\nExplanation: The perform methods takes  a BeanShell script as a parameter."
    },
    {
        "id": 438,
        "Question": "____________ defines a variable that can be referred to by the script.",
        "Options": [
            "a) describeTo(Description description)",
            "b) invoke(Invocation invocation)",
            "c) perform(String script)",
            "d) where(String name, Object value)"
        ],
        "Answer": "Answer: d\nExplanation: The where() function returns the action, so that more variables can be defined if needed."
    },
    {
        "id": 439,
        "Question": "____________ package contains actions that fake the behavior of mocked invocations.",
        "Options": [
            "a) org.jmock",
            "b) org.jmock.lib.action",
            "c) org.jmock.lib",
            "d) org.jmock.lib.script"
        ],
        "Answer": "Answer: b\nExplanation: org.jmock.lib.action contains actions that fake the behavior of mocked invocations."
    },
    {
        "id": 440,
        "Question": "_____________ returns the next of a sequence of elements each time it is invoked.",
        "Options": [
            "a) ActionSequence",
            "b) CustomAction",
            "c) DoAllAction",
            "d) ReturnValueAction"
        ],
        "Answer": "Answer: a\nExplanation: The ActionSequence methods takes as a parameter the invocation to perform."
    },
    {
        "id": 441,
        "Question": "The exception thrown by the ActionSequence mehod is _____________",
        "Options": [
            "a) NullPointer",
            "b) Throwable",
            "c) ArrayIndexOutOfBounds",
            "d) Arithmetic"
        ],
        "Answer": "Answer: b\nExplanation: Any checked exception thrown must be in the throws list of the invoked method."
    },
    {
        "id": 442,
        "Question": "______________ is a partial implementation of the Action interface that making it easy to implement actions specific to applications with inline anonymous classes.",
        "Options": [
            "a) ActionSequence",
            "b) CustomAction",
            "c) DoAllAction",
            "d) ReturnValueAction"
        ],
        "Answer": "Answer: b\nExplanation: The CustomAction class is a partial implementation of the Action interface."
    },
    {
        "id": 443,
        "Question": "_____________ performs multiple actions every time it is invoked.",
        "Options": [
            "a) ActionSequence",
            "b) CustomAction",
            "c) DoAllAction",
            "d) ReturnValueAction"
        ],
        "Answer": "Answer: c\nExplanation: The DoAllAction class implements the Action interface."
    },
    {
        "id": 444,
        "Question": "___________ returns an Enumeration over a collection.",
        "Options": [
            "a) ActionSequence",
            "b) CustomAction",
            "c) DoAllAction",
            "d) ReturnEnumerationAction"
        ],
        "Answer": "Answer: d\nExplanation: The class definition is public ReturnEnumerationAction(Object… array)."
    },
    {
        "id": 445,
        "Question": "___________ returns an iterator over a collection.",
        "Options": [
            "a) ActionSequence",
            "b) CustomAction",
            "c) ReturnIteratorAction",
            "d) ReturnEnumerationAction"
        ],
        "Answer": "Answer: c\nExplanation: The constructors are public ReturnIteratorAction(Collection<?> collection) and public ReturnIteratorAction(Object… array)."
    },
    {
        "id": 446,
        "Question": "____________ translates ExpectationErrors into AssertionErrors that several test frameworks, including JUnit 4 and TestNG, use to report errors.",
        "Options": [
            "a) AssertionErrorTranslator",
            "b) CamelCaseNamingScheme",
            "c) CurrentStateMatcher",
            "d) IdentityExpectationErrorTranslator"
        ],
        "Answer": "Answer: a\nExplanation: The AssertionErrorTranslator is a class that translates ExpectationErrors into AssertionErrors."
    },
    {
        "id": 447,
        "Question": "__________ is an ExpectationErrorTranslator that doesn’t do any translation.",
        "Options": [
            "a) AssertionErrorTranslator",
            "b) CamelCaseNamingScheme",
            "c) CurrentStateMatcher",
            "d) IdentityExpectationErrorTranslator"
        ],
        "Answer": "Answer: b\nExplanation: The CamelCaseNamingScheme is the class which defines a naming for mock objects."
    },
    {
        "id": 448,
        "Question": "__________ is an Imposteriser that uses the Proxy class of the Java Reflection API.",
        "Options": [
            "a) AssertionErrorTranslator",
            "b) CamelCaseNamingScheme",
            "c) JavaReflectionImposteriser",
            "d) IdentityExpectationErrorTranslator"
        ],
        "Answer": "Answer: d\nExplanation: IdentityExpectationErrorTranslator returns the ExpectationError it is given."
    },
    {
        "id": 449,
        "Question": "___________ is a naming scheme in which the implicit name for a mock object is the last word of the mocked type’s name in lower case.",
        "Options": [
            "a) AssertionErrorTranslator",
            "b) CamelCaseNamingScheme",
            "c) JavaReflectionImposteriser",
            "d) LastWordNamingScheme"
        ],
        "Answer": "Answer: c\nExplanation: The JavaReflectionImposteriser class makes use of the Proxy class of the Java Reflection API."
    },
    {
        "id": 450,
        "Question": "__________ is a naming scheme in which the implicit name for a mock object is the mocked type’s name prepend with “mock”.",
        "Options": [
            "a) RetroNamingScheme",
            "b) CamelCaseNamingScheme",
            "c) JavaReflectionImposteriser",
            "d) LastWordNamingScheme"
        ],
        "Answer": "Answer: d\nExplanation: The LastWordNamingScheme class defines a naming scheme for mock objects."
    },
    {
        "id": 451,
        "Question": "__________ function translates the given ExpectationError into an error type compatible with another testing framework.",
        "Options": [
            "a) change()",
            "b) translate()",
            "c) compatible()",
            "d) mock()"
        ],
        "Answer": "Answer: a\nExplanation: The RetroNamingScheme class defines a naming scheme with the prefix of “mock” for mock objects."
    },
    {
        "id": 452,
        "Question": "___________ interface defines a sequence of expectations.",
        "Options": [
            "a) Sequence",
            "b) States",
            "c) Expectations",
            "d) Mockery"
        ],
        "Answer": "Answer: b\nExplanation: Translate() returns an error that is compatible with another testing framework and contains the same message and stack trace as the passed parameter."
    },
    {
        "id": 453,
        "Question": "__________ is an interface which defines a state machine that is used to constrain the order of invocations.",
        "Options": [
            "a) Sequence",
            "b) States",
            "c) Expectations",
            "d) Mockery"
        ],
        "Answer": "Answer: a\nExplanation: Invocations can be constrained to occur in a strict order defined by a sequence."
    },
    {
        "id": 454,
        "Question": "____________ class represents the context, or neighborhood, of the object(s) under test.",
        "Options": [
            "a) Sequence",
            "b) States",
            "c) Expectations",
            "d) Mockery"
        ],
        "Answer": "Answer: b\nExplanation: The States interface defines the state machine."
    },
    {
        "id": 455,
        "Question": "____________ translates ExpectationErrors into JUnit’s AssertionFailedErrors.",
        "Options": [
            "a) JUnit3ErrorTranslator",
            "b) JUnit3Mockery",
            "c) MockObjectTestCase",
            "d) VerifyingTestCase"
        ],
        "Answer": "Answer: a\nExplanation:JUnit3ErrorTranslator translate Expectation Errors into JUnit AssertionFailedErrors."
    },
    {
        "id": 456,
        "Question": "__________ is a TestCase that supports testing with mock objects.",
        "Options": [
            "a) JUnit3ErrorTranslator",
            "b) JUnit3Mockery",
            "c) MockObjectTestCase",
            "d) VerifyingTestCase"
        ],
        "Answer": "Answer: a\nExplanation: JUnit3Mockery is used to report expectation errors."
    },
    {
        "id": 457,
        "Question": "____________ is a TestCase that verifies postconditions after the test has run and before the fixture has been torn down.",
        "Options": [
            "a) JUnit3ErrorTranslator",
            "b) JUnit3Mockery",
            "c) MockObjectTestCase",
            "d) VerifyingTestCase"
        ],
        "Answer": "Answer: a\nExplanation: MockObjectTestCase is used for testing mock objects."
    },
    {
        "id": 458,
        "Question": "A _________ is a JUnit Rule that manages JMock expectations and allowances.",
        "Options": [
            "a) JunitRuleMockery",
            "b) JmockRuleMockery",
            "c) JunitRule",
            "d) JunitMockery"
        ],
        "Answer": "Answer: a\nExplanation: VerifyingTestCase is a class that verifies post conditions."
    },
    {
        "id": 459,
        "Question": "The __________ class provides factory methods for the executor services provided in the package.",
        "Options": [
            "a) Executors",
            "b) Exceptions",
            "c) ReadOnly",
            "d) AbstractMock"
        ],
        "Answer": "Answer: b\nExplanation: To write a mock object test in JUnit 3, MockObjectTestCase needs to be extended."
    },
    {
        "id": 460,
        "Question": "A __________ offers services for the components it’s hosting, such as lifecycle, security, transaction, distribution, and so forth.",
        "Options": [
            "a) Component",
            "b) Container",
            "c) Mock",
            "d) Appraisal"
        ],
        "Answer": "Answer: a\nExplanation: JunitRuleMockery asserts that expectations have been met after each test has finished."
    },
    {
        "id": 461,
        "Question": "Stubs work well to ________ a given class for testing and asserting the state of its instances.",
        "Options": [
            "a) Delete",
            "b) Enhance",
            "c) Isolate",
            "d) Append"
        ],
        "Answer": "Answer: a\nExplanation: The Executors class has factory methods for the  executor services."
    },
    {
        "id": 462,
        "Question": "The biggest advantage of mock objects over in-container testing is that mocks don’t require a ________ container in order to execute tests.",
        "Options": [
            "a) Running",
            "b) Closed",
            "c) Open",
            "d) Static"
        ],
        "Answer": "Answer: a\nExplanation: Tests can be set up quickly and run quickly when using mock objects."
    },
    {
        "id": 463,
        "Question": "___________ contains helper classes for ant properties.",
        "Options": [
            "a) org.apache.tools.ant.property",
            "b) org.apache.tools.ant.types",
            "c) org.apache.tools.ant.util",
            "d) org.apache.tools.ant.taskdefs"
        ],
        "Answer": "Answer: a\nExplanation: The package org.apache.tools.ant.property of apache ant contains helper classes for ant properties."
    },
    {
        "id": 464,
        "Question": "____________ is the interface to a class to get a property in apache ant.",
        "Options": [
            "a) ParseNextProperty",
            "b) PropertyExpander",
            "c) GetProperty",
            "d) LocalProperties"
        ],
        "Answer": "Answer: c\nExplanation: The GetProperty interface is normally the interface to the PropertyHelper class."
    },
    {
        "id": 465,
        "Question": "___________ is a thread local class containing local properties.",
        "Options": [
            "a) ParseNextProperty",
            "b) PropertyExpander",
            "c) GetProperty",
            "d) LocalProperties"
        ],
        "Answer": "Answer: d\nExplanation: The LocalProperties is a class of org.apache.tools.ant.property that contains local properties."
    },
    {
        "id": 466,
        "Question": "___________ is the class to resolve properties in a map.",
        "Options": [
            "a) LocalPropertyStack",
            "b) ResolvePropertyMap",
            "c) NullReturn",
            "d) ParseProperties"
        ],
        "Answer": "Answer: b\nExplanation: The ResolvePropertyMap class is used to resolve properties in a map."
    },
    {
        "id": 467,
        "Question": "___________ parses properties using a collection of expanders.",
        "Options": [
            "a) LocalPropertyStack",
            "b) ResolvePropertyMap",
            "c) NullReturn",
            "d) ParseProperties"
        ],
        "Answer": "Answer: d\nExplanation: The constructor of the ParseProperties class is public ParseProperties(Project project,java.util.Collection <PropertyExpander> expanders, GetProperty getProperty)."
    },
    {
        "id": 468,
        "Question": "_________ is a class to represent a null and to stop the chain of lookups.",
        "Options": [
            "a) LocalPropertyStack",
            "b) ResolvePropertyMap",
            "c) NullReturn",
            "d) ParseProperties"
        ],
        "Answer": "Answer: c\nExplanation: The NullReturn class is the apache ant class representation of Null."
    },
    {
        "id": 469,
        "Question": "________________ interface is used by ant attributes.",
        "Options": [
            "a) EnableAttribute",
            "b) PropertyExpander",
            "c) GetProperty",
            "d) LocalProperties"
        ],
        "Answer": "Answer: a\nExplanation: The EnableAttribute interface is used by all apache ant attributes."
    },
    {
        "id": 470,
        "Question": "_____________ class is used to indicate that the XML namespace (URI) can be used to look for namespace attributes.",
        "Options": [
            "a) AttributeNamespace",
            "b) BaseIfAttribute",
            "c) IfBlankAttribute",
            "d) IfSetAttribute"
        ],
        "Answer": "Answer: a\nExplanation: The AttributeNamespace class is useful for indication of XML namespace."
    },
    {
        "id": 471,
        "Question": "____________ is an abstract class for if/unless attributes.",
        "Options": [
            "a) AttributeNamespace",
            "b) BaseIfAttribute",
            "c) IfBlankAttribute",
            "d) IfSetAttribute"
        ],
        "Answer": "Answer: b\nExplanation: BaseIfAttribute contains a Boolean flag to specify whether this is an, if or unless attribute."
    },
    {
        "id": 472,
        "Question": "_____________ checks if an attribute is blank or not.",
        "Options": [
            "a) BaseIfAttribute",
            "b) IfBlankAttribute",
            "c) IfTrueAttribute",
            "d) IfSetAttribute"
        ],
        "Answer": "Answer: b\nExplanation: IfBlankAttribute.Unless is the “unless” version of ifBlankAttribute."
    },
    {
        "id": 473,
        "Question": "______________ check if an attribute value is true or not.",
        "Options": [
            "a) BaseIfAttribute",
            "b) IfBlankAttribute",
            "c) IfTrueAttribute",
            "d) IfSetAttribute"
        ],
        "Answer": "Answer: c\nExplanation: IfTrueAttribute.Unless is the “unless” version of ifTrueAttribute."
    },
    {
        "id": 474,
        "Question": "_____________ is an interface indicating that a reader may be chained to another one.",
        "Options": [
            "a) TokenFilter.Filter",
            "b) BaseFilterReader",
            "c) BaseParamFilterReader",
            "d) ChainableReader"
        ],
        "Answer": "Answer: d\nExplanation:  The ChainableReader interface indicates that a reader may be chained to another one."
    },
    {
        "id": 475,
        "Question": "______________ is the base class for core filter readers.",
        "Options": [
            "a) TokenFilter.Filter",
            "b) BaseFilterReader",
            "c) BaseParamFilterReader",
            "d) ChainableReader"
        ],
        "Answer": "Answer: b\nExplanation: The original filter reader is only used for chaining purposes, never for filtering purposes."
    },
    {
        "id": 476,
        "Question": "______________ is a parameterized base class for core filter readers.",
        "Options": [
            "a) TokenFilter.Filter",
            "b) BaseFilterReader",
            "c) BaseParamFilterReader",
            "d) ChainableReader"
        ],
        "Answer": "Answer: c\nExplanation: The constructor is public BaseParamFilterReader(java.io.Reader in)."
    },
    {
        "id": 477,
        "Question": "_______________ class is used for assembling the constants declared in a Java class in key1=value1(line separator)key2=value2 format.",
        "Options": [
            "a) ClassConstants",
            "b) BaseFilterReader",
            "c) BaseParamFilterReader",
            "d) ChainableReader"
        ],
        "Answer": "Answer: a\nExplanation: The ClassConstants filter uses the BCEL external toolkit."
    },
    {
        "id": 478,
        "Question": "______________ converts text to local OS formatting conventions along with repairing the text damaged by file transfer programs.",
        "Options": [
            "a) ClassConstants",
            "b) BaseFilterReader",
            "c) BaseParamFilterReader",
            "d) FixCrLfFilter"
        ],
        "Answer": "Answer: d\nExplanation:FixCrLfFilter  generalises the handling of EOL characters, and allows for CR-only line endings."
    },
    {
        "id": 479,
        "Question": "________________ reads the first n lines of a stream.",
        "Options": [
            "a) ClassConstants",
            "b) HeadFilter",
            "c) BaseParamFilterReader",
            "d) FixCrLfFilter"
        ],
        "Answer": "Answer: b\nExplanation: The constructor public HeadFilter(java.io.Reader in) creates a new filtered reader."
    },
    {
        "id": 480,
        "Question": "_______________ is a Sax2 based project reader.",
        "Options": [
            "a) AntXMLContext",
            "b) DefaultExecutor",
            "c) ProjectHelperImpl",
            "d) ProjectHelper2"
        ],
        "Answer": "Answer: d\nExplanation: ProjectHelper 2 can be used to check whether this instance of ProjectHelper can parse an Antlib descriptor given by the URL."
    },
    {
        "id": 481,
        "Question": "______________ is a “Single-check” Target executor implementation.",
        "Options": [
            "a) SingleCheckExecutor",
            "b) DefaultExecutor",
            "c) ProjectHelperImpl",
            "d) ProjectHelper2"
        ],
        "Answer": "Answer: a\nExplanation: SingleCheckExecutor differs from DefaultExecutor in that the dependencies for all targets are computed together."
    }
]